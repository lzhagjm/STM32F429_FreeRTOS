
STM32F429_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025db4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0004bd4c  08025f68  08025f68  00035f68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08071cb4  08071cb4  000909c8  2**0
                  CONTENTS
  4 .ARM          00000008  08071cb4  08071cb4  00081cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08071cbc  08071cbc  000909c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08071cbc  08071cbc  00081cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08071cc4  08071cc4  00081cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009c8  20000000  08071cc8  00090000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000909c8  2**0
                  CONTENTS
 10 .bss          00018070  200009c8  200009c8  000909c8  2**2
                  ALLOC
 11 ._user_heap_stack 00002000  20018a38  20018a38  000909c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000909c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000472ee  00000000  00000000  000909f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000b216  00000000  00000000  000d7ce6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003660  00000000  00000000  000e2f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003370  00000000  00000000  000e6560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003e5fe  00000000  00000000  000e98d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0005cc1b  00000000  00000000  00127ece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011f084  00000000  00000000  00184ae9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  002a3b6d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000f3ec  00000000  00000000  002a3bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200009c8 	.word	0x200009c8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08025f4c 	.word	0x08025f4c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200009cc 	.word	0x200009cc
 80001ec:	08025f4c 	.word	0x08025f4c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b974 	b.w	8000f68 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468e      	mov	lr, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14d      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4694      	mov	ip, r2
 8000caa:	d969      	bls.n	8000d80 <__udivmoddi4+0xe8>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b152      	cbz	r2, 8000cc8 <__udivmoddi4+0x30>
 8000cb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cb6:	f1c2 0120 	rsb	r1, r2, #32
 8000cba:	fa20 f101 	lsr.w	r1, r0, r1
 8000cbe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cc6:	4094      	lsls	r4, r2
 8000cc8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ccc:	0c21      	lsrs	r1, r4, #16
 8000cce:	fbbe f6f8 	udiv	r6, lr, r8
 8000cd2:	fa1f f78c 	uxth.w	r7, ip
 8000cd6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cda:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cde:	fb06 f107 	mul.w	r1, r6, r7
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cee:	f080 811f 	bcs.w	8000f30 <__udivmoddi4+0x298>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 811c 	bls.w	8000f30 <__udivmoddi4+0x298>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 f707 	mul.w	r7, r0, r7
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x92>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1c:	f080 810a 	bcs.w	8000f34 <__udivmoddi4+0x29c>
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	f240 8107 	bls.w	8000f34 <__udivmoddi4+0x29c>
 8000d26:	4464      	add	r4, ip
 8000d28:	3802      	subs	r0, #2
 8000d2a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2e:	1be4      	subs	r4, r4, r7
 8000d30:	2600      	movs	r6, #0
 8000d32:	b11d      	cbz	r5, 8000d3c <__udivmoddi4+0xa4>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c5 4300 	strd	r4, r3, [r5]
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0xc2>
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	f000 80ef 	beq.w	8000f2a <__udivmoddi4+0x292>
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d52:	4630      	mov	r0, r6
 8000d54:	4631      	mov	r1, r6
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	fab3 f683 	clz	r6, r3
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d14a      	bne.n	8000df8 <__udivmoddi4+0x160>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d302      	bcc.n	8000d6c <__udivmoddi4+0xd4>
 8000d66:	4282      	cmp	r2, r0
 8000d68:	f200 80f9 	bhi.w	8000f5e <__udivmoddi4+0x2c6>
 8000d6c:	1a84      	subs	r4, r0, r2
 8000d6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	469e      	mov	lr, r3
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d0e0      	beq.n	8000d3c <__udivmoddi4+0xa4>
 8000d7a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d7e:	e7dd      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000d80:	b902      	cbnz	r2, 8000d84 <__udivmoddi4+0xec>
 8000d82:	deff      	udf	#255	; 0xff
 8000d84:	fab2 f282 	clz	r2, r2
 8000d88:	2a00      	cmp	r2, #0
 8000d8a:	f040 8092 	bne.w	8000eb2 <__udivmoddi4+0x21a>
 8000d8e:	eba1 010c 	sub.w	r1, r1, ip
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f fe8c 	uxth.w	lr, ip
 8000d9a:	2601      	movs	r6, #1
 8000d9c:	0c20      	lsrs	r0, r4, #16
 8000d9e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000da2:	fb07 1113 	mls	r1, r7, r3, r1
 8000da6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000daa:	fb0e f003 	mul.w	r0, lr, r3
 8000dae:	4288      	cmp	r0, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x12c>
 8000db2:	eb1c 0101 	adds.w	r1, ip, r1
 8000db6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x12a>
 8000dbc:	4288      	cmp	r0, r1
 8000dbe:	f200 80cb 	bhi.w	8000f58 <__udivmoddi4+0x2c0>
 8000dc2:	4643      	mov	r3, r8
 8000dc4:	1a09      	subs	r1, r1, r0
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dcc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dd4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x156>
 8000ddc:	eb1c 0404 	adds.w	r4, ip, r4
 8000de0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000de4:	d202      	bcs.n	8000dec <__udivmoddi4+0x154>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f200 80bb 	bhi.w	8000f62 <__udivmoddi4+0x2ca>
 8000dec:	4608      	mov	r0, r1
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000df6:	e79c      	b.n	8000d32 <__udivmoddi4+0x9a>
 8000df8:	f1c6 0720 	rsb	r7, r6, #32
 8000dfc:	40b3      	lsls	r3, r6
 8000dfe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e02:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e06:	fa20 f407 	lsr.w	r4, r0, r7
 8000e0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0e:	431c      	orrs	r4, r3
 8000e10:	40f9      	lsrs	r1, r7
 8000e12:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e16:	fa00 f306 	lsl.w	r3, r0, r6
 8000e1a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e1e:	0c20      	lsrs	r0, r4, #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fb09 1118 	mls	r1, r9, r8, r1
 8000e28:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e2c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e30:	4288      	cmp	r0, r1
 8000e32:	fa02 f206 	lsl.w	r2, r2, r6
 8000e36:	d90b      	bls.n	8000e50 <__udivmoddi4+0x1b8>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e40:	f080 8088 	bcs.w	8000f54 <__udivmoddi4+0x2bc>
 8000e44:	4288      	cmp	r0, r1
 8000e46:	f240 8085 	bls.w	8000f54 <__udivmoddi4+0x2bc>
 8000e4a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e58:	fb09 1110 	mls	r1, r9, r0, r1
 8000e5c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e60:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e64:	458e      	cmp	lr, r1
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x1e2>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e70:	d26c      	bcs.n	8000f4c <__udivmoddi4+0x2b4>
 8000e72:	458e      	cmp	lr, r1
 8000e74:	d96a      	bls.n	8000f4c <__udivmoddi4+0x2b4>
 8000e76:	3802      	subs	r0, #2
 8000e78:	4461      	add	r1, ip
 8000e7a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e7e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e82:	eba1 010e 	sub.w	r1, r1, lr
 8000e86:	42a1      	cmp	r1, r4
 8000e88:	46c8      	mov	r8, r9
 8000e8a:	46a6      	mov	lr, r4
 8000e8c:	d356      	bcc.n	8000f3c <__udivmoddi4+0x2a4>
 8000e8e:	d053      	beq.n	8000f38 <__udivmoddi4+0x2a0>
 8000e90:	b15d      	cbz	r5, 8000eaa <__udivmoddi4+0x212>
 8000e92:	ebb3 0208 	subs.w	r2, r3, r8
 8000e96:	eb61 010e 	sbc.w	r1, r1, lr
 8000e9a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e9e:	fa22 f306 	lsr.w	r3, r2, r6
 8000ea2:	40f1      	lsrs	r1, r6
 8000ea4:	431f      	orrs	r7, r3
 8000ea6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eaa:	2600      	movs	r6, #0
 8000eac:	4631      	mov	r1, r6
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	f1c2 0320 	rsb	r3, r2, #32
 8000eb6:	40d8      	lsrs	r0, r3
 8000eb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ebc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ec0:	4091      	lsls	r1, r2
 8000ec2:	4301      	orrs	r1, r0
 8000ec4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec8:	fa1f fe8c 	uxth.w	lr, ip
 8000ecc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ed0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ed4:	0c0b      	lsrs	r3, r1, #16
 8000ed6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eda:	fb00 f60e 	mul.w	r6, r0, lr
 8000ede:	429e      	cmp	r6, r3
 8000ee0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x260>
 8000ee6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eea:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eee:	d22f      	bcs.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef0:	429e      	cmp	r6, r3
 8000ef2:	d92d      	bls.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4463      	add	r3, ip
 8000ef8:	1b9b      	subs	r3, r3, r6
 8000efa:	b289      	uxth	r1, r1
 8000efc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f00:	fb07 3316 	mls	r3, r7, r6, r3
 8000f04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f08:	fb06 f30e 	mul.w	r3, r6, lr
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x28a>
 8000f10:	eb1c 0101 	adds.w	r1, ip, r1
 8000f14:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f18:	d216      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d914      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1e:	3e02      	subs	r6, #2
 8000f20:	4461      	add	r1, ip
 8000f22:	1ac9      	subs	r1, r1, r3
 8000f24:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f28:	e738      	b.n	8000d9c <__udivmoddi4+0x104>
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e705      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e3      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6f8      	b.n	8000d2a <__udivmoddi4+0x92>
 8000f38:	454b      	cmp	r3, r9
 8000f3a:	d2a9      	bcs.n	8000e90 <__udivmoddi4+0x1f8>
 8000f3c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f40:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7a3      	b.n	8000e90 <__udivmoddi4+0x1f8>
 8000f48:	4646      	mov	r6, r8
 8000f4a:	e7ea      	b.n	8000f22 <__udivmoddi4+0x28a>
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	e794      	b.n	8000e7a <__udivmoddi4+0x1e2>
 8000f50:	4640      	mov	r0, r8
 8000f52:	e7d1      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f54:	46d0      	mov	r8, sl
 8000f56:	e77b      	b.n	8000e50 <__udivmoddi4+0x1b8>
 8000f58:	3b02      	subs	r3, #2
 8000f5a:	4461      	add	r1, ip
 8000f5c:	e732      	b.n	8000dc4 <__udivmoddi4+0x12c>
 8000f5e:	4630      	mov	r0, r6
 8000f60:	e709      	b.n	8000d76 <__udivmoddi4+0xde>
 8000f62:	4464      	add	r4, ip
 8000f64:	3802      	subs	r0, #2
 8000f66:	e742      	b.n	8000dee <__udivmoddi4+0x156>

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f72:	463b      	mov	r3, r7
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f7e:	4b21      	ldr	r3, [pc, #132]	; (8001004 <MX_ADC1_Init+0x98>)
 8000f80:	4a21      	ldr	r2, [pc, #132]	; (8001008 <MX_ADC1_Init+0x9c>)
 8000f82:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f84:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <MX_ADC1_Init+0x98>)
 8000f86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f8a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f8c:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <MX_ADC1_Init+0x98>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f92:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <MX_ADC1_Init+0x98>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f98:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <MX_ADC1_Init+0x98>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f9e:	4b19      	ldr	r3, [pc, #100]	; (8001004 <MX_ADC1_Init+0x98>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fa6:	4b17      	ldr	r3, [pc, #92]	; (8001004 <MX_ADC1_Init+0x98>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fac:	4b15      	ldr	r3, [pc, #84]	; (8001004 <MX_ADC1_Init+0x98>)
 8000fae:	4a17      	ldr	r2, [pc, #92]	; (800100c <MX_ADC1_Init+0xa0>)
 8000fb0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fb2:	4b14      	ldr	r3, [pc, #80]	; (8001004 <MX_ADC1_Init+0x98>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <MX_ADC1_Init+0x98>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <MX_ADC1_Init+0x98>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <MX_ADC1_Init+0x98>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fcc:	480d      	ldr	r0, [pc, #52]	; (8001004 <MX_ADC1_Init+0x98>)
 8000fce:	f002 f82d 	bl	800302c <HAL_ADC_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fd8:	f001 fb98 	bl	800270c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <MX_ADC1_Init+0xa4>)
 8000fde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe8:	463b      	mov	r3, r7
 8000fea:	4619      	mov	r1, r3
 8000fec:	4805      	ldr	r0, [pc, #20]	; (8001004 <MX_ADC1_Init+0x98>)
 8000fee:	f002 f9ff 	bl	80033f0 <HAL_ADC_ConfigChannel>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ff8:	f001 fb88 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ffc:	bf00      	nop
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	200009e4 	.word	0x200009e4
 8001008:	40012000 	.word	0x40012000
 800100c:	0f000001 	.word	0x0f000001
 8001010:	10000012 	.word	0x10000012

08001014 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0b      	ldr	r2, [pc, #44]	; (8001050 <HAL_ADC_MspInit+0x3c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d10d      	bne.n	8001042 <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <HAL_ADC_MspInit+0x40>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	4a09      	ldr	r2, [pc, #36]	; (8001054 <HAL_ADC_MspInit+0x40>)
 8001030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001034:	6453      	str	r3, [r2, #68]	; 0x44
 8001036:	4b07      	ldr	r3, [pc, #28]	; (8001054 <HAL_ADC_MspInit+0x40>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001042:	bf00      	nop
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	40012000 	.word	0x40012000
 8001054:	40023800 	.word	0x40023800

08001058 <get_cpu_temp>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
float get_cpu_temp(void){
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
	uint32_t val = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	607b      	str	r3, [r7, #4]
	HAL_ADC_Start(&hadc1);
 8001062:	4820      	ldr	r0, [pc, #128]	; (80010e4 <get_cpu_temp+0x8c>)
 8001064:	f002 f826 	bl	80030b4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 0xFFFF);
 8001068:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800106c:	481d      	ldr	r0, [pc, #116]	; (80010e4 <get_cpu_temp+0x8c>)
 800106e:	f002 f926 	bl	80032be <HAL_ADC_PollForConversion>
	val = HAL_ADC_GetValue(&hadc1);
 8001072:	481c      	ldr	r0, [pc, #112]	; (80010e4 <get_cpu_temp+0x8c>)
 8001074:	f002 f9ae 	bl	80033d4 <HAL_ADC_GetValue>
 8001078:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop(&hadc1);
 800107a:	481a      	ldr	r0, [pc, #104]	; (80010e4 <get_cpu_temp+0x8c>)
 800107c:	f002 f8ec 	bl	8003258 <HAL_ADC_Stop>
	return (((float)val * 3300/4096 - 760) / 2.5 + 25);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	ee07 3a90 	vmov	s15, r3
 8001086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800108a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80010e8 <get_cpu_temp+0x90>
 800108e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001092:	eddf 6a16 	vldr	s13, [pc, #88]	; 80010ec <get_cpu_temp+0x94>
 8001096:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800109a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80010f0 <get_cpu_temp+0x98>
 800109e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010a2:	ee17 0a90 	vmov	r0, s15
 80010a6:	f7ff fa5f 	bl	8000568 <__aeabi_f2d>
 80010aa:	f04f 0200 	mov.w	r2, #0
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <get_cpu_temp+0x9c>)
 80010b0:	f7ff fbdc 	bl	800086c <__aeabi_ddiv>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4610      	mov	r0, r2
 80010ba:	4619      	mov	r1, r3
 80010bc:	f04f 0200 	mov.w	r2, #0
 80010c0:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <get_cpu_temp+0xa0>)
 80010c2:	f7ff f8f3 	bl	80002ac <__adddf3>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4610      	mov	r0, r2
 80010cc:	4619      	mov	r1, r3
 80010ce:	f7ff fd7b 	bl	8000bc8 <__aeabi_d2f>
 80010d2:	4603      	mov	r3, r0
 80010d4:	ee07 3a90 	vmov	s15, r3
}
 80010d8:	eeb0 0a67 	vmov.f32	s0, s15
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200009e4 	.word	0x200009e4
 80010e8:	454e4000 	.word	0x454e4000
 80010ec:	45800000 	.word	0x45800000
 80010f0:	443e0000 	.word	0x443e0000
 80010f4:	40040000 	.word	0x40040000
 80010f8:	40390000 	.word	0x40390000

080010fc <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <MX_CRC_Init+0x20>)
 8001102:	4a07      	ldr	r2, [pc, #28]	; (8001120 <MX_CRC_Init+0x24>)
 8001104:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <MX_CRC_Init+0x20>)
 8001108:	f002 fc82 	bl	8003a10 <HAL_CRC_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001112:	f001 fafb 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000a2c 	.word	0x20000a2c
 8001120:	40023000 	.word	0x40023000

08001124 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a0b      	ldr	r2, [pc, #44]	; (8001160 <HAL_CRC_MspInit+0x3c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d10d      	bne.n	8001152 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <HAL_CRC_MspInit+0x40>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a09      	ldr	r2, [pc, #36]	; (8001164 <HAL_CRC_MspInit+0x40>)
 8001140:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b07      	ldr	r3, [pc, #28]	; (8001164 <HAL_CRC_MspInit+0x40>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001152:	bf00      	nop
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	40023000 	.word	0x40023000
 8001164:	40023800 	.word	0x40023800

08001168 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <MX_DMA_Init+0x4c>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a0f      	ldr	r2, [pc, #60]	; (80011b4 <MX_DMA_Init+0x4c>)
 8001178:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <MX_DMA_Init+0x4c>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 7, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2107      	movs	r1, #7
 800118e:	203b      	movs	r0, #59	; 0x3b
 8001190:	f002 fc14 	bl	80039bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001194:	203b      	movs	r0, #59	; 0x3b
 8001196:	f002 fc2d 	bl	80039f4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 7, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2107      	movs	r1, #7
 800119e:	2045      	movs	r0, #69	; 0x45
 80011a0:	f002 fc0c 	bl	80039bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80011a4:	2045      	movs	r0, #69	; 0x45
 80011a6:	f002 fc25 	bl	80039f4 <HAL_NVIC_EnableIRQ>

}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800

080011b8 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80011bc:	4b15      	ldr	r3, [pc, #84]	; (8001214 <MX_DMA2D_Init+0x5c>)
 80011be:	4a16      	ldr	r2, [pc, #88]	; (8001218 <MX_DMA2D_Init+0x60>)
 80011c0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <MX_DMA2D_Init+0x5c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <MX_DMA2D_Init+0x5c>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_DMA2D_Init+0x5c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <MX_DMA2D_Init+0x5c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_DMA2D_Init+0x5c>)
 80011dc:	2201      	movs	r2, #1
 80011de:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <MX_DMA2D_Init+0x5c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <MX_DMA2D_Init+0x5c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80011ec:	4809      	ldr	r0, [pc, #36]	; (8001214 <MX_DMA2D_Init+0x5c>)
 80011ee:	f002 ffc9 	bl	8004184 <HAL_DMA2D_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80011f8:	f001 fa88 	bl	800270c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80011fc:	2101      	movs	r1, #1
 80011fe:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_DMA2D_Init+0x5c>)
 8001200:	f003 f91e 	bl	8004440 <HAL_DMA2D_ConfigLayer>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800120a:	f001 fa7f 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000a34 	.word	0x20000a34
 8001218:	4002b000 	.word	0x4002b000

0800121c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0b      	ldr	r2, [pc, #44]	; (8001258 <HAL_DMA2D_MspInit+0x3c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d10d      	bne.n	800124a <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	4b0a      	ldr	r3, [pc, #40]	; (800125c <HAL_DMA2D_MspInit+0x40>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a09      	ldr	r2, [pc, #36]	; (800125c <HAL_DMA2D_MspInit+0x40>)
 8001238:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b07      	ldr	r3, [pc, #28]	; (800125c <HAL_DMA2D_MspInit+0x40>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800124a:	bf00      	nop
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	4002b000 	.word	0x4002b000
 800125c:	40023800 	.word	0x40023800

08001260 <dma2d_put_src_wh_c>:
  /* USER CODE END DMA2D_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void dma2d_put_src_wh_c(uint32_t p, uint32_t w, uint32_t h, uint32_t c){
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af02      	add	r7, sp, #8
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
 800126c:	603b      	str	r3, [r7, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 800126e:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <dma2d_put_src_wh_c+0x84>)
 8001270:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001274:	605a      	str	r2, [r3, #4]
	hdma2d.Init.OutputOffset = 1024 - w;
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800127c:	4a19      	ldr	r2, [pc, #100]	; (80012e4 <dma2d_put_src_wh_c+0x84>)
 800127e:	60d3      	str	r3, [r2, #12]
  /* Change DMA2D peripheral state */
  hdma2d.State = HAL_DMA2D_STATE_BUSY;
 8001280:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <dma2d_put_src_wh_c+0x84>)
 8001282:	2202      	movs	r2, #2
 8001284:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  MODIFY_REG(hdma2d.Instance->CR, DMA2D_CR_MODE, hdma2d.Init.Mode);
 8001288:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <dma2d_put_src_wh_c+0x84>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <dma2d_put_src_wh_c+0x84>)
 8001294:	685a      	ldr	r2, [r3, #4]
 8001296:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <dma2d_put_src_wh_c+0x84>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	430a      	orrs	r2, r1
 800129c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d.Instance->OOR, DMA2D_OOR_LO, hdma2d.Init.OutputOffset);
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <dma2d_put_src_wh_c+0x84>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80012a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012ac:	4a0d      	ldr	r2, [pc, #52]	; (80012e4 <dma2d_put_src_wh_c+0x84>)
 80012ae:	68d1      	ldr	r1, [r2, #12]
 80012b0:	4a0c      	ldr	r2, [pc, #48]	; (80012e4 <dma2d_put_src_wh_c+0x84>)
 80012b2:	6812      	ldr	r2, [r2, #0]
 80012b4:	430b      	orrs	r3, r1
 80012b6:	6413      	str	r3, [r2, #64]	; 0x40
  /* Initialize the DMA2D state*/
  hdma2d.State  = HAL_DMA2D_STATE_READY;
 80012b8:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <dma2d_put_src_wh_c+0x84>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	HAL_DMA2D_Start(&hdma2d, c, p, w, h);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	6839      	ldr	r1, [r7, #0]
 80012ca:	4806      	ldr	r0, [pc, #24]	; (80012e4 <dma2d_put_src_wh_c+0x84>)
 80012cc:	f002 ffa3 	bl	8004216 <HAL_DMA2D_Start>
	HAL_DMA2D_PollForTransfer(&hdma2d, 0xFFFF);
 80012d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80012d4:	4803      	ldr	r0, [pc, #12]	; (80012e4 <dma2d_put_src_wh_c+0x84>)
 80012d6:	f002 ffc9 	bl	800426c <HAL_DMA2D_PollForTransfer>
}
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000a34 	.word	0x20000a34

080012e8 <SDRAM_InitSequence>:
#define OP_CODE				0x0000
#define WB						0x0200


static void SDRAM_InitSequence(SDRAM_HandleTypeDef *hsdram1)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpr = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	61fb      	str	r3, [r7, #28]
  FMC_SDRAM_CommandTypeDef Command;
/* Step 3 --------------------------------------------------------------------*/
  /* 配置命令：开启提供给SDRAM的时钟 */
  Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80012f4:	2301      	movs	r3, #1
 80012f6:	60fb      	str	r3, [r7, #12]
  Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 80012f8:	2308      	movs	r3, #8
 80012fa:	613b      	str	r3, [r7, #16]
  Command.AutoRefreshNumber = 1;
 80012fc:	2301      	movs	r3, #1
 80012fe:	617b      	str	r3, [r7, #20]
  Command.ModeRegisterDefinition = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	61bb      	str	r3, [r7, #24]
/* Send the command */
  HAL_SDRAM_SendCommand(hsdram1, &Command, 0xFFFF);
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800130c:	4619      	mov	r1, r3
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f007 fc3d 	bl	8008b8e <HAL_SDRAM_SendCommand>

/* Step 5 --------------------------------------------------------------------*/
  /* 配置命令：对所有的bank预充电 */
  Command.CommandMode = FMC_SDRAM_CMD_PALL;
 8001314:	2302      	movs	r3, #2
 8001316:	60fb      	str	r3, [r7, #12]
  Command.AutoRefreshNumber = 1;
 8001318:	2301      	movs	r3, #1
 800131a:	617b      	str	r3, [r7, #20]
  Command.ModeRegisterDefinition = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	61bb      	str	r3, [r7, #24]
/* Send the command */
  HAL_SDRAM_SendCommand(hsdram1, &Command, 0xFFFF);
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001328:	4619      	mov	r1, r3
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f007 fc2f 	bl	8008b8e <HAL_SDRAM_SendCommand>

/* Step 6 --------------------------------------------------------------------*/
  /* 配置命令：自动刷新 */
  Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001330:	2303      	movs	r3, #3
 8001332:	60fb      	str	r3, [r7, #12]
  Command.AutoRefreshNumber = 4;
 8001334:	2304      	movs	r3, #4
 8001336:	617b      	str	r3, [r7, #20]
  Command.ModeRegisterDefinition = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	61bb      	str	r3, [r7, #24]
 /* Send the command */
  HAL_SDRAM_SendCommand(hsdram1, &Command, 0xFFFF);
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001344:	4619      	mov	r1, r3
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f007 fc21 	bl	8008b8e <HAL_SDRAM_SendCommand>

/* Step 7 --------------------------------------------------------------------*/
  /* 设置sdram寄存器配置 */
  tmpr = (uint32_t)BURST_LENGTH         |
 800134c:	f240 2331 	movw	r3, #561	; 0x231
 8001350:	61fb      	str	r3, [r7, #28]
									CAS_LATENCY           |
									OP_CODE 							|
									WB;

  /* 配置命令：设置SDRAM寄存器 */
  Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8001352:	2304      	movs	r3, #4
 8001354:	60fb      	str	r3, [r7, #12]
  Command.AutoRefreshNumber = 1;
 8001356:	2301      	movs	r3, #1
 8001358:	617b      	str	r3, [r7, #20]
  Command.ModeRegisterDefinition = tmpr;
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	61bb      	str	r3, [r7, #24]
  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram1, &Command, 0xFFFF);
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001366:	4619      	mov	r1, r3
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f007 fc10 	bl	8008b8e <HAL_SDRAM_SendCommand>

  /* 设置刷新计数器 */
  /* (15.62 us x Freq) - 20 */
	  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(hsdram1, 1386);
 800136e:	f240 516a 	movw	r1, #1386	; 0x56a
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f007 fc36 	bl	8008be4 <HAL_SDRAM_ProgramRefreshRate>

}
 8001378:	bf00      	nop
 800137a:	3720      	adds	r7, #32
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
 8001394:	615a      	str	r2, [r3, #20]
 8001396:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001398:	4b21      	ldr	r3, [pc, #132]	; (8001420 <MX_FMC_Init+0xa0>)
 800139a:	4a22      	ldr	r2, [pc, #136]	; (8001424 <MX_FMC_Init+0xa4>)
 800139c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800139e:	4b20      	ldr	r3, [pc, #128]	; (8001420 <MX_FMC_Init+0xa0>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80013a4:	4b1e      	ldr	r3, [pc, #120]	; (8001420 <MX_FMC_Init+0xa0>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80013aa:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <MX_FMC_Init+0xa0>)
 80013ac:	2204      	movs	r2, #4
 80013ae:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80013b0:	4b1b      	ldr	r3, [pc, #108]	; (8001420 <MX_FMC_Init+0xa0>)
 80013b2:	2210      	movs	r2, #16
 80013b4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80013b6:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <MX_FMC_Init+0xa0>)
 80013b8:	2240      	movs	r2, #64	; 0x40
 80013ba:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80013bc:	4b18      	ldr	r3, [pc, #96]	; (8001420 <MX_FMC_Init+0xa0>)
 80013be:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80013c2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80013c4:	4b16      	ldr	r3, [pc, #88]	; (8001420 <MX_FMC_Init+0xa0>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80013ca:	4b15      	ldr	r3, [pc, #84]	; (8001420 <MX_FMC_Init+0xa0>)
 80013cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013d0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80013d2:	4b13      	ldr	r3, [pc, #76]	; (8001420 <MX_FMC_Init+0xa0>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <MX_FMC_Init+0xa0>)
 80013da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013de:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80013e0:	2302      	movs	r3, #2
 80013e2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80013e4:	2307      	movs	r3, #7
 80013e6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80013e8:	2304      	movs	r3, #4
 80013ea:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80013ec:	2307      	movs	r3, #7
 80013ee:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80013f0:	2303      	movs	r3, #3
 80013f2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80013f4:	2302      	movs	r3, #2
 80013f6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80013f8:	2302      	movs	r3, #2
 80013fa:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	4619      	mov	r1, r3
 8001400:	4807      	ldr	r0, [pc, #28]	; (8001420 <MX_FMC_Init+0xa0>)
 8001402:	f007 fb90 	bl	8008b26 <HAL_SDRAM_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800140c:	f001 f97e 	bl	800270c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  SDRAM_InitSequence(&hsdram1);
 8001410:	4803      	ldr	r0, [pc, #12]	; (8001420 <MX_FMC_Init+0xa0>)
 8001412:	f7ff ff69 	bl	80012e8 <SDRAM_InitSequence>
  /* USER CODE END FMC_Init 2 */
}
 8001416:	bf00      	nop
 8001418:	3720      	adds	r7, #32
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000a74 	.word	0x20000a74
 8001424:	a0000140 	.word	0xa0000140

08001428 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800143c:	4b3b      	ldr	r3, [pc, #236]	; (800152c <HAL_FMC_MspInit+0x104>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d16f      	bne.n	8001524 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001444:	4b39      	ldr	r3, [pc, #228]	; (800152c <HAL_FMC_MspInit+0x104>)
 8001446:	2201      	movs	r2, #1
 8001448:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	603b      	str	r3, [r7, #0]
 800144e:	4b38      	ldr	r3, [pc, #224]	; (8001530 <HAL_FMC_MspInit+0x108>)
 8001450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001452:	4a37      	ldr	r2, [pc, #220]	; (8001530 <HAL_FMC_MspInit+0x108>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6393      	str	r3, [r2, #56]	; 0x38
 800145a:	4b35      	ldr	r3, [pc, #212]	; (8001530 <HAL_FMC_MspInit+0x108>)
 800145c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001466:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800146a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001474:	2303      	movs	r3, #3
 8001476:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001478:	230c      	movs	r3, #12
 800147a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	4619      	mov	r1, r3
 8001480:	482c      	ldr	r0, [pc, #176]	; (8001534 <HAL_FMC_MspInit+0x10c>)
 8001482:	f004 fa99 	bl	80059b8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001486:	2301      	movs	r3, #1
 8001488:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001492:	2303      	movs	r3, #3
 8001494:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001496:	230c      	movs	r3, #12
 8001498:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	4619      	mov	r1, r3
 800149e:	4826      	ldr	r0, [pc, #152]	; (8001538 <HAL_FMC_MspInit+0x110>)
 80014a0:	f004 fa8a 	bl	80059b8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80014a4:	f248 1333 	movw	r3, #33075	; 0x8133
 80014a8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b2:	2303      	movs	r3, #3
 80014b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014b6:	230c      	movs	r3, #12
 80014b8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	4619      	mov	r1, r3
 80014be:	481f      	ldr	r0, [pc, #124]	; (800153c <HAL_FMC_MspInit+0x114>)
 80014c0:	f004 fa7a 	bl	80059b8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80014c4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80014c8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ca:	2302      	movs	r3, #2
 80014cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d2:	2303      	movs	r3, #3
 80014d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014d6:	230c      	movs	r3, #12
 80014d8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	4619      	mov	r1, r3
 80014de:	4818      	ldr	r0, [pc, #96]	; (8001540 <HAL_FMC_MspInit+0x118>)
 80014e0:	f004 fa6a 	bl	80059b8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014e4:	23c0      	movs	r3, #192	; 0xc0
 80014e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f0:	2303      	movs	r3, #3
 80014f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014f4:	230c      	movs	r3, #12
 80014f6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	4619      	mov	r1, r3
 80014fc:	4811      	ldr	r0, [pc, #68]	; (8001544 <HAL_FMC_MspInit+0x11c>)
 80014fe:	f004 fa5b 	bl	80059b8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001502:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001506:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001510:	2303      	movs	r3, #3
 8001512:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001514:	230c      	movs	r3, #12
 8001516:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	4619      	mov	r1, r3
 800151c:	480a      	ldr	r0, [pc, #40]	; (8001548 <HAL_FMC_MspInit+0x120>)
 800151e:	f004 fa4b 	bl	80059b8 <HAL_GPIO_Init>
 8001522:	e000      	b.n	8001526 <HAL_FMC_MspInit+0xfe>
    return;
 8001524:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000aa8 	.word	0x20000aa8
 8001530:	40023800 	.word	0x40023800
 8001534:	40021400 	.word	0x40021400
 8001538:	40020800 	.word	0x40020800
 800153c:	40021800 	.word	0x40021800
 8001540:	40021000 	.word	0x40021000
 8001544:	40021c00 	.word	0x40021c00
 8001548:	40020c00 	.word	0x40020c00

0800154c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001554:	f7ff ff68 	bl	8001428 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0

}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	af00      	add	r7, sp, #0
	return get_time_val();
 8001572:	f001 fbd3 	bl	8002d1c <get_time_val>
 8001576:	4603      	mov	r3, r0
}
 8001578:	4618      	mov	r0, r3
 800157a:	bd80      	pop	{r7, pc}

0800157c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
	osSemaphoreId_t semaphore;
	semaphore = osSemaphoreNew (1, 0, NULL);
 8001582:	2200      	movs	r2, #0
 8001584:	2100      	movs	r1, #0
 8001586:	2001      	movs	r0, #1
 8001588:	f00d fff4 	bl	800f574 <osSemaphoreNew>
 800158c:	6078      	str	r0, [r7, #4]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, (void *)semaphore, &defaultTask_attributes);
 800158e:	4a1a      	ldr	r2, [pc, #104]	; (80015f8 <MX_FREERTOS_Init+0x7c>)
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	481a      	ldr	r0, [pc, #104]	; (80015fc <MX_FREERTOS_Init+0x80>)
 8001594:	f00d fe33 	bl	800f1fe <osThreadNew>
 8001598:	4603      	mov	r3, r0
 800159a:	4a19      	ldr	r2, [pc, #100]	; (8001600 <MX_FREERTOS_Init+0x84>)
 800159c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  FatfsTaskHandle = osThreadNew(FatfsTask, NULL, &FatfsTask_attributes);
 800159e:	4a19      	ldr	r2, [pc, #100]	; (8001604 <MX_FREERTOS_Init+0x88>)
 80015a0:	2100      	movs	r1, #0
 80015a2:	4819      	ldr	r0, [pc, #100]	; (8001608 <MX_FREERTOS_Init+0x8c>)
 80015a4:	f00d fe2b 	bl	800f1fe <osThreadNew>
 80015a8:	4603      	mov	r3, r0
 80015aa:	4a18      	ldr	r2, [pc, #96]	; (800160c <MX_FREERTOS_Init+0x90>)
 80015ac:	6013      	str	r3, [r2, #0]
	LcdTaskHandle = osThreadNew(LcdTask, NULL, &LcdTask_attributes);
 80015ae:	4a18      	ldr	r2, [pc, #96]	; (8001610 <MX_FREERTOS_Init+0x94>)
 80015b0:	2100      	movs	r1, #0
 80015b2:	4818      	ldr	r0, [pc, #96]	; (8001614 <MX_FREERTOS_Init+0x98>)
 80015b4:	f00d fe23 	bl	800f1fe <osThreadNew>
 80015b8:	4603      	mov	r3, r0
 80015ba:	4a17      	ldr	r2, [pc, #92]	; (8001618 <MX_FREERTOS_Init+0x9c>)
 80015bc:	6013      	str	r3, [r2, #0]
	TouchTaskHandle = osThreadNew(TouchTask, NULL, &TouchTask_attributes);
 80015be:	4a17      	ldr	r2, [pc, #92]	; (800161c <MX_FREERTOS_Init+0xa0>)
 80015c0:	2100      	movs	r1, #0
 80015c2:	4817      	ldr	r0, [pc, #92]	; (8001620 <MX_FREERTOS_Init+0xa4>)
 80015c4:	f00d fe1b 	bl	800f1fe <osThreadNew>
 80015c8:	4603      	mov	r3, r0
 80015ca:	4a16      	ldr	r2, [pc, #88]	; (8001624 <MX_FREERTOS_Init+0xa8>)
 80015cc:	6013      	str	r3, [r2, #0]
	InfoTaskHandle = osThreadNew(InfoTask, NULL, &InfoTask_attributes);
 80015ce:	4a16      	ldr	r2, [pc, #88]	; (8001628 <MX_FREERTOS_Init+0xac>)
 80015d0:	2100      	movs	r1, #0
 80015d2:	4816      	ldr	r0, [pc, #88]	; (800162c <MX_FREERTOS_Init+0xb0>)
 80015d4:	f00d fe13 	bl	800f1fe <osThreadNew>
 80015d8:	4603      	mov	r3, r0
 80015da:	4a15      	ldr	r2, [pc, #84]	; (8001630 <MX_FREERTOS_Init+0xb4>)
 80015dc:	6013      	str	r3, [r2, #0]
	MQTT_TaskHandle = osThreadNew(MQTT_Task, (void *)semaphore, &MQTT_Task_attributes);
 80015de:	4a15      	ldr	r2, [pc, #84]	; (8001634 <MX_FREERTOS_Init+0xb8>)
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	4815      	ldr	r0, [pc, #84]	; (8001638 <MX_FREERTOS_Init+0xbc>)
 80015e4:	f00d fe0b 	bl	800f1fe <osThreadNew>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4a14      	ldr	r2, [pc, #80]	; (800163c <MX_FREERTOS_Init+0xc0>)
 80015ec:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	08046b98 	.word	0x08046b98
 80015fc:	08001641 	.word	0x08001641
 8001600:	20000ac0 	.word	0x20000ac0
 8001604:	08046ae4 	.word	0x08046ae4
 8001608:	0800178d 	.word	0x0800178d
 800160c:	20000aac 	.word	0x20000aac
 8001610:	08046b08 	.word	0x08046b08
 8001614:	08001a49 	.word	0x08001a49
 8001618:	20000ab0 	.word	0x20000ab0
 800161c:	08046b2c 	.word	0x08046b2c
 8001620:	08001da1 	.word	0x08001da1
 8001624:	20000ab4 	.word	0x20000ab4
 8001628:	08046b50 	.word	0x08046b50
 800162c:	08001b11 	.word	0x08001b11
 8001630:	20000ab8 	.word	0x20000ab8
 8001634:	08046b74 	.word	0x08046b74
 8001638:	08001c45 	.word	0x08001c45
 800163c:	20000abc 	.word	0x20000abc

08001640 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001648:	f009 fae2 	bl	800ac10 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  osSemaphoreId_t semaphore = (osSemaphoreId_t)argument;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	60fb      	str	r3, [r7, #12]
  osSemaphoreRelease (semaphore);
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f00e f86b 	bl	800f72c <osSemaphoreRelease>

    for(;;)
    {
    	HAL_GPIO_TogglePin(GPIOH, GPIO_PIN_10);
 8001656:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800165a:	4804      	ldr	r0, [pc, #16]	; (800166c <StartDefaultTask+0x2c>)
 800165c:	f004 fb71 	bl	8005d42 <HAL_GPIO_TogglePin>
      osDelay(500);
 8001660:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001664:	f00d fe5d 	bl	800f322 <osDelay>
    	HAL_GPIO_TogglePin(GPIOH, GPIO_PIN_10);
 8001668:	e7f5      	b.n	8001656 <StartDefaultTask+0x16>
 800166a:	bf00      	nop
 800166c:	40021c00 	.word	0x40021c00

08001670 <draw_xy_wh_c>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

static void draw_xy_wh_c(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint32_t c){
 8001670:	b590      	push	{r4, r7, lr}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4604      	mov	r4, r0
 8001678:	4608      	mov	r0, r1
 800167a:	4611      	mov	r1, r2
 800167c:	461a      	mov	r2, r3
 800167e:	4623      	mov	r3, r4
 8001680:	80fb      	strh	r3, [r7, #6]
 8001682:	4603      	mov	r3, r0
 8001684:	80bb      	strh	r3, [r7, #4]
 8001686:	460b      	mov	r3, r1
 8001688:	807b      	strh	r3, [r7, #2]
 800168a:	4613      	mov	r3, r2
 800168c:	803b      	strh	r3, [r7, #0]
	dma2d_put_src_wh_c(IMGRAM_BASE_ADDR + y * 1024 * 3 + x * 3, w, h, c);
 800168e:	88ba      	ldrh	r2, [r7, #4]
 8001690:	4613      	mov	r3, r2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4413      	add	r3, r2
 8001696:	029b      	lsls	r3, r3, #10
 8001698:	4619      	mov	r1, r3
 800169a:	88fa      	ldrh	r2, [r7, #6]
 800169c:	4613      	mov	r3, r2
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	4413      	add	r3, r2
 80016a2:	440b      	add	r3, r1
 80016a4:	f103 4050 	add.w	r0, r3, #3489660928	; 0xd0000000
 80016a8:	8879      	ldrh	r1, [r7, #2]
 80016aa:	883a      	ldrh	r2, [r7, #0]
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	f7ff fdd7 	bl	8001260 <dma2d_put_src_wh_c>
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd90      	pop	{r4, r7, pc}

080016ba <draw_xy_wh_img>:



static void draw_xy_wh_img(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint8_t* src){
 80016ba:	b490      	push	{r4, r7}
 80016bc:	b086      	sub	sp, #24
 80016be:	af00      	add	r7, sp, #0
 80016c0:	4604      	mov	r4, r0
 80016c2:	4608      	mov	r0, r1
 80016c4:	4611      	mov	r1, r2
 80016c6:	461a      	mov	r2, r3
 80016c8:	4623      	mov	r3, r4
 80016ca:	80fb      	strh	r3, [r7, #6]
 80016cc:	4603      	mov	r3, r0
 80016ce:	80bb      	strh	r3, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	807b      	strh	r3, [r7, #2]
 80016d4:	4613      	mov	r3, r2
 80016d6:	803b      	strh	r3, [r7, #0]
//	dma2d_put_mem_mem(src, IMGRAM_BASE_ADDR + y * 1024 * 3 + x * 3, w, h);
	uint8_t *p = (uint8_t*)(IMGRAM_BASE_ADDR + y * 1024 * 3 + x * 3);
 80016d8:	88ba      	ldrh	r2, [r7, #4]
 80016da:	4613      	mov	r3, r2
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	4413      	add	r3, r2
 80016e0:	029b      	lsls	r3, r3, #10
 80016e2:	4619      	mov	r1, r3
 80016e4:	88fa      	ldrh	r2, [r7, #6]
 80016e6:	4613      	mov	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	4413      	add	r3, r2
 80016ec:	440b      	add	r3, r1
 80016ee:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 80016f2:	617b      	str	r3, [r7, #20]
	uint32_t index = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	613b      	str	r3, [r7, #16]
	int i = 0, j = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	2300      	movs	r3, #0
 80016fe:	60bb      	str	r3, [r7, #8]
	for(i = 0 ; i < h; i++){
 8001700:	2300      	movs	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	e037      	b.n	8001776 <draw_xy_wh_img+0xbc>
		for(j = 0 ; j < w; j++){
 8001706:	2300      	movs	r3, #0
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	e023      	b.n	8001754 <draw_xy_wh_img+0x9a>
				*p = src[index++];
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1c5a      	adds	r2, r3, #1
 8001710:	613a      	str	r2, [r7, #16]
 8001712:	6a3a      	ldr	r2, [r7, #32]
 8001714:	4413      	add	r3, r2
 8001716:	781a      	ldrb	r2, [r3, #0]
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	701a      	strb	r2, [r3, #0]
				p++;
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	3301      	adds	r3, #1
 8001720:	617b      	str	r3, [r7, #20]
				*p = src[index++];
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1c5a      	adds	r2, r3, #1
 8001726:	613a      	str	r2, [r7, #16]
 8001728:	6a3a      	ldr	r2, [r7, #32]
 800172a:	4413      	add	r3, r2
 800172c:	781a      	ldrb	r2, [r3, #0]
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	701a      	strb	r2, [r3, #0]
				p++;
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	3301      	adds	r3, #1
 8001736:	617b      	str	r3, [r7, #20]
				*p = src[index++];
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	613a      	str	r2, [r7, #16]
 800173e:	6a3a      	ldr	r2, [r7, #32]
 8001740:	4413      	add	r3, r2
 8001742:	781a      	ldrb	r2, [r3, #0]
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	701a      	strb	r2, [r3, #0]
				p++;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	3301      	adds	r3, #1
 800174c:	617b      	str	r3, [r7, #20]
		for(j = 0 ; j < w; j++){
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	3301      	adds	r3, #1
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	887b      	ldrh	r3, [r7, #2]
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	429a      	cmp	r2, r3
 800175a:	dbd7      	blt.n	800170c <draw_xy_wh_img+0x52>
		}

		p=p+(1024-w)*3;
 800175c:	887b      	ldrh	r3, [r7, #2]
 800175e:	f5c3 6280 	rsb	r2, r3, #1024	; 0x400
 8001762:	4613      	mov	r3, r2
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	4413      	add	r3, r2
 8001768:	461a      	mov	r2, r3
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	4413      	add	r3, r2
 800176e:	617b      	str	r3, [r7, #20]
	for(i = 0 ; i < h; i++){
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	3301      	adds	r3, #1
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	883b      	ldrh	r3, [r7, #0]
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	429a      	cmp	r2, r3
 800177c:	dbc3      	blt.n	8001706 <draw_xy_wh_img+0x4c>
	}
}
 800177e:	bf00      	nop
 8001780:	bf00      	nop
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bc90      	pop	{r4, r7}
 8001788:	4770      	bx	lr
	...

0800178c <FatfsTask>:

void FatfsTask(void *argument){
 800178c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001790:	f5ad 6dea 	sub.w	sp, sp, #1872	; 0x750
 8001794:	af02      	add	r7, sp, #8
 8001796:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 800179a:	f2a3 7344 	subw	r3, r3, #1860	; 0x744
 800179e:	6018      	str	r0, [r3, #0]
	int ret = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744
	char path[50];
	//const char *write_buff = "hello world! xsdhjkshfksehifuhseuhfuisdhfuise";
	char readbuff[100];
	HAL_SD_CardInfoTypeDef pCardInfo;
	FIL SDFile1, SDFile2;
	UINT bw = 0, br = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	f8c7 3740 	str.w	r3, [r7, #1856]	; 0x740
 80017ac:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 80017b0:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
	/*1、挂载文件系统*/
	BYTE work[_MAX_SS];
	ret = f_mount (&SDFatFS, (const TCHAR*)SDPath, 1);
 80017b8:	2201      	movs	r2, #1
 80017ba:	498c      	ldr	r1, [pc, #560]	; (80019ec <FatfsTask+0x260>)
 80017bc:	488c      	ldr	r0, [pc, #560]	; (80019f0 <FatfsTask+0x264>)
 80017be:	f00c f957 	bl	800da70 <f_mount>
 80017c2:	4603      	mov	r3, r0
 80017c4:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744
	if(ret == FR_NO_FILESYSTEM){
 80017c8:	f8d7 3744 	ldr.w	r3, [r7, #1860]	; 0x744
 80017cc:	2b0d      	cmp	r3, #13
 80017ce:	d11c      	bne.n	800180a <FatfsTask+0x7e>
		ret = f_mkfs ((const TCHAR*)SDPath, FM_FAT32, 0, work, sizeof(work));
 80017d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017d8:	9200      	str	r2, [sp, #0]
 80017da:	2200      	movs	r2, #0
 80017dc:	2102      	movs	r1, #2
 80017de:	4883      	ldr	r0, [pc, #524]	; (80019ec <FatfsTask+0x260>)
 80017e0:	f00c fe90 	bl	800e504 <f_mkfs>
 80017e4:	4603      	mov	r3, r0
 80017e6:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744
		if(ret != FR_OK){
 80017ea:	f8d7 3744 	ldr.w	r3, [r7, #1860]	; 0x744
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d005      	beq.n	80017fe <FatfsTask+0x72>
				printf("f_mkfs is err:%d\r\n",ret);
 80017f2:	f8d7 1744 	ldr.w	r1, [r7, #1860]	; 0x744
 80017f6:	487f      	ldr	r0, [pc, #508]	; (80019f4 <FatfsTask+0x268>)
 80017f8:	f01e fbb4 	bl	801ff64 <printf>
				goto loop;
 80017fc:	e0f1      	b.n	80019e2 <FatfsTask+0x256>
		}
		f_mount (&SDFatFS, SDPath, 1);
 80017fe:	2201      	movs	r2, #1
 8001800:	497a      	ldr	r1, [pc, #488]	; (80019ec <FatfsTask+0x260>)
 8001802:	487b      	ldr	r0, [pc, #492]	; (80019f0 <FatfsTask+0x264>)
 8001804:	f00c f934 	bl	800da70 <f_mount>
 8001808:	e00c      	b.n	8001824 <FatfsTask+0x98>
	}else if (ret != FR_OK){
 800180a:	f8d7 3744 	ldr.w	r3, [r7, #1860]	; 0x744
 800180e:	2b00      	cmp	r3, #0
 8001810:	d005      	beq.n	800181e <FatfsTask+0x92>
			printf("f_mount is err:%d\r\n",ret);
 8001812:	f8d7 1744 	ldr.w	r1, [r7, #1860]	; 0x744
 8001816:	4878      	ldr	r0, [pc, #480]	; (80019f8 <FatfsTask+0x26c>)
 8001818:	f01e fba4 	bl	801ff64 <printf>
			goto loop;
 800181c:	e0e1      	b.n	80019e2 <FatfsTask+0x256>
	}else{
		printf("f_mount is ok\r\n");
 800181e:	4877      	ldr	r0, [pc, #476]	; (80019fc <FatfsTask+0x270>)
 8001820:	f01e fbf8 	bl	8020014 <puts>
	}
	ret = HAL_SD_GetCardInfo(&hsd, &pCardInfo);
 8001824:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8001828:	4619      	mov	r1, r3
 800182a:	4875      	ldr	r0, [pc, #468]	; (8001a00 <FatfsTask+0x274>)
 800182c:	f006 fbf4 	bl	8008018 <HAL_SD_GetCardInfo>
 8001830:	4603      	mov	r3, r0
 8001832:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744
	if(ret != HAL_OK){
 8001836:	f8d7 3744 	ldr.w	r3, [r7, #1860]	; 0x744
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <FatfsTask+0xba>
		printf("HAL_SD_GetCardInfo is err\r\n");
 800183e:	4871      	ldr	r0, [pc, #452]	; (8001a04 <FatfsTask+0x278>)
 8001840:	f01e fbe8 	bl	8020014 <puts>
 8001844:	e062      	b.n	800190c <FatfsTask+0x180>
	}else{
		printf("Initialize SD card successfully!\r\n");
 8001846:	4870      	ldr	r0, [pc, #448]	; (8001a08 <FatfsTask+0x27c>)
 8001848:	f01e fbe4 	bl	8020014 <puts>
		 // 打印SD卡基本信息
		 printf(" SD card information! \r\n");
 800184c:	486f      	ldr	r0, [pc, #444]	; (8001a0c <FatfsTask+0x280>)
 800184e:	f01e fbe1 	bl	8020014 <puts>
		 printf(" CardBlockSize : %ld \r\n", pCardInfo.BlockSize);   // 块大小
 8001852:	f8d7 369c 	ldr.w	r3, [r7, #1692]	; 0x69c
 8001856:	4619      	mov	r1, r3
 8001858:	486d      	ldr	r0, [pc, #436]	; (8001a10 <FatfsTask+0x284>)
 800185a:	f01e fb83 	bl	801ff64 <printf>
		 printf(" CardBlockNbr : %ld \r\n", pCardInfo.BlockNbr);   // 块数量
 800185e:	f8d7 3698 	ldr.w	r3, [r7, #1688]	; 0x698
 8001862:	4619      	mov	r1, r3
 8001864:	486b      	ldr	r0, [pc, #428]	; (8001a14 <FatfsTask+0x288>)
 8001866:	f01e fb7d 	bl	801ff64 <printf>
		 printf(" CardCapacity  : %.2f MB \r\n",(double)((unsigned long long)pCardInfo.BlockSize * pCardInfo.BlockNbr/1024)/1024);// 显示容量 // @suppress("Float formatting support")
 800186a:	f8d7 369c 	ldr.w	r3, [r7, #1692]	; 0x69c
 800186e:	2200      	movs	r2, #0
 8001870:	469a      	mov	sl, r3
 8001872:	4693      	mov	fp, r2
 8001874:	f8d7 3698 	ldr.w	r3, [r7, #1688]	; 0x698
 8001878:	2200      	movs	r2, #0
 800187a:	4698      	mov	r8, r3
 800187c:	4691      	mov	r9, r2
 800187e:	fb08 f20b 	mul.w	r2, r8, fp
 8001882:	fb0a f309 	mul.w	r3, sl, r9
 8001886:	4413      	add	r3, r2
 8001888:	fbaa 4508 	umull	r4, r5, sl, r8
 800188c:	442b      	add	r3, r5
 800188e:	461d      	mov	r5, r3
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	f04f 0300 	mov.w	r3, #0
 8001898:	0aa2      	lsrs	r2, r4, #10
 800189a:	ea42 5285 	orr.w	r2, r2, r5, lsl #22
 800189e:	0aab      	lsrs	r3, r5, #10
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	f7fe fe82 	bl	80005ac <__aeabi_ul2d>
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	4b5a      	ldr	r3, [pc, #360]	; (8001a18 <FatfsTask+0x28c>)
 80018ae:	f7fe ffdd 	bl	800086c <__aeabi_ddiv>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4859      	ldr	r0, [pc, #356]	; (8001a1c <FatfsTask+0x290>)
 80018b8:	f01e fb54 	bl	801ff64 <printf>
		 printf(" LogBlockNbr   : %ld \r\n", pCardInfo.LogBlockNbr); // 逻辑块数量
 80018bc:	f8d7 36a0 	ldr.w	r3, [r7, #1696]	; 0x6a0
 80018c0:	4619      	mov	r1, r3
 80018c2:	4857      	ldr	r0, [pc, #348]	; (8001a20 <FatfsTask+0x294>)
 80018c4:	f01e fb4e 	bl	801ff64 <printf>
		 printf(" LogBlockSize  : %ld \r\n", pCardInfo.LogBlockSize);// 逻辑块大小
 80018c8:	f8d7 36a4 	ldr.w	r3, [r7, #1700]	; 0x6a4
 80018cc:	4619      	mov	r1, r3
 80018ce:	4855      	ldr	r0, [pc, #340]	; (8001a24 <FatfsTask+0x298>)
 80018d0:	f01e fb48 	bl	801ff64 <printf>
		 printf(" RCA           : %ld \r\n", pCardInfo.RelCardAdd);  // 卡相对地址
 80018d4:	f8d7 3694 	ldr.w	r3, [r7, #1684]	; 0x694
 80018d8:	4619      	mov	r1, r3
 80018da:	4853      	ldr	r0, [pc, #332]	; (8001a28 <FatfsTask+0x29c>)
 80018dc:	f01e fb42 	bl	801ff64 <printf>
		 printf(" CardType      : %ld \r\n", pCardInfo.CardType);    // 卡类型
 80018e0:	f8d7 3688 	ldr.w	r3, [r7, #1672]	; 0x688
 80018e4:	4619      	mov	r1, r3
 80018e6:	4851      	ldr	r0, [pc, #324]	; (8001a2c <FatfsTask+0x2a0>)
 80018e8:	f01e fb3c 	bl	801ff64 <printf>
		 // 读取并打印SD卡的CID信息
		 HAL_SD_CardCIDTypeDef sdcard_cid;
		 HAL_SD_GetCardCID(&hsd,&sdcard_cid);
 80018ec:	f107 030c 	add.w	r3, r7, #12
 80018f0:	4619      	mov	r1, r3
 80018f2:	4843      	ldr	r0, [pc, #268]	; (8001a00 <FatfsTask+0x274>)
 80018f4:	f006 f994 	bl	8007c20 <HAL_SD_GetCardCID>
		 printf(" ManufacturerID: %d \r\n",sdcard_cid.ManufacturerID);
 80018f8:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 80018fc:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	b2db      	uxtb	r3, r3
 8001904:	4619      	mov	r1, r3
 8001906:	484a      	ldr	r0, [pc, #296]	; (8001a30 <FatfsTask+0x2a4>)
 8001908:	f01e fb2c 	bl	801ff64 <printf>
	}
		/*2、新建test.txt文件*/
		sprintf(path, "%stest.txt",SDPath);
 800190c:	f207 730c 	addw	r3, r7, #1804	; 0x70c
 8001910:	4a36      	ldr	r2, [pc, #216]	; (80019ec <FatfsTask+0x260>)
 8001912:	4948      	ldr	r1, [pc, #288]	; (8001a34 <FatfsTask+0x2a8>)
 8001914:	4618      	mov	r0, r3
 8001916:	f01e fba1 	bl	802005c <sprintf>
		ret = f_open (&SDFile1, path, FA_READ | FA_WRITE);
 800191a:	f207 710c 	addw	r1, r7, #1804	; 0x70c
 800191e:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8001922:	2203      	movs	r2, #3
 8001924:	4618      	mov	r0, r3
 8001926:	f00c f907 	bl	800db38 <f_open>
 800192a:	4603      	mov	r3, r0
 800192c:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744
		if(ret != FR_OK){
 8001930:	f8d7 3744 	ldr.w	r3, [r7, #1860]	; 0x744
 8001934:	2b00      	cmp	r3, #0
 8001936:	d00b      	beq.n	8001950 <FatfsTask+0x1c4>
			printf("f_open is err:%d\r\n",ret);
 8001938:	f8d7 1744 	ldr.w	r1, [r7, #1860]	; 0x744
 800193c:	483e      	ldr	r0, [pc, #248]	; (8001a38 <FatfsTask+0x2ac>)
 800193e:	f01e fb11 	bl	801ff64 <printf>
			goto f_open_err;
 8001942:	bf00      	nop
		goto loop;
		/* Infinite loop */
//	f_write_err:
//		f_close (&SDFile1);
	f_open_err:
		f_mount(NULL, SDPath, 1);
 8001944:	2201      	movs	r2, #1
 8001946:	4929      	ldr	r1, [pc, #164]	; (80019ec <FatfsTask+0x260>)
 8001948:	2000      	movs	r0, #0
 800194a:	f00c f891 	bl	800da70 <f_mount>
 800194e:	e048      	b.n	80019e2 <FatfsTask+0x256>
		sprintf(path, "%sxixi.txt",SDPath);
 8001950:	f207 730c 	addw	r3, r7, #1804	; 0x70c
 8001954:	4a25      	ldr	r2, [pc, #148]	; (80019ec <FatfsTask+0x260>)
 8001956:	4939      	ldr	r1, [pc, #228]	; (8001a3c <FatfsTask+0x2b0>)
 8001958:	4618      	mov	r0, r3
 800195a:	f01e fb7f 	bl	802005c <sprintf>
		ret = f_open (&SDFile2, path, FA_READ);
 800195e:	f207 710c 	addw	r1, r7, #1804	; 0x70c
 8001962:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001966:	2201      	movs	r2, #1
 8001968:	4618      	mov	r0, r3
 800196a:	f00c f8e5 	bl	800db38 <f_open>
 800196e:	4603      	mov	r3, r0
 8001970:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744
		if(ret != FR_OK){
 8001974:	f8d7 3744 	ldr.w	r3, [r7, #1860]	; 0x744
 8001978:	2b00      	cmp	r3, #0
 800197a:	d004      	beq.n	8001986 <FatfsTask+0x1fa>
			printf("f_open is err:%d\r\n",ret);
 800197c:	f8d7 1744 	ldr.w	r1, [r7, #1860]	; 0x744
 8001980:	482d      	ldr	r0, [pc, #180]	; (8001a38 <FatfsTask+0x2ac>)
 8001982:	f01e faef 	bl	801ff64 <printf>
		ret = f_read (&SDFile2, readbuff, 16, &br);
 8001986:	f507 7309 	add.w	r3, r7, #548	; 0x224
 800198a:	f507 61d5 	add.w	r1, r7, #1704	; 0x6a8
 800198e:	f507 700a 	add.w	r0, r7, #552	; 0x228
 8001992:	2210      	movs	r2, #16
 8001994:	f00c fb8f 	bl	800e0b6 <f_read>
 8001998:	4603      	mov	r3, r0
 800199a:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744
		if(ret != FR_OK){
 800199e:	f8d7 3744 	ldr.w	r3, [r7, #1860]	; 0x744
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d004      	beq.n	80019b0 <FatfsTask+0x224>
				printf("f_read is err:%d\r\n",ret);
 80019a6:	f8d7 1744 	ldr.w	r1, [r7, #1860]	; 0x744
 80019aa:	4825      	ldr	r0, [pc, #148]	; (8001a40 <FatfsTask+0x2b4>)
 80019ac:	f01e fada 	bl	801ff64 <printf>
		readbuff[16] = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	f887 36b8 	strb.w	r3, [r7, #1720]	; 0x6b8
		printf("%s\r\n",readbuff);
 80019b6:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 80019ba:	4619      	mov	r1, r3
 80019bc:	4821      	ldr	r0, [pc, #132]	; (8001a44 <FatfsTask+0x2b8>)
 80019be:	f01e fad1 	bl	801ff64 <printf>
		f_close (&SDFile1);
 80019c2:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80019c6:	4618      	mov	r0, r3
 80019c8:	f00c fd6c 	bl	800e4a4 <f_close>
		f_close (&SDFile2);
 80019cc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80019d0:	4618      	mov	r0, r3
 80019d2:	f00c fd67 	bl	800e4a4 <f_close>
		f_mount(NULL, SDPath, 1);
 80019d6:	2201      	movs	r2, #1
 80019d8:	4904      	ldr	r1, [pc, #16]	; (80019ec <FatfsTask+0x260>)
 80019da:	2000      	movs	r0, #0
 80019dc:	f00c f848 	bl	800da70 <f_mount>
		goto loop;
 80019e0:	bf00      	nop
		loop:
	while(1){
		osDelay(1000);
 80019e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019e6:	f00d fc9c 	bl	800f322 <osDelay>
 80019ea:	e7fa      	b.n	80019e2 <FatfsTask+0x256>
 80019ec:	20000df8 	.word	0x20000df8
 80019f0:	20000dfc 	.word	0x20000dfc
 80019f4:	08025fac 	.word	0x08025fac
 80019f8:	08025fc0 	.word	0x08025fc0
 80019fc:	08025fd4 	.word	0x08025fd4
 8001a00:	20000bd0 	.word	0x20000bd0
 8001a04:	08025fe4 	.word	0x08025fe4
 8001a08:	08026000 	.word	0x08026000
 8001a0c:	08026024 	.word	0x08026024
 8001a10:	0802603c 	.word	0x0802603c
 8001a14:	08026054 	.word	0x08026054
 8001a18:	40900000 	.word	0x40900000
 8001a1c:	0802606c 	.word	0x0802606c
 8001a20:	08026088 	.word	0x08026088
 8001a24:	080260a0 	.word	0x080260a0
 8001a28:	080260b8 	.word	0x080260b8
 8001a2c:	080260d0 	.word	0x080260d0
 8001a30:	080260e8 	.word	0x080260e8
 8001a34:	08026100 	.word	0x08026100
 8001a38:	0802610c 	.word	0x0802610c
 8001a3c:	08026120 	.word	0x08026120
 8001a40:	0802612c 	.word	0x0802612c
 8001a44:	08026140 	.word	0x08026140

08001a48 <LcdTask>:
	};
}


void LcdTask(void *argument){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af02      	add	r7, sp, #8
 8001a4e:	6078      	str	r0, [r7, #4]

	while(1){
		draw_xy_wh_c(0, 0, 1024, 600, 0);
 8001a50:	2300      	movs	r3, #0
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001a58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f7ff fe06 	bl	8001670 <draw_xy_wh_c>
		draw_xy_wh_c(255, 149, 512, 300, 0xFF0000);
 8001a64:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001a6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a72:	2195      	movs	r1, #149	; 0x95
 8001a74:	20ff      	movs	r0, #255	; 0xff
 8001a76:	f7ff fdfb 	bl	8001670 <draw_xy_wh_c>
		osDelay(5000);
 8001a7a:	f241 3088 	movw	r0, #5000	; 0x1388
 8001a7e:	f00d fc50 	bl	800f322 <osDelay>
		draw_xy_wh_c(255, 149, 512, 300, 0x00FF00);
 8001a82:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001a8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a90:	2195      	movs	r1, #149	; 0x95
 8001a92:	20ff      	movs	r0, #255	; 0xff
 8001a94:	f7ff fdec 	bl	8001670 <draw_xy_wh_c>
		osDelay(5000);
 8001a98:	f241 3088 	movw	r0, #5000	; 0x1388
 8001a9c:	f00d fc41 	bl	800f322 <osDelay>
		draw_xy_wh_c(255, 149, 512, 300, 0x0000FF);
 8001aa0:	23ff      	movs	r3, #255	; 0xff
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001aa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aac:	2195      	movs	r1, #149	; 0x95
 8001aae:	20ff      	movs	r0, #255	; 0xff
 8001ab0:	f7ff fdde 	bl	8001670 <draw_xy_wh_c>
		osDelay(5000);
 8001ab4:	f241 3088 	movw	r0, #5000	; 0x1388
 8001ab8:	f00d fc33 	bl	800f322 <osDelay>
		draw_xy_wh_c(255, 149, 512, 300, 0xFFFFFF);
 8001abc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001ac6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aca:	2195      	movs	r1, #149	; 0x95
 8001acc:	20ff      	movs	r0, #255	; 0xff
 8001ace:	f7ff fdcf 	bl	8001670 <draw_xy_wh_c>
		osDelay(5000);
 8001ad2:	f241 3088 	movw	r0, #5000	; 0x1388
 8001ad6:	f00d fc24 	bl	800f322 <osDelay>
		draw_xy_wh_c(0, 0, 1024, 600, 0);
 8001ada:	2300      	movs	r3, #0
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001ae2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f7ff fdc1 	bl	8001670 <draw_xy_wh_c>
		draw_xy_wh_img(411, 199, 200, 200, _1_IMAGE);
 8001aee:	4b07      	ldr	r3, [pc, #28]	; (8001b0c <LcdTask+0xc4>)
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	23c8      	movs	r3, #200	; 0xc8
 8001af4:	22c8      	movs	r2, #200	; 0xc8
 8001af6:	21c7      	movs	r1, #199	; 0xc7
 8001af8:	f240 109b 	movw	r0, #411	; 0x19b
 8001afc:	f7ff fddd 	bl	80016ba <draw_xy_wh_img>
		osDelay(5000);
 8001b00:	f241 3088 	movw	r0, #5000	; 0x1388
 8001b04:	f00d fc0d 	bl	800f322 <osDelay>
		draw_xy_wh_c(0, 0, 1024, 600, 0);
 8001b08:	e7a2      	b.n	8001a50 <LcdTask+0x8>
 8001b0a:	bf00      	nop
 8001b0c:	08029624 	.word	0x08029624

08001b10 <InfoTask>:
	}
}

void InfoTask(void *argument){
 8001b10:	b580      	push	{r7, lr}
 8001b12:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b20:	6018      	str	r0, [r3, #0]
	float temp = 0.;
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
	char buff[500];
	osDelay(1000);
 8001b2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b2e:	f00d fbf8 	bl	800f322 <osDelay>
	while(1){
		temp = get_cpu_temp();
 8001b32:	f7ff fa91 	bl	8001058 <get_cpu_temp>
 8001b36:	ed87 0a7f 	vstr	s0, [r7, #508]	; 0x1fc
		printf("\r\n*******************Sys Info*******************\r\n");
 8001b3a:	4818      	ldr	r0, [pc, #96]	; (8001b9c <InfoTask+0x8c>)
 8001b3c:	f01e fa6a 	bl	8020014 <puts>
		printf("CPU Temp: %.2f'C\r\n", temp); // @suppress("Float formatting support")
 8001b40:	f8d7 01fc 	ldr.w	r0, [r7, #508]	; 0x1fc
 8001b44:	f7fe fd10 	bl	8000568 <__aeabi_f2d>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4814      	ldr	r0, [pc, #80]	; (8001ba0 <InfoTask+0x90>)
 8001b4e:	f01e fa09 	bl	801ff64 <printf>
		vTaskList(buff);
 8001b52:	f107 0308 	add.w	r3, r7, #8
 8001b56:	4618      	mov	r0, r3
 8001b58:	f010 fb64 	bl	8012224 <vTaskList>
		printf("TaskName\tSta\tPrior\tFStack\tID\r\n");
 8001b5c:	4811      	ldr	r0, [pc, #68]	; (8001ba4 <InfoTask+0x94>)
 8001b5e:	f01e fa59 	bl	8020014 <puts>
		printf("%s\r\n", buff);
 8001b62:	f107 0308 	add.w	r3, r7, #8
 8001b66:	4619      	mov	r1, r3
 8001b68:	480f      	ldr	r0, [pc, #60]	; (8001ba8 <InfoTask+0x98>)
 8001b6a:	f01e f9fb 	bl	801ff64 <printf>
		vTaskGetRunTimeStats(buff);
 8001b6e:	f107 0308 	add.w	r3, r7, #8
 8001b72:	4618      	mov	r0, r3
 8001b74:	f010 fbec 	bl	8012350 <vTaskGetRunTimeStats>
		printf("TaskName\tRunTime\t\tCPUload\r\n");
 8001b78:	480c      	ldr	r0, [pc, #48]	; (8001bac <InfoTask+0x9c>)
 8001b7a:	f01e fa4b 	bl	8020014 <puts>
		printf("%s\r\n", buff);
 8001b7e:	f107 0308 	add.w	r3, r7, #8
 8001b82:	4619      	mov	r1, r3
 8001b84:	4808      	ldr	r0, [pc, #32]	; (8001ba8 <InfoTask+0x98>)
 8001b86:	f01e f9ed 	bl	801ff64 <printf>
		printf("*******************End Info*******************\r\n");
 8001b8a:	4809      	ldr	r0, [pc, #36]	; (8001bb0 <InfoTask+0xa0>)
 8001b8c:	f01e fa42 	bl	8020014 <puts>
		osDelay(5000);
 8001b90:	f241 3088 	movw	r0, #5000	; 0x1388
 8001b94:	f00d fbc5 	bl	800f322 <osDelay>
		temp = get_cpu_temp();
 8001b98:	e7cb      	b.n	8001b32 <InfoTask+0x22>
 8001b9a:	bf00      	nop
 8001b9c:	08026148 	.word	0x08026148
 8001ba0:	0802617c 	.word	0x0802617c
 8001ba4:	08026190 	.word	0x08026190
 8001ba8:	08026140 	.word	0x08026140
 8001bac:	080261b0 	.word	0x080261b0
 8001bb0:	080261cc 	.word	0x080261cc

08001bb4 <mqtt_request_cb_fun>:
	}
}


static void mqtt_request_cb_fun(void *arg, err_t err){
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	70fb      	strb	r3, [r7, #3]
	if(err == ERR_OK){
 8001bc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d105      	bne.n	8001bd4 <mqtt_request_cb_fun+0x20>
		printf("topic%d request is ok\r\n", (int)arg);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4806      	ldr	r0, [pc, #24]	; (8001be8 <mqtt_request_cb_fun+0x34>)
 8001bce:	f01e f9c9 	bl	801ff64 <printf>
	}else printf("error :%d\r\n", err);
}
 8001bd2:	e005      	b.n	8001be0 <mqtt_request_cb_fun+0x2c>
	}else printf("error :%d\r\n", err);
 8001bd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4804      	ldr	r0, [pc, #16]	; (8001bec <mqtt_request_cb_fun+0x38>)
 8001bdc:	f01e f9c2 	bl	801ff64 <printf>
}
 8001be0:	bf00      	nop
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	080261fc 	.word	0x080261fc
 8001bec:	08026214 	.word	0x08026214

08001bf0 <mqtt_incoming_publish_cb>:

static void mqtt_incoming_publish_cb(void *arg, const char *topic, u32_t tot_len){
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
	printf("topic: %s, tot_len: %ld\r\n", topic, tot_len);
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	68b9      	ldr	r1, [r7, #8]
 8001c00:	4803      	ldr	r0, [pc, #12]	; (8001c10 <mqtt_incoming_publish_cb+0x20>)
 8001c02:	f01e f9af 	bl	801ff64 <printf>
}
 8001c06:	bf00      	nop
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	08026220 	.word	0x08026220

08001c14 <mqtt_incoming_data_cb>:

static void mqtt_incoming_data_cb(void *arg, const u8_t *data, u16_t len, u8_t flags){
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	4611      	mov	r1, r2
 8001c20:	461a      	mov	r2, r3
 8001c22:	460b      	mov	r3, r1
 8001c24:	80fb      	strh	r3, [r7, #6]
 8001c26:	4613      	mov	r3, r2
 8001c28:	717b      	strb	r3, [r7, #5]
	printf("data: %s, tot_len: %d, flags: %d\r\n",data, len, flags);
 8001c2a:	88fa      	ldrh	r2, [r7, #6]
 8001c2c:	797b      	ldrb	r3, [r7, #5]
 8001c2e:	68b9      	ldr	r1, [r7, #8]
 8001c30:	4803      	ldr	r0, [pc, #12]	; (8001c40 <mqtt_incoming_data_cb+0x2c>)
 8001c32:	f01e f997 	bl	801ff64 <printf>
}
 8001c36:	bf00      	nop
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	0802623c 	.word	0x0802623c

08001c44 <MQTT_Task>:

void MQTT_Task(void *argument){
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b092      	sub	sp, #72	; 0x48
 8001c48:	af04      	add	r7, sp, #16
 8001c4a:	6078      	str	r0, [r7, #4]
	err_t ret = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	osSemaphoreId_t semaphore = (osSemaphoreId_t)argument;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	633b      	str	r3, [r7, #48]	; 0x30
	osSemaphoreAcquire (semaphore, 0xFFFFFFFF);
 8001c56:	f04f 31ff 	mov.w	r1, #4294967295
 8001c5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c5c:	f00d fd14 	bl	800f688 <osSemaphoreAcquire>
	mqtt_client_t *client;
	ip_addr_t ipaddr;
	IP4_ADDR(&ipaddr, 192, 168, 0, 110);
 8001c60:	4b40      	ldr	r3, [pc, #256]	; (8001d64 <MQTT_Task+0x120>)
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
	const struct mqtt_connect_client_info_t client_info = {
 8001c64:	f107 0308 	add.w	r3, r7, #8
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
 8001c74:	615a      	str	r2, [r3, #20]
 8001c76:	619a      	str	r2, [r3, #24]
 8001c78:	4b3b      	ldr	r3, [pc, #236]	; (8001d68 <MQTT_Task+0x124>)
 8001c7a:	60bb      	str	r3, [r7, #8]
 8001c7c:	4b3b      	ldr	r3, [pc, #236]	; (8001d6c <MQTT_Task+0x128>)
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	233c      	movs	r3, #60	; 0x3c
 8001c82:	82bb      	strh	r3, [r7, #20]
		.client_id = "12",
		.client_pass = NULL,
		.client_user = "lzh",
		.keep_alive = 60,
	};
	client = mqtt_client_new();
 8001c84:	f013 f810 	bl	8014ca8 <mqtt_client_new>
 8001c88:	62f8      	str	r0, [r7, #44]	; 0x2c
	ret = mqtt_client_connect(client, &ipaddr, 1883, NULL, NULL, &client_info);
 8001c8a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001c8e:	f107 0308 	add.w	r3, r7, #8
 8001c92:	9301      	str	r3, [sp, #4]
 8001c94:	2300      	movs	r3, #0
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f240 725b 	movw	r2, #1883	; 0x75b
 8001c9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001ca0:	f013 f80c 	bl	8014cbc <mqtt_client_connect>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if(ret != ERR_OK){
 8001caa:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d005      	beq.n	8001cbe <MQTT_Task+0x7a>
		printf("mqtt_client_connect is error \r\n");
 8001cb2:	482f      	ldr	r0, [pc, #188]	; (8001d70 <MQTT_Task+0x12c>)
 8001cb4:	f01e f9ae 	bl	8020014 <puts>
		vTaskDelete(NULL);
 8001cb8:	2000      	movs	r0, #0
 8001cba:	f00f fa21 	bl	8011100 <vTaskDelete>
	}
	printf("mqtt_client_connect is ok \r\n");
 8001cbe:	482d      	ldr	r0, [pc, #180]	; (8001d74 <MQTT_Task+0x130>)
 8001cc0:	f01e f9a8 	bl	8020014 <puts>
	mqtt_set_inpub_callback(client, mqtt_incoming_publish_cb, mqtt_incoming_data_cb, NULL);
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	4a2c      	ldr	r2, [pc, #176]	; (8001d78 <MQTT_Task+0x134>)
 8001cc8:	492c      	ldr	r1, [pc, #176]	; (8001d7c <MQTT_Task+0x138>)
 8001cca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001ccc:	f012 ffc8 	bl	8014c60 <mqtt_set_inpub_callback>
	mqtt_subscribe(client, "topic1", 0, mqtt_request_cb_fun, (void*)1);
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	9301      	str	r3, [sp, #4]
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	4b29      	ldr	r3, [pc, #164]	; (8001d80 <MQTT_Task+0x13c>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	4929      	ldr	r1, [pc, #164]	; (8001d84 <MQTT_Task+0x140>)
 8001cde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001ce0:	f012 fee8 	bl	8014ab4 <mqtt_sub_unsub>
	mqtt_subscribe(client, "topic2", 0, mqtt_request_cb_fun, (void*)2);
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	9301      	str	r3, [sp, #4]
 8001ce8:	2302      	movs	r3, #2
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	4b24      	ldr	r3, [pc, #144]	; (8001d80 <MQTT_Task+0x13c>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	4925      	ldr	r1, [pc, #148]	; (8001d88 <MQTT_Task+0x144>)
 8001cf2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001cf4:	f012 fede 	bl	8014ab4 <mqtt_sub_unsub>
	mqtt_subscribe(client, "topic3", 0, mqtt_request_cb_fun, (void*)3);
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	9301      	str	r3, [sp, #4]
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	4b1f      	ldr	r3, [pc, #124]	; (8001d80 <MQTT_Task+0x13c>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	4921      	ldr	r1, [pc, #132]	; (8001d8c <MQTT_Task+0x148>)
 8001d06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d08:	f012 fed4 	bl	8014ab4 <mqtt_sub_unsub>
	const char * payload = "msg from stm32";
 8001d0c:	4b20      	ldr	r3, [pc, #128]	; (8001d90 <MQTT_Task+0x14c>)
 8001d0e:	62bb      	str	r3, [r7, #40]	; 0x28

	while(1){
		ret = mqtt_publish(client, "topic4", payload, strlen(payload), 2, 0, NULL, NULL);
 8001d10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d12:	f7fe fa6d 	bl	80001f0 <strlen>
 8001d16:	4603      	mov	r3, r0
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	9203      	str	r2, [sp, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	9202      	str	r2, [sp, #8]
 8001d22:	2200      	movs	r2, #0
 8001d24:	9201      	str	r2, [sp, #4]
 8001d26:	2202      	movs	r2, #2
 8001d28:	9200      	str	r2, [sp, #0]
 8001d2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d2c:	4919      	ldr	r1, [pc, #100]	; (8001d94 <MQTT_Task+0x150>)
 8001d2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d30:	f012 fdec 	bl	801490c <mqtt_publish>
 8001d34:	4603      	mov	r3, r0
 8001d36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if(ret == 0){
 8001d3a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d104      	bne.n	8001d4c <MQTT_Task+0x108>
			printf("mqtt_publish: %s\r\n", payload);
 8001d42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d44:	4814      	ldr	r0, [pc, #80]	; (8001d98 <MQTT_Task+0x154>)
 8001d46:	f01e f90d 	bl	801ff64 <printf>
 8001d4a:	e005      	b.n	8001d58 <MQTT_Task+0x114>
		}else{
			printf("mqtt_publish error:%d\r\n", ret);
 8001d4c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001d50:	4619      	mov	r1, r3
 8001d52:	4812      	ldr	r0, [pc, #72]	; (8001d9c <MQTT_Task+0x158>)
 8001d54:	f01e f906 	bl	801ff64 <printf>
		}
		osDelay(5000);
 8001d58:	f241 3088 	movw	r0, #5000	; 0x1388
 8001d5c:	f00d fae1 	bl	800f322 <osDelay>
		ret = mqtt_publish(client, "topic4", payload, strlen(payload), 2, 0, NULL, NULL);
 8001d60:	e7d6      	b.n	8001d10 <MQTT_Task+0xcc>
 8001d62:	bf00      	nop
 8001d64:	6e00a8c0 	.word	0x6e00a8c0
 8001d68:	08026260 	.word	0x08026260
 8001d6c:	08026264 	.word	0x08026264
 8001d70:	08026268 	.word	0x08026268
 8001d74:	08026288 	.word	0x08026288
 8001d78:	08001c15 	.word	0x08001c15
 8001d7c:	08001bf1 	.word	0x08001bf1
 8001d80:	08001bb5 	.word	0x08001bb5
 8001d84:	080262a4 	.word	0x080262a4
 8001d88:	080262ac 	.word	0x080262ac
 8001d8c:	080262b4 	.word	0x080262b4
 8001d90:	080262bc 	.word	0x080262bc
 8001d94:	080262cc 	.word	0x080262cc
 8001d98:	080262d4 	.word	0x080262d4
 8001d9c:	080262e8 	.word	0x080262e8

08001da0 <TouchTask>:
	}
}


void TouchTask(void *argument){
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]

	while(1){

		osDelay(1000);
 8001da8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dac:	f00d fab9 	bl	800f322 <osDelay>
 8001db0:	e7fa      	b.n	8001da8 <TouchTask+0x8>
	...

08001db4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08e      	sub	sp, #56	; 0x38
 8001db8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	605a      	str	r2, [r3, #4]
 8001dc4:	609a      	str	r2, [r3, #8]
 8001dc6:	60da      	str	r2, [r3, #12]
 8001dc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	623b      	str	r3, [r7, #32]
 8001dce:	4ba8      	ldr	r3, [pc, #672]	; (8002070 <MX_GPIO_Init+0x2bc>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4aa7      	ldr	r2, [pc, #668]	; (8002070 <MX_GPIO_Init+0x2bc>)
 8001dd4:	f043 0310 	orr.w	r3, r3, #16
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4ba5      	ldr	r3, [pc, #660]	; (8002070 <MX_GPIO_Init+0x2bc>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f003 0310 	and.w	r3, r3, #16
 8001de2:	623b      	str	r3, [r7, #32]
 8001de4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
 8001dea:	4ba1      	ldr	r3, [pc, #644]	; (8002070 <MX_GPIO_Init+0x2bc>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4aa0      	ldr	r2, [pc, #640]	; (8002070 <MX_GPIO_Init+0x2bc>)
 8001df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b9e      	ldr	r3, [pc, #632]	; (8002070 <MX_GPIO_Init+0x2bc>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfe:	61fb      	str	r3, [r7, #28]
 8001e00:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	61bb      	str	r3, [r7, #24]
 8001e06:	4b9a      	ldr	r3, [pc, #616]	; (8002070 <MX_GPIO_Init+0x2bc>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a99      	ldr	r2, [pc, #612]	; (8002070 <MX_GPIO_Init+0x2bc>)
 8001e0c:	f043 0304 	orr.w	r3, r3, #4
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b97      	ldr	r3, [pc, #604]	; (8002070 <MX_GPIO_Init+0x2bc>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	61bb      	str	r3, [r7, #24]
 8001e1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	4b93      	ldr	r3, [pc, #588]	; (8002070 <MX_GPIO_Init+0x2bc>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	4a92      	ldr	r2, [pc, #584]	; (8002070 <MX_GPIO_Init+0x2bc>)
 8001e28:	f043 0320 	orr.w	r3, r3, #32
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2e:	4b90      	ldr	r3, [pc, #576]	; (8002070 <MX_GPIO_Init+0x2bc>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f003 0320 	and.w	r3, r3, #32
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	4b8c      	ldr	r3, [pc, #560]	; (8002070 <MX_GPIO_Init+0x2bc>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	4a8b      	ldr	r2, [pc, #556]	; (8002070 <MX_GPIO_Init+0x2bc>)
 8001e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e48:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4a:	4b89      	ldr	r3, [pc, #548]	; (8002070 <MX_GPIO_Init+0x2bc>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e52:	613b      	str	r3, [r7, #16]
 8001e54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	4b85      	ldr	r3, [pc, #532]	; (8002070 <MX_GPIO_Init+0x2bc>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	4a84      	ldr	r2, [pc, #528]	; (8002070 <MX_GPIO_Init+0x2bc>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	6313      	str	r3, [r2, #48]	; 0x30
 8001e66:	4b82      	ldr	r3, [pc, #520]	; (8002070 <MX_GPIO_Init+0x2bc>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	4b7e      	ldr	r3, [pc, #504]	; (8002070 <MX_GPIO_Init+0x2bc>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	4a7d      	ldr	r2, [pc, #500]	; (8002070 <MX_GPIO_Init+0x2bc>)
 8001e7c:	f043 0302 	orr.w	r3, r3, #2
 8001e80:	6313      	str	r3, [r2, #48]	; 0x30
 8001e82:	4b7b      	ldr	r3, [pc, #492]	; (8002070 <MX_GPIO_Init+0x2bc>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	607b      	str	r3, [r7, #4]
 8001e92:	4b77      	ldr	r3, [pc, #476]	; (8002070 <MX_GPIO_Init+0x2bc>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	4a76      	ldr	r2, [pc, #472]	; (8002070 <MX_GPIO_Init+0x2bc>)
 8001e98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9e:	4b74      	ldr	r3, [pc, #464]	; (8002070 <MX_GPIO_Init+0x2bc>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea6:	607b      	str	r3, [r7, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	603b      	str	r3, [r7, #0]
 8001eae:	4b70      	ldr	r3, [pc, #448]	; (8002070 <MX_GPIO_Init+0x2bc>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	4a6f      	ldr	r2, [pc, #444]	; (8002070 <MX_GPIO_Init+0x2bc>)
 8001eb4:	f043 0308 	orr.w	r3, r3, #8
 8001eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eba:	4b6d      	ldr	r3, [pc, #436]	; (8002070 <MX_GPIO_Init+0x2bc>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	603b      	str	r3, [r7, #0]
 8001ec4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_SET);
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001ecc:	4869      	ldr	r0, [pc, #420]	; (8002074 <MX_GPIO_Init+0x2c0>)
 8001ece:	f003 ff1f 	bl	8005d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_RST_GPIO_Port, TP_RST_Pin, GPIO_PIN_RESET);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ed8:	4867      	ldr	r0, [pc, #412]	; (8002078 <MX_GPIO_Init+0x2c4>)
 8001eda:	f003 ff19 	bl	8005d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8001ede:	2201      	movs	r2, #1
 8001ee0:	2180      	movs	r1, #128	; 0x80
 8001ee2:	4865      	ldr	r0, [pc, #404]	; (8002078 <MX_GPIO_Init+0x2c4>)
 8001ee4:	f003 ff14 	bl	8005d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ee8:	230c      	movs	r3, #12
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eec:	2303      	movs	r3, #3
 8001eee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4860      	ldr	r0, [pc, #384]	; (800207c <MX_GPIO_Init+0x2c8>)
 8001efc:	f003 fd5c 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI11 PI1 PI3
                           PI5 PI6 PI7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_1|GPIO_PIN_3
 8001f00:	f640 13ea 	movw	r3, #2538	; 0x9ea
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f06:	2303      	movs	r3, #3
 8001f08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f12:	4619      	mov	r1, r3
 8001f14:	485a      	ldr	r0, [pc, #360]	; (8002080 <MX_GPIO_Init+0x2cc>)
 8001f16:	f003 fd4f 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001f1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f20:	2300      	movs	r3, #0
 8001f22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4855      	ldr	r0, [pc, #340]	; (8002084 <MX_GPIO_Init+0x2d0>)
 8001f30:	f003 fd42 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001f34:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f46:	4619      	mov	r1, r3
 8001f48:	484f      	ldr	r0, [pc, #316]	; (8002088 <MX_GPIO_Init+0x2d4>)
 8001f4a:	f003 fd35 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6;
 8001f4e:	234c      	movs	r3, #76	; 0x4c
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f52:	2303      	movs	r3, #3
 8001f54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4848      	ldr	r0, [pc, #288]	; (8002084 <MX_GPIO_Init+0x2d0>)
 8001f62:	f003 fd29 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f66:	2301      	movs	r3, #1
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f76:	4619      	mov	r1, r3
 8001f78:	4844      	ldr	r0, [pc, #272]	; (800208c <MX_GPIO_Init+0x2d8>)
 8001f7a:	f003 fd1d 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
 8001f7e:	f248 1330 	movw	r3, #33072	; 0x8130
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f84:	2303      	movs	r3, #3
 8001f86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f90:	4619      	mov	r1, r3
 8001f92:	483e      	ldr	r0, [pc, #248]	; (800208c <MX_GPIO_Init+0x2d8>)
 8001f94:	f003 fd10 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001f98:	f24f 03fc 	movw	r3, #61692	; 0xf0fc
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001faa:	4619      	mov	r1, r3
 8001fac:	4838      	ldr	r0, [pc, #224]	; (8002090 <MX_GPIO_Init+0x2dc>)
 8001fae:	f003 fd03 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH9 PH13 PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_13|GPIO_PIN_15;
 8001fb2:	f44f 4322 	mov.w	r3, #41472	; 0xa200
 8001fb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	482b      	ldr	r0, [pc, #172]	; (8002074 <MX_GPIO_Init+0x2c0>)
 8001fc8:	f003 fcf6 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH10 PH11 PH12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001fcc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001fde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4823      	ldr	r0, [pc, #140]	; (8002074 <MX_GPIO_Init+0x2c0>)
 8001fe6:	f003 fce7 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PD7 */
  GPIO_InitStruct.Pin = TP_RST_Pin|GPIO_PIN_7;
 8001fea:	f44f 6308 	mov.w	r3, #2176	; 0x880
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ffc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002000:	4619      	mov	r1, r3
 8002002:	481d      	ldr	r0, [pc, #116]	; (8002078 <MX_GPIO_Init+0x2c4>)
 8002004:	f003 fcd8 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD3 PD4 PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002008:	f241 0338 	movw	r3, #4152	; 0x1038
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800200e:	2303      	movs	r3, #3
 8002010:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800201a:	4619      	mov	r1, r3
 800201c:	4816      	ldr	r0, [pc, #88]	; (8002078 <MX_GPIO_Init+0x2c4>)
 800201e:	f003 fccb 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TP_INT_Pin;
 8002022:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002026:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002028:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800202c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TP_INT_GPIO_Port, &GPIO_InitStruct);
 8002032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002036:	4619      	mov	r1, r3
 8002038:	480f      	ldr	r0, [pc, #60]	; (8002078 <MX_GPIO_Init+0x2c4>)
 800203a:	f003 fcbd 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PG3 PG9 PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10;
 800203e:	f240 630c 	movw	r3, #1548	; 0x60c
 8002042:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002044:	2303      	movs	r3, #3
 8002046:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800204c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002050:	4619      	mov	r1, r3
 8002052:	4810      	ldr	r0, [pc, #64]	; (8002094 <MX_GPIO_Init+0x2e0>)
 8002054:	f003 fcb0 	bl	80059b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002058:	2200      	movs	r2, #0
 800205a:	2105      	movs	r1, #5
 800205c:	2028      	movs	r0, #40	; 0x28
 800205e:	f001 fcad 	bl	80039bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002062:	2028      	movs	r0, #40	; 0x28
 8002064:	f001 fcc6 	bl	80039f4 <HAL_NVIC_EnableIRQ>

}
 8002068:	bf00      	nop
 800206a:	3738      	adds	r7, #56	; 0x38
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40023800 	.word	0x40023800
 8002074:	40021c00 	.word	0x40021c00
 8002078:	40020c00 	.word	0x40020c00
 800207c:	40021000 	.word	0x40021000
 8002080:	40022000 	.word	0x40022000
 8002084:	40020800 	.word	0x40020800
 8002088:	40021400 	.word	0x40021400
 800208c:	40020000 	.word	0x40020000
 8002090:	40020400 	.word	0x40020400
 8002094:	40021800 	.word	0x40021800

08002098 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800209c:	4b1b      	ldr	r3, [pc, #108]	; (800210c <MX_I2C2_Init+0x74>)
 800209e:	4a1c      	ldr	r2, [pc, #112]	; (8002110 <MX_I2C2_Init+0x78>)
 80020a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80020a2:	4b1a      	ldr	r3, [pc, #104]	; (800210c <MX_I2C2_Init+0x74>)
 80020a4:	4a1b      	ldr	r2, [pc, #108]	; (8002114 <MX_I2C2_Init+0x7c>)
 80020a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020a8:	4b18      	ldr	r3, [pc, #96]	; (800210c <MX_I2C2_Init+0x74>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 32;
 80020ae:	4b17      	ldr	r3, [pc, #92]	; (800210c <MX_I2C2_Init+0x74>)
 80020b0:	2220      	movs	r2, #32
 80020b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020b4:	4b15      	ldr	r3, [pc, #84]	; (800210c <MX_I2C2_Init+0x74>)
 80020b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020ba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020bc:	4b13      	ldr	r3, [pc, #76]	; (800210c <MX_I2C2_Init+0x74>)
 80020be:	2200      	movs	r2, #0
 80020c0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80020c2:	4b12      	ldr	r3, [pc, #72]	; (800210c <MX_I2C2_Init+0x74>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020c8:	4b10      	ldr	r3, [pc, #64]	; (800210c <MX_I2C2_Init+0x74>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020ce:	4b0f      	ldr	r3, [pc, #60]	; (800210c <MX_I2C2_Init+0x74>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80020d4:	480d      	ldr	r0, [pc, #52]	; (800210c <MX_I2C2_Init+0x74>)
 80020d6:	f003 fe73 	bl	8005dc0 <HAL_I2C_Init>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80020e0:	f000 fb14 	bl	800270c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020e4:	2100      	movs	r1, #0
 80020e6:	4809      	ldr	r0, [pc, #36]	; (800210c <MX_I2C2_Init+0x74>)
 80020e8:	f003 ffae 	bl	8006048 <HAL_I2CEx_ConfigAnalogFilter>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80020f2:	f000 fb0b 	bl	800270c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80020f6:	2100      	movs	r1, #0
 80020f8:	4804      	ldr	r0, [pc, #16]	; (800210c <MX_I2C2_Init+0x74>)
 80020fa:	f003 ffe1 	bl	80060c0 <HAL_I2CEx_ConfigDigitalFilter>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8002104:	f000 fb02 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002108:	bf00      	nop
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20000ac4 	.word	0x20000ac4
 8002110:	40005800 	.word	0x40005800
 8002114:	00061a80 	.word	0x00061a80

08002118 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b08a      	sub	sp, #40	; 0x28
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002120:	f107 0314 	add.w	r3, r7, #20
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	60da      	str	r2, [r3, #12]
 800212e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a19      	ldr	r2, [pc, #100]	; (800219c <HAL_I2C_MspInit+0x84>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d12b      	bne.n	8002192 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	4b18      	ldr	r3, [pc, #96]	; (80021a0 <HAL_I2C_MspInit+0x88>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	4a17      	ldr	r2, [pc, #92]	; (80021a0 <HAL_I2C_MspInit+0x88>)
 8002144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002148:	6313      	str	r3, [r2, #48]	; 0x30
 800214a:	4b15      	ldr	r3, [pc, #84]	; (80021a0 <HAL_I2C_MspInit+0x88>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002156:	2330      	movs	r3, #48	; 0x30
 8002158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800215a:	2312      	movs	r3, #18
 800215c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002162:	2303      	movs	r3, #3
 8002164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002166:	2304      	movs	r3, #4
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800216a:	f107 0314 	add.w	r3, r7, #20
 800216e:	4619      	mov	r1, r3
 8002170:	480c      	ldr	r0, [pc, #48]	; (80021a4 <HAL_I2C_MspInit+0x8c>)
 8002172:	f003 fc21 	bl	80059b8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <HAL_I2C_MspInit+0x88>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	4a08      	ldr	r2, [pc, #32]	; (80021a0 <HAL_I2C_MspInit+0x88>)
 8002180:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002184:	6413      	str	r3, [r2, #64]	; 0x40
 8002186:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <HAL_I2C_MspInit+0x88>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002192:	bf00      	nop
 8002194:	3728      	adds	r7, #40	; 0x28
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40005800 	.word	0x40005800
 80021a0:	40023800 	.word	0x40023800
 80021a4:	40021c00 	.word	0x40021c00

080021a8 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08e      	sub	sp, #56	; 0x38
 80021ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80021ae:	1d3b      	adds	r3, r7, #4
 80021b0:	2234      	movs	r2, #52	; 0x34
 80021b2:	2100      	movs	r1, #0
 80021b4:	4618      	mov	r0, r3
 80021b6:	f01d fecd 	bl	801ff54 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80021ba:	4b3a      	ldr	r3, [pc, #232]	; (80022a4 <MX_LTDC_Init+0xfc>)
 80021bc:	4a3a      	ldr	r2, [pc, #232]	; (80022a8 <MX_LTDC_Init+0x100>)
 80021be:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80021c0:	4b38      	ldr	r3, [pc, #224]	; (80022a4 <MX_LTDC_Init+0xfc>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80021c6:	4b37      	ldr	r3, [pc, #220]	; (80022a4 <MX_LTDC_Init+0xfc>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80021cc:	4b35      	ldr	r3, [pc, #212]	; (80022a4 <MX_LTDC_Init+0xfc>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80021d2:	4b34      	ldr	r3, [pc, #208]	; (80022a4 <MX_LTDC_Init+0xfc>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 19;
 80021d8:	4b32      	ldr	r3, [pc, #200]	; (80022a4 <MX_LTDC_Init+0xfc>)
 80021da:	2213      	movs	r2, #19
 80021dc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 2;
 80021de:	4b31      	ldr	r3, [pc, #196]	; (80022a4 <MX_LTDC_Init+0xfc>)
 80021e0:	2202      	movs	r2, #2
 80021e2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 159;
 80021e4:	4b2f      	ldr	r3, [pc, #188]	; (80022a4 <MX_LTDC_Init+0xfc>)
 80021e6:	229f      	movs	r2, #159	; 0x9f
 80021e8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 22;
 80021ea:	4b2e      	ldr	r3, [pc, #184]	; (80022a4 <MX_LTDC_Init+0xfc>)
 80021ec:	2216      	movs	r2, #22
 80021ee:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 1183;
 80021f0:	4b2c      	ldr	r3, [pc, #176]	; (80022a4 <MX_LTDC_Init+0xfc>)
 80021f2:	f240 429f 	movw	r2, #1183	; 0x49f
 80021f6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 622;
 80021f8:	4b2a      	ldr	r3, [pc, #168]	; (80022a4 <MX_LTDC_Init+0xfc>)
 80021fa:	f240 226e 	movw	r2, #622	; 0x26e
 80021fe:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 1343;
 8002200:	4b28      	ldr	r3, [pc, #160]	; (80022a4 <MX_LTDC_Init+0xfc>)
 8002202:	f240 523f 	movw	r2, #1343	; 0x53f
 8002206:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 634;
 8002208:	4b26      	ldr	r3, [pc, #152]	; (80022a4 <MX_LTDC_Init+0xfc>)
 800220a:	f240 227a 	movw	r2, #634	; 0x27a
 800220e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002210:	4b24      	ldr	r3, [pc, #144]	; (80022a4 <MX_LTDC_Init+0xfc>)
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002218:	4b22      	ldr	r3, [pc, #136]	; (80022a4 <MX_LTDC_Init+0xfc>)
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002220:	4b20      	ldr	r3, [pc, #128]	; (80022a4 <MX_LTDC_Init+0xfc>)
 8002222:	2200      	movs	r2, #0
 8002224:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002228:	481e      	ldr	r0, [pc, #120]	; (80022a4 <MX_LTDC_Init+0xfc>)
 800222a:	f003 ff89 	bl	8006140 <HAL_LTDC_Init>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8002234:	f000 fa6a 	bl	800270c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002238:	2300      	movs	r3, #0
 800223a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 1024;
 800223c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002240:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 600;
 8002246:	f44f 7316 	mov.w	r3, #600	; 0x258
 800224a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 800224c:	2301      	movs	r3, #1
 800224e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8002250:	23ff      	movs	r3, #255	; 0xff
 8002252:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800225c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800225e:	2305      	movs	r3, #5
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8002262:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8002266:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 1024;
 8002268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800226c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 600;
 800226e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002272:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800227a:	2300      	movs	r3, #0
 800227c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002280:	2300      	movs	r3, #0
 8002282:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002286:	1d3b      	adds	r3, r7, #4
 8002288:	2200      	movs	r2, #0
 800228a:	4619      	mov	r1, r3
 800228c:	4805      	ldr	r0, [pc, #20]	; (80022a4 <MX_LTDC_Init+0xfc>)
 800228e:	f004 f827 	bl	80062e0 <HAL_LTDC_ConfigLayer>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8002298:	f000 fa38 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800229c:	bf00      	nop
 800229e:	3738      	adds	r7, #56	; 0x38
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20000b18 	.word	0x20000b18
 80022a8:	40016800 	.word	0x40016800

080022ac <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b09e      	sub	sp, #120	; 0x78
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022c8:	2230      	movs	r2, #48	; 0x30
 80022ca:	2100      	movs	r1, #0
 80022cc:	4618      	mov	r0, r3
 80022ce:	f01d fe41 	bl	801ff54 <memset>
  if(ltdcHandle->Instance==LTDC)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4aa6      	ldr	r2, [pc, #664]	; (8002570 <HAL_LTDC_MspInit+0x2c4>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	f040 8144 	bne.w	8002566 <HAL_LTDC_MspInit+0x2ba>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80022de:	2308      	movs	r3, #8
 80022e0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 80022e2:	233c      	movs	r3, #60	; 0x3c
 80022e4:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80022e6:	2302      	movs	r3, #2
 80022e8:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80022ea:	2300      	movs	r3, #0
 80022ec:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022f2:	4618      	mov	r0, r3
 80022f4:	f004 fea4 	bl	8007040 <HAL_RCCEx_PeriphCLKConfig>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80022fe:	f000 fa05 	bl	800270c <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	633b      	str	r3, [r7, #48]	; 0x30
 8002306:	4b9b      	ldr	r3, [pc, #620]	; (8002574 <HAL_LTDC_MspInit+0x2c8>)
 8002308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230a:	4a9a      	ldr	r2, [pc, #616]	; (8002574 <HAL_LTDC_MspInit+0x2c8>)
 800230c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002310:	6453      	str	r3, [r2, #68]	; 0x44
 8002312:	4b98      	ldr	r3, [pc, #608]	; (8002574 <HAL_LTDC_MspInit+0x2c8>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002316:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800231a:	633b      	str	r3, [r7, #48]	; 0x30
 800231c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002322:	4b94      	ldr	r3, [pc, #592]	; (8002574 <HAL_LTDC_MspInit+0x2c8>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	4a93      	ldr	r2, [pc, #588]	; (8002574 <HAL_LTDC_MspInit+0x2c8>)
 8002328:	f043 0310 	orr.w	r3, r3, #16
 800232c:	6313      	str	r3, [r2, #48]	; 0x30
 800232e:	4b91      	ldr	r3, [pc, #580]	; (8002574 <HAL_LTDC_MspInit+0x2c8>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	f003 0310 	and.w	r3, r3, #16
 8002336:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	62bb      	str	r3, [r7, #40]	; 0x28
 800233e:	4b8d      	ldr	r3, [pc, #564]	; (8002574 <HAL_LTDC_MspInit+0x2c8>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	4a8c      	ldr	r2, [pc, #560]	; (8002574 <HAL_LTDC_MspInit+0x2c8>)
 8002344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002348:	6313      	str	r3, [r2, #48]	; 0x30
 800234a:	4b8a      	ldr	r3, [pc, #552]	; (8002574 <HAL_LTDC_MspInit+0x2c8>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002352:	62bb      	str	r3, [r7, #40]	; 0x28
 8002354:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
 800235a:	4b86      	ldr	r3, [pc, #536]	; (8002574 <HAL_LTDC_MspInit+0x2c8>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	4a85      	ldr	r2, [pc, #532]	; (8002574 <HAL_LTDC_MspInit+0x2c8>)
 8002360:	f043 0320 	orr.w	r3, r3, #32
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
 8002366:	4b83      	ldr	r3, [pc, #524]	; (8002574 <HAL_LTDC_MspInit+0x2c8>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f003 0320 	and.w	r3, r3, #32
 800236e:	627b      	str	r3, [r7, #36]	; 0x24
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	623b      	str	r3, [r7, #32]
 8002376:	4b7f      	ldr	r3, [pc, #508]	; (8002574 <HAL_LTDC_MspInit+0x2c8>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	4a7e      	ldr	r2, [pc, #504]	; (8002574 <HAL_LTDC_MspInit+0x2c8>)
 800237c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002380:	6313      	str	r3, [r2, #48]	; 0x30
 8002382:	4b7c      	ldr	r3, [pc, #496]	; (8002574 <HAL_LTDC_MspInit+0x2c8>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800238a:	623b      	str	r3, [r7, #32]
 800238c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
 8002392:	4b78      	ldr	r3, [pc, #480]	; (8002574 <HAL_LTDC_MspInit+0x2c8>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	4a77      	ldr	r2, [pc, #476]	; (8002574 <HAL_LTDC_MspInit+0x2c8>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	6313      	str	r3, [r2, #48]	; 0x30
 800239e:	4b75      	ldr	r3, [pc, #468]	; (8002574 <HAL_LTDC_MspInit+0x2c8>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	61fb      	str	r3, [r7, #28]
 80023a8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	61bb      	str	r3, [r7, #24]
 80023ae:	4b71      	ldr	r3, [pc, #452]	; (8002574 <HAL_LTDC_MspInit+0x2c8>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	4a70      	ldr	r2, [pc, #448]	; (8002574 <HAL_LTDC_MspInit+0x2c8>)
 80023b4:	f043 0302 	orr.w	r3, r3, #2
 80023b8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ba:	4b6e      	ldr	r3, [pc, #440]	; (8002574 <HAL_LTDC_MspInit+0x2c8>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	61bb      	str	r3, [r7, #24]
 80023c4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	4b6a      	ldr	r3, [pc, #424]	; (8002574 <HAL_LTDC_MspInit+0x2c8>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	4a69      	ldr	r2, [pc, #420]	; (8002574 <HAL_LTDC_MspInit+0x2c8>)
 80023d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023d4:	6313      	str	r3, [r2, #48]	; 0x30
 80023d6:	4b67      	ldr	r3, [pc, #412]	; (8002574 <HAL_LTDC_MspInit+0x2c8>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023de:	617b      	str	r3, [r7, #20]
 80023e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	4b63      	ldr	r3, [pc, #396]	; (8002574 <HAL_LTDC_MspInit+0x2c8>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	4a62      	ldr	r2, [pc, #392]	; (8002574 <HAL_LTDC_MspInit+0x2c8>)
 80023ec:	f043 0304 	orr.w	r3, r3, #4
 80023f0:	6313      	str	r3, [r2, #48]	; 0x30
 80023f2:	4b60      	ldr	r3, [pc, #384]	; (8002574 <HAL_LTDC_MspInit+0x2c8>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f003 0304 	and.w	r3, r3, #4
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	4b5c      	ldr	r3, [pc, #368]	; (8002574 <HAL_LTDC_MspInit+0x2c8>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	4a5b      	ldr	r2, [pc, #364]	; (8002574 <HAL_LTDC_MspInit+0x2c8>)
 8002408:	f043 0308 	orr.w	r3, r3, #8
 800240c:	6313      	str	r3, [r2, #48]	; 0x30
 800240e:	4b59      	ldr	r3, [pc, #356]	; (8002574 <HAL_LTDC_MspInit+0x2c8>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	68fb      	ldr	r3, [r7, #12]
    PG12     ------> LTDC_B1
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    PI4     ------> LTDC_B4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800241a:	2370      	movs	r3, #112	; 0x70
 800241c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241e:	2302      	movs	r3, #2
 8002420:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002426:	2303      	movs	r3, #3
 8002428:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800242a:	230e      	movs	r3, #14
 800242c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800242e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002432:	4619      	mov	r1, r3
 8002434:	4850      	ldr	r0, [pc, #320]	; (8002578 <HAL_LTDC_MspInit+0x2cc>)
 8002436:	f003 fabf 	bl	80059b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_2
 800243a:	f240 6315 	movw	r3, #1557	; 0x615
 800243e:	667b      	str	r3, [r7, #100]	; 0x64
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002440:	2302      	movs	r3, #2
 8002442:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002448:	2303      	movs	r3, #3
 800244a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800244c:	230e      	movs	r3, #14
 800244e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002450:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002454:	4619      	mov	r1, r3
 8002456:	4849      	ldr	r0, [pc, #292]	; (800257c <HAL_LTDC_MspInit+0x2d0>)
 8002458:	f003 faae 	bl	80059b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800245c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002460:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002462:	2302      	movs	r3, #2
 8002464:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	2300      	movs	r3, #0
 8002468:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800246a:	2303      	movs	r3, #3
 800246c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800246e:	230e      	movs	r3, #14
 8002470:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002472:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002476:	4619      	mov	r1, r3
 8002478:	4841      	ldr	r0, [pc, #260]	; (8002580 <HAL_LTDC_MspInit+0x2d4>)
 800247a:	f003 fa9d 	bl	80059b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_14;
 800247e:	f244 130c 	movw	r3, #16652	; 0x410c
 8002482:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002484:	2302      	movs	r3, #2
 8002486:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248c:	2303      	movs	r3, #3
 800248e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002490:	230e      	movs	r3, #14
 8002492:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002494:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002498:	4619      	mov	r1, r3
 800249a:	483a      	ldr	r0, [pc, #232]	; (8002584 <HAL_LTDC_MspInit+0x2d8>)
 800249c:	f003 fa8c 	bl	80059b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_11|GPIO_PIN_12;
 80024a0:	f641 0348 	movw	r3, #6216	; 0x1848
 80024a4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a6:	2302      	movs	r3, #2
 80024a8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ae:	2303      	movs	r3, #3
 80024b0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024b2:	230e      	movs	r3, #14
 80024b4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80024ba:	4619      	mov	r1, r3
 80024bc:	4832      	ldr	r0, [pc, #200]	; (8002588 <HAL_LTDC_MspInit+0x2dc>)
 80024be:	f003 fa7b 	bl	80059b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024c2:	2303      	movs	r3, #3
 80024c4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c6:	2302      	movs	r3, #2
 80024c8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ca:	2300      	movs	r3, #0
 80024cc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ce:	2303      	movs	r3, #3
 80024d0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80024d2:	2309      	movs	r3, #9
 80024d4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80024da:	4619      	mov	r1, r3
 80024dc:	482b      	ldr	r0, [pc, #172]	; (800258c <HAL_LTDC_MspInit+0x2e0>)
 80024de:	f003 fa6b 	bl	80059b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_9;
 80024e2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80024e6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e8:	2302      	movs	r3, #2
 80024ea:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f0:	2303      	movs	r3, #3
 80024f2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024f4:	230e      	movs	r3, #14
 80024f6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80024fc:	4619      	mov	r1, r3
 80024fe:	4823      	ldr	r0, [pc, #140]	; (800258c <HAL_LTDC_MspInit+0x2e0>)
 8002500:	f003 fa5a 	bl	80059b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_12;
 8002504:	f44f 53c6 	mov.w	r3, #6336	; 0x18c0
 8002508:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250a:	2302      	movs	r3, #2
 800250c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002512:	2303      	movs	r3, #3
 8002514:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002516:	230e      	movs	r3, #14
 8002518:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800251a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800251e:	4619      	mov	r1, r3
 8002520:	481b      	ldr	r0, [pc, #108]	; (8002590 <HAL_LTDC_MspInit+0x2e4>)
 8002522:	f003 fa49 	bl	80059b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002526:	2380      	movs	r3, #128	; 0x80
 8002528:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252a:	2302      	movs	r3, #2
 800252c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252e:	2300      	movs	r3, #0
 8002530:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002532:	2303      	movs	r3, #3
 8002534:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002536:	230e      	movs	r3, #14
 8002538:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800253a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800253e:	4619      	mov	r1, r3
 8002540:	4814      	ldr	r0, [pc, #80]	; (8002594 <HAL_LTDC_MspInit+0x2e8>)
 8002542:	f003 fa39 	bl	80059b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002546:	2340      	movs	r3, #64	; 0x40
 8002548:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254a:	2302      	movs	r3, #2
 800254c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254e:	2300      	movs	r3, #0
 8002550:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002552:	2303      	movs	r3, #3
 8002554:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002556:	230e      	movs	r3, #14
 8002558:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800255a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800255e:	4619      	mov	r1, r3
 8002560:	480d      	ldr	r0, [pc, #52]	; (8002598 <HAL_LTDC_MspInit+0x2ec>)
 8002562:	f003 fa29 	bl	80059b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8002566:	bf00      	nop
 8002568:	3778      	adds	r7, #120	; 0x78
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40016800 	.word	0x40016800
 8002574:	40023800 	.word	0x40023800
 8002578:	40021000 	.word	0x40021000
 800257c:	40022000 	.word	0x40022000
 8002580:	40021400 	.word	0x40021400
 8002584:	40021c00 	.word	0x40021c00
 8002588:	40020000 	.word	0x40020000
 800258c:	40020400 	.word	0x40020400
 8002590:	40021800 	.word	0x40021800
 8002594:	40020800 	.word	0x40020800
 8002598:	40020c00 	.word	0x40020c00

0800259c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025a0:	f000 fcde 	bl	8002f60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025a4:	f000 f822 	bl	80025ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025a8:	f7ff fc04 	bl	8001db4 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 80025ac:	f000 f8ea 	bl	8002784 <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 80025b0:	f000 fc20 	bl	8002df4 <MX_USART1_UART_Init>
  MX_DMA_Init();
 80025b4:	f7fe fdd8 	bl	8001168 <MX_DMA_Init>
  MX_FATFS_Init();
 80025b8:	f008 f8cc 	bl	800a754 <MX_FATFS_Init>
  MX_CRC_Init();
 80025bc:	f7fe fd9e 	bl	80010fc <MX_CRC_Init>
  MX_DMA2D_Init();
 80025c0:	f7fe fdfa 	bl	80011b8 <MX_DMA2D_Init>
  MX_FMC_Init();
 80025c4:	f7fe fedc 	bl	8001380 <MX_FMC_Init>
  MX_LTDC_Init();
 80025c8:	f7ff fdee 	bl	80021a8 <MX_LTDC_Init>
  MX_RNG_Init();
 80025cc:	f000 f8a4 	bl	8002718 <MX_RNG_Init>
  MX_ADC1_Init();
 80025d0:	f7fe fccc 	bl	8000f6c <MX_ADC1_Init>
  MX_TIM6_Init();
 80025d4:	f000 fbae 	bl	8002d34 <MX_TIM6_Init>
  MX_I2C2_Init();
 80025d8:	f7ff fd5e 	bl	8002098 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80025dc:	f00c fd8e 	bl	800f0fc <osKernelInitialize>
  MX_FREERTOS_Init();
 80025e0:	f7fe ffcc 	bl	800157c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80025e4:	f00c fdd0 	bl	800f188 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80025e8:	e7fe      	b.n	80025e8 <main+0x4c>
	...

080025ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b094      	sub	sp, #80	; 0x50
 80025f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025f2:	f107 0320 	add.w	r3, r7, #32
 80025f6:	2230      	movs	r2, #48	; 0x30
 80025f8:	2100      	movs	r1, #0
 80025fa:	4618      	mov	r0, r3
 80025fc:	f01d fcaa 	bl	801ff54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002600:	f107 030c 	add.w	r3, r7, #12
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002610:	2300      	movs	r3, #0
 8002612:	60bb      	str	r3, [r7, #8]
 8002614:	4b2b      	ldr	r3, [pc, #172]	; (80026c4 <SystemClock_Config+0xd8>)
 8002616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002618:	4a2a      	ldr	r2, [pc, #168]	; (80026c4 <SystemClock_Config+0xd8>)
 800261a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800261e:	6413      	str	r3, [r2, #64]	; 0x40
 8002620:	4b28      	ldr	r3, [pc, #160]	; (80026c4 <SystemClock_Config+0xd8>)
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800262c:	2300      	movs	r3, #0
 800262e:	607b      	str	r3, [r7, #4]
 8002630:	4b25      	ldr	r3, [pc, #148]	; (80026c8 <SystemClock_Config+0xdc>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a24      	ldr	r2, [pc, #144]	; (80026c8 <SystemClock_Config+0xdc>)
 8002636:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800263a:	6013      	str	r3, [r2, #0]
 800263c:	4b22      	ldr	r3, [pc, #136]	; (80026c8 <SystemClock_Config+0xdc>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002644:	607b      	str	r3, [r7, #4]
 8002646:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002648:	2301      	movs	r3, #1
 800264a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800264c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002652:	2302      	movs	r3, #2
 8002654:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002656:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800265a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800265c:	230f      	movs	r3, #15
 800265e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002660:	23d8      	movs	r3, #216	; 0xd8
 8002662:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002664:	2302      	movs	r3, #2
 8002666:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002668:	2308      	movs	r3, #8
 800266a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800266c:	f107 0320 	add.w	r3, r7, #32
 8002670:	4618      	mov	r0, r3
 8002672:	f004 f85b 	bl	800672c <HAL_RCC_OscConfig>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800267c:	f000 f846 	bl	800270c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002680:	f004 f804 	bl	800668c <HAL_PWREx_EnableOverDrive>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800268a:	f000 f83f 	bl	800270c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800268e:	230f      	movs	r3, #15
 8002690:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002692:	2302      	movs	r3, #2
 8002694:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002696:	2300      	movs	r3, #0
 8002698:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800269a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800269e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80026a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80026a6:	f107 030c 	add.w	r3, r7, #12
 80026aa:	2105      	movs	r1, #5
 80026ac:	4618      	mov	r0, r3
 80026ae:	f004 fab5 	bl	8006c1c <HAL_RCC_ClockConfig>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80026b8:	f000 f828 	bl	800270c <Error_Handler>
  }
}
 80026bc:	bf00      	nop
 80026be:	3750      	adds	r7, #80	; 0x50
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40007000 	.word	0x40007000

080026cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a09      	ldr	r2, [pc, #36]	; (8002700 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d101      	bne.n	80026e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80026de:	f000 fc61 	bl	8002fa4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance == TIM6){
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a07      	ldr	r2, [pc, #28]	; (8002704 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d104      	bne.n	80026f6 <HAL_TIM_PeriodElapsedCallback+0x2a>
  		timer_cnt++;
 80026ec:	4b06      	ldr	r3, [pc, #24]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	3301      	adds	r3, #1
 80026f2:	4a05      	ldr	r2, [pc, #20]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80026f4:	6013      	str	r3, [r2, #0]
  	}
  /* USER CODE END Callback 1 */
}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40001400 	.word	0x40001400
 8002704:	40001000 	.word	0x40001000
 8002708:	20000d60 	.word	0x20000d60

0800270c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002710:	b672      	cpsid	i
}
 8002712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002714:	e7fe      	b.n	8002714 <Error_Handler+0x8>
	...

08002718 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800271c:	4b06      	ldr	r3, [pc, #24]	; (8002738 <MX_RNG_Init+0x20>)
 800271e:	4a07      	ldr	r2, [pc, #28]	; (800273c <MX_RNG_Init+0x24>)
 8002720:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002722:	4805      	ldr	r0, [pc, #20]	; (8002738 <MX_RNG_Init+0x20>)
 8002724:	f004 fe4c 	bl	80073c0 <HAL_RNG_Init>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800272e:	f7ff ffed 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002732:	bf00      	nop
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20000bc0 	.word	0x20000bc0
 800273c:	50060800 	.word	0x50060800

08002740 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a0b      	ldr	r2, [pc, #44]	; (800277c <HAL_RNG_MspInit+0x3c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d10d      	bne.n	800276e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	4b0a      	ldr	r3, [pc, #40]	; (8002780 <HAL_RNG_MspInit+0x40>)
 8002758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800275a:	4a09      	ldr	r2, [pc, #36]	; (8002780 <HAL_RNG_MspInit+0x40>)
 800275c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002760:	6353      	str	r3, [r2, #52]	; 0x34
 8002762:	4b07      	ldr	r3, [pc, #28]	; (8002780 <HAL_RNG_MspInit+0x40>)
 8002764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800276e:	bf00      	nop
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	50060800 	.word	0x50060800
 8002780:	40023800 	.word	0x40023800

08002784 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002788:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <MX_SDIO_SD_Init+0x38>)
 800278a:	4a0d      	ldr	r2, [pc, #52]	; (80027c0 <MX_SDIO_SD_Init+0x3c>)
 800278c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800278e:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <MX_SDIO_SD_Init+0x38>)
 8002790:	2200      	movs	r2, #0
 8002792:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002794:	4b09      	ldr	r3, [pc, #36]	; (80027bc <MX_SDIO_SD_Init+0x38>)
 8002796:	2200      	movs	r2, #0
 8002798:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800279a:	4b08      	ldr	r3, [pc, #32]	; (80027bc <MX_SDIO_SD_Init+0x38>)
 800279c:	2200      	movs	r2, #0
 800279e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80027a0:	4b06      	ldr	r3, [pc, #24]	; (80027bc <MX_SDIO_SD_Init+0x38>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80027a6:	4b05      	ldr	r3, [pc, #20]	; (80027bc <MX_SDIO_SD_Init+0x38>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80027ac:	4b03      	ldr	r3, [pc, #12]	; (80027bc <MX_SDIO_SD_Init+0x38>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80027b2:	bf00      	nop
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	20000bd0 	.word	0x20000bd0
 80027c0:	40012c00 	.word	0x40012c00

080027c4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08a      	sub	sp, #40	; 0x28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027cc:	f107 0314 	add.w	r3, r7, #20
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	60da      	str	r2, [r3, #12]
 80027da:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a68      	ldr	r2, [pc, #416]	; (8002984 <HAL_SD_MspInit+0x1c0>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	f040 80c9 	bne.w	800297a <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80027e8:	2300      	movs	r3, #0
 80027ea:	613b      	str	r3, [r7, #16]
 80027ec:	4b66      	ldr	r3, [pc, #408]	; (8002988 <HAL_SD_MspInit+0x1c4>)
 80027ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f0:	4a65      	ldr	r2, [pc, #404]	; (8002988 <HAL_SD_MspInit+0x1c4>)
 80027f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027f6:	6453      	str	r3, [r2, #68]	; 0x44
 80027f8:	4b63      	ldr	r3, [pc, #396]	; (8002988 <HAL_SD_MspInit+0x1c4>)
 80027fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002804:	2300      	movs	r3, #0
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	4b5f      	ldr	r3, [pc, #380]	; (8002988 <HAL_SD_MspInit+0x1c4>)
 800280a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280c:	4a5e      	ldr	r2, [pc, #376]	; (8002988 <HAL_SD_MspInit+0x1c4>)
 800280e:	f043 0304 	orr.w	r3, r3, #4
 8002812:	6313      	str	r3, [r2, #48]	; 0x30
 8002814:	4b5c      	ldr	r3, [pc, #368]	; (8002988 <HAL_SD_MspInit+0x1c4>)
 8002816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002820:	2300      	movs	r3, #0
 8002822:	60bb      	str	r3, [r7, #8]
 8002824:	4b58      	ldr	r3, [pc, #352]	; (8002988 <HAL_SD_MspInit+0x1c4>)
 8002826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002828:	4a57      	ldr	r2, [pc, #348]	; (8002988 <HAL_SD_MspInit+0x1c4>)
 800282a:	f043 0308 	orr.w	r3, r3, #8
 800282e:	6313      	str	r3, [r2, #48]	; 0x30
 8002830:	4b55      	ldr	r3, [pc, #340]	; (8002988 <HAL_SD_MspInit+0x1c4>)
 8002832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	60bb      	str	r3, [r7, #8]
 800283a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800283c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002840:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002842:	2302      	movs	r3, #2
 8002844:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002846:	2300      	movs	r3, #0
 8002848:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800284a:	2303      	movs	r3, #3
 800284c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800284e:	230c      	movs	r3, #12
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002852:	f107 0314 	add.w	r3, r7, #20
 8002856:	4619      	mov	r1, r3
 8002858:	484c      	ldr	r0, [pc, #304]	; (800298c <HAL_SD_MspInit+0x1c8>)
 800285a:	f003 f8ad 	bl	80059b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800285e:	2304      	movs	r3, #4
 8002860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002862:	2302      	movs	r3, #2
 8002864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002866:	2300      	movs	r3, #0
 8002868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800286a:	2303      	movs	r3, #3
 800286c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800286e:	230c      	movs	r3, #12
 8002870:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002872:	f107 0314 	add.w	r3, r7, #20
 8002876:	4619      	mov	r1, r3
 8002878:	4845      	ldr	r0, [pc, #276]	; (8002990 <HAL_SD_MspInit+0x1cc>)
 800287a:	f003 f89d 	bl	80059b8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800287e:	4b45      	ldr	r3, [pc, #276]	; (8002994 <HAL_SD_MspInit+0x1d0>)
 8002880:	4a45      	ldr	r2, [pc, #276]	; (8002998 <HAL_SD_MspInit+0x1d4>)
 8002882:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8002884:	4b43      	ldr	r3, [pc, #268]	; (8002994 <HAL_SD_MspInit+0x1d0>)
 8002886:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800288a:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800288c:	4b41      	ldr	r3, [pc, #260]	; (8002994 <HAL_SD_MspInit+0x1d0>)
 800288e:	2200      	movs	r2, #0
 8002890:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002892:	4b40      	ldr	r3, [pc, #256]	; (8002994 <HAL_SD_MspInit+0x1d0>)
 8002894:	2200      	movs	r2, #0
 8002896:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002898:	4b3e      	ldr	r3, [pc, #248]	; (8002994 <HAL_SD_MspInit+0x1d0>)
 800289a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800289e:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028a0:	4b3c      	ldr	r3, [pc, #240]	; (8002994 <HAL_SD_MspInit+0x1d0>)
 80028a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028a6:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80028a8:	4b3a      	ldr	r3, [pc, #232]	; (8002994 <HAL_SD_MspInit+0x1d0>)
 80028aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028ae:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80028b0:	4b38      	ldr	r3, [pc, #224]	; (8002994 <HAL_SD_MspInit+0x1d0>)
 80028b2:	2220      	movs	r2, #32
 80028b4:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028b6:	4b37      	ldr	r3, [pc, #220]	; (8002994 <HAL_SD_MspInit+0x1d0>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80028bc:	4b35      	ldr	r3, [pc, #212]	; (8002994 <HAL_SD_MspInit+0x1d0>)
 80028be:	2204      	movs	r2, #4
 80028c0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80028c2:	4b34      	ldr	r3, [pc, #208]	; (8002994 <HAL_SD_MspInit+0x1d0>)
 80028c4:	2203      	movs	r2, #3
 80028c6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80028c8:	4b32      	ldr	r3, [pc, #200]	; (8002994 <HAL_SD_MspInit+0x1d0>)
 80028ca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80028ce:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80028d0:	4b30      	ldr	r3, [pc, #192]	; (8002994 <HAL_SD_MspInit+0x1d0>)
 80028d2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80028d6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80028d8:	482e      	ldr	r0, [pc, #184]	; (8002994 <HAL_SD_MspInit+0x1d0>)
 80028da:	f001 f8b5 	bl	8003a48 <HAL_DMA_Init>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 80028e4:	f7ff ff12 	bl	800270c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a2a      	ldr	r2, [pc, #168]	; (8002994 <HAL_SD_MspInit+0x1d0>)
 80028ec:	641a      	str	r2, [r3, #64]	; 0x40
 80028ee:	4a29      	ldr	r2, [pc, #164]	; (8002994 <HAL_SD_MspInit+0x1d0>)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80028f4:	4b29      	ldr	r3, [pc, #164]	; (800299c <HAL_SD_MspInit+0x1d8>)
 80028f6:	4a2a      	ldr	r2, [pc, #168]	; (80029a0 <HAL_SD_MspInit+0x1dc>)
 80028f8:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80028fa:	4b28      	ldr	r3, [pc, #160]	; (800299c <HAL_SD_MspInit+0x1d8>)
 80028fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002900:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002902:	4b26      	ldr	r3, [pc, #152]	; (800299c <HAL_SD_MspInit+0x1d8>)
 8002904:	2240      	movs	r2, #64	; 0x40
 8002906:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002908:	4b24      	ldr	r3, [pc, #144]	; (800299c <HAL_SD_MspInit+0x1d8>)
 800290a:	2200      	movs	r2, #0
 800290c:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800290e:	4b23      	ldr	r3, [pc, #140]	; (800299c <HAL_SD_MspInit+0x1d8>)
 8002910:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002914:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002916:	4b21      	ldr	r3, [pc, #132]	; (800299c <HAL_SD_MspInit+0x1d8>)
 8002918:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800291c:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800291e:	4b1f      	ldr	r3, [pc, #124]	; (800299c <HAL_SD_MspInit+0x1d8>)
 8002920:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002924:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8002926:	4b1d      	ldr	r3, [pc, #116]	; (800299c <HAL_SD_MspInit+0x1d8>)
 8002928:	2220      	movs	r2, #32
 800292a:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800292c:	4b1b      	ldr	r3, [pc, #108]	; (800299c <HAL_SD_MspInit+0x1d8>)
 800292e:	2200      	movs	r2, #0
 8002930:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002932:	4b1a      	ldr	r3, [pc, #104]	; (800299c <HAL_SD_MspInit+0x1d8>)
 8002934:	2204      	movs	r2, #4
 8002936:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002938:	4b18      	ldr	r3, [pc, #96]	; (800299c <HAL_SD_MspInit+0x1d8>)
 800293a:	2203      	movs	r2, #3
 800293c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800293e:	4b17      	ldr	r3, [pc, #92]	; (800299c <HAL_SD_MspInit+0x1d8>)
 8002940:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002944:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002946:	4b15      	ldr	r3, [pc, #84]	; (800299c <HAL_SD_MspInit+0x1d8>)
 8002948:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800294c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800294e:	4813      	ldr	r0, [pc, #76]	; (800299c <HAL_SD_MspInit+0x1d8>)
 8002950:	f001 f87a 	bl	8003a48 <HAL_DMA_Init>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 800295a:	f7ff fed7 	bl	800270c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a0e      	ldr	r2, [pc, #56]	; (800299c <HAL_SD_MspInit+0x1d8>)
 8002962:	63da      	str	r2, [r3, #60]	; 0x3c
 8002964:	4a0d      	ldr	r2, [pc, #52]	; (800299c <HAL_SD_MspInit+0x1d8>)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 6, 0);
 800296a:	2200      	movs	r2, #0
 800296c:	2106      	movs	r1, #6
 800296e:	2031      	movs	r0, #49	; 0x31
 8002970:	f001 f824 	bl	80039bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002974:	2031      	movs	r0, #49	; 0x31
 8002976:	f001 f83d 	bl	80039f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800297a:	bf00      	nop
 800297c:	3728      	adds	r7, #40	; 0x28
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40012c00 	.word	0x40012c00
 8002988:	40023800 	.word	0x40023800
 800298c:	40020800 	.word	0x40020800
 8002990:	40020c00 	.word	0x40020c00
 8002994:	20000c54 	.word	0x20000c54
 8002998:	40026458 	.word	0x40026458
 800299c:	20000cb4 	.word	0x20000cb4
 80029a0:	400264a0 	.word	0x400264a0

080029a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	607b      	str	r3, [r7, #4]
 80029ae:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <HAL_MspInit+0x54>)
 80029b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b2:	4a11      	ldr	r2, [pc, #68]	; (80029f8 <HAL_MspInit+0x54>)
 80029b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b8:	6453      	str	r3, [r2, #68]	; 0x44
 80029ba:	4b0f      	ldr	r3, [pc, #60]	; (80029f8 <HAL_MspInit+0x54>)
 80029bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029c2:	607b      	str	r3, [r7, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	603b      	str	r3, [r7, #0]
 80029ca:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <HAL_MspInit+0x54>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	4a0a      	ldr	r2, [pc, #40]	; (80029f8 <HAL_MspInit+0x54>)
 80029d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d4:	6413      	str	r3, [r2, #64]	; 0x40
 80029d6:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <HAL_MspInit+0x54>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029de:	603b      	str	r3, [r7, #0]
 80029e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80029e2:	2200      	movs	r2, #0
 80029e4:	210f      	movs	r1, #15
 80029e6:	f06f 0001 	mvn.w	r0, #1
 80029ea:	f000 ffe7 	bl	80039bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40023800 	.word	0x40023800

080029fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08c      	sub	sp, #48	; 0x30
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	2037      	movs	r0, #55	; 0x37
 8002a12:	f000 ffd3 	bl	80039bc <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002a16:	2037      	movs	r0, #55	; 0x37
 8002a18:	f000 ffec 	bl	80039f4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	4b1f      	ldr	r3, [pc, #124]	; (8002aa0 <HAL_InitTick+0xa4>)
 8002a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a24:	4a1e      	ldr	r2, [pc, #120]	; (8002aa0 <HAL_InitTick+0xa4>)
 8002a26:	f043 0320 	orr.w	r3, r3, #32
 8002a2a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a2c:	4b1c      	ldr	r3, [pc, #112]	; (8002aa0 <HAL_InitTick+0xa4>)
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	f003 0320 	and.w	r3, r3, #32
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a38:	f107 0210 	add.w	r2, r7, #16
 8002a3c:	f107 0314 	add.w	r3, r7, #20
 8002a40:	4611      	mov	r1, r2
 8002a42:	4618      	mov	r0, r3
 8002a44:	f004 faca 	bl	8006fdc <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002a48:	f004 faa0 	bl	8006f8c <HAL_RCC_GetPCLK1Freq>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a54:	4a13      	ldr	r2, [pc, #76]	; (8002aa4 <HAL_InitTick+0xa8>)
 8002a56:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5a:	0c9b      	lsrs	r3, r3, #18
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002a60:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <HAL_InitTick+0xac>)
 8002a62:	4a12      	ldr	r2, [pc, #72]	; (8002aac <HAL_InitTick+0xb0>)
 8002a64:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002a66:	4b10      	ldr	r3, [pc, #64]	; (8002aa8 <HAL_InitTick+0xac>)
 8002a68:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a6c:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002a6e:	4a0e      	ldr	r2, [pc, #56]	; (8002aa8 <HAL_InitTick+0xac>)
 8002a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a72:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002a74:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <HAL_InitTick+0xac>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a7a:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <HAL_InitTick+0xac>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8002a80:	4809      	ldr	r0, [pc, #36]	; (8002aa8 <HAL_InitTick+0xac>)
 8002a82:	f006 f8cf 	bl	8008c24 <HAL_TIM_Base_Init>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d104      	bne.n	8002a96 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8002a8c:	4806      	ldr	r0, [pc, #24]	; (8002aa8 <HAL_InitTick+0xac>)
 8002a8e:	f006 f919 	bl	8008cc4 <HAL_TIM_Base_Start_IT>
 8002a92:	4603      	mov	r3, r0
 8002a94:	e000      	b.n	8002a98 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3730      	adds	r7, #48	; 0x30
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	431bde83 	.word	0x431bde83
 8002aa8:	20000d14 	.word	0x20000d14
 8002aac:	40001400 	.word	0x40001400

08002ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ab4:	e7fe      	b.n	8002ab4 <NMI_Handler+0x4>

08002ab6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aba:	e7fe      	b.n	8002aba <HardFault_Handler+0x4>

08002abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ac0:	e7fe      	b.n	8002ac0 <MemManage_Handler+0x4>

08002ac2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ac6:	e7fe      	b.n	8002ac6 <BusFault_Handler+0x4>

08002ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002acc:	e7fe      	b.n	8002acc <UsageFault_Handler+0x4>

08002ace <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ad2:	bf00      	nop
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_INT_Pin);
 8002ae0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002ae4:	f003 f948 	bl	8005d78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ae8:	bf00      	nop
 8002aea:	bd80      	pop	{r7, pc}

08002aec <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */
  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002af0:	4802      	ldr	r0, [pc, #8]	; (8002afc <SDIO_IRQHandler+0x10>)
 8002af2:	f004 ff05 	bl	8007900 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002af6:	bf00      	nop
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	20000bd0 	.word	0x20000bd0

08002b00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002b04:	4802      	ldr	r0, [pc, #8]	; (8002b10 <TIM6_DAC_IRQHandler+0x10>)
 8002b06:	f006 f94d 	bl	8008da4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002b0a:	bf00      	nop
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20000d64 	.word	0x20000d64

08002b14 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002b18:	4802      	ldr	r0, [pc, #8]	; (8002b24 <TIM7_IRQHandler+0x10>)
 8002b1a:	f006 f943 	bl	8008da4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	20000d14 	.word	0x20000d14

08002b28 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8002b2c:	4802      	ldr	r0, [pc, #8]	; (8002b38 <DMA2_Stream3_IRQHandler+0x10>)
 8002b2e:	f001 f8b3 	bl	8003c98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000c54 	.word	0x20000c54

08002b3c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002b40:	4802      	ldr	r0, [pc, #8]	; (8002b4c <ETH_IRQHandler+0x10>)
 8002b42:	f002 f98b 	bl	8004e5c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	2000415c 	.word	0x2000415c

08002b50 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8002b54:	4802      	ldr	r0, [pc, #8]	; (8002b60 <DMA2_Stream6_IRQHandler+0x10>)
 8002b56:	f001 f89f 	bl	8003c98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002b5a:	bf00      	nop
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000cb4 	.word	0x20000cb4

08002b64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
	return 1;
 8002b68:	2301      	movs	r3, #1
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <_kill>:

int _kill(int pid, int sig)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b7e:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <_kill+0x20>)
 8002b80:	2216      	movs	r2, #22
 8002b82:	601a      	str	r2, [r3, #0]
	return -1;
 8002b84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	200189f8 	.word	0x200189f8

08002b98 <_exit>:

void _exit (int status)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7ff ffe5 	bl	8002b74 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002baa:	e7fe      	b.n	8002baa <_exit+0x12>

08002bac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	e00a      	b.n	8002bd4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002bbe:	f3af 8000 	nop.w
 8002bc2:	4601      	mov	r1, r0
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	60ba      	str	r2, [r7, #8]
 8002bca:	b2ca      	uxtb	r2, r1
 8002bcc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	dbf0      	blt.n	8002bbe <_read+0x12>
	}

return len;
 8002bdc:	687b      	ldr	r3, [r7, #4]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b086      	sub	sp, #24
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	617b      	str	r3, [r7, #20]
 8002bf6:	e009      	b.n	8002c0c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	1c5a      	adds	r2, r3, #1
 8002bfc:	60ba      	str	r2, [r7, #8]
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f000 f969 	bl	8002ed8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	dbf1      	blt.n	8002bf8 <_write+0x12>
	}
	return len;
 8002c14:	687b      	ldr	r3, [r7, #4]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3718      	adds	r7, #24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <_close>:

int _close(int file)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
	return -1;
 8002c26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
 8002c3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c46:	605a      	str	r2, [r3, #4]
	return 0;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <_isatty>:

int _isatty(int file)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
	return 1;
 8002c5e:	2301      	movs	r3, #1
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
	return 0;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3714      	adds	r7, #20
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
	...

08002c88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b087      	sub	sp, #28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c90:	4a14      	ldr	r2, [pc, #80]	; (8002ce4 <_sbrk+0x5c>)
 8002c92:	4b15      	ldr	r3, [pc, #84]	; (8002ce8 <_sbrk+0x60>)
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c9c:	4b13      	ldr	r3, [pc, #76]	; (8002cec <_sbrk+0x64>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d102      	bne.n	8002caa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ca4:	4b11      	ldr	r3, [pc, #68]	; (8002cec <_sbrk+0x64>)
 8002ca6:	4a12      	ldr	r2, [pc, #72]	; (8002cf0 <_sbrk+0x68>)
 8002ca8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002caa:	4b10      	ldr	r3, [pc, #64]	; (8002cec <_sbrk+0x64>)
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d205      	bcs.n	8002cc4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002cb8:	4b0e      	ldr	r3, [pc, #56]	; (8002cf4 <_sbrk+0x6c>)
 8002cba:	220c      	movs	r2, #12
 8002cbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc2:	e009      	b.n	8002cd8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cc4:	4b09      	ldr	r3, [pc, #36]	; (8002cec <_sbrk+0x64>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cca:	4b08      	ldr	r3, [pc, #32]	; (8002cec <_sbrk+0x64>)
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	4a06      	ldr	r2, [pc, #24]	; (8002cec <_sbrk+0x64>)
 8002cd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	371c      	adds	r7, #28
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	20030000 	.word	0x20030000
 8002ce8:	00001000 	.word	0x00001000
 8002cec:	20000d5c 	.word	0x20000d5c
 8002cf0:	20018a38 	.word	0x20018a38
 8002cf4:	200189f8 	.word	0x200189f8

08002cf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cfc:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <SystemInit+0x20>)
 8002cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d02:	4a05      	ldr	r2, [pc, #20]	; (8002d18 <SystemInit+0x20>)
 8002d04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d0c:	bf00      	nop
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	e000ed00 	.word	0xe000ed00

08002d1c <get_time_val>:

/* USER CODE BEGIN 0 */

uint32_t timer_cnt = 0;

uint32_t get_time_val(void){
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
	return timer_cnt;
 8002d20:	4b03      	ldr	r3, [pc, #12]	; (8002d30 <get_time_val+0x14>)
 8002d22:	681b      	ldr	r3, [r3, #0]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	20000d60 	.word	0x20000d60

08002d34 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d3a:	463b      	mov	r3, r7
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002d42:	4b16      	ldr	r3, [pc, #88]	; (8002d9c <MX_TIM6_Init+0x68>)
 8002d44:	4a16      	ldr	r2, [pc, #88]	; (8002da0 <MX_TIM6_Init+0x6c>)
 8002d46:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9;
 8002d48:	4b14      	ldr	r3, [pc, #80]	; (8002d9c <MX_TIM6_Init+0x68>)
 8002d4a:	2209      	movs	r2, #9
 8002d4c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d4e:	4b13      	ldr	r3, [pc, #76]	; (8002d9c <MX_TIM6_Init+0x68>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 899;
 8002d54:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <MX_TIM6_Init+0x68>)
 8002d56:	f240 3283 	movw	r2, #899	; 0x383
 8002d5a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d5c:	4b0f      	ldr	r3, [pc, #60]	; (8002d9c <MX_TIM6_Init+0x68>)
 8002d5e:	2280      	movs	r2, #128	; 0x80
 8002d60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002d62:	480e      	ldr	r0, [pc, #56]	; (8002d9c <MX_TIM6_Init+0x68>)
 8002d64:	f005 ff5e 	bl	8008c24 <HAL_TIM_Base_Init>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002d6e:	f7ff fccd 	bl	800270c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002d72:	2320      	movs	r3, #32
 8002d74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d76:	2300      	movs	r3, #0
 8002d78:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002d7a:	463b      	mov	r3, r7
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4807      	ldr	r0, [pc, #28]	; (8002d9c <MX_TIM6_Init+0x68>)
 8002d80:	f006 f9e0 	bl	8009144 <HAL_TIMEx_MasterConfigSynchronization>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002d8a:	f7ff fcbf 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8002d8e:	4803      	ldr	r0, [pc, #12]	; (8002d9c <MX_TIM6_Init+0x68>)
 8002d90:	f005 ff98 	bl	8008cc4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM6_Init 2 */

}
 8002d94:	bf00      	nop
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	20000d64 	.word	0x20000d64
 8002da0:	40001000 	.word	0x40001000

08002da4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a0e      	ldr	r2, [pc, #56]	; (8002dec <HAL_TIM_Base_MspInit+0x48>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d115      	bne.n	8002de2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	4b0d      	ldr	r3, [pc, #52]	; (8002df0 <HAL_TIM_Base_MspInit+0x4c>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	4a0c      	ldr	r2, [pc, #48]	; (8002df0 <HAL_TIM_Base_MspInit+0x4c>)
 8002dc0:	f043 0310 	orr.w	r3, r3, #16
 8002dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002dc6:	4b0a      	ldr	r3, [pc, #40]	; (8002df0 <HAL_TIM_Base_MspInit+0x4c>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f003 0310 	and.w	r3, r3, #16
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	2105      	movs	r1, #5
 8002dd6:	2036      	movs	r0, #54	; 0x36
 8002dd8:	f000 fdf0 	bl	80039bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ddc:	2036      	movs	r0, #54	; 0x36
 8002dde:	f000 fe09 	bl	80039f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002de2:	bf00      	nop
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40001000 	.word	0x40001000
 8002df0:	40023800 	.word	0x40023800

08002df4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002df8:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <MX_USART1_UART_Init+0x4c>)
 8002dfa:	4a12      	ldr	r2, [pc, #72]	; (8002e44 <MX_USART1_UART_Init+0x50>)
 8002dfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8002dfe:	4b10      	ldr	r3, [pc, #64]	; (8002e40 <MX_USART1_UART_Init+0x4c>)
 8002e00:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8002e04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e06:	4b0e      	ldr	r3, [pc, #56]	; (8002e40 <MX_USART1_UART_Init+0x4c>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e0c:	4b0c      	ldr	r3, [pc, #48]	; (8002e40 <MX_USART1_UART_Init+0x4c>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e12:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <MX_USART1_UART_Init+0x4c>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e18:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <MX_USART1_UART_Init+0x4c>)
 8002e1a:	220c      	movs	r2, #12
 8002e1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e1e:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <MX_USART1_UART_Init+0x4c>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e24:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <MX_USART1_UART_Init+0x4c>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e2a:	4805      	ldr	r0, [pc, #20]	; (8002e40 <MX_USART1_UART_Init+0x4c>)
 8002e2c:	f006 fa1a 	bl	8009264 <HAL_UART_Init>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002e36:	f7ff fc69 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e3a:	bf00      	nop
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20000dac 	.word	0x20000dac
 8002e44:	40011000 	.word	0x40011000

08002e48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08a      	sub	sp, #40	; 0x28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e50:	f107 0314 	add.w	r3, r7, #20
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	605a      	str	r2, [r3, #4]
 8002e5a:	609a      	str	r2, [r3, #8]
 8002e5c:	60da      	str	r2, [r3, #12]
 8002e5e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a19      	ldr	r2, [pc, #100]	; (8002ecc <HAL_UART_MspInit+0x84>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d12c      	bne.n	8002ec4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	613b      	str	r3, [r7, #16]
 8002e6e:	4b18      	ldr	r3, [pc, #96]	; (8002ed0 <HAL_UART_MspInit+0x88>)
 8002e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e72:	4a17      	ldr	r2, [pc, #92]	; (8002ed0 <HAL_UART_MspInit+0x88>)
 8002e74:	f043 0310 	orr.w	r3, r3, #16
 8002e78:	6453      	str	r3, [r2, #68]	; 0x44
 8002e7a:	4b15      	ldr	r3, [pc, #84]	; (8002ed0 <HAL_UART_MspInit+0x88>)
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7e:	f003 0310 	and.w	r3, r3, #16
 8002e82:	613b      	str	r3, [r7, #16]
 8002e84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	4b11      	ldr	r3, [pc, #68]	; (8002ed0 <HAL_UART_MspInit+0x88>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	4a10      	ldr	r2, [pc, #64]	; (8002ed0 <HAL_UART_MspInit+0x88>)
 8002e90:	f043 0301 	orr.w	r3, r3, #1
 8002e94:	6313      	str	r3, [r2, #48]	; 0x30
 8002e96:	4b0e      	ldr	r3, [pc, #56]	; (8002ed0 <HAL_UART_MspInit+0x88>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ea2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002eb4:	2307      	movs	r3, #7
 8002eb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb8:	f107 0314 	add.w	r3, r7, #20
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4805      	ldr	r0, [pc, #20]	; (8002ed4 <HAL_UART_MspInit+0x8c>)
 8002ec0:	f002 fd7a 	bl	80059b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002ec4:	bf00      	nop
 8002ec6:	3728      	adds	r7, #40	; 0x28
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40011000 	.word	0x40011000
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	40020000 	.word	0x40020000

08002ed8 <__io_putchar>:

/* USER CODE BEGIN 1 */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
	while((huart1.Instance->SR & (0x01 << 6))  == 0);
 8002ee0:	bf00      	nop
 8002ee2:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <__io_putchar+0x30>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0f8      	beq.n	8002ee2 <__io_putchar+0xa>
  HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8002ef0:	1d39      	adds	r1, r7, #4
 8002ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	4803      	ldr	r0, [pc, #12]	; (8002f08 <__io_putchar+0x30>)
 8002efa:	f006 fa00 	bl	80092fe <HAL_UART_Transmit>
  return ch;
 8002efe:	687b      	ldr	r3, [r7, #4]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	20000dac 	.word	0x20000dac

08002f0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f44 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f10:	480d      	ldr	r0, [pc, #52]	; (8002f48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f12:	490e      	ldr	r1, [pc, #56]	; (8002f4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f14:	4a0e      	ldr	r2, [pc, #56]	; (8002f50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f18:	e002      	b.n	8002f20 <LoopCopyDataInit>

08002f1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f1e:	3304      	adds	r3, #4

08002f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f24:	d3f9      	bcc.n	8002f1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f26:	4a0b      	ldr	r2, [pc, #44]	; (8002f54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f28:	4c0b      	ldr	r4, [pc, #44]	; (8002f58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f2c:	e001      	b.n	8002f32 <LoopFillZerobss>

08002f2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f30:	3204      	adds	r2, #4

08002f32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f34:	d3fb      	bcc.n	8002f2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f36:	f7ff fedf 	bl	8002cf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f3a:	f01c ffaf 	bl	801fe9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f3e:	f7ff fb2d 	bl	800259c <main>
  bx  lr    
 8002f42:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002f44:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f4c:	200009c8 	.word	0x200009c8
  ldr r2, =_sidata
 8002f50:	08071cc8 	.word	0x08071cc8
  ldr r2, =_sbss
 8002f54:	200009c8 	.word	0x200009c8
  ldr r4, =_ebss
 8002f58:	20018a38 	.word	0x20018a38

08002f5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f5c:	e7fe      	b.n	8002f5c <ADC_IRQHandler>
	...

08002f60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f64:	4b0e      	ldr	r3, [pc, #56]	; (8002fa0 <HAL_Init+0x40>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a0d      	ldr	r2, [pc, #52]	; (8002fa0 <HAL_Init+0x40>)
 8002f6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f70:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <HAL_Init+0x40>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a0a      	ldr	r2, [pc, #40]	; (8002fa0 <HAL_Init+0x40>)
 8002f76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f7c:	4b08      	ldr	r3, [pc, #32]	; (8002fa0 <HAL_Init+0x40>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a07      	ldr	r2, [pc, #28]	; (8002fa0 <HAL_Init+0x40>)
 8002f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f88:	2003      	movs	r0, #3
 8002f8a:	f000 fd0c 	bl	80039a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f8e:	200f      	movs	r0, #15
 8002f90:	f7ff fd34 	bl	80029fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f94:	f7ff fd06 	bl	80029a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40023c00 	.word	0x40023c00

08002fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fa8:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <HAL_IncTick+0x20>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	461a      	mov	r2, r3
 8002fae:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <HAL_IncTick+0x24>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	4a04      	ldr	r2, [pc, #16]	; (8002fc8 <HAL_IncTick+0x24>)
 8002fb6:	6013      	str	r3, [r2, #0]
}
 8002fb8:	bf00      	nop
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	20000008 	.word	0x20000008
 8002fc8:	20000df0 	.word	0x20000df0

08002fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return uwTick;
 8002fd0:	4b03      	ldr	r3, [pc, #12]	; (8002fe0 <HAL_GetTick+0x14>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	20000df0 	.word	0x20000df0

08002fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fec:	f7ff ffee 	bl	8002fcc <HAL_GetTick>
 8002ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffc:	d005      	beq.n	800300a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ffe:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <HAL_Delay+0x44>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	461a      	mov	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4413      	add	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800300a:	bf00      	nop
 800300c:	f7ff ffde 	bl	8002fcc <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	429a      	cmp	r2, r3
 800301a:	d8f7      	bhi.n	800300c <HAL_Delay+0x28>
  {
  }
}
 800301c:	bf00      	nop
 800301e:	bf00      	nop
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	20000008 	.word	0x20000008

0800302c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003034:	2300      	movs	r3, #0
 8003036:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e033      	b.n	80030aa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	2b00      	cmp	r3, #0
 8003048:	d109      	bne.n	800305e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7fd ffe2 	bl	8001014 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	f003 0310 	and.w	r3, r3, #16
 8003066:	2b00      	cmp	r3, #0
 8003068:	d118      	bne.n	800309c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003072:	f023 0302 	bic.w	r3, r3, #2
 8003076:	f043 0202 	orr.w	r2, r3, #2
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 fae8 	bl	8003654 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	f023 0303 	bic.w	r3, r3, #3
 8003092:	f043 0201 	orr.w	r2, r3, #1
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	641a      	str	r2, [r3, #64]	; 0x40
 800309a:	e001      	b.n	80030a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
	...

080030b4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d101      	bne.n	80030ce <HAL_ADC_Start+0x1a>
 80030ca:	2302      	movs	r3, #2
 80030cc:	e0b2      	b.n	8003234 <HAL_ADC_Start+0x180>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d018      	beq.n	8003116 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f042 0201 	orr.w	r2, r2, #1
 80030f2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80030f4:	4b52      	ldr	r3, [pc, #328]	; (8003240 <HAL_ADC_Start+0x18c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a52      	ldr	r2, [pc, #328]	; (8003244 <HAL_ADC_Start+0x190>)
 80030fa:	fba2 2303 	umull	r2, r3, r2, r3
 80030fe:	0c9a      	lsrs	r2, r3, #18
 8003100:	4613      	mov	r3, r2
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	4413      	add	r3, r2
 8003106:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003108:	e002      	b.n	8003110 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	3b01      	subs	r3, #1
 800310e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f9      	bne.n	800310a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b01      	cmp	r3, #1
 8003122:	d17a      	bne.n	800321a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003128:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800312c:	f023 0301 	bic.w	r3, r3, #1
 8003130:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003142:	2b00      	cmp	r3, #0
 8003144:	d007      	beq.n	8003156 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800314e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800315e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003162:	d106      	bne.n	8003172 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003168:	f023 0206 	bic.w	r2, r3, #6
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	645a      	str	r2, [r3, #68]	; 0x44
 8003170:	e002      	b.n	8003178 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003180:	4b31      	ldr	r3, [pc, #196]	; (8003248 <HAL_ADC_Start+0x194>)
 8003182:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800318c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f003 031f 	and.w	r3, r3, #31
 8003196:	2b00      	cmp	r3, #0
 8003198:	d12a      	bne.n	80031f0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a2b      	ldr	r2, [pc, #172]	; (800324c <HAL_ADC_Start+0x198>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d015      	beq.n	80031d0 <HAL_ADC_Start+0x11c>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a29      	ldr	r2, [pc, #164]	; (8003250 <HAL_ADC_Start+0x19c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d105      	bne.n	80031ba <HAL_ADC_Start+0x106>
 80031ae:	4b26      	ldr	r3, [pc, #152]	; (8003248 <HAL_ADC_Start+0x194>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f003 031f 	and.w	r3, r3, #31
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00a      	beq.n	80031d0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a25      	ldr	r2, [pc, #148]	; (8003254 <HAL_ADC_Start+0x1a0>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d136      	bne.n	8003232 <HAL_ADC_Start+0x17e>
 80031c4:	4b20      	ldr	r3, [pc, #128]	; (8003248 <HAL_ADC_Start+0x194>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f003 0310 	and.w	r3, r3, #16
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d130      	bne.n	8003232 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d129      	bne.n	8003232 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031ec:	609a      	str	r2, [r3, #8]
 80031ee:	e020      	b.n	8003232 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a15      	ldr	r2, [pc, #84]	; (800324c <HAL_ADC_Start+0x198>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d11b      	bne.n	8003232 <HAL_ADC_Start+0x17e>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d114      	bne.n	8003232 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003216:	609a      	str	r2, [r3, #8]
 8003218:	e00b      	b.n	8003232 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	f043 0210 	orr.w	r2, r3, #16
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322a:	f043 0201 	orr.w	r2, r3, #1
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	20000000 	.word	0x20000000
 8003244:	431bde83 	.word	0x431bde83
 8003248:	40012300 	.word	0x40012300
 800324c:	40012000 	.word	0x40012000
 8003250:	40012100 	.word	0x40012100
 8003254:	40012200 	.word	0x40012200

08003258 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003266:	2b01      	cmp	r3, #1
 8003268:	d101      	bne.n	800326e <HAL_ADC_Stop+0x16>
 800326a:	2302      	movs	r3, #2
 800326c:	e021      	b.n	80032b2 <HAL_ADC_Stop+0x5a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 0201 	bic.w	r2, r2, #1
 8003284:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	d109      	bne.n	80032a8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800329c:	f023 0301 	bic.w	r3, r3, #1
 80032a0:	f043 0201 	orr.w	r2, r3, #1
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b084      	sub	sp, #16
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
 80032c6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80032c8:	2300      	movs	r3, #0
 80032ca:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032da:	d113      	bne.n	8003304 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80032e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ea:	d10b      	bne.n	8003304 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f0:	f043 0220 	orr.w	r2, r3, #32
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e063      	b.n	80033cc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003304:	f7ff fe62 	bl	8002fcc <HAL_GetTick>
 8003308:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800330a:	e021      	b.n	8003350 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003312:	d01d      	beq.n	8003350 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d007      	beq.n	800332a <HAL_ADC_PollForConversion+0x6c>
 800331a:	f7ff fe57 	bl	8002fcc <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	429a      	cmp	r2, r3
 8003328:	d212      	bcs.n	8003350 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b02      	cmp	r3, #2
 8003336:	d00b      	beq.n	8003350 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333c:	f043 0204 	orr.w	r2, r3, #4
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e03d      	b.n	80033cc <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b02      	cmp	r3, #2
 800335c:	d1d6      	bne.n	800330c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f06f 0212 	mvn.w	r2, #18
 8003366:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d123      	bne.n	80033ca <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003386:	2b00      	cmp	r3, #0
 8003388:	d11f      	bne.n	80033ca <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003390:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003394:	2b00      	cmp	r3, #0
 8003396:	d006      	beq.n	80033a6 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d111      	bne.n	80033ca <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d105      	bne.n	80033ca <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	f043 0201 	orr.w	r2, r3, #1
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
	...

080033f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80033fa:	2300      	movs	r3, #0
 80033fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003404:	2b01      	cmp	r3, #1
 8003406:	d101      	bne.n	800340c <HAL_ADC_ConfigChannel+0x1c>
 8003408:	2302      	movs	r3, #2
 800340a:	e113      	b.n	8003634 <HAL_ADC_ConfigChannel+0x244>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2b09      	cmp	r3, #9
 800341a:	d925      	bls.n	8003468 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68d9      	ldr	r1, [r3, #12]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	b29b      	uxth	r3, r3
 8003428:	461a      	mov	r2, r3
 800342a:	4613      	mov	r3, r2
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	4413      	add	r3, r2
 8003430:	3b1e      	subs	r3, #30
 8003432:	2207      	movs	r2, #7
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	43da      	mvns	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	400a      	ands	r2, r1
 8003440:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68d9      	ldr	r1, [r3, #12]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	b29b      	uxth	r3, r3
 8003452:	4618      	mov	r0, r3
 8003454:	4603      	mov	r3, r0
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	4403      	add	r3, r0
 800345a:	3b1e      	subs	r3, #30
 800345c:	409a      	lsls	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	60da      	str	r2, [r3, #12]
 8003466:	e022      	b.n	80034ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6919      	ldr	r1, [r3, #16]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	b29b      	uxth	r3, r3
 8003474:	461a      	mov	r2, r3
 8003476:	4613      	mov	r3, r2
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	4413      	add	r3, r2
 800347c:	2207      	movs	r2, #7
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	43da      	mvns	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	400a      	ands	r2, r1
 800348a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6919      	ldr	r1, [r3, #16]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	b29b      	uxth	r3, r3
 800349c:	4618      	mov	r0, r3
 800349e:	4603      	mov	r3, r0
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	4403      	add	r3, r0
 80034a4:	409a      	lsls	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b06      	cmp	r3, #6
 80034b4:	d824      	bhi.n	8003500 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	4613      	mov	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4413      	add	r3, r2
 80034c6:	3b05      	subs	r3, #5
 80034c8:	221f      	movs	r2, #31
 80034ca:	fa02 f303 	lsl.w	r3, r2, r3
 80034ce:	43da      	mvns	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	400a      	ands	r2, r1
 80034d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	4618      	mov	r0, r3
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4413      	add	r3, r2
 80034f0:	3b05      	subs	r3, #5
 80034f2:	fa00 f203 	lsl.w	r2, r0, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	635a      	str	r2, [r3, #52]	; 0x34
 80034fe:	e04c      	b.n	800359a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	2b0c      	cmp	r3, #12
 8003506:	d824      	bhi.n	8003552 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	4613      	mov	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	3b23      	subs	r3, #35	; 0x23
 800351a:	221f      	movs	r2, #31
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	43da      	mvns	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	400a      	ands	r2, r1
 8003528:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	b29b      	uxth	r3, r3
 8003536:	4618      	mov	r0, r3
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4413      	add	r3, r2
 8003542:	3b23      	subs	r3, #35	; 0x23
 8003544:	fa00 f203 	lsl.w	r2, r0, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	631a      	str	r2, [r3, #48]	; 0x30
 8003550:	e023      	b.n	800359a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	4613      	mov	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	3b41      	subs	r3, #65	; 0x41
 8003564:	221f      	movs	r2, #31
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	43da      	mvns	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	400a      	ands	r2, r1
 8003572:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	b29b      	uxth	r3, r3
 8003580:	4618      	mov	r0, r3
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	4613      	mov	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	3b41      	subs	r3, #65	; 0x41
 800358e:	fa00 f203 	lsl.w	r2, r0, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800359a:	4b29      	ldr	r3, [pc, #164]	; (8003640 <HAL_ADC_ConfigChannel+0x250>)
 800359c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a28      	ldr	r2, [pc, #160]	; (8003644 <HAL_ADC_ConfigChannel+0x254>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d10f      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x1d8>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2b12      	cmp	r3, #18
 80035ae:	d10b      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a1d      	ldr	r2, [pc, #116]	; (8003644 <HAL_ADC_ConfigChannel+0x254>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d12b      	bne.n	800362a <HAL_ADC_ConfigChannel+0x23a>
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a1c      	ldr	r2, [pc, #112]	; (8003648 <HAL_ADC_ConfigChannel+0x258>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d003      	beq.n	80035e4 <HAL_ADC_ConfigChannel+0x1f4>
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2b11      	cmp	r3, #17
 80035e2:	d122      	bne.n	800362a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a11      	ldr	r2, [pc, #68]	; (8003648 <HAL_ADC_ConfigChannel+0x258>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d111      	bne.n	800362a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003606:	4b11      	ldr	r3, [pc, #68]	; (800364c <HAL_ADC_ConfigChannel+0x25c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a11      	ldr	r2, [pc, #68]	; (8003650 <HAL_ADC_ConfigChannel+0x260>)
 800360c:	fba2 2303 	umull	r2, r3, r2, r3
 8003610:	0c9a      	lsrs	r2, r3, #18
 8003612:	4613      	mov	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800361c:	e002      	b.n	8003624 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	3b01      	subs	r3, #1
 8003622:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f9      	bne.n	800361e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3714      	adds	r7, #20
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	40012300 	.word	0x40012300
 8003644:	40012000 	.word	0x40012000
 8003648:	10000012 	.word	0x10000012
 800364c:	20000000 	.word	0x20000000
 8003650:	431bde83 	.word	0x431bde83

08003654 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800365c:	4b79      	ldr	r3, [pc, #484]	; (8003844 <ADC_Init+0x1f0>)
 800365e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	431a      	orrs	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003688:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6859      	ldr	r1, [r3, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	021a      	lsls	r2, r3, #8
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80036ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6859      	ldr	r1, [r3, #4]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689a      	ldr	r2, [r3, #8]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6899      	ldr	r1, [r3, #8]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68da      	ldr	r2, [r3, #12]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e6:	4a58      	ldr	r2, [pc, #352]	; (8003848 <ADC_Init+0x1f4>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d022      	beq.n	8003732 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689a      	ldr	r2, [r3, #8]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6899      	ldr	r1, [r3, #8]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800371c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6899      	ldr	r1, [r3, #8]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	609a      	str	r2, [r3, #8]
 8003730:	e00f      	b.n	8003752 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003740:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003750:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0202 	bic.w	r2, r2, #2
 8003760:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6899      	ldr	r1, [r3, #8]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	7e1b      	ldrb	r3, [r3, #24]
 800376c:	005a      	lsls	r2, r3, #1
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 3020 	ldrb.w	r3, [r3, #32]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d01b      	beq.n	80037b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800378e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800379e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6859      	ldr	r1, [r3, #4]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	3b01      	subs	r3, #1
 80037ac:	035a      	lsls	r2, r3, #13
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	605a      	str	r2, [r3, #4]
 80037b6:	e007      	b.n	80037c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80037d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	051a      	lsls	r2, r3, #20
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6899      	ldr	r1, [r3, #8]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800380a:	025a      	lsls	r2, r3, #9
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003822:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6899      	ldr	r1, [r3, #8]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	029a      	lsls	r2, r3, #10
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	609a      	str	r2, [r3, #8]
}
 8003838:	bf00      	nop
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	40012300 	.word	0x40012300
 8003848:	0f000001 	.word	0x0f000001

0800384c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800385c:	4b0c      	ldr	r3, [pc, #48]	; (8003890 <__NVIC_SetPriorityGrouping+0x44>)
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003868:	4013      	ands	r3, r2
 800386a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800387c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800387e:	4a04      	ldr	r2, [pc, #16]	; (8003890 <__NVIC_SetPriorityGrouping+0x44>)
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	60d3      	str	r3, [r2, #12]
}
 8003884:	bf00      	nop
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	e000ed00 	.word	0xe000ed00

08003894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003898:	4b04      	ldr	r3, [pc, #16]	; (80038ac <__NVIC_GetPriorityGrouping+0x18>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	0a1b      	lsrs	r3, r3, #8
 800389e:	f003 0307 	and.w	r3, r3, #7
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	e000ed00 	.word	0xe000ed00

080038b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	4603      	mov	r3, r0
 80038b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	db0b      	blt.n	80038da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038c2:	79fb      	ldrb	r3, [r7, #7]
 80038c4:	f003 021f 	and.w	r2, r3, #31
 80038c8:	4907      	ldr	r1, [pc, #28]	; (80038e8 <__NVIC_EnableIRQ+0x38>)
 80038ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ce:	095b      	lsrs	r3, r3, #5
 80038d0:	2001      	movs	r0, #1
 80038d2:	fa00 f202 	lsl.w	r2, r0, r2
 80038d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	e000e100 	.word	0xe000e100

080038ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	4603      	mov	r3, r0
 80038f4:	6039      	str	r1, [r7, #0]
 80038f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	db0a      	blt.n	8003916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	b2da      	uxtb	r2, r3
 8003904:	490c      	ldr	r1, [pc, #48]	; (8003938 <__NVIC_SetPriority+0x4c>)
 8003906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390a:	0112      	lsls	r2, r2, #4
 800390c:	b2d2      	uxtb	r2, r2
 800390e:	440b      	add	r3, r1
 8003910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003914:	e00a      	b.n	800392c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	b2da      	uxtb	r2, r3
 800391a:	4908      	ldr	r1, [pc, #32]	; (800393c <__NVIC_SetPriority+0x50>)
 800391c:	79fb      	ldrb	r3, [r7, #7]
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	3b04      	subs	r3, #4
 8003924:	0112      	lsls	r2, r2, #4
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	440b      	add	r3, r1
 800392a:	761a      	strb	r2, [r3, #24]
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	e000e100 	.word	0xe000e100
 800393c:	e000ed00 	.word	0xe000ed00

08003940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003940:	b480      	push	{r7}
 8003942:	b089      	sub	sp, #36	; 0x24
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f003 0307 	and.w	r3, r3, #7
 8003952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	f1c3 0307 	rsb	r3, r3, #7
 800395a:	2b04      	cmp	r3, #4
 800395c:	bf28      	it	cs
 800395e:	2304      	movcs	r3, #4
 8003960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	3304      	adds	r3, #4
 8003966:	2b06      	cmp	r3, #6
 8003968:	d902      	bls.n	8003970 <NVIC_EncodePriority+0x30>
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	3b03      	subs	r3, #3
 800396e:	e000      	b.n	8003972 <NVIC_EncodePriority+0x32>
 8003970:	2300      	movs	r3, #0
 8003972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003974:	f04f 32ff 	mov.w	r2, #4294967295
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	43da      	mvns	r2, r3
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	401a      	ands	r2, r3
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003988:	f04f 31ff 	mov.w	r1, #4294967295
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	fa01 f303 	lsl.w	r3, r1, r3
 8003992:	43d9      	mvns	r1, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003998:	4313      	orrs	r3, r2
         );
}
 800399a:	4618      	mov	r0, r3
 800399c:	3724      	adds	r7, #36	; 0x24
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b082      	sub	sp, #8
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7ff ff4c 	bl	800384c <__NVIC_SetPriorityGrouping>
}
 80039b4:	bf00      	nop
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
 80039c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039ca:	2300      	movs	r3, #0
 80039cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039ce:	f7ff ff61 	bl	8003894 <__NVIC_GetPriorityGrouping>
 80039d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	68b9      	ldr	r1, [r7, #8]
 80039d8:	6978      	ldr	r0, [r7, #20]
 80039da:	f7ff ffb1 	bl	8003940 <NVIC_EncodePriority>
 80039de:	4602      	mov	r2, r0
 80039e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039e4:	4611      	mov	r1, r2
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff ff80 	bl	80038ec <__NVIC_SetPriority>
}
 80039ec:	bf00      	nop
 80039ee:	3718      	adds	r7, #24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	4603      	mov	r3, r0
 80039fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff ff54 	bl	80038b0 <__NVIC_EnableIRQ>
}
 8003a08:	bf00      	nop
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e00e      	b.n	8003a40 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	795b      	ldrb	r3, [r3, #5]
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d105      	bne.n	8003a38 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7fd fb76 	bl	8001124 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a54:	f7ff faba 	bl	8002fcc <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e099      	b.n	8003b98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 0201 	bic.w	r2, r2, #1
 8003a82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a84:	e00f      	b.n	8003aa6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a86:	f7ff faa1 	bl	8002fcc <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b05      	cmp	r3, #5
 8003a92:	d908      	bls.n	8003aa6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2220      	movs	r2, #32
 8003a98:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2203      	movs	r2, #3
 8003a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e078      	b.n	8003b98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1e8      	bne.n	8003a86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	4b38      	ldr	r3, [pc, #224]	; (8003ba0 <HAL_DMA_Init+0x158>)
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ad2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ade:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	2b04      	cmp	r3, #4
 8003afe:	d107      	bne.n	8003b10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f023 0307 	bic.w	r3, r3, #7
 8003b26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d117      	bne.n	8003b6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00e      	beq.n	8003b6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 fa9d 	bl	800408c <DMA_CheckFifoParam>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d008      	beq.n	8003b6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2240      	movs	r2, #64	; 0x40
 8003b5c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003b66:	2301      	movs	r3, #1
 8003b68:	e016      	b.n	8003b98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 fa54 	bl	8004020 <DMA_CalcBaseAndBitshift>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b80:	223f      	movs	r2, #63	; 0x3f
 8003b82:	409a      	lsls	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3718      	adds	r7, #24
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	f010803f 	.word	0xf010803f

08003ba4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
 8003bb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d101      	bne.n	8003bca <HAL_DMA_Start_IT+0x26>
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	e040      	b.n	8003c4c <HAL_DMA_Start_IT+0xa8>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d12f      	bne.n	8003c3e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2202      	movs	r2, #2
 8003be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	68b9      	ldr	r1, [r7, #8]
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 f9e6 	bl	8003fc4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfc:	223f      	movs	r2, #63	; 0x3f
 8003bfe:	409a      	lsls	r2, r3
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 0216 	orr.w	r2, r2, #22
 8003c12:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d007      	beq.n	8003c2c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f042 0208 	orr.w	r2, r2, #8
 8003c2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0201 	orr.w	r2, r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]
 8003c3c:	e005      	b.n	8003c4a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c46:	2302      	movs	r3, #2
 8003c48:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d004      	beq.n	8003c72 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2280      	movs	r2, #128	; 0x80
 8003c6c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e00c      	b.n	8003c8c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2205      	movs	r2, #5
 8003c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0201 	bic.w	r2, r2, #1
 8003c88:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ca4:	4b8e      	ldr	r3, [pc, #568]	; (8003ee0 <HAL_DMA_IRQHandler+0x248>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a8e      	ldr	r2, [pc, #568]	; (8003ee4 <HAL_DMA_IRQHandler+0x24c>)
 8003caa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cae:	0a9b      	lsrs	r3, r3, #10
 8003cb0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc2:	2208      	movs	r2, #8
 8003cc4:	409a      	lsls	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d01a      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d013      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 0204 	bic.w	r2, r2, #4
 8003cea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf0:	2208      	movs	r2, #8
 8003cf2:	409a      	lsls	r2, r3
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfc:	f043 0201 	orr.w	r2, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d08:	2201      	movs	r2, #1
 8003d0a:	409a      	lsls	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d012      	beq.n	8003d3a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00b      	beq.n	8003d3a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d26:	2201      	movs	r2, #1
 8003d28:	409a      	lsls	r2, r3
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d32:	f043 0202 	orr.w	r2, r3, #2
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d3e:	2204      	movs	r2, #4
 8003d40:	409a      	lsls	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	4013      	ands	r3, r2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d012      	beq.n	8003d70 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00b      	beq.n	8003d70 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d5c:	2204      	movs	r2, #4
 8003d5e:	409a      	lsls	r2, r3
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d68:	f043 0204 	orr.w	r2, r3, #4
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d74:	2210      	movs	r2, #16
 8003d76:	409a      	lsls	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d043      	beq.n	8003e08 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d03c      	beq.n	8003e08 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d92:	2210      	movs	r2, #16
 8003d94:	409a      	lsls	r2, r3
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d018      	beq.n	8003dda <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d108      	bne.n	8003dc8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d024      	beq.n	8003e08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	4798      	blx	r3
 8003dc6:	e01f      	b.n	8003e08 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d01b      	beq.n	8003e08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	4798      	blx	r3
 8003dd8:	e016      	b.n	8003e08 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d107      	bne.n	8003df8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0208 	bic.w	r2, r2, #8
 8003df6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	409a      	lsls	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4013      	ands	r3, r2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 808f 	beq.w	8003f38 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0310 	and.w	r3, r3, #16
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 8087 	beq.w	8003f38 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2e:	2220      	movs	r2, #32
 8003e30:	409a      	lsls	r2, r3
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b05      	cmp	r3, #5
 8003e40:	d136      	bne.n	8003eb0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0216 	bic.w	r2, r2, #22
 8003e50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695a      	ldr	r2, [r3, #20]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e60:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d103      	bne.n	8003e72 <HAL_DMA_IRQHandler+0x1da>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d007      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0208 	bic.w	r2, r2, #8
 8003e80:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e86:	223f      	movs	r2, #63	; 0x3f
 8003e88:	409a      	lsls	r2, r3
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d07e      	beq.n	8003fa4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	4798      	blx	r3
        }
        return;
 8003eae:	e079      	b.n	8003fa4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d01d      	beq.n	8003efa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10d      	bne.n	8003ee8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d031      	beq.n	8003f38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	4798      	blx	r3
 8003edc:	e02c      	b.n	8003f38 <HAL_DMA_IRQHandler+0x2a0>
 8003ede:	bf00      	nop
 8003ee0:	20000000 	.word	0x20000000
 8003ee4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d023      	beq.n	8003f38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	4798      	blx	r3
 8003ef8:	e01e      	b.n	8003f38 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10f      	bne.n	8003f28 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0210 	bic.w	r2, r2, #16
 8003f16:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d032      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d022      	beq.n	8003f92 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2205      	movs	r2, #5
 8003f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0201 	bic.w	r2, r2, #1
 8003f62:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	3301      	adds	r3, #1
 8003f68:	60bb      	str	r3, [r7, #8]
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d307      	bcc.n	8003f80 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1f2      	bne.n	8003f64 <HAL_DMA_IRQHandler+0x2cc>
 8003f7e:	e000      	b.n	8003f82 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003f80:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d005      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	4798      	blx	r3
 8003fa2:	e000      	b.n	8003fa6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003fa4:	bf00      	nop
    }
  }
}
 8003fa6:	3718      	adds	r7, #24
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
 8003fd0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003fe0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	2b40      	cmp	r3, #64	; 0x40
 8003ff0:	d108      	bne.n	8004004 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004002:	e007      	b.n	8004014 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68ba      	ldr	r2, [r7, #8]
 800400a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	60da      	str	r2, [r3, #12]
}
 8004014:	bf00      	nop
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	b2db      	uxtb	r3, r3
 800402e:	3b10      	subs	r3, #16
 8004030:	4a14      	ldr	r2, [pc, #80]	; (8004084 <DMA_CalcBaseAndBitshift+0x64>)
 8004032:	fba2 2303 	umull	r2, r3, r2, r3
 8004036:	091b      	lsrs	r3, r3, #4
 8004038:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800403a:	4a13      	ldr	r2, [pc, #76]	; (8004088 <DMA_CalcBaseAndBitshift+0x68>)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4413      	add	r3, r2
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	461a      	mov	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2b03      	cmp	r3, #3
 800404c:	d909      	bls.n	8004062 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004056:	f023 0303 	bic.w	r3, r3, #3
 800405a:	1d1a      	adds	r2, r3, #4
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	659a      	str	r2, [r3, #88]	; 0x58
 8004060:	e007      	b.n	8004072 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800406a:	f023 0303 	bic.w	r3, r3, #3
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004076:	4618      	mov	r0, r3
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	aaaaaaab 	.word	0xaaaaaaab
 8004088:	08046bd4 	.word	0x08046bd4

0800408c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004094:	2300      	movs	r3, #0
 8004096:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d11f      	bne.n	80040e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	2b03      	cmp	r3, #3
 80040aa:	d856      	bhi.n	800415a <DMA_CheckFifoParam+0xce>
 80040ac:	a201      	add	r2, pc, #4	; (adr r2, 80040b4 <DMA_CheckFifoParam+0x28>)
 80040ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b2:	bf00      	nop
 80040b4:	080040c5 	.word	0x080040c5
 80040b8:	080040d7 	.word	0x080040d7
 80040bc:	080040c5 	.word	0x080040c5
 80040c0:	0800415b 	.word	0x0800415b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d046      	beq.n	800415e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040d4:	e043      	b.n	800415e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040de:	d140      	bne.n	8004162 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040e4:	e03d      	b.n	8004162 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ee:	d121      	bne.n	8004134 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2b03      	cmp	r3, #3
 80040f4:	d837      	bhi.n	8004166 <DMA_CheckFifoParam+0xda>
 80040f6:	a201      	add	r2, pc, #4	; (adr r2, 80040fc <DMA_CheckFifoParam+0x70>)
 80040f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fc:	0800410d 	.word	0x0800410d
 8004100:	08004113 	.word	0x08004113
 8004104:	0800410d 	.word	0x0800410d
 8004108:	08004125 	.word	0x08004125
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	73fb      	strb	r3, [r7, #15]
      break;
 8004110:	e030      	b.n	8004174 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004116:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d025      	beq.n	800416a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004122:	e022      	b.n	800416a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004128:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800412c:	d11f      	bne.n	800416e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004132:	e01c      	b.n	800416e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	2b02      	cmp	r3, #2
 8004138:	d903      	bls.n	8004142 <DMA_CheckFifoParam+0xb6>
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	2b03      	cmp	r3, #3
 800413e:	d003      	beq.n	8004148 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004140:	e018      	b.n	8004174 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	73fb      	strb	r3, [r7, #15]
      break;
 8004146:	e015      	b.n	8004174 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00e      	beq.n	8004172 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	73fb      	strb	r3, [r7, #15]
      break;
 8004158:	e00b      	b.n	8004172 <DMA_CheckFifoParam+0xe6>
      break;
 800415a:	bf00      	nop
 800415c:	e00a      	b.n	8004174 <DMA_CheckFifoParam+0xe8>
      break;
 800415e:	bf00      	nop
 8004160:	e008      	b.n	8004174 <DMA_CheckFifoParam+0xe8>
      break;
 8004162:	bf00      	nop
 8004164:	e006      	b.n	8004174 <DMA_CheckFifoParam+0xe8>
      break;
 8004166:	bf00      	nop
 8004168:	e004      	b.n	8004174 <DMA_CheckFifoParam+0xe8>
      break;
 800416a:	bf00      	nop
 800416c:	e002      	b.n	8004174 <DMA_CheckFifoParam+0xe8>
      break;   
 800416e:	bf00      	nop
 8004170:	e000      	b.n	8004174 <DMA_CheckFifoParam+0xe8>
      break;
 8004172:	bf00      	nop
    }
  } 
  
  return status; 
 8004174:	7bfb      	ldrb	r3, [r7, #15]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop

08004184 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e03b      	b.n	800420e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d106      	bne.n	80041b0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7fd f836 	bl	800121c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2202      	movs	r2, #2
 80041b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d4:	f023 0107 	bic.w	r1, r3, #7
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80041ee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	68d1      	ldr	r1, [r2, #12]
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	6812      	ldr	r2, [r2, #0]
 80041fa:	430b      	orrs	r3, r1
 80041fc:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3708      	adds	r7, #8
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b086      	sub	sp, #24
 800421a:	af02      	add	r7, sp, #8
 800421c:	60f8      	str	r0, [r7, #12]
 800421e:	60b9      	str	r1, [r7, #8]
 8004220:	607a      	str	r2, [r7, #4]
 8004222:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800422a:	2b01      	cmp	r3, #1
 800422c:	d101      	bne.n	8004232 <HAL_DMA2D_Start+0x1c>
 800422e:	2302      	movs	r3, #2
 8004230:	e018      	b.n	8004264 <HAL_DMA2D_Start+0x4e>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2202      	movs	r2, #2
 800423e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	68b9      	ldr	r1, [r7, #8]
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 f989 	bl	8004564 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f042 0201 	orr.w	r2, r2, #1
 8004260:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004276:	2300      	movs	r3, #0
 8004278:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b00      	cmp	r3, #0
 8004286:	d056      	beq.n	8004336 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004288:	f7fe fea0 	bl	8002fcc <HAL_GetTick>
 800428c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800428e:	e04b      	b.n	8004328 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d023      	beq.n	80042ea <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f003 0320 	and.w	r3, r3, #32
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d005      	beq.n	80042b8 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b0:	f043 0202 	orr.w	r2, r3, #2
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d005      	beq.n	80042ce <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c6:	f043 0201 	orr.w	r2, r3, #1
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2221      	movs	r2, #33	; 0x21
 80042d4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2204      	movs	r2, #4
 80042da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e0a5      	b.n	8004436 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f0:	d01a      	beq.n	8004328 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80042f2:	f7fe fe6b 	bl	8002fcc <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d302      	bcc.n	8004308 <HAL_DMA2D_PollForTransfer+0x9c>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10f      	bne.n	8004328 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800430c:	f043 0220 	orr.w	r2, r3, #32
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2203      	movs	r2, #3
 8004318:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e086      	b.n	8004436 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0ac      	beq.n	8004290 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	f003 0320 	and.w	r3, r3, #32
 8004340:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004348:	f003 0320 	and.w	r3, r3, #32
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	4313      	orrs	r3, r2
 8004350:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d061      	beq.n	800441c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004358:	f7fe fe38 	bl	8002fcc <HAL_GetTick>
 800435c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800435e:	e056      	b.n	800440e <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800436e:	2b00      	cmp	r3, #0
 8004370:	d02e      	beq.n	80043d0 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f003 0308 	and.w	r3, r3, #8
 8004378:	2b00      	cmp	r3, #0
 800437a:	d005      	beq.n	8004388 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004380:	f043 0204 	orr.w	r2, r3, #4
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f003 0320 	and.w	r3, r3, #32
 800438e:	2b00      	cmp	r3, #0
 8004390:	d005      	beq.n	800439e <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004396:	f043 0202 	orr.w	r2, r3, #2
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d005      	beq.n	80043b4 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ac:	f043 0201 	orr.w	r2, r3, #1
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2229      	movs	r2, #41	; 0x29
 80043ba:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2204      	movs	r2, #4
 80043c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e032      	b.n	8004436 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d6:	d01a      	beq.n	800440e <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80043d8:	f7fe fdf8 	bl	8002fcc <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d302      	bcc.n	80043ee <HAL_DMA2D_PollForTransfer+0x182>
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10f      	bne.n	800440e <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f2:	f043 0220 	orr.w	r2, r3, #32
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2203      	movs	r2, #3
 80043fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e013      	b.n	8004436 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f003 0310 	and.w	r3, r3, #16
 8004418:	2b00      	cmp	r3, #0
 800441a:	d0a1      	beq.n	8004360 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2212      	movs	r2, #18
 8004422:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3718      	adds	r7, #24
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
	...

08004440 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004440:	b480      	push	{r7}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <HAL_DMA2D_ConfigLayer+0x20>
 800445c:	2302      	movs	r3, #2
 800445e:	e079      	b.n	8004554 <HAL_DMA2D_ConfigLayer+0x114>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	011b      	lsls	r3, r3, #4
 8004474:	3318      	adds	r3, #24
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	4413      	add	r3, r2
 800447a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	041b      	lsls	r3, r3, #16
 8004486:	4313      	orrs	r3, r2
 8004488:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800448a:	4b35      	ldr	r3, [pc, #212]	; (8004560 <HAL_DMA2D_ConfigLayer+0x120>)
 800448c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b0a      	cmp	r3, #10
 8004494:	d003      	beq.n	800449e <HAL_DMA2D_ConfigLayer+0x5e>
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2b09      	cmp	r3, #9
 800449c:	d107      	bne.n	80044ae <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	617b      	str	r3, [r7, #20]
 80044ac:	e005      	b.n	80044ba <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	061b      	lsls	r3, r3, #24
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d120      	bne.n	8004502 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	43db      	mvns	r3, r3
 80044ca:	ea02 0103 	and.w	r1, r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	6812      	ldr	r2, [r2, #0]
 80044e0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2b0a      	cmp	r3, #10
 80044e8:	d003      	beq.n	80044f2 <HAL_DMA2D_ConfigLayer+0xb2>
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2b09      	cmp	r3, #9
 80044f0:	d127      	bne.n	8004542 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	68da      	ldr	r2, [r3, #12]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80044fe:	629a      	str	r2, [r3, #40]	; 0x28
 8004500:	e01f      	b.n	8004542 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	69da      	ldr	r2, [r3, #28]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	43db      	mvns	r3, r3
 800450c:	ea02 0103 	and.w	r1, r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	430a      	orrs	r2, r1
 8004518:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	6812      	ldr	r2, [r2, #0]
 8004522:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	2b0a      	cmp	r3, #10
 800452a:	d003      	beq.n	8004534 <HAL_DMA2D_ConfigLayer+0xf4>
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	2b09      	cmp	r3, #9
 8004532:	d106      	bne.n	8004542 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004540:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	371c      	adds	r7, #28
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	ff03000f 	.word	0xff03000f

08004564 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004564:	b480      	push	{r7}
 8004566:	b08b      	sub	sp, #44	; 0x2c
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
 8004570:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004578:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	041a      	lsls	r2, r3, #16
 8004580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004582:	431a      	orrs	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	430a      	orrs	r2, r1
 800458a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800459c:	d174      	bne.n	8004688 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80045a4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80045ac:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80045b4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d108      	bne.n	80045d6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	431a      	orrs	r2, r3
 80045ca:	6a3b      	ldr	r3, [r7, #32]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	627b      	str	r3, [r7, #36]	; 0x24
 80045d4:	e053      	b.n	800467e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d106      	bne.n	80045ec <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80045de:	69ba      	ldr	r2, [r7, #24]
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24
 80045ea:	e048      	b.n	800467e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d111      	bne.n	8004618 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	0cdb      	lsrs	r3, r3, #19
 80045f8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	0a9b      	lsrs	r3, r3, #10
 80045fe:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	08db      	lsrs	r3, r3, #3
 8004604:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	02db      	lsls	r3, r3, #11
 800460e:	4313      	orrs	r3, r2
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	4313      	orrs	r3, r2
 8004614:	627b      	str	r3, [r7, #36]	; 0x24
 8004616:	e032      	b.n	800467e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	2b03      	cmp	r3, #3
 800461e:	d117      	bne.n	8004650 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004620:	6a3b      	ldr	r3, [r7, #32]
 8004622:	0fdb      	lsrs	r3, r3, #31
 8004624:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	0cdb      	lsrs	r3, r3, #19
 800462a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	0adb      	lsrs	r3, r3, #11
 8004630:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	08db      	lsrs	r3, r3, #3
 8004636:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	015a      	lsls	r2, r3, #5
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	029b      	lsls	r3, r3, #10
 8004640:	431a      	orrs	r2, r3
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	03db      	lsls	r3, r3, #15
 8004646:	4313      	orrs	r3, r2
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	4313      	orrs	r3, r2
 800464c:	627b      	str	r3, [r7, #36]	; 0x24
 800464e:	e016      	b.n	800467e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	0f1b      	lsrs	r3, r3, #28
 8004654:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	0d1b      	lsrs	r3, r3, #20
 800465a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	0b1b      	lsrs	r3, r3, #12
 8004660:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	091b      	lsrs	r3, r3, #4
 8004666:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	011a      	lsls	r2, r3, #4
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	021b      	lsls	r3, r3, #8
 8004670:	431a      	orrs	r2, r3
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	031b      	lsls	r3, r3, #12
 8004676:	4313      	orrs	r3, r2
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	4313      	orrs	r3, r2
 800467c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004684:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004686:	e003      	b.n	8004690 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	60da      	str	r2, [r3, #12]
}
 8004690:	bf00      	nop
 8004692:	372c      	adds	r7, #44	; 0x2c
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b088      	sub	sp, #32
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	61fb      	str	r3, [r7, #28]
 80046a8:	2300      	movs	r3, #0
 80046aa:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80046ac:	4ba1      	ldr	r3, [pc, #644]	; (8004934 <HAL_ETH_Init+0x298>)
 80046ae:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80046b0:	2300      	movs	r3, #0
 80046b2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80046b4:	2300      	movs	r3, #0
 80046b6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e182      	b.n	80049c8 <HAL_ETH_Init+0x32c>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d106      	bne.n	80046dc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f006 fbfc 	bl	800aed4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046dc:	2300      	movs	r3, #0
 80046de:	60bb      	str	r3, [r7, #8]
 80046e0:	4b95      	ldr	r3, [pc, #596]	; (8004938 <HAL_ETH_Init+0x29c>)
 80046e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e4:	4a94      	ldr	r2, [pc, #592]	; (8004938 <HAL_ETH_Init+0x29c>)
 80046e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046ea:	6453      	str	r3, [r2, #68]	; 0x44
 80046ec:	4b92      	ldr	r3, [pc, #584]	; (8004938 <HAL_ETH_Init+0x29c>)
 80046ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046f4:	60bb      	str	r3, [r7, #8]
 80046f6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80046f8:	4b90      	ldr	r3, [pc, #576]	; (800493c <HAL_ETH_Init+0x2a0>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	4a8f      	ldr	r2, [pc, #572]	; (800493c <HAL_ETH_Init+0x2a0>)
 80046fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004702:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004704:	4b8d      	ldr	r3, [pc, #564]	; (800493c <HAL_ETH_Init+0x2a0>)
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	498b      	ldr	r1, [pc, #556]	; (800493c <HAL_ETH_Init+0x2a0>)
 800470e:	4313      	orrs	r3, r2
 8004710:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6812      	ldr	r2, [r2, #0]
 8004720:	f043 0301 	orr.w	r3, r3, #1
 8004724:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004728:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800472a:	f7fe fc4f 	bl	8002fcc <HAL_GetTick>
 800472e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004730:	e011      	b.n	8004756 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8004732:	f7fe fc4b 	bl	8002fcc <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004740:	d909      	bls.n	8004756 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2203      	movs	r2, #3
 8004746:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e138      	b.n	80049c8 <HAL_ETH_Init+0x32c>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1e4      	bne.n	8004732 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	f023 031c 	bic.w	r3, r3, #28
 8004776:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004778:	f002 fbfc 	bl	8006f74 <HAL_RCC_GetHCLKFreq>
 800477c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	4a6f      	ldr	r2, [pc, #444]	; (8004940 <HAL_ETH_Init+0x2a4>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d908      	bls.n	8004798 <HAL_ETH_Init+0xfc>
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	4a6e      	ldr	r2, [pc, #440]	; (8004944 <HAL_ETH_Init+0x2a8>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d804      	bhi.n	8004798 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	f043 0308 	orr.w	r3, r3, #8
 8004794:	61fb      	str	r3, [r7, #28]
 8004796:	e027      	b.n	80047e8 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	4a6a      	ldr	r2, [pc, #424]	; (8004944 <HAL_ETH_Init+0x2a8>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d908      	bls.n	80047b2 <HAL_ETH_Init+0x116>
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	4a64      	ldr	r2, [pc, #400]	; (8004934 <HAL_ETH_Init+0x298>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d204      	bcs.n	80047b2 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	f043 030c 	orr.w	r3, r3, #12
 80047ae:	61fb      	str	r3, [r7, #28]
 80047b0:	e01a      	b.n	80047e8 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	4a5f      	ldr	r2, [pc, #380]	; (8004934 <HAL_ETH_Init+0x298>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d303      	bcc.n	80047c2 <HAL_ETH_Init+0x126>
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	4a62      	ldr	r2, [pc, #392]	; (8004948 <HAL_ETH_Init+0x2ac>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d911      	bls.n	80047e6 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	4a60      	ldr	r2, [pc, #384]	; (8004948 <HAL_ETH_Init+0x2ac>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d908      	bls.n	80047dc <HAL_ETH_Init+0x140>
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	4a5f      	ldr	r2, [pc, #380]	; (800494c <HAL_ETH_Init+0x2b0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d804      	bhi.n	80047dc <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	f043 0304 	orr.w	r3, r3, #4
 80047d8:	61fb      	str	r3, [r7, #28]
 80047da:	e005      	b.n	80047e8 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	f043 0310 	orr.w	r3, r3, #16
 80047e2:	61fb      	str	r3, [r7, #28]
 80047e4:	e000      	b.n	80047e8 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80047e6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	69fa      	ldr	r2, [r7, #28]
 80047ee:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80047f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80047f4:	2100      	movs	r1, #0
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fc10 	bl	800501c <HAL_ETH_WritePHYRegister>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00b      	beq.n	800481a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8004806:	6939      	ldr	r1, [r7, #16]
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 fdc5 	bl	8005398 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e0d6      	b.n	80049c8 <HAL_ETH_Init+0x32c>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800481a:	20ff      	movs	r0, #255	; 0xff
 800481c:	f7fe fbe2 	bl	8002fe4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 80a4 	beq.w	8004972 <HAL_ETH_Init+0x2d6>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800482a:	f7fe fbcf 	bl	8002fcc <HAL_GetTick>
 800482e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004830:	f107 030c 	add.w	r3, r7, #12
 8004834:	461a      	mov	r2, r3
 8004836:	2101      	movs	r1, #1
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 fb87 	bl	8004f4c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800483e:	f7fe fbc5 	bl	8002fcc <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	f241 3288 	movw	r2, #5000	; 0x1388
 800484c:	4293      	cmp	r3, r2
 800484e:	d90f      	bls.n	8004870 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004854:	6939      	ldr	r1, [r7, #16]
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 fd9e 	bl	8005398 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e0ab      	b.n	80049c8 <HAL_ETH_Init+0x32c>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f003 0304 	and.w	r3, r3, #4
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0da      	beq.n	8004830 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800487a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800487e:	2100      	movs	r1, #0
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 fbcb 	bl	800501c <HAL_ETH_WritePHYRegister>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00b      	beq.n	80048a4 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004890:	6939      	ldr	r1, [r7, #16]
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 fd80 	bl	8005398 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80048a0:	2301      	movs	r3, #1
 80048a2:	e091      	b.n	80049c8 <HAL_ETH_Init+0x32c>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80048a4:	f7fe fb92 	bl	8002fcc <HAL_GetTick>
 80048a8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80048aa:	f107 030c 	add.w	r3, r7, #12
 80048ae:	461a      	mov	r2, r3
 80048b0:	2101      	movs	r1, #1
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 fb4a 	bl	8004f4c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80048b8:	f7fe fb88 	bl	8002fcc <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d90f      	bls.n	80048ea <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80048ce:	6939      	ldr	r1, [r7, #16]
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 fd61 	bl	8005398 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e06e      	b.n	80049c8 <HAL_ETH_Init+0x32c>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f003 0320 	and.w	r3, r3, #32
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0da      	beq.n	80048aa <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80048f4:	f107 030c 	add.w	r3, r7, #12
 80048f8:	461a      	mov	r2, r3
 80048fa:	211f      	movs	r1, #31
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 fb25 	bl	8004f4c <HAL_ETH_ReadPHYRegister>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00b      	beq.n	8004920 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800490c:	6939      	ldr	r1, [r7, #16]
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 fd42 	bl	8005398 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800491c:	2301      	movs	r3, #1
 800491e:	e053      	b.n	80049c8 <HAL_ETH_Init+0x32c>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f003 0310 	and.w	r3, r3, #16
 8004926:	2b00      	cmp	r3, #0
 8004928:	d012      	beq.n	8004950 <HAL_ETH_Init+0x2b4>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004930:	60da      	str	r2, [r3, #12]
 8004932:	e010      	b.n	8004956 <HAL_ETH_Init+0x2ba>
 8004934:	03938700 	.word	0x03938700
 8004938:	40023800 	.word	0x40023800
 800493c:	40013800 	.word	0x40013800
 8004940:	01312cff 	.word	0x01312cff
 8004944:	02160ebf 	.word	0x02160ebf
 8004948:	05f5e0ff 	.word	0x05f5e0ff
 800494c:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <HAL_ETH_Init+0x2cc>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	609a      	str	r2, [r3, #8]
 8004966:	e026      	b.n	80049b6 <HAL_ETH_Init+0x31a>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800496e:	609a      	str	r2, [r3, #8]
 8004970:	e021      	b.n	80049b6 <HAL_ETH_Init+0x31a>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	08db      	lsrs	r3, r3, #3
 8004978:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	085b      	lsrs	r3, r3, #1
 8004980:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8004982:	4313      	orrs	r3, r2
 8004984:	b29b      	uxth	r3, r3
 8004986:	461a      	mov	r2, r3
 8004988:	2100      	movs	r1, #0
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 fb46 	bl	800501c <HAL_ETH_WritePHYRegister>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00b      	beq.n	80049ae <HAL_ETH_Init+0x312>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800499a:	6939      	ldr	r1, [r7, #16]
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 fcfb 	bl	8005398 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e00c      	b.n	80049c8 <HAL_ETH_Init+0x32c>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80049ae:	f640 70ff 	movw	r0, #4095	; 0xfff
 80049b2:	f7fe fb17 	bl	8002fe4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80049b6:	6939      	ldr	r1, [r7, #16]
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 fced 	bl	8005398 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3720      	adds	r7, #32
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
 80049dc:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80049de:	2300      	movs	r3, #0
 80049e0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d101      	bne.n	80049f0 <HAL_ETH_DMATxDescListInit+0x20>
 80049ec:	2302      	movs	r3, #2
 80049ee:	e051      	b.n	8004a94 <HAL_ETH_DMATxDescListInit+0xc4>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2202      	movs	r2, #2
 80049fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8004a06:	2300      	movs	r3, #0
 8004a08:	617b      	str	r3, [r7, #20]
 8004a0a:	e030      	b.n	8004a6e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	015b      	lsls	r3, r3, #5
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	4413      	add	r3, r2
 8004a14:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a1c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004a24:	fb02 f303 	mul.w	r3, r2, r3
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d105      	bne.n	8004a46 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d208      	bcs.n	8004a62 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	3301      	adds	r3, #1
 8004a54:	015b      	lsls	r3, r3, #5
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	4413      	add	r3, r2
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	60da      	str	r2, [r3, #12]
 8004a60:	e002      	b.n	8004a68 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	617b      	str	r3, [r7, #20]
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d3ca      	bcc.n	8004a0c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a80:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	371c      	adds	r7, #28
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b087      	sub	sp, #28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
 8004aac:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d101      	bne.n	8004ac0 <HAL_ETH_DMARxDescListInit+0x20>
 8004abc:	2302      	movs	r3, #2
 8004abe:	e055      	b.n	8004b6c <HAL_ETH_DMARxDescListInit+0xcc>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	617b      	str	r3, [r7, #20]
 8004ada:	e034      	b.n	8004b46 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	015b      	lsls	r3, r3, #5
 8004ae0:	68ba      	ldr	r2, [r7, #8]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004aec:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8004af4:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004afc:	fb02 f303 	mul.w	r3, r2, r3
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	4413      	add	r3, r2
 8004b04:	461a      	mov	r2, r3
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d105      	bne.n	8004b1e <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	3b01      	subs	r3, #1
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d208      	bcs.n	8004b3a <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	015b      	lsls	r3, r3, #5
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	4413      	add	r3, r2
 8004b32:	461a      	mov	r2, r3
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	60da      	str	r2, [r3, #12]
 8004b38:	e002      	b.n	8004b40 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	3301      	adds	r3, #1
 8004b44:	617b      	str	r3, [r7, #20]
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d3c6      	bcc.n	8004adc <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b58:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	371c      	adds	r7, #28
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8004b82:	2300      	movs	r3, #0
 8004b84:	617b      	str	r3, [r7, #20]
 8004b86:	2300      	movs	r3, #0
 8004b88:	60fb      	str	r3, [r7, #12]
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d101      	bne.n	8004b9c <HAL_ETH_TransmitFrame+0x24>
 8004b98:	2302      	movs	r3, #2
 8004b9a:	e0cc      	b.n	8004d36 <HAL_ETH_TransmitFrame+0x1be>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d109      	bne.n	8004bc6 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e0b7      	b.n	8004d36 <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	da09      	bge.n	8004be4 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2212      	movs	r2, #18
 8004bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e0a8      	b.n	8004d36 <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d915      	bls.n	8004c1a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	4a54      	ldr	r2, [pc, #336]	; (8004d44 <HAL_ETH_TransmitFrame+0x1cc>)
 8004bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf6:	0a9b      	lsrs	r3, r3, #10
 8004bf8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	4b51      	ldr	r3, [pc, #324]	; (8004d44 <HAL_ETH_TransmitFrame+0x1cc>)
 8004bfe:	fba3 1302 	umull	r1, r3, r3, r2
 8004c02:	0a9b      	lsrs	r3, r3, #10
 8004c04:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8004c08:	fb01 f303 	mul.w	r3, r1, r3
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d005      	beq.n	8004c1e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	3301      	adds	r3, #1
 8004c16:	617b      	str	r3, [r7, #20]
 8004c18:	e001      	b.n	8004c1e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d11c      	bne.n	8004c5e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8004c32:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8004c3e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004c4e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	461a      	mov	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c5c:	e04b      	b.n	8004cf6 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8004c5e:	2300      	movs	r3, #0
 8004c60:	613b      	str	r3, [r7, #16]
 8004c62:	e044      	b.n	8004cee <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004c72:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d107      	bne.n	8004c8a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c84:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004c88:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004c92:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	3b01      	subs	r3, #1
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d116      	bne.n	8004ccc <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004cac:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	4a25      	ldr	r2, [pc, #148]	; (8004d48 <HAL_ETH_TransmitFrame+0x1d0>)
 8004cb2:	fb03 f202 	mul.w	r2, r3, r2
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	4413      	add	r3, r2
 8004cba:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004cbe:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8004cca:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004cda:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	3301      	adds	r3, #1
 8004cec:	613b      	str	r3, [r7, #16]
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d3b6      	bcc.n	8004c64 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	f003 0304 	and.w	r3, r3, #4
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00d      	beq.n	8004d24 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d10:	461a      	mov	r2, r3
 8004d12:	2304      	movs	r3, #4
 8004d14:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d1e:	461a      	mov	r2, r3
 8004d20:	2300      	movs	r3, #0
 8004d22:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	371c      	adds	r7, #28
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	ac02b00b 	.word	0xac02b00b
 8004d48:	fffffa0c 	.word	0xfffffa0c

08004d4c <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8004d54:	2300      	movs	r3, #0
 8004d56:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d101      	bne.n	8004d66 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8004d62:	2302      	movs	r3, #2
 8004d64:	e074      	b.n	8004e50 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2202      	movs	r2, #2
 8004d72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8004d76:	e05a      	b.n	8004e2e <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d8c:	d10d      	bne.n	8004daa <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	461a      	mov	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	629a      	str	r2, [r3, #40]	; 0x28
 8004da8:	e041      	b.n	8004e2e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10b      	bne.n	8004dd0 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbc:	1c5a      	adds	r2, r3, #1
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	461a      	mov	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	629a      	str	r2, [r3, #40]	; 0x28
 8004dce:	e02e      	b.n	8004e2e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ddc:	1c5a      	adds	r2, r3, #1
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d103      	bne.n	8004df2 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	0c1b      	lsrs	r3, r3, #16
 8004dfa:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004dfe:	1f1a      	subs	r2, r3, #4
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e08:	689a      	ldr	r2, [r3, #8]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	461a      	mov	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	e010      	b.n	8004e50 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	db02      	blt.n	8004e3e <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2b03      	cmp	r3, #3
 8004e3c:	d99c      	bls.n	8004d78 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3714      	adds	r7, #20
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e72:	2b40      	cmp	r3, #64	; 0x40
 8004e74:	d112      	bne.n	8004e9c <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f006 f8fa 	bl	800b070 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e84:	461a      	mov	r2, r3
 8004e86:	2340      	movs	r3, #64	; 0x40
 8004e88:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e9a:	e01a      	b.n	8004ed2 <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d111      	bne.n	8004ed2 <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f838 	bl	8004f24 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eda:	461a      	mov	r2, r3
 8004edc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ee0:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ef4:	d112      	bne.n	8004f1c <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f81e 	bl	8004f38 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f04:	461a      	mov	r2, r3
 8004f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f0a:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8004f1c:	bf00      	nop
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	460b      	mov	r3, r1
 8004f56:	607a      	str	r2, [r7, #4]
 8004f58:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b82      	cmp	r3, #130	; 0x82
 8004f6c:	d101      	bne.n	8004f72 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8004f6e:	2302      	movs	r3, #2
 8004f70:	e050      	b.n	8005014 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2282      	movs	r2, #130	; 0x82
 8004f76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f003 031c 	and.w	r3, r3, #28
 8004f88:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8a1b      	ldrh	r3, [r3, #16]
 8004f8e:	02db      	lsls	r3, r3, #11
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8004f98:	897b      	ldrh	r3, [r7, #10]
 8004f9a:	019b      	lsls	r3, r3, #6
 8004f9c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f023 0302 	bic.w	r3, r3, #2
 8004fac:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f043 0301 	orr.w	r3, r3, #1
 8004fb4:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004fbe:	f7fe f805 	bl	8002fcc <HAL_GetTick>
 8004fc2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004fc4:	e015      	b.n	8004ff2 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8004fc6:	f7fe f801 	bl	8002fcc <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd4:	d309      	bcc.n	8004fea <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e014      	b.n	8005014 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1e4      	bne.n	8004fc6 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	b29b      	uxth	r3, r3
 8005004:	461a      	mov	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3718      	adds	r7, #24
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	460b      	mov	r3, r1
 8005026:	607a      	str	r2, [r7, #4]
 8005028:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800502a:	2300      	movs	r3, #0
 800502c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800502e:	2300      	movs	r3, #0
 8005030:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b42      	cmp	r3, #66	; 0x42
 800503c:	d101      	bne.n	8005042 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800503e:	2302      	movs	r3, #2
 8005040:	e04e      	b.n	80050e0 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2242      	movs	r2, #66	; 0x42
 8005046:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f003 031c 	and.w	r3, r3, #28
 8005058:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	8a1b      	ldrh	r3, [r3, #16]
 800505e:	02db      	lsls	r3, r3, #11
 8005060:	b29b      	uxth	r3, r3
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	4313      	orrs	r3, r2
 8005066:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8005068:	897b      	ldrh	r3, [r7, #10]
 800506a:	019b      	lsls	r3, r3, #6
 800506c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	4313      	orrs	r3, r2
 8005074:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f043 0302 	orr.w	r3, r3, #2
 800507c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f043 0301 	orr.w	r3, r3, #1
 8005084:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	b29a      	uxth	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8005098:	f7fd ff98 	bl	8002fcc <HAL_GetTick>
 800509c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800509e:	e015      	b.n	80050cc <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80050a0:	f7fd ff94 	bl	8002fcc <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ae:	d309      	bcc.n	80050c4 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e00d      	b.n	80050e0 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1e4      	bne.n	80050a0 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3718      	adds	r7, #24
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d101      	bne.n	80050fe <HAL_ETH_Start+0x16>
 80050fa:	2302      	movs	r3, #2
 80050fc:	e01f      	b.n	800513e <HAL_ETH_Start+0x56>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2202      	movs	r2, #2
 800510a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 fb40 	bl	8005794 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 fb77 	bl	8005808 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 fc06 	bl	800592c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 fbab 	bl	800587c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 fbd4 	bl	80058d4 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8005146:	b580      	push	{r7, lr}
 8005148:	b082      	sub	sp, #8
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005154:	2b01      	cmp	r3, #1
 8005156:	d101      	bne.n	800515c <HAL_ETH_Stop+0x16>
 8005158:	2302      	movs	r3, #2
 800515a:	e01f      	b.n	800519c <HAL_ETH_Stop+0x56>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2202      	movs	r2, #2
 8005168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 fb9b 	bl	80058a8 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 fbc4 	bl	8005900 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 fb62 	bl	8005842 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 fbd4 	bl	800592c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 fb22 	bl	80057ce <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 80051ae:	2300      	movs	r3, #0
 80051b0:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d101      	bne.n	80051c0 <HAL_ETH_ConfigMAC+0x1c>
 80051bc:	2302      	movs	r3, #2
 80051be:	e0e4      	b.n	800538a <HAL_ETH_ConfigMAC+0x1e6>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2202      	movs	r2, #2
 80051cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f000 80b1 	beq.w	800533a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	4b6c      	ldr	r3, [pc, #432]	; (8005394 <HAL_ETH_ConfigMAC+0x1f0>)
 80051e4:	4013      	ands	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80051f0:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80051f6:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80051fc:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8005202:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8005208:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800520e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8005214:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800521a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8005220:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8005226:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 800522c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8005232:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	4313      	orrs	r3, r2
 8005238:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800524a:	2001      	movs	r0, #1
 800524c:	f7fd feca 	bl	8002fe4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005260:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8005266:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 800526c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8005272:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8005278:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800527e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800528a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800528c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005296:	2001      	movs	r0, #1
 8005298:	f7fd fea4 	bl	8002fe4 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80052ac:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80052b6:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80052c6:	4013      	ands	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ce:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80052d4:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80052da:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80052e0:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80052e6:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80052ec:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005304:	2001      	movs	r0, #1
 8005306:	f7fd fe6d 	bl	8002fe4 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	69db      	ldr	r3, [r3, #28]
 8005328:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800532a:	2001      	movs	r0, #1
 800532c:	f7fd fe5a 	bl	8002fe4 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	61da      	str	r2, [r3, #28]
 8005338:	e01e      	b.n	8005378 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005348:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	689a      	ldr	r2, [r3, #8]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	4313      	orrs	r3, r2
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	4313      	orrs	r3, r2
 8005358:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800536a:	2001      	movs	r0, #1
 800536c:	f7fd fe3a 	bl	8002fe4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	ff20810f 	.word	0xff20810f

08005398 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b0b0      	sub	sp, #192	; 0xc0
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d007      	beq.n	80053be <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053b4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80053bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80053be:	2300      	movs	r3, #0
 80053c0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80053c2:	2300      	movs	r3, #0
 80053c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80053c6:	2300      	movs	r3, #0
 80053c8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80053ca:	2300      	movs	r3, #0
 80053cc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80053ce:	2300      	movs	r3, #0
 80053d0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80053d2:	2300      	movs	r3, #0
 80053d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d103      	bne.n	80053e6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80053de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053e2:	663b      	str	r3, [r7, #96]	; 0x60
 80053e4:	e001      	b.n	80053ea <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80053e6:	2300      	movs	r3, #0
 80053e8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80053ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053ee:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80053f0:	2300      	movs	r3, #0
 80053f2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80053f4:	2300      	movs	r3, #0
 80053f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80053f8:	2300      	movs	r3, #0
 80053fa:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80053fc:	2300      	movs	r3, #0
 80053fe:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8005400:	2300      	movs	r3, #0
 8005402:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8005404:	2340      	movs	r3, #64	; 0x40
 8005406:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8005408:	2300      	movs	r3, #0
 800540a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800540e:	2300      	movs	r3, #0
 8005410:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8005414:	2300      	movs	r3, #0
 8005416:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800541a:	2300      	movs	r3, #0
 800541c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8005420:	2300      	movs	r3, #0
 8005422:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8005426:	2300      	movs	r3, #0
 8005428:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800542c:	2300      	movs	r3, #0
 800542e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8005432:	2300      	movs	r3, #0
 8005434:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8005438:	2380      	movs	r3, #128	; 0x80
 800543a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800543e:	2300      	movs	r3, #0
 8005440:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8005444:	2300      	movs	r3, #0
 8005446:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800544a:	2300      	movs	r3, #0
 800544c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8005450:	2300      	movs	r3, #0
 8005452:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8005456:	2300      	movs	r3, #0
 8005458:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 800545c:	2300      	movs	r3, #0
 800545e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800546c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005470:	4baa      	ldr	r3, [pc, #680]	; (800571c <ETH_MACDMAConfig+0x384>)
 8005472:	4013      	ands	r3, r2
 8005474:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8005478:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800547a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800547c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800547e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8005480:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8005482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8005484:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800548a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800548c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800548e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8005490:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8005492:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8005498:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800549a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800549c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800549e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80054a0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80054a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80054a4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80054a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80054a8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80054aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80054ac:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80054ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80054b2:	4313      	orrs	r3, r2
 80054b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80054c0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80054cc:	2001      	movs	r0, #1
 80054ce:	f7fd fd89 	bl	8002fe4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80054da:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80054dc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80054de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80054e0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80054e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80054e4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80054e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80054ea:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80054ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80054f0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80054f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80054f6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80054f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80054fc:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8005500:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8005508:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800550a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8005516:	2001      	movs	r0, #1
 8005518:	f7fd fd64 	bl	8002fe4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005524:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800552e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005538:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005544:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005548:	f64f 7341 	movw	r3, #65345	; 0xff41
 800554c:	4013      	ands	r3, r2
 800554e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8005552:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005556:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8005558:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800555c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800555e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8005562:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8005564:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8005568:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800556a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800556e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8005570:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8005574:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8005576:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800557a:	4313      	orrs	r3, r2
 800557c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005588:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8005594:	2001      	movs	r0, #1
 8005596:	f7fd fd25 	bl	8002fe4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80055a2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80055a4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80055a8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	430a      	orrs	r2, r1
 80055b2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80055be:	2001      	movs	r0, #1
 80055c0:	f7fd fd10 	bl	8002fe4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80055cc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80055ce:	2300      	movs	r3, #0
 80055d0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80055d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055d6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80055d8:	2300      	movs	r3, #0
 80055da:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80055dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80055e0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80055e2:	2300      	movs	r3, #0
 80055e4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80055e6:	2300      	movs	r3, #0
 80055e8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80055ea:	2300      	movs	r3, #0
 80055ec:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80055ee:	2300      	movs	r3, #0
 80055f0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80055f2:	2304      	movs	r3, #4
 80055f4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80055f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80055fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005600:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005602:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005606:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005608:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800560c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800560e:	2380      	movs	r3, #128	; 0x80
 8005610:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8005612:	2300      	movs	r3, #0
 8005614:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005616:	2300      	movs	r3, #0
 8005618:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8005628:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800562c:	4b3c      	ldr	r3, [pc, #240]	; (8005720 <ETH_MACDMAConfig+0x388>)
 800562e:	4013      	ands	r3, r2
 8005630:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005634:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8005636:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005638:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800563a:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800563c:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800563e:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8005640:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8005642:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8005644:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8005646:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8005648:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800564a:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800564c:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800564e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8005650:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8005652:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8005654:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005656:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800565a:	4313      	orrs	r3, r2
 800565c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005668:	461a      	mov	r2, r3
 800566a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800566e:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800567e:	2001      	movs	r0, #1
 8005680:	f7fd fcb0 	bl	8002fe4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800568c:	461a      	mov	r2, r3
 800568e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005692:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8005696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005698:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800569a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800569c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800569e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80056a0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80056a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80056a4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80056a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056a8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80056aa:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80056ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80056ae:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	6812      	ldr	r2, [r2, #0]
 80056b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80056b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80056bc:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80056cc:	2001      	movs	r0, #1
 80056ce:	f7fd fc89 	bl	8002fe4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056da:	461a      	mov	r2, r3
 80056dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80056e0:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d10d      	bne.n	8005706 <ETH_MACDMAConfig+0x36e>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056f2:	69db      	ldr	r3, [r3, #28]
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	6812      	ldr	r2, [r2, #0]
 80056f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005700:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005704:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	461a      	mov	r2, r3
 800570c:	2100      	movs	r1, #0
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f808 	bl	8005724 <ETH_MACAddressConfig>
}
 8005714:	bf00      	nop
 8005716:	37c0      	adds	r7, #192	; 0xc0
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	ff20810f 	.word	0xff20810f
 8005720:	f8de3f23 	.word	0xf8de3f23

08005724 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005724:	b480      	push	{r7}
 8005726:	b087      	sub	sp, #28
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3305      	adds	r3, #5
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	021b      	lsls	r3, r3, #8
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	3204      	adds	r2, #4
 800573c:	7812      	ldrb	r2, [r2, #0]
 800573e:	4313      	orrs	r3, r2
 8005740:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	4b11      	ldr	r3, [pc, #68]	; (800578c <ETH_MACAddressConfig+0x68>)
 8005746:	4413      	add	r3, r2
 8005748:	461a      	mov	r2, r3
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	3303      	adds	r3, #3
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	061a      	lsls	r2, r3, #24
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	3302      	adds	r3, #2
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	041b      	lsls	r3, r3, #16
 800575e:	431a      	orrs	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	3301      	adds	r3, #1
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	021b      	lsls	r3, r3, #8
 8005768:	4313      	orrs	r3, r2
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	7812      	ldrb	r2, [r2, #0]
 800576e:	4313      	orrs	r3, r2
 8005770:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	4b06      	ldr	r3, [pc, #24]	; (8005790 <ETH_MACAddressConfig+0x6c>)
 8005776:	4413      	add	r3, r2
 8005778:	461a      	mov	r2, r3
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	6013      	str	r3, [r2, #0]
}
 800577e:	bf00      	nop
 8005780:	371c      	adds	r7, #28
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	40028040 	.word	0x40028040
 8005790:	40028044 	.word	0x40028044

08005794 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800579c:	2300      	movs	r3, #0
 800579e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f042 0208 	orr.w	r2, r2, #8
 80057ae:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80057b8:	2001      	movs	r0, #1
 80057ba:	f000 f8dd 	bl	8005978 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	601a      	str	r2, [r3, #0]
}
 80057c6:	bf00      	nop
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b084      	sub	sp, #16
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80057d6:	2300      	movs	r3, #0
 80057d8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 0208 	bic.w	r2, r2, #8
 80057e8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80057f2:	2001      	movs	r0, #1
 80057f4:	f000 f8c0 	bl	8005978 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	601a      	str	r2, [r3, #0]
}
 8005800:	bf00      	nop
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005810:	2300      	movs	r3, #0
 8005812:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f042 0204 	orr.w	r2, r2, #4
 8005822:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800582c:	2001      	movs	r0, #1
 800582e:	f000 f8a3 	bl	8005978 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	601a      	str	r2, [r3, #0]
}
 800583a:	bf00      	nop
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8005842:	b580      	push	{r7, lr}
 8005844:	b084      	sub	sp, #16
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800584a:	2300      	movs	r3, #0
 800584c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f022 0204 	bic.w	r2, r2, #4
 800585c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005866:	2001      	movs	r0, #1
 8005868:	f000 f886 	bl	8005978 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	601a      	str	r2, [r3, #0]
}
 8005874:	bf00      	nop
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	6812      	ldr	r2, [r2, #0]
 8005892:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005896:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800589a:	6193      	str	r3, [r2, #24]
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	6812      	ldr	r2, [r2, #0]
 80058be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80058c6:	6193      	str	r3, [r2, #24]
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	6812      	ldr	r2, [r2, #0]
 80058ea:	f043 0302 	orr.w	r3, r3, #2
 80058ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80058f2:	6193      	str	r3, [r2, #24]
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	6812      	ldr	r2, [r2, #0]
 8005916:	f023 0302 	bic.w	r3, r3, #2
 800591a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800591e:	6193      	str	r3, [r2, #24]
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	6812      	ldr	r2, [r2, #0]
 8005946:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800594a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800594e:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800595c:	2001      	movs	r0, #1
 800595e:	f000 f80b 	bl	8005978 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800596c:	6193      	str	r3, [r2, #24]
}
 800596e:	bf00      	nop
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
	...

08005978 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005980:	4b0b      	ldr	r3, [pc, #44]	; (80059b0 <ETH_Delay+0x38>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a0b      	ldr	r2, [pc, #44]	; (80059b4 <ETH_Delay+0x3c>)
 8005986:	fba2 2303 	umull	r2, r3, r2, r3
 800598a:	0a5b      	lsrs	r3, r3, #9
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	fb02 f303 	mul.w	r3, r2, r3
 8005992:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8005994:	bf00      	nop
  } 
  while (Delay --);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	1e5a      	subs	r2, r3, #1
 800599a:	60fa      	str	r2, [r7, #12]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1f9      	bne.n	8005994 <ETH_Delay+0x1c>
}
 80059a0:	bf00      	nop
 80059a2:	bf00      	nop
 80059a4:	3714      	adds	r7, #20
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	20000000 	.word	0x20000000
 80059b4:	10624dd3 	.word	0x10624dd3

080059b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b089      	sub	sp, #36	; 0x24
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80059c2:	2300      	movs	r3, #0
 80059c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80059c6:	2300      	movs	r3, #0
 80059c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80059ca:	2300      	movs	r3, #0
 80059cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059ce:	2300      	movs	r3, #0
 80059d0:	61fb      	str	r3, [r7, #28]
 80059d2:	e177      	b.n	8005cc4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80059d4:	2201      	movs	r2, #1
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	fa02 f303 	lsl.w	r3, r2, r3
 80059dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	4013      	ands	r3, r2
 80059e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	f040 8166 	bne.w	8005cbe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f003 0303 	and.w	r3, r3, #3
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d005      	beq.n	8005a0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d130      	bne.n	8005a6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	2203      	movs	r2, #3
 8005a16:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1a:	43db      	mvns	r3, r3
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	4013      	ands	r3, r2
 8005a20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	68da      	ldr	r2, [r3, #12]
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	005b      	lsls	r3, r3, #1
 8005a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a40:	2201      	movs	r2, #1
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	fa02 f303 	lsl.w	r3, r2, r3
 8005a48:	43db      	mvns	r3, r3
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	091b      	lsrs	r3, r3, #4
 8005a56:	f003 0201 	and.w	r2, r3, #1
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a60:	69ba      	ldr	r2, [r7, #24]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	69ba      	ldr	r2, [r7, #24]
 8005a6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f003 0303 	and.w	r3, r3, #3
 8005a74:	2b03      	cmp	r3, #3
 8005a76:	d017      	beq.n	8005aa8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	005b      	lsls	r3, r3, #1
 8005a82:	2203      	movs	r2, #3
 8005a84:	fa02 f303 	lsl.w	r3, r2, r3
 8005a88:	43db      	mvns	r3, r3
 8005a8a:	69ba      	ldr	r2, [r7, #24]
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	689a      	ldr	r2, [r3, #8]
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	005b      	lsls	r3, r3, #1
 8005a98:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f003 0303 	and.w	r3, r3, #3
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d123      	bne.n	8005afc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	08da      	lsrs	r2, r3, #3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	3208      	adds	r2, #8
 8005abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	f003 0307 	and.w	r3, r3, #7
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	220f      	movs	r2, #15
 8005acc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad0:	43db      	mvns	r3, r3
 8005ad2:	69ba      	ldr	r2, [r7, #24]
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	691a      	ldr	r2, [r3, #16]
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	f003 0307 	and.w	r3, r3, #7
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	08da      	lsrs	r2, r3, #3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	3208      	adds	r2, #8
 8005af6:	69b9      	ldr	r1, [r7, #24]
 8005af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	2203      	movs	r2, #3
 8005b08:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0c:	43db      	mvns	r3, r3
 8005b0e:	69ba      	ldr	r2, [r7, #24]
 8005b10:	4013      	ands	r3, r2
 8005b12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f003 0203 	and.w	r2, r3, #3
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	005b      	lsls	r3, r3, #1
 8005b20:	fa02 f303 	lsl.w	r3, r2, r3
 8005b24:	69ba      	ldr	r2, [r7, #24]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	69ba      	ldr	r2, [r7, #24]
 8005b2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 80c0 	beq.w	8005cbe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b3e:	2300      	movs	r3, #0
 8005b40:	60fb      	str	r3, [r7, #12]
 8005b42:	4b66      	ldr	r3, [pc, #408]	; (8005cdc <HAL_GPIO_Init+0x324>)
 8005b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b46:	4a65      	ldr	r2, [pc, #404]	; (8005cdc <HAL_GPIO_Init+0x324>)
 8005b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8005b4e:	4b63      	ldr	r3, [pc, #396]	; (8005cdc <HAL_GPIO_Init+0x324>)
 8005b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b56:	60fb      	str	r3, [r7, #12]
 8005b58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b5a:	4a61      	ldr	r2, [pc, #388]	; (8005ce0 <HAL_GPIO_Init+0x328>)
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	089b      	lsrs	r3, r3, #2
 8005b60:	3302      	adds	r3, #2
 8005b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	f003 0303 	and.w	r3, r3, #3
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	220f      	movs	r2, #15
 8005b72:	fa02 f303 	lsl.w	r3, r2, r3
 8005b76:	43db      	mvns	r3, r3
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a58      	ldr	r2, [pc, #352]	; (8005ce4 <HAL_GPIO_Init+0x32c>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d037      	beq.n	8005bf6 <HAL_GPIO_Init+0x23e>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a57      	ldr	r2, [pc, #348]	; (8005ce8 <HAL_GPIO_Init+0x330>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d031      	beq.n	8005bf2 <HAL_GPIO_Init+0x23a>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a56      	ldr	r2, [pc, #344]	; (8005cec <HAL_GPIO_Init+0x334>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d02b      	beq.n	8005bee <HAL_GPIO_Init+0x236>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a55      	ldr	r2, [pc, #340]	; (8005cf0 <HAL_GPIO_Init+0x338>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d025      	beq.n	8005bea <HAL_GPIO_Init+0x232>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a54      	ldr	r2, [pc, #336]	; (8005cf4 <HAL_GPIO_Init+0x33c>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d01f      	beq.n	8005be6 <HAL_GPIO_Init+0x22e>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a53      	ldr	r2, [pc, #332]	; (8005cf8 <HAL_GPIO_Init+0x340>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d019      	beq.n	8005be2 <HAL_GPIO_Init+0x22a>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a52      	ldr	r2, [pc, #328]	; (8005cfc <HAL_GPIO_Init+0x344>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d013      	beq.n	8005bde <HAL_GPIO_Init+0x226>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a51      	ldr	r2, [pc, #324]	; (8005d00 <HAL_GPIO_Init+0x348>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d00d      	beq.n	8005bda <HAL_GPIO_Init+0x222>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a50      	ldr	r2, [pc, #320]	; (8005d04 <HAL_GPIO_Init+0x34c>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d007      	beq.n	8005bd6 <HAL_GPIO_Init+0x21e>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a4f      	ldr	r2, [pc, #316]	; (8005d08 <HAL_GPIO_Init+0x350>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d101      	bne.n	8005bd2 <HAL_GPIO_Init+0x21a>
 8005bce:	2309      	movs	r3, #9
 8005bd0:	e012      	b.n	8005bf8 <HAL_GPIO_Init+0x240>
 8005bd2:	230a      	movs	r3, #10
 8005bd4:	e010      	b.n	8005bf8 <HAL_GPIO_Init+0x240>
 8005bd6:	2308      	movs	r3, #8
 8005bd8:	e00e      	b.n	8005bf8 <HAL_GPIO_Init+0x240>
 8005bda:	2307      	movs	r3, #7
 8005bdc:	e00c      	b.n	8005bf8 <HAL_GPIO_Init+0x240>
 8005bde:	2306      	movs	r3, #6
 8005be0:	e00a      	b.n	8005bf8 <HAL_GPIO_Init+0x240>
 8005be2:	2305      	movs	r3, #5
 8005be4:	e008      	b.n	8005bf8 <HAL_GPIO_Init+0x240>
 8005be6:	2304      	movs	r3, #4
 8005be8:	e006      	b.n	8005bf8 <HAL_GPIO_Init+0x240>
 8005bea:	2303      	movs	r3, #3
 8005bec:	e004      	b.n	8005bf8 <HAL_GPIO_Init+0x240>
 8005bee:	2302      	movs	r3, #2
 8005bf0:	e002      	b.n	8005bf8 <HAL_GPIO_Init+0x240>
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e000      	b.n	8005bf8 <HAL_GPIO_Init+0x240>
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	69fa      	ldr	r2, [r7, #28]
 8005bfa:	f002 0203 	and.w	r2, r2, #3
 8005bfe:	0092      	lsls	r2, r2, #2
 8005c00:	4093      	lsls	r3, r2
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c08:	4935      	ldr	r1, [pc, #212]	; (8005ce0 <HAL_GPIO_Init+0x328>)
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	089b      	lsrs	r3, r3, #2
 8005c0e:	3302      	adds	r3, #2
 8005c10:	69ba      	ldr	r2, [r7, #24]
 8005c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c16:	4b3d      	ldr	r3, [pc, #244]	; (8005d0c <HAL_GPIO_Init+0x354>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	43db      	mvns	r3, r3
 8005c20:	69ba      	ldr	r2, [r7, #24]
 8005c22:	4013      	ands	r3, r2
 8005c24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d003      	beq.n	8005c3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005c3a:	4a34      	ldr	r2, [pc, #208]	; (8005d0c <HAL_GPIO_Init+0x354>)
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005c40:	4b32      	ldr	r3, [pc, #200]	; (8005d0c <HAL_GPIO_Init+0x354>)
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	43db      	mvns	r3, r3
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d003      	beq.n	8005c64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005c5c:	69ba      	ldr	r2, [r7, #24]
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c64:	4a29      	ldr	r2, [pc, #164]	; (8005d0c <HAL_GPIO_Init+0x354>)
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c6a:	4b28      	ldr	r3, [pc, #160]	; (8005d0c <HAL_GPIO_Init+0x354>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	43db      	mvns	r3, r3
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	4013      	ands	r3, r2
 8005c78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d003      	beq.n	8005c8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c8e:	4a1f      	ldr	r2, [pc, #124]	; (8005d0c <HAL_GPIO_Init+0x354>)
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c94:	4b1d      	ldr	r3, [pc, #116]	; (8005d0c <HAL_GPIO_Init+0x354>)
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	43db      	mvns	r3, r3
 8005c9e:	69ba      	ldr	r2, [r7, #24]
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d003      	beq.n	8005cb8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005cb0:	69ba      	ldr	r2, [r7, #24]
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005cb8:	4a14      	ldr	r2, [pc, #80]	; (8005d0c <HAL_GPIO_Init+0x354>)
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	61fb      	str	r3, [r7, #28]
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	2b0f      	cmp	r3, #15
 8005cc8:	f67f ae84 	bls.w	80059d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005ccc:	bf00      	nop
 8005cce:	bf00      	nop
 8005cd0:	3724      	adds	r7, #36	; 0x24
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	40023800 	.word	0x40023800
 8005ce0:	40013800 	.word	0x40013800
 8005ce4:	40020000 	.word	0x40020000
 8005ce8:	40020400 	.word	0x40020400
 8005cec:	40020800 	.word	0x40020800
 8005cf0:	40020c00 	.word	0x40020c00
 8005cf4:	40021000 	.word	0x40021000
 8005cf8:	40021400 	.word	0x40021400
 8005cfc:	40021800 	.word	0x40021800
 8005d00:	40021c00 	.word	0x40021c00
 8005d04:	40022000 	.word	0x40022000
 8005d08:	40022400 	.word	0x40022400
 8005d0c:	40013c00 	.word	0x40013c00

08005d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	460b      	mov	r3, r1
 8005d1a:	807b      	strh	r3, [r7, #2]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005d20:	787b      	ldrb	r3, [r7, #1]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d003      	beq.n	8005d2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d26:	887a      	ldrh	r2, [r7, #2]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005d2c:	e003      	b.n	8005d36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005d2e:	887b      	ldrh	r3, [r7, #2]
 8005d30:	041a      	lsls	r2, r3, #16
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	619a      	str	r2, [r3, #24]
}
 8005d36:	bf00      	nop
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b085      	sub	sp, #20
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005d54:	887a      	ldrh	r2, [r7, #2]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	4013      	ands	r3, r2
 8005d5a:	041a      	lsls	r2, r3, #16
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	43d9      	mvns	r1, r3
 8005d60:	887b      	ldrh	r3, [r7, #2]
 8005d62:	400b      	ands	r3, r1
 8005d64:	431a      	orrs	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	619a      	str	r2, [r3, #24]
}
 8005d6a:	bf00      	nop
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
	...

08005d78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	4603      	mov	r3, r0
 8005d80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005d82:	4b08      	ldr	r3, [pc, #32]	; (8005da4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d84:	695a      	ldr	r2, [r3, #20]
 8005d86:	88fb      	ldrh	r3, [r7, #6]
 8005d88:	4013      	ands	r3, r2
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d006      	beq.n	8005d9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005d8e:	4a05      	ldr	r2, [pc, #20]	; (8005da4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d90:	88fb      	ldrh	r3, [r7, #6]
 8005d92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005d94:	88fb      	ldrh	r3, [r7, #6]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f000 f806 	bl	8005da8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005d9c:	bf00      	nop
 8005d9e:	3708      	adds	r7, #8
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	40013c00 	.word	0x40013c00

08005da8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	4603      	mov	r3, r0
 8005db0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005db2:	bf00      	nop
 8005db4:	370c      	adds	r7, #12
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
	...

08005dc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d101      	bne.n	8005dd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e12b      	b.n	800602a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d106      	bne.n	8005dec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7fc f996 	bl	8002118 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2224      	movs	r2, #36	; 0x24
 8005df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f022 0201 	bic.w	r2, r2, #1
 8005e02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005e24:	f001 f8b2 	bl	8006f8c <HAL_RCC_GetPCLK1Freq>
 8005e28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	4a81      	ldr	r2, [pc, #516]	; (8006034 <HAL_I2C_Init+0x274>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d807      	bhi.n	8005e44 <HAL_I2C_Init+0x84>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	4a80      	ldr	r2, [pc, #512]	; (8006038 <HAL_I2C_Init+0x278>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	bf94      	ite	ls
 8005e3c:	2301      	movls	r3, #1
 8005e3e:	2300      	movhi	r3, #0
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	e006      	b.n	8005e52 <HAL_I2C_Init+0x92>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	4a7d      	ldr	r2, [pc, #500]	; (800603c <HAL_I2C_Init+0x27c>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	bf94      	ite	ls
 8005e4c:	2301      	movls	r3, #1
 8005e4e:	2300      	movhi	r3, #0
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d001      	beq.n	8005e5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e0e7      	b.n	800602a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	4a78      	ldr	r2, [pc, #480]	; (8006040 <HAL_I2C_Init+0x280>)
 8005e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e62:	0c9b      	lsrs	r3, r3, #18
 8005e64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	430a      	orrs	r2, r1
 8005e78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6a1b      	ldr	r3, [r3, #32]
 8005e80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	4a6a      	ldr	r2, [pc, #424]	; (8006034 <HAL_I2C_Init+0x274>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d802      	bhi.n	8005e94 <HAL_I2C_Init+0xd4>
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	3301      	adds	r3, #1
 8005e92:	e009      	b.n	8005ea8 <HAL_I2C_Init+0xe8>
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005e9a:	fb02 f303 	mul.w	r3, r2, r3
 8005e9e:	4a69      	ldr	r2, [pc, #420]	; (8006044 <HAL_I2C_Init+0x284>)
 8005ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea4:	099b      	lsrs	r3, r3, #6
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	6812      	ldr	r2, [r2, #0]
 8005eac:	430b      	orrs	r3, r1
 8005eae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	69db      	ldr	r3, [r3, #28]
 8005eb6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005eba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	495c      	ldr	r1, [pc, #368]	; (8006034 <HAL_I2C_Init+0x274>)
 8005ec4:	428b      	cmp	r3, r1
 8005ec6:	d819      	bhi.n	8005efc <HAL_I2C_Init+0x13c>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	1e59      	subs	r1, r3, #1
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	005b      	lsls	r3, r3, #1
 8005ed2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ed6:	1c59      	adds	r1, r3, #1
 8005ed8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005edc:	400b      	ands	r3, r1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00a      	beq.n	8005ef8 <HAL_I2C_Init+0x138>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	1e59      	subs	r1, r3, #1
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	005b      	lsls	r3, r3, #1
 8005eec:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ef6:	e051      	b.n	8005f9c <HAL_I2C_Init+0x1dc>
 8005ef8:	2304      	movs	r3, #4
 8005efa:	e04f      	b.n	8005f9c <HAL_I2C_Init+0x1dc>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d111      	bne.n	8005f28 <HAL_I2C_Init+0x168>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	1e58      	subs	r0, r3, #1
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6859      	ldr	r1, [r3, #4]
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	005b      	lsls	r3, r3, #1
 8005f10:	440b      	add	r3, r1
 8005f12:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f16:	3301      	adds	r3, #1
 8005f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	bf0c      	ite	eq
 8005f20:	2301      	moveq	r3, #1
 8005f22:	2300      	movne	r3, #0
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	e012      	b.n	8005f4e <HAL_I2C_Init+0x18e>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	1e58      	subs	r0, r3, #1
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6859      	ldr	r1, [r3, #4]
 8005f30:	460b      	mov	r3, r1
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	440b      	add	r3, r1
 8005f36:	0099      	lsls	r1, r3, #2
 8005f38:	440b      	add	r3, r1
 8005f3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f3e:	3301      	adds	r3, #1
 8005f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	bf0c      	ite	eq
 8005f48:	2301      	moveq	r3, #1
 8005f4a:	2300      	movne	r3, #0
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d001      	beq.n	8005f56 <HAL_I2C_Init+0x196>
 8005f52:	2301      	movs	r3, #1
 8005f54:	e022      	b.n	8005f9c <HAL_I2C_Init+0x1dc>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10e      	bne.n	8005f7c <HAL_I2C_Init+0x1bc>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	1e58      	subs	r0, r3, #1
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6859      	ldr	r1, [r3, #4]
 8005f66:	460b      	mov	r3, r1
 8005f68:	005b      	lsls	r3, r3, #1
 8005f6a:	440b      	add	r3, r1
 8005f6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f70:	3301      	adds	r3, #1
 8005f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f7a:	e00f      	b.n	8005f9c <HAL_I2C_Init+0x1dc>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	1e58      	subs	r0, r3, #1
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6859      	ldr	r1, [r3, #4]
 8005f84:	460b      	mov	r3, r1
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	440b      	add	r3, r1
 8005f8a:	0099      	lsls	r1, r3, #2
 8005f8c:	440b      	add	r3, r1
 8005f8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f92:	3301      	adds	r3, #1
 8005f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f9c:	6879      	ldr	r1, [r7, #4]
 8005f9e:	6809      	ldr	r1, [r1, #0]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	69da      	ldr	r2, [r3, #28]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	430a      	orrs	r2, r1
 8005fbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005fca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	6911      	ldr	r1, [r2, #16]
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	68d2      	ldr	r2, [r2, #12]
 8005fd6:	4311      	orrs	r1, r2
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	6812      	ldr	r2, [r2, #0]
 8005fdc:	430b      	orrs	r3, r1
 8005fde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	695a      	ldr	r2, [r3, #20]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f042 0201 	orr.w	r2, r2, #1
 800600a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2220      	movs	r2, #32
 8006016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	000186a0 	.word	0x000186a0
 8006038:	001e847f 	.word	0x001e847f
 800603c:	003d08ff 	.word	0x003d08ff
 8006040:	431bde83 	.word	0x431bde83
 8006044:	10624dd3 	.word	0x10624dd3

08006048 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b20      	cmp	r3, #32
 800605c:	d129      	bne.n	80060b2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2224      	movs	r2, #36	; 0x24
 8006062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f022 0201 	bic.w	r2, r2, #1
 8006074:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 0210 	bic.w	r2, r2, #16
 8006084:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	683a      	ldr	r2, [r7, #0]
 8006092:	430a      	orrs	r2, r1
 8006094:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f042 0201 	orr.w	r2, r2, #1
 80060a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2220      	movs	r2, #32
 80060aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80060ae:	2300      	movs	r3, #0
 80060b0:	e000      	b.n	80060b4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80060b2:	2302      	movs	r3, #2
  }
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80060ca:	2300      	movs	r3, #0
 80060cc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b20      	cmp	r3, #32
 80060d8:	d12a      	bne.n	8006130 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2224      	movs	r2, #36	; 0x24
 80060de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f022 0201 	bic.w	r2, r2, #1
 80060f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80060fa:	89fb      	ldrh	r3, [r7, #14]
 80060fc:	f023 030f 	bic.w	r3, r3, #15
 8006100:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	b29a      	uxth	r2, r3
 8006106:	89fb      	ldrh	r3, [r7, #14]
 8006108:	4313      	orrs	r3, r2
 800610a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	89fa      	ldrh	r2, [r7, #14]
 8006112:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f042 0201 	orr.w	r2, r2, #1
 8006122:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2220      	movs	r2, #32
 8006128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800612c:	2300      	movs	r3, #0
 800612e:	e000      	b.n	8006132 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006130:	2302      	movs	r3, #2
  }
}
 8006132:	4618      	mov	r0, r3
 8006134:	3714      	adds	r7, #20
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
	...

08006140 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d101      	bne.n	8006152 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e0bf      	b.n	80062d2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d106      	bne.n	800616c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7fc f8a0 	bl	80022ac <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2202      	movs	r2, #2
 8006170:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	699a      	ldr	r2, [r3, #24]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006182:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	6999      	ldr	r1, [r3, #24]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685a      	ldr	r2, [r3, #4]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006198:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	430a      	orrs	r2, r1
 80061a6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	6899      	ldr	r1, [r3, #8]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	4b4a      	ldr	r3, [pc, #296]	; (80062dc <HAL_LTDC_Init+0x19c>)
 80061b4:	400b      	ands	r3, r1
 80061b6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	041b      	lsls	r3, r3, #16
 80061be:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6899      	ldr	r1, [r3, #8]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	699a      	ldr	r2, [r3, #24]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	431a      	orrs	r2, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68d9      	ldr	r1, [r3, #12]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	4b3e      	ldr	r3, [pc, #248]	; (80062dc <HAL_LTDC_Init+0x19c>)
 80061e2:	400b      	ands	r3, r1
 80061e4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	69db      	ldr	r3, [r3, #28]
 80061ea:	041b      	lsls	r3, r3, #16
 80061ec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68d9      	ldr	r1, [r3, #12]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a1a      	ldr	r2, [r3, #32]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	431a      	orrs	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	430a      	orrs	r2, r1
 8006202:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6919      	ldr	r1, [r3, #16]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	4b33      	ldr	r3, [pc, #204]	; (80062dc <HAL_LTDC_Init+0x19c>)
 8006210:	400b      	ands	r3, r1
 8006212:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	041b      	lsls	r3, r3, #16
 800621a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6919      	ldr	r1, [r3, #16]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	431a      	orrs	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	430a      	orrs	r2, r1
 8006230:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6959      	ldr	r1, [r3, #20]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	4b27      	ldr	r3, [pc, #156]	; (80062dc <HAL_LTDC_Init+0x19c>)
 800623e:	400b      	ands	r3, r1
 8006240:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006246:	041b      	lsls	r3, r3, #16
 8006248:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6959      	ldr	r1, [r3, #20]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	431a      	orrs	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	430a      	orrs	r2, r1
 800625e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006266:	021b      	lsls	r3, r3, #8
 8006268:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006270:	041b      	lsls	r3, r3, #16
 8006272:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006282:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	4313      	orrs	r3, r2
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006296:	431a      	orrs	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	430a      	orrs	r2, r1
 800629e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f042 0206 	orr.w	r2, r2, #6
 80062ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	699a      	ldr	r2, [r3, #24]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f042 0201 	orr.w	r2, r2, #1
 80062be:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	f000f800 	.word	0xf000f800

080062e0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80062e0:	b5b0      	push	{r4, r5, r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d101      	bne.n	80062fa <HAL_LTDC_ConfigLayer+0x1a>
 80062f6:	2302      	movs	r3, #2
 80062f8:	e02c      	b.n	8006354 <HAL_LTDC_ConfigLayer+0x74>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2202      	movs	r2, #2
 8006306:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2134      	movs	r1, #52	; 0x34
 8006310:	fb01 f303 	mul.w	r3, r1, r3
 8006314:	4413      	add	r3, r2
 8006316:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	4614      	mov	r4, r2
 800631e:	461d      	mov	r5, r3
 8006320:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006322:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800632a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800632c:	682b      	ldr	r3, [r5, #0]
 800632e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	68b9      	ldr	r1, [r7, #8]
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f000 f811 	bl	800635c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2201      	movs	r2, #1
 8006340:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2201      	movs	r2, #1
 8006346:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bdb0      	pop	{r4, r5, r7, pc}

0800635c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800635c:	b480      	push	{r7}
 800635e:	b089      	sub	sp, #36	; 0x24
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	685a      	ldr	r2, [r3, #4]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	0c1b      	lsrs	r3, r3, #16
 8006374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006378:	4413      	add	r3, r2
 800637a:	041b      	lsls	r3, r3, #16
 800637c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	461a      	mov	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	01db      	lsls	r3, r3, #7
 8006388:	4413      	add	r3, r2
 800638a:	3384      	adds	r3, #132	; 0x84
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	6812      	ldr	r2, [r2, #0]
 8006392:	4611      	mov	r1, r2
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	01d2      	lsls	r2, r2, #7
 8006398:	440a      	add	r2, r1
 800639a:	3284      	adds	r2, #132	; 0x84
 800639c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80063a0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	0c1b      	lsrs	r3, r3, #16
 80063ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063b2:	4413      	add	r3, r2
 80063b4:	1c5a      	adds	r2, r3, #1
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4619      	mov	r1, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	01db      	lsls	r3, r3, #7
 80063c0:	440b      	add	r3, r1
 80063c2:	3384      	adds	r3, #132	; 0x84
 80063c4:	4619      	mov	r1, r3
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	68da      	ldr	r2, [r3, #12]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063da:	4413      	add	r3, r2
 80063dc:	041b      	lsls	r3, r3, #16
 80063de:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	461a      	mov	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	01db      	lsls	r3, r3, #7
 80063ea:	4413      	add	r3, r2
 80063ec:	3384      	adds	r3, #132	; 0x84
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	6812      	ldr	r2, [r2, #0]
 80063f4:	4611      	mov	r1, r2
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	01d2      	lsls	r2, r2, #7
 80063fa:	440a      	add	r2, r1
 80063fc:	3284      	adds	r2, #132	; 0x84
 80063fe:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006402:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	689a      	ldr	r2, [r3, #8]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006412:	4413      	add	r3, r2
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4619      	mov	r1, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	01db      	lsls	r3, r3, #7
 8006420:	440b      	add	r3, r1
 8006422:	3384      	adds	r3, #132	; 0x84
 8006424:	4619      	mov	r1, r3
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	4313      	orrs	r3, r2
 800642a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	461a      	mov	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	01db      	lsls	r3, r3, #7
 8006436:	4413      	add	r3, r2
 8006438:	3384      	adds	r3, #132	; 0x84
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	6812      	ldr	r2, [r2, #0]
 8006440:	4611      	mov	r1, r2
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	01d2      	lsls	r2, r2, #7
 8006446:	440a      	add	r2, r1
 8006448:	3284      	adds	r2, #132	; 0x84
 800644a:	f023 0307 	bic.w	r3, r3, #7
 800644e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	461a      	mov	r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	01db      	lsls	r3, r3, #7
 800645a:	4413      	add	r3, r2
 800645c:	3384      	adds	r3, #132	; 0x84
 800645e:	461a      	mov	r2, r3
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800646c:	021b      	lsls	r3, r3, #8
 800646e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006476:	041b      	lsls	r3, r3, #16
 8006478:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	061b      	lsls	r3, r3, #24
 8006480:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	461a      	mov	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	01db      	lsls	r3, r3, #7
 800648c:	4413      	add	r3, r2
 800648e:	3384      	adds	r3, #132	; 0x84
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	461a      	mov	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	01db      	lsls	r3, r3, #7
 800649c:	4413      	add	r3, r2
 800649e:	3384      	adds	r3, #132	; 0x84
 80064a0:	461a      	mov	r2, r3
 80064a2:	2300      	movs	r3, #0
 80064a4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80064ac:	461a      	mov	r2, r3
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	431a      	orrs	r2, r3
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	431a      	orrs	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4619      	mov	r1, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	01db      	lsls	r3, r3, #7
 80064c0:	440b      	add	r3, r1
 80064c2:	3384      	adds	r3, #132	; 0x84
 80064c4:	4619      	mov	r1, r3
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	461a      	mov	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	01db      	lsls	r3, r3, #7
 80064d6:	4413      	add	r3, r2
 80064d8:	3384      	adds	r3, #132	; 0x84
 80064da:	695b      	ldr	r3, [r3, #20]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	6812      	ldr	r2, [r2, #0]
 80064e0:	4611      	mov	r1, r2
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	01d2      	lsls	r2, r2, #7
 80064e6:	440a      	add	r2, r1
 80064e8:	3284      	adds	r2, #132	; 0x84
 80064ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80064ee:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	461a      	mov	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	01db      	lsls	r3, r3, #7
 80064fa:	4413      	add	r3, r2
 80064fc:	3384      	adds	r3, #132	; 0x84
 80064fe:	461a      	mov	r2, r3
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	695b      	ldr	r3, [r3, #20]
 8006504:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	461a      	mov	r2, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	01db      	lsls	r3, r3, #7
 8006510:	4413      	add	r3, r2
 8006512:	3384      	adds	r3, #132	; 0x84
 8006514:	69db      	ldr	r3, [r3, #28]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	6812      	ldr	r2, [r2, #0]
 800651a:	4611      	mov	r1, r2
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	01d2      	lsls	r2, r2, #7
 8006520:	440a      	add	r2, r1
 8006522:	3284      	adds	r2, #132	; 0x84
 8006524:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006528:	f023 0307 	bic.w	r3, r3, #7
 800652c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	69da      	ldr	r2, [r3, #28]
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	6a1b      	ldr	r3, [r3, #32]
 8006536:	68f9      	ldr	r1, [r7, #12]
 8006538:	6809      	ldr	r1, [r1, #0]
 800653a:	4608      	mov	r0, r1
 800653c:	6879      	ldr	r1, [r7, #4]
 800653e:	01c9      	lsls	r1, r1, #7
 8006540:	4401      	add	r1, r0
 8006542:	3184      	adds	r1, #132	; 0x84
 8006544:	4313      	orrs	r3, r2
 8006546:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	461a      	mov	r2, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	01db      	lsls	r3, r3, #7
 8006552:	4413      	add	r3, r2
 8006554:	3384      	adds	r3, #132	; 0x84
 8006556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	461a      	mov	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	01db      	lsls	r3, r3, #7
 8006562:	4413      	add	r3, r2
 8006564:	3384      	adds	r3, #132	; 0x84
 8006566:	461a      	mov	r2, r3
 8006568:	2300      	movs	r3, #0
 800656a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	461a      	mov	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	01db      	lsls	r3, r3, #7
 8006576:	4413      	add	r3, r2
 8006578:	3384      	adds	r3, #132	; 0x84
 800657a:	461a      	mov	r2, r3
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006580:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d102      	bne.n	8006590 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800658a:	2304      	movs	r3, #4
 800658c:	61fb      	str	r3, [r7, #28]
 800658e:	e01b      	b.n	80065c8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d102      	bne.n	800659e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006598:	2303      	movs	r3, #3
 800659a:	61fb      	str	r3, [r7, #28]
 800659c:	e014      	b.n	80065c8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	2b04      	cmp	r3, #4
 80065a4:	d00b      	beq.n	80065be <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d007      	beq.n	80065be <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80065b2:	2b03      	cmp	r3, #3
 80065b4:	d003      	beq.n	80065be <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80065ba:	2b07      	cmp	r3, #7
 80065bc:	d102      	bne.n	80065c4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80065be:	2302      	movs	r3, #2
 80065c0:	61fb      	str	r3, [r7, #28]
 80065c2:	e001      	b.n	80065c8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80065c4:	2301      	movs	r3, #1
 80065c6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	461a      	mov	r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	01db      	lsls	r3, r3, #7
 80065d2:	4413      	add	r3, r2
 80065d4:	3384      	adds	r3, #132	; 0x84
 80065d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	6812      	ldr	r2, [r2, #0]
 80065dc:	4611      	mov	r1, r2
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	01d2      	lsls	r2, r2, #7
 80065e2:	440a      	add	r2, r1
 80065e4:	3284      	adds	r2, #132	; 0x84
 80065e6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80065ea:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f0:	69fa      	ldr	r2, [r7, #28]
 80065f2:	fb02 f303 	mul.w	r3, r2, r3
 80065f6:	041a      	lsls	r2, r3, #16
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	6859      	ldr	r1, [r3, #4]
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	1acb      	subs	r3, r1, r3
 8006602:	69f9      	ldr	r1, [r7, #28]
 8006604:	fb01 f303 	mul.w	r3, r1, r3
 8006608:	3303      	adds	r3, #3
 800660a:	68f9      	ldr	r1, [r7, #12]
 800660c:	6809      	ldr	r1, [r1, #0]
 800660e:	4608      	mov	r0, r1
 8006610:	6879      	ldr	r1, [r7, #4]
 8006612:	01c9      	lsls	r1, r1, #7
 8006614:	4401      	add	r1, r0
 8006616:	3184      	adds	r1, #132	; 0x84
 8006618:	4313      	orrs	r3, r2
 800661a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	461a      	mov	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	01db      	lsls	r3, r3, #7
 8006626:	4413      	add	r3, r2
 8006628:	3384      	adds	r3, #132	; 0x84
 800662a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	6812      	ldr	r2, [r2, #0]
 8006630:	4611      	mov	r1, r2
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	01d2      	lsls	r2, r2, #7
 8006636:	440a      	add	r2, r1
 8006638:	3284      	adds	r2, #132	; 0x84
 800663a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800663e:	f023 0307 	bic.w	r3, r3, #7
 8006642:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	461a      	mov	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	01db      	lsls	r3, r3, #7
 800664e:	4413      	add	r3, r2
 8006650:	3384      	adds	r3, #132	; 0x84
 8006652:	461a      	mov	r2, r3
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006658:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	461a      	mov	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	01db      	lsls	r3, r3, #7
 8006664:	4413      	add	r3, r2
 8006666:	3384      	adds	r3, #132	; 0x84
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	6812      	ldr	r2, [r2, #0]
 800666e:	4611      	mov	r1, r2
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	01d2      	lsls	r2, r2, #7
 8006674:	440a      	add	r2, r1
 8006676:	3284      	adds	r2, #132	; 0x84
 8006678:	f043 0301 	orr.w	r3, r3, #1
 800667c:	6013      	str	r3, [r2, #0]
}
 800667e:	bf00      	nop
 8006680:	3724      	adds	r7, #36	; 0x24
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
	...

0800668c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006692:	2300      	movs	r3, #0
 8006694:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006696:	2300      	movs	r3, #0
 8006698:	603b      	str	r3, [r7, #0]
 800669a:	4b20      	ldr	r3, [pc, #128]	; (800671c <HAL_PWREx_EnableOverDrive+0x90>)
 800669c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669e:	4a1f      	ldr	r2, [pc, #124]	; (800671c <HAL_PWREx_EnableOverDrive+0x90>)
 80066a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066a4:	6413      	str	r3, [r2, #64]	; 0x40
 80066a6:	4b1d      	ldr	r3, [pc, #116]	; (800671c <HAL_PWREx_EnableOverDrive+0x90>)
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ae:	603b      	str	r3, [r7, #0]
 80066b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80066b2:	4b1b      	ldr	r3, [pc, #108]	; (8006720 <HAL_PWREx_EnableOverDrive+0x94>)
 80066b4:	2201      	movs	r2, #1
 80066b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80066b8:	f7fc fc88 	bl	8002fcc <HAL_GetTick>
 80066bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80066be:	e009      	b.n	80066d4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80066c0:	f7fc fc84 	bl	8002fcc <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066ce:	d901      	bls.n	80066d4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e01f      	b.n	8006714 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80066d4:	4b13      	ldr	r3, [pc, #76]	; (8006724 <HAL_PWREx_EnableOverDrive+0x98>)
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066e0:	d1ee      	bne.n	80066c0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80066e2:	4b11      	ldr	r3, [pc, #68]	; (8006728 <HAL_PWREx_EnableOverDrive+0x9c>)
 80066e4:	2201      	movs	r2, #1
 80066e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80066e8:	f7fc fc70 	bl	8002fcc <HAL_GetTick>
 80066ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80066ee:	e009      	b.n	8006704 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80066f0:	f7fc fc6c 	bl	8002fcc <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066fe:	d901      	bls.n	8006704 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006700:	2303      	movs	r3, #3
 8006702:	e007      	b.n	8006714 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006704:	4b07      	ldr	r3, [pc, #28]	; (8006724 <HAL_PWREx_EnableOverDrive+0x98>)
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800670c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006710:	d1ee      	bne.n	80066f0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	40023800 	.word	0x40023800
 8006720:	420e0040 	.word	0x420e0040
 8006724:	40007000 	.word	0x40007000
 8006728:	420e0044 	.word	0x420e0044

0800672c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b086      	sub	sp, #24
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d101      	bne.n	800673e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e267      	b.n	8006c0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0301 	and.w	r3, r3, #1
 8006746:	2b00      	cmp	r3, #0
 8006748:	d075      	beq.n	8006836 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800674a:	4b88      	ldr	r3, [pc, #544]	; (800696c <HAL_RCC_OscConfig+0x240>)
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f003 030c 	and.w	r3, r3, #12
 8006752:	2b04      	cmp	r3, #4
 8006754:	d00c      	beq.n	8006770 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006756:	4b85      	ldr	r3, [pc, #532]	; (800696c <HAL_RCC_OscConfig+0x240>)
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800675e:	2b08      	cmp	r3, #8
 8006760:	d112      	bne.n	8006788 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006762:	4b82      	ldr	r3, [pc, #520]	; (800696c <HAL_RCC_OscConfig+0x240>)
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800676a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800676e:	d10b      	bne.n	8006788 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006770:	4b7e      	ldr	r3, [pc, #504]	; (800696c <HAL_RCC_OscConfig+0x240>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d05b      	beq.n	8006834 <HAL_RCC_OscConfig+0x108>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d157      	bne.n	8006834 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e242      	b.n	8006c0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006790:	d106      	bne.n	80067a0 <HAL_RCC_OscConfig+0x74>
 8006792:	4b76      	ldr	r3, [pc, #472]	; (800696c <HAL_RCC_OscConfig+0x240>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a75      	ldr	r2, [pc, #468]	; (800696c <HAL_RCC_OscConfig+0x240>)
 8006798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800679c:	6013      	str	r3, [r2, #0]
 800679e:	e01d      	b.n	80067dc <HAL_RCC_OscConfig+0xb0>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067a8:	d10c      	bne.n	80067c4 <HAL_RCC_OscConfig+0x98>
 80067aa:	4b70      	ldr	r3, [pc, #448]	; (800696c <HAL_RCC_OscConfig+0x240>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a6f      	ldr	r2, [pc, #444]	; (800696c <HAL_RCC_OscConfig+0x240>)
 80067b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067b4:	6013      	str	r3, [r2, #0]
 80067b6:	4b6d      	ldr	r3, [pc, #436]	; (800696c <HAL_RCC_OscConfig+0x240>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a6c      	ldr	r2, [pc, #432]	; (800696c <HAL_RCC_OscConfig+0x240>)
 80067bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067c0:	6013      	str	r3, [r2, #0]
 80067c2:	e00b      	b.n	80067dc <HAL_RCC_OscConfig+0xb0>
 80067c4:	4b69      	ldr	r3, [pc, #420]	; (800696c <HAL_RCC_OscConfig+0x240>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a68      	ldr	r2, [pc, #416]	; (800696c <HAL_RCC_OscConfig+0x240>)
 80067ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067ce:	6013      	str	r3, [r2, #0]
 80067d0:	4b66      	ldr	r3, [pc, #408]	; (800696c <HAL_RCC_OscConfig+0x240>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a65      	ldr	r2, [pc, #404]	; (800696c <HAL_RCC_OscConfig+0x240>)
 80067d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d013      	beq.n	800680c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067e4:	f7fc fbf2 	bl	8002fcc <HAL_GetTick>
 80067e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067ea:	e008      	b.n	80067fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067ec:	f7fc fbee 	bl	8002fcc <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	2b64      	cmp	r3, #100	; 0x64
 80067f8:	d901      	bls.n	80067fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e207      	b.n	8006c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067fe:	4b5b      	ldr	r3, [pc, #364]	; (800696c <HAL_RCC_OscConfig+0x240>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d0f0      	beq.n	80067ec <HAL_RCC_OscConfig+0xc0>
 800680a:	e014      	b.n	8006836 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800680c:	f7fc fbde 	bl	8002fcc <HAL_GetTick>
 8006810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006812:	e008      	b.n	8006826 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006814:	f7fc fbda 	bl	8002fcc <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	2b64      	cmp	r3, #100	; 0x64
 8006820:	d901      	bls.n	8006826 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e1f3      	b.n	8006c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006826:	4b51      	ldr	r3, [pc, #324]	; (800696c <HAL_RCC_OscConfig+0x240>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1f0      	bne.n	8006814 <HAL_RCC_OscConfig+0xe8>
 8006832:	e000      	b.n	8006836 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 0302 	and.w	r3, r3, #2
 800683e:	2b00      	cmp	r3, #0
 8006840:	d063      	beq.n	800690a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006842:	4b4a      	ldr	r3, [pc, #296]	; (800696c <HAL_RCC_OscConfig+0x240>)
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f003 030c 	and.w	r3, r3, #12
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00b      	beq.n	8006866 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800684e:	4b47      	ldr	r3, [pc, #284]	; (800696c <HAL_RCC_OscConfig+0x240>)
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006856:	2b08      	cmp	r3, #8
 8006858:	d11c      	bne.n	8006894 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800685a:	4b44      	ldr	r3, [pc, #272]	; (800696c <HAL_RCC_OscConfig+0x240>)
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006862:	2b00      	cmp	r3, #0
 8006864:	d116      	bne.n	8006894 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006866:	4b41      	ldr	r3, [pc, #260]	; (800696c <HAL_RCC_OscConfig+0x240>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0302 	and.w	r3, r3, #2
 800686e:	2b00      	cmp	r3, #0
 8006870:	d005      	beq.n	800687e <HAL_RCC_OscConfig+0x152>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	2b01      	cmp	r3, #1
 8006878:	d001      	beq.n	800687e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e1c7      	b.n	8006c0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800687e:	4b3b      	ldr	r3, [pc, #236]	; (800696c <HAL_RCC_OscConfig+0x240>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	00db      	lsls	r3, r3, #3
 800688c:	4937      	ldr	r1, [pc, #220]	; (800696c <HAL_RCC_OscConfig+0x240>)
 800688e:	4313      	orrs	r3, r2
 8006890:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006892:	e03a      	b.n	800690a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d020      	beq.n	80068de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800689c:	4b34      	ldr	r3, [pc, #208]	; (8006970 <HAL_RCC_OscConfig+0x244>)
 800689e:	2201      	movs	r2, #1
 80068a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068a2:	f7fc fb93 	bl	8002fcc <HAL_GetTick>
 80068a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068a8:	e008      	b.n	80068bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068aa:	f7fc fb8f 	bl	8002fcc <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d901      	bls.n	80068bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e1a8      	b.n	8006c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068bc:	4b2b      	ldr	r3, [pc, #172]	; (800696c <HAL_RCC_OscConfig+0x240>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0302 	and.w	r3, r3, #2
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d0f0      	beq.n	80068aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068c8:	4b28      	ldr	r3, [pc, #160]	; (800696c <HAL_RCC_OscConfig+0x240>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	00db      	lsls	r3, r3, #3
 80068d6:	4925      	ldr	r1, [pc, #148]	; (800696c <HAL_RCC_OscConfig+0x240>)
 80068d8:	4313      	orrs	r3, r2
 80068da:	600b      	str	r3, [r1, #0]
 80068dc:	e015      	b.n	800690a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068de:	4b24      	ldr	r3, [pc, #144]	; (8006970 <HAL_RCC_OscConfig+0x244>)
 80068e0:	2200      	movs	r2, #0
 80068e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068e4:	f7fc fb72 	bl	8002fcc <HAL_GetTick>
 80068e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068ea:	e008      	b.n	80068fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068ec:	f7fc fb6e 	bl	8002fcc <HAL_GetTick>
 80068f0:	4602      	mov	r2, r0
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d901      	bls.n	80068fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e187      	b.n	8006c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068fe:	4b1b      	ldr	r3, [pc, #108]	; (800696c <HAL_RCC_OscConfig+0x240>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0302 	and.w	r3, r3, #2
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1f0      	bne.n	80068ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 0308 	and.w	r3, r3, #8
 8006912:	2b00      	cmp	r3, #0
 8006914:	d036      	beq.n	8006984 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	695b      	ldr	r3, [r3, #20]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d016      	beq.n	800694c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800691e:	4b15      	ldr	r3, [pc, #84]	; (8006974 <HAL_RCC_OscConfig+0x248>)
 8006920:	2201      	movs	r2, #1
 8006922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006924:	f7fc fb52 	bl	8002fcc <HAL_GetTick>
 8006928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800692a:	e008      	b.n	800693e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800692c:	f7fc fb4e 	bl	8002fcc <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	2b02      	cmp	r3, #2
 8006938:	d901      	bls.n	800693e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e167      	b.n	8006c0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800693e:	4b0b      	ldr	r3, [pc, #44]	; (800696c <HAL_RCC_OscConfig+0x240>)
 8006940:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006942:	f003 0302 	and.w	r3, r3, #2
 8006946:	2b00      	cmp	r3, #0
 8006948:	d0f0      	beq.n	800692c <HAL_RCC_OscConfig+0x200>
 800694a:	e01b      	b.n	8006984 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800694c:	4b09      	ldr	r3, [pc, #36]	; (8006974 <HAL_RCC_OscConfig+0x248>)
 800694e:	2200      	movs	r2, #0
 8006950:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006952:	f7fc fb3b 	bl	8002fcc <HAL_GetTick>
 8006956:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006958:	e00e      	b.n	8006978 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800695a:	f7fc fb37 	bl	8002fcc <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	2b02      	cmp	r3, #2
 8006966:	d907      	bls.n	8006978 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e150      	b.n	8006c0e <HAL_RCC_OscConfig+0x4e2>
 800696c:	40023800 	.word	0x40023800
 8006970:	42470000 	.word	0x42470000
 8006974:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006978:	4b88      	ldr	r3, [pc, #544]	; (8006b9c <HAL_RCC_OscConfig+0x470>)
 800697a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800697c:	f003 0302 	and.w	r3, r3, #2
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1ea      	bne.n	800695a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0304 	and.w	r3, r3, #4
 800698c:	2b00      	cmp	r3, #0
 800698e:	f000 8097 	beq.w	8006ac0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006992:	2300      	movs	r3, #0
 8006994:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006996:	4b81      	ldr	r3, [pc, #516]	; (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10f      	bne.n	80069c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069a2:	2300      	movs	r3, #0
 80069a4:	60bb      	str	r3, [r7, #8]
 80069a6:	4b7d      	ldr	r3, [pc, #500]	; (8006b9c <HAL_RCC_OscConfig+0x470>)
 80069a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069aa:	4a7c      	ldr	r2, [pc, #496]	; (8006b9c <HAL_RCC_OscConfig+0x470>)
 80069ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069b0:	6413      	str	r3, [r2, #64]	; 0x40
 80069b2:	4b7a      	ldr	r3, [pc, #488]	; (8006b9c <HAL_RCC_OscConfig+0x470>)
 80069b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069ba:	60bb      	str	r3, [r7, #8]
 80069bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069be:	2301      	movs	r3, #1
 80069c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069c2:	4b77      	ldr	r3, [pc, #476]	; (8006ba0 <HAL_RCC_OscConfig+0x474>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d118      	bne.n	8006a00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069ce:	4b74      	ldr	r3, [pc, #464]	; (8006ba0 <HAL_RCC_OscConfig+0x474>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a73      	ldr	r2, [pc, #460]	; (8006ba0 <HAL_RCC_OscConfig+0x474>)
 80069d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069da:	f7fc faf7 	bl	8002fcc <HAL_GetTick>
 80069de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069e0:	e008      	b.n	80069f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069e2:	f7fc faf3 	bl	8002fcc <HAL_GetTick>
 80069e6:	4602      	mov	r2, r0
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	d901      	bls.n	80069f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e10c      	b.n	8006c0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069f4:	4b6a      	ldr	r3, [pc, #424]	; (8006ba0 <HAL_RCC_OscConfig+0x474>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d0f0      	beq.n	80069e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d106      	bne.n	8006a16 <HAL_RCC_OscConfig+0x2ea>
 8006a08:	4b64      	ldr	r3, [pc, #400]	; (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a0c:	4a63      	ldr	r2, [pc, #396]	; (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006a0e:	f043 0301 	orr.w	r3, r3, #1
 8006a12:	6713      	str	r3, [r2, #112]	; 0x70
 8006a14:	e01c      	b.n	8006a50 <HAL_RCC_OscConfig+0x324>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	2b05      	cmp	r3, #5
 8006a1c:	d10c      	bne.n	8006a38 <HAL_RCC_OscConfig+0x30c>
 8006a1e:	4b5f      	ldr	r3, [pc, #380]	; (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a22:	4a5e      	ldr	r2, [pc, #376]	; (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006a24:	f043 0304 	orr.w	r3, r3, #4
 8006a28:	6713      	str	r3, [r2, #112]	; 0x70
 8006a2a:	4b5c      	ldr	r3, [pc, #368]	; (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a2e:	4a5b      	ldr	r2, [pc, #364]	; (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006a30:	f043 0301 	orr.w	r3, r3, #1
 8006a34:	6713      	str	r3, [r2, #112]	; 0x70
 8006a36:	e00b      	b.n	8006a50 <HAL_RCC_OscConfig+0x324>
 8006a38:	4b58      	ldr	r3, [pc, #352]	; (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a3c:	4a57      	ldr	r2, [pc, #348]	; (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006a3e:	f023 0301 	bic.w	r3, r3, #1
 8006a42:	6713      	str	r3, [r2, #112]	; 0x70
 8006a44:	4b55      	ldr	r3, [pc, #340]	; (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a48:	4a54      	ldr	r2, [pc, #336]	; (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006a4a:	f023 0304 	bic.w	r3, r3, #4
 8006a4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d015      	beq.n	8006a84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a58:	f7fc fab8 	bl	8002fcc <HAL_GetTick>
 8006a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a5e:	e00a      	b.n	8006a76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a60:	f7fc fab4 	bl	8002fcc <HAL_GetTick>
 8006a64:	4602      	mov	r2, r0
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d901      	bls.n	8006a76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e0cb      	b.n	8006c0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a76:	4b49      	ldr	r3, [pc, #292]	; (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a7a:	f003 0302 	and.w	r3, r3, #2
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d0ee      	beq.n	8006a60 <HAL_RCC_OscConfig+0x334>
 8006a82:	e014      	b.n	8006aae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a84:	f7fc faa2 	bl	8002fcc <HAL_GetTick>
 8006a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a8a:	e00a      	b.n	8006aa2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a8c:	f7fc fa9e 	bl	8002fcc <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d901      	bls.n	8006aa2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e0b5      	b.n	8006c0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006aa2:	4b3e      	ldr	r3, [pc, #248]	; (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aa6:	f003 0302 	and.w	r3, r3, #2
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1ee      	bne.n	8006a8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006aae:	7dfb      	ldrb	r3, [r7, #23]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d105      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ab4:	4b39      	ldr	r3, [pc, #228]	; (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab8:	4a38      	ldr	r2, [pc, #224]	; (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006aba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006abe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f000 80a1 	beq.w	8006c0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006aca:	4b34      	ldr	r3, [pc, #208]	; (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	f003 030c 	and.w	r3, r3, #12
 8006ad2:	2b08      	cmp	r3, #8
 8006ad4:	d05c      	beq.n	8006b90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d141      	bne.n	8006b62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ade:	4b31      	ldr	r3, [pc, #196]	; (8006ba4 <HAL_RCC_OscConfig+0x478>)
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ae4:	f7fc fa72 	bl	8002fcc <HAL_GetTick>
 8006ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aea:	e008      	b.n	8006afe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006aec:	f7fc fa6e 	bl	8002fcc <HAL_GetTick>
 8006af0:	4602      	mov	r2, r0
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	1ad3      	subs	r3, r2, r3
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d901      	bls.n	8006afe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e087      	b.n	8006c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006afe:	4b27      	ldr	r3, [pc, #156]	; (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d1f0      	bne.n	8006aec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	69da      	ldr	r2, [r3, #28]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a1b      	ldr	r3, [r3, #32]
 8006b12:	431a      	orrs	r2, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b18:	019b      	lsls	r3, r3, #6
 8006b1a:	431a      	orrs	r2, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b20:	085b      	lsrs	r3, r3, #1
 8006b22:	3b01      	subs	r3, #1
 8006b24:	041b      	lsls	r3, r3, #16
 8006b26:	431a      	orrs	r2, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2c:	061b      	lsls	r3, r3, #24
 8006b2e:	491b      	ldr	r1, [pc, #108]	; (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006b30:	4313      	orrs	r3, r2
 8006b32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b34:	4b1b      	ldr	r3, [pc, #108]	; (8006ba4 <HAL_RCC_OscConfig+0x478>)
 8006b36:	2201      	movs	r2, #1
 8006b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b3a:	f7fc fa47 	bl	8002fcc <HAL_GetTick>
 8006b3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b40:	e008      	b.n	8006b54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b42:	f7fc fa43 	bl	8002fcc <HAL_GetTick>
 8006b46:	4602      	mov	r2, r0
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d901      	bls.n	8006b54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e05c      	b.n	8006c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b54:	4b11      	ldr	r3, [pc, #68]	; (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d0f0      	beq.n	8006b42 <HAL_RCC_OscConfig+0x416>
 8006b60:	e054      	b.n	8006c0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b62:	4b10      	ldr	r3, [pc, #64]	; (8006ba4 <HAL_RCC_OscConfig+0x478>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b68:	f7fc fa30 	bl	8002fcc <HAL_GetTick>
 8006b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b6e:	e008      	b.n	8006b82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b70:	f7fc fa2c 	bl	8002fcc <HAL_GetTick>
 8006b74:	4602      	mov	r2, r0
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d901      	bls.n	8006b82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e045      	b.n	8006c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b82:	4b06      	ldr	r3, [pc, #24]	; (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1f0      	bne.n	8006b70 <HAL_RCC_OscConfig+0x444>
 8006b8e:	e03d      	b.n	8006c0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	699b      	ldr	r3, [r3, #24]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d107      	bne.n	8006ba8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e038      	b.n	8006c0e <HAL_RCC_OscConfig+0x4e2>
 8006b9c:	40023800 	.word	0x40023800
 8006ba0:	40007000 	.word	0x40007000
 8006ba4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ba8:	4b1b      	ldr	r3, [pc, #108]	; (8006c18 <HAL_RCC_OscConfig+0x4ec>)
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d028      	beq.n	8006c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d121      	bne.n	8006c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d11a      	bne.n	8006c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006bd8:	4013      	ands	r3, r2
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006bde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d111      	bne.n	8006c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bee:	085b      	lsrs	r3, r3, #1
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d107      	bne.n	8006c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d001      	beq.n	8006c0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e000      	b.n	8006c0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3718      	adds	r7, #24
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	40023800 	.word	0x40023800

08006c1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d101      	bne.n	8006c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e0cc      	b.n	8006dca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c30:	4b68      	ldr	r3, [pc, #416]	; (8006dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 030f 	and.w	r3, r3, #15
 8006c38:	683a      	ldr	r2, [r7, #0]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d90c      	bls.n	8006c58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c3e:	4b65      	ldr	r3, [pc, #404]	; (8006dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8006c40:	683a      	ldr	r2, [r7, #0]
 8006c42:	b2d2      	uxtb	r2, r2
 8006c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c46:	4b63      	ldr	r3, [pc, #396]	; (8006dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 030f 	and.w	r3, r3, #15
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d001      	beq.n	8006c58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e0b8      	b.n	8006dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 0302 	and.w	r3, r3, #2
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d020      	beq.n	8006ca6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 0304 	and.w	r3, r3, #4
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d005      	beq.n	8006c7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c70:	4b59      	ldr	r3, [pc, #356]	; (8006dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	4a58      	ldr	r2, [pc, #352]	; (8006dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 0308 	and.w	r3, r3, #8
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d005      	beq.n	8006c94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c88:	4b53      	ldr	r3, [pc, #332]	; (8006dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	4a52      	ldr	r2, [pc, #328]	; (8006dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c94:	4b50      	ldr	r3, [pc, #320]	; (8006dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	494d      	ldr	r1, [pc, #308]	; (8006dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 0301 	and.w	r3, r3, #1
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d044      	beq.n	8006d3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d107      	bne.n	8006cca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cba:	4b47      	ldr	r3, [pc, #284]	; (8006dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d119      	bne.n	8006cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e07f      	b.n	8006dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d003      	beq.n	8006cda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cd6:	2b03      	cmp	r3, #3
 8006cd8:	d107      	bne.n	8006cea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cda:	4b3f      	ldr	r3, [pc, #252]	; (8006dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d109      	bne.n	8006cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e06f      	b.n	8006dca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cea:	4b3b      	ldr	r3, [pc, #236]	; (8006dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0302 	and.w	r3, r3, #2
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d101      	bne.n	8006cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e067      	b.n	8006dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006cfa:	4b37      	ldr	r3, [pc, #220]	; (8006dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f023 0203 	bic.w	r2, r3, #3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	4934      	ldr	r1, [pc, #208]	; (8006dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d0c:	f7fc f95e 	bl	8002fcc <HAL_GetTick>
 8006d10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d12:	e00a      	b.n	8006d2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d14:	f7fc f95a 	bl	8002fcc <HAL_GetTick>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d901      	bls.n	8006d2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d26:	2303      	movs	r3, #3
 8006d28:	e04f      	b.n	8006dca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d2a:	4b2b      	ldr	r3, [pc, #172]	; (8006dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f003 020c 	and.w	r2, r3, #12
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d1eb      	bne.n	8006d14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d3c:	4b25      	ldr	r3, [pc, #148]	; (8006dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 030f 	and.w	r3, r3, #15
 8006d44:	683a      	ldr	r2, [r7, #0]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d20c      	bcs.n	8006d64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d4a:	4b22      	ldr	r3, [pc, #136]	; (8006dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8006d4c:	683a      	ldr	r2, [r7, #0]
 8006d4e:	b2d2      	uxtb	r2, r2
 8006d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d52:	4b20      	ldr	r3, [pc, #128]	; (8006dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 030f 	and.w	r3, r3, #15
 8006d5a:	683a      	ldr	r2, [r7, #0]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d001      	beq.n	8006d64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	e032      	b.n	8006dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0304 	and.w	r3, r3, #4
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d008      	beq.n	8006d82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d70:	4b19      	ldr	r3, [pc, #100]	; (8006dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	4916      	ldr	r1, [pc, #88]	; (8006dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 0308 	and.w	r3, r3, #8
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d009      	beq.n	8006da2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d8e:	4b12      	ldr	r3, [pc, #72]	; (8006dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	00db      	lsls	r3, r3, #3
 8006d9c:	490e      	ldr	r1, [pc, #56]	; (8006dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006da2:	f000 f821 	bl	8006de8 <HAL_RCC_GetSysClockFreq>
 8006da6:	4602      	mov	r2, r0
 8006da8:	4b0b      	ldr	r3, [pc, #44]	; (8006dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	091b      	lsrs	r3, r3, #4
 8006dae:	f003 030f 	and.w	r3, r3, #15
 8006db2:	490a      	ldr	r1, [pc, #40]	; (8006ddc <HAL_RCC_ClockConfig+0x1c0>)
 8006db4:	5ccb      	ldrb	r3, [r1, r3]
 8006db6:	fa22 f303 	lsr.w	r3, r2, r3
 8006dba:	4a09      	ldr	r2, [pc, #36]	; (8006de0 <HAL_RCC_ClockConfig+0x1c4>)
 8006dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006dbe:	4b09      	ldr	r3, [pc, #36]	; (8006de4 <HAL_RCC_ClockConfig+0x1c8>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7fb fe1a 	bl	80029fc <HAL_InitTick>

  return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	40023c00 	.word	0x40023c00
 8006dd8:	40023800 	.word	0x40023800
 8006ddc:	08046bbc 	.word	0x08046bbc
 8006de0:	20000000 	.word	0x20000000
 8006de4:	20000004 	.word	0x20000004

08006de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006dec:	b090      	sub	sp, #64	; 0x40
 8006dee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006df0:	2300      	movs	r3, #0
 8006df2:	637b      	str	r3, [r7, #52]	; 0x34
 8006df4:	2300      	movs	r3, #0
 8006df6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006df8:	2300      	movs	r3, #0
 8006dfa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e00:	4b59      	ldr	r3, [pc, #356]	; (8006f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	f003 030c 	and.w	r3, r3, #12
 8006e08:	2b08      	cmp	r3, #8
 8006e0a:	d00d      	beq.n	8006e28 <HAL_RCC_GetSysClockFreq+0x40>
 8006e0c:	2b08      	cmp	r3, #8
 8006e0e:	f200 80a1 	bhi.w	8006f54 <HAL_RCC_GetSysClockFreq+0x16c>
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d002      	beq.n	8006e1c <HAL_RCC_GetSysClockFreq+0x34>
 8006e16:	2b04      	cmp	r3, #4
 8006e18:	d003      	beq.n	8006e22 <HAL_RCC_GetSysClockFreq+0x3a>
 8006e1a:	e09b      	b.n	8006f54 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e1c:	4b53      	ldr	r3, [pc, #332]	; (8006f6c <HAL_RCC_GetSysClockFreq+0x184>)
 8006e1e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006e20:	e09b      	b.n	8006f5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e22:	4b53      	ldr	r3, [pc, #332]	; (8006f70 <HAL_RCC_GetSysClockFreq+0x188>)
 8006e24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006e26:	e098      	b.n	8006f5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e28:	4b4f      	ldr	r3, [pc, #316]	; (8006f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e30:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e32:	4b4d      	ldr	r3, [pc, #308]	; (8006f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d028      	beq.n	8006e90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e3e:	4b4a      	ldr	r3, [pc, #296]	; (8006f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	099b      	lsrs	r3, r3, #6
 8006e44:	2200      	movs	r2, #0
 8006e46:	623b      	str	r3, [r7, #32]
 8006e48:	627a      	str	r2, [r7, #36]	; 0x24
 8006e4a:	6a3b      	ldr	r3, [r7, #32]
 8006e4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006e50:	2100      	movs	r1, #0
 8006e52:	4b47      	ldr	r3, [pc, #284]	; (8006f70 <HAL_RCC_GetSysClockFreq+0x188>)
 8006e54:	fb03 f201 	mul.w	r2, r3, r1
 8006e58:	2300      	movs	r3, #0
 8006e5a:	fb00 f303 	mul.w	r3, r0, r3
 8006e5e:	4413      	add	r3, r2
 8006e60:	4a43      	ldr	r2, [pc, #268]	; (8006f70 <HAL_RCC_GetSysClockFreq+0x188>)
 8006e62:	fba0 1202 	umull	r1, r2, r0, r2
 8006e66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e68:	460a      	mov	r2, r1
 8006e6a:	62ba      	str	r2, [r7, #40]	; 0x28
 8006e6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e6e:	4413      	add	r3, r2
 8006e70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e74:	2200      	movs	r2, #0
 8006e76:	61bb      	str	r3, [r7, #24]
 8006e78:	61fa      	str	r2, [r7, #28]
 8006e7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006e82:	f7f9 fef1 	bl	8000c68 <__aeabi_uldivmod>
 8006e86:	4602      	mov	r2, r0
 8006e88:	460b      	mov	r3, r1
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e8e:	e053      	b.n	8006f38 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e90:	4b35      	ldr	r3, [pc, #212]	; (8006f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	099b      	lsrs	r3, r3, #6
 8006e96:	2200      	movs	r2, #0
 8006e98:	613b      	str	r3, [r7, #16]
 8006e9a:	617a      	str	r2, [r7, #20]
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006ea2:	f04f 0b00 	mov.w	fp, #0
 8006ea6:	4652      	mov	r2, sl
 8006ea8:	465b      	mov	r3, fp
 8006eaa:	f04f 0000 	mov.w	r0, #0
 8006eae:	f04f 0100 	mov.w	r1, #0
 8006eb2:	0159      	lsls	r1, r3, #5
 8006eb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006eb8:	0150      	lsls	r0, r2, #5
 8006eba:	4602      	mov	r2, r0
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	ebb2 080a 	subs.w	r8, r2, sl
 8006ec2:	eb63 090b 	sbc.w	r9, r3, fp
 8006ec6:	f04f 0200 	mov.w	r2, #0
 8006eca:	f04f 0300 	mov.w	r3, #0
 8006ece:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006ed2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006ed6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006eda:	ebb2 0408 	subs.w	r4, r2, r8
 8006ede:	eb63 0509 	sbc.w	r5, r3, r9
 8006ee2:	f04f 0200 	mov.w	r2, #0
 8006ee6:	f04f 0300 	mov.w	r3, #0
 8006eea:	00eb      	lsls	r3, r5, #3
 8006eec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ef0:	00e2      	lsls	r2, r4, #3
 8006ef2:	4614      	mov	r4, r2
 8006ef4:	461d      	mov	r5, r3
 8006ef6:	eb14 030a 	adds.w	r3, r4, sl
 8006efa:	603b      	str	r3, [r7, #0]
 8006efc:	eb45 030b 	adc.w	r3, r5, fp
 8006f00:	607b      	str	r3, [r7, #4]
 8006f02:	f04f 0200 	mov.w	r2, #0
 8006f06:	f04f 0300 	mov.w	r3, #0
 8006f0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006f0e:	4629      	mov	r1, r5
 8006f10:	028b      	lsls	r3, r1, #10
 8006f12:	4621      	mov	r1, r4
 8006f14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f18:	4621      	mov	r1, r4
 8006f1a:	028a      	lsls	r2, r1, #10
 8006f1c:	4610      	mov	r0, r2
 8006f1e:	4619      	mov	r1, r3
 8006f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f22:	2200      	movs	r2, #0
 8006f24:	60bb      	str	r3, [r7, #8]
 8006f26:	60fa      	str	r2, [r7, #12]
 8006f28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f2c:	f7f9 fe9c 	bl	8000c68 <__aeabi_uldivmod>
 8006f30:	4602      	mov	r2, r0
 8006f32:	460b      	mov	r3, r1
 8006f34:	4613      	mov	r3, r2
 8006f36:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f38:	4b0b      	ldr	r3, [pc, #44]	; (8006f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	0c1b      	lsrs	r3, r3, #16
 8006f3e:	f003 0303 	and.w	r3, r3, #3
 8006f42:	3301      	adds	r3, #1
 8006f44:	005b      	lsls	r3, r3, #1
 8006f46:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006f48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f50:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006f52:	e002      	b.n	8006f5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f54:	4b05      	ldr	r3, [pc, #20]	; (8006f6c <HAL_RCC_GetSysClockFreq+0x184>)
 8006f56:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006f58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3740      	adds	r7, #64	; 0x40
 8006f60:	46bd      	mov	sp, r7
 8006f62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f66:	bf00      	nop
 8006f68:	40023800 	.word	0x40023800
 8006f6c:	00f42400 	.word	0x00f42400
 8006f70:	017d7840 	.word	0x017d7840

08006f74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f74:	b480      	push	{r7}
 8006f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f78:	4b03      	ldr	r3, [pc, #12]	; (8006f88 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	20000000 	.word	0x20000000

08006f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006f90:	f7ff fff0 	bl	8006f74 <HAL_RCC_GetHCLKFreq>
 8006f94:	4602      	mov	r2, r0
 8006f96:	4b05      	ldr	r3, [pc, #20]	; (8006fac <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	0a9b      	lsrs	r3, r3, #10
 8006f9c:	f003 0307 	and.w	r3, r3, #7
 8006fa0:	4903      	ldr	r1, [pc, #12]	; (8006fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006fa2:	5ccb      	ldrb	r3, [r1, r3]
 8006fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	40023800 	.word	0x40023800
 8006fb0:	08046bcc 	.word	0x08046bcc

08006fb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006fb8:	f7ff ffdc 	bl	8006f74 <HAL_RCC_GetHCLKFreq>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	4b05      	ldr	r3, [pc, #20]	; (8006fd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	0b5b      	lsrs	r3, r3, #13
 8006fc4:	f003 0307 	and.w	r3, r3, #7
 8006fc8:	4903      	ldr	r1, [pc, #12]	; (8006fd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fca:	5ccb      	ldrb	r3, [r1, r3]
 8006fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	40023800 	.word	0x40023800
 8006fd8:	08046bcc 	.word	0x08046bcc

08006fdc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	220f      	movs	r2, #15
 8006fea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006fec:	4b12      	ldr	r3, [pc, #72]	; (8007038 <HAL_RCC_GetClockConfig+0x5c>)
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	f003 0203 	and.w	r2, r3, #3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006ff8:	4b0f      	ldr	r3, [pc, #60]	; (8007038 <HAL_RCC_GetClockConfig+0x5c>)
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007004:	4b0c      	ldr	r3, [pc, #48]	; (8007038 <HAL_RCC_GetClockConfig+0x5c>)
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007010:	4b09      	ldr	r3, [pc, #36]	; (8007038 <HAL_RCC_GetClockConfig+0x5c>)
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	08db      	lsrs	r3, r3, #3
 8007016:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800701e:	4b07      	ldr	r3, [pc, #28]	; (800703c <HAL_RCC_GetClockConfig+0x60>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 020f 	and.w	r2, r3, #15
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	601a      	str	r2, [r3, #0]
}
 800702a:	bf00      	nop
 800702c:	370c      	adds	r7, #12
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	40023800 	.word	0x40023800
 800703c:	40023c00 	.word	0x40023c00

08007040 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b086      	sub	sp, #24
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007048:	2300      	movs	r3, #0
 800704a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800704c:	2300      	movs	r3, #0
 800704e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0301 	and.w	r3, r3, #1
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10b      	bne.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007064:	2b00      	cmp	r3, #0
 8007066:	d105      	bne.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007070:	2b00      	cmp	r3, #0
 8007072:	d075      	beq.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007074:	4b91      	ldr	r3, [pc, #580]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007076:	2200      	movs	r2, #0
 8007078:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800707a:	f7fb ffa7 	bl	8002fcc <HAL_GetTick>
 800707e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007080:	e008      	b.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007082:	f7fb ffa3 	bl	8002fcc <HAL_GetTick>
 8007086:	4602      	mov	r2, r0
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	2b02      	cmp	r3, #2
 800708e:	d901      	bls.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e189      	b.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007094:	4b8a      	ldr	r3, [pc, #552]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1f0      	bne.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0301 	and.w	r3, r3, #1
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d009      	beq.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	019a      	lsls	r2, r3, #6
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	071b      	lsls	r3, r3, #28
 80070b8:	4981      	ldr	r1, [pc, #516]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070ba:	4313      	orrs	r3, r2
 80070bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0302 	and.w	r3, r3, #2
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d01f      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80070cc:	4b7c      	ldr	r3, [pc, #496]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070d2:	0f1b      	lsrs	r3, r3, #28
 80070d4:	f003 0307 	and.w	r3, r3, #7
 80070d8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	019a      	lsls	r2, r3, #6
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	061b      	lsls	r3, r3, #24
 80070e6:	431a      	orrs	r2, r3
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	071b      	lsls	r3, r3, #28
 80070ec:	4974      	ldr	r1, [pc, #464]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070ee:	4313      	orrs	r3, r2
 80070f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80070f4:	4b72      	ldr	r3, [pc, #456]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070fa:	f023 021f 	bic.w	r2, r3, #31
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	69db      	ldr	r3, [r3, #28]
 8007102:	3b01      	subs	r3, #1
 8007104:	496e      	ldr	r1, [pc, #440]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007106:	4313      	orrs	r3, r2
 8007108:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00d      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	019a      	lsls	r2, r3, #6
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	061b      	lsls	r3, r3, #24
 8007124:	431a      	orrs	r2, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	071b      	lsls	r3, r3, #28
 800712c:	4964      	ldr	r1, [pc, #400]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800712e:	4313      	orrs	r3, r2
 8007130:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007134:	4b61      	ldr	r3, [pc, #388]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007136:	2201      	movs	r2, #1
 8007138:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800713a:	f7fb ff47 	bl	8002fcc <HAL_GetTick>
 800713e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007140:	e008      	b.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007142:	f7fb ff43 	bl	8002fcc <HAL_GetTick>
 8007146:	4602      	mov	r2, r0
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	2b02      	cmp	r3, #2
 800714e:	d901      	bls.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e129      	b.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007154:	4b5a      	ldr	r3, [pc, #360]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d0f0      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0304 	and.w	r3, r3, #4
 8007168:	2b00      	cmp	r3, #0
 800716a:	d105      	bne.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007174:	2b00      	cmp	r3, #0
 8007176:	d079      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007178:	4b52      	ldr	r3, [pc, #328]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800717a:	2200      	movs	r2, #0
 800717c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800717e:	f7fb ff25 	bl	8002fcc <HAL_GetTick>
 8007182:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007184:	e008      	b.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007186:	f7fb ff21 	bl	8002fcc <HAL_GetTick>
 800718a:	4602      	mov	r2, r0
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	2b02      	cmp	r3, #2
 8007192:	d901      	bls.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007194:	2303      	movs	r3, #3
 8007196:	e107      	b.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007198:	4b49      	ldr	r3, [pc, #292]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071a4:	d0ef      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0304 	and.w	r3, r3, #4
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d020      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80071b2:	4b43      	ldr	r3, [pc, #268]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071b8:	0f1b      	lsrs	r3, r3, #28
 80071ba:	f003 0307 	and.w	r3, r3, #7
 80071be:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	691b      	ldr	r3, [r3, #16]
 80071c4:	019a      	lsls	r2, r3, #6
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	061b      	lsls	r3, r3, #24
 80071cc:	431a      	orrs	r2, r3
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	071b      	lsls	r3, r3, #28
 80071d2:	493b      	ldr	r1, [pc, #236]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071d4:	4313      	orrs	r3, r2
 80071d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80071da:	4b39      	ldr	r3, [pc, #228]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6a1b      	ldr	r3, [r3, #32]
 80071e8:	3b01      	subs	r3, #1
 80071ea:	021b      	lsls	r3, r3, #8
 80071ec:	4934      	ldr	r1, [pc, #208]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071ee:	4313      	orrs	r3, r2
 80071f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 0308 	and.w	r3, r3, #8
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d01e      	beq.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007200:	4b2f      	ldr	r3, [pc, #188]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007206:	0e1b      	lsrs	r3, r3, #24
 8007208:	f003 030f 	and.w	r3, r3, #15
 800720c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	019a      	lsls	r2, r3, #6
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	061b      	lsls	r3, r3, #24
 8007218:	431a      	orrs	r2, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	071b      	lsls	r3, r3, #28
 8007220:	4927      	ldr	r1, [pc, #156]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007222:	4313      	orrs	r3, r2
 8007224:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007228:	4b25      	ldr	r3, [pc, #148]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800722a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800722e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007236:	4922      	ldr	r1, [pc, #136]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007238:	4313      	orrs	r3, r2
 800723a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800723e:	4b21      	ldr	r3, [pc, #132]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007240:	2201      	movs	r2, #1
 8007242:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007244:	f7fb fec2 	bl	8002fcc <HAL_GetTick>
 8007248:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800724a:	e008      	b.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800724c:	f7fb febe 	bl	8002fcc <HAL_GetTick>
 8007250:	4602      	mov	r2, r0
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	2b02      	cmp	r3, #2
 8007258:	d901      	bls.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800725a:	2303      	movs	r3, #3
 800725c:	e0a4      	b.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800725e:	4b18      	ldr	r3, [pc, #96]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007266:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800726a:	d1ef      	bne.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 0320 	and.w	r3, r3, #32
 8007274:	2b00      	cmp	r3, #0
 8007276:	f000 808b 	beq.w	8007390 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800727a:	2300      	movs	r3, #0
 800727c:	60fb      	str	r3, [r7, #12]
 800727e:	4b10      	ldr	r3, [pc, #64]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007282:	4a0f      	ldr	r2, [pc, #60]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007288:	6413      	str	r3, [r2, #64]	; 0x40
 800728a:	4b0d      	ldr	r3, [pc, #52]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800728c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007292:	60fb      	str	r3, [r7, #12]
 8007294:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007296:	4b0c      	ldr	r3, [pc, #48]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a0b      	ldr	r2, [pc, #44]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800729c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072a0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80072a2:	f7fb fe93 	bl	8002fcc <HAL_GetTick>
 80072a6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80072a8:	e010      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80072aa:	f7fb fe8f 	bl	8002fcc <HAL_GetTick>
 80072ae:	4602      	mov	r2, r0
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d909      	bls.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e075      	b.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80072bc:	42470068 	.word	0x42470068
 80072c0:	40023800 	.word	0x40023800
 80072c4:	42470070 	.word	0x42470070
 80072c8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80072cc:	4b38      	ldr	r3, [pc, #224]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d0e8      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80072d8:	4b36      	ldr	r3, [pc, #216]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072e0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d02f      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072f0:	693a      	ldr	r2, [r7, #16]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d028      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072f6:	4b2f      	ldr	r3, [pc, #188]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072fe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007300:	4b2d      	ldr	r3, [pc, #180]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007302:	2201      	movs	r2, #1
 8007304:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007306:	4b2c      	ldr	r3, [pc, #176]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007308:	2200      	movs	r2, #0
 800730a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800730c:	4a29      	ldr	r2, [pc, #164]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007312:	4b28      	ldr	r3, [pc, #160]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007316:	f003 0301 	and.w	r3, r3, #1
 800731a:	2b01      	cmp	r3, #1
 800731c:	d114      	bne.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800731e:	f7fb fe55 	bl	8002fcc <HAL_GetTick>
 8007322:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007324:	e00a      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007326:	f7fb fe51 	bl	8002fcc <HAL_GetTick>
 800732a:	4602      	mov	r2, r0
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	1ad3      	subs	r3, r2, r3
 8007330:	f241 3288 	movw	r2, #5000	; 0x1388
 8007334:	4293      	cmp	r3, r2
 8007336:	d901      	bls.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007338:	2303      	movs	r3, #3
 800733a:	e035      	b.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800733c:	4b1d      	ldr	r3, [pc, #116]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800733e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007340:	f003 0302 	and.w	r3, r3, #2
 8007344:	2b00      	cmp	r3, #0
 8007346:	d0ee      	beq.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800734c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007350:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007354:	d10d      	bne.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007356:	4b17      	ldr	r3, [pc, #92]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007362:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800736a:	4912      	ldr	r1, [pc, #72]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800736c:	4313      	orrs	r3, r2
 800736e:	608b      	str	r3, [r1, #8]
 8007370:	e005      	b.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8007372:	4b10      	ldr	r3, [pc, #64]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	4a0f      	ldr	r2, [pc, #60]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007378:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800737c:	6093      	str	r3, [r2, #8]
 800737e:	4b0d      	ldr	r3, [pc, #52]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007380:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007386:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800738a:	490a      	ldr	r1, [pc, #40]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800738c:	4313      	orrs	r3, r2
 800738e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0310 	and.w	r3, r3, #16
 8007398:	2b00      	cmp	r3, #0
 800739a:	d004      	beq.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80073a2:	4b06      	ldr	r3, [pc, #24]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80073a4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3718      	adds	r7, #24
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	40007000 	.word	0x40007000
 80073b4:	40023800 	.word	0x40023800
 80073b8:	42470e40 	.word	0x42470e40
 80073bc:	424711e0 	.word	0x424711e0

080073c0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d101      	bne.n	80073d2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e01c      	b.n	800740c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	795b      	ldrb	r3, [r3, #5]
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d105      	bne.n	80073e8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f7fb f9ac 	bl	8002740 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2202      	movs	r2, #2
 80073ec:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f042 0204 	orr.w	r2, r2, #4
 80073fc:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2201      	movs	r2, #1
 8007402:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	3708      	adds	r7, #8
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d101      	bne.n	8007426 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e022      	b.n	800746c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800742c:	b2db      	uxtb	r3, r3
 800742e:	2b00      	cmp	r3, #0
 8007430:	d105      	bne.n	800743e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f7fb f9c3 	bl	80027c4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2203      	movs	r2, #3
 8007442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f814 	bl	8007474 <HAL_SD_InitCard>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d001      	beq.n	8007456 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e00a      	b.n	800746c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3708      	adds	r7, #8
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007474:	b5b0      	push	{r4, r5, r7, lr}
 8007476:	b08e      	sub	sp, #56	; 0x38
 8007478:	af04      	add	r7, sp, #16
 800747a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800747c:	2300      	movs	r3, #0
 800747e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007480:	2300      	movs	r3, #0
 8007482:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007484:	2300      	movs	r3, #0
 8007486:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007488:	2300      	movs	r3, #0
 800748a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800748c:	2300      	movs	r3, #0
 800748e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007490:	2376      	movs	r3, #118	; 0x76
 8007492:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681d      	ldr	r5, [r3, #0]
 8007498:	466c      	mov	r4, sp
 800749a:	f107 0314 	add.w	r3, r7, #20
 800749e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80074a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80074a6:	f107 0308 	add.w	r3, r7, #8
 80074aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80074ac:	4628      	mov	r0, r5
 80074ae:	f002 fbdc 	bl	8009c6a <SDIO_Init>
 80074b2:	4603      	mov	r3, r0
 80074b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80074b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d001      	beq.n	80074c4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e04c      	b.n	800755e <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80074c4:	4b28      	ldr	r3, [pc, #160]	; (8007568 <HAL_SD_InitCard+0xf4>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4618      	mov	r0, r3
 80074d0:	f002 fc14 	bl	8009cfc <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80074d4:	4b24      	ldr	r3, [pc, #144]	; (8007568 <HAL_SD_InitCard+0xf4>)
 80074d6:	2201      	movs	r2, #1
 80074d8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f001 f85e 	bl	800859c <SD_PowerON>
 80074e0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80074e2:	6a3b      	ldr	r3, [r7, #32]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00b      	beq.n	8007500 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074f4:	6a3b      	ldr	r3, [r7, #32]
 80074f6:	431a      	orrs	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e02e      	b.n	800755e <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 ff7d 	bl	8008400 <SD_InitCard>
 8007506:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007508:	6a3b      	ldr	r3, [r7, #32]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00b      	beq.n	8007526 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2201      	movs	r2, #1
 8007512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800751a:	6a3b      	ldr	r3, [r7, #32]
 800751c:	431a      	orrs	r2, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e01b      	b.n	800755e <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800752e:	4618      	mov	r0, r3
 8007530:	f002 fc77 	bl	8009e22 <SDMMC_CmdBlockLength>
 8007534:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007536:	6a3b      	ldr	r3, [r7, #32]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00f      	beq.n	800755c <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a0a      	ldr	r2, [pc, #40]	; (800756c <HAL_SD_InitCard+0xf8>)
 8007542:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007548:	6a3b      	ldr	r3, [r7, #32]
 800754a:	431a      	orrs	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e000      	b.n	800755e <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3728      	adds	r7, #40	; 0x28
 8007562:	46bd      	mov	sp, r7
 8007564:	bdb0      	pop	{r4, r5, r7, pc}
 8007566:	bf00      	nop
 8007568:	422580a0 	.word	0x422580a0
 800756c:	004005ff 	.word	0x004005ff

08007570 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b08c      	sub	sp, #48	; 0x30
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	607a      	str	r2, [r7, #4]
 800757c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d107      	bne.n	8007598 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	e0c0      	b.n	800771a <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	f040 80b9 	bne.w	8007718 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80075ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	441a      	add	r2, r3
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d907      	bls.n	80075ca <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075be:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e0a7      	b.n	800771a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2203      	movs	r2, #3
 80075ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2200      	movs	r2, #0
 80075d8:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	6812      	ldr	r2, [r2, #0]
 80075e4:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80075e8:	f043 0302 	orr.w	r3, r3, #2
 80075ec:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f2:	4a4c      	ldr	r2, [pc, #304]	; (8007724 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80075f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fa:	4a4b      	ldr	r2, [pc, #300]	; (8007728 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80075fc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007602:	2200      	movs	r2, #0
 8007604:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760a:	2200      	movs	r2, #0
 800760c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761e:	689a      	ldr	r2, [r3, #8]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	430a      	orrs	r2, r1
 8007628:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	3380      	adds	r3, #128	; 0x80
 8007634:	4619      	mov	r1, r3
 8007636:	68ba      	ldr	r2, [r7, #8]
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	025b      	lsls	r3, r3, #9
 800763c:	089b      	lsrs	r3, r3, #2
 800763e:	f7fc fab1 	bl	8003ba4 <HAL_DMA_Start_IT>
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	d017      	beq.n	8007678 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8007656:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a33      	ldr	r2, [pc, #204]	; (800772c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800765e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007664:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	e050      	b.n	800771a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007678:	4b2d      	ldr	r3, [pc, #180]	; (8007730 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800767a:	2201      	movs	r2, #1
 800767c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007682:	2b01      	cmp	r3, #1
 8007684:	d002      	beq.n	800768c <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8007686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007688:	025b      	lsls	r3, r3, #9
 800768a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800768c:	f04f 33ff 	mov.w	r3, #4294967295
 8007690:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	025b      	lsls	r3, r3, #9
 8007696:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007698:	2390      	movs	r3, #144	; 0x90
 800769a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800769c:	2302      	movs	r3, #2
 800769e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80076a0:	2300      	movs	r3, #0
 80076a2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80076a4:	2301      	movs	r3, #1
 80076a6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f107 0210 	add.w	r2, r7, #16
 80076b0:	4611      	mov	r1, r2
 80076b2:	4618      	mov	r0, r3
 80076b4:	f002 fb89 	bl	8009dca <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d90a      	bls.n	80076d4 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2282      	movs	r2, #130	; 0x82
 80076c2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076ca:	4618      	mov	r0, r3
 80076cc:	f002 fbed 	bl	8009eaa <SDMMC_CmdReadMultiBlock>
 80076d0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80076d2:	e009      	b.n	80076e8 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2281      	movs	r2, #129	; 0x81
 80076d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076e0:	4618      	mov	r0, r3
 80076e2:	f002 fbc0 	bl	8009e66 <SDMMC_CmdReadSingleBlock>
 80076e6:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80076e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d012      	beq.n	8007714 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a0e      	ldr	r2, [pc, #56]	; (800772c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80076f4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076fc:	431a      	orrs	r2, r3
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2201      	movs	r2, #1
 8007706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e002      	b.n	800771a <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8007714:	2300      	movs	r3, #0
 8007716:	e000      	b.n	800771a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8007718:	2302      	movs	r3, #2
  }
}
 800771a:	4618      	mov	r0, r3
 800771c:	3730      	adds	r7, #48	; 0x30
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	0800820f 	.word	0x0800820f
 8007728:	08008281 	.word	0x08008281
 800772c:	004005ff 	.word	0x004005ff
 8007730:	4225858c 	.word	0x4225858c

08007734 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b08c      	sub	sp, #48	; 0x30
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	607a      	str	r2, [r7, #4]
 8007740:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d107      	bne.n	800775c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007750:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	e0c5      	b.n	80078e8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007762:	b2db      	uxtb	r3, r3
 8007764:	2b01      	cmp	r3, #1
 8007766:	f040 80be 	bne.w	80078e6 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007770:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	441a      	add	r2, r3
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800777a:	429a      	cmp	r2, r3
 800777c:	d907      	bls.n	800778e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007782:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e0ac      	b.n	80078e8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2203      	movs	r2, #3
 8007792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2200      	movs	r2, #0
 800779c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	6812      	ldr	r2, [r2, #0]
 80077a8:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80077ac:	f043 0302 	orr.w	r3, r3, #2
 80077b0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077b6:	4a4e      	ldr	r2, [pc, #312]	; (80078f0 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80077b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077be:	4a4d      	ldr	r2, [pc, #308]	; (80078f4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80077c0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077c6:	2200      	movs	r2, #0
 80077c8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d002      	beq.n	80077d8 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80077d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d4:	025b      	lsls	r3, r3, #9
 80077d6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d90a      	bls.n	80077f4 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	22a0      	movs	r2, #160	; 0xa0
 80077e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077ea:	4618      	mov	r0, r3
 80077ec:	f002 fba1 	bl	8009f32 <SDMMC_CmdWriteMultiBlock>
 80077f0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80077f2:	e009      	b.n	8007808 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2290      	movs	r2, #144	; 0x90
 80077f8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007800:	4618      	mov	r0, r3
 8007802:	f002 fb74 	bl	8009eee <SDMMC_CmdWriteSingleBlock>
 8007806:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780a:	2b00      	cmp	r3, #0
 800780c:	d012      	beq.n	8007834 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a39      	ldr	r2, [pc, #228]	; (80078f8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8007814:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800781a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800781c:	431a      	orrs	r2, r3
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2201      	movs	r2, #1
 8007826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	e059      	b.n	80078e8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007834:	4b31      	ldr	r3, [pc, #196]	; (80078fc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8007836:	2201      	movs	r2, #1
 8007838:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800783e:	2240      	movs	r2, #64	; 0x40
 8007840:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007852:	689a      	ldr	r2, [r3, #8]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	430a      	orrs	r2, r1
 800785c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007862:	68b9      	ldr	r1, [r7, #8]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	3380      	adds	r3, #128	; 0x80
 800786a:	461a      	mov	r2, r3
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	025b      	lsls	r3, r3, #9
 8007870:	089b      	lsrs	r3, r3, #2
 8007872:	f7fc f997 	bl	8003ba4 <HAL_DMA_Start_IT>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d01c      	beq.n	80078b6 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007882:	68fa      	ldr	r2, [r7, #12]
 8007884:	6812      	ldr	r2, [r2, #0]
 8007886:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800788a:	f023 0302 	bic.w	r3, r3, #2
 800788e:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a18      	ldr	r2, [pc, #96]	; (80078f8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8007896:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e018      	b.n	80078e8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80078b6:	f04f 33ff 	mov.w	r3, #4294967295
 80078ba:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	025b      	lsls	r3, r3, #9
 80078c0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80078c2:	2390      	movs	r3, #144	; 0x90
 80078c4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80078c6:	2300      	movs	r3, #0
 80078c8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80078ca:	2300      	movs	r3, #0
 80078cc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80078ce:	2301      	movs	r3, #1
 80078d0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f107 0210 	add.w	r2, r7, #16
 80078da:	4611      	mov	r1, r2
 80078dc:	4618      	mov	r0, r3
 80078de:	f002 fa74 	bl	8009dca <SDIO_ConfigData>

      return HAL_OK;
 80078e2:	2300      	movs	r3, #0
 80078e4:	e000      	b.n	80078e8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80078e6:	2302      	movs	r3, #2
  }
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3730      	adds	r7, #48	; 0x30
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	080081e5 	.word	0x080081e5
 80078f4:	08008281 	.word	0x08008281
 80078f8:	004005ff 	.word	0x004005ff
 80078fc:	4225858c 	.word	0x4225858c

08007900 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800790c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007914:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d008      	beq.n	800792e <HAL_SD_IRQHandler+0x2e>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f003 0308 	and.w	r3, r3, #8
 8007922:	2b00      	cmp	r3, #0
 8007924:	d003      	beq.n	800792e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f001 f857 	bl	80089da <SD_Read_IT>
 800792c:	e165      	b.n	8007bfa <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007938:	2b00      	cmp	r3, #0
 800793a:	f000 808f 	beq.w	8007a5c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007946:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	6812      	ldr	r2, [r2, #0]
 8007952:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8007956:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800795a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f022 0201 	bic.w	r2, r2, #1
 800796a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f003 0308 	and.w	r3, r3, #8
 8007972:	2b00      	cmp	r3, #0
 8007974:	d039      	beq.n	80079ea <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f003 0302 	and.w	r3, r3, #2
 800797c:	2b00      	cmp	r3, #0
 800797e:	d104      	bne.n	800798a <HAL_SD_IRQHandler+0x8a>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f003 0320 	and.w	r3, r3, #32
 8007986:	2b00      	cmp	r3, #0
 8007988:	d011      	beq.n	80079ae <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4618      	mov	r0, r3
 8007990:	f002 faf2 	bl	8009f78 <SDMMC_CmdStopTransfer>
 8007994:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d008      	beq.n	80079ae <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	431a      	orrs	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f92f 	bl	8007c0c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f240 523a 	movw	r2, #1338	; 0x53a
 80079b6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f003 0301 	and.w	r3, r3, #1
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d104      	bne.n	80079da <HAL_SD_IRQHandler+0xda>
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f003 0302 	and.w	r3, r3, #2
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d003      	beq.n	80079e2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f002 ff60 	bl	800a8a0 <HAL_SD_RxCpltCallback>
 80079e0:	e10b      	b.n	8007bfa <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f002 ff52 	bl	800a88c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80079e8:	e107      	b.n	8007bfa <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f000 8102 	beq.w	8007bfa <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f003 0320 	and.w	r3, r3, #32
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d011      	beq.n	8007a24 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4618      	mov	r0, r3
 8007a06:	f002 fab7 	bl	8009f78 <SDMMC_CmdStopTransfer>
 8007a0a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d008      	beq.n	8007a24 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	431a      	orrs	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 f8f4 	bl	8007c0c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f003 0301 	and.w	r3, r3, #1
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f040 80e5 	bne.w	8007bfa <HAL_SD_IRQHandler+0x2fa>
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f003 0302 	and.w	r3, r3, #2
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	f040 80df 	bne.w	8007bfa <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f022 0208 	bic.w	r2, r2, #8
 8007a4a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f002 ff19 	bl	800a88c <HAL_SD_TxCpltCallback>
}
 8007a5a:	e0ce      	b.n	8007bfa <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d008      	beq.n	8007a7c <HAL_SD_IRQHandler+0x17c>
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f003 0308 	and.w	r3, r3, #8
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d003      	beq.n	8007a7c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f001 f801 	bl	8008a7c <SD_Write_IT>
 8007a7a:	e0be      	b.n	8007bfa <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a82:	f240 233a 	movw	r3, #570	; 0x23a
 8007a86:	4013      	ands	r3, r2
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f000 80b6 	beq.w	8007bfa <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a94:	f003 0302 	and.w	r3, r3, #2
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d005      	beq.n	8007aa8 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa0:	f043 0202 	orr.w	r2, r3, #2
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aae:	f003 0308 	and.w	r3, r3, #8
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d005      	beq.n	8007ac2 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aba:	f043 0208 	orr.w	r2, r3, #8
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ac8:	f003 0320 	and.w	r3, r3, #32
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d005      	beq.n	8007adc <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad4:	f043 0220 	orr.w	r2, r3, #32
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ae2:	f003 0310 	and.w	r3, r3, #16
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d005      	beq.n	8007af6 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aee:	f043 0210 	orr.w	r2, r3, #16
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007afc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d005      	beq.n	8007b10 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b08:	f043 0208 	orr.w	r2, r3, #8
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f240 723a 	movw	r2, #1850	; 0x73a
 8007b18:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	6812      	ldr	r2, [r2, #0]
 8007b24:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8007b28:	f023 0302 	bic.w	r3, r3, #2
 8007b2c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4618      	mov	r0, r3
 8007b34:	f002 fa20 	bl	8009f78 <SDMMC_CmdStopTransfer>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b3e:	431a      	orrs	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f003 0308 	and.w	r3, r3, #8
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00a      	beq.n	8007b64 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2201      	movs	r2, #1
 8007b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 f855 	bl	8007c0c <HAL_SD_ErrorCallback>
}
 8007b62:	e04a      	b.n	8007bfa <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d045      	beq.n	8007bfa <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f003 0310 	and.w	r3, r3, #16
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d104      	bne.n	8007b82 <HAL_SD_IRQHandler+0x282>
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f003 0320 	and.w	r3, r3, #32
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d011      	beq.n	8007ba6 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b86:	4a1f      	ldr	r2, [pc, #124]	; (8007c04 <HAL_SD_IRQHandler+0x304>)
 8007b88:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7fc f860 	bl	8003c54 <HAL_DMA_Abort_IT>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d02f      	beq.n	8007bfa <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f000 fbc0 	bl	8008324 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007ba4:	e029      	b.n	8007bfa <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f003 0301 	and.w	r3, r3, #1
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d104      	bne.n	8007bba <HAL_SD_IRQHandler+0x2ba>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f003 0302 	and.w	r3, r3, #2
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d011      	beq.n	8007bde <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bbe:	4a12      	ldr	r2, [pc, #72]	; (8007c08 <HAL_SD_IRQHandler+0x308>)
 8007bc0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7fc f844 	bl	8003c54 <HAL_DMA_Abort_IT>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d013      	beq.n	8007bfa <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f000 fbdb 	bl	8008392 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007bdc:	e00d      	b.n	8007bfa <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f002 fe40 	bl	800a878 <HAL_SD_AbortCallback>
}
 8007bf8:	e7ff      	b.n	8007bfa <HAL_SD_IRQHandler+0x2fa>
 8007bfa:	bf00      	nop
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	08008325 	.word	0x08008325
 8007c08:	08008393 	.word	0x08008393

08007c0c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <HAL_SD_GetCardCID>:
  * @param  pCID: Pointer to a HAL_SD_CardCIDTypeDef structure that  
  *         contains all CID register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCID(SD_HandleTypeDef *hsd, HAL_SD_CardCIDTypeDef *pCID)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  pCID->ManufacturerID = (uint8_t)((hsd->CID[0] & 0xFF000000U) >> 24U);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c2e:	0e1b      	lsrs	r3, r3, #24
 8007c30:	b2da      	uxtb	r2, r3
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	701a      	strb	r2, [r3, #0]

  pCID->OEM_AppliID = (uint16_t)((hsd->CID[0] & 0x00FFFF00U) >> 8U);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c3a:	0a1b      	lsrs	r3, r3, #8
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	805a      	strh	r2, [r3, #2]

  pCID->ProdName1 = (((hsd->CID[0] & 0x000000FFU) << 24U) | ((hsd->CID[1] & 0xFFFFFF00U) >> 8U));
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c46:	061a      	lsls	r2, r3, #24
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c4c:	0a1b      	lsrs	r3, r3, #8
 8007c4e:	431a      	orrs	r2, r3
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	605a      	str	r2, [r3, #4]

  pCID->ProdName2 = (uint8_t)(hsd->CID[1] & 0x000000FFU);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c58:	b2da      	uxtb	r2, r3
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	721a      	strb	r2, [r3, #8]

  pCID->ProdRev = (uint8_t)((hsd->CID[2] & 0xFF000000U) >> 24U);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c62:	0e1b      	lsrs	r3, r3, #24
 8007c64:	b2da      	uxtb	r2, r3
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	725a      	strb	r2, [r3, #9]

  pCID->ProdSN = (((hsd->CID[2] & 0x00FFFFFFU) << 8U) | ((hsd->CID[3] & 0xFF000000U) >> 24U));
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c6e:	021a      	lsls	r2, r3, #8
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c76:	0e1b      	lsrs	r3, r3, #24
 8007c78:	431a      	orrs	r2, r3
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	60da      	str	r2, [r3, #12]

  pCID->Reserved1 = (uint8_t)((hsd->CID[3] & 0x00F00000U) >> 20U);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c84:	0d1b      	lsrs	r3, r3, #20
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	f003 030f 	and.w	r3, r3, #15
 8007c8c:	b2da      	uxtb	r2, r3
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	741a      	strb	r2, [r3, #16]

  pCID->ManufactDate = (uint16_t)((hsd->CID[3] & 0x000FFF00U) >> 8U);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c98:	0a1b      	lsrs	r3, r3, #8
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ca0:	b29a      	uxth	r2, r3
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	825a      	strh	r2, [r3, #18]

  pCID->CID_CRC = (uint8_t)((hsd->CID[3] & 0x000000FEU) >> 1U);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cac:	085b      	lsrs	r3, r3, #1
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cb4:	b2da      	uxtb	r2, r3
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	751a      	strb	r2, [r3, #20]

  pCID->Reserved2 = 1U;
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	755a      	strb	r2, [r3, #21]

  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	370c      	adds	r7, #12
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
	...

08007cd0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cde:	0f9b      	lsrs	r3, r3, #30
 8007ce0:	b2da      	uxtb	r2, r3
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cea:	0e9b      	lsrs	r3, r3, #26
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	f003 030f 	and.w	r3, r3, #15
 8007cf2:	b2da      	uxtb	r2, r3
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cfc:	0e1b      	lsrs	r3, r3, #24
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	f003 0303 	and.w	r3, r3, #3
 8007d04:	b2da      	uxtb	r2, r3
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d0e:	0c1b      	lsrs	r3, r3, #16
 8007d10:	b2da      	uxtb	r2, r3
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d1a:	0a1b      	lsrs	r3, r3, #8
 8007d1c:	b2da      	uxtb	r2, r3
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d26:	b2da      	uxtb	r2, r3
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d30:	0d1b      	lsrs	r3, r3, #20
 8007d32:	b29a      	uxth	r2, r3
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d3c:	0c1b      	lsrs	r3, r3, #16
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	f003 030f 	and.w	r3, r3, #15
 8007d44:	b2da      	uxtb	r2, r3
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d4e:	0bdb      	lsrs	r3, r3, #15
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	f003 0301 	and.w	r3, r3, #1
 8007d56:	b2da      	uxtb	r2, r3
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d60:	0b9b      	lsrs	r3, r3, #14
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	f003 0301 	and.w	r3, r3, #1
 8007d68:	b2da      	uxtb	r2, r3
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d72:	0b5b      	lsrs	r3, r3, #13
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	f003 0301 	and.w	r3, r3, #1
 8007d7a:	b2da      	uxtb	r2, r3
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d84:	0b1b      	lsrs	r3, r3, #12
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	f003 0301 	and.w	r3, r3, #1
 8007d8c:	b2da      	uxtb	r2, r3
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	2200      	movs	r2, #0
 8007d96:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d163      	bne.n	8007e68 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007da4:	009a      	lsls	r2, r3, #2
 8007da6:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007daa:	4013      	ands	r3, r2
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007db0:	0f92      	lsrs	r2, r2, #30
 8007db2:	431a      	orrs	r2, r3
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dbc:	0edb      	lsrs	r3, r3, #27
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	f003 0307 	and.w	r3, r3, #7
 8007dc4:	b2da      	uxtb	r2, r3
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dce:	0e1b      	lsrs	r3, r3, #24
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	f003 0307 	and.w	r3, r3, #7
 8007dd6:	b2da      	uxtb	r2, r3
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007de0:	0d5b      	lsrs	r3, r3, #21
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	f003 0307 	and.w	r3, r3, #7
 8007de8:	b2da      	uxtb	r2, r3
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007df2:	0c9b      	lsrs	r3, r3, #18
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	f003 0307 	and.w	r3, r3, #7
 8007dfa:	b2da      	uxtb	r2, r3
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e04:	0bdb      	lsrs	r3, r3, #15
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	f003 0307 	and.w	r3, r3, #7
 8007e0c:	b2da      	uxtb	r2, r3
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	1c5a      	adds	r2, r3, #1
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	7e1b      	ldrb	r3, [r3, #24]
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	f003 0307 	and.w	r3, r3, #7
 8007e26:	3302      	adds	r3, #2
 8007e28:	2201      	movs	r2, #1
 8007e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007e32:	fb03 f202 	mul.w	r2, r3, r2
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	7a1b      	ldrb	r3, [r3, #8]
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	f003 030f 	and.w	r3, r3, #15
 8007e44:	2201      	movs	r2, #1
 8007e46:	409a      	lsls	r2, r3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007e54:	0a52      	lsrs	r2, r2, #9
 8007e56:	fb03 f202 	mul.w	r2, r3, r2
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e64:	661a      	str	r2, [r3, #96]	; 0x60
 8007e66:	e031      	b.n	8007ecc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d11d      	bne.n	8007eac <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e74:	041b      	lsls	r3, r3, #16
 8007e76:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e7e:	0c1b      	lsrs	r3, r3, #16
 8007e80:	431a      	orrs	r2, r3
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	029a      	lsls	r2, r3, #10
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ea0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	661a      	str	r2, [r3, #96]	; 0x60
 8007eaa:	e00f      	b.n	8007ecc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a58      	ldr	r2, [pc, #352]	; (8008014 <HAL_SD_GetCardCSD+0x344>)
 8007eb2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e09d      	b.n	8008008 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ed0:	0b9b      	lsrs	r3, r3, #14
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	f003 0301 	and.w	r3, r3, #1
 8007ed8:	b2da      	uxtb	r2, r3
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ee2:	09db      	lsrs	r3, r3, #7
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eea:	b2da      	uxtb	r2, r3
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007efa:	b2da      	uxtb	r2, r3
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f04:	0fdb      	lsrs	r3, r3, #31
 8007f06:	b2da      	uxtb	r2, r3
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f10:	0f5b      	lsrs	r3, r3, #29
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	f003 0303 	and.w	r3, r3, #3
 8007f18:	b2da      	uxtb	r2, r3
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f22:	0e9b      	lsrs	r3, r3, #26
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	f003 0307 	and.w	r3, r3, #7
 8007f2a:	b2da      	uxtb	r2, r3
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f34:	0d9b      	lsrs	r3, r3, #22
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	f003 030f 	and.w	r3, r3, #15
 8007f3c:	b2da      	uxtb	r2, r3
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f46:	0d5b      	lsrs	r3, r3, #21
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	f003 0301 	and.w	r3, r3, #1
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f62:	0c1b      	lsrs	r3, r3, #16
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	f003 0301 	and.w	r3, r3, #1
 8007f6a:	b2da      	uxtb	r2, r3
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f76:	0bdb      	lsrs	r3, r3, #15
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	f003 0301 	and.w	r3, r3, #1
 8007f7e:	b2da      	uxtb	r2, r3
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f8a:	0b9b      	lsrs	r3, r3, #14
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	f003 0301 	and.w	r3, r3, #1
 8007f92:	b2da      	uxtb	r2, r3
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f9e:	0b5b      	lsrs	r3, r3, #13
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	f003 0301 	and.w	r3, r3, #1
 8007fa6:	b2da      	uxtb	r2, r3
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fb2:	0b1b      	lsrs	r3, r3, #12
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	f003 0301 	and.w	r3, r3, #1
 8007fba:	b2da      	uxtb	r2, r3
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fc6:	0a9b      	lsrs	r3, r3, #10
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	f003 0303 	and.w	r3, r3, #3
 8007fce:	b2da      	uxtb	r2, r3
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fda:	0a1b      	lsrs	r3, r3, #8
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	f003 0303 	and.w	r3, r3, #3
 8007fe2:	b2da      	uxtb	r2, r3
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fee:	085b      	lsrs	r3, r3, #1
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ff6:	b2da      	uxtb	r2, r3
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	2201      	movs	r2, #1
 8008002:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr
 8008014:	004005ff 	.word	0x004005ff

08008018 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008062:	2300      	movs	r3, #0
}
 8008064:	4618      	mov	r0, r3
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008070:	b5b0      	push	{r4, r5, r7, lr}
 8008072:	b08e      	sub	sp, #56	; 0x38
 8008074:	af04      	add	r7, sp, #16
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800807a:	2300      	movs	r3, #0
 800807c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2203      	movs	r2, #3
 8008084:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800808c:	2b03      	cmp	r3, #3
 800808e:	d02e      	beq.n	80080ee <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008096:	d106      	bne.n	80080a6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800809c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	639a      	str	r2, [r3, #56]	; 0x38
 80080a4:	e029      	b.n	80080fa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080ac:	d10a      	bne.n	80080c4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 fb2a 	bl	8008708 <SD_WideBus_Enable>
 80080b4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080ba:	6a3b      	ldr	r3, [r7, #32]
 80080bc:	431a      	orrs	r2, r3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	639a      	str	r2, [r3, #56]	; 0x38
 80080c2:	e01a      	b.n	80080fa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d10a      	bne.n	80080e0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 fb67 	bl	800879e <SD_WideBus_Disable>
 80080d0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080d6:	6a3b      	ldr	r3, [r7, #32]
 80080d8:	431a      	orrs	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	639a      	str	r2, [r3, #56]	; 0x38
 80080de:	e00c      	b.n	80080fa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	639a      	str	r2, [r3, #56]	; 0x38
 80080ec:	e005      	b.n	80080fa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00b      	beq.n	800811a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a26      	ldr	r2, [pc, #152]	; (80081a0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008108:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2201      	movs	r2, #1
 800810e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008118:	e01f      	b.n	800815a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	695b      	ldr	r3, [r3, #20]
 8008134:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	699b      	ldr	r3, [r3, #24]
 800813a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681d      	ldr	r5, [r3, #0]
 8008140:	466c      	mov	r4, sp
 8008142:	f107 0314 	add.w	r3, r7, #20
 8008146:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800814a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800814e:	f107 0308 	add.w	r3, r7, #8
 8008152:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008154:	4628      	mov	r0, r5
 8008156:	f001 fd88 	bl	8009c6a <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008162:	4618      	mov	r0, r3
 8008164:	f001 fe5d 	bl	8009e22 <SDMMC_CmdBlockLength>
 8008168:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800816a:	6a3b      	ldr	r3, [r7, #32]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d00c      	beq.n	800818a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a0a      	ldr	r2, [pc, #40]	; (80081a0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008176:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800817c:	6a3b      	ldr	r3, [r7, #32]
 800817e:	431a      	orrs	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2201      	movs	r2, #1
 800818e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008192:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008196:	4618      	mov	r0, r3
 8008198:	3728      	adds	r7, #40	; 0x28
 800819a:	46bd      	mov	sp, r7
 800819c:	bdb0      	pop	{r4, r5, r7, pc}
 800819e:	bf00      	nop
 80081a0:	004005ff 	.word	0x004005ff

080081a4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b086      	sub	sp, #24
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80081ac:	2300      	movs	r3, #0
 80081ae:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80081b0:	f107 030c 	add.w	r3, r7, #12
 80081b4:	4619      	mov	r1, r3
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 fa7e 	bl	80086b8 <SD_SendStatus>
 80081bc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d005      	beq.n	80081d0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	431a      	orrs	r2, r3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	0a5b      	lsrs	r3, r3, #9
 80081d4:	f003 030f 	and.w	r3, r3, #15
 80081d8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80081da:	693b      	ldr	r3, [r7, #16]
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3718      	adds	r7, #24
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008200:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008202:	bf00      	nop
 8008204:	3714      	adds	r7, #20
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr

0800820e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b084      	sub	sp, #16
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800821a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008220:	2b82      	cmp	r3, #130	; 0x82
 8008222:	d111      	bne.n	8008248 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4618      	mov	r0, r3
 800822a:	f001 fea5 	bl	8009f78 <SDMMC_CmdStopTransfer>
 800822e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d008      	beq.n	8008248 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	431a      	orrs	r2, r3
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008242:	68f8      	ldr	r0, [r7, #12]
 8008244:	f7ff fce2 	bl	8007c0c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f022 0208 	bic.w	r2, r2, #8
 8008256:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f240 523a 	movw	r2, #1338	; 0x53a
 8008260:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2201      	movs	r2, #1
 8008266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2200      	movs	r2, #0
 800826e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008270:	68f8      	ldr	r0, [r7, #12]
 8008272:	f002 fb15 	bl	800a8a0 <HAL_SD_RxCpltCallback>
#endif
}
 8008276:	bf00      	nop
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
	...

08008280 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b086      	sub	sp, #24
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f7fb fe8c 	bl	8003fac <HAL_DMA_GetError>
 8008294:	4603      	mov	r3, r0
 8008296:	2b02      	cmp	r3, #2
 8008298:	d03e      	beq.n	8008318 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082a0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082a8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d002      	beq.n	80082b6 <SD_DMAError+0x36>
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d12d      	bne.n	8008312 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a19      	ldr	r2, [pc, #100]	; (8008320 <SD_DMAError+0xa0>)
 80082bc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80082cc:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80082da:	6978      	ldr	r0, [r7, #20]
 80082dc:	f7ff ff62 	bl	80081a4 <HAL_SD_GetCardState>
 80082e0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	2b06      	cmp	r3, #6
 80082e6:	d002      	beq.n	80082ee <SD_DMAError+0x6e>
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	2b05      	cmp	r3, #5
 80082ec:	d10a      	bne.n	8008304 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4618      	mov	r0, r3
 80082f4:	f001 fe40 	bl	8009f78 <SDMMC_CmdStopTransfer>
 80082f8:	4602      	mov	r2, r0
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082fe:	431a      	orrs	r2, r3
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	2200      	movs	r2, #0
 8008310:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008312:	6978      	ldr	r0, [r7, #20]
 8008314:	f7ff fc7a 	bl	8007c0c <HAL_SD_ErrorCallback>
#endif
  }
}
 8008318:	bf00      	nop
 800831a:	3718      	adds	r7, #24
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}
 8008320:	004005ff 	.word	0x004005ff

08008324 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008330:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f240 523a 	movw	r2, #1338	; 0x53a
 800833a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	f7ff ff31 	bl	80081a4 <HAL_SD_GetCardState>
 8008342:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2200      	movs	r2, #0
 8008350:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	2b06      	cmp	r3, #6
 8008356:	d002      	beq.n	800835e <SD_DMATxAbort+0x3a>
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	2b05      	cmp	r3, #5
 800835c:	d10a      	bne.n	8008374 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4618      	mov	r0, r3
 8008364:	f001 fe08 	bl	8009f78 <SDMMC_CmdStopTransfer>
 8008368:	4602      	mov	r2, r0
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800836e:	431a      	orrs	r2, r3
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008378:	2b00      	cmp	r3, #0
 800837a:	d103      	bne.n	8008384 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f002 fa7b 	bl	800a878 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008382:	e002      	b.n	800838a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008384:	68f8      	ldr	r0, [r7, #12]
 8008386:	f7ff fc41 	bl	8007c0c <HAL_SD_ErrorCallback>
}
 800838a:	bf00      	nop
 800838c:	3710      	adds	r7, #16
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8008392:	b580      	push	{r7, lr}
 8008394:	b084      	sub	sp, #16
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800839e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f240 523a 	movw	r2, #1338	; 0x53a
 80083a8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f7ff fefa 	bl	80081a4 <HAL_SD_GetCardState>
 80083b0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2201      	movs	r2, #1
 80083b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2200      	movs	r2, #0
 80083be:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	2b06      	cmp	r3, #6
 80083c4:	d002      	beq.n	80083cc <SD_DMARxAbort+0x3a>
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	2b05      	cmp	r3, #5
 80083ca:	d10a      	bne.n	80083e2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4618      	mov	r0, r3
 80083d2:	f001 fdd1 	bl	8009f78 <SDMMC_CmdStopTransfer>
 80083d6:	4602      	mov	r2, r0
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083dc:	431a      	orrs	r2, r3
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d103      	bne.n	80083f2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f002 fa44 	bl	800a878 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80083f0:	e002      	b.n	80083f8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	f7ff fc0a 	bl	8007c0c <HAL_SD_ErrorCallback>
}
 80083f8:	bf00      	nop
 80083fa:	3710      	adds	r7, #16
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008400:	b5b0      	push	{r4, r5, r7, lr}
 8008402:	b094      	sub	sp, #80	; 0x50
 8008404:	af04      	add	r7, sp, #16
 8008406:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008408:	2301      	movs	r3, #1
 800840a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4618      	mov	r0, r3
 8008412:	f001 fc82 	bl	8009d1a <SDIO_GetPowerState>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d102      	bne.n	8008422 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800841c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008420:	e0b8      	b.n	8008594 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008426:	2b03      	cmp	r3, #3
 8008428:	d02f      	beq.n	800848a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4618      	mov	r0, r3
 8008430:	f001 feac 	bl	800a18c <SDMMC_CmdSendCID>
 8008434:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008438:	2b00      	cmp	r3, #0
 800843a:	d001      	beq.n	8008440 <SD_InitCard+0x40>
    {
      return errorstate;
 800843c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800843e:	e0a9      	b.n	8008594 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2100      	movs	r1, #0
 8008446:	4618      	mov	r0, r3
 8008448:	f001 fcac 	bl	8009da4 <SDIO_GetResponse>
 800844c:	4602      	mov	r2, r0
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2104      	movs	r1, #4
 8008458:	4618      	mov	r0, r3
 800845a:	f001 fca3 	bl	8009da4 <SDIO_GetResponse>
 800845e:	4602      	mov	r2, r0
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2108      	movs	r1, #8
 800846a:	4618      	mov	r0, r3
 800846c:	f001 fc9a 	bl	8009da4 <SDIO_GetResponse>
 8008470:	4602      	mov	r2, r0
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	210c      	movs	r1, #12
 800847c:	4618      	mov	r0, r3
 800847e:	f001 fc91 	bl	8009da4 <SDIO_GetResponse>
 8008482:	4602      	mov	r2, r0
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800848e:	2b03      	cmp	r3, #3
 8008490:	d00d      	beq.n	80084ae <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f107 020e 	add.w	r2, r7, #14
 800849a:	4611      	mov	r1, r2
 800849c:	4618      	mov	r0, r3
 800849e:	f001 feb2 	bl	800a206 <SDMMC_CmdSetRelAdd>
 80084a2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80084a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d001      	beq.n	80084ae <SD_InitCard+0xae>
    {
      return errorstate;
 80084aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ac:	e072      	b.n	8008594 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084b2:	2b03      	cmp	r3, #3
 80084b4:	d036      	beq.n	8008524 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80084b6:	89fb      	ldrh	r3, [r7, #14]
 80084b8:	461a      	mov	r2, r3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084c6:	041b      	lsls	r3, r3, #16
 80084c8:	4619      	mov	r1, r3
 80084ca:	4610      	mov	r0, r2
 80084cc:	f001 fe7c 	bl	800a1c8 <SDMMC_CmdSendCSD>
 80084d0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80084d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d001      	beq.n	80084dc <SD_InitCard+0xdc>
    {
      return errorstate;
 80084d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084da:	e05b      	b.n	8008594 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2100      	movs	r1, #0
 80084e2:	4618      	mov	r0, r3
 80084e4:	f001 fc5e 	bl	8009da4 <SDIO_GetResponse>
 80084e8:	4602      	mov	r2, r0
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2104      	movs	r1, #4
 80084f4:	4618      	mov	r0, r3
 80084f6:	f001 fc55 	bl	8009da4 <SDIO_GetResponse>
 80084fa:	4602      	mov	r2, r0
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2108      	movs	r1, #8
 8008506:	4618      	mov	r0, r3
 8008508:	f001 fc4c 	bl	8009da4 <SDIO_GetResponse>
 800850c:	4602      	mov	r2, r0
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	210c      	movs	r1, #12
 8008518:	4618      	mov	r0, r3
 800851a:	f001 fc43 	bl	8009da4 <SDIO_GetResponse>
 800851e:	4602      	mov	r2, r0
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	2104      	movs	r1, #4
 800852a:	4618      	mov	r0, r3
 800852c:	f001 fc3a 	bl	8009da4 <SDIO_GetResponse>
 8008530:	4603      	mov	r3, r0
 8008532:	0d1a      	lsrs	r2, r3, #20
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008538:	f107 0310 	add.w	r3, r7, #16
 800853c:	4619      	mov	r1, r3
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f7ff fbc6 	bl	8007cd0 <HAL_SD_GetCardCSD>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d002      	beq.n	8008550 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800854a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800854e:	e021      	b.n	8008594 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6819      	ldr	r1, [r3, #0]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008558:	041b      	lsls	r3, r3, #16
 800855a:	2200      	movs	r2, #0
 800855c:	461c      	mov	r4, r3
 800855e:	4615      	mov	r5, r2
 8008560:	4622      	mov	r2, r4
 8008562:	462b      	mov	r3, r5
 8008564:	4608      	mov	r0, r1
 8008566:	f001 fd29 	bl	8009fbc <SDMMC_CmdSelDesel>
 800856a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800856c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800856e:	2b00      	cmp	r3, #0
 8008570:	d001      	beq.n	8008576 <SD_InitCard+0x176>
  {
    return errorstate;
 8008572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008574:	e00e      	b.n	8008594 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681d      	ldr	r5, [r3, #0]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	466c      	mov	r4, sp
 800857e:	f103 0210 	add.w	r2, r3, #16
 8008582:	ca07      	ldmia	r2, {r0, r1, r2}
 8008584:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008588:	3304      	adds	r3, #4
 800858a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800858c:	4628      	mov	r0, r5
 800858e:	f001 fb6c 	bl	8009c6a <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	3740      	adds	r7, #64	; 0x40
 8008598:	46bd      	mov	sp, r7
 800859a:	bdb0      	pop	{r4, r5, r7, pc}

0800859c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b086      	sub	sp, #24
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80085a4:	2300      	movs	r3, #0
 80085a6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80085a8:	2300      	movs	r3, #0
 80085aa:	617b      	str	r3, [r7, #20]
 80085ac:	2300      	movs	r3, #0
 80085ae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4618      	mov	r0, r3
 80085b6:	f001 fd24 	bl	800a002 <SDMMC_CmdGoIdleState>
 80085ba:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d001      	beq.n	80085c6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	e072      	b.n	80086ac <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4618      	mov	r0, r3
 80085cc:	f001 fd37 	bl	800a03e <SDMMC_CmdOperCond>
 80085d0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d00d      	beq.n	80085f4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4618      	mov	r0, r3
 80085e4:	f001 fd0d 	bl	800a002 <SDMMC_CmdGoIdleState>
 80085e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d004      	beq.n	80085fa <SD_PowerON+0x5e>
    {
      return errorstate;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	e05b      	b.n	80086ac <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d137      	bne.n	8008672 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2100      	movs	r1, #0
 8008608:	4618      	mov	r0, r3
 800860a:	f001 fd37 	bl	800a07c <SDMMC_CmdAppCommand>
 800860e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d02d      	beq.n	8008672 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008616:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800861a:	e047      	b.n	80086ac <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2100      	movs	r1, #0
 8008622:	4618      	mov	r0, r3
 8008624:	f001 fd2a 	bl	800a07c <SDMMC_CmdAppCommand>
 8008628:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d001      	beq.n	8008634 <SD_PowerON+0x98>
    {
      return errorstate;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	e03b      	b.n	80086ac <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	491e      	ldr	r1, [pc, #120]	; (80086b4 <SD_PowerON+0x118>)
 800863a:	4618      	mov	r0, r3
 800863c:	f001 fd40 	bl	800a0c0 <SDMMC_CmdAppOperCommand>
 8008640:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d002      	beq.n	800864e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008648:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800864c:	e02e      	b.n	80086ac <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2100      	movs	r1, #0
 8008654:	4618      	mov	r0, r3
 8008656:	f001 fba5 	bl	8009da4 <SDIO_GetResponse>
 800865a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	0fdb      	lsrs	r3, r3, #31
 8008660:	2b01      	cmp	r3, #1
 8008662:	d101      	bne.n	8008668 <SD_PowerON+0xcc>
 8008664:	2301      	movs	r3, #1
 8008666:	e000      	b.n	800866a <SD_PowerON+0xce>
 8008668:	2300      	movs	r3, #0
 800866a:	613b      	str	r3, [r7, #16]

    count++;
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	3301      	adds	r3, #1
 8008670:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008678:	4293      	cmp	r3, r2
 800867a:	d802      	bhi.n	8008682 <SD_PowerON+0xe6>
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d0cc      	beq.n	800861c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008688:	4293      	cmp	r3, r2
 800868a:	d902      	bls.n	8008692 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800868c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008690:	e00c      	b.n	80086ac <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008698:	2b00      	cmp	r3, #0
 800869a:	d003      	beq.n	80086a4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	645a      	str	r2, [r3, #68]	; 0x44
 80086a2:	e002      	b.n	80086aa <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3718      	adds	r7, #24
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	c1100000 	.word	0xc1100000

080086b8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d102      	bne.n	80086ce <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80086c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80086cc:	e018      	b.n	8008700 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086d6:	041b      	lsls	r3, r3, #16
 80086d8:	4619      	mov	r1, r3
 80086da:	4610      	mov	r0, r2
 80086dc:	f001 fdb4 	bl	800a248 <SDMMC_CmdSendStatus>
 80086e0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d001      	beq.n	80086ec <SD_SendStatus+0x34>
  {
    return errorstate;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	e009      	b.n	8008700 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2100      	movs	r1, #0
 80086f2:	4618      	mov	r0, r3
 80086f4:	f001 fb56 	bl	8009da4 <SDIO_GetResponse>
 80086f8:	4602      	mov	r2, r0
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80086fe:	2300      	movs	r3, #0
}
 8008700:	4618      	mov	r0, r3
 8008702:	3710      	adds	r7, #16
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b086      	sub	sp, #24
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008710:	2300      	movs	r3, #0
 8008712:	60fb      	str	r3, [r7, #12]
 8008714:	2300      	movs	r3, #0
 8008716:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2100      	movs	r1, #0
 800871e:	4618      	mov	r0, r3
 8008720:	f001 fb40 	bl	8009da4 <SDIO_GetResponse>
 8008724:	4603      	mov	r3, r0
 8008726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800872a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800872e:	d102      	bne.n	8008736 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008730:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008734:	e02f      	b.n	8008796 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008736:	f107 030c 	add.w	r3, r7, #12
 800873a:	4619      	mov	r1, r3
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 f879 	bl	8008834 <SD_FindSCR>
 8008742:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d001      	beq.n	800874e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	e023      	b.n	8008796 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008754:	2b00      	cmp	r3, #0
 8008756:	d01c      	beq.n	8008792 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008760:	041b      	lsls	r3, r3, #16
 8008762:	4619      	mov	r1, r3
 8008764:	4610      	mov	r0, r2
 8008766:	f001 fc89 	bl	800a07c <SDMMC_CmdAppCommand>
 800876a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d001      	beq.n	8008776 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	e00f      	b.n	8008796 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2102      	movs	r1, #2
 800877c:	4618      	mov	r0, r3
 800877e:	f001 fcc2 	bl	800a106 <SDMMC_CmdBusWidth>
 8008782:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d001      	beq.n	800878e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	e003      	b.n	8008796 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800878e:	2300      	movs	r3, #0
 8008790:	e001      	b.n	8008796 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008792:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008796:	4618      	mov	r0, r3
 8008798:	3718      	adds	r7, #24
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b086      	sub	sp, #24
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80087a6:	2300      	movs	r3, #0
 80087a8:	60fb      	str	r3, [r7, #12]
 80087aa:	2300      	movs	r3, #0
 80087ac:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2100      	movs	r1, #0
 80087b4:	4618      	mov	r0, r3
 80087b6:	f001 faf5 	bl	8009da4 <SDIO_GetResponse>
 80087ba:	4603      	mov	r3, r0
 80087bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80087c4:	d102      	bne.n	80087cc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80087c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80087ca:	e02f      	b.n	800882c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80087cc:	f107 030c 	add.w	r3, r7, #12
 80087d0:	4619      	mov	r1, r3
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 f82e 	bl	8008834 <SD_FindSCR>
 80087d8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d001      	beq.n	80087e4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	e023      	b.n	800882c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d01c      	beq.n	8008828 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087f6:	041b      	lsls	r3, r3, #16
 80087f8:	4619      	mov	r1, r3
 80087fa:	4610      	mov	r0, r2
 80087fc:	f001 fc3e 	bl	800a07c <SDMMC_CmdAppCommand>
 8008800:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d001      	beq.n	800880c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	e00f      	b.n	800882c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2100      	movs	r1, #0
 8008812:	4618      	mov	r0, r3
 8008814:	f001 fc77 	bl	800a106 <SDMMC_CmdBusWidth>
 8008818:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d001      	beq.n	8008824 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	e003      	b.n	800882c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008824:	2300      	movs	r3, #0
 8008826:	e001      	b.n	800882c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008828:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800882c:	4618      	mov	r0, r3
 800882e:	3718      	adds	r7, #24
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008834:	b590      	push	{r4, r7, lr}
 8008836:	b08f      	sub	sp, #60	; 0x3c
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800883e:	f7fa fbc5 	bl	8002fcc <HAL_GetTick>
 8008842:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008844:	2300      	movs	r3, #0
 8008846:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008848:	2300      	movs	r3, #0
 800884a:	60bb      	str	r3, [r7, #8]
 800884c:	2300      	movs	r3, #0
 800884e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2108      	movs	r1, #8
 800885a:	4618      	mov	r0, r3
 800885c:	f001 fae1 	bl	8009e22 <SDMMC_CmdBlockLength>
 8008860:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008864:	2b00      	cmp	r3, #0
 8008866:	d001      	beq.n	800886c <SD_FindSCR+0x38>
  {
    return errorstate;
 8008868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886a:	e0b2      	b.n	80089d2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008874:	041b      	lsls	r3, r3, #16
 8008876:	4619      	mov	r1, r3
 8008878:	4610      	mov	r0, r2
 800887a:	f001 fbff 	bl	800a07c <SDMMC_CmdAppCommand>
 800887e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008882:	2b00      	cmp	r3, #0
 8008884:	d001      	beq.n	800888a <SD_FindSCR+0x56>
  {
    return errorstate;
 8008886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008888:	e0a3      	b.n	80089d2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800888a:	f04f 33ff 	mov.w	r3, #4294967295
 800888e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008890:	2308      	movs	r3, #8
 8008892:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8008894:	2330      	movs	r3, #48	; 0x30
 8008896:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008898:	2302      	movs	r3, #2
 800889a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800889c:	2300      	movs	r3, #0
 800889e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80088a0:	2301      	movs	r3, #1
 80088a2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f107 0210 	add.w	r2, r7, #16
 80088ac:	4611      	mov	r1, r2
 80088ae:	4618      	mov	r0, r3
 80088b0:	f001 fa8b 	bl	8009dca <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4618      	mov	r0, r3
 80088ba:	f001 fc46 	bl	800a14a <SDMMC_CmdSendSCR>
 80088be:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80088c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d02a      	beq.n	800891c <SD_FindSCR+0xe8>
  {
    return errorstate;
 80088c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c8:	e083      	b.n	80089d2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d00f      	beq.n	80088f8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6819      	ldr	r1, [r3, #0]
 80088dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	f107 0208 	add.w	r2, r7, #8
 80088e4:	18d4      	adds	r4, r2, r3
 80088e6:	4608      	mov	r0, r1
 80088e8:	f001 f9ea 	bl	8009cc0 <SDIO_ReadFIFO>
 80088ec:	4603      	mov	r3, r0
 80088ee:	6023      	str	r3, [r4, #0]
      index++;
 80088f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088f2:	3301      	adds	r3, #1
 80088f4:	637b      	str	r3, [r7, #52]	; 0x34
 80088f6:	e006      	b.n	8008906 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008902:	2b00      	cmp	r3, #0
 8008904:	d012      	beq.n	800892c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008906:	f7fa fb61 	bl	8002fcc <HAL_GetTick>
 800890a:	4602      	mov	r2, r0
 800890c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890e:	1ad3      	subs	r3, r2, r3
 8008910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008914:	d102      	bne.n	800891c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008916:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800891a:	e05a      	b.n	80089d2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008922:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8008926:	2b00      	cmp	r3, #0
 8008928:	d0cf      	beq.n	80088ca <SD_FindSCR+0x96>
 800892a:	e000      	b.n	800892e <SD_FindSCR+0xfa>
      break;
 800892c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008934:	f003 0308 	and.w	r3, r3, #8
 8008938:	2b00      	cmp	r3, #0
 800893a:	d005      	beq.n	8008948 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	2208      	movs	r2, #8
 8008942:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008944:	2308      	movs	r3, #8
 8008946:	e044      	b.n	80089d2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800894e:	f003 0302 	and.w	r3, r3, #2
 8008952:	2b00      	cmp	r3, #0
 8008954:	d005      	beq.n	8008962 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2202      	movs	r2, #2
 800895c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800895e:	2302      	movs	r3, #2
 8008960:	e037      	b.n	80089d2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008968:	f003 0320 	and.w	r3, r3, #32
 800896c:	2b00      	cmp	r3, #0
 800896e:	d005      	beq.n	800897c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2220      	movs	r2, #32
 8008976:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008978:	2320      	movs	r3, #32
 800897a:	e02a      	b.n	80089d2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f240 523a 	movw	r2, #1338	; 0x53a
 8008984:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	061a      	lsls	r2, r3, #24
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	021b      	lsls	r3, r3, #8
 800898e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008992:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	0a1b      	lsrs	r3, r3, #8
 8008998:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800899c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	0e1b      	lsrs	r3, r3, #24
 80089a2:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80089a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a6:	601a      	str	r2, [r3, #0]
    scr++;
 80089a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089aa:	3304      	adds	r3, #4
 80089ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	061a      	lsls	r2, r3, #24
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	021b      	lsls	r3, r3, #8
 80089b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80089ba:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	0a1b      	lsrs	r3, r3, #8
 80089c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80089c4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	0e1b      	lsrs	r3, r3, #24
 80089ca:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80089cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ce:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	373c      	adds	r7, #60	; 0x3c
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd90      	pop	{r4, r7, pc}

080089da <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80089da:	b580      	push	{r7, lr}
 80089dc:	b086      	sub	sp, #24
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ec:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d03f      	beq.n	8008a74 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80089f4:	2300      	movs	r3, #0
 80089f6:	617b      	str	r3, [r7, #20]
 80089f8:	e033      	b.n	8008a62 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4618      	mov	r0, r3
 8008a00:	f001 f95e 	bl	8009cc0 <SDIO_ReadFIFO>
 8008a04:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	b2da      	uxtb	r2, r3
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	3301      	adds	r3, #1
 8008a12:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	3b01      	subs	r3, #1
 8008a18:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	0a1b      	lsrs	r3, r3, #8
 8008a1e:	b2da      	uxtb	r2, r3
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	3301      	adds	r3, #1
 8008a28:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	3b01      	subs	r3, #1
 8008a2e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	0c1b      	lsrs	r3, r3, #16
 8008a34:	b2da      	uxtb	r2, r3
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	3b01      	subs	r3, #1
 8008a44:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	0e1b      	lsrs	r3, r3, #24
 8008a4a:	b2da      	uxtb	r2, r3
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	3301      	adds	r3, #1
 8008a54:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	3301      	adds	r3, #1
 8008a60:	617b      	str	r3, [r7, #20]
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	2b07      	cmp	r3, #7
 8008a66:	d9c8      	bls.n	80089fa <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	693a      	ldr	r2, [r7, #16]
 8008a72:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8008a74:	bf00      	nop
 8008a76:	3718      	adds	r7, #24
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b086      	sub	sp, #24
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6a1b      	ldr	r3, [r3, #32]
 8008a88:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d043      	beq.n	8008b1e <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008a96:	2300      	movs	r3, #0
 8008a98:	617b      	str	r3, [r7, #20]
 8008a9a:	e037      	b.n	8008b0c <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	3b01      	subs	r3, #1
 8008aac:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	021a      	lsls	r2, r3, #8
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	3301      	adds	r3, #1
 8008abe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	041a      	lsls	r2, r3, #16
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	3b01      	subs	r3, #1
 8008adc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	061a      	lsls	r2, r3, #24
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	3301      	adds	r3, #1
 8008aee:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	3b01      	subs	r3, #1
 8008af4:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f107 0208 	add.w	r2, r7, #8
 8008afe:	4611      	mov	r1, r2
 8008b00:	4618      	mov	r0, r3
 8008b02:	f001 f8ea 	bl	8009cda <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	617b      	str	r3, [r7, #20]
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	2b07      	cmp	r3, #7
 8008b10:	d9c4      	bls.n	8008a9c <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	68fa      	ldr	r2, [r7, #12]
 8008b16:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	693a      	ldr	r2, [r7, #16]
 8008b1c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8008b1e:	bf00      	nop
 8008b20:	3718      	adds	r7, #24
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}

08008b26 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008b26:	b580      	push	{r7, lr}
 8008b28:	b082      	sub	sp, #8
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
 8008b2e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d101      	bne.n	8008b3a <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	e025      	b.n	8008b86 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d106      	bne.n	8008b54 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f7f8 fcfc 	bl	800154c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2202      	movs	r2, #2
 8008b58:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	3304      	adds	r3, #4
 8008b64:	4619      	mov	r1, r3
 8008b66:	4610      	mov	r0, r2
 8008b68:	f000 ff3e 	bl	80099e8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6818      	ldr	r0, [r3, #0]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	461a      	mov	r2, r3
 8008b76:	6839      	ldr	r1, [r7, #0]
 8008b78:	f000 ffa9 	bl	8009ace <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008b84:	2300      	movs	r3, #0
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3708      	adds	r7, #8
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b084      	sub	sp, #16
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	60f8      	str	r0, [r7, #12]
 8008b96:	60b9      	str	r1, [r7, #8]
 8008b98:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	d101      	bne.n	8008baa <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008ba6:	2302      	movs	r3, #2
 8008ba8:	e018      	b.n	8008bdc <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2202      	movs	r2, #2
 8008bae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	68b9      	ldr	r1, [r7, #8]
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f001 f806 	bl	8009bcc <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	2b02      	cmp	r3, #2
 8008bc6:	d104      	bne.n	8008bd2 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2205      	movs	r2, #5
 8008bcc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008bd0:	e003      	b.n	8008bda <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008bda:	2300      	movs	r3, #0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3710      	adds	r7, #16
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	d101      	bne.n	8008bfe <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008bfa:	2302      	movs	r3, #2
 8008bfc:	e00e      	b.n	8008c1c <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2202      	movs	r2, #2
 8008c02:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	6839      	ldr	r1, [r7, #0]
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f001 f819 	bl	8009c44 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2201      	movs	r2, #1
 8008c16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008c1a:	2300      	movs	r3, #0
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3708      	adds	r7, #8
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d101      	bne.n	8008c36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c32:	2301      	movs	r3, #1
 8008c34:	e041      	b.n	8008cba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d106      	bne.n	8008c50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f7fa f8aa 	bl	8002da4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2202      	movs	r2, #2
 8008c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	3304      	adds	r3, #4
 8008c60:	4619      	mov	r1, r3
 8008c62:	4610      	mov	r0, r2
 8008c64:	f000 f9ce 	bl	8009004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2201      	movs	r2, #1
 8008c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2201      	movs	r2, #1
 8008c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2201      	movs	r2, #1
 8008c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2201      	movs	r2, #1
 8008cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3708      	adds	r7, #8
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
	...

08008cc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b085      	sub	sp, #20
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d001      	beq.n	8008cdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e04e      	b.n	8008d7a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2202      	movs	r2, #2
 8008ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	68da      	ldr	r2, [r3, #12]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f042 0201 	orr.w	r2, r2, #1
 8008cf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a23      	ldr	r2, [pc, #140]	; (8008d88 <HAL_TIM_Base_Start_IT+0xc4>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d022      	beq.n	8008d44 <HAL_TIM_Base_Start_IT+0x80>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d06:	d01d      	beq.n	8008d44 <HAL_TIM_Base_Start_IT+0x80>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a1f      	ldr	r2, [pc, #124]	; (8008d8c <HAL_TIM_Base_Start_IT+0xc8>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d018      	beq.n	8008d44 <HAL_TIM_Base_Start_IT+0x80>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a1e      	ldr	r2, [pc, #120]	; (8008d90 <HAL_TIM_Base_Start_IT+0xcc>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d013      	beq.n	8008d44 <HAL_TIM_Base_Start_IT+0x80>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a1c      	ldr	r2, [pc, #112]	; (8008d94 <HAL_TIM_Base_Start_IT+0xd0>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d00e      	beq.n	8008d44 <HAL_TIM_Base_Start_IT+0x80>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a1b      	ldr	r2, [pc, #108]	; (8008d98 <HAL_TIM_Base_Start_IT+0xd4>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d009      	beq.n	8008d44 <HAL_TIM_Base_Start_IT+0x80>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a19      	ldr	r2, [pc, #100]	; (8008d9c <HAL_TIM_Base_Start_IT+0xd8>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d004      	beq.n	8008d44 <HAL_TIM_Base_Start_IT+0x80>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a18      	ldr	r2, [pc, #96]	; (8008da0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d111      	bne.n	8008d68 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	f003 0307 	and.w	r3, r3, #7
 8008d4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2b06      	cmp	r3, #6
 8008d54:	d010      	beq.n	8008d78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f042 0201 	orr.w	r2, r2, #1
 8008d64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d66:	e007      	b.n	8008d78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f042 0201 	orr.w	r2, r2, #1
 8008d76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3714      	adds	r7, #20
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr
 8008d86:	bf00      	nop
 8008d88:	40010000 	.word	0x40010000
 8008d8c:	40000400 	.word	0x40000400
 8008d90:	40000800 	.word	0x40000800
 8008d94:	40000c00 	.word	0x40000c00
 8008d98:	40010400 	.word	0x40010400
 8008d9c:	40014000 	.word	0x40014000
 8008da0:	40001800 	.word	0x40001800

08008da4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	691b      	ldr	r3, [r3, #16]
 8008db2:	f003 0302 	and.w	r3, r3, #2
 8008db6:	2b02      	cmp	r3, #2
 8008db8:	d122      	bne.n	8008e00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	68db      	ldr	r3, [r3, #12]
 8008dc0:	f003 0302 	and.w	r3, r3, #2
 8008dc4:	2b02      	cmp	r3, #2
 8008dc6:	d11b      	bne.n	8008e00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f06f 0202 	mvn.w	r2, #2
 8008dd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	699b      	ldr	r3, [r3, #24]
 8008dde:	f003 0303 	and.w	r3, r3, #3
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d003      	beq.n	8008dee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 f8ee 	bl	8008fc8 <HAL_TIM_IC_CaptureCallback>
 8008dec:	e005      	b.n	8008dfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 f8e0 	bl	8008fb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 f8f1 	bl	8008fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	691b      	ldr	r3, [r3, #16]
 8008e06:	f003 0304 	and.w	r3, r3, #4
 8008e0a:	2b04      	cmp	r3, #4
 8008e0c:	d122      	bne.n	8008e54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	f003 0304 	and.w	r3, r3, #4
 8008e18:	2b04      	cmp	r3, #4
 8008e1a:	d11b      	bne.n	8008e54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f06f 0204 	mvn.w	r2, #4
 8008e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2202      	movs	r2, #2
 8008e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	699b      	ldr	r3, [r3, #24]
 8008e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d003      	beq.n	8008e42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 f8c4 	bl	8008fc8 <HAL_TIM_IC_CaptureCallback>
 8008e40:	e005      	b.n	8008e4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 f8b6 	bl	8008fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 f8c7 	bl	8008fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2200      	movs	r2, #0
 8008e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	691b      	ldr	r3, [r3, #16]
 8008e5a:	f003 0308 	and.w	r3, r3, #8
 8008e5e:	2b08      	cmp	r3, #8
 8008e60:	d122      	bne.n	8008ea8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	f003 0308 	and.w	r3, r3, #8
 8008e6c:	2b08      	cmp	r3, #8
 8008e6e:	d11b      	bne.n	8008ea8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f06f 0208 	mvn.w	r2, #8
 8008e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2204      	movs	r2, #4
 8008e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	69db      	ldr	r3, [r3, #28]
 8008e86:	f003 0303 	and.w	r3, r3, #3
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d003      	beq.n	8008e96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 f89a 	bl	8008fc8 <HAL_TIM_IC_CaptureCallback>
 8008e94:	e005      	b.n	8008ea2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 f88c 	bl	8008fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 f89d 	bl	8008fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	691b      	ldr	r3, [r3, #16]
 8008eae:	f003 0310 	and.w	r3, r3, #16
 8008eb2:	2b10      	cmp	r3, #16
 8008eb4:	d122      	bne.n	8008efc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	f003 0310 	and.w	r3, r3, #16
 8008ec0:	2b10      	cmp	r3, #16
 8008ec2:	d11b      	bne.n	8008efc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f06f 0210 	mvn.w	r2, #16
 8008ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2208      	movs	r2, #8
 8008ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	69db      	ldr	r3, [r3, #28]
 8008eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d003      	beq.n	8008eea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 f870 	bl	8008fc8 <HAL_TIM_IC_CaptureCallback>
 8008ee8:	e005      	b.n	8008ef6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 f862 	bl	8008fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 f873 	bl	8008fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	691b      	ldr	r3, [r3, #16]
 8008f02:	f003 0301 	and.w	r3, r3, #1
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d10e      	bne.n	8008f28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	f003 0301 	and.w	r3, r3, #1
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d107      	bne.n	8008f28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f06f 0201 	mvn.w	r2, #1
 8008f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f7f9 fbd2 	bl	80026cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	691b      	ldr	r3, [r3, #16]
 8008f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f32:	2b80      	cmp	r3, #128	; 0x80
 8008f34:	d10e      	bne.n	8008f54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f40:	2b80      	cmp	r3, #128	; 0x80
 8008f42:	d107      	bne.n	8008f54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 f97e 	bl	8009250 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	691b      	ldr	r3, [r3, #16]
 8008f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f5e:	2b40      	cmp	r3, #64	; 0x40
 8008f60:	d10e      	bne.n	8008f80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f6c:	2b40      	cmp	r3, #64	; 0x40
 8008f6e:	d107      	bne.n	8008f80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 f838 	bl	8008ff0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	691b      	ldr	r3, [r3, #16]
 8008f86:	f003 0320 	and.w	r3, r3, #32
 8008f8a:	2b20      	cmp	r3, #32
 8008f8c:	d10e      	bne.n	8008fac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	68db      	ldr	r3, [r3, #12]
 8008f94:	f003 0320 	and.w	r3, r3, #32
 8008f98:	2b20      	cmp	r3, #32
 8008f9a:	d107      	bne.n	8008fac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f06f 0220 	mvn.w	r2, #32
 8008fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 f948 	bl	800923c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008fac:	bf00      	nop
 8008fae:	3708      	adds	r7, #8
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008fbc:	bf00      	nop
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008fd0:	bf00      	nop
 8008fd2:	370c      	adds	r7, #12
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008fe4:	bf00      	nop
 8008fe6:	370c      	adds	r7, #12
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr

08008ff0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ff8:	bf00      	nop
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009004:	b480      	push	{r7}
 8009006:	b085      	sub	sp, #20
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	4a40      	ldr	r2, [pc, #256]	; (8009118 <TIM_Base_SetConfig+0x114>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d013      	beq.n	8009044 <TIM_Base_SetConfig+0x40>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009022:	d00f      	beq.n	8009044 <TIM_Base_SetConfig+0x40>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	4a3d      	ldr	r2, [pc, #244]	; (800911c <TIM_Base_SetConfig+0x118>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d00b      	beq.n	8009044 <TIM_Base_SetConfig+0x40>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	4a3c      	ldr	r2, [pc, #240]	; (8009120 <TIM_Base_SetConfig+0x11c>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d007      	beq.n	8009044 <TIM_Base_SetConfig+0x40>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	4a3b      	ldr	r2, [pc, #236]	; (8009124 <TIM_Base_SetConfig+0x120>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d003      	beq.n	8009044 <TIM_Base_SetConfig+0x40>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	4a3a      	ldr	r2, [pc, #232]	; (8009128 <TIM_Base_SetConfig+0x124>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d108      	bne.n	8009056 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800904a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	68fa      	ldr	r2, [r7, #12]
 8009052:	4313      	orrs	r3, r2
 8009054:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	4a2f      	ldr	r2, [pc, #188]	; (8009118 <TIM_Base_SetConfig+0x114>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d02b      	beq.n	80090b6 <TIM_Base_SetConfig+0xb2>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009064:	d027      	beq.n	80090b6 <TIM_Base_SetConfig+0xb2>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	4a2c      	ldr	r2, [pc, #176]	; (800911c <TIM_Base_SetConfig+0x118>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d023      	beq.n	80090b6 <TIM_Base_SetConfig+0xb2>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	4a2b      	ldr	r2, [pc, #172]	; (8009120 <TIM_Base_SetConfig+0x11c>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d01f      	beq.n	80090b6 <TIM_Base_SetConfig+0xb2>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	4a2a      	ldr	r2, [pc, #168]	; (8009124 <TIM_Base_SetConfig+0x120>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d01b      	beq.n	80090b6 <TIM_Base_SetConfig+0xb2>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4a29      	ldr	r2, [pc, #164]	; (8009128 <TIM_Base_SetConfig+0x124>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d017      	beq.n	80090b6 <TIM_Base_SetConfig+0xb2>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4a28      	ldr	r2, [pc, #160]	; (800912c <TIM_Base_SetConfig+0x128>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d013      	beq.n	80090b6 <TIM_Base_SetConfig+0xb2>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	4a27      	ldr	r2, [pc, #156]	; (8009130 <TIM_Base_SetConfig+0x12c>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d00f      	beq.n	80090b6 <TIM_Base_SetConfig+0xb2>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	4a26      	ldr	r2, [pc, #152]	; (8009134 <TIM_Base_SetConfig+0x130>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d00b      	beq.n	80090b6 <TIM_Base_SetConfig+0xb2>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	4a25      	ldr	r2, [pc, #148]	; (8009138 <TIM_Base_SetConfig+0x134>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d007      	beq.n	80090b6 <TIM_Base_SetConfig+0xb2>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	4a24      	ldr	r2, [pc, #144]	; (800913c <TIM_Base_SetConfig+0x138>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d003      	beq.n	80090b6 <TIM_Base_SetConfig+0xb2>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	4a23      	ldr	r2, [pc, #140]	; (8009140 <TIM_Base_SetConfig+0x13c>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d108      	bne.n	80090c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	68fa      	ldr	r2, [r7, #12]
 80090c4:	4313      	orrs	r3, r2
 80090c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	695b      	ldr	r3, [r3, #20]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	68fa      	ldr	r2, [r7, #12]
 80090da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	689a      	ldr	r2, [r3, #8]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	4a0a      	ldr	r2, [pc, #40]	; (8009118 <TIM_Base_SetConfig+0x114>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d003      	beq.n	80090fc <TIM_Base_SetConfig+0xf8>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4a0c      	ldr	r2, [pc, #48]	; (8009128 <TIM_Base_SetConfig+0x124>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d103      	bne.n	8009104 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	691a      	ldr	r2, [r3, #16]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2201      	movs	r2, #1
 8009108:	615a      	str	r2, [r3, #20]
}
 800910a:	bf00      	nop
 800910c:	3714      	adds	r7, #20
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr
 8009116:	bf00      	nop
 8009118:	40010000 	.word	0x40010000
 800911c:	40000400 	.word	0x40000400
 8009120:	40000800 	.word	0x40000800
 8009124:	40000c00 	.word	0x40000c00
 8009128:	40010400 	.word	0x40010400
 800912c:	40014000 	.word	0x40014000
 8009130:	40014400 	.word	0x40014400
 8009134:	40014800 	.word	0x40014800
 8009138:	40001800 	.word	0x40001800
 800913c:	40001c00 	.word	0x40001c00
 8009140:	40002000 	.word	0x40002000

08009144 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009144:	b480      	push	{r7}
 8009146:	b085      	sub	sp, #20
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009154:	2b01      	cmp	r3, #1
 8009156:	d101      	bne.n	800915c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009158:	2302      	movs	r3, #2
 800915a:	e05a      	b.n	8009212 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2202      	movs	r2, #2
 8009168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009182:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	68fa      	ldr	r2, [r7, #12]
 800918a:	4313      	orrs	r3, r2
 800918c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	68fa      	ldr	r2, [r7, #12]
 8009194:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a21      	ldr	r2, [pc, #132]	; (8009220 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d022      	beq.n	80091e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091a8:	d01d      	beq.n	80091e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a1d      	ldr	r2, [pc, #116]	; (8009224 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d018      	beq.n	80091e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a1b      	ldr	r2, [pc, #108]	; (8009228 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d013      	beq.n	80091e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a1a      	ldr	r2, [pc, #104]	; (800922c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d00e      	beq.n	80091e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a18      	ldr	r2, [pc, #96]	; (8009230 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d009      	beq.n	80091e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a17      	ldr	r2, [pc, #92]	; (8009234 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d004      	beq.n	80091e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a15      	ldr	r2, [pc, #84]	; (8009238 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d10c      	bne.n	8009200 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	68ba      	ldr	r2, [r7, #8]
 80091f4:	4313      	orrs	r3, r2
 80091f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	68ba      	ldr	r2, [r7, #8]
 80091fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2201      	movs	r2, #1
 8009204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009210:	2300      	movs	r3, #0
}
 8009212:	4618      	mov	r0, r3
 8009214:	3714      	adds	r7, #20
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	40010000 	.word	0x40010000
 8009224:	40000400 	.word	0x40000400
 8009228:	40000800 	.word	0x40000800
 800922c:	40000c00 	.word	0x40000c00
 8009230:	40010400 	.word	0x40010400
 8009234:	40014000 	.word	0x40014000
 8009238:	40001800 	.word	0x40001800

0800923c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009244:	bf00      	nop
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009258:	bf00      	nop
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d101      	bne.n	8009276 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009272:	2301      	movs	r3, #1
 8009274:	e03f      	b.n	80092f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800927c:	b2db      	uxtb	r3, r3
 800927e:	2b00      	cmp	r3, #0
 8009280:	d106      	bne.n	8009290 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f7f9 fddc 	bl	8002e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2224      	movs	r2, #36	; 0x24
 8009294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	68da      	ldr	r2, [r3, #12]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80092a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 f929 	bl	8009500 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	691a      	ldr	r2, [r3, #16]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80092bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	695a      	ldr	r2, [r3, #20]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80092cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	68da      	ldr	r2, [r3, #12]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80092dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2220      	movs	r2, #32
 80092e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2220      	movs	r2, #32
 80092f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80092f4:	2300      	movs	r3, #0
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3708      	adds	r7, #8
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b08a      	sub	sp, #40	; 0x28
 8009302:	af02      	add	r7, sp, #8
 8009304:	60f8      	str	r0, [r7, #12]
 8009306:	60b9      	str	r1, [r7, #8]
 8009308:	603b      	str	r3, [r7, #0]
 800930a:	4613      	mov	r3, r2
 800930c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800930e:	2300      	movs	r3, #0
 8009310:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009318:	b2db      	uxtb	r3, r3
 800931a:	2b20      	cmp	r3, #32
 800931c:	d17c      	bne.n	8009418 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d002      	beq.n	800932a <HAL_UART_Transmit+0x2c>
 8009324:	88fb      	ldrh	r3, [r7, #6]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d101      	bne.n	800932e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800932a:	2301      	movs	r3, #1
 800932c:	e075      	b.n	800941a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009334:	2b01      	cmp	r3, #1
 8009336:	d101      	bne.n	800933c <HAL_UART_Transmit+0x3e>
 8009338:	2302      	movs	r3, #2
 800933a:	e06e      	b.n	800941a <HAL_UART_Transmit+0x11c>
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2201      	movs	r2, #1
 8009340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2200      	movs	r2, #0
 8009348:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2221      	movs	r2, #33	; 0x21
 800934e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009352:	f7f9 fe3b 	bl	8002fcc <HAL_GetTick>
 8009356:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	88fa      	ldrh	r2, [r7, #6]
 800935c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	88fa      	ldrh	r2, [r7, #6]
 8009362:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800936c:	d108      	bne.n	8009380 <HAL_UART_Transmit+0x82>
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d104      	bne.n	8009380 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009376:	2300      	movs	r3, #0
 8009378:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	61bb      	str	r3, [r7, #24]
 800937e:	e003      	b.n	8009388 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009384:	2300      	movs	r3, #0
 8009386:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2200      	movs	r2, #0
 800938c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009390:	e02a      	b.n	80093e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	9300      	str	r3, [sp, #0]
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	2200      	movs	r2, #0
 800939a:	2180      	movs	r1, #128	; 0x80
 800939c:	68f8      	ldr	r0, [r7, #12]
 800939e:	f000 f840 	bl	8009422 <UART_WaitOnFlagUntilTimeout>
 80093a2:	4603      	mov	r3, r0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d001      	beq.n	80093ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80093a8:	2303      	movs	r3, #3
 80093aa:	e036      	b.n	800941a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80093ac:	69fb      	ldr	r3, [r7, #28]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d10b      	bne.n	80093ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80093b2:	69bb      	ldr	r3, [r7, #24]
 80093b4:	881b      	ldrh	r3, [r3, #0]
 80093b6:	461a      	mov	r2, r3
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80093c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80093c2:	69bb      	ldr	r3, [r7, #24]
 80093c4:	3302      	adds	r3, #2
 80093c6:	61bb      	str	r3, [r7, #24]
 80093c8:	e007      	b.n	80093da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	781a      	ldrb	r2, [r3, #0]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80093d4:	69fb      	ldr	r3, [r7, #28]
 80093d6:	3301      	adds	r3, #1
 80093d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80093de:	b29b      	uxth	r3, r3
 80093e0:	3b01      	subs	r3, #1
 80093e2:	b29a      	uxth	r2, r3
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d1cf      	bne.n	8009392 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	9300      	str	r3, [sp, #0]
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	2200      	movs	r2, #0
 80093fa:	2140      	movs	r1, #64	; 0x40
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f000 f810 	bl	8009422 <UART_WaitOnFlagUntilTimeout>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d001      	beq.n	800940c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009408:	2303      	movs	r3, #3
 800940a:	e006      	b.n	800941a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2220      	movs	r2, #32
 8009410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009414:	2300      	movs	r3, #0
 8009416:	e000      	b.n	800941a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009418:	2302      	movs	r3, #2
  }
}
 800941a:	4618      	mov	r0, r3
 800941c:	3720      	adds	r7, #32
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b090      	sub	sp, #64	; 0x40
 8009426:	af00      	add	r7, sp, #0
 8009428:	60f8      	str	r0, [r7, #12]
 800942a:	60b9      	str	r1, [r7, #8]
 800942c:	603b      	str	r3, [r7, #0]
 800942e:	4613      	mov	r3, r2
 8009430:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009432:	e050      	b.n	80094d6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800943a:	d04c      	beq.n	80094d6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800943c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800943e:	2b00      	cmp	r3, #0
 8009440:	d007      	beq.n	8009452 <UART_WaitOnFlagUntilTimeout+0x30>
 8009442:	f7f9 fdc3 	bl	8002fcc <HAL_GetTick>
 8009446:	4602      	mov	r2, r0
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	1ad3      	subs	r3, r2, r3
 800944c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800944e:	429a      	cmp	r2, r3
 8009450:	d241      	bcs.n	80094d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	330c      	adds	r3, #12
 8009458:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800945a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800945c:	e853 3f00 	ldrex	r3, [r3]
 8009460:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009464:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009468:	63fb      	str	r3, [r7, #60]	; 0x3c
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	330c      	adds	r3, #12
 8009470:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009472:	637a      	str	r2, [r7, #52]	; 0x34
 8009474:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009476:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009478:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800947a:	e841 2300 	strex	r3, r2, [r1]
 800947e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009482:	2b00      	cmp	r3, #0
 8009484:	d1e5      	bne.n	8009452 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	3314      	adds	r3, #20
 800948c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	e853 3f00 	ldrex	r3, [r3]
 8009494:	613b      	str	r3, [r7, #16]
   return(result);
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	f023 0301 	bic.w	r3, r3, #1
 800949c:	63bb      	str	r3, [r7, #56]	; 0x38
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	3314      	adds	r3, #20
 80094a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094a6:	623a      	str	r2, [r7, #32]
 80094a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094aa:	69f9      	ldr	r1, [r7, #28]
 80094ac:	6a3a      	ldr	r2, [r7, #32]
 80094ae:	e841 2300 	strex	r3, r2, [r1]
 80094b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80094b4:	69bb      	ldr	r3, [r7, #24]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d1e5      	bne.n	8009486 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2220      	movs	r2, #32
 80094be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2220      	movs	r2, #32
 80094c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2200      	movs	r2, #0
 80094ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80094d2:	2303      	movs	r3, #3
 80094d4:	e00f      	b.n	80094f6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	681a      	ldr	r2, [r3, #0]
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	4013      	ands	r3, r2
 80094e0:	68ba      	ldr	r2, [r7, #8]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	bf0c      	ite	eq
 80094e6:	2301      	moveq	r3, #1
 80094e8:	2300      	movne	r3, #0
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	461a      	mov	r2, r3
 80094ee:	79fb      	ldrb	r3, [r7, #7]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d09f      	beq.n	8009434 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80094f4:	2300      	movs	r3, #0
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3740      	adds	r7, #64	; 0x40
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
	...

08009500 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009504:	b0c0      	sub	sp, #256	; 0x100
 8009506:	af00      	add	r7, sp, #0
 8009508:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800950c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	691b      	ldr	r3, [r3, #16]
 8009514:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800951c:	68d9      	ldr	r1, [r3, #12]
 800951e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	ea40 0301 	orr.w	r3, r0, r1
 8009528:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800952a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800952e:	689a      	ldr	r2, [r3, #8]
 8009530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009534:	691b      	ldr	r3, [r3, #16]
 8009536:	431a      	orrs	r2, r3
 8009538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800953c:	695b      	ldr	r3, [r3, #20]
 800953e:	431a      	orrs	r2, r3
 8009540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009544:	69db      	ldr	r3, [r3, #28]
 8009546:	4313      	orrs	r3, r2
 8009548:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800954c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	68db      	ldr	r3, [r3, #12]
 8009554:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009558:	f021 010c 	bic.w	r1, r1, #12
 800955c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009560:	681a      	ldr	r2, [r3, #0]
 8009562:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009566:	430b      	orrs	r3, r1
 8009568:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800956a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	695b      	ldr	r3, [r3, #20]
 8009572:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800957a:	6999      	ldr	r1, [r3, #24]
 800957c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	ea40 0301 	orr.w	r3, r0, r1
 8009586:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	4b8f      	ldr	r3, [pc, #572]	; (80097cc <UART_SetConfig+0x2cc>)
 8009590:	429a      	cmp	r2, r3
 8009592:	d005      	beq.n	80095a0 <UART_SetConfig+0xa0>
 8009594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	4b8d      	ldr	r3, [pc, #564]	; (80097d0 <UART_SetConfig+0x2d0>)
 800959c:	429a      	cmp	r2, r3
 800959e:	d104      	bne.n	80095aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80095a0:	f7fd fd08 	bl	8006fb4 <HAL_RCC_GetPCLK2Freq>
 80095a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80095a8:	e003      	b.n	80095b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80095aa:	f7fd fcef 	bl	8006f8c <HAL_RCC_GetPCLK1Freq>
 80095ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095b6:	69db      	ldr	r3, [r3, #28]
 80095b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095bc:	f040 810c 	bne.w	80097d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80095c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095c4:	2200      	movs	r2, #0
 80095c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80095ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80095ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80095d2:	4622      	mov	r2, r4
 80095d4:	462b      	mov	r3, r5
 80095d6:	1891      	adds	r1, r2, r2
 80095d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80095da:	415b      	adcs	r3, r3
 80095dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80095e2:	4621      	mov	r1, r4
 80095e4:	eb12 0801 	adds.w	r8, r2, r1
 80095e8:	4629      	mov	r1, r5
 80095ea:	eb43 0901 	adc.w	r9, r3, r1
 80095ee:	f04f 0200 	mov.w	r2, #0
 80095f2:	f04f 0300 	mov.w	r3, #0
 80095f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80095fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80095fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009602:	4690      	mov	r8, r2
 8009604:	4699      	mov	r9, r3
 8009606:	4623      	mov	r3, r4
 8009608:	eb18 0303 	adds.w	r3, r8, r3
 800960c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009610:	462b      	mov	r3, r5
 8009612:	eb49 0303 	adc.w	r3, r9, r3
 8009616:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800961a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	2200      	movs	r2, #0
 8009622:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009626:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800962a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800962e:	460b      	mov	r3, r1
 8009630:	18db      	adds	r3, r3, r3
 8009632:	653b      	str	r3, [r7, #80]	; 0x50
 8009634:	4613      	mov	r3, r2
 8009636:	eb42 0303 	adc.w	r3, r2, r3
 800963a:	657b      	str	r3, [r7, #84]	; 0x54
 800963c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009640:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009644:	f7f7 fb10 	bl	8000c68 <__aeabi_uldivmod>
 8009648:	4602      	mov	r2, r0
 800964a:	460b      	mov	r3, r1
 800964c:	4b61      	ldr	r3, [pc, #388]	; (80097d4 <UART_SetConfig+0x2d4>)
 800964e:	fba3 2302 	umull	r2, r3, r3, r2
 8009652:	095b      	lsrs	r3, r3, #5
 8009654:	011c      	lsls	r4, r3, #4
 8009656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800965a:	2200      	movs	r2, #0
 800965c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009660:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009664:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009668:	4642      	mov	r2, r8
 800966a:	464b      	mov	r3, r9
 800966c:	1891      	adds	r1, r2, r2
 800966e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009670:	415b      	adcs	r3, r3
 8009672:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009674:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009678:	4641      	mov	r1, r8
 800967a:	eb12 0a01 	adds.w	sl, r2, r1
 800967e:	4649      	mov	r1, r9
 8009680:	eb43 0b01 	adc.w	fp, r3, r1
 8009684:	f04f 0200 	mov.w	r2, #0
 8009688:	f04f 0300 	mov.w	r3, #0
 800968c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009690:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009694:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009698:	4692      	mov	sl, r2
 800969a:	469b      	mov	fp, r3
 800969c:	4643      	mov	r3, r8
 800969e:	eb1a 0303 	adds.w	r3, sl, r3
 80096a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80096a6:	464b      	mov	r3, r9
 80096a8:	eb4b 0303 	adc.w	r3, fp, r3
 80096ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80096b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	2200      	movs	r2, #0
 80096b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80096bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80096c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80096c4:	460b      	mov	r3, r1
 80096c6:	18db      	adds	r3, r3, r3
 80096c8:	643b      	str	r3, [r7, #64]	; 0x40
 80096ca:	4613      	mov	r3, r2
 80096cc:	eb42 0303 	adc.w	r3, r2, r3
 80096d0:	647b      	str	r3, [r7, #68]	; 0x44
 80096d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80096d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80096da:	f7f7 fac5 	bl	8000c68 <__aeabi_uldivmod>
 80096de:	4602      	mov	r2, r0
 80096e0:	460b      	mov	r3, r1
 80096e2:	4611      	mov	r1, r2
 80096e4:	4b3b      	ldr	r3, [pc, #236]	; (80097d4 <UART_SetConfig+0x2d4>)
 80096e6:	fba3 2301 	umull	r2, r3, r3, r1
 80096ea:	095b      	lsrs	r3, r3, #5
 80096ec:	2264      	movs	r2, #100	; 0x64
 80096ee:	fb02 f303 	mul.w	r3, r2, r3
 80096f2:	1acb      	subs	r3, r1, r3
 80096f4:	00db      	lsls	r3, r3, #3
 80096f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80096fa:	4b36      	ldr	r3, [pc, #216]	; (80097d4 <UART_SetConfig+0x2d4>)
 80096fc:	fba3 2302 	umull	r2, r3, r3, r2
 8009700:	095b      	lsrs	r3, r3, #5
 8009702:	005b      	lsls	r3, r3, #1
 8009704:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009708:	441c      	add	r4, r3
 800970a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800970e:	2200      	movs	r2, #0
 8009710:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009714:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009718:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800971c:	4642      	mov	r2, r8
 800971e:	464b      	mov	r3, r9
 8009720:	1891      	adds	r1, r2, r2
 8009722:	63b9      	str	r1, [r7, #56]	; 0x38
 8009724:	415b      	adcs	r3, r3
 8009726:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009728:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800972c:	4641      	mov	r1, r8
 800972e:	1851      	adds	r1, r2, r1
 8009730:	6339      	str	r1, [r7, #48]	; 0x30
 8009732:	4649      	mov	r1, r9
 8009734:	414b      	adcs	r3, r1
 8009736:	637b      	str	r3, [r7, #52]	; 0x34
 8009738:	f04f 0200 	mov.w	r2, #0
 800973c:	f04f 0300 	mov.w	r3, #0
 8009740:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009744:	4659      	mov	r1, fp
 8009746:	00cb      	lsls	r3, r1, #3
 8009748:	4651      	mov	r1, sl
 800974a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800974e:	4651      	mov	r1, sl
 8009750:	00ca      	lsls	r2, r1, #3
 8009752:	4610      	mov	r0, r2
 8009754:	4619      	mov	r1, r3
 8009756:	4603      	mov	r3, r0
 8009758:	4642      	mov	r2, r8
 800975a:	189b      	adds	r3, r3, r2
 800975c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009760:	464b      	mov	r3, r9
 8009762:	460a      	mov	r2, r1
 8009764:	eb42 0303 	adc.w	r3, r2, r3
 8009768:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800976c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009778:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800977c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009780:	460b      	mov	r3, r1
 8009782:	18db      	adds	r3, r3, r3
 8009784:	62bb      	str	r3, [r7, #40]	; 0x28
 8009786:	4613      	mov	r3, r2
 8009788:	eb42 0303 	adc.w	r3, r2, r3
 800978c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800978e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009792:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009796:	f7f7 fa67 	bl	8000c68 <__aeabi_uldivmod>
 800979a:	4602      	mov	r2, r0
 800979c:	460b      	mov	r3, r1
 800979e:	4b0d      	ldr	r3, [pc, #52]	; (80097d4 <UART_SetConfig+0x2d4>)
 80097a0:	fba3 1302 	umull	r1, r3, r3, r2
 80097a4:	095b      	lsrs	r3, r3, #5
 80097a6:	2164      	movs	r1, #100	; 0x64
 80097a8:	fb01 f303 	mul.w	r3, r1, r3
 80097ac:	1ad3      	subs	r3, r2, r3
 80097ae:	00db      	lsls	r3, r3, #3
 80097b0:	3332      	adds	r3, #50	; 0x32
 80097b2:	4a08      	ldr	r2, [pc, #32]	; (80097d4 <UART_SetConfig+0x2d4>)
 80097b4:	fba2 2303 	umull	r2, r3, r2, r3
 80097b8:	095b      	lsrs	r3, r3, #5
 80097ba:	f003 0207 	and.w	r2, r3, #7
 80097be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4422      	add	r2, r4
 80097c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80097c8:	e105      	b.n	80099d6 <UART_SetConfig+0x4d6>
 80097ca:	bf00      	nop
 80097cc:	40011000 	.word	0x40011000
 80097d0:	40011400 	.word	0x40011400
 80097d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80097d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097dc:	2200      	movs	r2, #0
 80097de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80097e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80097e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80097ea:	4642      	mov	r2, r8
 80097ec:	464b      	mov	r3, r9
 80097ee:	1891      	adds	r1, r2, r2
 80097f0:	6239      	str	r1, [r7, #32]
 80097f2:	415b      	adcs	r3, r3
 80097f4:	627b      	str	r3, [r7, #36]	; 0x24
 80097f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80097fa:	4641      	mov	r1, r8
 80097fc:	1854      	adds	r4, r2, r1
 80097fe:	4649      	mov	r1, r9
 8009800:	eb43 0501 	adc.w	r5, r3, r1
 8009804:	f04f 0200 	mov.w	r2, #0
 8009808:	f04f 0300 	mov.w	r3, #0
 800980c:	00eb      	lsls	r3, r5, #3
 800980e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009812:	00e2      	lsls	r2, r4, #3
 8009814:	4614      	mov	r4, r2
 8009816:	461d      	mov	r5, r3
 8009818:	4643      	mov	r3, r8
 800981a:	18e3      	adds	r3, r4, r3
 800981c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009820:	464b      	mov	r3, r9
 8009822:	eb45 0303 	adc.w	r3, r5, r3
 8009826:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800982a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	2200      	movs	r2, #0
 8009832:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009836:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800983a:	f04f 0200 	mov.w	r2, #0
 800983e:	f04f 0300 	mov.w	r3, #0
 8009842:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009846:	4629      	mov	r1, r5
 8009848:	008b      	lsls	r3, r1, #2
 800984a:	4621      	mov	r1, r4
 800984c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009850:	4621      	mov	r1, r4
 8009852:	008a      	lsls	r2, r1, #2
 8009854:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009858:	f7f7 fa06 	bl	8000c68 <__aeabi_uldivmod>
 800985c:	4602      	mov	r2, r0
 800985e:	460b      	mov	r3, r1
 8009860:	4b60      	ldr	r3, [pc, #384]	; (80099e4 <UART_SetConfig+0x4e4>)
 8009862:	fba3 2302 	umull	r2, r3, r3, r2
 8009866:	095b      	lsrs	r3, r3, #5
 8009868:	011c      	lsls	r4, r3, #4
 800986a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800986e:	2200      	movs	r2, #0
 8009870:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009874:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009878:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800987c:	4642      	mov	r2, r8
 800987e:	464b      	mov	r3, r9
 8009880:	1891      	adds	r1, r2, r2
 8009882:	61b9      	str	r1, [r7, #24]
 8009884:	415b      	adcs	r3, r3
 8009886:	61fb      	str	r3, [r7, #28]
 8009888:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800988c:	4641      	mov	r1, r8
 800988e:	1851      	adds	r1, r2, r1
 8009890:	6139      	str	r1, [r7, #16]
 8009892:	4649      	mov	r1, r9
 8009894:	414b      	adcs	r3, r1
 8009896:	617b      	str	r3, [r7, #20]
 8009898:	f04f 0200 	mov.w	r2, #0
 800989c:	f04f 0300 	mov.w	r3, #0
 80098a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80098a4:	4659      	mov	r1, fp
 80098a6:	00cb      	lsls	r3, r1, #3
 80098a8:	4651      	mov	r1, sl
 80098aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80098ae:	4651      	mov	r1, sl
 80098b0:	00ca      	lsls	r2, r1, #3
 80098b2:	4610      	mov	r0, r2
 80098b4:	4619      	mov	r1, r3
 80098b6:	4603      	mov	r3, r0
 80098b8:	4642      	mov	r2, r8
 80098ba:	189b      	adds	r3, r3, r2
 80098bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80098c0:	464b      	mov	r3, r9
 80098c2:	460a      	mov	r2, r1
 80098c4:	eb42 0303 	adc.w	r3, r2, r3
 80098c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80098cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80098d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80098d8:	f04f 0200 	mov.w	r2, #0
 80098dc:	f04f 0300 	mov.w	r3, #0
 80098e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80098e4:	4649      	mov	r1, r9
 80098e6:	008b      	lsls	r3, r1, #2
 80098e8:	4641      	mov	r1, r8
 80098ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80098ee:	4641      	mov	r1, r8
 80098f0:	008a      	lsls	r2, r1, #2
 80098f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80098f6:	f7f7 f9b7 	bl	8000c68 <__aeabi_uldivmod>
 80098fa:	4602      	mov	r2, r0
 80098fc:	460b      	mov	r3, r1
 80098fe:	4b39      	ldr	r3, [pc, #228]	; (80099e4 <UART_SetConfig+0x4e4>)
 8009900:	fba3 1302 	umull	r1, r3, r3, r2
 8009904:	095b      	lsrs	r3, r3, #5
 8009906:	2164      	movs	r1, #100	; 0x64
 8009908:	fb01 f303 	mul.w	r3, r1, r3
 800990c:	1ad3      	subs	r3, r2, r3
 800990e:	011b      	lsls	r3, r3, #4
 8009910:	3332      	adds	r3, #50	; 0x32
 8009912:	4a34      	ldr	r2, [pc, #208]	; (80099e4 <UART_SetConfig+0x4e4>)
 8009914:	fba2 2303 	umull	r2, r3, r2, r3
 8009918:	095b      	lsrs	r3, r3, #5
 800991a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800991e:	441c      	add	r4, r3
 8009920:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009924:	2200      	movs	r2, #0
 8009926:	673b      	str	r3, [r7, #112]	; 0x70
 8009928:	677a      	str	r2, [r7, #116]	; 0x74
 800992a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800992e:	4642      	mov	r2, r8
 8009930:	464b      	mov	r3, r9
 8009932:	1891      	adds	r1, r2, r2
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	415b      	adcs	r3, r3
 8009938:	60fb      	str	r3, [r7, #12]
 800993a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800993e:	4641      	mov	r1, r8
 8009940:	1851      	adds	r1, r2, r1
 8009942:	6039      	str	r1, [r7, #0]
 8009944:	4649      	mov	r1, r9
 8009946:	414b      	adcs	r3, r1
 8009948:	607b      	str	r3, [r7, #4]
 800994a:	f04f 0200 	mov.w	r2, #0
 800994e:	f04f 0300 	mov.w	r3, #0
 8009952:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009956:	4659      	mov	r1, fp
 8009958:	00cb      	lsls	r3, r1, #3
 800995a:	4651      	mov	r1, sl
 800995c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009960:	4651      	mov	r1, sl
 8009962:	00ca      	lsls	r2, r1, #3
 8009964:	4610      	mov	r0, r2
 8009966:	4619      	mov	r1, r3
 8009968:	4603      	mov	r3, r0
 800996a:	4642      	mov	r2, r8
 800996c:	189b      	adds	r3, r3, r2
 800996e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009970:	464b      	mov	r3, r9
 8009972:	460a      	mov	r2, r1
 8009974:	eb42 0303 	adc.w	r3, r2, r3
 8009978:	66fb      	str	r3, [r7, #108]	; 0x6c
 800997a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	2200      	movs	r2, #0
 8009982:	663b      	str	r3, [r7, #96]	; 0x60
 8009984:	667a      	str	r2, [r7, #100]	; 0x64
 8009986:	f04f 0200 	mov.w	r2, #0
 800998a:	f04f 0300 	mov.w	r3, #0
 800998e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009992:	4649      	mov	r1, r9
 8009994:	008b      	lsls	r3, r1, #2
 8009996:	4641      	mov	r1, r8
 8009998:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800999c:	4641      	mov	r1, r8
 800999e:	008a      	lsls	r2, r1, #2
 80099a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80099a4:	f7f7 f960 	bl	8000c68 <__aeabi_uldivmod>
 80099a8:	4602      	mov	r2, r0
 80099aa:	460b      	mov	r3, r1
 80099ac:	4b0d      	ldr	r3, [pc, #52]	; (80099e4 <UART_SetConfig+0x4e4>)
 80099ae:	fba3 1302 	umull	r1, r3, r3, r2
 80099b2:	095b      	lsrs	r3, r3, #5
 80099b4:	2164      	movs	r1, #100	; 0x64
 80099b6:	fb01 f303 	mul.w	r3, r1, r3
 80099ba:	1ad3      	subs	r3, r2, r3
 80099bc:	011b      	lsls	r3, r3, #4
 80099be:	3332      	adds	r3, #50	; 0x32
 80099c0:	4a08      	ldr	r2, [pc, #32]	; (80099e4 <UART_SetConfig+0x4e4>)
 80099c2:	fba2 2303 	umull	r2, r3, r2, r3
 80099c6:	095b      	lsrs	r3, r3, #5
 80099c8:	f003 020f 	and.w	r2, r3, #15
 80099cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4422      	add	r2, r4
 80099d4:	609a      	str	r2, [r3, #8]
}
 80099d6:	bf00      	nop
 80099d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80099dc:	46bd      	mov	sp, r7
 80099de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80099e2:	bf00      	nop
 80099e4:	51eb851f 	.word	0x51eb851f

080099e8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b085      	sub	sp, #20
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80099f2:	2300      	movs	r3, #0
 80099f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80099f6:	2300      	movs	r3, #0
 80099f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d029      	beq.n	8009a56 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009a0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009a12:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009a1c:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8009a22:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8009a28:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8009a2e:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8009a34:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8009a3a:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8009a40:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8009a46:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009a48:	68fa      	ldr	r2, [r7, #12]
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	68fa      	ldr	r2, [r7, #12]
 8009a52:	601a      	str	r2, [r3, #0]
 8009a54:	e034      	b.n	8009ac0 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009a62:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009a6c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8009a72:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009a74:	68fa      	ldr	r2, [r7, #12]
 8009a76:	4313      	orrs	r3, r2
 8009a78:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009a86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009a8a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009a94:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8009a9a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8009aa0:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8009aa6:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8009aac:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009aae:	68ba      	ldr	r2, [r7, #8]
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	68fa      	ldr	r2, [r7, #12]
 8009ab8:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	68ba      	ldr	r2, [r7, #8]
 8009abe:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8009ac0:	2300      	movs	r3, #0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3714      	adds	r7, #20
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr

08009ace <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009ace:	b480      	push	{r7}
 8009ad0:	b087      	sub	sp, #28
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	60f8      	str	r0, [r7, #12]
 8009ad6:	60b9      	str	r1, [r7, #8]
 8009ad8:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8009ada:	2300      	movs	r3, #0
 8009adc:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d02e      	beq.n	8009b46 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009af4:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	3b01      	subs	r3, #1
 8009b02:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8009b04:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	3b01      	subs	r3, #1
 8009b0c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8009b0e:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	3b01      	subs	r3, #1
 8009b16:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8009b18:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	691b      	ldr	r3, [r3, #16]
 8009b1e:	3b01      	subs	r3, #1
 8009b20:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009b22:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	695b      	ldr	r3, [r3, #20]
 8009b28:	3b01      	subs	r3, #1
 8009b2a:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8009b2c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	699b      	ldr	r3, [r3, #24]
 8009b32:	3b01      	subs	r3, #1
 8009b34:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8009b36:	4313      	orrs	r3, r2
 8009b38:	697a      	ldr	r2, [r7, #20]
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	697a      	ldr	r2, [r7, #20]
 8009b42:	609a      	str	r2, [r3, #8]
 8009b44:	e03b      	b.n	8009bbe <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	689b      	ldr	r3, [r3, #8]
 8009b4a:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009b52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009b56:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	68db      	ldr	r3, [r3, #12]
 8009b5c:	3b01      	subs	r3, #1
 8009b5e:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	695b      	ldr	r3, [r3, #20]
 8009b64:	3b01      	subs	r3, #1
 8009b66:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	697a      	ldr	r2, [r7, #20]
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009b7c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	3b01      	subs	r3, #1
 8009b8a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009b8c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	689b      	ldr	r3, [r3, #8]
 8009b92:	3b01      	subs	r3, #1
 8009b94:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8009b96:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	691b      	ldr	r3, [r3, #16]
 8009b9c:	3b01      	subs	r3, #1
 8009b9e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009ba0:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	699b      	ldr	r3, [r3, #24]
 8009ba6:	3b01      	subs	r3, #1
 8009ba8:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009baa:	4313      	orrs	r3, r2
 8009bac:	693a      	ldr	r2, [r7, #16]
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	697a      	ldr	r2, [r7, #20]
 8009bb6:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	693a      	ldr	r2, [r7, #16]
 8009bbc:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8009bbe:	2300      	movs	r3, #0
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	371c      	adds	r7, #28
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr

08009bcc <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b086      	sub	sp, #24
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	60f8      	str	r0, [r7, #12]
 8009bd4:	60b9      	str	r1, [r7, #8]
 8009bd6:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009be8:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	3b01      	subs	r3, #1
 8009bf0:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8009bf2:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8009bfe:	693a      	ldr	r2, [r7, #16]
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8009c04:	f7f9 f9e2 	bl	8002fcc <HAL_GetTick>
 8009c08:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009c0a:	e010      	b.n	8009c2e <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c12:	d00c      	beq.n	8009c2e <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d007      	beq.n	8009c2a <FMC_SDRAM_SendCommand+0x5e>
 8009c1a:	f7f9 f9d7 	bl	8002fcc <HAL_GetTick>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	1ad3      	subs	r3, r2, r3
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d201      	bcs.n	8009c2e <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8009c2a:	2303      	movs	r3, #3
 8009c2c:	e006      	b.n	8009c3c <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	699b      	ldr	r3, [r3, #24]
 8009c32:	f003 0320 	and.w	r3, r3, #32
 8009c36:	2b20      	cmp	r3, #32
 8009c38:	d0e8      	beq.n	8009c0c <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8009c3a:	2300      	movs	r3, #0
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3718      	adds	r7, #24
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	695a      	ldr	r2, [r3, #20]
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	005b      	lsls	r3, r3, #1
 8009c56:	431a      	orrs	r2, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8009c5c:	2300      	movs	r3, #0
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	370c      	adds	r7, #12
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr

08009c6a <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009c6a:	b084      	sub	sp, #16
 8009c6c:	b480      	push	{r7}
 8009c6e:	b085      	sub	sp, #20
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	f107 001c 	add.w	r0, r7, #28
 8009c78:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009c80:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009c82:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009c84:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009c88:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009c8c:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009c90:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009c94:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009c96:	68fa      	ldr	r2, [r7, #12]
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8009ca4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009ca8:	68fa      	ldr	r2, [r7, #12]
 8009caa:	431a      	orrs	r2, r3
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009cb0:	2300      	movs	r3, #0
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3714      	adds	r7, #20
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	b004      	add	sp, #16
 8009cbe:	4770      	bx	lr

08009cc0 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b083      	sub	sp, #12
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	370c      	adds	r7, #12
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr

08009cda <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009cda:	b480      	push	{r7}
 8009cdc:	b083      	sub	sp, #12
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
 8009ce2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	681a      	ldr	r2, [r3, #0]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009cee:	2300      	movs	r3, #0
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	370c      	adds	r7, #12
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr

08009cfc <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b082      	sub	sp, #8
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2203      	movs	r2, #3
 8009d08:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8009d0a:	2002      	movs	r0, #2
 8009d0c:	f7f9 f96a 	bl	8002fe4 <HAL_Delay>
  
  return HAL_OK;
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3708      	adds	r7, #8
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009d1a:	b480      	push	{r7}
 8009d1c:	b083      	sub	sp, #12
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f003 0303 	and.w	r3, r3, #3
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	370c      	adds	r7, #12
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr

08009d36 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009d36:	b480      	push	{r7}
 8009d38:	b085      	sub	sp, #20
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
 8009d3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009d40:	2300      	movs	r3, #0
 8009d42:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	681a      	ldr	r2, [r3, #0]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009d54:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009d5a:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009d60:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009d62:	68fa      	ldr	r2, [r7, #12]
 8009d64:	4313      	orrs	r3, r2
 8009d66:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	68db      	ldr	r3, [r3, #12]
 8009d6c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009d70:	f023 030f 	bic.w	r3, r3, #15
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	431a      	orrs	r2, r3
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009d7c:	2300      	movs	r3, #0
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3714      	adds	r7, #20
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr

08009d8a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009d8a:	b480      	push	{r7}
 8009d8c:	b083      	sub	sp, #12
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	691b      	ldr	r3, [r3, #16]
 8009d96:	b2db      	uxtb	r3, r3
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	370c      	adds	r7, #12
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b085      	sub	sp, #20
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	3314      	adds	r3, #20
 8009db2:	461a      	mov	r2, r3
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	4413      	add	r3, r2
 8009db8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
}  
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3714      	adds	r7, #20
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr

08009dca <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009dca:	b480      	push	{r7}
 8009dcc:	b085      	sub	sp, #20
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
 8009dd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	681a      	ldr	r2, [r3, #0]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	685a      	ldr	r2, [r3, #4]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009df0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009df6:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009dfc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009dfe:	68fa      	ldr	r2, [r7, #12]
 8009e00:	4313      	orrs	r3, r2
 8009e02:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e08:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	431a      	orrs	r2, r3
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009e14:	2300      	movs	r3, #0

}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3714      	adds	r7, #20
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr

08009e22 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b088      	sub	sp, #32
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
 8009e2a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009e30:	2310      	movs	r3, #16
 8009e32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e34:	2340      	movs	r3, #64	; 0x40
 8009e36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e40:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e42:	f107 0308 	add.w	r3, r7, #8
 8009e46:	4619      	mov	r1, r3
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f7ff ff74 	bl	8009d36 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e52:	2110      	movs	r1, #16
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 fa45 	bl	800a2e4 <SDMMC_GetCmdResp1>
 8009e5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e5c:	69fb      	ldr	r3, [r7, #28]
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3720      	adds	r7, #32
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}

08009e66 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009e66:	b580      	push	{r7, lr}
 8009e68:	b088      	sub	sp, #32
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
 8009e6e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009e74:	2311      	movs	r3, #17
 8009e76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e78:	2340      	movs	r3, #64	; 0x40
 8009e7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e84:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e86:	f107 0308 	add.w	r3, r7, #8
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f7ff ff52 	bl	8009d36 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e96:	2111      	movs	r1, #17
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 fa23 	bl	800a2e4 <SDMMC_GetCmdResp1>
 8009e9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ea0:	69fb      	ldr	r3, [r7, #28]
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3720      	adds	r7, #32
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}

08009eaa <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009eaa:	b580      	push	{r7, lr}
 8009eac:	b088      	sub	sp, #32
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
 8009eb2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009eb8:	2312      	movs	r3, #18
 8009eba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ebc:	2340      	movs	r3, #64	; 0x40
 8009ebe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ec8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009eca:	f107 0308 	add.w	r3, r7, #8
 8009ece:	4619      	mov	r1, r3
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f7ff ff30 	bl	8009d36 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009eda:	2112      	movs	r1, #18
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f000 fa01 	bl	800a2e4 <SDMMC_GetCmdResp1>
 8009ee2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ee4:	69fb      	ldr	r3, [r7, #28]
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3720      	adds	r7, #32
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}

08009eee <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b088      	sub	sp, #32
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
 8009ef6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009efc:	2318      	movs	r3, #24
 8009efe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f00:	2340      	movs	r3, #64	; 0x40
 8009f02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f04:	2300      	movs	r3, #0
 8009f06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f0c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f0e:	f107 0308 	add.w	r3, r7, #8
 8009f12:	4619      	mov	r1, r3
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f7ff ff0e 	bl	8009d36 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f1e:	2118      	movs	r1, #24
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 f9df 	bl	800a2e4 <SDMMC_GetCmdResp1>
 8009f26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f28:	69fb      	ldr	r3, [r7, #28]
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3720      	adds	r7, #32
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}

08009f32 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009f32:	b580      	push	{r7, lr}
 8009f34:	b088      	sub	sp, #32
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
 8009f3a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009f40:	2319      	movs	r3, #25
 8009f42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f44:	2340      	movs	r3, #64	; 0x40
 8009f46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f50:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f52:	f107 0308 	add.w	r3, r7, #8
 8009f56:	4619      	mov	r1, r3
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f7ff feec 	bl	8009d36 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f62:	2119      	movs	r1, #25
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 f9bd 	bl	800a2e4 <SDMMC_GetCmdResp1>
 8009f6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f6c:	69fb      	ldr	r3, [r7, #28]
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3720      	adds	r7, #32
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
	...

08009f78 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b088      	sub	sp, #32
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009f80:	2300      	movs	r3, #0
 8009f82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009f84:	230c      	movs	r3, #12
 8009f86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f88:	2340      	movs	r3, #64	; 0x40
 8009f8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f94:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f96:	f107 0308 	add.w	r3, r7, #8
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f7ff feca 	bl	8009d36 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009fa2:	4a05      	ldr	r2, [pc, #20]	; (8009fb8 <SDMMC_CmdStopTransfer+0x40>)
 8009fa4:	210c      	movs	r1, #12
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 f99c 	bl	800a2e4 <SDMMC_GetCmdResp1>
 8009fac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fae:	69fb      	ldr	r3, [r7, #28]
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3720      	adds	r7, #32
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}
 8009fb8:	05f5e100 	.word	0x05f5e100

08009fbc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b08a      	sub	sp, #40	; 0x28
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009fcc:	2307      	movs	r3, #7
 8009fce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009fd0:	2340      	movs	r3, #64	; 0x40
 8009fd2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009fd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fdc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009fde:	f107 0310 	add.w	r3, r7, #16
 8009fe2:	4619      	mov	r1, r3
 8009fe4:	68f8      	ldr	r0, [r7, #12]
 8009fe6:	f7ff fea6 	bl	8009d36 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fee:	2107      	movs	r1, #7
 8009ff0:	68f8      	ldr	r0, [r7, #12]
 8009ff2:	f000 f977 	bl	800a2e4 <SDMMC_GetCmdResp1>
 8009ff6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3728      	adds	r7, #40	; 0x28
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a002:	b580      	push	{r7, lr}
 800a004:	b088      	sub	sp, #32
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a00a:	2300      	movs	r3, #0
 800a00c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a00e:	2300      	movs	r3, #0
 800a010:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a012:	2300      	movs	r3, #0
 800a014:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a016:	2300      	movs	r3, #0
 800a018:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a01a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a01e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a020:	f107 0308 	add.w	r3, r7, #8
 800a024:	4619      	mov	r1, r3
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f7ff fe85 	bl	8009d36 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f000 f92d 	bl	800a28c <SDMMC_GetCmdError>
 800a032:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a034:	69fb      	ldr	r3, [r7, #28]
}
 800a036:	4618      	mov	r0, r3
 800a038:	3720      	adds	r7, #32
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}

0800a03e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a03e:	b580      	push	{r7, lr}
 800a040:	b088      	sub	sp, #32
 800a042:	af00      	add	r7, sp, #0
 800a044:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a046:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a04a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a04c:	2308      	movs	r3, #8
 800a04e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a050:	2340      	movs	r3, #64	; 0x40
 800a052:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a054:	2300      	movs	r3, #0
 800a056:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a058:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a05c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a05e:	f107 0308 	add.w	r3, r7, #8
 800a062:	4619      	mov	r1, r3
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f7ff fe66 	bl	8009d36 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 fb24 	bl	800a6b8 <SDMMC_GetCmdResp7>
 800a070:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a072:	69fb      	ldr	r3, [r7, #28]
}
 800a074:	4618      	mov	r0, r3
 800a076:	3720      	adds	r7, #32
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b088      	sub	sp, #32
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a08a:	2337      	movs	r3, #55	; 0x37
 800a08c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a08e:	2340      	movs	r3, #64	; 0x40
 800a090:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a092:	2300      	movs	r3, #0
 800a094:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a09a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a09c:	f107 0308 	add.w	r3, r7, #8
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f7ff fe47 	bl	8009d36 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a0a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0ac:	2137      	movs	r1, #55	; 0x37
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 f918 	bl	800a2e4 <SDMMC_GetCmdResp1>
 800a0b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0b6:	69fb      	ldr	r3, [r7, #28]
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3720      	adds	r7, #32
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b088      	sub	sp, #32
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a0d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a0d6:	2329      	movs	r3, #41	; 0x29
 800a0d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a0da:	2340      	movs	r3, #64	; 0x40
 800a0dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a0e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a0e8:	f107 0308 	add.w	r3, r7, #8
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f7ff fe21 	bl	8009d36 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f000 fa2b 	bl	800a550 <SDMMC_GetCmdResp3>
 800a0fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0fc:	69fb      	ldr	r3, [r7, #28]
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3720      	adds	r7, #32
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}

0800a106 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800a106:	b580      	push	{r7, lr}
 800a108:	b088      	sub	sp, #32
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
 800a10e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a114:	2306      	movs	r3, #6
 800a116:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a118:	2340      	movs	r3, #64	; 0x40
 800a11a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a11c:	2300      	movs	r3, #0
 800a11e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a120:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a124:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a126:	f107 0308 	add.w	r3, r7, #8
 800a12a:	4619      	mov	r1, r3
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f7ff fe02 	bl	8009d36 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800a132:	f241 3288 	movw	r2, #5000	; 0x1388
 800a136:	2106      	movs	r1, #6
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 f8d3 	bl	800a2e4 <SDMMC_GetCmdResp1>
 800a13e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a140:	69fb      	ldr	r3, [r7, #28]
}
 800a142:	4618      	mov	r0, r3
 800a144:	3720      	adds	r7, #32
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b088      	sub	sp, #32
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a152:	2300      	movs	r3, #0
 800a154:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a156:	2333      	movs	r3, #51	; 0x33
 800a158:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a15a:	2340      	movs	r3, #64	; 0x40
 800a15c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a15e:	2300      	movs	r3, #0
 800a160:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a162:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a166:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a168:	f107 0308 	add.w	r3, r7, #8
 800a16c:	4619      	mov	r1, r3
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f7ff fde1 	bl	8009d36 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800a174:	f241 3288 	movw	r2, #5000	; 0x1388
 800a178:	2133      	movs	r1, #51	; 0x33
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f000 f8b2 	bl	800a2e4 <SDMMC_GetCmdResp1>
 800a180:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a182:	69fb      	ldr	r3, [r7, #28]
}
 800a184:	4618      	mov	r0, r3
 800a186:	3720      	adds	r7, #32
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b088      	sub	sp, #32
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a194:	2300      	movs	r3, #0
 800a196:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a198:	2302      	movs	r3, #2
 800a19a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a19c:	23c0      	movs	r3, #192	; 0xc0
 800a19e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a1a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1aa:	f107 0308 	add.w	r3, r7, #8
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f7ff fdc0 	bl	8009d36 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 f982 	bl	800a4c0 <SDMMC_GetCmdResp2>
 800a1bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1be:	69fb      	ldr	r3, [r7, #28]
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3720      	adds	r7, #32
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b088      	sub	sp, #32
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a1d6:	2309      	movs	r3, #9
 800a1d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a1da:	23c0      	movs	r3, #192	; 0xc0
 800a1dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a1e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1e8:	f107 0308 	add.w	r3, r7, #8
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f7ff fda1 	bl	8009d36 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f000 f963 	bl	800a4c0 <SDMMC_GetCmdResp2>
 800a1fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1fc:	69fb      	ldr	r3, [r7, #28]
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3720      	adds	r7, #32
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}

0800a206 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a206:	b580      	push	{r7, lr}
 800a208:	b088      	sub	sp, #32
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	6078      	str	r0, [r7, #4]
 800a20e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a210:	2300      	movs	r3, #0
 800a212:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a214:	2303      	movs	r3, #3
 800a216:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a218:	2340      	movs	r3, #64	; 0x40
 800a21a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a21c:	2300      	movs	r3, #0
 800a21e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a224:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a226:	f107 0308 	add.w	r3, r7, #8
 800a22a:	4619      	mov	r1, r3
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f7ff fd82 	bl	8009d36 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a232:	683a      	ldr	r2, [r7, #0]
 800a234:	2103      	movs	r1, #3
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f000 f9c8 	bl	800a5cc <SDMMC_GetCmdResp6>
 800a23c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a23e:	69fb      	ldr	r3, [r7, #28]
}
 800a240:	4618      	mov	r0, r3
 800a242:	3720      	adds	r7, #32
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b088      	sub	sp, #32
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a256:	230d      	movs	r3, #13
 800a258:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a25a:	2340      	movs	r3, #64	; 0x40
 800a25c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a25e:	2300      	movs	r3, #0
 800a260:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a262:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a266:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a268:	f107 0308 	add.w	r3, r7, #8
 800a26c:	4619      	mov	r1, r3
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f7ff fd61 	bl	8009d36 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a274:	f241 3288 	movw	r2, #5000	; 0x1388
 800a278:	210d      	movs	r1, #13
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 f832 	bl	800a2e4 <SDMMC_GetCmdResp1>
 800a280:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a282:	69fb      	ldr	r3, [r7, #28]
}
 800a284:	4618      	mov	r0, r3
 800a286:	3720      	adds	r7, #32
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b085      	sub	sp, #20
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a294:	4b11      	ldr	r3, [pc, #68]	; (800a2dc <SDMMC_GetCmdError+0x50>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4a11      	ldr	r2, [pc, #68]	; (800a2e0 <SDMMC_GetCmdError+0x54>)
 800a29a:	fba2 2303 	umull	r2, r3, r2, r3
 800a29e:	0a5b      	lsrs	r3, r3, #9
 800a2a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2a4:	fb02 f303 	mul.w	r3, r2, r3
 800a2a8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	1e5a      	subs	r2, r3, #1
 800a2ae:	60fa      	str	r2, [r7, #12]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d102      	bne.n	800a2ba <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a2b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a2b8:	e009      	b.n	800a2ce <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d0f1      	beq.n	800a2aa <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	22c5      	movs	r2, #197	; 0xc5
 800a2ca:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a2cc:	2300      	movs	r3, #0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3714      	adds	r7, #20
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr
 800a2da:	bf00      	nop
 800a2dc:	20000000 	.word	0x20000000
 800a2e0:	10624dd3 	.word	0x10624dd3

0800a2e4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b088      	sub	sp, #32
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	60f8      	str	r0, [r7, #12]
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	607a      	str	r2, [r7, #4]
 800a2f0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a2f2:	4b70      	ldr	r3, [pc, #448]	; (800a4b4 <SDMMC_GetCmdResp1+0x1d0>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a70      	ldr	r2, [pc, #448]	; (800a4b8 <SDMMC_GetCmdResp1+0x1d4>)
 800a2f8:	fba2 2303 	umull	r2, r3, r2, r3
 800a2fc:	0a5a      	lsrs	r2, r3, #9
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	fb02 f303 	mul.w	r3, r2, r3
 800a304:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	1e5a      	subs	r2, r3, #1
 800a30a:	61fa      	str	r2, [r7, #28]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d102      	bne.n	800a316 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a310:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a314:	e0c9      	b.n	800a4aa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a31a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a31c:	69bb      	ldr	r3, [r7, #24]
 800a31e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a322:	2b00      	cmp	r3, #0
 800a324:	d0ef      	beq.n	800a306 <SDMMC_GetCmdResp1+0x22>
 800a326:	69bb      	ldr	r3, [r7, #24]
 800a328:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d1ea      	bne.n	800a306 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a334:	f003 0304 	and.w	r3, r3, #4
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d004      	beq.n	800a346 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2204      	movs	r2, #4
 800a340:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a342:	2304      	movs	r3, #4
 800a344:	e0b1      	b.n	800a4aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a34a:	f003 0301 	and.w	r3, r3, #1
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d004      	beq.n	800a35c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2201      	movs	r2, #1
 800a356:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a358:	2301      	movs	r3, #1
 800a35a:	e0a6      	b.n	800a4aa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	22c5      	movs	r2, #197	; 0xc5
 800a360:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a362:	68f8      	ldr	r0, [r7, #12]
 800a364:	f7ff fd11 	bl	8009d8a <SDIO_GetCommandResponse>
 800a368:	4603      	mov	r3, r0
 800a36a:	461a      	mov	r2, r3
 800a36c:	7afb      	ldrb	r3, [r7, #11]
 800a36e:	4293      	cmp	r3, r2
 800a370:	d001      	beq.n	800a376 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a372:	2301      	movs	r3, #1
 800a374:	e099      	b.n	800a4aa <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a376:	2100      	movs	r1, #0
 800a378:	68f8      	ldr	r0, [r7, #12]
 800a37a:	f7ff fd13 	bl	8009da4 <SDIO_GetResponse>
 800a37e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a380:	697a      	ldr	r2, [r7, #20]
 800a382:	4b4e      	ldr	r3, [pc, #312]	; (800a4bc <SDMMC_GetCmdResp1+0x1d8>)
 800a384:	4013      	ands	r3, r2
 800a386:	2b00      	cmp	r3, #0
 800a388:	d101      	bne.n	800a38e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a38a:	2300      	movs	r3, #0
 800a38c:	e08d      	b.n	800a4aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	2b00      	cmp	r3, #0
 800a392:	da02      	bge.n	800a39a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a394:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a398:	e087      	b.n	800a4aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d001      	beq.n	800a3a8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a3a4:	2340      	movs	r3, #64	; 0x40
 800a3a6:	e080      	b.n	800a4aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d001      	beq.n	800a3b6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a3b2:	2380      	movs	r3, #128	; 0x80
 800a3b4:	e079      	b.n	800a4aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d002      	beq.n	800a3c6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a3c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a3c4:	e071      	b.n	800a4aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d002      	beq.n	800a3d6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a3d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3d4:	e069      	b.n	800a4aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d002      	beq.n	800a3e6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a3e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3e4:	e061      	b.n	800a4aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d002      	beq.n	800a3f6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a3f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a3f4:	e059      	b.n	800a4aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d002      	beq.n	800a406 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a404:	e051      	b.n	800a4aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d002      	beq.n	800a416 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a410:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a414:	e049      	b.n	800a4aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d002      	beq.n	800a426 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a420:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a424:	e041      	b.n	800a4aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d002      	beq.n	800a436 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a430:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a434:	e039      	b.n	800a4aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d002      	beq.n	800a446 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a440:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a444:	e031      	b.n	800a4aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d002      	beq.n	800a456 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a450:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a454:	e029      	b.n	800a4aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d002      	beq.n	800a466 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a460:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a464:	e021      	b.n	800a4aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d002      	beq.n	800a476 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a470:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a474:	e019      	b.n	800a4aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d002      	beq.n	800a486 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a480:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a484:	e011      	b.n	800a4aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d002      	beq.n	800a496 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a490:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a494:	e009      	b.n	800a4aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	f003 0308 	and.w	r3, r3, #8
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d002      	beq.n	800a4a6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a4a0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a4a4:	e001      	b.n	800a4aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a4a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3720      	adds	r7, #32
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	20000000 	.word	0x20000000
 800a4b8:	10624dd3 	.word	0x10624dd3
 800a4bc:	fdffe008 	.word	0xfdffe008

0800a4c0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b085      	sub	sp, #20
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a4c8:	4b1f      	ldr	r3, [pc, #124]	; (800a548 <SDMMC_GetCmdResp2+0x88>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4a1f      	ldr	r2, [pc, #124]	; (800a54c <SDMMC_GetCmdResp2+0x8c>)
 800a4ce:	fba2 2303 	umull	r2, r3, r2, r3
 800a4d2:	0a5b      	lsrs	r3, r3, #9
 800a4d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4d8:	fb02 f303 	mul.w	r3, r2, r3
 800a4dc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	1e5a      	subs	r2, r3, #1
 800a4e2:	60fa      	str	r2, [r7, #12]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d102      	bne.n	800a4ee <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a4e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a4ec:	e026      	b.n	800a53c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4f2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d0ef      	beq.n	800a4de <SDMMC_GetCmdResp2+0x1e>
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a504:	2b00      	cmp	r3, #0
 800a506:	d1ea      	bne.n	800a4de <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a50c:	f003 0304 	and.w	r3, r3, #4
 800a510:	2b00      	cmp	r3, #0
 800a512:	d004      	beq.n	800a51e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2204      	movs	r2, #4
 800a518:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a51a:	2304      	movs	r3, #4
 800a51c:	e00e      	b.n	800a53c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a522:	f003 0301 	and.w	r3, r3, #1
 800a526:	2b00      	cmp	r3, #0
 800a528:	d004      	beq.n	800a534 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2201      	movs	r2, #1
 800a52e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a530:	2301      	movs	r3, #1
 800a532:	e003      	b.n	800a53c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	22c5      	movs	r2, #197	; 0xc5
 800a538:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a53a:	2300      	movs	r3, #0
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3714      	adds	r7, #20
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr
 800a548:	20000000 	.word	0x20000000
 800a54c:	10624dd3 	.word	0x10624dd3

0800a550 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a550:	b480      	push	{r7}
 800a552:	b085      	sub	sp, #20
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a558:	4b1a      	ldr	r3, [pc, #104]	; (800a5c4 <SDMMC_GetCmdResp3+0x74>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a1a      	ldr	r2, [pc, #104]	; (800a5c8 <SDMMC_GetCmdResp3+0x78>)
 800a55e:	fba2 2303 	umull	r2, r3, r2, r3
 800a562:	0a5b      	lsrs	r3, r3, #9
 800a564:	f241 3288 	movw	r2, #5000	; 0x1388
 800a568:	fb02 f303 	mul.w	r3, r2, r3
 800a56c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	1e5a      	subs	r2, r3, #1
 800a572:	60fa      	str	r2, [r7, #12]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d102      	bne.n	800a57e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a578:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a57c:	e01b      	b.n	800a5b6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a582:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d0ef      	beq.n	800a56e <SDMMC_GetCmdResp3+0x1e>
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a594:	2b00      	cmp	r3, #0
 800a596:	d1ea      	bne.n	800a56e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a59c:	f003 0304 	and.w	r3, r3, #4
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d004      	beq.n	800a5ae <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2204      	movs	r2, #4
 800a5a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a5aa:	2304      	movs	r3, #4
 800a5ac:	e003      	b.n	800a5b6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	22c5      	movs	r2, #197	; 0xc5
 800a5b2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a5b4:	2300      	movs	r3, #0
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3714      	adds	r7, #20
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c0:	4770      	bx	lr
 800a5c2:	bf00      	nop
 800a5c4:	20000000 	.word	0x20000000
 800a5c8:	10624dd3 	.word	0x10624dd3

0800a5cc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b088      	sub	sp, #32
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	60f8      	str	r0, [r7, #12]
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	607a      	str	r2, [r7, #4]
 800a5d8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a5da:	4b35      	ldr	r3, [pc, #212]	; (800a6b0 <SDMMC_GetCmdResp6+0xe4>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4a35      	ldr	r2, [pc, #212]	; (800a6b4 <SDMMC_GetCmdResp6+0xe8>)
 800a5e0:	fba2 2303 	umull	r2, r3, r2, r3
 800a5e4:	0a5b      	lsrs	r3, r3, #9
 800a5e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5ea:	fb02 f303 	mul.w	r3, r2, r3
 800a5ee:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a5f0:	69fb      	ldr	r3, [r7, #28]
 800a5f2:	1e5a      	subs	r2, r3, #1
 800a5f4:	61fa      	str	r2, [r7, #28]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d102      	bne.n	800a600 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a5fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a5fe:	e052      	b.n	800a6a6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a604:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a606:	69bb      	ldr	r3, [r7, #24]
 800a608:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d0ef      	beq.n	800a5f0 <SDMMC_GetCmdResp6+0x24>
 800a610:	69bb      	ldr	r3, [r7, #24]
 800a612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a616:	2b00      	cmp	r3, #0
 800a618:	d1ea      	bne.n	800a5f0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a61e:	f003 0304 	and.w	r3, r3, #4
 800a622:	2b00      	cmp	r3, #0
 800a624:	d004      	beq.n	800a630 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2204      	movs	r2, #4
 800a62a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a62c:	2304      	movs	r3, #4
 800a62e:	e03a      	b.n	800a6a6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a634:	f003 0301 	and.w	r3, r3, #1
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d004      	beq.n	800a646 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2201      	movs	r2, #1
 800a640:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a642:	2301      	movs	r3, #1
 800a644:	e02f      	b.n	800a6a6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a646:	68f8      	ldr	r0, [r7, #12]
 800a648:	f7ff fb9f 	bl	8009d8a <SDIO_GetCommandResponse>
 800a64c:	4603      	mov	r3, r0
 800a64e:	461a      	mov	r2, r3
 800a650:	7afb      	ldrb	r3, [r7, #11]
 800a652:	4293      	cmp	r3, r2
 800a654:	d001      	beq.n	800a65a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a656:	2301      	movs	r3, #1
 800a658:	e025      	b.n	800a6a6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	22c5      	movs	r2, #197	; 0xc5
 800a65e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a660:	2100      	movs	r1, #0
 800a662:	68f8      	ldr	r0, [r7, #12]
 800a664:	f7ff fb9e 	bl	8009da4 <SDIO_GetResponse>
 800a668:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a670:	2b00      	cmp	r3, #0
 800a672:	d106      	bne.n	800a682 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	0c1b      	lsrs	r3, r3, #16
 800a678:	b29a      	uxth	r2, r3
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a67e:	2300      	movs	r3, #0
 800a680:	e011      	b.n	800a6a6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d002      	beq.n	800a692 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a68c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a690:	e009      	b.n	800a6a6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d002      	beq.n	800a6a2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a69c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a6a0:	e001      	b.n	800a6a6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a6a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3720      	adds	r7, #32
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}
 800a6ae:	bf00      	nop
 800a6b0:	20000000 	.word	0x20000000
 800a6b4:	10624dd3 	.word	0x10624dd3

0800a6b8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b085      	sub	sp, #20
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a6c0:	4b22      	ldr	r3, [pc, #136]	; (800a74c <SDMMC_GetCmdResp7+0x94>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4a22      	ldr	r2, [pc, #136]	; (800a750 <SDMMC_GetCmdResp7+0x98>)
 800a6c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a6ca:	0a5b      	lsrs	r3, r3, #9
 800a6cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6d0:	fb02 f303 	mul.w	r3, r2, r3
 800a6d4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	1e5a      	subs	r2, r3, #1
 800a6da:	60fa      	str	r2, [r7, #12]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d102      	bne.n	800a6e6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a6e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a6e4:	e02c      	b.n	800a740 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d0ef      	beq.n	800a6d6 <SDMMC_GetCmdResp7+0x1e>
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d1ea      	bne.n	800a6d6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a704:	f003 0304 	and.w	r3, r3, #4
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d004      	beq.n	800a716 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2204      	movs	r2, #4
 800a710:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a712:	2304      	movs	r3, #4
 800a714:	e014      	b.n	800a740 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a71a:	f003 0301 	and.w	r3, r3, #1
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d004      	beq.n	800a72c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2201      	movs	r2, #1
 800a726:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a728:	2301      	movs	r3, #1
 800a72a:	e009      	b.n	800a740 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a734:	2b00      	cmp	r3, #0
 800a736:	d002      	beq.n	800a73e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2240      	movs	r2, #64	; 0x40
 800a73c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a73e:	2300      	movs	r3, #0
  
}
 800a740:	4618      	mov	r0, r3
 800a742:	3714      	adds	r7, #20
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr
 800a74c:	20000000 	.word	0x20000000
 800a750:	10624dd3 	.word	0x10624dd3

0800a754 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a758:	4904      	ldr	r1, [pc, #16]	; (800a76c <MX_FATFS_Init+0x18>)
 800a75a:	4805      	ldr	r0, [pc, #20]	; (800a770 <MX_FATFS_Init+0x1c>)
 800a75c:	f004 fb4a 	bl	800edf4 <FATFS_LinkDriver>
 800a760:	4603      	mov	r3, r0
 800a762:	461a      	mov	r2, r3
 800a764:	4b03      	ldr	r3, [pc, #12]	; (800a774 <MX_FATFS_Init+0x20>)
 800a766:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a768:	bf00      	nop
 800a76a:	bd80      	pop	{r7, pc}
 800a76c:	20000df8 	.word	0x20000df8
 800a770:	08046bdc 	.word	0x08046bdc
 800a774:	20000df4 	.word	0x20000df4

0800a778 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a778:	b480      	push	{r7}
 800a77a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a77c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a77e:	4618      	mov	r0, r3
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr

0800a788 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b082      	sub	sp, #8
 800a78c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a78e:	2300      	movs	r3, #0
 800a790:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a792:	f000 f896 	bl	800a8c2 <BSP_SD_IsDetected>
 800a796:	4603      	mov	r3, r0
 800a798:	2b01      	cmp	r3, #1
 800a79a:	d001      	beq.n	800a7a0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a79c:	2301      	movs	r3, #1
 800a79e:	e012      	b.n	800a7c6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a7a0:	480b      	ldr	r0, [pc, #44]	; (800a7d0 <BSP_SD_Init+0x48>)
 800a7a2:	f7fc fe37 	bl	8007414 <HAL_SD_Init>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a7aa:	79fb      	ldrb	r3, [r7, #7]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d109      	bne.n	800a7c4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800a7b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a7b4:	4806      	ldr	r0, [pc, #24]	; (800a7d0 <BSP_SD_Init+0x48>)
 800a7b6:	f7fd fc5b 	bl	8008070 <HAL_SD_ConfigWideBusOperation>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d001      	beq.n	800a7c4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a7c4:	79fb      	ldrb	r3, [r7, #7]
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3708      	adds	r7, #8
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	20000bd0 	.word	0x20000bd0

0800a7d4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b086      	sub	sp, #24
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	68ba      	ldr	r2, [r7, #8]
 800a7e8:	68f9      	ldr	r1, [r7, #12]
 800a7ea:	4806      	ldr	r0, [pc, #24]	; (800a804 <BSP_SD_ReadBlocks_DMA+0x30>)
 800a7ec:	f7fc fec0 	bl	8007570 <HAL_SD_ReadBlocks_DMA>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d001      	beq.n	800a7fa <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a7fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3718      	adds	r7, #24
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}
 800a804:	20000bd0 	.word	0x20000bd0

0800a808 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b086      	sub	sp, #24
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	60f8      	str	r0, [r7, #12]
 800a810:	60b9      	str	r1, [r7, #8]
 800a812:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a814:	2300      	movs	r3, #0
 800a816:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	68ba      	ldr	r2, [r7, #8]
 800a81c:	68f9      	ldr	r1, [r7, #12]
 800a81e:	4806      	ldr	r0, [pc, #24]	; (800a838 <BSP_SD_WriteBlocks_DMA+0x30>)
 800a820:	f7fc ff88 	bl	8007734 <HAL_SD_WriteBlocks_DMA>
 800a824:	4603      	mov	r3, r0
 800a826:	2b00      	cmp	r3, #0
 800a828:	d001      	beq.n	800a82e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a82a:	2301      	movs	r3, #1
 800a82c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a82e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a830:	4618      	mov	r0, r3
 800a832:	3718      	adds	r7, #24
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}
 800a838:	20000bd0 	.word	0x20000bd0

0800a83c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a840:	4805      	ldr	r0, [pc, #20]	; (800a858 <BSP_SD_GetCardState+0x1c>)
 800a842:	f7fd fcaf 	bl	80081a4 <HAL_SD_GetCardState>
 800a846:	4603      	mov	r3, r0
 800a848:	2b04      	cmp	r3, #4
 800a84a:	bf14      	ite	ne
 800a84c:	2301      	movne	r3, #1
 800a84e:	2300      	moveq	r3, #0
 800a850:	b2db      	uxtb	r3, r3
}
 800a852:	4618      	mov	r0, r3
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	20000bd0 	.word	0x20000bd0

0800a85c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a864:	6879      	ldr	r1, [r7, #4]
 800a866:	4803      	ldr	r0, [pc, #12]	; (800a874 <BSP_SD_GetCardInfo+0x18>)
 800a868:	f7fd fbd6 	bl	8008018 <HAL_SD_GetCardInfo>
}
 800a86c:	bf00      	nop
 800a86e:	3708      	adds	r7, #8
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}
 800a874:	20000bd0 	.word	0x20000bd0

0800a878 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800a880:	f000 f818 	bl	800a8b4 <BSP_SD_AbortCallback>
}
 800a884:	bf00      	nop
 800a886:	3708      	adds	r7, #8
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b082      	sub	sp, #8
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a894:	f000 f998 	bl	800abc8 <BSP_SD_WriteCpltCallback>
}
 800a898:	bf00      	nop
 800a89a:	3708      	adds	r7, #8
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b082      	sub	sp, #8
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a8a8:	f000 f9a0 	bl	800abec <BSP_SD_ReadCpltCallback>
}
 800a8ac:	bf00      	nop
 800a8ae:	3708      	adds	r7, #8
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}

0800a8b4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	af00      	add	r7, sp, #0

}
 800a8b8:	bf00      	nop
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c0:	4770      	bx	lr

0800a8c2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a8c2:	b480      	push	{r7}
 800a8c4:	b083      	sub	sp, #12
 800a8c6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800a8cc:	79fb      	ldrb	r3, [r7, #7]
 800a8ce:	b2db      	uxtb	r3, r3
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	370c      	adds	r7, #12
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr

0800a8dc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b084      	sub	sp, #16
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800a8e4:	f004 fc76 	bl	800f1d4 <osKernelGetTickCount>
 800a8e8:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800a8ea:	e006      	b.n	800a8fa <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a8ec:	f7ff ffa6 	bl	800a83c <BSP_SD_GetCardState>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d101      	bne.n	800a8fa <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	e009      	b.n	800a90e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800a8fa:	f004 fc6b 	bl	800f1d4 <osKernelGetTickCount>
 800a8fe:	4602      	mov	r2, r0
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	1ad3      	subs	r3, r2, r3
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	429a      	cmp	r2, r3
 800a908:	d8f0      	bhi.n	800a8ec <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a90a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3710      	adds	r7, #16
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
	...

0800a918 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	4603      	mov	r3, r0
 800a920:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a922:	4b0b      	ldr	r3, [pc, #44]	; (800a950 <SD_CheckStatus+0x38>)
 800a924:	2201      	movs	r2, #1
 800a926:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a928:	f7ff ff88 	bl	800a83c <BSP_SD_GetCardState>
 800a92c:	4603      	mov	r3, r0
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d107      	bne.n	800a942 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a932:	4b07      	ldr	r3, [pc, #28]	; (800a950 <SD_CheckStatus+0x38>)
 800a934:	781b      	ldrb	r3, [r3, #0]
 800a936:	b2db      	uxtb	r3, r3
 800a938:	f023 0301 	bic.w	r3, r3, #1
 800a93c:	b2da      	uxtb	r2, r3
 800a93e:	4b04      	ldr	r3, [pc, #16]	; (800a950 <SD_CheckStatus+0x38>)
 800a940:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a942:	4b03      	ldr	r3, [pc, #12]	; (800a950 <SD_CheckStatus+0x38>)
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	b2db      	uxtb	r3, r3
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3708      	adds	r7, #8
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}
 800a950:	20000009 	.word	0x20000009

0800a954 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b082      	sub	sp, #8
 800a958:	af00      	add	r7, sp, #0
 800a95a:	4603      	mov	r3, r0
 800a95c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a95e:	4b1c      	ldr	r3, [pc, #112]	; (800a9d0 <SD_initialize+0x7c>)
 800a960:	2201      	movs	r2, #1
 800a962:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800a964:	f004 fbee 	bl	800f144 <osKernelGetState>
 800a968:	4603      	mov	r3, r0
 800a96a:	2b02      	cmp	r3, #2
 800a96c:	d129      	bne.n	800a9c2 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800a96e:	f7ff ff0b 	bl	800a788 <BSP_SD_Init>
 800a972:	4603      	mov	r3, r0
 800a974:	2b00      	cmp	r3, #0
 800a976:	d107      	bne.n	800a988 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800a978:	79fb      	ldrb	r3, [r7, #7]
 800a97a:	4618      	mov	r0, r3
 800a97c:	f7ff ffcc 	bl	800a918 <SD_CheckStatus>
 800a980:	4603      	mov	r3, r0
 800a982:	461a      	mov	r2, r3
 800a984:	4b12      	ldr	r3, [pc, #72]	; (800a9d0 <SD_initialize+0x7c>)
 800a986:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800a988:	4b11      	ldr	r3, [pc, #68]	; (800a9d0 <SD_initialize+0x7c>)
 800a98a:	781b      	ldrb	r3, [r3, #0]
 800a98c:	b2db      	uxtb	r3, r3
 800a98e:	2b01      	cmp	r3, #1
 800a990:	d017      	beq.n	800a9c2 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800a992:	4b10      	ldr	r3, [pc, #64]	; (800a9d4 <SD_initialize+0x80>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d107      	bne.n	800a9aa <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800a99a:	2200      	movs	r2, #0
 800a99c:	2102      	movs	r1, #2
 800a99e:	200a      	movs	r0, #10
 800a9a0:	f004 ff2c 	bl	800f7fc <osMessageQueueNew>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	4a0b      	ldr	r2, [pc, #44]	; (800a9d4 <SD_initialize+0x80>)
 800a9a8:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800a9aa:	4b0a      	ldr	r3, [pc, #40]	; (800a9d4 <SD_initialize+0x80>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d107      	bne.n	800a9c2 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800a9b2:	4b07      	ldr	r3, [pc, #28]	; (800a9d0 <SD_initialize+0x7c>)
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	b2db      	uxtb	r3, r3
 800a9b8:	f043 0301 	orr.w	r3, r3, #1
 800a9bc:	b2da      	uxtb	r2, r3
 800a9be:	4b04      	ldr	r3, [pc, #16]	; (800a9d0 <SD_initialize+0x7c>)
 800a9c0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800a9c2:	4b03      	ldr	r3, [pc, #12]	; (800a9d0 <SD_initialize+0x7c>)
 800a9c4:	781b      	ldrb	r3, [r3, #0]
 800a9c6:	b2db      	uxtb	r3, r3
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3708      	adds	r7, #8
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}
 800a9d0:	20000009 	.word	0x20000009
 800a9d4:	20001034 	.word	0x20001034

0800a9d8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b082      	sub	sp, #8
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	4603      	mov	r3, r0
 800a9e0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a9e2:	79fb      	ldrb	r3, [r7, #7]
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f7ff ff97 	bl	800a918 <SD_CheckStatus>
 800a9ea:	4603      	mov	r3, r0
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3708      	adds	r7, #8
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b088      	sub	sp, #32
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	60b9      	str	r1, [r7, #8]
 800a9fc:	607a      	str	r2, [r7, #4]
 800a9fe:	603b      	str	r3, [r7, #0]
 800aa00:	4603      	mov	r3, r0
 800aa02:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800aa04:	2301      	movs	r3, #1
 800aa06:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800aa08:	f247 5030 	movw	r0, #30000	; 0x7530
 800aa0c:	f7ff ff66 	bl	800a8dc <SD_CheckStatusWithTimeout>
 800aa10:	4603      	mov	r3, r0
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	da01      	bge.n	800aa1a <SD_read+0x26>
  {
    return res;
 800aa16:	7ffb      	ldrb	r3, [r7, #31]
 800aa18:	e02f      	b.n	800aa7a <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800aa1a:	683a      	ldr	r2, [r7, #0]
 800aa1c:	6879      	ldr	r1, [r7, #4]
 800aa1e:	68b8      	ldr	r0, [r7, #8]
 800aa20:	f7ff fed8 	bl	800a7d4 <BSP_SD_ReadBlocks_DMA>
 800aa24:	4603      	mov	r3, r0
 800aa26:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800aa28:	7fbb      	ldrb	r3, [r7, #30]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d124      	bne.n	800aa78 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800aa2e:	4b15      	ldr	r3, [pc, #84]	; (800aa84 <SD_read+0x90>)
 800aa30:	6818      	ldr	r0, [r3, #0]
 800aa32:	f107 0112 	add.w	r1, r7, #18
 800aa36:	f247 5330 	movw	r3, #30000	; 0x7530
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	f004 ffb2 	bl	800f9a4 <osMessageQueueGet>
 800aa40:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800aa42:	69bb      	ldr	r3, [r7, #24]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d117      	bne.n	800aa78 <SD_read+0x84>
 800aa48:	8a7b      	ldrh	r3, [r7, #18]
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d114      	bne.n	800aa78 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800aa4e:	f004 fbc1 	bl	800f1d4 <osKernelGetTickCount>
 800aa52:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800aa54:	e007      	b.n	800aa66 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800aa56:	f7ff fef1 	bl	800a83c <BSP_SD_GetCardState>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d102      	bne.n	800aa66 <SD_read+0x72>
              {
                res = RES_OK;
 800aa60:	2300      	movs	r3, #0
 800aa62:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800aa64:	e008      	b.n	800aa78 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800aa66:	f004 fbb5 	bl	800f1d4 <osKernelGetTickCount>
 800aa6a:	4602      	mov	r2, r0
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	1ad3      	subs	r3, r2, r3
 800aa70:	f247 522f 	movw	r2, #29999	; 0x752f
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d9ee      	bls.n	800aa56 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800aa78:	7ffb      	ldrb	r3, [r7, #31]
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3720      	adds	r7, #32
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
 800aa82:	bf00      	nop
 800aa84:	20001034 	.word	0x20001034

0800aa88 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b088      	sub	sp, #32
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	60b9      	str	r1, [r7, #8]
 800aa90:	607a      	str	r2, [r7, #4]
 800aa92:	603b      	str	r3, [r7, #0]
 800aa94:	4603      	mov	r3, r0
 800aa96:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800aa9c:	f247 5030 	movw	r0, #30000	; 0x7530
 800aaa0:	f7ff ff1c 	bl	800a8dc <SD_CheckStatusWithTimeout>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	da01      	bge.n	800aaae <SD_write+0x26>
  {
    return res;
 800aaaa:	7ffb      	ldrb	r3, [r7, #31]
 800aaac:	e02d      	b.n	800ab0a <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800aaae:	683a      	ldr	r2, [r7, #0]
 800aab0:	6879      	ldr	r1, [r7, #4]
 800aab2:	68b8      	ldr	r0, [r7, #8]
 800aab4:	f7ff fea8 	bl	800a808 <BSP_SD_WriteBlocks_DMA>
 800aab8:	4603      	mov	r3, r0
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d124      	bne.n	800ab08 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800aabe:	4b15      	ldr	r3, [pc, #84]	; (800ab14 <SD_write+0x8c>)
 800aac0:	6818      	ldr	r0, [r3, #0]
 800aac2:	f107 0112 	add.w	r1, r7, #18
 800aac6:	f247 5330 	movw	r3, #30000	; 0x7530
 800aaca:	2200      	movs	r2, #0
 800aacc:	f004 ff6a 	bl	800f9a4 <osMessageQueueGet>
 800aad0:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800aad2:	69bb      	ldr	r3, [r7, #24]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d117      	bne.n	800ab08 <SD_write+0x80>
 800aad8:	8a7b      	ldrh	r3, [r7, #18]
 800aada:	2b02      	cmp	r3, #2
 800aadc:	d114      	bne.n	800ab08 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800aade:	f004 fb79 	bl	800f1d4 <osKernelGetTickCount>
 800aae2:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800aae4:	e007      	b.n	800aaf6 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800aae6:	f7ff fea9 	bl	800a83c <BSP_SD_GetCardState>
 800aaea:	4603      	mov	r3, r0
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d102      	bne.n	800aaf6 <SD_write+0x6e>
          {
            res = RES_OK;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	77fb      	strb	r3, [r7, #31]
            break;
 800aaf4:	e008      	b.n	800ab08 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800aaf6:	f004 fb6d 	bl	800f1d4 <osKernelGetTickCount>
 800aafa:	4602      	mov	r2, r0
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	1ad3      	subs	r3, r2, r3
 800ab00:	f247 522f 	movw	r2, #29999	; 0x752f
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d9ee      	bls.n	800aae6 <SD_write+0x5e>
    }

  }
#endif

  return res;
 800ab08:	7ffb      	ldrb	r3, [r7, #31]
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3720      	adds	r7, #32
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop
 800ab14:	20001034 	.word	0x20001034

0800ab18 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b08c      	sub	sp, #48	; 0x30
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	4603      	mov	r3, r0
 800ab20:	603a      	str	r2, [r7, #0]
 800ab22:	71fb      	strb	r3, [r7, #7]
 800ab24:	460b      	mov	r3, r1
 800ab26:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ab28:	2301      	movs	r3, #1
 800ab2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ab2e:	4b25      	ldr	r3, [pc, #148]	; (800abc4 <SD_ioctl+0xac>)
 800ab30:	781b      	ldrb	r3, [r3, #0]
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	f003 0301 	and.w	r3, r3, #1
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d001      	beq.n	800ab40 <SD_ioctl+0x28>
 800ab3c:	2303      	movs	r3, #3
 800ab3e:	e03c      	b.n	800abba <SD_ioctl+0xa2>

  switch (cmd)
 800ab40:	79bb      	ldrb	r3, [r7, #6]
 800ab42:	2b03      	cmp	r3, #3
 800ab44:	d834      	bhi.n	800abb0 <SD_ioctl+0x98>
 800ab46:	a201      	add	r2, pc, #4	; (adr r2, 800ab4c <SD_ioctl+0x34>)
 800ab48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab4c:	0800ab5d 	.word	0x0800ab5d
 800ab50:	0800ab65 	.word	0x0800ab65
 800ab54:	0800ab7d 	.word	0x0800ab7d
 800ab58:	0800ab97 	.word	0x0800ab97
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ab62:	e028      	b.n	800abb6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ab64:	f107 030c 	add.w	r3, r7, #12
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f7ff fe77 	bl	800a85c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ab6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ab74:	2300      	movs	r3, #0
 800ab76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ab7a:	e01c      	b.n	800abb6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ab7c:	f107 030c 	add.w	r3, r7, #12
 800ab80:	4618      	mov	r0, r3
 800ab82:	f7ff fe6b 	bl	800a85c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ab86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab88:	b29a      	uxth	r2, r3
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ab94:	e00f      	b.n	800abb6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ab96:	f107 030c 	add.w	r3, r7, #12
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f7ff fe5e 	bl	800a85c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800aba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba2:	0a5a      	lsrs	r2, r3, #9
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800aba8:	2300      	movs	r3, #0
 800abaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800abae:	e002      	b.n	800abb6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800abb0:	2304      	movs	r3, #4
 800abb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800abb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3730      	adds	r7, #48	; 0x30
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop
 800abc4:	20000009 	.word	0x20000009

0800abc8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b082      	sub	sp, #8
 800abcc:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800abce:	2302      	movs	r3, #2
 800abd0:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800abd2:	4b05      	ldr	r3, [pc, #20]	; (800abe8 <BSP_SD_WriteCpltCallback+0x20>)
 800abd4:	6818      	ldr	r0, [r3, #0]
 800abd6:	1db9      	adds	r1, r7, #6
 800abd8:	2300      	movs	r3, #0
 800abda:	2200      	movs	r2, #0
 800abdc:	f004 fe82 	bl	800f8e4 <osMessageQueuePut>
#endif
}
 800abe0:	bf00      	nop
 800abe2:	3708      	adds	r7, #8
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	20001034 	.word	0x20001034

0800abec <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b082      	sub	sp, #8
 800abf0:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800abf2:	2301      	movs	r3, #1
 800abf4:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800abf6:	4b05      	ldr	r3, [pc, #20]	; (800ac0c <BSP_SD_ReadCpltCallback+0x20>)
 800abf8:	6818      	ldr	r0, [r3, #0]
 800abfa:	1db9      	adds	r1, r7, #6
 800abfc:	2300      	movs	r3, #0
 800abfe:	2200      	movs	r2, #0
 800ac00:	f004 fe70 	bl	800f8e4 <osMessageQueuePut>
#endif
}
 800ac04:	bf00      	nop
 800ac06:	3708      	adds	r7, #8
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}
 800ac0c:	20001034 	.word	0x20001034

0800ac10 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b084      	sub	sp, #16
 800ac14:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800ac16:	4ba0      	ldr	r3, [pc, #640]	; (800ae98 <MX_LWIP_Init+0x288>)
 800ac18:	22c0      	movs	r2, #192	; 0xc0
 800ac1a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800ac1c:	4b9e      	ldr	r3, [pc, #632]	; (800ae98 <MX_LWIP_Init+0x288>)
 800ac1e:	22a8      	movs	r2, #168	; 0xa8
 800ac20:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800ac22:	4b9d      	ldr	r3, [pc, #628]	; (800ae98 <MX_LWIP_Init+0x288>)
 800ac24:	2200      	movs	r2, #0
 800ac26:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 123;
 800ac28:	4b9b      	ldr	r3, [pc, #620]	; (800ae98 <MX_LWIP_Init+0x288>)
 800ac2a:	227b      	movs	r2, #123	; 0x7b
 800ac2c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800ac2e:	4b9b      	ldr	r3, [pc, #620]	; (800ae9c <MX_LWIP_Init+0x28c>)
 800ac30:	22ff      	movs	r2, #255	; 0xff
 800ac32:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800ac34:	4b99      	ldr	r3, [pc, #612]	; (800ae9c <MX_LWIP_Init+0x28c>)
 800ac36:	22ff      	movs	r2, #255	; 0xff
 800ac38:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800ac3a:	4b98      	ldr	r3, [pc, #608]	; (800ae9c <MX_LWIP_Init+0x28c>)
 800ac3c:	22ff      	movs	r2, #255	; 0xff
 800ac3e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800ac40:	4b96      	ldr	r3, [pc, #600]	; (800ae9c <MX_LWIP_Init+0x28c>)
 800ac42:	2200      	movs	r2, #0
 800ac44:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800ac46:	4b96      	ldr	r3, [pc, #600]	; (800aea0 <MX_LWIP_Init+0x290>)
 800ac48:	22c0      	movs	r2, #192	; 0xc0
 800ac4a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800ac4c:	4b94      	ldr	r3, [pc, #592]	; (800aea0 <MX_LWIP_Init+0x290>)
 800ac4e:	22a8      	movs	r2, #168	; 0xa8
 800ac50:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800ac52:	4b93      	ldr	r3, [pc, #588]	; (800aea0 <MX_LWIP_Init+0x290>)
 800ac54:	2200      	movs	r2, #0
 800ac56:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800ac58:	4b91      	ldr	r3, [pc, #580]	; (800aea0 <MX_LWIP_Init+0x290>)
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800ac5e:	2100      	movs	r1, #0
 800ac60:	2000      	movs	r0, #0
 800ac62:	f008 fd43 	bl	80136ec <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800ac66:	4b8c      	ldr	r3, [pc, #560]	; (800ae98 <MX_LWIP_Init+0x288>)
 800ac68:	781b      	ldrb	r3, [r3, #0]
 800ac6a:	061a      	lsls	r2, r3, #24
 800ac6c:	4b8a      	ldr	r3, [pc, #552]	; (800ae98 <MX_LWIP_Init+0x288>)
 800ac6e:	785b      	ldrb	r3, [r3, #1]
 800ac70:	041b      	lsls	r3, r3, #16
 800ac72:	431a      	orrs	r2, r3
 800ac74:	4b88      	ldr	r3, [pc, #544]	; (800ae98 <MX_LWIP_Init+0x288>)
 800ac76:	789b      	ldrb	r3, [r3, #2]
 800ac78:	021b      	lsls	r3, r3, #8
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	4a86      	ldr	r2, [pc, #536]	; (800ae98 <MX_LWIP_Init+0x288>)
 800ac7e:	78d2      	ldrb	r2, [r2, #3]
 800ac80:	4313      	orrs	r3, r2
 800ac82:	061a      	lsls	r2, r3, #24
 800ac84:	4b84      	ldr	r3, [pc, #528]	; (800ae98 <MX_LWIP_Init+0x288>)
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	0619      	lsls	r1, r3, #24
 800ac8a:	4b83      	ldr	r3, [pc, #524]	; (800ae98 <MX_LWIP_Init+0x288>)
 800ac8c:	785b      	ldrb	r3, [r3, #1]
 800ac8e:	041b      	lsls	r3, r3, #16
 800ac90:	4319      	orrs	r1, r3
 800ac92:	4b81      	ldr	r3, [pc, #516]	; (800ae98 <MX_LWIP_Init+0x288>)
 800ac94:	789b      	ldrb	r3, [r3, #2]
 800ac96:	021b      	lsls	r3, r3, #8
 800ac98:	430b      	orrs	r3, r1
 800ac9a:	497f      	ldr	r1, [pc, #508]	; (800ae98 <MX_LWIP_Init+0x288>)
 800ac9c:	78c9      	ldrb	r1, [r1, #3]
 800ac9e:	430b      	orrs	r3, r1
 800aca0:	021b      	lsls	r3, r3, #8
 800aca2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aca6:	431a      	orrs	r2, r3
 800aca8:	4b7b      	ldr	r3, [pc, #492]	; (800ae98 <MX_LWIP_Init+0x288>)
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	0619      	lsls	r1, r3, #24
 800acae:	4b7a      	ldr	r3, [pc, #488]	; (800ae98 <MX_LWIP_Init+0x288>)
 800acb0:	785b      	ldrb	r3, [r3, #1]
 800acb2:	041b      	lsls	r3, r3, #16
 800acb4:	4319      	orrs	r1, r3
 800acb6:	4b78      	ldr	r3, [pc, #480]	; (800ae98 <MX_LWIP_Init+0x288>)
 800acb8:	789b      	ldrb	r3, [r3, #2]
 800acba:	021b      	lsls	r3, r3, #8
 800acbc:	430b      	orrs	r3, r1
 800acbe:	4976      	ldr	r1, [pc, #472]	; (800ae98 <MX_LWIP_Init+0x288>)
 800acc0:	78c9      	ldrb	r1, [r1, #3]
 800acc2:	430b      	orrs	r3, r1
 800acc4:	0a1b      	lsrs	r3, r3, #8
 800acc6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800acca:	431a      	orrs	r2, r3
 800accc:	4b72      	ldr	r3, [pc, #456]	; (800ae98 <MX_LWIP_Init+0x288>)
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	0619      	lsls	r1, r3, #24
 800acd2:	4b71      	ldr	r3, [pc, #452]	; (800ae98 <MX_LWIP_Init+0x288>)
 800acd4:	785b      	ldrb	r3, [r3, #1]
 800acd6:	041b      	lsls	r3, r3, #16
 800acd8:	4319      	orrs	r1, r3
 800acda:	4b6f      	ldr	r3, [pc, #444]	; (800ae98 <MX_LWIP_Init+0x288>)
 800acdc:	789b      	ldrb	r3, [r3, #2]
 800acde:	021b      	lsls	r3, r3, #8
 800ace0:	430b      	orrs	r3, r1
 800ace2:	496d      	ldr	r1, [pc, #436]	; (800ae98 <MX_LWIP_Init+0x288>)
 800ace4:	78c9      	ldrb	r1, [r1, #3]
 800ace6:	430b      	orrs	r3, r1
 800ace8:	0e1b      	lsrs	r3, r3, #24
 800acea:	4313      	orrs	r3, r2
 800acec:	4a6d      	ldr	r2, [pc, #436]	; (800aea4 <MX_LWIP_Init+0x294>)
 800acee:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800acf0:	4b6a      	ldr	r3, [pc, #424]	; (800ae9c <MX_LWIP_Init+0x28c>)
 800acf2:	781b      	ldrb	r3, [r3, #0]
 800acf4:	061a      	lsls	r2, r3, #24
 800acf6:	4b69      	ldr	r3, [pc, #420]	; (800ae9c <MX_LWIP_Init+0x28c>)
 800acf8:	785b      	ldrb	r3, [r3, #1]
 800acfa:	041b      	lsls	r3, r3, #16
 800acfc:	431a      	orrs	r2, r3
 800acfe:	4b67      	ldr	r3, [pc, #412]	; (800ae9c <MX_LWIP_Init+0x28c>)
 800ad00:	789b      	ldrb	r3, [r3, #2]
 800ad02:	021b      	lsls	r3, r3, #8
 800ad04:	4313      	orrs	r3, r2
 800ad06:	4a65      	ldr	r2, [pc, #404]	; (800ae9c <MX_LWIP_Init+0x28c>)
 800ad08:	78d2      	ldrb	r2, [r2, #3]
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	061a      	lsls	r2, r3, #24
 800ad0e:	4b63      	ldr	r3, [pc, #396]	; (800ae9c <MX_LWIP_Init+0x28c>)
 800ad10:	781b      	ldrb	r3, [r3, #0]
 800ad12:	0619      	lsls	r1, r3, #24
 800ad14:	4b61      	ldr	r3, [pc, #388]	; (800ae9c <MX_LWIP_Init+0x28c>)
 800ad16:	785b      	ldrb	r3, [r3, #1]
 800ad18:	041b      	lsls	r3, r3, #16
 800ad1a:	4319      	orrs	r1, r3
 800ad1c:	4b5f      	ldr	r3, [pc, #380]	; (800ae9c <MX_LWIP_Init+0x28c>)
 800ad1e:	789b      	ldrb	r3, [r3, #2]
 800ad20:	021b      	lsls	r3, r3, #8
 800ad22:	430b      	orrs	r3, r1
 800ad24:	495d      	ldr	r1, [pc, #372]	; (800ae9c <MX_LWIP_Init+0x28c>)
 800ad26:	78c9      	ldrb	r1, [r1, #3]
 800ad28:	430b      	orrs	r3, r1
 800ad2a:	021b      	lsls	r3, r3, #8
 800ad2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ad30:	431a      	orrs	r2, r3
 800ad32:	4b5a      	ldr	r3, [pc, #360]	; (800ae9c <MX_LWIP_Init+0x28c>)
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	0619      	lsls	r1, r3, #24
 800ad38:	4b58      	ldr	r3, [pc, #352]	; (800ae9c <MX_LWIP_Init+0x28c>)
 800ad3a:	785b      	ldrb	r3, [r3, #1]
 800ad3c:	041b      	lsls	r3, r3, #16
 800ad3e:	4319      	orrs	r1, r3
 800ad40:	4b56      	ldr	r3, [pc, #344]	; (800ae9c <MX_LWIP_Init+0x28c>)
 800ad42:	789b      	ldrb	r3, [r3, #2]
 800ad44:	021b      	lsls	r3, r3, #8
 800ad46:	430b      	orrs	r3, r1
 800ad48:	4954      	ldr	r1, [pc, #336]	; (800ae9c <MX_LWIP_Init+0x28c>)
 800ad4a:	78c9      	ldrb	r1, [r1, #3]
 800ad4c:	430b      	orrs	r3, r1
 800ad4e:	0a1b      	lsrs	r3, r3, #8
 800ad50:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ad54:	431a      	orrs	r2, r3
 800ad56:	4b51      	ldr	r3, [pc, #324]	; (800ae9c <MX_LWIP_Init+0x28c>)
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	0619      	lsls	r1, r3, #24
 800ad5c:	4b4f      	ldr	r3, [pc, #316]	; (800ae9c <MX_LWIP_Init+0x28c>)
 800ad5e:	785b      	ldrb	r3, [r3, #1]
 800ad60:	041b      	lsls	r3, r3, #16
 800ad62:	4319      	orrs	r1, r3
 800ad64:	4b4d      	ldr	r3, [pc, #308]	; (800ae9c <MX_LWIP_Init+0x28c>)
 800ad66:	789b      	ldrb	r3, [r3, #2]
 800ad68:	021b      	lsls	r3, r3, #8
 800ad6a:	430b      	orrs	r3, r1
 800ad6c:	494b      	ldr	r1, [pc, #300]	; (800ae9c <MX_LWIP_Init+0x28c>)
 800ad6e:	78c9      	ldrb	r1, [r1, #3]
 800ad70:	430b      	orrs	r3, r1
 800ad72:	0e1b      	lsrs	r3, r3, #24
 800ad74:	4313      	orrs	r3, r2
 800ad76:	4a4c      	ldr	r2, [pc, #304]	; (800aea8 <MX_LWIP_Init+0x298>)
 800ad78:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800ad7a:	4b49      	ldr	r3, [pc, #292]	; (800aea0 <MX_LWIP_Init+0x290>)
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	061a      	lsls	r2, r3, #24
 800ad80:	4b47      	ldr	r3, [pc, #284]	; (800aea0 <MX_LWIP_Init+0x290>)
 800ad82:	785b      	ldrb	r3, [r3, #1]
 800ad84:	041b      	lsls	r3, r3, #16
 800ad86:	431a      	orrs	r2, r3
 800ad88:	4b45      	ldr	r3, [pc, #276]	; (800aea0 <MX_LWIP_Init+0x290>)
 800ad8a:	789b      	ldrb	r3, [r3, #2]
 800ad8c:	021b      	lsls	r3, r3, #8
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	4a43      	ldr	r2, [pc, #268]	; (800aea0 <MX_LWIP_Init+0x290>)
 800ad92:	78d2      	ldrb	r2, [r2, #3]
 800ad94:	4313      	orrs	r3, r2
 800ad96:	061a      	lsls	r2, r3, #24
 800ad98:	4b41      	ldr	r3, [pc, #260]	; (800aea0 <MX_LWIP_Init+0x290>)
 800ad9a:	781b      	ldrb	r3, [r3, #0]
 800ad9c:	0619      	lsls	r1, r3, #24
 800ad9e:	4b40      	ldr	r3, [pc, #256]	; (800aea0 <MX_LWIP_Init+0x290>)
 800ada0:	785b      	ldrb	r3, [r3, #1]
 800ada2:	041b      	lsls	r3, r3, #16
 800ada4:	4319      	orrs	r1, r3
 800ada6:	4b3e      	ldr	r3, [pc, #248]	; (800aea0 <MX_LWIP_Init+0x290>)
 800ada8:	789b      	ldrb	r3, [r3, #2]
 800adaa:	021b      	lsls	r3, r3, #8
 800adac:	430b      	orrs	r3, r1
 800adae:	493c      	ldr	r1, [pc, #240]	; (800aea0 <MX_LWIP_Init+0x290>)
 800adb0:	78c9      	ldrb	r1, [r1, #3]
 800adb2:	430b      	orrs	r3, r1
 800adb4:	021b      	lsls	r3, r3, #8
 800adb6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800adba:	431a      	orrs	r2, r3
 800adbc:	4b38      	ldr	r3, [pc, #224]	; (800aea0 <MX_LWIP_Init+0x290>)
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	0619      	lsls	r1, r3, #24
 800adc2:	4b37      	ldr	r3, [pc, #220]	; (800aea0 <MX_LWIP_Init+0x290>)
 800adc4:	785b      	ldrb	r3, [r3, #1]
 800adc6:	041b      	lsls	r3, r3, #16
 800adc8:	4319      	orrs	r1, r3
 800adca:	4b35      	ldr	r3, [pc, #212]	; (800aea0 <MX_LWIP_Init+0x290>)
 800adcc:	789b      	ldrb	r3, [r3, #2]
 800adce:	021b      	lsls	r3, r3, #8
 800add0:	430b      	orrs	r3, r1
 800add2:	4933      	ldr	r1, [pc, #204]	; (800aea0 <MX_LWIP_Init+0x290>)
 800add4:	78c9      	ldrb	r1, [r1, #3]
 800add6:	430b      	orrs	r3, r1
 800add8:	0a1b      	lsrs	r3, r3, #8
 800adda:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800adde:	431a      	orrs	r2, r3
 800ade0:	4b2f      	ldr	r3, [pc, #188]	; (800aea0 <MX_LWIP_Init+0x290>)
 800ade2:	781b      	ldrb	r3, [r3, #0]
 800ade4:	0619      	lsls	r1, r3, #24
 800ade6:	4b2e      	ldr	r3, [pc, #184]	; (800aea0 <MX_LWIP_Init+0x290>)
 800ade8:	785b      	ldrb	r3, [r3, #1]
 800adea:	041b      	lsls	r3, r3, #16
 800adec:	4319      	orrs	r1, r3
 800adee:	4b2c      	ldr	r3, [pc, #176]	; (800aea0 <MX_LWIP_Init+0x290>)
 800adf0:	789b      	ldrb	r3, [r3, #2]
 800adf2:	021b      	lsls	r3, r3, #8
 800adf4:	430b      	orrs	r3, r1
 800adf6:	492a      	ldr	r1, [pc, #168]	; (800aea0 <MX_LWIP_Init+0x290>)
 800adf8:	78c9      	ldrb	r1, [r1, #3]
 800adfa:	430b      	orrs	r3, r1
 800adfc:	0e1b      	lsrs	r3, r3, #24
 800adfe:	4313      	orrs	r3, r2
 800ae00:	4a2a      	ldr	r2, [pc, #168]	; (800aeac <MX_LWIP_Init+0x29c>)
 800ae02:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800ae04:	4b2a      	ldr	r3, [pc, #168]	; (800aeb0 <MX_LWIP_Init+0x2a0>)
 800ae06:	9302      	str	r3, [sp, #8]
 800ae08:	4b2a      	ldr	r3, [pc, #168]	; (800aeb4 <MX_LWIP_Init+0x2a4>)
 800ae0a:	9301      	str	r3, [sp, #4]
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	9300      	str	r3, [sp, #0]
 800ae10:	4b26      	ldr	r3, [pc, #152]	; (800aeac <MX_LWIP_Init+0x29c>)
 800ae12:	4a25      	ldr	r2, [pc, #148]	; (800aea8 <MX_LWIP_Init+0x298>)
 800ae14:	4923      	ldr	r1, [pc, #140]	; (800aea4 <MX_LWIP_Init+0x294>)
 800ae16:	4828      	ldr	r0, [pc, #160]	; (800aeb8 <MX_LWIP_Init+0x2a8>)
 800ae18:	f00a ff2e 	bl	8015c78 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800ae1c:	4826      	ldr	r0, [pc, #152]	; (800aeb8 <MX_LWIP_Init+0x2a8>)
 800ae1e:	f00b f8e9 	bl	8015ff4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800ae22:	4b25      	ldr	r3, [pc, #148]	; (800aeb8 <MX_LWIP_Init+0x2a8>)
 800ae24:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ae28:	089b      	lsrs	r3, r3, #2
 800ae2a:	f003 0301 	and.w	r3, r3, #1
 800ae2e:	b2db      	uxtb	r3, r3
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d003      	beq.n	800ae3c <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800ae34:	4820      	ldr	r0, [pc, #128]	; (800aeb8 <MX_LWIP_Init+0x2a8>)
 800ae36:	f00b f8ed 	bl	8016014 <netif_set_up>
 800ae3a:	e002      	b.n	800ae42 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800ae3c:	481e      	ldr	r0, [pc, #120]	; (800aeb8 <MX_LWIP_Init+0x2a8>)
 800ae3e:	f00b f95d 	bl	80160fc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800ae42:	491e      	ldr	r1, [pc, #120]	; (800aebc <MX_LWIP_Init+0x2ac>)
 800ae44:	481c      	ldr	r0, [pc, #112]	; (800aeb8 <MX_LWIP_Init+0x2a8>)
 800ae46:	f00b f9f7 	bl	8016238 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	2101      	movs	r1, #1
 800ae4e:	2001      	movs	r0, #1
 800ae50:	f004 fb90 	bl	800f574 <osSemaphoreNew>
 800ae54:	4603      	mov	r3, r0
 800ae56:	4a1a      	ldr	r2, [pc, #104]	; (800aec0 <MX_LWIP_Init+0x2b0>)
 800ae58:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 800ae5a:	4b1a      	ldr	r3, [pc, #104]	; (800aec4 <MX_LWIP_Init+0x2b4>)
 800ae5c:	4a16      	ldr	r2, [pc, #88]	; (800aeb8 <MX_LWIP_Init+0x2a8>)
 800ae5e:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 800ae60:	4b17      	ldr	r3, [pc, #92]	; (800aec0 <MX_LWIP_Init+0x2b0>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	4a17      	ldr	r2, [pc, #92]	; (800aec4 <MX_LWIP_Init+0x2b4>)
 800ae66:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800ae68:	2224      	movs	r2, #36	; 0x24
 800ae6a:	2100      	movs	r1, #0
 800ae6c:	4816      	ldr	r0, [pc, #88]	; (800aec8 <MX_LWIP_Init+0x2b8>)
 800ae6e:	f015 f871 	bl	801ff54 <memset>
  attributes.name = "LinkThr";
 800ae72:	4b15      	ldr	r3, [pc, #84]	; (800aec8 <MX_LWIP_Init+0x2b8>)
 800ae74:	4a15      	ldr	r2, [pc, #84]	; (800aecc <MX_LWIP_Init+0x2bc>)
 800ae76:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800ae78:	4b13      	ldr	r3, [pc, #76]	; (800aec8 <MX_LWIP_Init+0x2b8>)
 800ae7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ae7e:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800ae80:	4b11      	ldr	r3, [pc, #68]	; (800aec8 <MX_LWIP_Init+0x2b8>)
 800ae82:	2210      	movs	r2, #16
 800ae84:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 800ae86:	4a10      	ldr	r2, [pc, #64]	; (800aec8 <MX_LWIP_Init+0x2b8>)
 800ae88:	490e      	ldr	r1, [pc, #56]	; (800aec4 <MX_LWIP_Init+0x2b4>)
 800ae8a:	4811      	ldr	r0, [pc, #68]	; (800aed0 <MX_LWIP_Init+0x2c0>)
 800ae8c:	f004 f9b7 	bl	800f1fe <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800ae90:	bf00      	nop
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
 800ae96:	bf00      	nop
 800ae98:	20001088 	.word	0x20001088
 800ae9c:	2000108c 	.word	0x2000108c
 800aea0:	20001090 	.word	0x20001090
 800aea4:	2000107c 	.word	0x2000107c
 800aea8:	20001080 	.word	0x20001080
 800aeac:	20001084 	.word	0x20001084
 800aeb0:	08013629 	.word	0x08013629
 800aeb4:	0800b505 	.word	0x0800b505
 800aeb8:	20001044 	.word	0x20001044
 800aebc:	0800b5e9 	.word	0x0800b5e9
 800aec0:	20001038 	.word	0x20001038
 800aec4:	2000103c 	.word	0x2000103c
 800aec8:	20001094 	.word	0x20001094
 800aecc:	08026300 	.word	0x08026300
 800aed0:	0800b571 	.word	0x0800b571

0800aed4 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b08e      	sub	sp, #56	; 0x38
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aedc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aee0:	2200      	movs	r2, #0
 800aee2:	601a      	str	r2, [r3, #0]
 800aee4:	605a      	str	r2, [r3, #4]
 800aee6:	609a      	str	r2, [r3, #8]
 800aee8:	60da      	str	r2, [r3, #12]
 800aeea:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	4a59      	ldr	r2, [pc, #356]	; (800b058 <HAL_ETH_MspInit+0x184>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	f040 80ac 	bne.w	800b050 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800aef8:	2300      	movs	r3, #0
 800aefa:	623b      	str	r3, [r7, #32]
 800aefc:	4b57      	ldr	r3, [pc, #348]	; (800b05c <HAL_ETH_MspInit+0x188>)
 800aefe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af00:	4a56      	ldr	r2, [pc, #344]	; (800b05c <HAL_ETH_MspInit+0x188>)
 800af02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800af06:	6313      	str	r3, [r2, #48]	; 0x30
 800af08:	4b54      	ldr	r3, [pc, #336]	; (800b05c <HAL_ETH_MspInit+0x188>)
 800af0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af10:	623b      	str	r3, [r7, #32]
 800af12:	6a3b      	ldr	r3, [r7, #32]
 800af14:	2300      	movs	r3, #0
 800af16:	61fb      	str	r3, [r7, #28]
 800af18:	4b50      	ldr	r3, [pc, #320]	; (800b05c <HAL_ETH_MspInit+0x188>)
 800af1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af1c:	4a4f      	ldr	r2, [pc, #316]	; (800b05c <HAL_ETH_MspInit+0x188>)
 800af1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800af22:	6313      	str	r3, [r2, #48]	; 0x30
 800af24:	4b4d      	ldr	r3, [pc, #308]	; (800b05c <HAL_ETH_MspInit+0x188>)
 800af26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800af2c:	61fb      	str	r3, [r7, #28]
 800af2e:	69fb      	ldr	r3, [r7, #28]
 800af30:	2300      	movs	r3, #0
 800af32:	61bb      	str	r3, [r7, #24]
 800af34:	4b49      	ldr	r3, [pc, #292]	; (800b05c <HAL_ETH_MspInit+0x188>)
 800af36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af38:	4a48      	ldr	r2, [pc, #288]	; (800b05c <HAL_ETH_MspInit+0x188>)
 800af3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800af3e:	6313      	str	r3, [r2, #48]	; 0x30
 800af40:	4b46      	ldr	r3, [pc, #280]	; (800b05c <HAL_ETH_MspInit+0x188>)
 800af42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af48:	61bb      	str	r3, [r7, #24]
 800af4a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800af4c:	2300      	movs	r3, #0
 800af4e:	617b      	str	r3, [r7, #20]
 800af50:	4b42      	ldr	r3, [pc, #264]	; (800b05c <HAL_ETH_MspInit+0x188>)
 800af52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af54:	4a41      	ldr	r2, [pc, #260]	; (800b05c <HAL_ETH_MspInit+0x188>)
 800af56:	f043 0304 	orr.w	r3, r3, #4
 800af5a:	6313      	str	r3, [r2, #48]	; 0x30
 800af5c:	4b3f      	ldr	r3, [pc, #252]	; (800b05c <HAL_ETH_MspInit+0x188>)
 800af5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af60:	f003 0304 	and.w	r3, r3, #4
 800af64:	617b      	str	r3, [r7, #20]
 800af66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800af68:	2300      	movs	r3, #0
 800af6a:	613b      	str	r3, [r7, #16]
 800af6c:	4b3b      	ldr	r3, [pc, #236]	; (800b05c <HAL_ETH_MspInit+0x188>)
 800af6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af70:	4a3a      	ldr	r2, [pc, #232]	; (800b05c <HAL_ETH_MspInit+0x188>)
 800af72:	f043 0301 	orr.w	r3, r3, #1
 800af76:	6313      	str	r3, [r2, #48]	; 0x30
 800af78:	4b38      	ldr	r3, [pc, #224]	; (800b05c <HAL_ETH_MspInit+0x188>)
 800af7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af7c:	f003 0301 	and.w	r3, r3, #1
 800af80:	613b      	str	r3, [r7, #16]
 800af82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800af84:	2300      	movs	r3, #0
 800af86:	60fb      	str	r3, [r7, #12]
 800af88:	4b34      	ldr	r3, [pc, #208]	; (800b05c <HAL_ETH_MspInit+0x188>)
 800af8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af8c:	4a33      	ldr	r2, [pc, #204]	; (800b05c <HAL_ETH_MspInit+0x188>)
 800af8e:	f043 0302 	orr.w	r3, r3, #2
 800af92:	6313      	str	r3, [r2, #48]	; 0x30
 800af94:	4b31      	ldr	r3, [pc, #196]	; (800b05c <HAL_ETH_MspInit+0x188>)
 800af96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af98:	f003 0302 	and.w	r3, r3, #2
 800af9c:	60fb      	str	r3, [r7, #12]
 800af9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800afa0:	2300      	movs	r3, #0
 800afa2:	60bb      	str	r3, [r7, #8]
 800afa4:	4b2d      	ldr	r3, [pc, #180]	; (800b05c <HAL_ETH_MspInit+0x188>)
 800afa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afa8:	4a2c      	ldr	r2, [pc, #176]	; (800b05c <HAL_ETH_MspInit+0x188>)
 800afaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afae:	6313      	str	r3, [r2, #48]	; 0x30
 800afb0:	4b2a      	ldr	r3, [pc, #168]	; (800b05c <HAL_ETH_MspInit+0x188>)
 800afb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afb8:	60bb      	str	r3, [r7, #8]
 800afba:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800afbc:	2332      	movs	r3, #50	; 0x32
 800afbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800afc0:	2302      	movs	r3, #2
 800afc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afc4:	2300      	movs	r3, #0
 800afc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800afc8:	2303      	movs	r3, #3
 800afca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800afcc:	230b      	movs	r3, #11
 800afce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800afd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800afd4:	4619      	mov	r1, r3
 800afd6:	4822      	ldr	r0, [pc, #136]	; (800b060 <HAL_ETH_MspInit+0x18c>)
 800afd8:	f7fa fcee 	bl	80059b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800afdc:	2386      	movs	r3, #134	; 0x86
 800afde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800afe0:	2302      	movs	r3, #2
 800afe2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afe4:	2300      	movs	r3, #0
 800afe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800afe8:	2303      	movs	r3, #3
 800afea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800afec:	230b      	movs	r3, #11
 800afee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aff4:	4619      	mov	r1, r3
 800aff6:	481b      	ldr	r0, [pc, #108]	; (800b064 <HAL_ETH_MspInit+0x190>)
 800aff8:	f7fa fcde 	bl	80059b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800affc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b000:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b002:	2302      	movs	r3, #2
 800b004:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b006:	2300      	movs	r3, #0
 800b008:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b00a:	2303      	movs	r3, #3
 800b00c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b00e:	230b      	movs	r3, #11
 800b010:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b016:	4619      	mov	r1, r3
 800b018:	4813      	ldr	r0, [pc, #76]	; (800b068 <HAL_ETH_MspInit+0x194>)
 800b01a:	f7fa fccd 	bl	80059b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800b01e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800b022:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b024:	2302      	movs	r3, #2
 800b026:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b028:	2300      	movs	r3, #0
 800b02a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b02c:	2303      	movs	r3, #3
 800b02e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b030:	230b      	movs	r3, #11
 800b032:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b038:	4619      	mov	r1, r3
 800b03a:	480c      	ldr	r0, [pc, #48]	; (800b06c <HAL_ETH_MspInit+0x198>)
 800b03c:	f7fa fcbc 	bl	80059b8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800b040:	2200      	movs	r2, #0
 800b042:	2105      	movs	r1, #5
 800b044:	203d      	movs	r0, #61	; 0x3d
 800b046:	f7f8 fcb9 	bl	80039bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800b04a:	203d      	movs	r0, #61	; 0x3d
 800b04c:	f7f8 fcd2 	bl	80039f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800b050:	bf00      	nop
 800b052:	3738      	adds	r7, #56	; 0x38
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}
 800b058:	40028000 	.word	0x40028000
 800b05c:	40023800 	.word	0x40023800
 800b060:	40020800 	.word	0x40020800
 800b064:	40020000 	.word	0x40020000
 800b068:	40020400 	.word	0x40020400
 800b06c:	40021800 	.word	0x40021800

0800b070 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b082      	sub	sp, #8
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800b078:	4b04      	ldr	r3, [pc, #16]	; (800b08c <HAL_ETH_RxCpltCallback+0x1c>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4618      	mov	r0, r3
 800b07e:	f004 fb55 	bl	800f72c <osSemaphoreRelease>
}
 800b082:	bf00      	nop
 800b084:	3708      	adds	r7, #8
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}
 800b08a:	bf00      	nop
 800b08c:	20004158 	.word	0x20004158

0800b090 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b08e      	sub	sp, #56	; 0x38
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800b098:	4b51      	ldr	r3, [pc, #324]	; (800b1e0 <low_level_init+0x150>)
 800b09a:	4a52      	ldr	r2, [pc, #328]	; (800b1e4 <low_level_init+0x154>)
 800b09c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800b09e:	4b50      	ldr	r3, [pc, #320]	; (800b1e0 <low_level_init+0x150>)
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800b0a4:	4b4e      	ldr	r3, [pc, #312]	; (800b1e0 <low_level_init+0x150>)
 800b0a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b0aa:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800b0ac:	4b4c      	ldr	r3, [pc, #304]	; (800b1e0 <low_level_init+0x150>)
 800b0ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b0b2:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8720A_PHY_ADDRESS_PHY_ADDRESS;
 800b0b4:	4b4a      	ldr	r3, [pc, #296]	; (800b1e0 <low_level_init+0x150>)
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800b0be:	2380      	movs	r3, #128	; 0x80
 800b0c0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800b0c2:	23e1      	movs	r3, #225	; 0xe1
 800b0c4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800b0d2:	4a43      	ldr	r2, [pc, #268]	; (800b1e0 <low_level_init+0x150>)
 800b0d4:	f107 0308 	add.w	r3, r7, #8
 800b0d8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800b0da:	4b41      	ldr	r3, [pc, #260]	; (800b1e0 <low_level_init+0x150>)
 800b0dc:	2201      	movs	r2, #1
 800b0de:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800b0e0:	4b3f      	ldr	r3, [pc, #252]	; (800b1e0 <low_level_init+0x150>)
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800b0e6:	4b3e      	ldr	r3, [pc, #248]	; (800b1e0 <low_level_init+0x150>)
 800b0e8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800b0ec:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800b0ee:	483c      	ldr	r0, [pc, #240]	; (800b1e0 <low_level_init+0x150>)
 800b0f0:	f7f9 fad4 	bl	800469c <HAL_ETH_Init>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  if (hal_eth_init_status == HAL_OK)
 800b0fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d108      	bne.n	800b114 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b108:	f043 0304 	orr.w	r3, r3, #4
 800b10c:	b2da      	uxtb	r2, r3
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800b114:	2304      	movs	r3, #4
 800b116:	4a34      	ldr	r2, [pc, #208]	; (800b1e8 <low_level_init+0x158>)
 800b118:	4934      	ldr	r1, [pc, #208]	; (800b1ec <low_level_init+0x15c>)
 800b11a:	4831      	ldr	r0, [pc, #196]	; (800b1e0 <low_level_init+0x150>)
 800b11c:	f7f9 fc58 	bl	80049d0 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800b120:	2304      	movs	r3, #4
 800b122:	4a33      	ldr	r2, [pc, #204]	; (800b1f0 <low_level_init+0x160>)
 800b124:	4933      	ldr	r1, [pc, #204]	; (800b1f4 <low_level_init+0x164>)
 800b126:	482e      	ldr	r0, [pc, #184]	; (800b1e0 <low_level_init+0x150>)
 800b128:	f7f9 fcba 	bl	8004aa0 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2206      	movs	r2, #6
 800b130:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800b134:	4b2a      	ldr	r3, [pc, #168]	; (800b1e0 <low_level_init+0x150>)
 800b136:	695b      	ldr	r3, [r3, #20]
 800b138:	781a      	ldrb	r2, [r3, #0]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800b140:	4b27      	ldr	r3, [pc, #156]	; (800b1e0 <low_level_init+0x150>)
 800b142:	695b      	ldr	r3, [r3, #20]
 800b144:	785a      	ldrb	r2, [r3, #1]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800b14c:	4b24      	ldr	r3, [pc, #144]	; (800b1e0 <low_level_init+0x150>)
 800b14e:	695b      	ldr	r3, [r3, #20]
 800b150:	789a      	ldrb	r2, [r3, #2]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800b158:	4b21      	ldr	r3, [pc, #132]	; (800b1e0 <low_level_init+0x150>)
 800b15a:	695b      	ldr	r3, [r3, #20]
 800b15c:	78da      	ldrb	r2, [r3, #3]
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800b164:	4b1e      	ldr	r3, [pc, #120]	; (800b1e0 <low_level_init+0x150>)
 800b166:	695b      	ldr	r3, [r3, #20]
 800b168:	791a      	ldrb	r2, [r3, #4]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800b170:	4b1b      	ldr	r3, [pc, #108]	; (800b1e0 <low_level_init+0x150>)
 800b172:	695b      	ldr	r3, [r3, #20]
 800b174:	795a      	ldrb	r2, [r3, #5]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800b182:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b18a:	f043 030a 	orr.w	r3, r3, #10
 800b18e:	b2da      	uxtb	r2, r3
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 800b196:	2200      	movs	r2, #0
 800b198:	2101      	movs	r1, #1
 800b19a:	2001      	movs	r0, #1
 800b19c:	f004 f9ea 	bl	800f574 <osSemaphoreNew>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	4a15      	ldr	r2, [pc, #84]	; (800b1f8 <low_level_init+0x168>)
 800b1a4:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800b1a6:	f107 0310 	add.w	r3, r7, #16
 800b1aa:	2224      	movs	r2, #36	; 0x24
 800b1ac:	2100      	movs	r1, #0
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f014 fed0 	bl	801ff54 <memset>
  attributes.name = "EthIf";
 800b1b4:	4b11      	ldr	r3, [pc, #68]	; (800b1fc <low_level_init+0x16c>)
 800b1b6:	613b      	str	r3, [r7, #16]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800b1b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b1bc:	627b      	str	r3, [r7, #36]	; 0x24
  attributes.priority = osPriorityRealtime;
 800b1be:	2330      	movs	r3, #48	; 0x30
 800b1c0:	62bb      	str	r3, [r7, #40]	; 0x28
  osThreadNew(ethernetif_input, netif, &attributes);
 800b1c2:	f107 0310 	add.w	r3, r7, #16
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	6879      	ldr	r1, [r7, #4]
 800b1ca:	480d      	ldr	r0, [pc, #52]	; (800b200 <low_level_init+0x170>)
 800b1cc:	f004 f817 	bl	800f1fe <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800b1d0:	4803      	ldr	r0, [pc, #12]	; (800b1e0 <low_level_init+0x150>)
 800b1d2:	f7f9 ff89 	bl	80050e8 <HAL_ETH_Start>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800b1d6:	bf00      	nop
 800b1d8:	3738      	adds	r7, #56	; 0x38
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}
 800b1de:	bf00      	nop
 800b1e0:	2000415c 	.word	0x2000415c
 800b1e4:	40028000 	.word	0x40028000
 800b1e8:	20002988 	.word	0x20002988
 800b1ec:	20001138 	.word	0x20001138
 800b1f0:	200011b8 	.word	0x200011b8
 800b1f4:	200010b8 	.word	0x200010b8
 800b1f8:	20004158 	.word	0x20004158
 800b1fc:	08026308 	.word	0x08026308
 800b200:	0800b4a5 	.word	0x0800b4a5

0800b204 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b08a      	sub	sp, #40	; 0x28
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800b20e:	4b4b      	ldr	r3, [pc, #300]	; (800b33c <low_level_output+0x138>)
 800b210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b212:	689b      	ldr	r3, [r3, #8]
 800b214:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800b216:	2300      	movs	r3, #0
 800b218:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800b21a:	2300      	movs	r3, #0
 800b21c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800b21e:	2300      	movs	r3, #0
 800b220:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800b222:	2300      	movs	r3, #0
 800b224:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800b226:	4b45      	ldr	r3, [pc, #276]	; (800b33c <low_level_output+0x138>)
 800b228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b22a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800b22c:	2300      	movs	r3, #0
 800b22e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	623b      	str	r3, [r7, #32]
 800b234:	e05a      	b.n	800b2ec <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800b236:	69bb      	ldr	r3, [r7, #24]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	da03      	bge.n	800b246 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800b23e:	23f8      	movs	r3, #248	; 0xf8
 800b240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800b244:	e05c      	b.n	800b300 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800b246:	6a3b      	ldr	r3, [r7, #32]
 800b248:	895b      	ldrh	r3, [r3, #10]
 800b24a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800b24c:	2300      	movs	r3, #0
 800b24e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800b250:	e02f      	b.n	800b2b2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800b252:	69fa      	ldr	r2, [r7, #28]
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	18d0      	adds	r0, r2, r3
 800b258:	6a3b      	ldr	r3, [r7, #32]
 800b25a:	685a      	ldr	r2, [r3, #4]
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	18d1      	adds	r1, r2, r3
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800b266:	3304      	adds	r3, #4
 800b268:	461a      	mov	r2, r3
 800b26a:	f014 fe4b 	bl	801ff04 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800b26e:	69bb      	ldr	r3, [r7, #24]
 800b270:	68db      	ldr	r3, [r3, #12]
 800b272:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800b274:	69bb      	ldr	r3, [r7, #24]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	da03      	bge.n	800b284 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800b27c:	23f8      	movs	r3, #248	; 0xf8
 800b27e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800b282:	e03d      	b.n	800b300 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800b284:	69bb      	ldr	r3, [r7, #24]
 800b286:	689b      	ldr	r3, [r3, #8]
 800b288:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800b28a:	693a      	ldr	r2, [r7, #16]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	4413      	add	r3, r2
 800b290:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800b294:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800b296:	68ba      	ldr	r2, [r7, #8]
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	1ad3      	subs	r3, r2, r3
 800b29c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800b2a0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800b2a2:	697a      	ldr	r2, [r7, #20]
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	1ad3      	subs	r3, r2, r3
 800b2a8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800b2ac:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800b2b2:	68fa      	ldr	r2, [r7, #12]
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	4413      	add	r3, r2
 800b2b8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d8c8      	bhi.n	800b252 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800b2c0:	69fa      	ldr	r2, [r7, #28]
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	18d0      	adds	r0, r2, r3
 800b2c6:	6a3b      	ldr	r3, [r7, #32]
 800b2c8:	685a      	ldr	r2, [r3, #4]
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	4413      	add	r3, r2
 800b2ce:	68fa      	ldr	r2, [r7, #12]
 800b2d0:	4619      	mov	r1, r3
 800b2d2:	f014 fe17 	bl	801ff04 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800b2d6:	693a      	ldr	r2, [r7, #16]
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	4413      	add	r3, r2
 800b2dc:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800b2de:	697a      	ldr	r2, [r7, #20]
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	4413      	add	r3, r2
 800b2e4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800b2e6:	6a3b      	ldr	r3, [r7, #32]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	623b      	str	r3, [r7, #32]
 800b2ec:	6a3b      	ldr	r3, [r7, #32]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d1a1      	bne.n	800b236 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800b2f2:	6979      	ldr	r1, [r7, #20]
 800b2f4:	4811      	ldr	r0, [pc, #68]	; (800b33c <low_level_output+0x138>)
 800b2f6:	f7f9 fc3f 	bl	8004b78 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800b300:	4b0e      	ldr	r3, [pc, #56]	; (800b33c <low_level_output+0x138>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b308:	695b      	ldr	r3, [r3, #20]
 800b30a:	f003 0320 	and.w	r3, r3, #32
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d00d      	beq.n	800b32e <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800b312:	4b0a      	ldr	r3, [pc, #40]	; (800b33c <low_level_output+0x138>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b31a:	461a      	mov	r2, r3
 800b31c:	2320      	movs	r3, #32
 800b31e:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800b320:	4b06      	ldr	r3, [pc, #24]	; (800b33c <low_level_output+0x138>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b328:	461a      	mov	r2, r3
 800b32a:	2300      	movs	r3, #0
 800b32c:	6053      	str	r3, [r2, #4]
  }
  return errval;
 800b32e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b332:	4618      	mov	r0, r3
 800b334:	3728      	adds	r7, #40	; 0x28
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
 800b33a:	bf00      	nop
 800b33c:	2000415c 	.word	0x2000415c

0800b340 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b08c      	sub	sp, #48	; 0x30
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b348:	2300      	movs	r3, #0
 800b34a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800b34c:	2300      	movs	r3, #0
 800b34e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800b350:	2300      	movs	r3, #0
 800b352:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800b354:	2300      	movs	r3, #0
 800b356:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800b358:	2300      	movs	r3, #0
 800b35a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800b35c:	2300      	movs	r3, #0
 800b35e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800b360:	2300      	movs	r3, #0
 800b362:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800b364:	484e      	ldr	r0, [pc, #312]	; (800b4a0 <low_level_input+0x160>)
 800b366:	f7f9 fcf1 	bl	8004d4c <HAL_ETH_GetReceivedFrame_IT>
 800b36a:	4603      	mov	r3, r0
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d001      	beq.n	800b374 <low_level_input+0x34>

    return NULL;
 800b370:	2300      	movs	r3, #0
 800b372:	e091      	b.n	800b498 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800b374:	4b4a      	ldr	r3, [pc, #296]	; (800b4a0 <low_level_input+0x160>)
 800b376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b378:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800b37a:	4b49      	ldr	r3, [pc, #292]	; (800b4a0 <low_level_input+0x160>)
 800b37c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b37e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800b380:	89fb      	ldrh	r3, [r7, #14]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d007      	beq.n	800b396 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800b386:	89fb      	ldrh	r3, [r7, #14]
 800b388:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800b38c:	4619      	mov	r1, r3
 800b38e:	2000      	movs	r0, #0
 800b390:	f00b f81c 	bl	80163cc <pbuf_alloc>
 800b394:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800b396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d04b      	beq.n	800b434 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800b39c:	4b40      	ldr	r3, [pc, #256]	; (800b4a0 <low_level_input+0x160>)
 800b39e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3a0:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800b3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b3aa:	e040      	b.n	800b42e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800b3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ae:	895b      	ldrh	r3, [r3, #10]
 800b3b0:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800b3b6:	e021      	b.n	800b3fc <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800b3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ba:	685a      	ldr	r2, [r3, #4]
 800b3bc:	69bb      	ldr	r3, [r7, #24]
 800b3be:	18d0      	adds	r0, r2, r3
 800b3c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3c2:	69fb      	ldr	r3, [r7, #28]
 800b3c4:	18d1      	adds	r1, r2, r3
 800b3c6:	69fb      	ldr	r3, [r7, #28]
 800b3c8:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800b3cc:	3304      	adds	r3, #4
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	f014 fd98 	bl	801ff04 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800b3d4:	6a3b      	ldr	r3, [r7, #32]
 800b3d6:	68db      	ldr	r3, [r3, #12]
 800b3d8:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800b3da:	6a3b      	ldr	r3, [r7, #32]
 800b3dc:	689b      	ldr	r3, [r3, #8]
 800b3de:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800b3e0:	69fa      	ldr	r2, [r7, #28]
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	4413      	add	r3, r2
 800b3e6:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800b3ea:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800b3ec:	69ba      	ldr	r2, [r7, #24]
 800b3ee:	69fb      	ldr	r3, [r7, #28]
 800b3f0:	1ad3      	subs	r3, r2, r3
 800b3f2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800b3f6:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800b3fc:	697a      	ldr	r2, [r7, #20]
 800b3fe:	69fb      	ldr	r3, [r7, #28]
 800b400:	4413      	add	r3, r2
 800b402:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b406:	4293      	cmp	r3, r2
 800b408:	d8d6      	bhi.n	800b3b8 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800b40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b40c:	685a      	ldr	r2, [r3, #4]
 800b40e:	69bb      	ldr	r3, [r7, #24]
 800b410:	18d0      	adds	r0, r2, r3
 800b412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b414:	69fb      	ldr	r3, [r7, #28]
 800b416:	4413      	add	r3, r2
 800b418:	697a      	ldr	r2, [r7, #20]
 800b41a:	4619      	mov	r1, r3
 800b41c:	f014 fd72 	bl	801ff04 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800b420:	69fa      	ldr	r2, [r7, #28]
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	4413      	add	r3, r2
 800b426:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800b428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b430:	2b00      	cmp	r3, #0
 800b432:	d1bb      	bne.n	800b3ac <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800b434:	4b1a      	ldr	r3, [pc, #104]	; (800b4a0 <low_level_input+0x160>)
 800b436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b438:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800b43a:	2300      	movs	r3, #0
 800b43c:	613b      	str	r3, [r7, #16]
 800b43e:	e00b      	b.n	800b458 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800b440:	6a3b      	ldr	r3, [r7, #32]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b448:	6a3b      	ldr	r3, [r7, #32]
 800b44a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800b44c:	6a3b      	ldr	r3, [r7, #32]
 800b44e:	68db      	ldr	r3, [r3, #12]
 800b450:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	3301      	adds	r3, #1
 800b456:	613b      	str	r3, [r7, #16]
 800b458:	4b11      	ldr	r3, [pc, #68]	; (800b4a0 <low_level_input+0x160>)
 800b45a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b45c:	693a      	ldr	r2, [r7, #16]
 800b45e:	429a      	cmp	r2, r3
 800b460:	d3ee      	bcc.n	800b440 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800b462:	4b0f      	ldr	r3, [pc, #60]	; (800b4a0 <low_level_input+0x160>)
 800b464:	2200      	movs	r2, #0
 800b466:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800b468:	4b0d      	ldr	r3, [pc, #52]	; (800b4a0 <low_level_input+0x160>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b470:	695b      	ldr	r3, [r3, #20]
 800b472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b476:	2b00      	cmp	r3, #0
 800b478:	d00d      	beq.n	800b496 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800b47a:	4b09      	ldr	r3, [pc, #36]	; (800b4a0 <low_level_input+0x160>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b482:	461a      	mov	r2, r3
 800b484:	2380      	movs	r3, #128	; 0x80
 800b486:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800b488:	4b05      	ldr	r3, [pc, #20]	; (800b4a0 <low_level_input+0x160>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b490:	461a      	mov	r2, r3
 800b492:	2300      	movs	r3, #0
 800b494:	6093      	str	r3, [r2, #8]
  }
  return p;
 800b496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3730      	adds	r7, #48	; 0x30
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}
 800b4a0:	2000415c 	.word	0x2000415c

0800b4a4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800b4b0:	4b12      	ldr	r3, [pc, #72]	; (800b4fc <ethernetif_input+0x58>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f04f 31ff 	mov.w	r1, #4294967295
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f004 f8e5 	bl	800f688 <osSemaphoreAcquire>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d1f5      	bne.n	800b4b0 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800b4c4:	480e      	ldr	r0, [pc, #56]	; (800b500 <ethernetif_input+0x5c>)
 800b4c6:	f014 fc8f 	bl	801fde8 <sys_mutex_lock>
        p = low_level_input( netif );
 800b4ca:	68f8      	ldr	r0, [r7, #12]
 800b4cc:	f7ff ff38 	bl	800b340 <low_level_input>
 800b4d0:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d00a      	beq.n	800b4ee <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	691b      	ldr	r3, [r3, #16]
 800b4dc:	68f9      	ldr	r1, [r7, #12]
 800b4de:	68b8      	ldr	r0, [r7, #8]
 800b4e0:	4798      	blx	r3
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d002      	beq.n	800b4ee <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 800b4e8:	68b8      	ldr	r0, [r7, #8]
 800b4ea:	f00b fa53 	bl	8016994 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800b4ee:	4804      	ldr	r0, [pc, #16]	; (800b500 <ethernetif_input+0x5c>)
 800b4f0:	f014 fc89 	bl	801fe06 <sys_mutex_unlock>
      } while(p!=NULL);
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d1e4      	bne.n	800b4c4 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800b4fa:	e7d9      	b.n	800b4b0 <ethernetif_input+0xc>
 800b4fc:	20004158 	.word	0x20004158
 800b500:	20011744 	.word	0x20011744

0800b504 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b082      	sub	sp, #8
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d106      	bne.n	800b520 <ethernetif_init+0x1c>
 800b512:	4b0e      	ldr	r3, [pc, #56]	; (800b54c <ethernetif_init+0x48>)
 800b514:	f44f 720c 	mov.w	r2, #560	; 0x230
 800b518:	490d      	ldr	r1, [pc, #52]	; (800b550 <ethernetif_init+0x4c>)
 800b51a:	480e      	ldr	r0, [pc, #56]	; (800b554 <ethernetif_init+0x50>)
 800b51c:	f014 fd22 	bl	801ff64 <printf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2273      	movs	r2, #115	; 0x73
 800b524:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2274      	movs	r2, #116	; 0x74
 800b52c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	4a09      	ldr	r2, [pc, #36]	; (800b558 <ethernetif_init+0x54>)
 800b534:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	4a08      	ldr	r2, [pc, #32]	; (800b55c <ethernetif_init+0x58>)
 800b53a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f7ff fda7 	bl	800b090 <low_level_init>

  return ERR_OK;
 800b542:	2300      	movs	r3, #0
}
 800b544:	4618      	mov	r0, r3
 800b546:	3708      	adds	r7, #8
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}
 800b54c:	08026310 	.word	0x08026310
 800b550:	0802632c 	.word	0x0802632c
 800b554:	0802633c 	.word	0x0802633c
 800b558:	0801dfc5 	.word	0x0801dfc5
 800b55c:	0800b205 	.word	0x0800b205

0800b560 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b564:	f7f7 fd32 	bl	8002fcc <HAL_GetTick>
 800b568:	4603      	mov	r3, r0
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	bd80      	pop	{r7, pc}
	...

0800b570 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 800b570:	b580      	push	{r7, lr}
 800b572:	b084      	sub	sp, #16
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800b578:	2300      	movs	r3, #0
 800b57a:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800b580:	f107 0308 	add.w	r3, r7, #8
 800b584:	461a      	mov	r2, r3
 800b586:	2101      	movs	r1, #1
 800b588:	4816      	ldr	r0, [pc, #88]	; (800b5e4 <ethernetif_set_link+0x74>)
 800b58a:	f7f9 fcdf 	bl	8004f4c <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	f003 0304 	and.w	r3, r3, #4
 800b594:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b59e:	f003 0304 	and.w	r3, r3, #4
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d108      	bne.n	800b5b8 <ethernetif_set_link+0x48>
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d005      	beq.n	800b5b8 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f00a fddd 	bl	8016170 <netif_set_link_up>
 800b5b6:	e011      	b.n	800b5dc <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b5c0:	089b      	lsrs	r3, r3, #2
 800b5c2:	f003 0301 	and.w	r3, r3, #1
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d007      	beq.n	800b5dc <ethernetif_set_link+0x6c>
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d104      	bne.n	800b5dc <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f00a fdfe 	bl	80161d8 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 800b5dc:	20c8      	movs	r0, #200	; 0xc8
 800b5de:	f003 fea0 	bl	800f322 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800b5e2:	e7cd      	b.n	800b580 <ethernetif_set_link+0x10>
 800b5e4:	2000415c 	.word	0x2000415c

0800b5e8 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b084      	sub	sp, #16
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b5fe:	089b      	lsrs	r3, r3, #2
 800b600:	f003 0301 	and.w	r3, r3, #1
 800b604:	b2db      	uxtb	r3, r3
 800b606:	2b00      	cmp	r3, #0
 800b608:	d05d      	beq.n	800b6c6 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800b60a:	4b34      	ldr	r3, [pc, #208]	; (800b6dc <ethernetif_update_config+0xf4>)
 800b60c:	685b      	ldr	r3, [r3, #4]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d03f      	beq.n	800b692 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800b612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b616:	2100      	movs	r1, #0
 800b618:	4830      	ldr	r0, [pc, #192]	; (800b6dc <ethernetif_update_config+0xf4>)
 800b61a:	f7f9 fcff 	bl	800501c <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800b61e:	f7f7 fcd5 	bl	8002fcc <HAL_GetTick>
 800b622:	4603      	mov	r3, r0
 800b624:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800b626:	f107 0308 	add.w	r3, r7, #8
 800b62a:	461a      	mov	r2, r3
 800b62c:	2101      	movs	r1, #1
 800b62e:	482b      	ldr	r0, [pc, #172]	; (800b6dc <ethernetif_update_config+0xf4>)
 800b630:	f7f9 fc8c 	bl	8004f4c <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800b634:	f7f7 fcca 	bl	8002fcc <HAL_GetTick>
 800b638:	4602      	mov	r2, r0
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	1ad3      	subs	r3, r2, r3
 800b63e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b642:	d828      	bhi.n	800b696 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	f003 0320 	and.w	r3, r3, #32
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d0eb      	beq.n	800b626 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800b64e:	f107 0308 	add.w	r3, r7, #8
 800b652:	461a      	mov	r2, r3
 800b654:	211f      	movs	r1, #31
 800b656:	4821      	ldr	r0, [pc, #132]	; (800b6dc <ethernetif_update_config+0xf4>)
 800b658:	f7f9 fc78 	bl	8004f4c <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	f003 0310 	and.w	r3, r3, #16
 800b662:	2b00      	cmp	r3, #0
 800b664:	d004      	beq.n	800b670 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800b666:	4b1d      	ldr	r3, [pc, #116]	; (800b6dc <ethernetif_update_config+0xf4>)
 800b668:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b66c:	60da      	str	r2, [r3, #12]
 800b66e:	e002      	b.n	800b676 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800b670:	4b1a      	ldr	r3, [pc, #104]	; (800b6dc <ethernetif_update_config+0xf4>)
 800b672:	2200      	movs	r2, #0
 800b674:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	f003 0304 	and.w	r3, r3, #4
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d003      	beq.n	800b688 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800b680:	4b16      	ldr	r3, [pc, #88]	; (800b6dc <ethernetif_update_config+0xf4>)
 800b682:	2200      	movs	r2, #0
 800b684:	609a      	str	r2, [r3, #8]
 800b686:	e016      	b.n	800b6b6 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800b688:	4b14      	ldr	r3, [pc, #80]	; (800b6dc <ethernetif_update_config+0xf4>)
 800b68a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b68e:	609a      	str	r2, [r3, #8]
 800b690:	e011      	b.n	800b6b6 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800b692:	bf00      	nop
 800b694:	e000      	b.n	800b698 <ethernetif_update_config+0xb0>
          goto error;
 800b696:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800b698:	4b10      	ldr	r3, [pc, #64]	; (800b6dc <ethernetif_update_config+0xf4>)
 800b69a:	68db      	ldr	r3, [r3, #12]
 800b69c:	08db      	lsrs	r3, r3, #3
 800b69e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800b6a0:	4b0e      	ldr	r3, [pc, #56]	; (800b6dc <ethernetif_update_config+0xf4>)
 800b6a2:	689b      	ldr	r3, [r3, #8]
 800b6a4:	085b      	lsrs	r3, r3, #1
 800b6a6:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800b6a8:	4313      	orrs	r3, r2
 800b6aa:	b29b      	uxth	r3, r3
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	2100      	movs	r1, #0
 800b6b0:	480a      	ldr	r0, [pc, #40]	; (800b6dc <ethernetif_update_config+0xf4>)
 800b6b2:	f7f9 fcb3 	bl	800501c <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800b6b6:	2100      	movs	r1, #0
 800b6b8:	4808      	ldr	r0, [pc, #32]	; (800b6dc <ethernetif_update_config+0xf4>)
 800b6ba:	f7f9 fd73 	bl	80051a4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800b6be:	4807      	ldr	r0, [pc, #28]	; (800b6dc <ethernetif_update_config+0xf4>)
 800b6c0:	f7f9 fd12 	bl	80050e8 <HAL_ETH_Start>
 800b6c4:	e002      	b.n	800b6cc <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800b6c6:	4805      	ldr	r0, [pc, #20]	; (800b6dc <ethernetif_update_config+0xf4>)
 800b6c8:	f7f9 fd3d 	bl	8005146 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f000 f807 	bl	800b6e0 <ethernetif_notify_conn_changed>
}
 800b6d2:	bf00      	nop
 800b6d4:	3710      	adds	r7, #16
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	2000415c 	.word	0x2000415c

0800b6e0 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b083      	sub	sp, #12
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800b6e8:	bf00      	nop
 800b6ea:	370c      	adds	r7, #12
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f2:	4770      	bx	lr

0800b6f4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b084      	sub	sp, #16
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b6fe:	79fb      	ldrb	r3, [r7, #7]
 800b700:	4a08      	ldr	r2, [pc, #32]	; (800b724 <disk_status+0x30>)
 800b702:	009b      	lsls	r3, r3, #2
 800b704:	4413      	add	r3, r2
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	79fa      	ldrb	r2, [r7, #7]
 800b70c:	4905      	ldr	r1, [pc, #20]	; (800b724 <disk_status+0x30>)
 800b70e:	440a      	add	r2, r1
 800b710:	7a12      	ldrb	r2, [r2, #8]
 800b712:	4610      	mov	r0, r2
 800b714:	4798      	blx	r3
 800b716:	4603      	mov	r3, r0
 800b718:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b71a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3710      	adds	r7, #16
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}
 800b724:	200041cc 	.word	0x200041cc

0800b728 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b084      	sub	sp, #16
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	4603      	mov	r3, r0
 800b730:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b732:	2300      	movs	r3, #0
 800b734:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b736:	79fb      	ldrb	r3, [r7, #7]
 800b738:	4a0d      	ldr	r2, [pc, #52]	; (800b770 <disk_initialize+0x48>)
 800b73a:	5cd3      	ldrb	r3, [r2, r3]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d111      	bne.n	800b764 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b740:	79fb      	ldrb	r3, [r7, #7]
 800b742:	4a0b      	ldr	r2, [pc, #44]	; (800b770 <disk_initialize+0x48>)
 800b744:	2101      	movs	r1, #1
 800b746:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b748:	79fb      	ldrb	r3, [r7, #7]
 800b74a:	4a09      	ldr	r2, [pc, #36]	; (800b770 <disk_initialize+0x48>)
 800b74c:	009b      	lsls	r3, r3, #2
 800b74e:	4413      	add	r3, r2
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	79fa      	ldrb	r2, [r7, #7]
 800b756:	4906      	ldr	r1, [pc, #24]	; (800b770 <disk_initialize+0x48>)
 800b758:	440a      	add	r2, r1
 800b75a:	7a12      	ldrb	r2, [r2, #8]
 800b75c:	4610      	mov	r0, r2
 800b75e:	4798      	blx	r3
 800b760:	4603      	mov	r3, r0
 800b762:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b764:	7bfb      	ldrb	r3, [r7, #15]
}
 800b766:	4618      	mov	r0, r3
 800b768:	3710      	adds	r7, #16
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	200041cc 	.word	0x200041cc

0800b774 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b774:	b590      	push	{r4, r7, lr}
 800b776:	b087      	sub	sp, #28
 800b778:	af00      	add	r7, sp, #0
 800b77a:	60b9      	str	r1, [r7, #8]
 800b77c:	607a      	str	r2, [r7, #4]
 800b77e:	603b      	str	r3, [r7, #0]
 800b780:	4603      	mov	r3, r0
 800b782:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b784:	7bfb      	ldrb	r3, [r7, #15]
 800b786:	4a0a      	ldr	r2, [pc, #40]	; (800b7b0 <disk_read+0x3c>)
 800b788:	009b      	lsls	r3, r3, #2
 800b78a:	4413      	add	r3, r2
 800b78c:	685b      	ldr	r3, [r3, #4]
 800b78e:	689c      	ldr	r4, [r3, #8]
 800b790:	7bfb      	ldrb	r3, [r7, #15]
 800b792:	4a07      	ldr	r2, [pc, #28]	; (800b7b0 <disk_read+0x3c>)
 800b794:	4413      	add	r3, r2
 800b796:	7a18      	ldrb	r0, [r3, #8]
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	687a      	ldr	r2, [r7, #4]
 800b79c:	68b9      	ldr	r1, [r7, #8]
 800b79e:	47a0      	blx	r4
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	75fb      	strb	r3, [r7, #23]
  return res;
 800b7a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	371c      	adds	r7, #28
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd90      	pop	{r4, r7, pc}
 800b7ae:	bf00      	nop
 800b7b0:	200041cc 	.word	0x200041cc

0800b7b4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b7b4:	b590      	push	{r4, r7, lr}
 800b7b6:	b087      	sub	sp, #28
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	60b9      	str	r1, [r7, #8]
 800b7bc:	607a      	str	r2, [r7, #4]
 800b7be:	603b      	str	r3, [r7, #0]
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b7c4:	7bfb      	ldrb	r3, [r7, #15]
 800b7c6:	4a0a      	ldr	r2, [pc, #40]	; (800b7f0 <disk_write+0x3c>)
 800b7c8:	009b      	lsls	r3, r3, #2
 800b7ca:	4413      	add	r3, r2
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	68dc      	ldr	r4, [r3, #12]
 800b7d0:	7bfb      	ldrb	r3, [r7, #15]
 800b7d2:	4a07      	ldr	r2, [pc, #28]	; (800b7f0 <disk_write+0x3c>)
 800b7d4:	4413      	add	r3, r2
 800b7d6:	7a18      	ldrb	r0, [r3, #8]
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	687a      	ldr	r2, [r7, #4]
 800b7dc:	68b9      	ldr	r1, [r7, #8]
 800b7de:	47a0      	blx	r4
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	75fb      	strb	r3, [r7, #23]
  return res;
 800b7e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	371c      	adds	r7, #28
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd90      	pop	{r4, r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	200041cc 	.word	0x200041cc

0800b7f4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b084      	sub	sp, #16
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	603a      	str	r2, [r7, #0]
 800b7fe:	71fb      	strb	r3, [r7, #7]
 800b800:	460b      	mov	r3, r1
 800b802:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b804:	79fb      	ldrb	r3, [r7, #7]
 800b806:	4a09      	ldr	r2, [pc, #36]	; (800b82c <disk_ioctl+0x38>)
 800b808:	009b      	lsls	r3, r3, #2
 800b80a:	4413      	add	r3, r2
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	691b      	ldr	r3, [r3, #16]
 800b810:	79fa      	ldrb	r2, [r7, #7]
 800b812:	4906      	ldr	r1, [pc, #24]	; (800b82c <disk_ioctl+0x38>)
 800b814:	440a      	add	r2, r1
 800b816:	7a10      	ldrb	r0, [r2, #8]
 800b818:	79b9      	ldrb	r1, [r7, #6]
 800b81a:	683a      	ldr	r2, [r7, #0]
 800b81c:	4798      	blx	r3
 800b81e:	4603      	mov	r3, r0
 800b820:	73fb      	strb	r3, [r7, #15]
  return res;
 800b822:	7bfb      	ldrb	r3, [r7, #15]
}
 800b824:	4618      	mov	r0, r3
 800b826:	3710      	adds	r7, #16
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}
 800b82c:	200041cc 	.word	0x200041cc

0800b830 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b830:	b480      	push	{r7}
 800b832:	b085      	sub	sp, #20
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	3301      	adds	r3, #1
 800b83c:	781b      	ldrb	r3, [r3, #0]
 800b83e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b840:	89fb      	ldrh	r3, [r7, #14]
 800b842:	021b      	lsls	r3, r3, #8
 800b844:	b21a      	sxth	r2, r3
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	b21b      	sxth	r3, r3
 800b84c:	4313      	orrs	r3, r2
 800b84e:	b21b      	sxth	r3, r3
 800b850:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b852:	89fb      	ldrh	r3, [r7, #14]
}
 800b854:	4618      	mov	r0, r3
 800b856:	3714      	adds	r7, #20
 800b858:	46bd      	mov	sp, r7
 800b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85e:	4770      	bx	lr

0800b860 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b860:	b480      	push	{r7}
 800b862:	b085      	sub	sp, #20
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	3303      	adds	r3, #3
 800b86c:	781b      	ldrb	r3, [r3, #0]
 800b86e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	021b      	lsls	r3, r3, #8
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	3202      	adds	r2, #2
 800b878:	7812      	ldrb	r2, [r2, #0]
 800b87a:	4313      	orrs	r3, r2
 800b87c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	021b      	lsls	r3, r3, #8
 800b882:	687a      	ldr	r2, [r7, #4]
 800b884:	3201      	adds	r2, #1
 800b886:	7812      	ldrb	r2, [r2, #0]
 800b888:	4313      	orrs	r3, r2
 800b88a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	021b      	lsls	r3, r3, #8
 800b890:	687a      	ldr	r2, [r7, #4]
 800b892:	7812      	ldrb	r2, [r2, #0]
 800b894:	4313      	orrs	r3, r2
 800b896:	60fb      	str	r3, [r7, #12]
	return rv;
 800b898:	68fb      	ldr	r3, [r7, #12]
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3714      	adds	r7, #20
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a4:	4770      	bx	lr

0800b8a6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b8a6:	b480      	push	{r7}
 800b8a8:	b083      	sub	sp, #12
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	6078      	str	r0, [r7, #4]
 800b8ae:	460b      	mov	r3, r1
 800b8b0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	1c5a      	adds	r2, r3, #1
 800b8b6:	607a      	str	r2, [r7, #4]
 800b8b8:	887a      	ldrh	r2, [r7, #2]
 800b8ba:	b2d2      	uxtb	r2, r2
 800b8bc:	701a      	strb	r2, [r3, #0]
 800b8be:	887b      	ldrh	r3, [r7, #2]
 800b8c0:	0a1b      	lsrs	r3, r3, #8
 800b8c2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	1c5a      	adds	r2, r3, #1
 800b8c8:	607a      	str	r2, [r7, #4]
 800b8ca:	887a      	ldrh	r2, [r7, #2]
 800b8cc:	b2d2      	uxtb	r2, r2
 800b8ce:	701a      	strb	r2, [r3, #0]
}
 800b8d0:	bf00      	nop
 800b8d2:	370c      	adds	r7, #12
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8da:	4770      	bx	lr

0800b8dc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b083      	sub	sp, #12
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	1c5a      	adds	r2, r3, #1
 800b8ea:	607a      	str	r2, [r7, #4]
 800b8ec:	683a      	ldr	r2, [r7, #0]
 800b8ee:	b2d2      	uxtb	r2, r2
 800b8f0:	701a      	strb	r2, [r3, #0]
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	0a1b      	lsrs	r3, r3, #8
 800b8f6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	1c5a      	adds	r2, r3, #1
 800b8fc:	607a      	str	r2, [r7, #4]
 800b8fe:	683a      	ldr	r2, [r7, #0]
 800b900:	b2d2      	uxtb	r2, r2
 800b902:	701a      	strb	r2, [r3, #0]
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	0a1b      	lsrs	r3, r3, #8
 800b908:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	1c5a      	adds	r2, r3, #1
 800b90e:	607a      	str	r2, [r7, #4]
 800b910:	683a      	ldr	r2, [r7, #0]
 800b912:	b2d2      	uxtb	r2, r2
 800b914:	701a      	strb	r2, [r3, #0]
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	0a1b      	lsrs	r3, r3, #8
 800b91a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	1c5a      	adds	r2, r3, #1
 800b920:	607a      	str	r2, [r7, #4]
 800b922:	683a      	ldr	r2, [r7, #0]
 800b924:	b2d2      	uxtb	r2, r2
 800b926:	701a      	strb	r2, [r3, #0]
}
 800b928:	bf00      	nop
 800b92a:	370c      	adds	r7, #12
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr

0800b934 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b934:	b480      	push	{r7}
 800b936:	b087      	sub	sp, #28
 800b938:	af00      	add	r7, sp, #0
 800b93a:	60f8      	str	r0, [r7, #12]
 800b93c:	60b9      	str	r1, [r7, #8]
 800b93e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d00d      	beq.n	800b96a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b94e:	693a      	ldr	r2, [r7, #16]
 800b950:	1c53      	adds	r3, r2, #1
 800b952:	613b      	str	r3, [r7, #16]
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	1c59      	adds	r1, r3, #1
 800b958:	6179      	str	r1, [r7, #20]
 800b95a:	7812      	ldrb	r2, [r2, #0]
 800b95c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	3b01      	subs	r3, #1
 800b962:	607b      	str	r3, [r7, #4]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d1f1      	bne.n	800b94e <mem_cpy+0x1a>
	}
}
 800b96a:	bf00      	nop
 800b96c:	371c      	adds	r7, #28
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr

0800b976 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b976:	b480      	push	{r7}
 800b978:	b087      	sub	sp, #28
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	60f8      	str	r0, [r7, #12]
 800b97e:	60b9      	str	r1, [r7, #8]
 800b980:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	1c5a      	adds	r2, r3, #1
 800b98a:	617a      	str	r2, [r7, #20]
 800b98c:	68ba      	ldr	r2, [r7, #8]
 800b98e:	b2d2      	uxtb	r2, r2
 800b990:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	3b01      	subs	r3, #1
 800b996:	607b      	str	r3, [r7, #4]
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d1f3      	bne.n	800b986 <mem_set+0x10>
}
 800b99e:	bf00      	nop
 800b9a0:	bf00      	nop
 800b9a2:	371c      	adds	r7, #28
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr

0800b9ac <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b9ac:	b480      	push	{r7}
 800b9ae:	b089      	sub	sp, #36	; 0x24
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	60f8      	str	r0, [r7, #12]
 800b9b4:	60b9      	str	r1, [r7, #8]
 800b9b6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	61fb      	str	r3, [r7, #28]
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b9c4:	69fb      	ldr	r3, [r7, #28]
 800b9c6:	1c5a      	adds	r2, r3, #1
 800b9c8:	61fa      	str	r2, [r7, #28]
 800b9ca:	781b      	ldrb	r3, [r3, #0]
 800b9cc:	4619      	mov	r1, r3
 800b9ce:	69bb      	ldr	r3, [r7, #24]
 800b9d0:	1c5a      	adds	r2, r3, #1
 800b9d2:	61ba      	str	r2, [r7, #24]
 800b9d4:	781b      	ldrb	r3, [r3, #0]
 800b9d6:	1acb      	subs	r3, r1, r3
 800b9d8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	3b01      	subs	r3, #1
 800b9de:	607b      	str	r3, [r7, #4]
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d002      	beq.n	800b9ec <mem_cmp+0x40>
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d0eb      	beq.n	800b9c4 <mem_cmp+0x18>

	return r;
 800b9ec:	697b      	ldr	r3, [r7, #20]
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3724      	adds	r7, #36	; 0x24
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f8:	4770      	bx	lr

0800b9fa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b9fa:	b480      	push	{r7}
 800b9fc:	b083      	sub	sp, #12
 800b9fe:	af00      	add	r7, sp, #0
 800ba00:	6078      	str	r0, [r7, #4]
 800ba02:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ba04:	e002      	b.n	800ba0c <chk_chr+0x12>
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	3301      	adds	r3, #1
 800ba0a:	607b      	str	r3, [r7, #4]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d005      	beq.n	800ba20 <chk_chr+0x26>
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	781b      	ldrb	r3, [r3, #0]
 800ba18:	461a      	mov	r2, r3
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	4293      	cmp	r3, r2
 800ba1e:	d1f2      	bne.n	800ba06 <chk_chr+0xc>
	return *str;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	781b      	ldrb	r3, [r3, #0]
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	370c      	adds	r7, #12
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr

0800ba30 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b082      	sub	sp, #8
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d009      	beq.n	800ba52 <lock_fs+0x22>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	691b      	ldr	r3, [r3, #16]
 800ba42:	4618      	mov	r0, r3
 800ba44:	f003 faf5 	bl	800f032 <ff_req_grant>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d001      	beq.n	800ba52 <lock_fs+0x22>
 800ba4e:	2301      	movs	r3, #1
 800ba50:	e000      	b.n	800ba54 <lock_fs+0x24>
 800ba52:	2300      	movs	r3, #0
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3708      	adds	r7, #8
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}

0800ba5c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b082      	sub	sp, #8
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	460b      	mov	r3, r1
 800ba66:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d00d      	beq.n	800ba8a <unlock_fs+0x2e>
 800ba6e:	78fb      	ldrb	r3, [r7, #3]
 800ba70:	2b0c      	cmp	r3, #12
 800ba72:	d00a      	beq.n	800ba8a <unlock_fs+0x2e>
 800ba74:	78fb      	ldrb	r3, [r7, #3]
 800ba76:	2b0b      	cmp	r3, #11
 800ba78:	d007      	beq.n	800ba8a <unlock_fs+0x2e>
 800ba7a:	78fb      	ldrb	r3, [r7, #3]
 800ba7c:	2b0f      	cmp	r3, #15
 800ba7e:	d004      	beq.n	800ba8a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	691b      	ldr	r3, [r3, #16]
 800ba84:	4618      	mov	r0, r3
 800ba86:	f003 fae9 	bl	800f05c <ff_rel_grant>
	}
}
 800ba8a:	bf00      	nop
 800ba8c:	3708      	adds	r7, #8
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}
	...

0800ba94 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b085      	sub	sp, #20
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ba9e:	2300      	movs	r3, #0
 800baa0:	60bb      	str	r3, [r7, #8]
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	60fb      	str	r3, [r7, #12]
 800baa6:	e029      	b.n	800bafc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800baa8:	4a27      	ldr	r2, [pc, #156]	; (800bb48 <chk_lock+0xb4>)
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	011b      	lsls	r3, r3, #4
 800baae:	4413      	add	r3, r2
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d01d      	beq.n	800baf2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bab6:	4a24      	ldr	r2, [pc, #144]	; (800bb48 <chk_lock+0xb4>)
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	011b      	lsls	r3, r3, #4
 800babc:	4413      	add	r3, r2
 800babe:	681a      	ldr	r2, [r3, #0]
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d116      	bne.n	800baf6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800bac8:	4a1f      	ldr	r2, [pc, #124]	; (800bb48 <chk_lock+0xb4>)
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	011b      	lsls	r3, r3, #4
 800bace:	4413      	add	r3, r2
 800bad0:	3304      	adds	r3, #4
 800bad2:	681a      	ldr	r2, [r3, #0]
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bad8:	429a      	cmp	r2, r3
 800bada:	d10c      	bne.n	800baf6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800badc:	4a1a      	ldr	r2, [pc, #104]	; (800bb48 <chk_lock+0xb4>)
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	011b      	lsls	r3, r3, #4
 800bae2:	4413      	add	r3, r2
 800bae4:	3308      	adds	r3, #8
 800bae6:	681a      	ldr	r2, [r3, #0]
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800baec:	429a      	cmp	r2, r3
 800baee:	d102      	bne.n	800baf6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800baf0:	e007      	b.n	800bb02 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800baf2:	2301      	movs	r3, #1
 800baf4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	3301      	adds	r3, #1
 800bafa:	60fb      	str	r3, [r7, #12]
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2b01      	cmp	r3, #1
 800bb00:	d9d2      	bls.n	800baa8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2b02      	cmp	r3, #2
 800bb06:	d109      	bne.n	800bb1c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d102      	bne.n	800bb14 <chk_lock+0x80>
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	2b02      	cmp	r3, #2
 800bb12:	d101      	bne.n	800bb18 <chk_lock+0x84>
 800bb14:	2300      	movs	r3, #0
 800bb16:	e010      	b.n	800bb3a <chk_lock+0xa6>
 800bb18:	2312      	movs	r3, #18
 800bb1a:	e00e      	b.n	800bb3a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d108      	bne.n	800bb34 <chk_lock+0xa0>
 800bb22:	4a09      	ldr	r2, [pc, #36]	; (800bb48 <chk_lock+0xb4>)
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	011b      	lsls	r3, r3, #4
 800bb28:	4413      	add	r3, r2
 800bb2a:	330c      	adds	r3, #12
 800bb2c:	881b      	ldrh	r3, [r3, #0]
 800bb2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb32:	d101      	bne.n	800bb38 <chk_lock+0xa4>
 800bb34:	2310      	movs	r3, #16
 800bb36:	e000      	b.n	800bb3a <chk_lock+0xa6>
 800bb38:	2300      	movs	r3, #0
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3714      	adds	r7, #20
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb44:	4770      	bx	lr
 800bb46:	bf00      	nop
 800bb48:	200041ac 	.word	0x200041ac

0800bb4c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b083      	sub	sp, #12
 800bb50:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bb52:	2300      	movs	r3, #0
 800bb54:	607b      	str	r3, [r7, #4]
 800bb56:	e002      	b.n	800bb5e <enq_lock+0x12>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	3301      	adds	r3, #1
 800bb5c:	607b      	str	r3, [r7, #4]
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2b01      	cmp	r3, #1
 800bb62:	d806      	bhi.n	800bb72 <enq_lock+0x26>
 800bb64:	4a09      	ldr	r2, [pc, #36]	; (800bb8c <enq_lock+0x40>)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	011b      	lsls	r3, r3, #4
 800bb6a:	4413      	add	r3, r2
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d1f2      	bne.n	800bb58 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2b02      	cmp	r3, #2
 800bb76:	bf14      	ite	ne
 800bb78:	2301      	movne	r3, #1
 800bb7a:	2300      	moveq	r3, #0
 800bb7c:	b2db      	uxtb	r3, r3
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	370c      	adds	r7, #12
 800bb82:	46bd      	mov	sp, r7
 800bb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb88:	4770      	bx	lr
 800bb8a:	bf00      	nop
 800bb8c:	200041ac 	.word	0x200041ac

0800bb90 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bb90:	b480      	push	{r7}
 800bb92:	b085      	sub	sp, #20
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
 800bb98:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	60fb      	str	r3, [r7, #12]
 800bb9e:	e01f      	b.n	800bbe0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bba0:	4a41      	ldr	r2, [pc, #260]	; (800bca8 <inc_lock+0x118>)
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	011b      	lsls	r3, r3, #4
 800bba6:	4413      	add	r3, r2
 800bba8:	681a      	ldr	r2, [r3, #0]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	429a      	cmp	r2, r3
 800bbb0:	d113      	bne.n	800bbda <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bbb2:	4a3d      	ldr	r2, [pc, #244]	; (800bca8 <inc_lock+0x118>)
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	011b      	lsls	r3, r3, #4
 800bbb8:	4413      	add	r3, r2
 800bbba:	3304      	adds	r3, #4
 800bbbc:	681a      	ldr	r2, [r3, #0]
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bbc2:	429a      	cmp	r2, r3
 800bbc4:	d109      	bne.n	800bbda <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800bbc6:	4a38      	ldr	r2, [pc, #224]	; (800bca8 <inc_lock+0x118>)
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	011b      	lsls	r3, r3, #4
 800bbcc:	4413      	add	r3, r2
 800bbce:	3308      	adds	r3, #8
 800bbd0:	681a      	ldr	r2, [r3, #0]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d006      	beq.n	800bbe8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	3301      	adds	r3, #1
 800bbde:	60fb      	str	r3, [r7, #12]
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	2b01      	cmp	r3, #1
 800bbe4:	d9dc      	bls.n	800bba0 <inc_lock+0x10>
 800bbe6:	e000      	b.n	800bbea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bbe8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	2b02      	cmp	r3, #2
 800bbee:	d132      	bne.n	800bc56 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	60fb      	str	r3, [r7, #12]
 800bbf4:	e002      	b.n	800bbfc <inc_lock+0x6c>
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	3301      	adds	r3, #1
 800bbfa:	60fb      	str	r3, [r7, #12]
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	2b01      	cmp	r3, #1
 800bc00:	d806      	bhi.n	800bc10 <inc_lock+0x80>
 800bc02:	4a29      	ldr	r2, [pc, #164]	; (800bca8 <inc_lock+0x118>)
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	011b      	lsls	r3, r3, #4
 800bc08:	4413      	add	r3, r2
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d1f2      	bne.n	800bbf6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2b02      	cmp	r3, #2
 800bc14:	d101      	bne.n	800bc1a <inc_lock+0x8a>
 800bc16:	2300      	movs	r3, #0
 800bc18:	e040      	b.n	800bc9c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681a      	ldr	r2, [r3, #0]
 800bc1e:	4922      	ldr	r1, [pc, #136]	; (800bca8 <inc_lock+0x118>)
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	011b      	lsls	r3, r3, #4
 800bc24:	440b      	add	r3, r1
 800bc26:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	689a      	ldr	r2, [r3, #8]
 800bc2c:	491e      	ldr	r1, [pc, #120]	; (800bca8 <inc_lock+0x118>)
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	011b      	lsls	r3, r3, #4
 800bc32:	440b      	add	r3, r1
 800bc34:	3304      	adds	r3, #4
 800bc36:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	695a      	ldr	r2, [r3, #20]
 800bc3c:	491a      	ldr	r1, [pc, #104]	; (800bca8 <inc_lock+0x118>)
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	011b      	lsls	r3, r3, #4
 800bc42:	440b      	add	r3, r1
 800bc44:	3308      	adds	r3, #8
 800bc46:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bc48:	4a17      	ldr	r2, [pc, #92]	; (800bca8 <inc_lock+0x118>)
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	011b      	lsls	r3, r3, #4
 800bc4e:	4413      	add	r3, r2
 800bc50:	330c      	adds	r3, #12
 800bc52:	2200      	movs	r2, #0
 800bc54:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d009      	beq.n	800bc70 <inc_lock+0xe0>
 800bc5c:	4a12      	ldr	r2, [pc, #72]	; (800bca8 <inc_lock+0x118>)
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	011b      	lsls	r3, r3, #4
 800bc62:	4413      	add	r3, r2
 800bc64:	330c      	adds	r3, #12
 800bc66:	881b      	ldrh	r3, [r3, #0]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d001      	beq.n	800bc70 <inc_lock+0xe0>
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	e015      	b.n	800bc9c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d108      	bne.n	800bc88 <inc_lock+0xf8>
 800bc76:	4a0c      	ldr	r2, [pc, #48]	; (800bca8 <inc_lock+0x118>)
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	011b      	lsls	r3, r3, #4
 800bc7c:	4413      	add	r3, r2
 800bc7e:	330c      	adds	r3, #12
 800bc80:	881b      	ldrh	r3, [r3, #0]
 800bc82:	3301      	adds	r3, #1
 800bc84:	b29a      	uxth	r2, r3
 800bc86:	e001      	b.n	800bc8c <inc_lock+0xfc>
 800bc88:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bc8c:	4906      	ldr	r1, [pc, #24]	; (800bca8 <inc_lock+0x118>)
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	011b      	lsls	r3, r3, #4
 800bc92:	440b      	add	r3, r1
 800bc94:	330c      	adds	r3, #12
 800bc96:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	3301      	adds	r3, #1
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3714      	adds	r7, #20
 800bca0:	46bd      	mov	sp, r7
 800bca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca6:	4770      	bx	lr
 800bca8:	200041ac 	.word	0x200041ac

0800bcac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b085      	sub	sp, #20
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	3b01      	subs	r3, #1
 800bcb8:	607b      	str	r3, [r7, #4]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2b01      	cmp	r3, #1
 800bcbe:	d825      	bhi.n	800bd0c <dec_lock+0x60>
		n = Files[i].ctr;
 800bcc0:	4a17      	ldr	r2, [pc, #92]	; (800bd20 <dec_lock+0x74>)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	011b      	lsls	r3, r3, #4
 800bcc6:	4413      	add	r3, r2
 800bcc8:	330c      	adds	r3, #12
 800bcca:	881b      	ldrh	r3, [r3, #0]
 800bccc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bcce:	89fb      	ldrh	r3, [r7, #14]
 800bcd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcd4:	d101      	bne.n	800bcda <dec_lock+0x2e>
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800bcda:	89fb      	ldrh	r3, [r7, #14]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d002      	beq.n	800bce6 <dec_lock+0x3a>
 800bce0:	89fb      	ldrh	r3, [r7, #14]
 800bce2:	3b01      	subs	r3, #1
 800bce4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800bce6:	4a0e      	ldr	r2, [pc, #56]	; (800bd20 <dec_lock+0x74>)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	011b      	lsls	r3, r3, #4
 800bcec:	4413      	add	r3, r2
 800bcee:	330c      	adds	r3, #12
 800bcf0:	89fa      	ldrh	r2, [r7, #14]
 800bcf2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800bcf4:	89fb      	ldrh	r3, [r7, #14]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d105      	bne.n	800bd06 <dec_lock+0x5a>
 800bcfa:	4a09      	ldr	r2, [pc, #36]	; (800bd20 <dec_lock+0x74>)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	011b      	lsls	r3, r3, #4
 800bd00:	4413      	add	r3, r2
 800bd02:	2200      	movs	r2, #0
 800bd04:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800bd06:	2300      	movs	r3, #0
 800bd08:	737b      	strb	r3, [r7, #13]
 800bd0a:	e001      	b.n	800bd10 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bd0c:	2302      	movs	r3, #2
 800bd0e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800bd10:	7b7b      	ldrb	r3, [r7, #13]
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3714      	adds	r7, #20
 800bd16:	46bd      	mov	sp, r7
 800bd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1c:	4770      	bx	lr
 800bd1e:	bf00      	nop
 800bd20:	200041ac 	.word	0x200041ac

0800bd24 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bd24:	b480      	push	{r7}
 800bd26:	b085      	sub	sp, #20
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	60fb      	str	r3, [r7, #12]
 800bd30:	e010      	b.n	800bd54 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bd32:	4a0d      	ldr	r2, [pc, #52]	; (800bd68 <clear_lock+0x44>)
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	011b      	lsls	r3, r3, #4
 800bd38:	4413      	add	r3, r2
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	687a      	ldr	r2, [r7, #4]
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d105      	bne.n	800bd4e <clear_lock+0x2a>
 800bd42:	4a09      	ldr	r2, [pc, #36]	; (800bd68 <clear_lock+0x44>)
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	011b      	lsls	r3, r3, #4
 800bd48:	4413      	add	r3, r2
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	3301      	adds	r3, #1
 800bd52:	60fb      	str	r3, [r7, #12]
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	d9eb      	bls.n	800bd32 <clear_lock+0xe>
	}
}
 800bd5a:	bf00      	nop
 800bd5c:	bf00      	nop
 800bd5e:	3714      	adds	r7, #20
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr
 800bd68:	200041ac 	.word	0x200041ac

0800bd6c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b086      	sub	sp, #24
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bd74:	2300      	movs	r3, #0
 800bd76:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	78db      	ldrb	r3, [r3, #3]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d034      	beq.n	800bdea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd84:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	7858      	ldrb	r0, [r3, #1]
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bd90:	2301      	movs	r3, #1
 800bd92:	697a      	ldr	r2, [r7, #20]
 800bd94:	f7ff fd0e 	bl	800b7b4 <disk_write>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d002      	beq.n	800bda4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800bd9e:	2301      	movs	r3, #1
 800bda0:	73fb      	strb	r3, [r7, #15]
 800bda2:	e022      	b.n	800bdea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2200      	movs	r2, #0
 800bda8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdae:	697a      	ldr	r2, [r7, #20]
 800bdb0:	1ad2      	subs	r2, r2, r3
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6a1b      	ldr	r3, [r3, #32]
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d217      	bcs.n	800bdea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	789b      	ldrb	r3, [r3, #2]
 800bdbe:	613b      	str	r3, [r7, #16]
 800bdc0:	e010      	b.n	800bde4 <sync_window+0x78>
					wsect += fs->fsize;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6a1b      	ldr	r3, [r3, #32]
 800bdc6:	697a      	ldr	r2, [r7, #20]
 800bdc8:	4413      	add	r3, r2
 800bdca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	7858      	ldrb	r0, [r3, #1]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	697a      	ldr	r2, [r7, #20]
 800bdda:	f7ff fceb 	bl	800b7b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	3b01      	subs	r3, #1
 800bde2:	613b      	str	r3, [r7, #16]
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	2b01      	cmp	r3, #1
 800bde8:	d8eb      	bhi.n	800bdc2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bdea:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3718      	adds	r7, #24
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}

0800bdf4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b084      	sub	sp, #16
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
 800bdfc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bdfe:	2300      	movs	r3, #0
 800be00:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be06:	683a      	ldr	r2, [r7, #0]
 800be08:	429a      	cmp	r2, r3
 800be0a:	d01b      	beq.n	800be44 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f7ff ffad 	bl	800bd6c <sync_window>
 800be12:	4603      	mov	r3, r0
 800be14:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800be16:	7bfb      	ldrb	r3, [r7, #15]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d113      	bne.n	800be44 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	7858      	ldrb	r0, [r3, #1]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800be26:	2301      	movs	r3, #1
 800be28:	683a      	ldr	r2, [r7, #0]
 800be2a:	f7ff fca3 	bl	800b774 <disk_read>
 800be2e:	4603      	mov	r3, r0
 800be30:	2b00      	cmp	r3, #0
 800be32:	d004      	beq.n	800be3e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800be34:	f04f 33ff 	mov.w	r3, #4294967295
 800be38:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800be3a:	2301      	movs	r3, #1
 800be3c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	683a      	ldr	r2, [r7, #0]
 800be42:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800be44:	7bfb      	ldrb	r3, [r7, #15]
}
 800be46:	4618      	mov	r0, r3
 800be48:	3710      	adds	r7, #16
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
	...

0800be50 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b084      	sub	sp, #16
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f7ff ff87 	bl	800bd6c <sync_window>
 800be5e:	4603      	mov	r3, r0
 800be60:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800be62:	7bfb      	ldrb	r3, [r7, #15]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d158      	bne.n	800bf1a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	2b03      	cmp	r3, #3
 800be6e:	d148      	bne.n	800bf02 <sync_fs+0xb2>
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	791b      	ldrb	r3, [r3, #4]
 800be74:	2b01      	cmp	r3, #1
 800be76:	d144      	bne.n	800bf02 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	3338      	adds	r3, #56	; 0x38
 800be7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be80:	2100      	movs	r1, #0
 800be82:	4618      	mov	r0, r3
 800be84:	f7ff fd77 	bl	800b976 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	3338      	adds	r3, #56	; 0x38
 800be8c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800be90:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800be94:	4618      	mov	r0, r3
 800be96:	f7ff fd06 	bl	800b8a6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	3338      	adds	r3, #56	; 0x38
 800be9e:	4921      	ldr	r1, [pc, #132]	; (800bf24 <sync_fs+0xd4>)
 800bea0:	4618      	mov	r0, r3
 800bea2:	f7ff fd1b 	bl	800b8dc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	3338      	adds	r3, #56	; 0x38
 800beaa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800beae:	491e      	ldr	r1, [pc, #120]	; (800bf28 <sync_fs+0xd8>)
 800beb0:	4618      	mov	r0, r3
 800beb2:	f7ff fd13 	bl	800b8dc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	3338      	adds	r3, #56	; 0x38
 800beba:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	699b      	ldr	r3, [r3, #24]
 800bec2:	4619      	mov	r1, r3
 800bec4:	4610      	mov	r0, r2
 800bec6:	f7ff fd09 	bl	800b8dc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	3338      	adds	r3, #56	; 0x38
 800bece:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	695b      	ldr	r3, [r3, #20]
 800bed6:	4619      	mov	r1, r3
 800bed8:	4610      	mov	r0, r2
 800beda:	f7ff fcff 	bl	800b8dc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee2:	1c5a      	adds	r2, r3, #1
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	7858      	ldrb	r0, [r3, #1]
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bef6:	2301      	movs	r3, #1
 800bef8:	f7ff fc5c 	bl	800b7b4 <disk_write>
			fs->fsi_flag = 0;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2200      	movs	r2, #0
 800bf00:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	785b      	ldrb	r3, [r3, #1]
 800bf06:	2200      	movs	r2, #0
 800bf08:	2100      	movs	r1, #0
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f7ff fc72 	bl	800b7f4 <disk_ioctl>
 800bf10:	4603      	mov	r3, r0
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d001      	beq.n	800bf1a <sync_fs+0xca>
 800bf16:	2301      	movs	r3, #1
 800bf18:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bf1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3710      	adds	r7, #16
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}
 800bf24:	41615252 	.word	0x41615252
 800bf28:	61417272 	.word	0x61417272

0800bf2c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b083      	sub	sp, #12
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	3b02      	subs	r3, #2
 800bf3a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	69db      	ldr	r3, [r3, #28]
 800bf40:	3b02      	subs	r3, #2
 800bf42:	683a      	ldr	r2, [r7, #0]
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d301      	bcc.n	800bf4c <clust2sect+0x20>
 800bf48:	2300      	movs	r3, #0
 800bf4a:	e008      	b.n	800bf5e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	895b      	ldrh	r3, [r3, #10]
 800bf50:	461a      	mov	r2, r3
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	fb03 f202 	mul.w	r2, r3, r2
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf5c:	4413      	add	r3, r2
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	370c      	adds	r7, #12
 800bf62:	46bd      	mov	sp, r7
 800bf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf68:	4770      	bx	lr

0800bf6a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bf6a:	b580      	push	{r7, lr}
 800bf6c:	b086      	sub	sp, #24
 800bf6e:	af00      	add	r7, sp, #0
 800bf70:	6078      	str	r0, [r7, #4]
 800bf72:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	2b01      	cmp	r3, #1
 800bf7e:	d904      	bls.n	800bf8a <get_fat+0x20>
 800bf80:	693b      	ldr	r3, [r7, #16]
 800bf82:	69db      	ldr	r3, [r3, #28]
 800bf84:	683a      	ldr	r2, [r7, #0]
 800bf86:	429a      	cmp	r2, r3
 800bf88:	d302      	bcc.n	800bf90 <get_fat+0x26>
		val = 1;	/* Internal error */
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	617b      	str	r3, [r7, #20]
 800bf8e:	e08f      	b.n	800c0b0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bf90:	f04f 33ff 	mov.w	r3, #4294967295
 800bf94:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	781b      	ldrb	r3, [r3, #0]
 800bf9a:	2b03      	cmp	r3, #3
 800bf9c:	d062      	beq.n	800c064 <get_fat+0xfa>
 800bf9e:	2b03      	cmp	r3, #3
 800bfa0:	dc7c      	bgt.n	800c09c <get_fat+0x132>
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	d002      	beq.n	800bfac <get_fat+0x42>
 800bfa6:	2b02      	cmp	r3, #2
 800bfa8:	d042      	beq.n	800c030 <get_fat+0xc6>
 800bfaa:	e077      	b.n	800c09c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	60fb      	str	r3, [r7, #12]
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	085b      	lsrs	r3, r3, #1
 800bfb4:	68fa      	ldr	r2, [r7, #12]
 800bfb6:	4413      	add	r3, r2
 800bfb8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	0a5b      	lsrs	r3, r3, #9
 800bfc2:	4413      	add	r3, r2
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	6938      	ldr	r0, [r7, #16]
 800bfc8:	f7ff ff14 	bl	800bdf4 <move_window>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d167      	bne.n	800c0a2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	1c5a      	adds	r2, r3, #1
 800bfd6:	60fa      	str	r2, [r7, #12]
 800bfd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfdc:	693a      	ldr	r2, [r7, #16]
 800bfde:	4413      	add	r3, r2
 800bfe0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bfe4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bfe6:	693b      	ldr	r3, [r7, #16]
 800bfe8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	0a5b      	lsrs	r3, r3, #9
 800bfee:	4413      	add	r3, r2
 800bff0:	4619      	mov	r1, r3
 800bff2:	6938      	ldr	r0, [r7, #16]
 800bff4:	f7ff fefe 	bl	800bdf4 <move_window>
 800bff8:	4603      	mov	r3, r0
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d153      	bne.n	800c0a6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c004:	693a      	ldr	r2, [r7, #16]
 800c006:	4413      	add	r3, r2
 800c008:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c00c:	021b      	lsls	r3, r3, #8
 800c00e:	461a      	mov	r2, r3
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	4313      	orrs	r3, r2
 800c014:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	f003 0301 	and.w	r3, r3, #1
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d002      	beq.n	800c026 <get_fat+0xbc>
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	091b      	lsrs	r3, r3, #4
 800c024:	e002      	b.n	800c02c <get_fat+0xc2>
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c02c:	617b      	str	r3, [r7, #20]
			break;
 800c02e:	e03f      	b.n	800c0b0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	0a1b      	lsrs	r3, r3, #8
 800c038:	4413      	add	r3, r2
 800c03a:	4619      	mov	r1, r3
 800c03c:	6938      	ldr	r0, [r7, #16]
 800c03e:	f7ff fed9 	bl	800bdf4 <move_window>
 800c042:	4603      	mov	r3, r0
 800c044:	2b00      	cmp	r3, #0
 800c046:	d130      	bne.n	800c0aa <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	005b      	lsls	r3, r3, #1
 800c052:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c056:	4413      	add	r3, r2
 800c058:	4618      	mov	r0, r3
 800c05a:	f7ff fbe9 	bl	800b830 <ld_word>
 800c05e:	4603      	mov	r3, r0
 800c060:	617b      	str	r3, [r7, #20]
			break;
 800c062:	e025      	b.n	800c0b0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c064:	693b      	ldr	r3, [r7, #16]
 800c066:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	09db      	lsrs	r3, r3, #7
 800c06c:	4413      	add	r3, r2
 800c06e:	4619      	mov	r1, r3
 800c070:	6938      	ldr	r0, [r7, #16]
 800c072:	f7ff febf 	bl	800bdf4 <move_window>
 800c076:	4603      	mov	r3, r0
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d118      	bne.n	800c0ae <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	009b      	lsls	r3, r3, #2
 800c086:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c08a:	4413      	add	r3, r2
 800c08c:	4618      	mov	r0, r3
 800c08e:	f7ff fbe7 	bl	800b860 <ld_dword>
 800c092:	4603      	mov	r3, r0
 800c094:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c098:	617b      	str	r3, [r7, #20]
			break;
 800c09a:	e009      	b.n	800c0b0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c09c:	2301      	movs	r3, #1
 800c09e:	617b      	str	r3, [r7, #20]
 800c0a0:	e006      	b.n	800c0b0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c0a2:	bf00      	nop
 800c0a4:	e004      	b.n	800c0b0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c0a6:	bf00      	nop
 800c0a8:	e002      	b.n	800c0b0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c0aa:	bf00      	nop
 800c0ac:	e000      	b.n	800c0b0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c0ae:	bf00      	nop
		}
	}

	return val;
 800c0b0:	697b      	ldr	r3, [r7, #20]
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3718      	adds	r7, #24
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}

0800c0ba <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c0ba:	b590      	push	{r4, r7, lr}
 800c0bc:	b089      	sub	sp, #36	; 0x24
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	60f8      	str	r0, [r7, #12]
 800c0c2:	60b9      	str	r1, [r7, #8]
 800c0c4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c0c6:	2302      	movs	r3, #2
 800c0c8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	f240 80d2 	bls.w	800c276 <put_fat+0x1bc>
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	69db      	ldr	r3, [r3, #28]
 800c0d6:	68ba      	ldr	r2, [r7, #8]
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	f080 80cc 	bcs.w	800c276 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	781b      	ldrb	r3, [r3, #0]
 800c0e2:	2b03      	cmp	r3, #3
 800c0e4:	f000 8096 	beq.w	800c214 <put_fat+0x15a>
 800c0e8:	2b03      	cmp	r3, #3
 800c0ea:	f300 80cd 	bgt.w	800c288 <put_fat+0x1ce>
 800c0ee:	2b01      	cmp	r3, #1
 800c0f0:	d002      	beq.n	800c0f8 <put_fat+0x3e>
 800c0f2:	2b02      	cmp	r3, #2
 800c0f4:	d06e      	beq.n	800c1d4 <put_fat+0x11a>
 800c0f6:	e0c7      	b.n	800c288 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c0f8:	68bb      	ldr	r3, [r7, #8]
 800c0fa:	61bb      	str	r3, [r7, #24]
 800c0fc:	69bb      	ldr	r3, [r7, #24]
 800c0fe:	085b      	lsrs	r3, r3, #1
 800c100:	69ba      	ldr	r2, [r7, #24]
 800c102:	4413      	add	r3, r2
 800c104:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c10a:	69bb      	ldr	r3, [r7, #24]
 800c10c:	0a5b      	lsrs	r3, r3, #9
 800c10e:	4413      	add	r3, r2
 800c110:	4619      	mov	r1, r3
 800c112:	68f8      	ldr	r0, [r7, #12]
 800c114:	f7ff fe6e 	bl	800bdf4 <move_window>
 800c118:	4603      	mov	r3, r0
 800c11a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c11c:	7ffb      	ldrb	r3, [r7, #31]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	f040 80ab 	bne.w	800c27a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c12a:	69bb      	ldr	r3, [r7, #24]
 800c12c:	1c59      	adds	r1, r3, #1
 800c12e:	61b9      	str	r1, [r7, #24]
 800c130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c134:	4413      	add	r3, r2
 800c136:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	f003 0301 	and.w	r3, r3, #1
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d00d      	beq.n	800c15e <put_fat+0xa4>
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	781b      	ldrb	r3, [r3, #0]
 800c146:	b25b      	sxtb	r3, r3
 800c148:	f003 030f 	and.w	r3, r3, #15
 800c14c:	b25a      	sxtb	r2, r3
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	b2db      	uxtb	r3, r3
 800c152:	011b      	lsls	r3, r3, #4
 800c154:	b25b      	sxtb	r3, r3
 800c156:	4313      	orrs	r3, r2
 800c158:	b25b      	sxtb	r3, r3
 800c15a:	b2db      	uxtb	r3, r3
 800c15c:	e001      	b.n	800c162 <put_fat+0xa8>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	b2db      	uxtb	r3, r3
 800c162:	697a      	ldr	r2, [r7, #20]
 800c164:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	2201      	movs	r2, #1
 800c16a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c170:	69bb      	ldr	r3, [r7, #24]
 800c172:	0a5b      	lsrs	r3, r3, #9
 800c174:	4413      	add	r3, r2
 800c176:	4619      	mov	r1, r3
 800c178:	68f8      	ldr	r0, [r7, #12]
 800c17a:	f7ff fe3b 	bl	800bdf4 <move_window>
 800c17e:	4603      	mov	r3, r0
 800c180:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c182:	7ffb      	ldrb	r3, [r7, #31]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d17a      	bne.n	800c27e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c18e:	69bb      	ldr	r3, [r7, #24]
 800c190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c194:	4413      	add	r3, r2
 800c196:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	f003 0301 	and.w	r3, r3, #1
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d003      	beq.n	800c1aa <put_fat+0xf0>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	091b      	lsrs	r3, r3, #4
 800c1a6:	b2db      	uxtb	r3, r3
 800c1a8:	e00e      	b.n	800c1c8 <put_fat+0x10e>
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	781b      	ldrb	r3, [r3, #0]
 800c1ae:	b25b      	sxtb	r3, r3
 800c1b0:	f023 030f 	bic.w	r3, r3, #15
 800c1b4:	b25a      	sxtb	r2, r3
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	0a1b      	lsrs	r3, r3, #8
 800c1ba:	b25b      	sxtb	r3, r3
 800c1bc:	f003 030f 	and.w	r3, r3, #15
 800c1c0:	b25b      	sxtb	r3, r3
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	b25b      	sxtb	r3, r3
 800c1c6:	b2db      	uxtb	r3, r3
 800c1c8:	697a      	ldr	r2, [r7, #20]
 800c1ca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	2201      	movs	r2, #1
 800c1d0:	70da      	strb	r2, [r3, #3]
			break;
 800c1d2:	e059      	b.n	800c288 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	0a1b      	lsrs	r3, r3, #8
 800c1dc:	4413      	add	r3, r2
 800c1de:	4619      	mov	r1, r3
 800c1e0:	68f8      	ldr	r0, [r7, #12]
 800c1e2:	f7ff fe07 	bl	800bdf4 <move_window>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c1ea:	7ffb      	ldrb	r3, [r7, #31]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d148      	bne.n	800c282 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	005b      	lsls	r3, r3, #1
 800c1fa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c1fe:	4413      	add	r3, r2
 800c200:	687a      	ldr	r2, [r7, #4]
 800c202:	b292      	uxth	r2, r2
 800c204:	4611      	mov	r1, r2
 800c206:	4618      	mov	r0, r3
 800c208:	f7ff fb4d 	bl	800b8a6 <st_word>
			fs->wflag = 1;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	2201      	movs	r2, #1
 800c210:	70da      	strb	r2, [r3, #3]
			break;
 800c212:	e039      	b.n	800c288 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	09db      	lsrs	r3, r3, #7
 800c21c:	4413      	add	r3, r2
 800c21e:	4619      	mov	r1, r3
 800c220:	68f8      	ldr	r0, [r7, #12]
 800c222:	f7ff fde7 	bl	800bdf4 <move_window>
 800c226:	4603      	mov	r3, r0
 800c228:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c22a:	7ffb      	ldrb	r3, [r7, #31]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d12a      	bne.n	800c286 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	009b      	lsls	r3, r3, #2
 800c240:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c244:	4413      	add	r3, r2
 800c246:	4618      	mov	r0, r3
 800c248:	f7ff fb0a 	bl	800b860 <ld_dword>
 800c24c:	4603      	mov	r3, r0
 800c24e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c252:	4323      	orrs	r3, r4
 800c254:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	009b      	lsls	r3, r3, #2
 800c260:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c264:	4413      	add	r3, r2
 800c266:	6879      	ldr	r1, [r7, #4]
 800c268:	4618      	mov	r0, r3
 800c26a:	f7ff fb37 	bl	800b8dc <st_dword>
			fs->wflag = 1;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	2201      	movs	r2, #1
 800c272:	70da      	strb	r2, [r3, #3]
			break;
 800c274:	e008      	b.n	800c288 <put_fat+0x1ce>
		}
	}
 800c276:	bf00      	nop
 800c278:	e006      	b.n	800c288 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c27a:	bf00      	nop
 800c27c:	e004      	b.n	800c288 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c27e:	bf00      	nop
 800c280:	e002      	b.n	800c288 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c282:	bf00      	nop
 800c284:	e000      	b.n	800c288 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c286:	bf00      	nop
	return res;
 800c288:	7ffb      	ldrb	r3, [r7, #31]
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3724      	adds	r7, #36	; 0x24
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd90      	pop	{r4, r7, pc}

0800c292 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c292:	b580      	push	{r7, lr}
 800c294:	b088      	sub	sp, #32
 800c296:	af00      	add	r7, sp, #0
 800c298:	60f8      	str	r0, [r7, #12]
 800c29a:	60b9      	str	r1, [r7, #8]
 800c29c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	2b01      	cmp	r3, #1
 800c2ac:	d904      	bls.n	800c2b8 <remove_chain+0x26>
 800c2ae:	69bb      	ldr	r3, [r7, #24]
 800c2b0:	69db      	ldr	r3, [r3, #28]
 800c2b2:	68ba      	ldr	r2, [r7, #8]
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d301      	bcc.n	800c2bc <remove_chain+0x2a>
 800c2b8:	2302      	movs	r3, #2
 800c2ba:	e04b      	b.n	800c354 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d00c      	beq.n	800c2dc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c2c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c2c6:	6879      	ldr	r1, [r7, #4]
 800c2c8:	69b8      	ldr	r0, [r7, #24]
 800c2ca:	f7ff fef6 	bl	800c0ba <put_fat>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c2d2:	7ffb      	ldrb	r3, [r7, #31]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d001      	beq.n	800c2dc <remove_chain+0x4a>
 800c2d8:	7ffb      	ldrb	r3, [r7, #31]
 800c2da:	e03b      	b.n	800c354 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c2dc:	68b9      	ldr	r1, [r7, #8]
 800c2de:	68f8      	ldr	r0, [r7, #12]
 800c2e0:	f7ff fe43 	bl	800bf6a <get_fat>
 800c2e4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d031      	beq.n	800c350 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	2b01      	cmp	r3, #1
 800c2f0:	d101      	bne.n	800c2f6 <remove_chain+0x64>
 800c2f2:	2302      	movs	r3, #2
 800c2f4:	e02e      	b.n	800c354 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2fc:	d101      	bne.n	800c302 <remove_chain+0x70>
 800c2fe:	2301      	movs	r3, #1
 800c300:	e028      	b.n	800c354 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c302:	2200      	movs	r2, #0
 800c304:	68b9      	ldr	r1, [r7, #8]
 800c306:	69b8      	ldr	r0, [r7, #24]
 800c308:	f7ff fed7 	bl	800c0ba <put_fat>
 800c30c:	4603      	mov	r3, r0
 800c30e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c310:	7ffb      	ldrb	r3, [r7, #31]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d001      	beq.n	800c31a <remove_chain+0x88>
 800c316:	7ffb      	ldrb	r3, [r7, #31]
 800c318:	e01c      	b.n	800c354 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c31a:	69bb      	ldr	r3, [r7, #24]
 800c31c:	699a      	ldr	r2, [r3, #24]
 800c31e:	69bb      	ldr	r3, [r7, #24]
 800c320:	69db      	ldr	r3, [r3, #28]
 800c322:	3b02      	subs	r3, #2
 800c324:	429a      	cmp	r2, r3
 800c326:	d20b      	bcs.n	800c340 <remove_chain+0xae>
			fs->free_clst++;
 800c328:	69bb      	ldr	r3, [r7, #24]
 800c32a:	699b      	ldr	r3, [r3, #24]
 800c32c:	1c5a      	adds	r2, r3, #1
 800c32e:	69bb      	ldr	r3, [r7, #24]
 800c330:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800c332:	69bb      	ldr	r3, [r7, #24]
 800c334:	791b      	ldrb	r3, [r3, #4]
 800c336:	f043 0301 	orr.w	r3, r3, #1
 800c33a:	b2da      	uxtb	r2, r3
 800c33c:	69bb      	ldr	r3, [r7, #24]
 800c33e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c344:	69bb      	ldr	r3, [r7, #24]
 800c346:	69db      	ldr	r3, [r3, #28]
 800c348:	68ba      	ldr	r2, [r7, #8]
 800c34a:	429a      	cmp	r2, r3
 800c34c:	d3c6      	bcc.n	800c2dc <remove_chain+0x4a>
 800c34e:	e000      	b.n	800c352 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c350:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c352:	2300      	movs	r3, #0
}
 800c354:	4618      	mov	r0, r3
 800c356:	3720      	adds	r7, #32
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}

0800c35c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b088      	sub	sp, #32
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d10d      	bne.n	800c38e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	695b      	ldr	r3, [r3, #20]
 800c376:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c378:	69bb      	ldr	r3, [r7, #24]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d004      	beq.n	800c388 <create_chain+0x2c>
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	69db      	ldr	r3, [r3, #28]
 800c382:	69ba      	ldr	r2, [r7, #24]
 800c384:	429a      	cmp	r2, r3
 800c386:	d31b      	bcc.n	800c3c0 <create_chain+0x64>
 800c388:	2301      	movs	r3, #1
 800c38a:	61bb      	str	r3, [r7, #24]
 800c38c:	e018      	b.n	800c3c0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c38e:	6839      	ldr	r1, [r7, #0]
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f7ff fdea 	bl	800bf6a <get_fat>
 800c396:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	2b01      	cmp	r3, #1
 800c39c:	d801      	bhi.n	800c3a2 <create_chain+0x46>
 800c39e:	2301      	movs	r3, #1
 800c3a0:	e070      	b.n	800c484 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3a8:	d101      	bne.n	800c3ae <create_chain+0x52>
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	e06a      	b.n	800c484 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	69db      	ldr	r3, [r3, #28]
 800c3b2:	68fa      	ldr	r2, [r7, #12]
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d201      	bcs.n	800c3bc <create_chain+0x60>
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	e063      	b.n	800c484 <create_chain+0x128>
		scl = clst;
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c3c0:	69bb      	ldr	r3, [r7, #24]
 800c3c2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c3c4:	69fb      	ldr	r3, [r7, #28]
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c3ca:	693b      	ldr	r3, [r7, #16]
 800c3cc:	69db      	ldr	r3, [r3, #28]
 800c3ce:	69fa      	ldr	r2, [r7, #28]
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	d307      	bcc.n	800c3e4 <create_chain+0x88>
				ncl = 2;
 800c3d4:	2302      	movs	r3, #2
 800c3d6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c3d8:	69fa      	ldr	r2, [r7, #28]
 800c3da:	69bb      	ldr	r3, [r7, #24]
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d901      	bls.n	800c3e4 <create_chain+0x88>
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	e04f      	b.n	800c484 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c3e4:	69f9      	ldr	r1, [r7, #28]
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f7ff fdbf 	bl	800bf6a <get_fat>
 800c3ec:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d00e      	beq.n	800c412 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	2b01      	cmp	r3, #1
 800c3f8:	d003      	beq.n	800c402 <create_chain+0xa6>
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c400:	d101      	bne.n	800c406 <create_chain+0xaa>
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	e03e      	b.n	800c484 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c406:	69fa      	ldr	r2, [r7, #28]
 800c408:	69bb      	ldr	r3, [r7, #24]
 800c40a:	429a      	cmp	r2, r3
 800c40c:	d1da      	bne.n	800c3c4 <create_chain+0x68>
 800c40e:	2300      	movs	r3, #0
 800c410:	e038      	b.n	800c484 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c412:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c414:	f04f 32ff 	mov.w	r2, #4294967295
 800c418:	69f9      	ldr	r1, [r7, #28]
 800c41a:	6938      	ldr	r0, [r7, #16]
 800c41c:	f7ff fe4d 	bl	800c0ba <put_fat>
 800c420:	4603      	mov	r3, r0
 800c422:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c424:	7dfb      	ldrb	r3, [r7, #23]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d109      	bne.n	800c43e <create_chain+0xe2>
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d006      	beq.n	800c43e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c430:	69fa      	ldr	r2, [r7, #28]
 800c432:	6839      	ldr	r1, [r7, #0]
 800c434:	6938      	ldr	r0, [r7, #16]
 800c436:	f7ff fe40 	bl	800c0ba <put_fat>
 800c43a:	4603      	mov	r3, r0
 800c43c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c43e:	7dfb      	ldrb	r3, [r7, #23]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d116      	bne.n	800c472 <create_chain+0x116>
		fs->last_clst = ncl;
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	69fa      	ldr	r2, [r7, #28]
 800c448:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	699a      	ldr	r2, [r3, #24]
 800c44e:	693b      	ldr	r3, [r7, #16]
 800c450:	69db      	ldr	r3, [r3, #28]
 800c452:	3b02      	subs	r3, #2
 800c454:	429a      	cmp	r2, r3
 800c456:	d804      	bhi.n	800c462 <create_chain+0x106>
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	699b      	ldr	r3, [r3, #24]
 800c45c:	1e5a      	subs	r2, r3, #1
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	791b      	ldrb	r3, [r3, #4]
 800c466:	f043 0301 	orr.w	r3, r3, #1
 800c46a:	b2da      	uxtb	r2, r3
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	711a      	strb	r2, [r3, #4]
 800c470:	e007      	b.n	800c482 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c472:	7dfb      	ldrb	r3, [r7, #23]
 800c474:	2b01      	cmp	r3, #1
 800c476:	d102      	bne.n	800c47e <create_chain+0x122>
 800c478:	f04f 33ff 	mov.w	r3, #4294967295
 800c47c:	e000      	b.n	800c480 <create_chain+0x124>
 800c47e:	2301      	movs	r3, #1
 800c480:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c482:	69fb      	ldr	r3, [r7, #28]
}
 800c484:	4618      	mov	r0, r3
 800c486:	3720      	adds	r7, #32
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd80      	pop	{r7, pc}

0800c48c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b087      	sub	sp, #28
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4a0:	3304      	adds	r3, #4
 800c4a2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	0a5b      	lsrs	r3, r3, #9
 800c4a8:	68fa      	ldr	r2, [r7, #12]
 800c4aa:	8952      	ldrh	r2, [r2, #10]
 800c4ac:	fbb3 f3f2 	udiv	r3, r3, r2
 800c4b0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c4b2:	693b      	ldr	r3, [r7, #16]
 800c4b4:	1d1a      	adds	r2, r3, #4
 800c4b6:	613a      	str	r2, [r7, #16]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d101      	bne.n	800c4c6 <clmt_clust+0x3a>
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	e010      	b.n	800c4e8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c4c6:	697a      	ldr	r2, [r7, #20]
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d307      	bcc.n	800c4de <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c4ce:	697a      	ldr	r2, [r7, #20]
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	1ad3      	subs	r3, r2, r3
 800c4d4:	617b      	str	r3, [r7, #20]
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	3304      	adds	r3, #4
 800c4da:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c4dc:	e7e9      	b.n	800c4b2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c4de:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c4e0:	693b      	ldr	r3, [r7, #16]
 800c4e2:	681a      	ldr	r2, [r3, #0]
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	4413      	add	r3, r2
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	371c      	adds	r7, #28
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr

0800c4f4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b086      	sub	sp, #24
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
 800c4fc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c50a:	d204      	bcs.n	800c516 <dir_sdi+0x22>
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	f003 031f 	and.w	r3, r3, #31
 800c512:	2b00      	cmp	r3, #0
 800c514:	d001      	beq.n	800c51a <dir_sdi+0x26>
		return FR_INT_ERR;
 800c516:	2302      	movs	r3, #2
 800c518:	e063      	b.n	800c5e2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	683a      	ldr	r2, [r7, #0]
 800c51e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	689b      	ldr	r3, [r3, #8]
 800c524:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d106      	bne.n	800c53a <dir_sdi+0x46>
 800c52c:	693b      	ldr	r3, [r7, #16]
 800c52e:	781b      	ldrb	r3, [r3, #0]
 800c530:	2b02      	cmp	r3, #2
 800c532:	d902      	bls.n	800c53a <dir_sdi+0x46>
		clst = fs->dirbase;
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c538:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d10c      	bne.n	800c55a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	095b      	lsrs	r3, r3, #5
 800c544:	693a      	ldr	r2, [r7, #16]
 800c546:	8912      	ldrh	r2, [r2, #8]
 800c548:	4293      	cmp	r3, r2
 800c54a:	d301      	bcc.n	800c550 <dir_sdi+0x5c>
 800c54c:	2302      	movs	r3, #2
 800c54e:	e048      	b.n	800c5e2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	61da      	str	r2, [r3, #28]
 800c558:	e029      	b.n	800c5ae <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c55a:	693b      	ldr	r3, [r7, #16]
 800c55c:	895b      	ldrh	r3, [r3, #10]
 800c55e:	025b      	lsls	r3, r3, #9
 800c560:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c562:	e019      	b.n	800c598 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6979      	ldr	r1, [r7, #20]
 800c568:	4618      	mov	r0, r3
 800c56a:	f7ff fcfe 	bl	800bf6a <get_fat>
 800c56e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c570:	697b      	ldr	r3, [r7, #20]
 800c572:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c576:	d101      	bne.n	800c57c <dir_sdi+0x88>
 800c578:	2301      	movs	r3, #1
 800c57a:	e032      	b.n	800c5e2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	2b01      	cmp	r3, #1
 800c580:	d904      	bls.n	800c58c <dir_sdi+0x98>
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	69db      	ldr	r3, [r3, #28]
 800c586:	697a      	ldr	r2, [r7, #20]
 800c588:	429a      	cmp	r2, r3
 800c58a:	d301      	bcc.n	800c590 <dir_sdi+0x9c>
 800c58c:	2302      	movs	r3, #2
 800c58e:	e028      	b.n	800c5e2 <dir_sdi+0xee>
			ofs -= csz;
 800c590:	683a      	ldr	r2, [r7, #0]
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	1ad3      	subs	r3, r2, r3
 800c596:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c598:	683a      	ldr	r2, [r7, #0]
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d2e1      	bcs.n	800c564 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c5a0:	6979      	ldr	r1, [r7, #20]
 800c5a2:	6938      	ldr	r0, [r7, #16]
 800c5a4:	f7ff fcc2 	bl	800bf2c <clust2sect>
 800c5a8:	4602      	mov	r2, r0
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	697a      	ldr	r2, [r7, #20]
 800c5b2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	69db      	ldr	r3, [r3, #28]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d101      	bne.n	800c5c0 <dir_sdi+0xcc>
 800c5bc:	2302      	movs	r3, #2
 800c5be:	e010      	b.n	800c5e2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	69da      	ldr	r2, [r3, #28]
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	0a5b      	lsrs	r3, r3, #9
 800c5c8:	441a      	add	r2, r3
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5da:	441a      	add	r2, r3
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c5e0:	2300      	movs	r3, #0
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3718      	adds	r7, #24
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}

0800c5ea <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c5ea:	b580      	push	{r7, lr}
 800c5ec:	b086      	sub	sp, #24
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	6078      	str	r0, [r7, #4]
 800c5f2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	695b      	ldr	r3, [r3, #20]
 800c5fe:	3320      	adds	r3, #32
 800c600:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	69db      	ldr	r3, [r3, #28]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d003      	beq.n	800c612 <dir_next+0x28>
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c610:	d301      	bcc.n	800c616 <dir_next+0x2c>
 800c612:	2304      	movs	r3, #4
 800c614:	e0aa      	b.n	800c76c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	f040 8098 	bne.w	800c752 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	69db      	ldr	r3, [r3, #28]
 800c626:	1c5a      	adds	r2, r3, #1
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	699b      	ldr	r3, [r3, #24]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d10b      	bne.n	800c64c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	095b      	lsrs	r3, r3, #5
 800c638:	68fa      	ldr	r2, [r7, #12]
 800c63a:	8912      	ldrh	r2, [r2, #8]
 800c63c:	4293      	cmp	r3, r2
 800c63e:	f0c0 8088 	bcc.w	800c752 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2200      	movs	r2, #0
 800c646:	61da      	str	r2, [r3, #28]
 800c648:	2304      	movs	r3, #4
 800c64a:	e08f      	b.n	800c76c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	0a5b      	lsrs	r3, r3, #9
 800c650:	68fa      	ldr	r2, [r7, #12]
 800c652:	8952      	ldrh	r2, [r2, #10]
 800c654:	3a01      	subs	r2, #1
 800c656:	4013      	ands	r3, r2
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d17a      	bne.n	800c752 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c65c:	687a      	ldr	r2, [r7, #4]
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	699b      	ldr	r3, [r3, #24]
 800c662:	4619      	mov	r1, r3
 800c664:	4610      	mov	r0, r2
 800c666:	f7ff fc80 	bl	800bf6a <get_fat>
 800c66a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c66c:	697b      	ldr	r3, [r7, #20]
 800c66e:	2b01      	cmp	r3, #1
 800c670:	d801      	bhi.n	800c676 <dir_next+0x8c>
 800c672:	2302      	movs	r3, #2
 800c674:	e07a      	b.n	800c76c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c67c:	d101      	bne.n	800c682 <dir_next+0x98>
 800c67e:	2301      	movs	r3, #1
 800c680:	e074      	b.n	800c76c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	69db      	ldr	r3, [r3, #28]
 800c686:	697a      	ldr	r2, [r7, #20]
 800c688:	429a      	cmp	r2, r3
 800c68a:	d358      	bcc.n	800c73e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d104      	bne.n	800c69c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2200      	movs	r2, #0
 800c696:	61da      	str	r2, [r3, #28]
 800c698:	2304      	movs	r3, #4
 800c69a:	e067      	b.n	800c76c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c69c:	687a      	ldr	r2, [r7, #4]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	699b      	ldr	r3, [r3, #24]
 800c6a2:	4619      	mov	r1, r3
 800c6a4:	4610      	mov	r0, r2
 800c6a6:	f7ff fe59 	bl	800c35c <create_chain>
 800c6aa:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d101      	bne.n	800c6b6 <dir_next+0xcc>
 800c6b2:	2307      	movs	r3, #7
 800c6b4:	e05a      	b.n	800c76c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	2b01      	cmp	r3, #1
 800c6ba:	d101      	bne.n	800c6c0 <dir_next+0xd6>
 800c6bc:	2302      	movs	r3, #2
 800c6be:	e055      	b.n	800c76c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6c6:	d101      	bne.n	800c6cc <dir_next+0xe2>
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	e04f      	b.n	800c76c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c6cc:	68f8      	ldr	r0, [r7, #12]
 800c6ce:	f7ff fb4d 	bl	800bd6c <sync_window>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d001      	beq.n	800c6dc <dir_next+0xf2>
 800c6d8:	2301      	movs	r3, #1
 800c6da:	e047      	b.n	800c76c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	3338      	adds	r3, #56	; 0x38
 800c6e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c6e4:	2100      	movs	r1, #0
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f7ff f945 	bl	800b976 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	613b      	str	r3, [r7, #16]
 800c6f0:	6979      	ldr	r1, [r7, #20]
 800c6f2:	68f8      	ldr	r0, [r7, #12]
 800c6f4:	f7ff fc1a 	bl	800bf2c <clust2sect>
 800c6f8:	4602      	mov	r2, r0
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	635a      	str	r2, [r3, #52]	; 0x34
 800c6fe:	e012      	b.n	800c726 <dir_next+0x13c>
						fs->wflag = 1;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2201      	movs	r2, #1
 800c704:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c706:	68f8      	ldr	r0, [r7, #12]
 800c708:	f7ff fb30 	bl	800bd6c <sync_window>
 800c70c:	4603      	mov	r3, r0
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d001      	beq.n	800c716 <dir_next+0x12c>
 800c712:	2301      	movs	r3, #1
 800c714:	e02a      	b.n	800c76c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	3301      	adds	r3, #1
 800c71a:	613b      	str	r3, [r7, #16]
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c720:	1c5a      	adds	r2, r3, #1
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	635a      	str	r2, [r3, #52]	; 0x34
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	895b      	ldrh	r3, [r3, #10]
 800c72a:	461a      	mov	r2, r3
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	4293      	cmp	r3, r2
 800c730:	d3e6      	bcc.n	800c700 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	1ad2      	subs	r2, r2, r3
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	697a      	ldr	r2, [r7, #20]
 800c742:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c744:	6979      	ldr	r1, [r7, #20]
 800c746:	68f8      	ldr	r0, [r7, #12]
 800c748:	f7ff fbf0 	bl	800bf2c <clust2sect>
 800c74c:	4602      	mov	r2, r0
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	68ba      	ldr	r2, [r7, #8]
 800c756:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c764:	441a      	add	r2, r3
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c76a:	2300      	movs	r3, #0
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3718      	adds	r7, #24
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}

0800c774 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b086      	sub	sp, #24
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c784:	2100      	movs	r1, #0
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f7ff feb4 	bl	800c4f4 <dir_sdi>
 800c78c:	4603      	mov	r3, r0
 800c78e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c790:	7dfb      	ldrb	r3, [r7, #23]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d12b      	bne.n	800c7ee <dir_alloc+0x7a>
		n = 0;
 800c796:	2300      	movs	r3, #0
 800c798:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	69db      	ldr	r3, [r3, #28]
 800c79e:	4619      	mov	r1, r3
 800c7a0:	68f8      	ldr	r0, [r7, #12]
 800c7a2:	f7ff fb27 	bl	800bdf4 <move_window>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c7aa:	7dfb      	ldrb	r3, [r7, #23]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d11d      	bne.n	800c7ec <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6a1b      	ldr	r3, [r3, #32]
 800c7b4:	781b      	ldrb	r3, [r3, #0]
 800c7b6:	2be5      	cmp	r3, #229	; 0xe5
 800c7b8:	d004      	beq.n	800c7c4 <dir_alloc+0x50>
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	6a1b      	ldr	r3, [r3, #32]
 800c7be:	781b      	ldrb	r3, [r3, #0]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d107      	bne.n	800c7d4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	3301      	adds	r3, #1
 800c7c8:	613b      	str	r3, [r7, #16]
 800c7ca:	693a      	ldr	r2, [r7, #16]
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	429a      	cmp	r2, r3
 800c7d0:	d102      	bne.n	800c7d8 <dir_alloc+0x64>
 800c7d2:	e00c      	b.n	800c7ee <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c7d8:	2101      	movs	r1, #1
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f7ff ff05 	bl	800c5ea <dir_next>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c7e4:	7dfb      	ldrb	r3, [r7, #23]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d0d7      	beq.n	800c79a <dir_alloc+0x26>
 800c7ea:	e000      	b.n	800c7ee <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c7ec:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c7ee:	7dfb      	ldrb	r3, [r7, #23]
 800c7f0:	2b04      	cmp	r3, #4
 800c7f2:	d101      	bne.n	800c7f8 <dir_alloc+0x84>
 800c7f4:	2307      	movs	r3, #7
 800c7f6:	75fb      	strb	r3, [r7, #23]
	return res;
 800c7f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3718      	adds	r7, #24
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}

0800c802 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c802:	b580      	push	{r7, lr}
 800c804:	b084      	sub	sp, #16
 800c806:	af00      	add	r7, sp, #0
 800c808:	6078      	str	r0, [r7, #4]
 800c80a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	331a      	adds	r3, #26
 800c810:	4618      	mov	r0, r3
 800c812:	f7ff f80d 	bl	800b830 <ld_word>
 800c816:	4603      	mov	r3, r0
 800c818:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	781b      	ldrb	r3, [r3, #0]
 800c81e:	2b03      	cmp	r3, #3
 800c820:	d109      	bne.n	800c836 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	3314      	adds	r3, #20
 800c826:	4618      	mov	r0, r3
 800c828:	f7ff f802 	bl	800b830 <ld_word>
 800c82c:	4603      	mov	r3, r0
 800c82e:	041b      	lsls	r3, r3, #16
 800c830:	68fa      	ldr	r2, [r7, #12]
 800c832:	4313      	orrs	r3, r2
 800c834:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c836:	68fb      	ldr	r3, [r7, #12]
}
 800c838:	4618      	mov	r0, r3
 800c83a:	3710      	adds	r7, #16
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}

0800c840 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b084      	sub	sp, #16
 800c844:	af00      	add	r7, sp, #0
 800c846:	60f8      	str	r0, [r7, #12]
 800c848:	60b9      	str	r1, [r7, #8]
 800c84a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	331a      	adds	r3, #26
 800c850:	687a      	ldr	r2, [r7, #4]
 800c852:	b292      	uxth	r2, r2
 800c854:	4611      	mov	r1, r2
 800c856:	4618      	mov	r0, r3
 800c858:	f7ff f825 	bl	800b8a6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	781b      	ldrb	r3, [r3, #0]
 800c860:	2b03      	cmp	r3, #3
 800c862:	d109      	bne.n	800c878 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	f103 0214 	add.w	r2, r3, #20
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	0c1b      	lsrs	r3, r3, #16
 800c86e:	b29b      	uxth	r3, r3
 800c870:	4619      	mov	r1, r3
 800c872:	4610      	mov	r0, r2
 800c874:	f7ff f817 	bl	800b8a6 <st_word>
	}
}
 800c878:	bf00      	nop
 800c87a:	3710      	adds	r7, #16
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}

0800c880 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c880:	b590      	push	{r4, r7, lr}
 800c882:	b087      	sub	sp, #28
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	331a      	adds	r3, #26
 800c88e:	4618      	mov	r0, r3
 800c890:	f7fe ffce 	bl	800b830 <ld_word>
 800c894:	4603      	mov	r3, r0
 800c896:	2b00      	cmp	r3, #0
 800c898:	d001      	beq.n	800c89e <cmp_lfn+0x1e>
 800c89a:	2300      	movs	r3, #0
 800c89c:	e059      	b.n	800c952 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	781b      	ldrb	r3, [r3, #0]
 800c8a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8a6:	1e5a      	subs	r2, r3, #1
 800c8a8:	4613      	mov	r3, r2
 800c8aa:	005b      	lsls	r3, r3, #1
 800c8ac:	4413      	add	r3, r2
 800c8ae:	009b      	lsls	r3, r3, #2
 800c8b0:	4413      	add	r3, r2
 800c8b2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	81fb      	strh	r3, [r7, #14]
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	613b      	str	r3, [r7, #16]
 800c8bc:	e033      	b.n	800c926 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c8be:	4a27      	ldr	r2, [pc, #156]	; (800c95c <cmp_lfn+0xdc>)
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	4413      	add	r3, r2
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	461a      	mov	r2, r3
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	4413      	add	r3, r2
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f7fe ffaf 	bl	800b830 <ld_word>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c8d6:	89fb      	ldrh	r3, [r7, #14]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d01a      	beq.n	800c912 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	2bfe      	cmp	r3, #254	; 0xfe
 800c8e0:	d812      	bhi.n	800c908 <cmp_lfn+0x88>
 800c8e2:	89bb      	ldrh	r3, [r7, #12]
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f002 faf3 	bl	800eed0 <ff_wtoupper>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	461c      	mov	r4, r3
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	1c5a      	adds	r2, r3, #1
 800c8f2:	617a      	str	r2, [r7, #20]
 800c8f4:	005b      	lsls	r3, r3, #1
 800c8f6:	687a      	ldr	r2, [r7, #4]
 800c8f8:	4413      	add	r3, r2
 800c8fa:	881b      	ldrh	r3, [r3, #0]
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f002 fae7 	bl	800eed0 <ff_wtoupper>
 800c902:	4603      	mov	r3, r0
 800c904:	429c      	cmp	r4, r3
 800c906:	d001      	beq.n	800c90c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c908:	2300      	movs	r3, #0
 800c90a:	e022      	b.n	800c952 <cmp_lfn+0xd2>
			}
			wc = uc;
 800c90c:	89bb      	ldrh	r3, [r7, #12]
 800c90e:	81fb      	strh	r3, [r7, #14]
 800c910:	e006      	b.n	800c920 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c912:	89bb      	ldrh	r3, [r7, #12]
 800c914:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c918:	4293      	cmp	r3, r2
 800c91a:	d001      	beq.n	800c920 <cmp_lfn+0xa0>
 800c91c:	2300      	movs	r3, #0
 800c91e:	e018      	b.n	800c952 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	3301      	adds	r3, #1
 800c924:	613b      	str	r3, [r7, #16]
 800c926:	693b      	ldr	r3, [r7, #16]
 800c928:	2b0c      	cmp	r3, #12
 800c92a:	d9c8      	bls.n	800c8be <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	781b      	ldrb	r3, [r3, #0]
 800c930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c934:	2b00      	cmp	r3, #0
 800c936:	d00b      	beq.n	800c950 <cmp_lfn+0xd0>
 800c938:	89fb      	ldrh	r3, [r7, #14]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d008      	beq.n	800c950 <cmp_lfn+0xd0>
 800c93e:	697b      	ldr	r3, [r7, #20]
 800c940:	005b      	lsls	r3, r3, #1
 800c942:	687a      	ldr	r2, [r7, #4]
 800c944:	4413      	add	r3, r2
 800c946:	881b      	ldrh	r3, [r3, #0]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d001      	beq.n	800c950 <cmp_lfn+0xd0>
 800c94c:	2300      	movs	r3, #0
 800c94e:	e000      	b.n	800c952 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c950:	2301      	movs	r3, #1
}
 800c952:	4618      	mov	r0, r3
 800c954:	371c      	adds	r7, #28
 800c956:	46bd      	mov	sp, r7
 800c958:	bd90      	pop	{r4, r7, pc}
 800c95a:	bf00      	nop
 800c95c:	08046bf0 	.word	0x08046bf0

0800c960 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b088      	sub	sp, #32
 800c964:	af00      	add	r7, sp, #0
 800c966:	60f8      	str	r0, [r7, #12]
 800c968:	60b9      	str	r1, [r7, #8]
 800c96a:	4611      	mov	r1, r2
 800c96c:	461a      	mov	r2, r3
 800c96e:	460b      	mov	r3, r1
 800c970:	71fb      	strb	r3, [r7, #7]
 800c972:	4613      	mov	r3, r2
 800c974:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	330d      	adds	r3, #13
 800c97a:	79ba      	ldrb	r2, [r7, #6]
 800c97c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	330b      	adds	r3, #11
 800c982:	220f      	movs	r2, #15
 800c984:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	330c      	adds	r3, #12
 800c98a:	2200      	movs	r2, #0
 800c98c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	331a      	adds	r3, #26
 800c992:	2100      	movs	r1, #0
 800c994:	4618      	mov	r0, r3
 800c996:	f7fe ff86 	bl	800b8a6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c99a:	79fb      	ldrb	r3, [r7, #7]
 800c99c:	1e5a      	subs	r2, r3, #1
 800c99e:	4613      	mov	r3, r2
 800c9a0:	005b      	lsls	r3, r3, #1
 800c9a2:	4413      	add	r3, r2
 800c9a4:	009b      	lsls	r3, r3, #2
 800c9a6:	4413      	add	r3, r2
 800c9a8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	82fb      	strh	r3, [r7, #22]
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c9b2:	8afb      	ldrh	r3, [r7, #22]
 800c9b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d007      	beq.n	800c9cc <put_lfn+0x6c>
 800c9bc:	69fb      	ldr	r3, [r7, #28]
 800c9be:	1c5a      	adds	r2, r3, #1
 800c9c0:	61fa      	str	r2, [r7, #28]
 800c9c2:	005b      	lsls	r3, r3, #1
 800c9c4:	68fa      	ldr	r2, [r7, #12]
 800c9c6:	4413      	add	r3, r2
 800c9c8:	881b      	ldrh	r3, [r3, #0]
 800c9ca:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c9cc:	4a17      	ldr	r2, [pc, #92]	; (800ca2c <put_lfn+0xcc>)
 800c9ce:	69bb      	ldr	r3, [r7, #24]
 800c9d0:	4413      	add	r3, r2
 800c9d2:	781b      	ldrb	r3, [r3, #0]
 800c9d4:	461a      	mov	r2, r3
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	4413      	add	r3, r2
 800c9da:	8afa      	ldrh	r2, [r7, #22]
 800c9dc:	4611      	mov	r1, r2
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f7fe ff61 	bl	800b8a6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c9e4:	8afb      	ldrh	r3, [r7, #22]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d102      	bne.n	800c9f0 <put_lfn+0x90>
 800c9ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c9ee:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c9f0:	69bb      	ldr	r3, [r7, #24]
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	61bb      	str	r3, [r7, #24]
 800c9f6:	69bb      	ldr	r3, [r7, #24]
 800c9f8:	2b0c      	cmp	r3, #12
 800c9fa:	d9da      	bls.n	800c9b2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c9fc:	8afb      	ldrh	r3, [r7, #22]
 800c9fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d006      	beq.n	800ca14 <put_lfn+0xb4>
 800ca06:	69fb      	ldr	r3, [r7, #28]
 800ca08:	005b      	lsls	r3, r3, #1
 800ca0a:	68fa      	ldr	r2, [r7, #12]
 800ca0c:	4413      	add	r3, r2
 800ca0e:	881b      	ldrh	r3, [r3, #0]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d103      	bne.n	800ca1c <put_lfn+0xbc>
 800ca14:	79fb      	ldrb	r3, [r7, #7]
 800ca16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca1a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	79fa      	ldrb	r2, [r7, #7]
 800ca20:	701a      	strb	r2, [r3, #0]
}
 800ca22:	bf00      	nop
 800ca24:	3720      	adds	r7, #32
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}
 800ca2a:	bf00      	nop
 800ca2c:	08046bf0 	.word	0x08046bf0

0800ca30 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b08c      	sub	sp, #48	; 0x30
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	60f8      	str	r0, [r7, #12]
 800ca38:	60b9      	str	r1, [r7, #8]
 800ca3a:	607a      	str	r2, [r7, #4]
 800ca3c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ca3e:	220b      	movs	r2, #11
 800ca40:	68b9      	ldr	r1, [r7, #8]
 800ca42:	68f8      	ldr	r0, [r7, #12]
 800ca44:	f7fe ff76 	bl	800b934 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	2b05      	cmp	r3, #5
 800ca4c:	d92b      	bls.n	800caa6 <gen_numname+0x76>
		sr = seq;
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ca52:	e022      	b.n	800ca9a <gen_numname+0x6a>
			wc = *lfn++;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	1c9a      	adds	r2, r3, #2
 800ca58:	607a      	str	r2, [r7, #4]
 800ca5a:	881b      	ldrh	r3, [r3, #0]
 800ca5c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800ca5e:	2300      	movs	r3, #0
 800ca60:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca62:	e017      	b.n	800ca94 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800ca64:	69fb      	ldr	r3, [r7, #28]
 800ca66:	005a      	lsls	r2, r3, #1
 800ca68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ca6a:	f003 0301 	and.w	r3, r3, #1
 800ca6e:	4413      	add	r3, r2
 800ca70:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ca72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ca74:	085b      	lsrs	r3, r3, #1
 800ca76:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ca78:	69fb      	ldr	r3, [r7, #28]
 800ca7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d005      	beq.n	800ca8e <gen_numname+0x5e>
 800ca82:	69fb      	ldr	r3, [r7, #28]
 800ca84:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800ca88:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800ca8c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ca8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca90:	3301      	adds	r3, #1
 800ca92:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca96:	2b0f      	cmp	r3, #15
 800ca98:	d9e4      	bls.n	800ca64 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	881b      	ldrh	r3, [r3, #0]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d1d8      	bne.n	800ca54 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800caa2:	69fb      	ldr	r3, [r7, #28]
 800caa4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800caa6:	2307      	movs	r3, #7
 800caa8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	b2db      	uxtb	r3, r3
 800caae:	f003 030f 	and.w	r3, r3, #15
 800cab2:	b2db      	uxtb	r3, r3
 800cab4:	3330      	adds	r3, #48	; 0x30
 800cab6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800caba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cabe:	2b39      	cmp	r3, #57	; 0x39
 800cac0:	d904      	bls.n	800cacc <gen_numname+0x9c>
 800cac2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cac6:	3307      	adds	r3, #7
 800cac8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800cacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cace:	1e5a      	subs	r2, r3, #1
 800cad0:	62ba      	str	r2, [r7, #40]	; 0x28
 800cad2:	3330      	adds	r3, #48	; 0x30
 800cad4:	443b      	add	r3, r7
 800cad6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cada:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	091b      	lsrs	r3, r3, #4
 800cae2:	603b      	str	r3, [r7, #0]
	} while (seq);
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d1df      	bne.n	800caaa <gen_numname+0x7a>
	ns[i] = '~';
 800caea:	f107 0214 	add.w	r2, r7, #20
 800caee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf0:	4413      	add	r3, r2
 800caf2:	227e      	movs	r2, #126	; 0x7e
 800caf4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800caf6:	2300      	movs	r3, #0
 800caf8:	627b      	str	r3, [r7, #36]	; 0x24
 800cafa:	e016      	b.n	800cb2a <gen_numname+0xfa>
		if (IsDBCS1(dst[j])) {
 800cafc:	68fa      	ldr	r2, [r7, #12]
 800cafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb00:	4413      	add	r3, r2
 800cb02:	781b      	ldrb	r3, [r3, #0]
 800cb04:	2b80      	cmp	r3, #128	; 0x80
 800cb06:	d90d      	bls.n	800cb24 <gen_numname+0xf4>
 800cb08:	68fa      	ldr	r2, [r7, #12]
 800cb0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb0c:	4413      	add	r3, r2
 800cb0e:	781b      	ldrb	r3, [r3, #0]
 800cb10:	2bff      	cmp	r3, #255	; 0xff
 800cb12:	d007      	beq.n	800cb24 <gen_numname+0xf4>
			if (j == i - 1) break;
 800cb14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb16:	3b01      	subs	r3, #1
 800cb18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	d010      	beq.n	800cb40 <gen_numname+0x110>
			j++;
 800cb1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb20:	3301      	adds	r3, #1
 800cb22:	627b      	str	r3, [r7, #36]	; 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800cb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb26:	3301      	adds	r3, #1
 800cb28:	627b      	str	r3, [r7, #36]	; 0x24
 800cb2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb2e:	429a      	cmp	r2, r3
 800cb30:	d207      	bcs.n	800cb42 <gen_numname+0x112>
 800cb32:	68fa      	ldr	r2, [r7, #12]
 800cb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb36:	4413      	add	r3, r2
 800cb38:	781b      	ldrb	r3, [r3, #0]
 800cb3a:	2b20      	cmp	r3, #32
 800cb3c:	d1de      	bne.n	800cafc <gen_numname+0xcc>
 800cb3e:	e000      	b.n	800cb42 <gen_numname+0x112>
			if (j == i - 1) break;
 800cb40:	bf00      	nop
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800cb42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb44:	2b07      	cmp	r3, #7
 800cb46:	d807      	bhi.n	800cb58 <gen_numname+0x128>
 800cb48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb4a:	1c5a      	adds	r2, r3, #1
 800cb4c:	62ba      	str	r2, [r7, #40]	; 0x28
 800cb4e:	3330      	adds	r3, #48	; 0x30
 800cb50:	443b      	add	r3, r7
 800cb52:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800cb56:	e000      	b.n	800cb5a <gen_numname+0x12a>
 800cb58:	2120      	movs	r1, #32
 800cb5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb5c:	1c5a      	adds	r2, r3, #1
 800cb5e:	627a      	str	r2, [r7, #36]	; 0x24
 800cb60:	68fa      	ldr	r2, [r7, #12]
 800cb62:	4413      	add	r3, r2
 800cb64:	460a      	mov	r2, r1
 800cb66:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800cb68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb6a:	2b07      	cmp	r3, #7
 800cb6c:	d9e9      	bls.n	800cb42 <gen_numname+0x112>
}
 800cb6e:	bf00      	nop
 800cb70:	bf00      	nop
 800cb72:	3730      	adds	r7, #48	; 0x30
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}

0800cb78 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b085      	sub	sp, #20
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800cb80:	2300      	movs	r3, #0
 800cb82:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800cb84:	230b      	movs	r3, #11
 800cb86:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800cb88:	7bfb      	ldrb	r3, [r7, #15]
 800cb8a:	b2da      	uxtb	r2, r3
 800cb8c:	0852      	lsrs	r2, r2, #1
 800cb8e:	01db      	lsls	r3, r3, #7
 800cb90:	4313      	orrs	r3, r2
 800cb92:	b2da      	uxtb	r2, r3
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	1c59      	adds	r1, r3, #1
 800cb98:	6079      	str	r1, [r7, #4]
 800cb9a:	781b      	ldrb	r3, [r3, #0]
 800cb9c:	4413      	add	r3, r2
 800cb9e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	3b01      	subs	r3, #1
 800cba4:	60bb      	str	r3, [r7, #8]
 800cba6:	68bb      	ldr	r3, [r7, #8]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d1ed      	bne.n	800cb88 <sum_sfn+0x10>
	return sum;
 800cbac:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3714      	adds	r7, #20
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb8:	4770      	bx	lr

0800cbba <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800cbba:	b580      	push	{r7, lr}
 800cbbc:	b086      	sub	sp, #24
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cbc8:	2100      	movs	r1, #0
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f7ff fc92 	bl	800c4f4 <dir_sdi>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800cbd4:	7dfb      	ldrb	r3, [r7, #23]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d001      	beq.n	800cbde <dir_find+0x24>
 800cbda:	7dfb      	ldrb	r3, [r7, #23]
 800cbdc:	e0a9      	b.n	800cd32 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cbde:	23ff      	movs	r3, #255	; 0xff
 800cbe0:	753b      	strb	r3, [r7, #20]
 800cbe2:	7d3b      	ldrb	r3, [r7, #20]
 800cbe4:	757b      	strb	r3, [r7, #21]
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f04f 32ff 	mov.w	r2, #4294967295
 800cbec:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	69db      	ldr	r3, [r3, #28]
 800cbf2:	4619      	mov	r1, r3
 800cbf4:	6938      	ldr	r0, [r7, #16]
 800cbf6:	f7ff f8fd 	bl	800bdf4 <move_window>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cbfe:	7dfb      	ldrb	r3, [r7, #23]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	f040 8090 	bne.w	800cd26 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6a1b      	ldr	r3, [r3, #32]
 800cc0a:	781b      	ldrb	r3, [r3, #0]
 800cc0c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cc0e:	7dbb      	ldrb	r3, [r7, #22]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d102      	bne.n	800cc1a <dir_find+0x60>
 800cc14:	2304      	movs	r3, #4
 800cc16:	75fb      	strb	r3, [r7, #23]
 800cc18:	e08a      	b.n	800cd30 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6a1b      	ldr	r3, [r3, #32]
 800cc1e:	330b      	adds	r3, #11
 800cc20:	781b      	ldrb	r3, [r3, #0]
 800cc22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc26:	73fb      	strb	r3, [r7, #15]
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	7bfa      	ldrb	r2, [r7, #15]
 800cc2c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800cc2e:	7dbb      	ldrb	r3, [r7, #22]
 800cc30:	2be5      	cmp	r3, #229	; 0xe5
 800cc32:	d007      	beq.n	800cc44 <dir_find+0x8a>
 800cc34:	7bfb      	ldrb	r3, [r7, #15]
 800cc36:	f003 0308 	and.w	r3, r3, #8
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d009      	beq.n	800cc52 <dir_find+0x98>
 800cc3e:	7bfb      	ldrb	r3, [r7, #15]
 800cc40:	2b0f      	cmp	r3, #15
 800cc42:	d006      	beq.n	800cc52 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cc44:	23ff      	movs	r3, #255	; 0xff
 800cc46:	757b      	strb	r3, [r7, #21]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f04f 32ff 	mov.w	r2, #4294967295
 800cc4e:	631a      	str	r2, [r3, #48]	; 0x30
 800cc50:	e05e      	b.n	800cd10 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800cc52:	7bfb      	ldrb	r3, [r7, #15]
 800cc54:	2b0f      	cmp	r3, #15
 800cc56:	d136      	bne.n	800ccc6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cc5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d154      	bne.n	800cd10 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800cc66:	7dbb      	ldrb	r3, [r7, #22]
 800cc68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d00d      	beq.n	800cc8c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6a1b      	ldr	r3, [r3, #32]
 800cc74:	7b5b      	ldrb	r3, [r3, #13]
 800cc76:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800cc78:	7dbb      	ldrb	r3, [r7, #22]
 800cc7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc7e:	75bb      	strb	r3, [r7, #22]
 800cc80:	7dbb      	ldrb	r3, [r7, #22]
 800cc82:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	695a      	ldr	r2, [r3, #20]
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cc8c:	7dba      	ldrb	r2, [r7, #22]
 800cc8e:	7d7b      	ldrb	r3, [r7, #21]
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d115      	bne.n	800ccc0 <dir_find+0x106>
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6a1b      	ldr	r3, [r3, #32]
 800cc98:	330d      	adds	r3, #13
 800cc9a:	781b      	ldrb	r3, [r3, #0]
 800cc9c:	7d3a      	ldrb	r2, [r7, #20]
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d10e      	bne.n	800ccc0 <dir_find+0x106>
 800cca2:	693b      	ldr	r3, [r7, #16]
 800cca4:	68da      	ldr	r2, [r3, #12]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6a1b      	ldr	r3, [r3, #32]
 800ccaa:	4619      	mov	r1, r3
 800ccac:	4610      	mov	r0, r2
 800ccae:	f7ff fde7 	bl	800c880 <cmp_lfn>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d003      	beq.n	800ccc0 <dir_find+0x106>
 800ccb8:	7d7b      	ldrb	r3, [r7, #21]
 800ccba:	3b01      	subs	r3, #1
 800ccbc:	b2db      	uxtb	r3, r3
 800ccbe:	e000      	b.n	800ccc2 <dir_find+0x108>
 800ccc0:	23ff      	movs	r3, #255	; 0xff
 800ccc2:	757b      	strb	r3, [r7, #21]
 800ccc4:	e024      	b.n	800cd10 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ccc6:	7d7b      	ldrb	r3, [r7, #21]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d109      	bne.n	800cce0 <dir_find+0x126>
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6a1b      	ldr	r3, [r3, #32]
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f7ff ff51 	bl	800cb78 <sum_sfn>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	461a      	mov	r2, r3
 800ccda:	7d3b      	ldrb	r3, [r7, #20]
 800ccdc:	4293      	cmp	r3, r2
 800ccde:	d024      	beq.n	800cd2a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cce6:	f003 0301 	and.w	r3, r3, #1
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d10a      	bne.n	800cd04 <dir_find+0x14a>
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6a18      	ldr	r0, [r3, #32]
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	3324      	adds	r3, #36	; 0x24
 800ccf6:	220b      	movs	r2, #11
 800ccf8:	4619      	mov	r1, r3
 800ccfa:	f7fe fe57 	bl	800b9ac <mem_cmp>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d014      	beq.n	800cd2e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cd04:	23ff      	movs	r3, #255	; 0xff
 800cd06:	757b      	strb	r3, [r7, #21]
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f04f 32ff 	mov.w	r2, #4294967295
 800cd0e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cd10:	2100      	movs	r1, #0
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f7ff fc69 	bl	800c5ea <dir_next>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cd1c:	7dfb      	ldrb	r3, [r7, #23]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	f43f af65 	beq.w	800cbee <dir_find+0x34>
 800cd24:	e004      	b.n	800cd30 <dir_find+0x176>
		if (res != FR_OK) break;
 800cd26:	bf00      	nop
 800cd28:	e002      	b.n	800cd30 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cd2a:	bf00      	nop
 800cd2c:	e000      	b.n	800cd30 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cd2e:	bf00      	nop

	return res;
 800cd30:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3718      	adds	r7, #24
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}
	...

0800cd3c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b08c      	sub	sp, #48	; 0x30
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cd50:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d001      	beq.n	800cd5c <dir_register+0x20>
 800cd58:	2306      	movs	r3, #6
 800cd5a:	e0e0      	b.n	800cf1e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	627b      	str	r3, [r7, #36]	; 0x24
 800cd60:	e002      	b.n	800cd68 <dir_register+0x2c>
 800cd62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd64:	3301      	adds	r3, #1
 800cd66:	627b      	str	r3, [r7, #36]	; 0x24
 800cd68:	69fb      	ldr	r3, [r7, #28]
 800cd6a:	68da      	ldr	r2, [r3, #12]
 800cd6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd6e:	005b      	lsls	r3, r3, #1
 800cd70:	4413      	add	r3, r2
 800cd72:	881b      	ldrh	r3, [r3, #0]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d1f4      	bne.n	800cd62 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800cd7e:	f107 030c 	add.w	r3, r7, #12
 800cd82:	220c      	movs	r2, #12
 800cd84:	4618      	mov	r0, r3
 800cd86:	f7fe fdd5 	bl	800b934 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800cd8a:	7dfb      	ldrb	r3, [r7, #23]
 800cd8c:	f003 0301 	and.w	r3, r3, #1
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d032      	beq.n	800cdfa <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2240      	movs	r2, #64	; 0x40
 800cd98:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	62bb      	str	r3, [r7, #40]	; 0x28
 800cda0:	e016      	b.n	800cdd0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800cda8:	69fb      	ldr	r3, [r7, #28]
 800cdaa:	68da      	ldr	r2, [r3, #12]
 800cdac:	f107 010c 	add.w	r1, r7, #12
 800cdb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb2:	f7ff fe3d 	bl	800ca30 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f7ff feff 	bl	800cbba <dir_find>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800cdc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d106      	bne.n	800cdd8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800cdca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdcc:	3301      	adds	r3, #1
 800cdce:	62bb      	str	r3, [r7, #40]	; 0x28
 800cdd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdd2:	2b63      	cmp	r3, #99	; 0x63
 800cdd4:	d9e5      	bls.n	800cda2 <dir_register+0x66>
 800cdd6:	e000      	b.n	800cdda <dir_register+0x9e>
			if (res != FR_OK) break;
 800cdd8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800cdda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cddc:	2b64      	cmp	r3, #100	; 0x64
 800cdde:	d101      	bne.n	800cde4 <dir_register+0xa8>
 800cde0:	2307      	movs	r3, #7
 800cde2:	e09c      	b.n	800cf1e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800cde4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cde8:	2b04      	cmp	r3, #4
 800cdea:	d002      	beq.n	800cdf2 <dir_register+0xb6>
 800cdec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cdf0:	e095      	b.n	800cf1e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800cdf2:	7dfa      	ldrb	r2, [r7, #23]
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800cdfa:	7dfb      	ldrb	r3, [r7, #23]
 800cdfc:	f003 0302 	and.w	r3, r3, #2
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d007      	beq.n	800ce14 <dir_register+0xd8>
 800ce04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce06:	330c      	adds	r3, #12
 800ce08:	4a47      	ldr	r2, [pc, #284]	; (800cf28 <dir_register+0x1ec>)
 800ce0a:	fba2 2303 	umull	r2, r3, r2, r3
 800ce0e:	089b      	lsrs	r3, r3, #2
 800ce10:	3301      	adds	r3, #1
 800ce12:	e000      	b.n	800ce16 <dir_register+0xda>
 800ce14:	2301      	movs	r3, #1
 800ce16:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800ce18:	6a39      	ldr	r1, [r7, #32]
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	f7ff fcaa 	bl	800c774 <dir_alloc>
 800ce20:	4603      	mov	r3, r0
 800ce22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800ce26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d148      	bne.n	800cec0 <dir_register+0x184>
 800ce2e:	6a3b      	ldr	r3, [r7, #32]
 800ce30:	3b01      	subs	r3, #1
 800ce32:	623b      	str	r3, [r7, #32]
 800ce34:	6a3b      	ldr	r3, [r7, #32]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d042      	beq.n	800cec0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	695a      	ldr	r2, [r3, #20]
 800ce3e:	6a3b      	ldr	r3, [r7, #32]
 800ce40:	015b      	lsls	r3, r3, #5
 800ce42:	1ad3      	subs	r3, r2, r3
 800ce44:	4619      	mov	r1, r3
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f7ff fb54 	bl	800c4f4 <dir_sdi>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ce52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d132      	bne.n	800cec0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	3324      	adds	r3, #36	; 0x24
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f7ff fe8a 	bl	800cb78 <sum_sfn>
 800ce64:	4603      	mov	r3, r0
 800ce66:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	69db      	ldr	r3, [r3, #28]
 800ce6c:	4619      	mov	r1, r3
 800ce6e:	69f8      	ldr	r0, [r7, #28]
 800ce70:	f7fe ffc0 	bl	800bdf4 <move_window>
 800ce74:	4603      	mov	r3, r0
 800ce76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800ce7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d11d      	bne.n	800cebe <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800ce82:	69fb      	ldr	r3, [r7, #28]
 800ce84:	68d8      	ldr	r0, [r3, #12]
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6a19      	ldr	r1, [r3, #32]
 800ce8a:	6a3b      	ldr	r3, [r7, #32]
 800ce8c:	b2da      	uxtb	r2, r3
 800ce8e:	7efb      	ldrb	r3, [r7, #27]
 800ce90:	f7ff fd66 	bl	800c960 <put_lfn>
				fs->wflag = 1;
 800ce94:	69fb      	ldr	r3, [r7, #28]
 800ce96:	2201      	movs	r2, #1
 800ce98:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800ce9a:	2100      	movs	r1, #0
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f7ff fba4 	bl	800c5ea <dir_next>
 800cea2:	4603      	mov	r3, r0
 800cea4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800cea8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d107      	bne.n	800cec0 <dir_register+0x184>
 800ceb0:	6a3b      	ldr	r3, [r7, #32]
 800ceb2:	3b01      	subs	r3, #1
 800ceb4:	623b      	str	r3, [r7, #32]
 800ceb6:	6a3b      	ldr	r3, [r7, #32]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d1d5      	bne.n	800ce68 <dir_register+0x12c>
 800cebc:	e000      	b.n	800cec0 <dir_register+0x184>
				if (res != FR_OK) break;
 800cebe:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800cec0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d128      	bne.n	800cf1a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	69db      	ldr	r3, [r3, #28]
 800cecc:	4619      	mov	r1, r3
 800cece:	69f8      	ldr	r0, [r7, #28]
 800ced0:	f7fe ff90 	bl	800bdf4 <move_window>
 800ced4:	4603      	mov	r3, r0
 800ced6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ceda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d11b      	bne.n	800cf1a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6a1b      	ldr	r3, [r3, #32]
 800cee6:	2220      	movs	r2, #32
 800cee8:	2100      	movs	r1, #0
 800ceea:	4618      	mov	r0, r3
 800ceec:	f7fe fd43 	bl	800b976 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6a18      	ldr	r0, [r3, #32]
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	3324      	adds	r3, #36	; 0x24
 800cef8:	220b      	movs	r2, #11
 800cefa:	4619      	mov	r1, r3
 800cefc:	f7fe fd1a 	bl	800b934 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6a1b      	ldr	r3, [r3, #32]
 800cf0a:	330c      	adds	r3, #12
 800cf0c:	f002 0218 	and.w	r2, r2, #24
 800cf10:	b2d2      	uxtb	r2, r2
 800cf12:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800cf14:	69fb      	ldr	r3, [r7, #28]
 800cf16:	2201      	movs	r2, #1
 800cf18:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800cf1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3730      	adds	r7, #48	; 0x30
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}
 800cf26:	bf00      	nop
 800cf28:	4ec4ec4f 	.word	0x4ec4ec4f

0800cf2c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b08a      	sub	sp, #40	; 0x28
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
 800cf34:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	613b      	str	r3, [r7, #16]
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	68db      	ldr	r3, [r3, #12]
 800cf42:	60fb      	str	r3, [r7, #12]
 800cf44:	2300      	movs	r3, #0
 800cf46:	617b      	str	r3, [r7, #20]
 800cf48:	697b      	ldr	r3, [r7, #20]
 800cf4a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800cf4c:	69bb      	ldr	r3, [r7, #24]
 800cf4e:	1c5a      	adds	r2, r3, #1
 800cf50:	61ba      	str	r2, [r7, #24]
 800cf52:	693a      	ldr	r2, [r7, #16]
 800cf54:	4413      	add	r3, r2
 800cf56:	781b      	ldrb	r3, [r3, #0]
 800cf58:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800cf5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf5c:	2b1f      	cmp	r3, #31
 800cf5e:	d96a      	bls.n	800d036 <create_name+0x10a>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800cf60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf62:	2b2f      	cmp	r3, #47	; 0x2f
 800cf64:	d006      	beq.n	800cf74 <create_name+0x48>
 800cf66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf68:	2b5c      	cmp	r3, #92	; 0x5c
 800cf6a:	d110      	bne.n	800cf8e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800cf6c:	e002      	b.n	800cf74 <create_name+0x48>
 800cf6e:	69bb      	ldr	r3, [r7, #24]
 800cf70:	3301      	adds	r3, #1
 800cf72:	61bb      	str	r3, [r7, #24]
 800cf74:	693a      	ldr	r2, [r7, #16]
 800cf76:	69bb      	ldr	r3, [r7, #24]
 800cf78:	4413      	add	r3, r2
 800cf7a:	781b      	ldrb	r3, [r3, #0]
 800cf7c:	2b2f      	cmp	r3, #47	; 0x2f
 800cf7e:	d0f6      	beq.n	800cf6e <create_name+0x42>
 800cf80:	693a      	ldr	r2, [r7, #16]
 800cf82:	69bb      	ldr	r3, [r7, #24]
 800cf84:	4413      	add	r3, r2
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	2b5c      	cmp	r3, #92	; 0x5c
 800cf8a:	d0f0      	beq.n	800cf6e <create_name+0x42>
			break;
 800cf8c:	e054      	b.n	800d038 <create_name+0x10c>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	2bfe      	cmp	r3, #254	; 0xfe
 800cf92:	d901      	bls.n	800cf98 <create_name+0x6c>
 800cf94:	2306      	movs	r3, #6
 800cf96:	e1bf      	b.n	800d318 <create_name+0x3ec>
#if !_LFN_UNICODE
		w &= 0xFF;
 800cf98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf9a:	b2db      	uxtb	r3, r3
 800cf9c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 800cf9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cfa0:	b2db      	uxtb	r3, r3
 800cfa2:	2b80      	cmp	r3, #128	; 0x80
 800cfa4:	d925      	bls.n	800cff2 <create_name+0xc6>
 800cfa6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cfa8:	b2db      	uxtb	r3, r3
 800cfaa:	2bff      	cmp	r3, #255	; 0xff
 800cfac:	d021      	beq.n	800cff2 <create_name+0xc6>
			b = (BYTE)p[si++];			/* Get 2nd byte */
 800cfae:	69bb      	ldr	r3, [r7, #24]
 800cfb0:	1c5a      	adds	r2, r3, #1
 800cfb2:	61ba      	str	r2, [r7, #24]
 800cfb4:	693a      	ldr	r2, [r7, #16]
 800cfb6:	4413      	add	r3, r2
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			w = (w << 8) + b;			/* Create a DBC */
 800cfbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cfc0:	021b      	lsls	r3, r3, #8
 800cfc2:	b29a      	uxth	r2, r3
 800cfc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfc8:	b29b      	uxth	r3, r3
 800cfca:	4413      	add	r3, r2
 800cfcc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
 800cfce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfd2:	2b3f      	cmp	r3, #63	; 0x3f
 800cfd4:	d903      	bls.n	800cfde <create_name+0xb2>
 800cfd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfda:	2b7e      	cmp	r3, #126	; 0x7e
 800cfdc:	d909      	bls.n	800cff2 <create_name+0xc6>
 800cfde:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	da03      	bge.n	800cfee <create_name+0xc2>
 800cfe6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfea:	2bff      	cmp	r3, #255	; 0xff
 800cfec:	d101      	bne.n	800cff2 <create_name+0xc6>
 800cfee:	2306      	movs	r3, #6
 800cff0:	e192      	b.n	800d318 <create_name+0x3ec>
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800cff2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cff4:	2101      	movs	r1, #1
 800cff6:	4618      	mov	r0, r3
 800cff8:	f001 ff0c 	bl	800ee14 <ff_convert>
 800cffc:	4603      	mov	r3, r0
 800cffe:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d000:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d002:	2b00      	cmp	r3, #0
 800d004:	d101      	bne.n	800d00a <create_name+0xde>
 800d006:	2306      	movs	r3, #6
 800d008:	e186      	b.n	800d318 <create_name+0x3ec>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d00a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d00c:	2b7f      	cmp	r3, #127	; 0x7f
 800d00e:	d809      	bhi.n	800d024 <create_name+0xf8>
 800d010:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d012:	4619      	mov	r1, r3
 800d014:	489a      	ldr	r0, [pc, #616]	; (800d280 <create_name+0x354>)
 800d016:	f7fe fcf0 	bl	800b9fa <chk_chr>
 800d01a:	4603      	mov	r3, r0
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d001      	beq.n	800d024 <create_name+0xf8>
 800d020:	2306      	movs	r3, #6
 800d022:	e179      	b.n	800d318 <create_name+0x3ec>
		lfn[di++] = w;					/* Store the Unicode character */
 800d024:	697b      	ldr	r3, [r7, #20]
 800d026:	1c5a      	adds	r2, r3, #1
 800d028:	617a      	str	r2, [r7, #20]
 800d02a:	005b      	lsls	r3, r3, #1
 800d02c:	68fa      	ldr	r2, [r7, #12]
 800d02e:	4413      	add	r3, r2
 800d030:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d032:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d034:	e78a      	b.n	800cf4c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d036:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d038:	693a      	ldr	r2, [r7, #16]
 800d03a:	69bb      	ldr	r3, [r7, #24]
 800d03c:	441a      	add	r2, r3
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d042:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d044:	2b1f      	cmp	r3, #31
 800d046:	d801      	bhi.n	800d04c <create_name+0x120>
 800d048:	2304      	movs	r3, #4
 800d04a:	e000      	b.n	800d04e <create_name+0x122>
 800d04c:	2300      	movs	r3, #0
 800d04e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d052:	e011      	b.n	800d078 <create_name+0x14c>
		w = lfn[di - 1];
 800d054:	697b      	ldr	r3, [r7, #20]
 800d056:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d05a:	3b01      	subs	r3, #1
 800d05c:	005b      	lsls	r3, r3, #1
 800d05e:	68fa      	ldr	r2, [r7, #12]
 800d060:	4413      	add	r3, r2
 800d062:	881b      	ldrh	r3, [r3, #0]
 800d064:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800d066:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d068:	2b20      	cmp	r3, #32
 800d06a:	d002      	beq.n	800d072 <create_name+0x146>
 800d06c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d06e:	2b2e      	cmp	r3, #46	; 0x2e
 800d070:	d106      	bne.n	800d080 <create_name+0x154>
		di--;
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	3b01      	subs	r3, #1
 800d076:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d1ea      	bne.n	800d054 <create_name+0x128>
 800d07e:	e000      	b.n	800d082 <create_name+0x156>
		if (w != ' ' && w != '.') break;
 800d080:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	005b      	lsls	r3, r3, #1
 800d086:	68fa      	ldr	r2, [r7, #12]
 800d088:	4413      	add	r3, r2
 800d08a:	2200      	movs	r2, #0
 800d08c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d101      	bne.n	800d098 <create_name+0x16c>
 800d094:	2306      	movs	r3, #6
 800d096:	e13f      	b.n	800d318 <create_name+0x3ec>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	3324      	adds	r3, #36	; 0x24
 800d09c:	220b      	movs	r2, #11
 800d09e:	2120      	movs	r1, #32
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f7fe fc68 	bl	800b976 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	61bb      	str	r3, [r7, #24]
 800d0aa:	e002      	b.n	800d0b2 <create_name+0x186>
 800d0ac:	69bb      	ldr	r3, [r7, #24]
 800d0ae:	3301      	adds	r3, #1
 800d0b0:	61bb      	str	r3, [r7, #24]
 800d0b2:	69bb      	ldr	r3, [r7, #24]
 800d0b4:	005b      	lsls	r3, r3, #1
 800d0b6:	68fa      	ldr	r2, [r7, #12]
 800d0b8:	4413      	add	r3, r2
 800d0ba:	881b      	ldrh	r3, [r3, #0]
 800d0bc:	2b20      	cmp	r3, #32
 800d0be:	d0f5      	beq.n	800d0ac <create_name+0x180>
 800d0c0:	69bb      	ldr	r3, [r7, #24]
 800d0c2:	005b      	lsls	r3, r3, #1
 800d0c4:	68fa      	ldr	r2, [r7, #12]
 800d0c6:	4413      	add	r3, r2
 800d0c8:	881b      	ldrh	r3, [r3, #0]
 800d0ca:	2b2e      	cmp	r3, #46	; 0x2e
 800d0cc:	d0ee      	beq.n	800d0ac <create_name+0x180>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d0ce:	69bb      	ldr	r3, [r7, #24]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d009      	beq.n	800d0e8 <create_name+0x1bc>
 800d0d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d0d8:	f043 0303 	orr.w	r3, r3, #3
 800d0dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d0e0:	e002      	b.n	800d0e8 <create_name+0x1bc>
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	3b01      	subs	r3, #1
 800d0e6:	617b      	str	r3, [r7, #20]
 800d0e8:	697b      	ldr	r3, [r7, #20]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d009      	beq.n	800d102 <create_name+0x1d6>
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d0f4:	3b01      	subs	r3, #1
 800d0f6:	005b      	lsls	r3, r3, #1
 800d0f8:	68fa      	ldr	r2, [r7, #12]
 800d0fa:	4413      	add	r3, r2
 800d0fc:	881b      	ldrh	r3, [r3, #0]
 800d0fe:	2b2e      	cmp	r3, #46	; 0x2e
 800d100:	d1ef      	bne.n	800d0e2 <create_name+0x1b6>

	i = b = 0; ni = 8;
 800d102:	2300      	movs	r3, #0
 800d104:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d108:	2300      	movs	r3, #0
 800d10a:	623b      	str	r3, [r7, #32]
 800d10c:	2308      	movs	r3, #8
 800d10e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d110:	69bb      	ldr	r3, [r7, #24]
 800d112:	1c5a      	adds	r2, r3, #1
 800d114:	61ba      	str	r2, [r7, #24]
 800d116:	005b      	lsls	r3, r3, #1
 800d118:	68fa      	ldr	r2, [r7, #12]
 800d11a:	4413      	add	r3, r2
 800d11c:	881b      	ldrh	r3, [r3, #0]
 800d11e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d120:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d122:	2b00      	cmp	r3, #0
 800d124:	f000 80aa 	beq.w	800d27c <create_name+0x350>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d128:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d12a:	2b20      	cmp	r3, #32
 800d12c:	d006      	beq.n	800d13c <create_name+0x210>
 800d12e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d130:	2b2e      	cmp	r3, #46	; 0x2e
 800d132:	d10a      	bne.n	800d14a <create_name+0x21e>
 800d134:	69ba      	ldr	r2, [r7, #24]
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	429a      	cmp	r2, r3
 800d13a:	d006      	beq.n	800d14a <create_name+0x21e>
			cf |= NS_LOSS | NS_LFN; continue;
 800d13c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d140:	f043 0303 	orr.w	r3, r3, #3
 800d144:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d148:	e097      	b.n	800d27a <create_name+0x34e>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d14a:	6a3a      	ldr	r2, [r7, #32]
 800d14c:	69fb      	ldr	r3, [r7, #28]
 800d14e:	429a      	cmp	r2, r3
 800d150:	d203      	bcs.n	800d15a <create_name+0x22e>
 800d152:	69ba      	ldr	r2, [r7, #24]
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	429a      	cmp	r2, r3
 800d158:	d123      	bne.n	800d1a2 <create_name+0x276>
			if (ni == 11) {				/* Long extension */
 800d15a:	69fb      	ldr	r3, [r7, #28]
 800d15c:	2b0b      	cmp	r3, #11
 800d15e:	d106      	bne.n	800d16e <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
 800d160:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d164:	f043 0303 	orr.w	r3, r3, #3
 800d168:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d16c:	e08d      	b.n	800d28a <create_name+0x35e>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d16e:	69ba      	ldr	r2, [r7, #24]
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	429a      	cmp	r2, r3
 800d174:	d005      	beq.n	800d182 <create_name+0x256>
 800d176:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d17a:	f043 0303 	orr.w	r3, r3, #3
 800d17e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 800d182:	69ba      	ldr	r2, [r7, #24]
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	429a      	cmp	r2, r3
 800d188:	d87e      	bhi.n	800d288 <create_name+0x35c>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	61bb      	str	r3, [r7, #24]
 800d18e:	2308      	movs	r3, #8
 800d190:	623b      	str	r3, [r7, #32]
 800d192:	230b      	movs	r3, #11
 800d194:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d196:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d19a:	009b      	lsls	r3, r3, #2
 800d19c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d1a0:	e06b      	b.n	800d27a <create_name+0x34e>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d1a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1a4:	2b7f      	cmp	r3, #127	; 0x7f
 800d1a6:	d910      	bls.n	800d1ca <create_name+0x29e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
 800d1a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f001 fe90 	bl	800eed0 <ff_wtoupper>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	2100      	movs	r1, #0
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f001 fe2d 	bl	800ee14 <ff_convert>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	84bb      	strh	r3, [r7, #36]	; 0x24
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d1be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d1c2:	f043 0302 	orr.w	r3, r3, #2
 800d1c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}

		if (_DF1S && w >= 0x100) {		/* Is this DBC? (always false at SBCS cfg) */
 800d1ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1cc:	2bff      	cmp	r3, #255	; 0xff
 800d1ce:	d91a      	bls.n	800d206 <create_name+0x2da>
			if (i >= ni - 1) {
 800d1d0:	69fb      	ldr	r3, [r7, #28]
 800d1d2:	3b01      	subs	r3, #1
 800d1d4:	6a3a      	ldr	r2, [r7, #32]
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	d308      	bcc.n	800d1ec <create_name+0x2c0>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 800d1da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d1de:	f043 0303 	orr.w	r3, r3, #3
 800d1e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d1e6:	69fb      	ldr	r3, [r7, #28]
 800d1e8:	623b      	str	r3, [r7, #32]
 800d1ea:	e046      	b.n	800d27a <create_name+0x34e>
			}
			dp->fn[i++] = (BYTE)(w >> 8);
 800d1ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1ee:	0a1b      	lsrs	r3, r3, #8
 800d1f0:	b299      	uxth	r1, r3
 800d1f2:	6a3b      	ldr	r3, [r7, #32]
 800d1f4:	1c5a      	adds	r2, r3, #1
 800d1f6:	623a      	str	r2, [r7, #32]
 800d1f8:	b2c9      	uxtb	r1, r1
 800d1fa:	687a      	ldr	r2, [r7, #4]
 800d1fc:	4413      	add	r3, r2
 800d1fe:	460a      	mov	r2, r1
 800d200:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800d204:	e02f      	b.n	800d266 <create_name+0x33a>
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d206:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d007      	beq.n	800d21c <create_name+0x2f0>
 800d20c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d20e:	4619      	mov	r1, r3
 800d210:	481c      	ldr	r0, [pc, #112]	; (800d284 <create_name+0x358>)
 800d212:	f7fe fbf2 	bl	800b9fa <chk_chr>
 800d216:	4603      	mov	r3, r0
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d008      	beq.n	800d22e <create_name+0x302>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d21c:	235f      	movs	r3, #95	; 0x5f
 800d21e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d220:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d224:	f043 0303 	orr.w	r3, r3, #3
 800d228:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d22c:	e01b      	b.n	800d266 <create_name+0x33a>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d22e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d230:	2b40      	cmp	r3, #64	; 0x40
 800d232:	d909      	bls.n	800d248 <create_name+0x31c>
 800d234:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d236:	2b5a      	cmp	r3, #90	; 0x5a
 800d238:	d806      	bhi.n	800d248 <create_name+0x31c>
					b |= 2;
 800d23a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d23e:	f043 0302 	orr.w	r3, r3, #2
 800d242:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d246:	e00e      	b.n	800d266 <create_name+0x33a>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d248:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d24a:	2b60      	cmp	r3, #96	; 0x60
 800d24c:	d90b      	bls.n	800d266 <create_name+0x33a>
 800d24e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d250:	2b7a      	cmp	r3, #122	; 0x7a
 800d252:	d808      	bhi.n	800d266 <create_name+0x33a>
						b |= 1; w -= 0x20;
 800d254:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d258:	f043 0301 	orr.w	r3, r3, #1
 800d25c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d260:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d262:	3b20      	subs	r3, #32
 800d264:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d266:	6a3b      	ldr	r3, [r7, #32]
 800d268:	1c5a      	adds	r2, r3, #1
 800d26a:	623a      	str	r2, [r7, #32]
 800d26c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d26e:	b2d1      	uxtb	r1, r2
 800d270:	687a      	ldr	r2, [r7, #4]
 800d272:	4413      	add	r3, r2
 800d274:	460a      	mov	r2, r1
 800d276:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800d27a:	e749      	b.n	800d110 <create_name+0x1e4>
		if (!w) break;					/* Break on end of the LFN */
 800d27c:	bf00      	nop
 800d27e:	e004      	b.n	800d28a <create_name+0x35e>
 800d280:	08026364 	.word	0x08026364
 800d284:	08026370 	.word	0x08026370
			if (si > di) break;			/* No extension */
 800d288:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d290:	2be5      	cmp	r3, #229	; 0xe5
 800d292:	d103      	bne.n	800d29c <create_name+0x370>
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2205      	movs	r2, #5
 800d298:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800d29c:	69fb      	ldr	r3, [r7, #28]
 800d29e:	2b08      	cmp	r3, #8
 800d2a0:	d104      	bne.n	800d2ac <create_name+0x380>
 800d2a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2a6:	009b      	lsls	r3, r3, #2
 800d2a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d2ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2b0:	f003 030c 	and.w	r3, r3, #12
 800d2b4:	2b0c      	cmp	r3, #12
 800d2b6:	d005      	beq.n	800d2c4 <create_name+0x398>
 800d2b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2bc:	f003 0303 	and.w	r3, r3, #3
 800d2c0:	2b03      	cmp	r3, #3
 800d2c2:	d105      	bne.n	800d2d0 <create_name+0x3a4>
 800d2c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d2c8:	f043 0302 	orr.w	r3, r3, #2
 800d2cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d2d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d2d4:	f003 0302 	and.w	r3, r3, #2
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d117      	bne.n	800d30c <create_name+0x3e0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d2dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2e0:	f003 0303 	and.w	r3, r3, #3
 800d2e4:	2b01      	cmp	r3, #1
 800d2e6:	d105      	bne.n	800d2f4 <create_name+0x3c8>
 800d2e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d2ec:	f043 0310 	orr.w	r3, r3, #16
 800d2f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d2f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2f8:	f003 030c 	and.w	r3, r3, #12
 800d2fc:	2b04      	cmp	r3, #4
 800d2fe:	d105      	bne.n	800d30c <create_name+0x3e0>
 800d300:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d304:	f043 0308 	orr.w	r3, r3, #8
 800d308:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d312:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800d316:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d318:	4618      	mov	r0, r3
 800d31a:	3728      	adds	r7, #40	; 0x28
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}

0800d320 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b086      	sub	sp, #24
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
 800d328:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d334:	e002      	b.n	800d33c <follow_path+0x1c>
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	3301      	adds	r3, #1
 800d33a:	603b      	str	r3, [r7, #0]
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	2b2f      	cmp	r3, #47	; 0x2f
 800d342:	d0f8      	beq.n	800d336 <follow_path+0x16>
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	781b      	ldrb	r3, [r3, #0]
 800d348:	2b5c      	cmp	r3, #92	; 0x5c
 800d34a:	d0f4      	beq.n	800d336 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d34c:	693b      	ldr	r3, [r7, #16]
 800d34e:	2200      	movs	r2, #0
 800d350:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	781b      	ldrb	r3, [r3, #0]
 800d356:	2b1f      	cmp	r3, #31
 800d358:	d80a      	bhi.n	800d370 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	2280      	movs	r2, #128	; 0x80
 800d35e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d362:	2100      	movs	r1, #0
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	f7ff f8c5 	bl	800c4f4 <dir_sdi>
 800d36a:	4603      	mov	r3, r0
 800d36c:	75fb      	strb	r3, [r7, #23]
 800d36e:	e043      	b.n	800d3f8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d370:	463b      	mov	r3, r7
 800d372:	4619      	mov	r1, r3
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f7ff fdd9 	bl	800cf2c <create_name>
 800d37a:	4603      	mov	r3, r0
 800d37c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d37e:	7dfb      	ldrb	r3, [r7, #23]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d134      	bne.n	800d3ee <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f7ff fc18 	bl	800cbba <dir_find>
 800d38a:	4603      	mov	r3, r0
 800d38c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d394:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d396:	7dfb      	ldrb	r3, [r7, #23]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d00a      	beq.n	800d3b2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d39c:	7dfb      	ldrb	r3, [r7, #23]
 800d39e:	2b04      	cmp	r3, #4
 800d3a0:	d127      	bne.n	800d3f2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d3a2:	7afb      	ldrb	r3, [r7, #11]
 800d3a4:	f003 0304 	and.w	r3, r3, #4
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d122      	bne.n	800d3f2 <follow_path+0xd2>
 800d3ac:	2305      	movs	r3, #5
 800d3ae:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d3b0:	e01f      	b.n	800d3f2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d3b2:	7afb      	ldrb	r3, [r7, #11]
 800d3b4:	f003 0304 	and.w	r3, r3, #4
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d11c      	bne.n	800d3f6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d3bc:	693b      	ldr	r3, [r7, #16]
 800d3be:	799b      	ldrb	r3, [r3, #6]
 800d3c0:	f003 0310 	and.w	r3, r3, #16
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d102      	bne.n	800d3ce <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d3c8:	2305      	movs	r3, #5
 800d3ca:	75fb      	strb	r3, [r7, #23]
 800d3cc:	e014      	b.n	800d3f8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	695b      	ldr	r3, [r3, #20]
 800d3d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3dc:	4413      	add	r3, r2
 800d3de:	4619      	mov	r1, r3
 800d3e0:	68f8      	ldr	r0, [r7, #12]
 800d3e2:	f7ff fa0e 	bl	800c802 <ld_clust>
 800d3e6:	4602      	mov	r2, r0
 800d3e8:	693b      	ldr	r3, [r7, #16]
 800d3ea:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d3ec:	e7c0      	b.n	800d370 <follow_path+0x50>
			if (res != FR_OK) break;
 800d3ee:	bf00      	nop
 800d3f0:	e002      	b.n	800d3f8 <follow_path+0xd8>
				break;
 800d3f2:	bf00      	nop
 800d3f4:	e000      	b.n	800d3f8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d3f6:	bf00      	nop
			}
		}
	}

	return res;
 800d3f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	3718      	adds	r7, #24
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}

0800d402 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d402:	b480      	push	{r7}
 800d404:	b087      	sub	sp, #28
 800d406:	af00      	add	r7, sp, #0
 800d408:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d40a:	f04f 33ff 	mov.w	r3, #4294967295
 800d40e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d031      	beq.n	800d47c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	617b      	str	r3, [r7, #20]
 800d41e:	e002      	b.n	800d426 <get_ldnumber+0x24>
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	3301      	adds	r3, #1
 800d424:	617b      	str	r3, [r7, #20]
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	781b      	ldrb	r3, [r3, #0]
 800d42a:	2b1f      	cmp	r3, #31
 800d42c:	d903      	bls.n	800d436 <get_ldnumber+0x34>
 800d42e:	697b      	ldr	r3, [r7, #20]
 800d430:	781b      	ldrb	r3, [r3, #0]
 800d432:	2b3a      	cmp	r3, #58	; 0x3a
 800d434:	d1f4      	bne.n	800d420 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	781b      	ldrb	r3, [r3, #0]
 800d43a:	2b3a      	cmp	r3, #58	; 0x3a
 800d43c:	d11c      	bne.n	800d478 <get_ldnumber+0x76>
			tp = *path;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	1c5a      	adds	r2, r3, #1
 800d448:	60fa      	str	r2, [r7, #12]
 800d44a:	781b      	ldrb	r3, [r3, #0]
 800d44c:	3b30      	subs	r3, #48	; 0x30
 800d44e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	2b09      	cmp	r3, #9
 800d454:	d80e      	bhi.n	800d474 <get_ldnumber+0x72>
 800d456:	68fa      	ldr	r2, [r7, #12]
 800d458:	697b      	ldr	r3, [r7, #20]
 800d45a:	429a      	cmp	r2, r3
 800d45c:	d10a      	bne.n	800d474 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d107      	bne.n	800d474 <get_ldnumber+0x72>
					vol = (int)i;
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d468:	697b      	ldr	r3, [r7, #20]
 800d46a:	3301      	adds	r3, #1
 800d46c:	617b      	str	r3, [r7, #20]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	697a      	ldr	r2, [r7, #20]
 800d472:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d474:	693b      	ldr	r3, [r7, #16]
 800d476:	e002      	b.n	800d47e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d478:	2300      	movs	r3, #0
 800d47a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d47c:	693b      	ldr	r3, [r7, #16]
}
 800d47e:	4618      	mov	r0, r3
 800d480:	371c      	adds	r7, #28
 800d482:	46bd      	mov	sp, r7
 800d484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d488:	4770      	bx	lr
	...

0800d48c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b082      	sub	sp, #8
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
 800d494:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2200      	movs	r2, #0
 800d49a:	70da      	strb	r2, [r3, #3]
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f04f 32ff 	mov.w	r2, #4294967295
 800d4a2:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d4a4:	6839      	ldr	r1, [r7, #0]
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f7fe fca4 	bl	800bdf4 <move_window>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d001      	beq.n	800d4b6 <check_fs+0x2a>
 800d4b2:	2304      	movs	r3, #4
 800d4b4:	e038      	b.n	800d528 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	3338      	adds	r3, #56	; 0x38
 800d4ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f7fe f9b6 	bl	800b830 <ld_word>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	461a      	mov	r2, r3
 800d4c8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d4cc:	429a      	cmp	r2, r3
 800d4ce:	d001      	beq.n	800d4d4 <check_fs+0x48>
 800d4d0:	2303      	movs	r3, #3
 800d4d2:	e029      	b.n	800d528 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d4da:	2be9      	cmp	r3, #233	; 0xe9
 800d4dc:	d009      	beq.n	800d4f2 <check_fs+0x66>
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d4e4:	2beb      	cmp	r3, #235	; 0xeb
 800d4e6:	d11e      	bne.n	800d526 <check_fs+0x9a>
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d4ee:	2b90      	cmp	r3, #144	; 0x90
 800d4f0:	d119      	bne.n	800d526 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	3338      	adds	r3, #56	; 0x38
 800d4f6:	3336      	adds	r3, #54	; 0x36
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f7fe f9b1 	bl	800b860 <ld_dword>
 800d4fe:	4603      	mov	r3, r0
 800d500:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d504:	4a0a      	ldr	r2, [pc, #40]	; (800d530 <check_fs+0xa4>)
 800d506:	4293      	cmp	r3, r2
 800d508:	d101      	bne.n	800d50e <check_fs+0x82>
 800d50a:	2300      	movs	r3, #0
 800d50c:	e00c      	b.n	800d528 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	3338      	adds	r3, #56	; 0x38
 800d512:	3352      	adds	r3, #82	; 0x52
 800d514:	4618      	mov	r0, r3
 800d516:	f7fe f9a3 	bl	800b860 <ld_dword>
 800d51a:	4603      	mov	r3, r0
 800d51c:	4a05      	ldr	r2, [pc, #20]	; (800d534 <check_fs+0xa8>)
 800d51e:	4293      	cmp	r3, r2
 800d520:	d101      	bne.n	800d526 <check_fs+0x9a>
 800d522:	2300      	movs	r3, #0
 800d524:	e000      	b.n	800d528 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d526:	2302      	movs	r3, #2
}
 800d528:	4618      	mov	r0, r3
 800d52a:	3708      	adds	r7, #8
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}
 800d530:	00544146 	.word	0x00544146
 800d534:	33544146 	.word	0x33544146

0800d538 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b096      	sub	sp, #88	; 0x58
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	60f8      	str	r0, [r7, #12]
 800d540:	60b9      	str	r1, [r7, #8]
 800d542:	4613      	mov	r3, r2
 800d544:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	2200      	movs	r2, #0
 800d54a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d54c:	68f8      	ldr	r0, [r7, #12]
 800d54e:	f7ff ff58 	bl	800d402 <get_ldnumber>
 800d552:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d556:	2b00      	cmp	r3, #0
 800d558:	da01      	bge.n	800d55e <find_volume+0x26>
 800d55a:	230b      	movs	r3, #11
 800d55c:	e235      	b.n	800d9ca <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d55e:	4aa5      	ldr	r2, [pc, #660]	; (800d7f4 <find_volume+0x2bc>)
 800d560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d566:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d101      	bne.n	800d572 <find_volume+0x3a>
 800d56e:	230c      	movs	r3, #12
 800d570:	e22b      	b.n	800d9ca <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800d572:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d574:	f7fe fa5c 	bl	800ba30 <lock_fs>
 800d578:	4603      	mov	r3, r0
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d101      	bne.n	800d582 <find_volume+0x4a>
 800d57e:	230f      	movs	r3, #15
 800d580:	e223      	b.n	800d9ca <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d586:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d588:	79fb      	ldrb	r3, [r7, #7]
 800d58a:	f023 0301 	bic.w	r3, r3, #1
 800d58e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d592:	781b      	ldrb	r3, [r3, #0]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d01a      	beq.n	800d5ce <find_volume+0x96>
		stat = disk_status(fs->drv);
 800d598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d59a:	785b      	ldrb	r3, [r3, #1]
 800d59c:	4618      	mov	r0, r3
 800d59e:	f7fe f8a9 	bl	800b6f4 <disk_status>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d5a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d5ac:	f003 0301 	and.w	r3, r3, #1
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d10c      	bne.n	800d5ce <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d5b4:	79fb      	ldrb	r3, [r7, #7]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d007      	beq.n	800d5ca <find_volume+0x92>
 800d5ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d5be:	f003 0304 	and.w	r3, r3, #4
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d001      	beq.n	800d5ca <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800d5c6:	230a      	movs	r3, #10
 800d5c8:	e1ff      	b.n	800d9ca <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	e1fd      	b.n	800d9ca <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d5d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5d6:	b2da      	uxtb	r2, r3
 800d5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5da:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5de:	785b      	ldrb	r3, [r3, #1]
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f7fe f8a1 	bl	800b728 <disk_initialize>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d5ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d5f0:	f003 0301 	and.w	r3, r3, #1
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d001      	beq.n	800d5fc <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d5f8:	2303      	movs	r3, #3
 800d5fa:	e1e6      	b.n	800d9ca <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d5fc:	79fb      	ldrb	r3, [r7, #7]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d007      	beq.n	800d612 <find_volume+0xda>
 800d602:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d606:	f003 0304 	and.w	r3, r3, #4
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d001      	beq.n	800d612 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800d60e:	230a      	movs	r3, #10
 800d610:	e1db      	b.n	800d9ca <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d612:	2300      	movs	r3, #0
 800d614:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d616:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d618:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d61a:	f7ff ff37 	bl	800d48c <check_fs>
 800d61e:	4603      	mov	r3, r0
 800d620:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d624:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d628:	2b02      	cmp	r3, #2
 800d62a:	d149      	bne.n	800d6c0 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d62c:	2300      	movs	r3, #0
 800d62e:	643b      	str	r3, [r7, #64]	; 0x40
 800d630:	e01e      	b.n	800d670 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d634:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d63a:	011b      	lsls	r3, r3, #4
 800d63c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d640:	4413      	add	r3, r2
 800d642:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d646:	3304      	adds	r3, #4
 800d648:	781b      	ldrb	r3, [r3, #0]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d006      	beq.n	800d65c <find_volume+0x124>
 800d64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d650:	3308      	adds	r3, #8
 800d652:	4618      	mov	r0, r3
 800d654:	f7fe f904 	bl	800b860 <ld_dword>
 800d658:	4602      	mov	r2, r0
 800d65a:	e000      	b.n	800d65e <find_volume+0x126>
 800d65c:	2200      	movs	r2, #0
 800d65e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d660:	009b      	lsls	r3, r3, #2
 800d662:	3358      	adds	r3, #88	; 0x58
 800d664:	443b      	add	r3, r7
 800d666:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d66a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d66c:	3301      	adds	r3, #1
 800d66e:	643b      	str	r3, [r7, #64]	; 0x40
 800d670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d672:	2b03      	cmp	r3, #3
 800d674:	d9dd      	bls.n	800d632 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d676:	2300      	movs	r3, #0
 800d678:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d67a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d002      	beq.n	800d686 <find_volume+0x14e>
 800d680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d682:	3b01      	subs	r3, #1
 800d684:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d688:	009b      	lsls	r3, r3, #2
 800d68a:	3358      	adds	r3, #88	; 0x58
 800d68c:	443b      	add	r3, r7
 800d68e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d692:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d696:	2b00      	cmp	r3, #0
 800d698:	d005      	beq.n	800d6a6 <find_volume+0x16e>
 800d69a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d69c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d69e:	f7ff fef5 	bl	800d48c <check_fs>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	e000      	b.n	800d6a8 <find_volume+0x170>
 800d6a6:	2303      	movs	r3, #3
 800d6a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d6ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d6b0:	2b01      	cmp	r3, #1
 800d6b2:	d905      	bls.n	800d6c0 <find_volume+0x188>
 800d6b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6b6:	3301      	adds	r3, #1
 800d6b8:	643b      	str	r3, [r7, #64]	; 0x40
 800d6ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6bc:	2b03      	cmp	r3, #3
 800d6be:	d9e2      	bls.n	800d686 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d6c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d6c4:	2b04      	cmp	r3, #4
 800d6c6:	d101      	bne.n	800d6cc <find_volume+0x194>
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	e17e      	b.n	800d9ca <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d6cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d6d0:	2b01      	cmp	r3, #1
 800d6d2:	d901      	bls.n	800d6d8 <find_volume+0x1a0>
 800d6d4:	230d      	movs	r3, #13
 800d6d6:	e178      	b.n	800d9ca <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6da:	3338      	adds	r3, #56	; 0x38
 800d6dc:	330b      	adds	r3, #11
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f7fe f8a6 	bl	800b830 <ld_word>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d6ea:	d001      	beq.n	800d6f0 <find_volume+0x1b8>
 800d6ec:	230d      	movs	r3, #13
 800d6ee:	e16c      	b.n	800d9ca <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6f2:	3338      	adds	r3, #56	; 0x38
 800d6f4:	3316      	adds	r3, #22
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	f7fe f89a 	bl	800b830 <ld_word>
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d702:	2b00      	cmp	r3, #0
 800d704:	d106      	bne.n	800d714 <find_volume+0x1dc>
 800d706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d708:	3338      	adds	r3, #56	; 0x38
 800d70a:	3324      	adds	r3, #36	; 0x24
 800d70c:	4618      	mov	r0, r3
 800d70e:	f7fe f8a7 	bl	800b860 <ld_dword>
 800d712:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d716:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d718:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d71c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800d720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d722:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d726:	789b      	ldrb	r3, [r3, #2]
 800d728:	2b01      	cmp	r3, #1
 800d72a:	d005      	beq.n	800d738 <find_volume+0x200>
 800d72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d72e:	789b      	ldrb	r3, [r3, #2]
 800d730:	2b02      	cmp	r3, #2
 800d732:	d001      	beq.n	800d738 <find_volume+0x200>
 800d734:	230d      	movs	r3, #13
 800d736:	e148      	b.n	800d9ca <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d73a:	789b      	ldrb	r3, [r3, #2]
 800d73c:	461a      	mov	r2, r3
 800d73e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d740:	fb02 f303 	mul.w	r3, r2, r3
 800d744:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d748:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d74c:	b29a      	uxth	r2, r3
 800d74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d750:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d754:	895b      	ldrh	r3, [r3, #10]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d008      	beq.n	800d76c <find_volume+0x234>
 800d75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d75c:	895b      	ldrh	r3, [r3, #10]
 800d75e:	461a      	mov	r2, r3
 800d760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d762:	895b      	ldrh	r3, [r3, #10]
 800d764:	3b01      	subs	r3, #1
 800d766:	4013      	ands	r3, r2
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d001      	beq.n	800d770 <find_volume+0x238>
 800d76c:	230d      	movs	r3, #13
 800d76e:	e12c      	b.n	800d9ca <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d772:	3338      	adds	r3, #56	; 0x38
 800d774:	3311      	adds	r3, #17
 800d776:	4618      	mov	r0, r3
 800d778:	f7fe f85a 	bl	800b830 <ld_word>
 800d77c:	4603      	mov	r3, r0
 800d77e:	461a      	mov	r2, r3
 800d780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d782:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d786:	891b      	ldrh	r3, [r3, #8]
 800d788:	f003 030f 	and.w	r3, r3, #15
 800d78c:	b29b      	uxth	r3, r3
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d001      	beq.n	800d796 <find_volume+0x25e>
 800d792:	230d      	movs	r3, #13
 800d794:	e119      	b.n	800d9ca <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d798:	3338      	adds	r3, #56	; 0x38
 800d79a:	3313      	adds	r3, #19
 800d79c:	4618      	mov	r0, r3
 800d79e:	f7fe f847 	bl	800b830 <ld_word>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d7a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d106      	bne.n	800d7ba <find_volume+0x282>
 800d7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ae:	3338      	adds	r3, #56	; 0x38
 800d7b0:	3320      	adds	r3, #32
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f7fe f854 	bl	800b860 <ld_dword>
 800d7b8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7bc:	3338      	adds	r3, #56	; 0x38
 800d7be:	330e      	adds	r3, #14
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f7fe f835 	bl	800b830 <ld_word>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d7ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d101      	bne.n	800d7d4 <find_volume+0x29c>
 800d7d0:	230d      	movs	r3, #13
 800d7d2:	e0fa      	b.n	800d9ca <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d7d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d7d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7d8:	4413      	add	r3, r2
 800d7da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d7dc:	8912      	ldrh	r2, [r2, #8]
 800d7de:	0912      	lsrs	r2, r2, #4
 800d7e0:	b292      	uxth	r2, r2
 800d7e2:	4413      	add	r3, r2
 800d7e4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d7e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	d204      	bcs.n	800d7f8 <find_volume+0x2c0>
 800d7ee:	230d      	movs	r3, #13
 800d7f0:	e0eb      	b.n	800d9ca <find_volume+0x492>
 800d7f2:	bf00      	nop
 800d7f4:	200041a4 	.word	0x200041a4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d7f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7fc:	1ad3      	subs	r3, r2, r3
 800d7fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d800:	8952      	ldrh	r2, [r2, #10]
 800d802:	fbb3 f3f2 	udiv	r3, r3, r2
 800d806:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d101      	bne.n	800d812 <find_volume+0x2da>
 800d80e:	230d      	movs	r3, #13
 800d810:	e0db      	b.n	800d9ca <find_volume+0x492>
		fmt = FS_FAT32;
 800d812:	2303      	movs	r3, #3
 800d814:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d81a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d81e:	4293      	cmp	r3, r2
 800d820:	d802      	bhi.n	800d828 <find_volume+0x2f0>
 800d822:	2302      	movs	r3, #2
 800d824:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d82e:	4293      	cmp	r3, r2
 800d830:	d802      	bhi.n	800d838 <find_volume+0x300>
 800d832:	2301      	movs	r3, #1
 800d834:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d83a:	1c9a      	adds	r2, r3, #2
 800d83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d83e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800d840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d842:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d844:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d846:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d84a:	441a      	add	r2, r3
 800d84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d84e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800d850:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d854:	441a      	add	r2, r3
 800d856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d858:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800d85a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d85e:	2b03      	cmp	r3, #3
 800d860:	d11e      	bne.n	800d8a0 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d864:	3338      	adds	r3, #56	; 0x38
 800d866:	332a      	adds	r3, #42	; 0x2a
 800d868:	4618      	mov	r0, r3
 800d86a:	f7fd ffe1 	bl	800b830 <ld_word>
 800d86e:	4603      	mov	r3, r0
 800d870:	2b00      	cmp	r3, #0
 800d872:	d001      	beq.n	800d878 <find_volume+0x340>
 800d874:	230d      	movs	r3, #13
 800d876:	e0a8      	b.n	800d9ca <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d87a:	891b      	ldrh	r3, [r3, #8]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d001      	beq.n	800d884 <find_volume+0x34c>
 800d880:	230d      	movs	r3, #13
 800d882:	e0a2      	b.n	800d9ca <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d886:	3338      	adds	r3, #56	; 0x38
 800d888:	332c      	adds	r3, #44	; 0x2c
 800d88a:	4618      	mov	r0, r3
 800d88c:	f7fd ffe8 	bl	800b860 <ld_dword>
 800d890:	4602      	mov	r2, r0
 800d892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d894:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d898:	69db      	ldr	r3, [r3, #28]
 800d89a:	009b      	lsls	r3, r3, #2
 800d89c:	647b      	str	r3, [r7, #68]	; 0x44
 800d89e:	e01f      	b.n	800d8e0 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d8a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8a2:	891b      	ldrh	r3, [r3, #8]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d101      	bne.n	800d8ac <find_volume+0x374>
 800d8a8:	230d      	movs	r3, #13
 800d8aa:	e08e      	b.n	800d9ca <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d8b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8b2:	441a      	add	r2, r3
 800d8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8b6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d8b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d8bc:	2b02      	cmp	r3, #2
 800d8be:	d103      	bne.n	800d8c8 <find_volume+0x390>
 800d8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8c2:	69db      	ldr	r3, [r3, #28]
 800d8c4:	005b      	lsls	r3, r3, #1
 800d8c6:	e00a      	b.n	800d8de <find_volume+0x3a6>
 800d8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ca:	69da      	ldr	r2, [r3, #28]
 800d8cc:	4613      	mov	r3, r2
 800d8ce:	005b      	lsls	r3, r3, #1
 800d8d0:	4413      	add	r3, r2
 800d8d2:	085a      	lsrs	r2, r3, #1
 800d8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8d6:	69db      	ldr	r3, [r3, #28]
 800d8d8:	f003 0301 	and.w	r3, r3, #1
 800d8dc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d8de:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8e2:	6a1a      	ldr	r2, [r3, #32]
 800d8e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8e6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d8ea:	0a5b      	lsrs	r3, r3, #9
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	d201      	bcs.n	800d8f4 <find_volume+0x3bc>
 800d8f0:	230d      	movs	r3, #13
 800d8f2:	e06a      	b.n	800d9ca <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8f6:	f04f 32ff 	mov.w	r2, #4294967295
 800d8fa:	619a      	str	r2, [r3, #24]
 800d8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8fe:	699a      	ldr	r2, [r3, #24]
 800d900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d902:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800d904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d906:	2280      	movs	r2, #128	; 0x80
 800d908:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d90a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d90e:	2b03      	cmp	r3, #3
 800d910:	d149      	bne.n	800d9a6 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d914:	3338      	adds	r3, #56	; 0x38
 800d916:	3330      	adds	r3, #48	; 0x30
 800d918:	4618      	mov	r0, r3
 800d91a:	f7fd ff89 	bl	800b830 <ld_word>
 800d91e:	4603      	mov	r3, r0
 800d920:	2b01      	cmp	r3, #1
 800d922:	d140      	bne.n	800d9a6 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d926:	3301      	adds	r3, #1
 800d928:	4619      	mov	r1, r3
 800d92a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d92c:	f7fe fa62 	bl	800bdf4 <move_window>
 800d930:	4603      	mov	r3, r0
 800d932:	2b00      	cmp	r3, #0
 800d934:	d137      	bne.n	800d9a6 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800d936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d938:	2200      	movs	r2, #0
 800d93a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d93e:	3338      	adds	r3, #56	; 0x38
 800d940:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d944:	4618      	mov	r0, r3
 800d946:	f7fd ff73 	bl	800b830 <ld_word>
 800d94a:	4603      	mov	r3, r0
 800d94c:	461a      	mov	r2, r3
 800d94e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d952:	429a      	cmp	r2, r3
 800d954:	d127      	bne.n	800d9a6 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d958:	3338      	adds	r3, #56	; 0x38
 800d95a:	4618      	mov	r0, r3
 800d95c:	f7fd ff80 	bl	800b860 <ld_dword>
 800d960:	4603      	mov	r3, r0
 800d962:	4a1c      	ldr	r2, [pc, #112]	; (800d9d4 <find_volume+0x49c>)
 800d964:	4293      	cmp	r3, r2
 800d966:	d11e      	bne.n	800d9a6 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d96a:	3338      	adds	r3, #56	; 0x38
 800d96c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d970:	4618      	mov	r0, r3
 800d972:	f7fd ff75 	bl	800b860 <ld_dword>
 800d976:	4603      	mov	r3, r0
 800d978:	4a17      	ldr	r2, [pc, #92]	; (800d9d8 <find_volume+0x4a0>)
 800d97a:	4293      	cmp	r3, r2
 800d97c:	d113      	bne.n	800d9a6 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d980:	3338      	adds	r3, #56	; 0x38
 800d982:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d986:	4618      	mov	r0, r3
 800d988:	f7fd ff6a 	bl	800b860 <ld_dword>
 800d98c:	4602      	mov	r2, r0
 800d98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d990:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d994:	3338      	adds	r3, #56	; 0x38
 800d996:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d99a:	4618      	mov	r0, r3
 800d99c:	f7fd ff60 	bl	800b860 <ld_dword>
 800d9a0:	4602      	mov	r2, r0
 800d9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9a4:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9a8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d9ac:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d9ae:	4b0b      	ldr	r3, [pc, #44]	; (800d9dc <find_volume+0x4a4>)
 800d9b0:	881b      	ldrh	r3, [r3, #0]
 800d9b2:	3301      	adds	r3, #1
 800d9b4:	b29a      	uxth	r2, r3
 800d9b6:	4b09      	ldr	r3, [pc, #36]	; (800d9dc <find_volume+0x4a4>)
 800d9b8:	801a      	strh	r2, [r3, #0]
 800d9ba:	4b08      	ldr	r3, [pc, #32]	; (800d9dc <find_volume+0x4a4>)
 800d9bc:	881a      	ldrh	r2, [r3, #0]
 800d9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9c0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d9c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d9c4:	f7fe f9ae 	bl	800bd24 <clear_lock>
#endif
	return FR_OK;
 800d9c8:	2300      	movs	r3, #0
}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	3758      	adds	r7, #88	; 0x58
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}
 800d9d2:	bf00      	nop
 800d9d4:	41615252 	.word	0x41615252
 800d9d8:	61417272 	.word	0x61417272
 800d9dc:	200041a8 	.word	0x200041a8

0800d9e0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b084      	sub	sp, #16
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
 800d9e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d9ea:	2309      	movs	r3, #9
 800d9ec:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d02e      	beq.n	800da52 <validate+0x72>
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d02a      	beq.n	800da52 <validate+0x72>
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	781b      	ldrb	r3, [r3, #0]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d025      	beq.n	800da52 <validate+0x72>
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	889a      	ldrh	r2, [r3, #4]
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	88db      	ldrh	r3, [r3, #6]
 800da10:	429a      	cmp	r2, r3
 800da12:	d11e      	bne.n	800da52 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	4618      	mov	r0, r3
 800da1a:	f7fe f809 	bl	800ba30 <lock_fs>
 800da1e:	4603      	mov	r3, r0
 800da20:	2b00      	cmp	r3, #0
 800da22:	d014      	beq.n	800da4e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	785b      	ldrb	r3, [r3, #1]
 800da2a:	4618      	mov	r0, r3
 800da2c:	f7fd fe62 	bl	800b6f4 <disk_status>
 800da30:	4603      	mov	r3, r0
 800da32:	f003 0301 	and.w	r3, r3, #1
 800da36:	2b00      	cmp	r3, #0
 800da38:	d102      	bne.n	800da40 <validate+0x60>
				res = FR_OK;
 800da3a:	2300      	movs	r3, #0
 800da3c:	73fb      	strb	r3, [r7, #15]
 800da3e:	e008      	b.n	800da52 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	2100      	movs	r1, #0
 800da46:	4618      	mov	r0, r3
 800da48:	f7fe f808 	bl	800ba5c <unlock_fs>
 800da4c:	e001      	b.n	800da52 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800da4e:	230f      	movs	r3, #15
 800da50:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800da52:	7bfb      	ldrb	r3, [r7, #15]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d102      	bne.n	800da5e <validate+0x7e>
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	e000      	b.n	800da60 <validate+0x80>
 800da5e:	2300      	movs	r3, #0
 800da60:	683a      	ldr	r2, [r7, #0]
 800da62:	6013      	str	r3, [r2, #0]
	return res;
 800da64:	7bfb      	ldrb	r3, [r7, #15]
}
 800da66:	4618      	mov	r0, r3
 800da68:	3710      	adds	r7, #16
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}
	...

0800da70 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b088      	sub	sp, #32
 800da74:	af00      	add	r7, sp, #0
 800da76:	60f8      	str	r0, [r7, #12]
 800da78:	60b9      	str	r1, [r7, #8]
 800da7a:	4613      	mov	r3, r2
 800da7c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800da82:	f107 0310 	add.w	r3, r7, #16
 800da86:	4618      	mov	r0, r3
 800da88:	f7ff fcbb 	bl	800d402 <get_ldnumber>
 800da8c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800da8e:	69fb      	ldr	r3, [r7, #28]
 800da90:	2b00      	cmp	r3, #0
 800da92:	da01      	bge.n	800da98 <f_mount+0x28>
 800da94:	230b      	movs	r3, #11
 800da96:	e048      	b.n	800db2a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800da98:	4a26      	ldr	r2, [pc, #152]	; (800db34 <f_mount+0xc4>)
 800da9a:	69fb      	ldr	r3, [r7, #28]
 800da9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800daa0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800daa2:	69bb      	ldr	r3, [r7, #24]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d00f      	beq.n	800dac8 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800daa8:	69b8      	ldr	r0, [r7, #24]
 800daaa:	f7fe f93b 	bl	800bd24 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800daae:	69bb      	ldr	r3, [r7, #24]
 800dab0:	691b      	ldr	r3, [r3, #16]
 800dab2:	4618      	mov	r0, r3
 800dab4:	f001 fab1 	bl	800f01a <ff_del_syncobj>
 800dab8:	4603      	mov	r3, r0
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d101      	bne.n	800dac2 <f_mount+0x52>
 800dabe:	2302      	movs	r3, #2
 800dac0:	e033      	b.n	800db2a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800dac2:	69bb      	ldr	r3, [r7, #24]
 800dac4:	2200      	movs	r2, #0
 800dac6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d00f      	beq.n	800daee <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	2200      	movs	r2, #0
 800dad2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800dad4:	69fb      	ldr	r3, [r7, #28]
 800dad6:	b2da      	uxtb	r2, r3
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	3310      	adds	r3, #16
 800dadc:	4619      	mov	r1, r3
 800dade:	4610      	mov	r0, r2
 800dae0:	f001 fa80 	bl	800efe4 <ff_cre_syncobj>
 800dae4:	4603      	mov	r3, r0
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d101      	bne.n	800daee <f_mount+0x7e>
 800daea:	2302      	movs	r3, #2
 800daec:	e01d      	b.n	800db2a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800daee:	68fa      	ldr	r2, [r7, #12]
 800daf0:	4910      	ldr	r1, [pc, #64]	; (800db34 <f_mount+0xc4>)
 800daf2:	69fb      	ldr	r3, [r7, #28]
 800daf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d002      	beq.n	800db04 <f_mount+0x94>
 800dafe:	79fb      	ldrb	r3, [r7, #7]
 800db00:	2b01      	cmp	r3, #1
 800db02:	d001      	beq.n	800db08 <f_mount+0x98>
 800db04:	2300      	movs	r3, #0
 800db06:	e010      	b.n	800db2a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800db08:	f107 010c 	add.w	r1, r7, #12
 800db0c:	f107 0308 	add.w	r3, r7, #8
 800db10:	2200      	movs	r2, #0
 800db12:	4618      	mov	r0, r3
 800db14:	f7ff fd10 	bl	800d538 <find_volume>
 800db18:	4603      	mov	r3, r0
 800db1a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	7dfa      	ldrb	r2, [r7, #23]
 800db20:	4611      	mov	r1, r2
 800db22:	4618      	mov	r0, r3
 800db24:	f7fd ff9a 	bl	800ba5c <unlock_fs>
 800db28:	7dfb      	ldrb	r3, [r7, #23]
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	3720      	adds	r7, #32
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}
 800db32:	bf00      	nop
 800db34:	200041a4 	.word	0x200041a4

0800db38 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800db3e:	af00      	add	r7, sp, #0
 800db40:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800db44:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800db48:	6018      	str	r0, [r3, #0]
 800db4a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800db4e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800db52:	6019      	str	r1, [r3, #0]
 800db54:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800db58:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800db5c:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800db5e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800db62:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d101      	bne.n	800db70 <f_open+0x38>
 800db6c:	2309      	movs	r3, #9
 800db6e:	e29d      	b.n	800e0ac <f_open+0x574>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800db70:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800db74:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800db78:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800db7c:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800db80:	7812      	ldrb	r2, [r2, #0]
 800db82:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800db86:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800db88:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800db8c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800db90:	781a      	ldrb	r2, [r3, #0]
 800db92:	f507 7105 	add.w	r1, r7, #532	; 0x214
 800db96:	f107 0308 	add.w	r3, r7, #8
 800db9a:	4618      	mov	r0, r3
 800db9c:	f7ff fccc 	bl	800d538 <find_volume>
 800dba0:	4603      	mov	r3, r0
 800dba2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 800dba6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	f040 8269 	bne.w	800e082 <f_open+0x54a>
		dj.obj.fs = fs;
 800dbb0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800dbb4:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 800dbb8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800dbbc:	f107 0214 	add.w	r2, r7, #20
 800dbc0:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800dbc2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800dbc6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800dbca:	681a      	ldr	r2, [r3, #0]
 800dbcc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800dbd0:	4611      	mov	r1, r2
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f7ff fba4 	bl	800d320 <follow_path>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800dbde:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d11e      	bne.n	800dc24 <f_open+0xec>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800dbe6:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 800dbea:	b25b      	sxtb	r3, r3
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	da03      	bge.n	800dbf8 <f_open+0xc0>
				res = FR_INVALID_NAME;
 800dbf0:	2306      	movs	r3, #6
 800dbf2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800dbf6:	e015      	b.n	800dc24 <f_open+0xec>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dbf8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800dbfc:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800dc00:	781b      	ldrb	r3, [r3, #0]
 800dc02:	f023 0301 	bic.w	r3, r3, #1
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	bf14      	ite	ne
 800dc0a:	2301      	movne	r3, #1
 800dc0c:	2300      	moveq	r3, #0
 800dc0e:	b2db      	uxtb	r3, r3
 800dc10:	461a      	mov	r2, r3
 800dc12:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800dc16:	4611      	mov	r1, r2
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f7fd ff3b 	bl	800ba94 <chk_lock>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800dc24:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800dc28:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800dc2c:	781b      	ldrb	r3, [r3, #0]
 800dc2e:	f003 031c 	and.w	r3, r3, #28
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	f000 80a7 	beq.w	800dd86 <f_open+0x24e>
			if (res != FR_OK) {					/* No file, create new */
 800dc38:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d01f      	beq.n	800dc80 <f_open+0x148>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800dc40:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800dc44:	2b04      	cmp	r3, #4
 800dc46:	d10e      	bne.n	800dc66 <f_open+0x12e>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800dc48:	f7fd ff80 	bl	800bb4c <enq_lock>
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d006      	beq.n	800dc60 <f_open+0x128>
 800dc52:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800dc56:	4618      	mov	r0, r3
 800dc58:	f7ff f870 	bl	800cd3c <dir_register>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	e000      	b.n	800dc62 <f_open+0x12a>
 800dc60:	2312      	movs	r3, #18
 800dc62:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800dc66:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800dc6a:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800dc6e:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800dc72:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800dc76:	7812      	ldrb	r2, [r2, #0]
 800dc78:	f042 0208 	orr.w	r2, r2, #8
 800dc7c:	701a      	strb	r2, [r3, #0]
 800dc7e:	e015      	b.n	800dcac <f_open+0x174>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800dc80:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800dc84:	f003 0311 	and.w	r3, r3, #17
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d003      	beq.n	800dc94 <f_open+0x15c>
					res = FR_DENIED;
 800dc8c:	2307      	movs	r3, #7
 800dc8e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800dc92:	e00b      	b.n	800dcac <f_open+0x174>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800dc94:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800dc98:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800dc9c:	781b      	ldrb	r3, [r3, #0]
 800dc9e:	f003 0304 	and.w	r3, r3, #4
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d002      	beq.n	800dcac <f_open+0x174>
 800dca6:	2308      	movs	r3, #8
 800dca8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800dcac:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	f040 8088 	bne.w	800ddc6 <f_open+0x28e>
 800dcb6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800dcba:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800dcbe:	781b      	ldrb	r3, [r3, #0]
 800dcc0:	f003 0308 	and.w	r3, r3, #8
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d07e      	beq.n	800ddc6 <f_open+0x28e>
				dw = GET_FATTIME();
 800dcc8:	f7fc fd56 	bl	800a778 <get_fattime>
 800dccc:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800dcd0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800dcd4:	330e      	adds	r3, #14
 800dcd6:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f7fd fdfe 	bl	800b8dc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800dce0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800dce4:	3316      	adds	r3, #22
 800dce6:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800dcea:	4618      	mov	r0, r3
 800dcec:	f7fd fdf6 	bl	800b8dc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800dcf0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800dcf4:	330b      	adds	r3, #11
 800dcf6:	2220      	movs	r2, #32
 800dcf8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800dcfa:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800dcfe:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800dd02:	4611      	mov	r1, r2
 800dd04:	4618      	mov	r0, r3
 800dd06:	f7fe fd7c 	bl	800c802 <ld_clust>
 800dd0a:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800dd0e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800dd12:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 800dd16:	2200      	movs	r2, #0
 800dd18:	4618      	mov	r0, r3
 800dd1a:	f7fe fd91 	bl	800c840 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800dd1e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800dd22:	331c      	adds	r3, #28
 800dd24:	2100      	movs	r1, #0
 800dd26:	4618      	mov	r0, r3
 800dd28:	f7fd fdd8 	bl	800b8dc <st_dword>
					fs->wflag = 1;
 800dd2c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800dd30:	2201      	movs	r2, #1
 800dd32:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800dd34:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d044      	beq.n	800ddc6 <f_open+0x28e>
						dw = fs->winsect;
 800dd3c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800dd40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd42:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 800dd46:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 800dd50:	4618      	mov	r0, r3
 800dd52:	f7fe fa9e 	bl	800c292 <remove_chain>
 800dd56:	4603      	mov	r3, r0
 800dd58:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 800dd5c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d130      	bne.n	800ddc6 <f_open+0x28e>
							res = move_window(fs, dw);
 800dd64:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800dd68:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f7fe f841 	bl	800bdf4 <move_window>
 800dd72:	4603      	mov	r3, r0
 800dd74:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800dd78:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800dd7c:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 800dd80:	3a01      	subs	r2, #1
 800dd82:	615a      	str	r2, [r3, #20]
 800dd84:	e01f      	b.n	800ddc6 <f_open+0x28e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800dd86:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d11b      	bne.n	800ddc6 <f_open+0x28e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800dd8e:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800dd92:	f003 0310 	and.w	r3, r3, #16
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d003      	beq.n	800dda2 <f_open+0x26a>
					res = FR_NO_FILE;
 800dd9a:	2304      	movs	r3, #4
 800dd9c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800dda0:	e011      	b.n	800ddc6 <f_open+0x28e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800dda2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800dda6:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800ddaa:	781b      	ldrb	r3, [r3, #0]
 800ddac:	f003 0302 	and.w	r3, r3, #2
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d008      	beq.n	800ddc6 <f_open+0x28e>
 800ddb4:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800ddb8:	f003 0301 	and.w	r3, r3, #1
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d002      	beq.n	800ddc6 <f_open+0x28e>
						res = FR_DENIED;
 800ddc0:	2307      	movs	r3, #7
 800ddc2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 800ddc6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d14a      	bne.n	800de64 <f_open+0x32c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ddce:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ddd2:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800ddd6:	781b      	ldrb	r3, [r3, #0]
 800ddd8:	f003 0308 	and.w	r3, r3, #8
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d00b      	beq.n	800ddf8 <f_open+0x2c0>
				mode |= FA_MODIFIED;
 800dde0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800dde4:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800dde8:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800ddec:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800ddf0:	7812      	ldrb	r2, [r2, #0]
 800ddf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ddf6:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ddf8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ddfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ddfe:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800de02:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800de0a:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800de0e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800de12:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800de1a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800de1e:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800de22:	781b      	ldrb	r3, [r3, #0]
 800de24:	f023 0301 	bic.w	r3, r3, #1
 800de28:	2b00      	cmp	r3, #0
 800de2a:	bf14      	ite	ne
 800de2c:	2301      	movne	r3, #1
 800de2e:	2300      	moveq	r3, #0
 800de30:	b2db      	uxtb	r3, r3
 800de32:	461a      	mov	r2, r3
 800de34:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800de38:	4611      	mov	r1, r2
 800de3a:	4618      	mov	r0, r3
 800de3c:	f7fd fea8 	bl	800bb90 <inc_lock>
 800de40:	4602      	mov	r2, r0
 800de42:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800de46:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800de4e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800de52:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	691b      	ldr	r3, [r3, #16]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d102      	bne.n	800de64 <f_open+0x32c>
 800de5e:	2302      	movs	r3, #2
 800de60:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 800de64:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800de68:	2b00      	cmp	r3, #0
 800de6a:	f040 810a 	bne.w	800e082 <f_open+0x54a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800de6e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800de72:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800de76:	4611      	mov	r1, r2
 800de78:	4618      	mov	r0, r3
 800de7a:	f7fe fcc2 	bl	800c802 <ld_clust>
 800de7e:	4602      	mov	r2, r0
 800de80:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800de84:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800de8c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800de90:	331c      	adds	r3, #28
 800de92:	4618      	mov	r0, r3
 800de94:	f7fd fce4 	bl	800b860 <ld_dword>
 800de98:	4602      	mov	r2, r0
 800de9a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800de9e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800dea6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800deaa:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	2200      	movs	r2, #0
 800deb2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800deb4:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800deb8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800debc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800dec4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800dec8:	88da      	ldrh	r2, [r3, #6]
 800deca:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800dece:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ded6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800deda:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800dee4:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800dee8:	7812      	ldrb	r2, [r2, #0]
 800deea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800deec:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800def0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	2200      	movs	r2, #0
 800def8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800defa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800defe:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	2200      	movs	r2, #0
 800df06:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800df08:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800df0c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	2200      	movs	r2, #0
 800df14:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800df16:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800df1a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	3330      	adds	r3, #48	; 0x30
 800df22:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df26:	2100      	movs	r1, #0
 800df28:	4618      	mov	r0, r3
 800df2a:	f7fd fd24 	bl	800b976 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800df2e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800df32:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800df36:	781b      	ldrb	r3, [r3, #0]
 800df38:	f003 0320 	and.w	r3, r3, #32
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	f000 80a0 	beq.w	800e082 <f_open+0x54a>
 800df42:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800df46:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	68db      	ldr	r3, [r3, #12]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	f000 8097 	beq.w	800e082 <f_open+0x54a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800df54:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800df58:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	68da      	ldr	r2, [r3, #12]
 800df60:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800df64:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800df6c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800df70:	895b      	ldrh	r3, [r3, #10]
 800df72:	025b      	lsls	r3, r3, #9
 800df74:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800df78:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800df7c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	689b      	ldr	r3, [r3, #8]
 800df84:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800df88:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800df8c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	68db      	ldr	r3, [r3, #12]
 800df94:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800df98:	e021      	b.n	800dfde <f_open+0x4a6>
					clst = get_fat(&fp->obj, clst);
 800df9a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800df9e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f7fd ffde 	bl	800bf6a <get_fat>
 800dfae:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 800dfb2:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800dfb6:	2b01      	cmp	r3, #1
 800dfb8:	d802      	bhi.n	800dfc0 <f_open+0x488>
 800dfba:	2302      	movs	r3, #2
 800dfbc:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800dfc0:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800dfc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfc8:	d102      	bne.n	800dfd0 <f_open+0x498>
 800dfca:	2301      	movs	r3, #1
 800dfcc:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dfd0:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800dfd4:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800dfd8:	1ad3      	subs	r3, r2, r3
 800dfda:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800dfde:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d105      	bne.n	800dff2 <f_open+0x4ba>
 800dfe6:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800dfea:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800dfee:	429a      	cmp	r2, r3
 800dff0:	d8d3      	bhi.n	800df9a <f_open+0x462>
				}
				fp->clust = clst;
 800dff2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800dff6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 800e000:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e002:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e006:	2b00      	cmp	r3, #0
 800e008:	d13b      	bne.n	800e082 <f_open+0x54a>
 800e00a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800e00e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e012:	2b00      	cmp	r3, #0
 800e014:	d035      	beq.n	800e082 <f_open+0x54a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e016:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e01a:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800e01e:	4618      	mov	r0, r3
 800e020:	f7fd ff84 	bl	800bf2c <clust2sect>
 800e024:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 800e028:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d103      	bne.n	800e038 <f_open+0x500>
						res = FR_INT_ERR;
 800e030:	2302      	movs	r3, #2
 800e032:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800e036:	e024      	b.n	800e082 <f_open+0x54a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e038:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800e03c:	0a5a      	lsrs	r2, r3, #9
 800e03e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800e042:	441a      	add	r2, r3
 800e044:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e048:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e050:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e054:	7858      	ldrb	r0, [r3, #1]
 800e056:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e05a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e064:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e068:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	6a1a      	ldr	r2, [r3, #32]
 800e070:	2301      	movs	r3, #1
 800e072:	f7fd fb7f 	bl	800b774 <disk_read>
 800e076:	4603      	mov	r3, r0
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d002      	beq.n	800e082 <f_open+0x54a>
 800e07c:	2301      	movs	r3, #1
 800e07e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e082:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800e086:	2b00      	cmp	r3, #0
 800e088:	d006      	beq.n	800e098 <f_open+0x560>
 800e08a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800e08e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	2200      	movs	r2, #0
 800e096:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e098:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e09c:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 800e0a0:	4611      	mov	r1, r2
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f7fd fcda 	bl	800ba5c <unlock_fs>
 800e0a8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f507 771a 	add.w	r7, r7, #616	; 0x268
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}

0800e0b6 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e0b6:	b580      	push	{r7, lr}
 800e0b8:	b08e      	sub	sp, #56	; 0x38
 800e0ba:	af00      	add	r7, sp, #0
 800e0bc:	60f8      	str	r0, [r7, #12]
 800e0be:	60b9      	str	r1, [r7, #8]
 800e0c0:	607a      	str	r2, [r7, #4]
 800e0c2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	f107 0214 	add.w	r2, r7, #20
 800e0d4:	4611      	mov	r1, r2
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f7ff fc82 	bl	800d9e0 <validate>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e0e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d107      	bne.n	800e0fa <f_read+0x44>
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	7d5b      	ldrb	r3, [r3, #21]
 800e0ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e0f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d009      	beq.n	800e10e <f_read+0x58>
 800e0fa:	697b      	ldr	r3, [r7, #20]
 800e0fc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e100:	4611      	mov	r1, r2
 800e102:	4618      	mov	r0, r3
 800e104:	f7fd fcaa 	bl	800ba5c <unlock_fs>
 800e108:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e10c:	e13d      	b.n	800e38a <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	7d1b      	ldrb	r3, [r3, #20]
 800e112:	f003 0301 	and.w	r3, r3, #1
 800e116:	2b00      	cmp	r3, #0
 800e118:	d106      	bne.n	800e128 <f_read+0x72>
 800e11a:	697b      	ldr	r3, [r7, #20]
 800e11c:	2107      	movs	r1, #7
 800e11e:	4618      	mov	r0, r3
 800e120:	f7fd fc9c 	bl	800ba5c <unlock_fs>
 800e124:	2307      	movs	r3, #7
 800e126:	e130      	b.n	800e38a <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	68da      	ldr	r2, [r3, #12]
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	699b      	ldr	r3, [r3, #24]
 800e130:	1ad3      	subs	r3, r2, r3
 800e132:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e134:	687a      	ldr	r2, [r7, #4]
 800e136:	6a3b      	ldr	r3, [r7, #32]
 800e138:	429a      	cmp	r2, r3
 800e13a:	f240 811c 	bls.w	800e376 <f_read+0x2c0>
 800e13e:	6a3b      	ldr	r3, [r7, #32]
 800e140:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e142:	e118      	b.n	800e376 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	699b      	ldr	r3, [r3, #24]
 800e148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	f040 80e4 	bne.w	800e31a <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	699b      	ldr	r3, [r3, #24]
 800e156:	0a5b      	lsrs	r3, r3, #9
 800e158:	697a      	ldr	r2, [r7, #20]
 800e15a:	8952      	ldrh	r2, [r2, #10]
 800e15c:	3a01      	subs	r2, #1
 800e15e:	4013      	ands	r3, r2
 800e160:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e162:	69fb      	ldr	r3, [r7, #28]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d139      	bne.n	800e1dc <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	699b      	ldr	r3, [r3, #24]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d103      	bne.n	800e178 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	689b      	ldr	r3, [r3, #8]
 800e174:	633b      	str	r3, [r7, #48]	; 0x30
 800e176:	e013      	b.n	800e1a0 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d007      	beq.n	800e190 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	699b      	ldr	r3, [r3, #24]
 800e184:	4619      	mov	r1, r3
 800e186:	68f8      	ldr	r0, [r7, #12]
 800e188:	f7fe f980 	bl	800c48c <clmt_clust>
 800e18c:	6338      	str	r0, [r7, #48]	; 0x30
 800e18e:	e007      	b.n	800e1a0 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e190:	68fa      	ldr	r2, [r7, #12]
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	69db      	ldr	r3, [r3, #28]
 800e196:	4619      	mov	r1, r3
 800e198:	4610      	mov	r0, r2
 800e19a:	f7fd fee6 	bl	800bf6a <get_fat>
 800e19e:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a2:	2b01      	cmp	r3, #1
 800e1a4:	d809      	bhi.n	800e1ba <f_read+0x104>
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	2202      	movs	r2, #2
 800e1aa:	755a      	strb	r2, [r3, #21]
 800e1ac:	697b      	ldr	r3, [r7, #20]
 800e1ae:	2102      	movs	r1, #2
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	f7fd fc53 	bl	800ba5c <unlock_fs>
 800e1b6:	2302      	movs	r3, #2
 800e1b8:	e0e7      	b.n	800e38a <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1c0:	d109      	bne.n	800e1d6 <f_read+0x120>
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	2201      	movs	r2, #1
 800e1c6:	755a      	strb	r2, [r3, #21]
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	2101      	movs	r1, #1
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	f7fd fc45 	bl	800ba5c <unlock_fs>
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	e0d9      	b.n	800e38a <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1da:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e1dc:	697a      	ldr	r2, [r7, #20]
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	69db      	ldr	r3, [r3, #28]
 800e1e2:	4619      	mov	r1, r3
 800e1e4:	4610      	mov	r0, r2
 800e1e6:	f7fd fea1 	bl	800bf2c <clust2sect>
 800e1ea:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e1ec:	69bb      	ldr	r3, [r7, #24]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d109      	bne.n	800e206 <f_read+0x150>
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	2202      	movs	r2, #2
 800e1f6:	755a      	strb	r2, [r3, #21]
 800e1f8:	697b      	ldr	r3, [r7, #20]
 800e1fa:	2102      	movs	r1, #2
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f7fd fc2d 	bl	800ba5c <unlock_fs>
 800e202:	2302      	movs	r3, #2
 800e204:	e0c1      	b.n	800e38a <f_read+0x2d4>
			sect += csect;
 800e206:	69ba      	ldr	r2, [r7, #24]
 800e208:	69fb      	ldr	r3, [r7, #28]
 800e20a:	4413      	add	r3, r2
 800e20c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	0a5b      	lsrs	r3, r3, #9
 800e212:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e216:	2b00      	cmp	r3, #0
 800e218:	d03e      	beq.n	800e298 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e21a:	69fa      	ldr	r2, [r7, #28]
 800e21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e21e:	4413      	add	r3, r2
 800e220:	697a      	ldr	r2, [r7, #20]
 800e222:	8952      	ldrh	r2, [r2, #10]
 800e224:	4293      	cmp	r3, r2
 800e226:	d905      	bls.n	800e234 <f_read+0x17e>
					cc = fs->csize - csect;
 800e228:	697b      	ldr	r3, [r7, #20]
 800e22a:	895b      	ldrh	r3, [r3, #10]
 800e22c:	461a      	mov	r2, r3
 800e22e:	69fb      	ldr	r3, [r7, #28]
 800e230:	1ad3      	subs	r3, r2, r3
 800e232:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	7858      	ldrb	r0, [r3, #1]
 800e238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e23a:	69ba      	ldr	r2, [r7, #24]
 800e23c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e23e:	f7fd fa99 	bl	800b774 <disk_read>
 800e242:	4603      	mov	r3, r0
 800e244:	2b00      	cmp	r3, #0
 800e246:	d009      	beq.n	800e25c <f_read+0x1a6>
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	2201      	movs	r2, #1
 800e24c:	755a      	strb	r2, [r3, #21]
 800e24e:	697b      	ldr	r3, [r7, #20]
 800e250:	2101      	movs	r1, #1
 800e252:	4618      	mov	r0, r3
 800e254:	f7fd fc02 	bl	800ba5c <unlock_fs>
 800e258:	2301      	movs	r3, #1
 800e25a:	e096      	b.n	800e38a <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	7d1b      	ldrb	r3, [r3, #20]
 800e260:	b25b      	sxtb	r3, r3
 800e262:	2b00      	cmp	r3, #0
 800e264:	da14      	bge.n	800e290 <f_read+0x1da>
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	6a1a      	ldr	r2, [r3, #32]
 800e26a:	69bb      	ldr	r3, [r7, #24]
 800e26c:	1ad3      	subs	r3, r2, r3
 800e26e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e270:	429a      	cmp	r2, r3
 800e272:	d90d      	bls.n	800e290 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	6a1a      	ldr	r2, [r3, #32]
 800e278:	69bb      	ldr	r3, [r7, #24]
 800e27a:	1ad3      	subs	r3, r2, r3
 800e27c:	025b      	lsls	r3, r3, #9
 800e27e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e280:	18d0      	adds	r0, r2, r3
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	3330      	adds	r3, #48	; 0x30
 800e286:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e28a:	4619      	mov	r1, r3
 800e28c:	f7fd fb52 	bl	800b934 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e292:	025b      	lsls	r3, r3, #9
 800e294:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800e296:	e05a      	b.n	800e34e <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	6a1b      	ldr	r3, [r3, #32]
 800e29c:	69ba      	ldr	r2, [r7, #24]
 800e29e:	429a      	cmp	r2, r3
 800e2a0:	d038      	beq.n	800e314 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	7d1b      	ldrb	r3, [r3, #20]
 800e2a6:	b25b      	sxtb	r3, r3
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	da1d      	bge.n	800e2e8 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e2ac:	697b      	ldr	r3, [r7, #20]
 800e2ae:	7858      	ldrb	r0, [r3, #1]
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	6a1a      	ldr	r2, [r3, #32]
 800e2ba:	2301      	movs	r3, #1
 800e2bc:	f7fd fa7a 	bl	800b7b4 <disk_write>
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d009      	beq.n	800e2da <f_read+0x224>
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	2201      	movs	r2, #1
 800e2ca:	755a      	strb	r2, [r3, #21]
 800e2cc:	697b      	ldr	r3, [r7, #20]
 800e2ce:	2101      	movs	r1, #1
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	f7fd fbc3 	bl	800ba5c <unlock_fs>
 800e2d6:	2301      	movs	r3, #1
 800e2d8:	e057      	b.n	800e38a <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	7d1b      	ldrb	r3, [r3, #20]
 800e2de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e2e2:	b2da      	uxtb	r2, r3
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e2e8:	697b      	ldr	r3, [r7, #20]
 800e2ea:	7858      	ldrb	r0, [r3, #1]
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e2f2:	2301      	movs	r3, #1
 800e2f4:	69ba      	ldr	r2, [r7, #24]
 800e2f6:	f7fd fa3d 	bl	800b774 <disk_read>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d009      	beq.n	800e314 <f_read+0x25e>
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	2201      	movs	r2, #1
 800e304:	755a      	strb	r2, [r3, #21]
 800e306:	697b      	ldr	r3, [r7, #20]
 800e308:	2101      	movs	r1, #1
 800e30a:	4618      	mov	r0, r3
 800e30c:	f7fd fba6 	bl	800ba5c <unlock_fs>
 800e310:	2301      	movs	r3, #1
 800e312:	e03a      	b.n	800e38a <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	69ba      	ldr	r2, [r7, #24]
 800e318:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	699b      	ldr	r3, [r3, #24]
 800e31e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e322:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e326:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e328:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	429a      	cmp	r2, r3
 800e32e:	d901      	bls.n	800e334 <f_read+0x27e>
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	699b      	ldr	r3, [r3, #24]
 800e33e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e342:	4413      	add	r3, r2
 800e344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e346:	4619      	mov	r1, r3
 800e348:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e34a:	f7fd faf3 	bl	800b934 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e34e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e352:	4413      	add	r3, r2
 800e354:	627b      	str	r3, [r7, #36]	; 0x24
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	699a      	ldr	r2, [r3, #24]
 800e35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e35c:	441a      	add	r2, r3
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	619a      	str	r2, [r3, #24]
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	681a      	ldr	r2, [r3, #0]
 800e366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e368:	441a      	add	r2, r3
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	601a      	str	r2, [r3, #0]
 800e36e:	687a      	ldr	r2, [r7, #4]
 800e370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e372:	1ad3      	subs	r3, r2, r3
 800e374:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	f47f aee3 	bne.w	800e144 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e37e:	697b      	ldr	r3, [r7, #20]
 800e380:	2100      	movs	r1, #0
 800e382:	4618      	mov	r0, r3
 800e384:	f7fd fb6a 	bl	800ba5c <unlock_fs>
 800e388:	2300      	movs	r3, #0
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3738      	adds	r7, #56	; 0x38
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}

0800e392 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e392:	b580      	push	{r7, lr}
 800e394:	b086      	sub	sp, #24
 800e396:	af00      	add	r7, sp, #0
 800e398:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	f107 0208 	add.w	r2, r7, #8
 800e3a0:	4611      	mov	r1, r2
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f7ff fb1c 	bl	800d9e0 <validate>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e3ac:	7dfb      	ldrb	r3, [r7, #23]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d16d      	bne.n	800e48e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	7d1b      	ldrb	r3, [r3, #20]
 800e3b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d067      	beq.n	800e48e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	7d1b      	ldrb	r3, [r3, #20]
 800e3c2:	b25b      	sxtb	r3, r3
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	da1a      	bge.n	800e3fe <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e3c8:	68bb      	ldr	r3, [r7, #8]
 800e3ca:	7858      	ldrb	r0, [r3, #1]
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	6a1a      	ldr	r2, [r3, #32]
 800e3d6:	2301      	movs	r3, #1
 800e3d8:	f7fd f9ec 	bl	800b7b4 <disk_write>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d006      	beq.n	800e3f0 <f_sync+0x5e>
 800e3e2:	68bb      	ldr	r3, [r7, #8]
 800e3e4:	2101      	movs	r1, #1
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f7fd fb38 	bl	800ba5c <unlock_fs>
 800e3ec:	2301      	movs	r3, #1
 800e3ee:	e055      	b.n	800e49c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	7d1b      	ldrb	r3, [r3, #20]
 800e3f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e3f8:	b2da      	uxtb	r2, r3
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e3fe:	f7fc f9bb 	bl	800a778 <get_fattime>
 800e402:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e404:	68ba      	ldr	r2, [r7, #8]
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e40a:	4619      	mov	r1, r3
 800e40c:	4610      	mov	r0, r2
 800e40e:	f7fd fcf1 	bl	800bdf4 <move_window>
 800e412:	4603      	mov	r3, r0
 800e414:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e416:	7dfb      	ldrb	r3, [r7, #23]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d138      	bne.n	800e48e <f_sync+0xfc>
					dir = fp->dir_ptr;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e420:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	330b      	adds	r3, #11
 800e426:	781a      	ldrb	r2, [r3, #0]
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	330b      	adds	r3, #11
 800e42c:	f042 0220 	orr.w	r2, r2, #32
 800e430:	b2d2      	uxtb	r2, r2
 800e432:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	6818      	ldr	r0, [r3, #0]
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	689b      	ldr	r3, [r3, #8]
 800e43c:	461a      	mov	r2, r3
 800e43e:	68f9      	ldr	r1, [r7, #12]
 800e440:	f7fe f9fe 	bl	800c840 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	f103 021c 	add.w	r2, r3, #28
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	68db      	ldr	r3, [r3, #12]
 800e44e:	4619      	mov	r1, r3
 800e450:	4610      	mov	r0, r2
 800e452:	f7fd fa43 	bl	800b8dc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	3316      	adds	r3, #22
 800e45a:	6939      	ldr	r1, [r7, #16]
 800e45c:	4618      	mov	r0, r3
 800e45e:	f7fd fa3d 	bl	800b8dc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	3312      	adds	r3, #18
 800e466:	2100      	movs	r1, #0
 800e468:	4618      	mov	r0, r3
 800e46a:	f7fd fa1c 	bl	800b8a6 <st_word>
					fs->wflag = 1;
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	2201      	movs	r2, #1
 800e472:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e474:	68bb      	ldr	r3, [r7, #8]
 800e476:	4618      	mov	r0, r3
 800e478:	f7fd fcea 	bl	800be50 <sync_fs>
 800e47c:	4603      	mov	r3, r0
 800e47e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	7d1b      	ldrb	r3, [r3, #20]
 800e484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e488:	b2da      	uxtb	r2, r3
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e48e:	68bb      	ldr	r3, [r7, #8]
 800e490:	7dfa      	ldrb	r2, [r7, #23]
 800e492:	4611      	mov	r1, r2
 800e494:	4618      	mov	r0, r3
 800e496:	f7fd fae1 	bl	800ba5c <unlock_fs>
 800e49a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e49c:	4618      	mov	r0, r3
 800e49e:	3718      	adds	r7, #24
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bd80      	pop	{r7, pc}

0800e4a4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b084      	sub	sp, #16
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	f7ff ff70 	bl	800e392 <f_sync>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e4b6:	7bfb      	ldrb	r3, [r7, #15]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d11d      	bne.n	800e4f8 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f107 0208 	add.w	r2, r7, #8
 800e4c2:	4611      	mov	r1, r2
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f7ff fa8b 	bl	800d9e0 <validate>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e4ce:	7bfb      	ldrb	r3, [r7, #15]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d111      	bne.n	800e4f8 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	691b      	ldr	r3, [r3, #16]
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f7fd fbe7 	bl	800bcac <dec_lock>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e4e2:	7bfb      	ldrb	r3, [r7, #15]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d102      	bne.n	800e4ee <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	2100      	movs	r1, #0
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	f7fd fab2 	bl	800ba5c <unlock_fs>
#endif
		}
	}
	return res;
 800e4f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	3710      	adds	r7, #16
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bd80      	pop	{r7, pc}
	...

0800e504 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800e504:	b590      	push	{r4, r7, lr}
 800e506:	b09d      	sub	sp, #116	; 0x74
 800e508:	af00      	add	r7, sp, #0
 800e50a:	60f8      	str	r0, [r7, #12]
 800e50c:	607a      	str	r2, [r7, #4]
 800e50e:	603b      	str	r3, [r7, #0]
 800e510:	460b      	mov	r3, r1
 800e512:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800e514:	2301      	movs	r3, #1
 800e516:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800e518:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e51c:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800e51e:	f107 030c 	add.w	r3, r7, #12
 800e522:	4618      	mov	r0, r3
 800e524:	f7fe ff6d 	bl	800d402 <get_ldnumber>
 800e528:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e52a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	da02      	bge.n	800e536 <f_mkfs+0x32>
 800e530:	230b      	movs	r3, #11
 800e532:	f000 bc0d 	b.w	800ed50 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800e536:	4a94      	ldr	r2, [pc, #592]	; (800e788 <f_mkfs+0x284>)
 800e538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e53a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d005      	beq.n	800e54e <f_mkfs+0x4a>
 800e542:	4a91      	ldr	r2, [pc, #580]	; (800e788 <f_mkfs+0x284>)
 800e544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e54a:	2200      	movs	r2, #0
 800e54c:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800e54e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e550:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800e554:	2300      	movs	r3, #0
 800e556:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800e55a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e55e:	4618      	mov	r0, r3
 800e560:	f7fd f8e2 	bl	800b728 <disk_initialize>
 800e564:	4603      	mov	r3, r0
 800e566:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800e56a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800e56e:	f003 0301 	and.w	r3, r3, #1
 800e572:	2b00      	cmp	r3, #0
 800e574:	d001      	beq.n	800e57a <f_mkfs+0x76>
 800e576:	2303      	movs	r3, #3
 800e578:	e3ea      	b.n	800ed50 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800e57a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800e57e:	f003 0304 	and.w	r3, r3, #4
 800e582:	2b00      	cmp	r3, #0
 800e584:	d001      	beq.n	800e58a <f_mkfs+0x86>
 800e586:	230a      	movs	r3, #10
 800e588:	e3e2      	b.n	800ed50 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800e58a:	f107 0214 	add.w	r2, r7, #20
 800e58e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e592:	2103      	movs	r1, #3
 800e594:	4618      	mov	r0, r3
 800e596:	f7fd f92d 	bl	800b7f4 <disk_ioctl>
 800e59a:	4603      	mov	r3, r0
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d10c      	bne.n	800e5ba <f_mkfs+0xb6>
 800e5a0:	697b      	ldr	r3, [r7, #20]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d009      	beq.n	800e5ba <f_mkfs+0xb6>
 800e5a6:	697b      	ldr	r3, [r7, #20]
 800e5a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e5ac:	d805      	bhi.n	800e5ba <f_mkfs+0xb6>
 800e5ae:	697b      	ldr	r3, [r7, #20]
 800e5b0:	1e5a      	subs	r2, r3, #1
 800e5b2:	697b      	ldr	r3, [r7, #20]
 800e5b4:	4013      	ands	r3, r2
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d001      	beq.n	800e5be <f_mkfs+0xba>
 800e5ba:	2301      	movs	r3, #1
 800e5bc:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800e5be:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e5c2:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d003      	beq.n	800e5d2 <f_mkfs+0xce>
 800e5ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e5cc:	687a      	ldr	r2, [r7, #4]
 800e5ce:	429a      	cmp	r2, r3
 800e5d0:	d309      	bcc.n	800e5e6 <f_mkfs+0xe2>
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e5d8:	d805      	bhi.n	800e5e6 <f_mkfs+0xe2>
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	1e5a      	subs	r2, r3, #1
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	4013      	ands	r3, r2
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d001      	beq.n	800e5ea <f_mkfs+0xe6>
 800e5e6:	2313      	movs	r3, #19
 800e5e8:	e3b2      	b.n	800ed50 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800e5ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e5ec:	687a      	ldr	r2, [r7, #4]
 800e5ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5f2:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800e5f4:	683b      	ldr	r3, [r7, #0]
 800e5f6:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800e5f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e5fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e5fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800e602:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800e604:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e608:	fb02 f303 	mul.w	r3, r2, r3
 800e60c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800e60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e610:	2b00      	cmp	r3, #0
 800e612:	d101      	bne.n	800e618 <f_mkfs+0x114>
 800e614:	230e      	movs	r3, #14
 800e616:	e39b      	b.n	800ed50 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800e618:	f107 0210 	add.w	r2, r7, #16
 800e61c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e620:	2101      	movs	r1, #1
 800e622:	4618      	mov	r0, r3
 800e624:	f7fd f8e6 	bl	800b7f4 <disk_ioctl>
 800e628:	4603      	mov	r3, r0
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d001      	beq.n	800e632 <f_mkfs+0x12e>
 800e62e:	2301      	movs	r3, #1
 800e630:	e38e      	b.n	800ed50 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800e632:	7afb      	ldrb	r3, [r7, #11]
 800e634:	f003 0308 	and.w	r3, r3, #8
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d001      	beq.n	800e640 <f_mkfs+0x13c>
 800e63c:	2300      	movs	r3, #0
 800e63e:	e000      	b.n	800e642 <f_mkfs+0x13e>
 800e640:	233f      	movs	r3, #63	; 0x3f
 800e642:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800e644:	693b      	ldr	r3, [r7, #16]
 800e646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e648:	429a      	cmp	r2, r3
 800e64a:	d901      	bls.n	800e650 <f_mkfs+0x14c>
 800e64c:	230e      	movs	r3, #14
 800e64e:	e37f      	b.n	800ed50 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800e650:	693a      	ldr	r2, [r7, #16]
 800e652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e654:	1ad3      	subs	r3, r2, r3
 800e656:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800e658:	693b      	ldr	r3, [r7, #16]
 800e65a:	2b7f      	cmp	r3, #127	; 0x7f
 800e65c:	d801      	bhi.n	800e662 <f_mkfs+0x15e>
 800e65e:	230e      	movs	r3, #14
 800e660:	e376      	b.n	800ed50 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	2b80      	cmp	r3, #128	; 0x80
 800e666:	d901      	bls.n	800e66c <f_mkfs+0x168>
 800e668:	2313      	movs	r3, #19
 800e66a:	e371      	b.n	800ed50 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800e66c:	7afb      	ldrb	r3, [r7, #11]
 800e66e:	f003 0302 	and.w	r3, r3, #2
 800e672:	2b00      	cmp	r3, #0
 800e674:	d00d      	beq.n	800e692 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800e676:	7afb      	ldrb	r3, [r7, #11]
 800e678:	f003 0307 	and.w	r3, r3, #7
 800e67c:	2b02      	cmp	r3, #2
 800e67e:	d004      	beq.n	800e68a <f_mkfs+0x186>
 800e680:	7afb      	ldrb	r3, [r7, #11]
 800e682:	f003 0301 	and.w	r3, r3, #1
 800e686:	2b00      	cmp	r3, #0
 800e688:	d103      	bne.n	800e692 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800e68a:	2303      	movs	r3, #3
 800e68c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800e690:	e009      	b.n	800e6a6 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800e692:	7afb      	ldrb	r3, [r7, #11]
 800e694:	f003 0301 	and.w	r3, r3, #1
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d101      	bne.n	800e6a0 <f_mkfs+0x19c>
 800e69c:	2313      	movs	r3, #19
 800e69e:	e357      	b.n	800ed50 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800e6a0:	2302      	movs	r3, #2
 800e6a2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800e6aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e6ae:	2b03      	cmp	r3, #3
 800e6b0:	d13c      	bne.n	800e72c <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800e6b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d11b      	bne.n	800e6f0 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800e6b8:	693b      	ldr	r3, [r7, #16]
 800e6ba:	0c5b      	lsrs	r3, r3, #17
 800e6bc:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800e6be:	2300      	movs	r3, #0
 800e6c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800e6c2:	2301      	movs	r3, #1
 800e6c4:	653b      	str	r3, [r7, #80]	; 0x50
 800e6c6:	e005      	b.n	800e6d4 <f_mkfs+0x1d0>
 800e6c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6ca:	3301      	adds	r3, #1
 800e6cc:	64bb      	str	r3, [r7, #72]	; 0x48
 800e6ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6d0:	005b      	lsls	r3, r3, #1
 800e6d2:	653b      	str	r3, [r7, #80]	; 0x50
 800e6d4:	4a2d      	ldr	r2, [pc, #180]	; (800e78c <f_mkfs+0x288>)
 800e6d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d007      	beq.n	800e6f0 <f_mkfs+0x1ec>
 800e6e0:	4a2a      	ldr	r2, [pc, #168]	; (800e78c <f_mkfs+0x288>)
 800e6e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e6e8:	461a      	mov	r2, r3
 800e6ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e6ec:	4293      	cmp	r3, r2
 800e6ee:	d2eb      	bcs.n	800e6c8 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800e6f0:	693a      	ldr	r2, [r7, #16]
 800e6f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6f8:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800e6fa:	6a3b      	ldr	r3, [r7, #32]
 800e6fc:	3302      	adds	r3, #2
 800e6fe:	009a      	lsls	r2, r3, #2
 800e700:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e702:	4413      	add	r3, r2
 800e704:	1e5a      	subs	r2, r3, #1
 800e706:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e708:	fbb2 f3f3 	udiv	r3, r2, r3
 800e70c:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800e70e:	2320      	movs	r3, #32
 800e710:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800e712:	2300      	movs	r3, #0
 800e714:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800e716:	6a3b      	ldr	r3, [r7, #32]
 800e718:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e71c:	4293      	cmp	r3, r2
 800e71e:	d903      	bls.n	800e728 <f_mkfs+0x224>
 800e720:	6a3b      	ldr	r3, [r7, #32]
 800e722:	4a1b      	ldr	r2, [pc, #108]	; (800e790 <f_mkfs+0x28c>)
 800e724:	4293      	cmp	r3, r2
 800e726:	d952      	bls.n	800e7ce <f_mkfs+0x2ca>
 800e728:	230e      	movs	r3, #14
 800e72a:	e311      	b.n	800ed50 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800e72c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d11b      	bne.n	800e76a <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800e732:	693b      	ldr	r3, [r7, #16]
 800e734:	0b1b      	lsrs	r3, r3, #12
 800e736:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800e738:	2300      	movs	r3, #0
 800e73a:	64bb      	str	r3, [r7, #72]	; 0x48
 800e73c:	2301      	movs	r3, #1
 800e73e:	653b      	str	r3, [r7, #80]	; 0x50
 800e740:	e005      	b.n	800e74e <f_mkfs+0x24a>
 800e742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e744:	3301      	adds	r3, #1
 800e746:	64bb      	str	r3, [r7, #72]	; 0x48
 800e748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e74a:	005b      	lsls	r3, r3, #1
 800e74c:	653b      	str	r3, [r7, #80]	; 0x50
 800e74e:	4a11      	ldr	r2, [pc, #68]	; (800e794 <f_mkfs+0x290>)
 800e750:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e752:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d007      	beq.n	800e76a <f_mkfs+0x266>
 800e75a:	4a0e      	ldr	r2, [pc, #56]	; (800e794 <f_mkfs+0x290>)
 800e75c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e75e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e762:	461a      	mov	r2, r3
 800e764:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e766:	4293      	cmp	r3, r2
 800e768:	d2eb      	bcs.n	800e742 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800e76a:	693a      	ldr	r2, [r7, #16]
 800e76c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e76e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e772:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800e774:	6a3b      	ldr	r3, [r7, #32]
 800e776:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e77a:	4293      	cmp	r3, r2
 800e77c:	d90c      	bls.n	800e798 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800e77e:	6a3b      	ldr	r3, [r7, #32]
 800e780:	3302      	adds	r3, #2
 800e782:	005b      	lsls	r3, r3, #1
 800e784:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e786:	e012      	b.n	800e7ae <f_mkfs+0x2aa>
 800e788:	200041a4 	.word	0x200041a4
 800e78c:	08046c00 	.word	0x08046c00
 800e790:	0ffffff5 	.word	0x0ffffff5
 800e794:	08046c10 	.word	0x08046c10
				} else {
					fmt = FS_FAT12;
 800e798:	2301      	movs	r3, #1
 800e79a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800e79e:	6a3a      	ldr	r2, [r7, #32]
 800e7a0:	4613      	mov	r3, r2
 800e7a2:	005b      	lsls	r3, r3, #1
 800e7a4:	4413      	add	r3, r2
 800e7a6:	3301      	adds	r3, #1
 800e7a8:	085b      	lsrs	r3, r3, #1
 800e7aa:	3303      	adds	r3, #3
 800e7ac:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800e7ae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e7b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e7b2:	4413      	add	r3, r2
 800e7b4:	1e5a      	subs	r2, r3, #1
 800e7b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e7b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e7bc:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800e7be:	2301      	movs	r3, #1
 800e7c0:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800e7c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7c4:	015a      	lsls	r2, r3, #5
 800e7c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e7c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e7cc:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800e7ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e7d2:	4413      	add	r3, r2
 800e7d4:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800e7d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e7d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e7da:	fb03 f202 	mul.w	r2, r3, r2
 800e7de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e7e0:	4413      	add	r3, r2
 800e7e2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e7e4:	4413      	add	r3, r2
 800e7e6:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800e7e8:	697a      	ldr	r2, [r7, #20]
 800e7ea:	69fb      	ldr	r3, [r7, #28]
 800e7ec:	4413      	add	r3, r2
 800e7ee:	1e5a      	subs	r2, r3, #1
 800e7f0:	697b      	ldr	r3, [r7, #20]
 800e7f2:	425b      	negs	r3, r3
 800e7f4:	401a      	ands	r2, r3
 800e7f6:	69fb      	ldr	r3, [r7, #28]
 800e7f8:	1ad3      	subs	r3, r2, r3
 800e7fa:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800e7fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e800:	2b03      	cmp	r3, #3
 800e802:	d108      	bne.n	800e816 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800e804:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e806:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e808:	4413      	add	r3, r2
 800e80a:	657b      	str	r3, [r7, #84]	; 0x54
 800e80c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e80e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e810:	4413      	add	r3, r2
 800e812:	65bb      	str	r3, [r7, #88]	; 0x58
 800e814:	e006      	b.n	800e824 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800e816:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e81a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e81e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e820:	4413      	add	r3, r2
 800e822:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800e824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e826:	011a      	lsls	r2, r3, #4
 800e828:	69fb      	ldr	r3, [r7, #28]
 800e82a:	441a      	add	r2, r3
 800e82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e82e:	1ad2      	subs	r2, r2, r3
 800e830:	693b      	ldr	r3, [r7, #16]
 800e832:	429a      	cmp	r2, r3
 800e834:	d901      	bls.n	800e83a <f_mkfs+0x336>
 800e836:	230e      	movs	r3, #14
 800e838:	e28a      	b.n	800ed50 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800e83a:	693a      	ldr	r2, [r7, #16]
 800e83c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e83e:	1ad2      	subs	r2, r2, r3
 800e840:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e842:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e844:	fb01 f303 	mul.w	r3, r1, r3
 800e848:	1ad2      	subs	r2, r2, r3
 800e84a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e84c:	1ad2      	subs	r2, r2, r3
 800e84e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e850:	fbb2 f3f3 	udiv	r3, r2, r3
 800e854:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800e856:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e85a:	2b03      	cmp	r3, #3
 800e85c:	d10f      	bne.n	800e87e <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800e85e:	6a3b      	ldr	r3, [r7, #32]
 800e860:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e864:	4293      	cmp	r3, r2
 800e866:	d80a      	bhi.n	800e87e <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d105      	bne.n	800e87a <f_mkfs+0x376>
 800e86e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e870:	085b      	lsrs	r3, r3, #1
 800e872:	607b      	str	r3, [r7, #4]
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d144      	bne.n	800e904 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800e87a:	230e      	movs	r3, #14
 800e87c:	e268      	b.n	800ed50 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800e87e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e882:	2b02      	cmp	r3, #2
 800e884:	d133      	bne.n	800e8ee <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800e886:	6a3b      	ldr	r3, [r7, #32]
 800e888:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e88c:	4293      	cmp	r3, r2
 800e88e:	d91e      	bls.n	800e8ce <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d107      	bne.n	800e8a6 <f_mkfs+0x3a2>
 800e896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e898:	005b      	lsls	r3, r3, #1
 800e89a:	2b40      	cmp	r3, #64	; 0x40
 800e89c:	d803      	bhi.n	800e8a6 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800e89e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8a0:	005b      	lsls	r3, r3, #1
 800e8a2:	607b      	str	r3, [r7, #4]
 800e8a4:	e033      	b.n	800e90e <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800e8a6:	7afb      	ldrb	r3, [r7, #11]
 800e8a8:	f003 0302 	and.w	r3, r3, #2
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d003      	beq.n	800e8b8 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800e8b0:	2303      	movs	r3, #3
 800e8b2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800e8b6:	e02a      	b.n	800e90e <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d105      	bne.n	800e8ca <f_mkfs+0x3c6>
 800e8be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8c0:	005b      	lsls	r3, r3, #1
 800e8c2:	607b      	str	r3, [r7, #4]
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	2b80      	cmp	r3, #128	; 0x80
 800e8c8:	d91e      	bls.n	800e908 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800e8ca:	230e      	movs	r3, #14
 800e8cc:	e240      	b.n	800ed50 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800e8ce:	6a3b      	ldr	r3, [r7, #32]
 800e8d0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e8d4:	4293      	cmp	r3, r2
 800e8d6:	d80a      	bhi.n	800e8ee <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d105      	bne.n	800e8ea <f_mkfs+0x3e6>
 800e8de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8e0:	005b      	lsls	r3, r3, #1
 800e8e2:	607b      	str	r3, [r7, #4]
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2b80      	cmp	r3, #128	; 0x80
 800e8e8:	d910      	bls.n	800e90c <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800e8ea:	230e      	movs	r3, #14
 800e8ec:	e230      	b.n	800ed50 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800e8ee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e8f2:	2b01      	cmp	r3, #1
 800e8f4:	d10c      	bne.n	800e910 <f_mkfs+0x40c>
 800e8f6:	6a3b      	ldr	r3, [r7, #32]
 800e8f8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e8fc:	4293      	cmp	r3, r2
 800e8fe:	d907      	bls.n	800e910 <f_mkfs+0x40c>
 800e900:	230e      	movs	r3, #14
 800e902:	e225      	b.n	800ed50 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800e904:	bf00      	nop
 800e906:	e6ce      	b.n	800e6a6 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e908:	bf00      	nop
 800e90a:	e6cc      	b.n	800e6a6 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e90c:	bf00      	nop
			pau = au;
 800e90e:	e6ca      	b.n	800e6a6 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800e910:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800e912:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e914:	461a      	mov	r2, r3
 800e916:	2100      	movs	r1, #0
 800e918:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e91a:	f7fd f82c 	bl	800b976 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800e91e:	220b      	movs	r2, #11
 800e920:	49b2      	ldr	r1, [pc, #712]	; (800ebec <f_mkfs+0x6e8>)
 800e922:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e924:	f7fd f806 	bl	800b934 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800e928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e92a:	330b      	adds	r3, #11
 800e92c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e92e:	4611      	mov	r1, r2
 800e930:	4618      	mov	r0, r3
 800e932:	f7fc ffb8 	bl	800b8a6 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800e936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e938:	330d      	adds	r3, #13
 800e93a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e93c:	b2d2      	uxtb	r2, r2
 800e93e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800e940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e942:	330e      	adds	r3, #14
 800e944:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e946:	b292      	uxth	r2, r2
 800e948:	4611      	mov	r1, r2
 800e94a:	4618      	mov	r0, r3
 800e94c:	f7fc ffab 	bl	800b8a6 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800e950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e952:	3310      	adds	r3, #16
 800e954:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e956:	b2d2      	uxtb	r2, r2
 800e958:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800e95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e95c:	f103 0211 	add.w	r2, r3, #17
 800e960:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e964:	2b03      	cmp	r3, #3
 800e966:	d002      	beq.n	800e96e <f_mkfs+0x46a>
 800e968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e96a:	b29b      	uxth	r3, r3
 800e96c:	e000      	b.n	800e970 <f_mkfs+0x46c>
 800e96e:	2300      	movs	r3, #0
 800e970:	4619      	mov	r1, r3
 800e972:	4610      	mov	r0, r2
 800e974:	f7fc ff97 	bl	800b8a6 <st_word>
		if (sz_vol < 0x10000) {
 800e978:	693b      	ldr	r3, [r7, #16]
 800e97a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e97e:	d208      	bcs.n	800e992 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800e980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e982:	3313      	adds	r3, #19
 800e984:	693a      	ldr	r2, [r7, #16]
 800e986:	b292      	uxth	r2, r2
 800e988:	4611      	mov	r1, r2
 800e98a:	4618      	mov	r0, r3
 800e98c:	f7fc ff8b 	bl	800b8a6 <st_word>
 800e990:	e006      	b.n	800e9a0 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800e992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e994:	3320      	adds	r3, #32
 800e996:	693a      	ldr	r2, [r7, #16]
 800e998:	4611      	mov	r1, r2
 800e99a:	4618      	mov	r0, r3
 800e99c:	f7fc ff9e 	bl	800b8dc <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800e9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9a2:	3315      	adds	r3, #21
 800e9a4:	22f8      	movs	r2, #248	; 0xf8
 800e9a6:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800e9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9aa:	3318      	adds	r3, #24
 800e9ac:	213f      	movs	r1, #63	; 0x3f
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	f7fc ff79 	bl	800b8a6 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800e9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9b6:	331a      	adds	r3, #26
 800e9b8:	21ff      	movs	r1, #255	; 0xff
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	f7fc ff73 	bl	800b8a6 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800e9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9c2:	331c      	adds	r3, #28
 800e9c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	f7fc ff88 	bl	800b8dc <st_dword>
		if (fmt == FS_FAT32) {
 800e9cc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e9d0:	2b03      	cmp	r3, #3
 800e9d2:	d131      	bne.n	800ea38 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800e9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9d6:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800e9da:	f7fb fecd 	bl	800a778 <get_fattime>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	4619      	mov	r1, r3
 800e9e2:	4620      	mov	r0, r4
 800e9e4:	f7fc ff7a 	bl	800b8dc <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800e9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ea:	3324      	adds	r3, #36	; 0x24
 800e9ec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f7fc ff74 	bl	800b8dc <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800e9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f6:	332c      	adds	r3, #44	; 0x2c
 800e9f8:	2102      	movs	r1, #2
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f7fc ff6e 	bl	800b8dc <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800ea00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea02:	3330      	adds	r3, #48	; 0x30
 800ea04:	2101      	movs	r1, #1
 800ea06:	4618      	mov	r0, r3
 800ea08:	f7fc ff4d 	bl	800b8a6 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800ea0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea0e:	3332      	adds	r3, #50	; 0x32
 800ea10:	2106      	movs	r1, #6
 800ea12:	4618      	mov	r0, r3
 800ea14:	f7fc ff47 	bl	800b8a6 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800ea18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea1a:	3340      	adds	r3, #64	; 0x40
 800ea1c:	2280      	movs	r2, #128	; 0x80
 800ea1e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800ea20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea22:	3342      	adds	r3, #66	; 0x42
 800ea24:	2229      	movs	r2, #41	; 0x29
 800ea26:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800ea28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea2a:	3347      	adds	r3, #71	; 0x47
 800ea2c:	2213      	movs	r2, #19
 800ea2e:	4970      	ldr	r1, [pc, #448]	; (800ebf0 <f_mkfs+0x6ec>)
 800ea30:	4618      	mov	r0, r3
 800ea32:	f7fc ff7f 	bl	800b934 <mem_cpy>
 800ea36:	e020      	b.n	800ea7a <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800ea38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea3a:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800ea3e:	f7fb fe9b 	bl	800a778 <get_fattime>
 800ea42:	4603      	mov	r3, r0
 800ea44:	4619      	mov	r1, r3
 800ea46:	4620      	mov	r0, r4
 800ea48:	f7fc ff48 	bl	800b8dc <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800ea4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea4e:	3316      	adds	r3, #22
 800ea50:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ea52:	b292      	uxth	r2, r2
 800ea54:	4611      	mov	r1, r2
 800ea56:	4618      	mov	r0, r3
 800ea58:	f7fc ff25 	bl	800b8a6 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800ea5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea5e:	3324      	adds	r3, #36	; 0x24
 800ea60:	2280      	movs	r2, #128	; 0x80
 800ea62:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800ea64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea66:	3326      	adds	r3, #38	; 0x26
 800ea68:	2229      	movs	r2, #41	; 0x29
 800ea6a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800ea6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea6e:	332b      	adds	r3, #43	; 0x2b
 800ea70:	2213      	movs	r2, #19
 800ea72:	4960      	ldr	r1, [pc, #384]	; (800ebf4 <f_mkfs+0x6f0>)
 800ea74:	4618      	mov	r0, r3
 800ea76:	f7fc ff5d 	bl	800b934 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800ea7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea7c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ea80:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ea84:	4618      	mov	r0, r3
 800ea86:	f7fc ff0e 	bl	800b8a6 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800ea8a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800ea8e:	2301      	movs	r3, #1
 800ea90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ea94:	f7fc fe8e 	bl	800b7b4 <disk_write>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d001      	beq.n	800eaa2 <f_mkfs+0x59e>
 800ea9e:	2301      	movs	r3, #1
 800eaa0:	e156      	b.n	800ed50 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800eaa2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800eaa6:	2b03      	cmp	r3, #3
 800eaa8:	d140      	bne.n	800eb2c <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800eaaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaac:	1d9a      	adds	r2, r3, #6
 800eaae:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800eab2:	2301      	movs	r3, #1
 800eab4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eab6:	f7fc fe7d 	bl	800b7b4 <disk_write>
			mem_set(buf, 0, ss);
 800eaba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800eabc:	461a      	mov	r2, r3
 800eabe:	2100      	movs	r1, #0
 800eac0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eac2:	f7fc ff58 	bl	800b976 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800eac6:	494c      	ldr	r1, [pc, #304]	; (800ebf8 <f_mkfs+0x6f4>)
 800eac8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eaca:	f7fc ff07 	bl	800b8dc <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800eace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ead0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ead4:	4949      	ldr	r1, [pc, #292]	; (800ebfc <f_mkfs+0x6f8>)
 800ead6:	4618      	mov	r0, r3
 800ead8:	f7fc ff00 	bl	800b8dc <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800eadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eade:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800eae2:	6a3b      	ldr	r3, [r7, #32]
 800eae4:	3b01      	subs	r3, #1
 800eae6:	4619      	mov	r1, r3
 800eae8:	4610      	mov	r0, r2
 800eaea:	f7fc fef7 	bl	800b8dc <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800eaee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaf0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800eaf4:	2102      	movs	r1, #2
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	f7fc fef0 	bl	800b8dc <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800eafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eafe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800eb02:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800eb06:	4618      	mov	r0, r3
 800eb08:	f7fc fecd 	bl	800b8a6 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800eb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb0e:	1dda      	adds	r2, r3, #7
 800eb10:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800eb14:	2301      	movs	r3, #1
 800eb16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eb18:	f7fc fe4c 	bl	800b7b4 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800eb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb1e:	1c5a      	adds	r2, r3, #1
 800eb20:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800eb24:	2301      	movs	r3, #1
 800eb26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eb28:	f7fc fe44 	bl	800b7b4 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800eb2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb2e:	2100      	movs	r1, #0
 800eb30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb32:	f7fc ff20 	bl	800b976 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800eb36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eb38:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	64bb      	str	r3, [r7, #72]	; 0x48
 800eb3e:	e04b      	b.n	800ebd8 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800eb40:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800eb44:	2b03      	cmp	r3, #3
 800eb46:	d113      	bne.n	800eb70 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800eb48:	f06f 0107 	mvn.w	r1, #7
 800eb4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb4e:	f7fc fec5 	bl	800b8dc <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800eb52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb54:	3304      	adds	r3, #4
 800eb56:	f04f 31ff 	mov.w	r1, #4294967295
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f7fc febe 	bl	800b8dc <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800eb60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb62:	3308      	adds	r3, #8
 800eb64:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800eb68:	4618      	mov	r0, r3
 800eb6a:	f7fc feb7 	bl	800b8dc <st_dword>
 800eb6e:	e00b      	b.n	800eb88 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800eb70:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800eb74:	2b01      	cmp	r3, #1
 800eb76:	d101      	bne.n	800eb7c <f_mkfs+0x678>
 800eb78:	4b21      	ldr	r3, [pc, #132]	; (800ec00 <f_mkfs+0x6fc>)
 800eb7a:	e001      	b.n	800eb80 <f_mkfs+0x67c>
 800eb7c:	f06f 0307 	mvn.w	r3, #7
 800eb80:	4619      	mov	r1, r3
 800eb82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb84:	f7fc feaa 	bl	800b8dc <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800eb88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eb8a:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800eb8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800eb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb90:	4293      	cmp	r3, r2
 800eb92:	bf28      	it	cs
 800eb94:	4613      	movcs	r3, r2
 800eb96:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800eb98:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800eb9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb9e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800eba0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eba2:	f7fc fe07 	bl	800b7b4 <disk_write>
 800eba6:	4603      	mov	r3, r0
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d001      	beq.n	800ebb0 <f_mkfs+0x6ac>
 800ebac:	2301      	movs	r3, #1
 800ebae:	e0cf      	b.n	800ed50 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800ebb0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ebb2:	461a      	mov	r2, r3
 800ebb4:	2100      	movs	r1, #0
 800ebb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ebb8:	f7fc fedd 	bl	800b976 <mem_set>
				sect += n; nsect -= n;
 800ebbc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ebbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ebc0:	4413      	add	r3, r2
 800ebc2:	667b      	str	r3, [r7, #100]	; 0x64
 800ebc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ebc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ebc8:	1ad3      	subs	r3, r2, r3
 800ebca:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800ebcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d1dc      	bne.n	800eb8c <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800ebd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebd4:	3301      	adds	r3, #1
 800ebd6:	64bb      	str	r3, [r7, #72]	; 0x48
 800ebd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ebda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ebdc:	429a      	cmp	r2, r3
 800ebde:	d3af      	bcc.n	800eb40 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800ebe0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ebe4:	2b03      	cmp	r3, #3
 800ebe6:	d10d      	bne.n	800ec04 <f_mkfs+0x700>
 800ebe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebea:	e00c      	b.n	800ec06 <f_mkfs+0x702>
 800ebec:	08026378 	.word	0x08026378
 800ebf0:	08026384 	.word	0x08026384
 800ebf4:	08026398 	.word	0x08026398
 800ebf8:	41615252 	.word	0x41615252
 800ebfc:	61417272 	.word	0x61417272
 800ec00:	00fffff8 	.word	0x00fffff8
 800ec04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec06:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800ec08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ec0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec0c:	4293      	cmp	r3, r2
 800ec0e:	bf28      	it	cs
 800ec10:	4613      	movcs	r3, r2
 800ec12:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800ec14:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800ec18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec1a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ec1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ec1e:	f7fc fdc9 	bl	800b7b4 <disk_write>
 800ec22:	4603      	mov	r3, r0
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d001      	beq.n	800ec2c <f_mkfs+0x728>
 800ec28:	2301      	movs	r3, #1
 800ec2a:	e091      	b.n	800ed50 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800ec2c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ec2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec30:	4413      	add	r3, r2
 800ec32:	667b      	str	r3, [r7, #100]	; 0x64
 800ec34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ec36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec38:	1ad3      	subs	r3, r2, r3
 800ec3a:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800ec3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d1e2      	bne.n	800ec08 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800ec42:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ec46:	2b03      	cmp	r3, #3
 800ec48:	d103      	bne.n	800ec52 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800ec4a:	230c      	movs	r3, #12
 800ec4c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800ec50:	e010      	b.n	800ec74 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800ec52:	693b      	ldr	r3, [r7, #16]
 800ec54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec58:	d303      	bcc.n	800ec62 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800ec5a:	2306      	movs	r3, #6
 800ec5c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800ec60:	e008      	b.n	800ec74 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800ec62:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ec66:	2b02      	cmp	r3, #2
 800ec68:	d101      	bne.n	800ec6e <f_mkfs+0x76a>
 800ec6a:	2304      	movs	r3, #4
 800ec6c:	e000      	b.n	800ec70 <f_mkfs+0x76c>
 800ec6e:	2301      	movs	r3, #1
 800ec70:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800ec74:	7afb      	ldrb	r3, [r7, #11]
 800ec76:	f003 0308 	and.w	r3, r3, #8
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d15b      	bne.n	800ed36 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800ec7e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ec80:	461a      	mov	r2, r3
 800ec82:	2100      	movs	r1, #0
 800ec84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec86:	f7fc fe76 	bl	800b976 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800ec8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec8c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ec90:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ec94:	4618      	mov	r0, r3
 800ec96:	f7fc fe06 	bl	800b8a6 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800ec9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec9c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800eca0:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800eca2:	69bb      	ldr	r3, [r7, #24]
 800eca4:	2200      	movs	r2, #0
 800eca6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800eca8:	69bb      	ldr	r3, [r7, #24]
 800ecaa:	3301      	adds	r3, #1
 800ecac:	2201      	movs	r2, #1
 800ecae:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800ecb0:	69bb      	ldr	r3, [r7, #24]
 800ecb2:	3302      	adds	r3, #2
 800ecb4:	2201      	movs	r2, #1
 800ecb6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800ecb8:	69bb      	ldr	r3, [r7, #24]
 800ecba:	3303      	adds	r3, #3
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800ecc0:	69bb      	ldr	r3, [r7, #24]
 800ecc2:	3304      	adds	r3, #4
 800ecc4:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800ecc8:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800ecca:	693a      	ldr	r2, [r7, #16]
 800eccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecce:	441a      	add	r2, r3
 800ecd0:	4b21      	ldr	r3, [pc, #132]	; (800ed58 <f_mkfs+0x854>)
 800ecd2:	fba3 1302 	umull	r1, r3, r3, r2
 800ecd6:	1ad2      	subs	r2, r2, r3
 800ecd8:	0852      	lsrs	r2, r2, #1
 800ecda:	4413      	add	r3, r2
 800ecdc:	0b5b      	lsrs	r3, r3, #13
 800ecde:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800ece0:	69bb      	ldr	r3, [r7, #24]
 800ece2:	3305      	adds	r3, #5
 800ece4:	22fe      	movs	r2, #254	; 0xfe
 800ece6:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800ece8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ecea:	089b      	lsrs	r3, r3, #2
 800ecec:	b2da      	uxtb	r2, r3
 800ecee:	69bb      	ldr	r3, [r7, #24]
 800ecf0:	3306      	adds	r3, #6
 800ecf2:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800ecf6:	b2d2      	uxtb	r2, r2
 800ecf8:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800ecfa:	69bb      	ldr	r3, [r7, #24]
 800ecfc:	3307      	adds	r3, #7
 800ecfe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ed00:	b2d2      	uxtb	r2, r2
 800ed02:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800ed04:	69bb      	ldr	r3, [r7, #24]
 800ed06:	3308      	adds	r3, #8
 800ed08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	f7fc fde6 	bl	800b8dc <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800ed10:	69bb      	ldr	r3, [r7, #24]
 800ed12:	330c      	adds	r3, #12
 800ed14:	693a      	ldr	r2, [r7, #16]
 800ed16:	4611      	mov	r1, r2
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f7fc fddf 	bl	800b8dc <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800ed1e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800ed22:	2301      	movs	r3, #1
 800ed24:	2200      	movs	r2, #0
 800ed26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ed28:	f7fc fd44 	bl	800b7b4 <disk_write>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d001      	beq.n	800ed36 <f_mkfs+0x832>
 800ed32:	2301      	movs	r3, #1
 800ed34:	e00c      	b.n	800ed50 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800ed36:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	2100      	movs	r1, #0
 800ed3e:	4618      	mov	r0, r3
 800ed40:	f7fc fd58 	bl	800b7f4 <disk_ioctl>
 800ed44:	4603      	mov	r3, r0
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d001      	beq.n	800ed4e <f_mkfs+0x84a>
 800ed4a:	2301      	movs	r3, #1
 800ed4c:	e000      	b.n	800ed50 <f_mkfs+0x84c>

	return FR_OK;
 800ed4e:	2300      	movs	r3, #0
}
 800ed50:	4618      	mov	r0, r3
 800ed52:	3774      	adds	r7, #116	; 0x74
 800ed54:	46bd      	mov	sp, r7
 800ed56:	bd90      	pop	{r4, r7, pc}
 800ed58:	0515565b 	.word	0x0515565b

0800ed5c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ed5c:	b480      	push	{r7}
 800ed5e:	b087      	sub	sp, #28
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	60f8      	str	r0, [r7, #12]
 800ed64:	60b9      	str	r1, [r7, #8]
 800ed66:	4613      	mov	r3, r2
 800ed68:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ed6e:	2300      	movs	r3, #0
 800ed70:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ed72:	4b1f      	ldr	r3, [pc, #124]	; (800edf0 <FATFS_LinkDriverEx+0x94>)
 800ed74:	7a5b      	ldrb	r3, [r3, #9]
 800ed76:	b2db      	uxtb	r3, r3
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d131      	bne.n	800ede0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ed7c:	4b1c      	ldr	r3, [pc, #112]	; (800edf0 <FATFS_LinkDriverEx+0x94>)
 800ed7e:	7a5b      	ldrb	r3, [r3, #9]
 800ed80:	b2db      	uxtb	r3, r3
 800ed82:	461a      	mov	r2, r3
 800ed84:	4b1a      	ldr	r3, [pc, #104]	; (800edf0 <FATFS_LinkDriverEx+0x94>)
 800ed86:	2100      	movs	r1, #0
 800ed88:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ed8a:	4b19      	ldr	r3, [pc, #100]	; (800edf0 <FATFS_LinkDriverEx+0x94>)
 800ed8c:	7a5b      	ldrb	r3, [r3, #9]
 800ed8e:	b2db      	uxtb	r3, r3
 800ed90:	4a17      	ldr	r2, [pc, #92]	; (800edf0 <FATFS_LinkDriverEx+0x94>)
 800ed92:	009b      	lsls	r3, r3, #2
 800ed94:	4413      	add	r3, r2
 800ed96:	68fa      	ldr	r2, [r7, #12]
 800ed98:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ed9a:	4b15      	ldr	r3, [pc, #84]	; (800edf0 <FATFS_LinkDriverEx+0x94>)
 800ed9c:	7a5b      	ldrb	r3, [r3, #9]
 800ed9e:	b2db      	uxtb	r3, r3
 800eda0:	461a      	mov	r2, r3
 800eda2:	4b13      	ldr	r3, [pc, #76]	; (800edf0 <FATFS_LinkDriverEx+0x94>)
 800eda4:	4413      	add	r3, r2
 800eda6:	79fa      	ldrb	r2, [r7, #7]
 800eda8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800edaa:	4b11      	ldr	r3, [pc, #68]	; (800edf0 <FATFS_LinkDriverEx+0x94>)
 800edac:	7a5b      	ldrb	r3, [r3, #9]
 800edae:	b2db      	uxtb	r3, r3
 800edb0:	1c5a      	adds	r2, r3, #1
 800edb2:	b2d1      	uxtb	r1, r2
 800edb4:	4a0e      	ldr	r2, [pc, #56]	; (800edf0 <FATFS_LinkDriverEx+0x94>)
 800edb6:	7251      	strb	r1, [r2, #9]
 800edb8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800edba:	7dbb      	ldrb	r3, [r7, #22]
 800edbc:	3330      	adds	r3, #48	; 0x30
 800edbe:	b2da      	uxtb	r2, r3
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800edc4:	68bb      	ldr	r3, [r7, #8]
 800edc6:	3301      	adds	r3, #1
 800edc8:	223a      	movs	r2, #58	; 0x3a
 800edca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800edcc:	68bb      	ldr	r3, [r7, #8]
 800edce:	3302      	adds	r3, #2
 800edd0:	222f      	movs	r2, #47	; 0x2f
 800edd2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800edd4:	68bb      	ldr	r3, [r7, #8]
 800edd6:	3303      	adds	r3, #3
 800edd8:	2200      	movs	r2, #0
 800edda:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800eddc:	2300      	movs	r3, #0
 800edde:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ede0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ede2:	4618      	mov	r0, r3
 800ede4:	371c      	adds	r7, #28
 800ede6:	46bd      	mov	sp, r7
 800ede8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edec:	4770      	bx	lr
 800edee:	bf00      	nop
 800edf0:	200041cc 	.word	0x200041cc

0800edf4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b082      	sub	sp, #8
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
 800edfc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800edfe:	2200      	movs	r2, #0
 800ee00:	6839      	ldr	r1, [r7, #0]
 800ee02:	6878      	ldr	r0, [r7, #4]
 800ee04:	f7ff ffaa 	bl	800ed5c <FATFS_LinkDriverEx>
 800ee08:	4603      	mov	r3, r0
}
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	3708      	adds	r7, #8
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bd80      	pop	{r7, pc}
	...

0800ee14 <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ee14:	b480      	push	{r7}
 800ee16:	b089      	sub	sp, #36	; 0x24
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	6039      	str	r1, [r7, #0]
 800ee1e:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (chr < 0x80) {	/* ASCII */
 800ee20:	88fb      	ldrh	r3, [r7, #6]
 800ee22:	2b7f      	cmp	r3, #127	; 0x7f
 800ee24:	d802      	bhi.n	800ee2c <ff_convert+0x18>
		c = chr;
 800ee26:	88fb      	ldrh	r3, [r7, #6]
 800ee28:	837b      	strh	r3, [r7, #26]
 800ee2a:	e045      	b.n	800eeb8 <ff_convert+0xa4>
	} else {
		if (dir) {		/* OEM code to unicode */
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d005      	beq.n	800ee3e <ff_convert+0x2a>
			p = oem2uni;
 800ee32:	4b25      	ldr	r3, [pc, #148]	; (800eec8 <ff_convert+0xb4>)
 800ee34:	61fb      	str	r3, [r7, #28]
			hi = sizeof oem2uni / 4 - 1;
 800ee36:	f245 5320 	movw	r3, #21792	; 0x5520
 800ee3a:	60bb      	str	r3, [r7, #8]
 800ee3c:	e004      	b.n	800ee48 <ff_convert+0x34>
		} else {		/* Unicode to OEM code */
			p = uni2oem;
 800ee3e:	4b23      	ldr	r3, [pc, #140]	; (800eecc <ff_convert+0xb8>)
 800ee40:	61fb      	str	r3, [r7, #28]
			hi = sizeof uni2oem / 4 - 1;
 800ee42:	f245 5320 	movw	r3, #21792	; 0x5520
 800ee46:	60bb      	str	r3, [r7, #8]
		}
		li = 0;
 800ee48:	2300      	movs	r3, #0
 800ee4a:	60fb      	str	r3, [r7, #12]
		for (n = 16; n; n--) {
 800ee4c:	2310      	movs	r3, #16
 800ee4e:	613b      	str	r3, [r7, #16]
 800ee50:	e021      	b.n	800ee96 <ff_convert+0x82>
			i = li + (hi - li) / 2;
 800ee52:	68ba      	ldr	r2, [r7, #8]
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	1ad3      	subs	r3, r2, r3
 800ee58:	0fda      	lsrs	r2, r3, #31
 800ee5a:	4413      	add	r3, r2
 800ee5c:	105b      	asrs	r3, r3, #1
 800ee5e:	461a      	mov	r2, r3
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	4413      	add	r3, r2
 800ee64:	617b      	str	r3, [r7, #20]
			if (chr == p[i * 2]) break;
 800ee66:	697b      	ldr	r3, [r7, #20]
 800ee68:	009b      	lsls	r3, r3, #2
 800ee6a:	69fa      	ldr	r2, [r7, #28]
 800ee6c:	4413      	add	r3, r2
 800ee6e:	881b      	ldrh	r3, [r3, #0]
 800ee70:	88fa      	ldrh	r2, [r7, #6]
 800ee72:	429a      	cmp	r2, r3
 800ee74:	d013      	beq.n	800ee9e <ff_convert+0x8a>
			if (chr > p[i * 2])
 800ee76:	697b      	ldr	r3, [r7, #20]
 800ee78:	009b      	lsls	r3, r3, #2
 800ee7a:	69fa      	ldr	r2, [r7, #28]
 800ee7c:	4413      	add	r3, r2
 800ee7e:	881b      	ldrh	r3, [r3, #0]
 800ee80:	88fa      	ldrh	r2, [r7, #6]
 800ee82:	429a      	cmp	r2, r3
 800ee84:	d902      	bls.n	800ee8c <ff_convert+0x78>
				li = i;
 800ee86:	697b      	ldr	r3, [r7, #20]
 800ee88:	60fb      	str	r3, [r7, #12]
 800ee8a:	e001      	b.n	800ee90 <ff_convert+0x7c>
			else
				hi = i;
 800ee8c:	697b      	ldr	r3, [r7, #20]
 800ee8e:	60bb      	str	r3, [r7, #8]
		for (n = 16; n; n--) {
 800ee90:	693b      	ldr	r3, [r7, #16]
 800ee92:	3b01      	subs	r3, #1
 800ee94:	613b      	str	r3, [r7, #16]
 800ee96:	693b      	ldr	r3, [r7, #16]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d1da      	bne.n	800ee52 <ff_convert+0x3e>
 800ee9c:	e000      	b.n	800eea0 <ff_convert+0x8c>
			if (chr == p[i * 2]) break;
 800ee9e:	bf00      	nop
		}
		c = n ? p[i * 2 + 1] : 0;
 800eea0:	693b      	ldr	r3, [r7, #16]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d006      	beq.n	800eeb4 <ff_convert+0xa0>
 800eea6:	697b      	ldr	r3, [r7, #20]
 800eea8:	009b      	lsls	r3, r3, #2
 800eeaa:	3302      	adds	r3, #2
 800eeac:	69fa      	ldr	r2, [r7, #28]
 800eeae:	4413      	add	r3, r2
 800eeb0:	881b      	ldrh	r3, [r3, #0]
 800eeb2:	e000      	b.n	800eeb6 <ff_convert+0xa2>
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	837b      	strh	r3, [r7, #26]
	}

	return c;
 800eeb8:	8b7b      	ldrh	r3, [r7, #26]
}
 800eeba:	4618      	mov	r0, r3
 800eebc:	3724      	adds	r7, #36	; 0x24
 800eebe:	46bd      	mov	sp, r7
 800eec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec4:	4770      	bx	lr
 800eec6:	bf00      	nop
 800eec8:	0805c0a4 	.word	0x0805c0a4
 800eecc:	08046c20 	.word	0x08046c20

0800eed0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800eed0:	b480      	push	{r7}
 800eed2:	b087      	sub	sp, #28
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	4603      	mov	r3, r0
 800eed8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800eeda:	88fb      	ldrh	r3, [r7, #6]
 800eedc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eee0:	d201      	bcs.n	800eee6 <ff_wtoupper+0x16>
 800eee2:	4b3e      	ldr	r3, [pc, #248]	; (800efdc <ff_wtoupper+0x10c>)
 800eee4:	e000      	b.n	800eee8 <ff_wtoupper+0x18>
 800eee6:	4b3e      	ldr	r3, [pc, #248]	; (800efe0 <ff_wtoupper+0x110>)
 800eee8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800eeea:	697b      	ldr	r3, [r7, #20]
 800eeec:	1c9a      	adds	r2, r3, #2
 800eeee:	617a      	str	r2, [r7, #20]
 800eef0:	881b      	ldrh	r3, [r3, #0]
 800eef2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800eef4:	8a7b      	ldrh	r3, [r7, #18]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d068      	beq.n	800efcc <ff_wtoupper+0xfc>
 800eefa:	88fa      	ldrh	r2, [r7, #6]
 800eefc:	8a7b      	ldrh	r3, [r7, #18]
 800eefe:	429a      	cmp	r2, r3
 800ef00:	d364      	bcc.n	800efcc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ef02:	697b      	ldr	r3, [r7, #20]
 800ef04:	1c9a      	adds	r2, r3, #2
 800ef06:	617a      	str	r2, [r7, #20]
 800ef08:	881b      	ldrh	r3, [r3, #0]
 800ef0a:	823b      	strh	r3, [r7, #16]
 800ef0c:	8a3b      	ldrh	r3, [r7, #16]
 800ef0e:	0a1b      	lsrs	r3, r3, #8
 800ef10:	81fb      	strh	r3, [r7, #14]
 800ef12:	8a3b      	ldrh	r3, [r7, #16]
 800ef14:	b2db      	uxtb	r3, r3
 800ef16:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ef18:	88fa      	ldrh	r2, [r7, #6]
 800ef1a:	8a79      	ldrh	r1, [r7, #18]
 800ef1c:	8a3b      	ldrh	r3, [r7, #16]
 800ef1e:	440b      	add	r3, r1
 800ef20:	429a      	cmp	r2, r3
 800ef22:	da49      	bge.n	800efb8 <ff_wtoupper+0xe8>
			switch (cmd) {
 800ef24:	89fb      	ldrh	r3, [r7, #14]
 800ef26:	2b08      	cmp	r3, #8
 800ef28:	d84f      	bhi.n	800efca <ff_wtoupper+0xfa>
 800ef2a:	a201      	add	r2, pc, #4	; (adr r2, 800ef30 <ff_wtoupper+0x60>)
 800ef2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef30:	0800ef55 	.word	0x0800ef55
 800ef34:	0800ef67 	.word	0x0800ef67
 800ef38:	0800ef7d 	.word	0x0800ef7d
 800ef3c:	0800ef85 	.word	0x0800ef85
 800ef40:	0800ef8d 	.word	0x0800ef8d
 800ef44:	0800ef95 	.word	0x0800ef95
 800ef48:	0800ef9d 	.word	0x0800ef9d
 800ef4c:	0800efa5 	.word	0x0800efa5
 800ef50:	0800efad 	.word	0x0800efad
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ef54:	88fa      	ldrh	r2, [r7, #6]
 800ef56:	8a7b      	ldrh	r3, [r7, #18]
 800ef58:	1ad3      	subs	r3, r2, r3
 800ef5a:	005b      	lsls	r3, r3, #1
 800ef5c:	697a      	ldr	r2, [r7, #20]
 800ef5e:	4413      	add	r3, r2
 800ef60:	881b      	ldrh	r3, [r3, #0]
 800ef62:	80fb      	strh	r3, [r7, #6]
 800ef64:	e027      	b.n	800efb6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ef66:	88fa      	ldrh	r2, [r7, #6]
 800ef68:	8a7b      	ldrh	r3, [r7, #18]
 800ef6a:	1ad3      	subs	r3, r2, r3
 800ef6c:	b29b      	uxth	r3, r3
 800ef6e:	f003 0301 	and.w	r3, r3, #1
 800ef72:	b29b      	uxth	r3, r3
 800ef74:	88fa      	ldrh	r2, [r7, #6]
 800ef76:	1ad3      	subs	r3, r2, r3
 800ef78:	80fb      	strh	r3, [r7, #6]
 800ef7a:	e01c      	b.n	800efb6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800ef7c:	88fb      	ldrh	r3, [r7, #6]
 800ef7e:	3b10      	subs	r3, #16
 800ef80:	80fb      	strh	r3, [r7, #6]
 800ef82:	e018      	b.n	800efb6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800ef84:	88fb      	ldrh	r3, [r7, #6]
 800ef86:	3b20      	subs	r3, #32
 800ef88:	80fb      	strh	r3, [r7, #6]
 800ef8a:	e014      	b.n	800efb6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800ef8c:	88fb      	ldrh	r3, [r7, #6]
 800ef8e:	3b30      	subs	r3, #48	; 0x30
 800ef90:	80fb      	strh	r3, [r7, #6]
 800ef92:	e010      	b.n	800efb6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800ef94:	88fb      	ldrh	r3, [r7, #6]
 800ef96:	3b1a      	subs	r3, #26
 800ef98:	80fb      	strh	r3, [r7, #6]
 800ef9a:	e00c      	b.n	800efb6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800ef9c:	88fb      	ldrh	r3, [r7, #6]
 800ef9e:	3308      	adds	r3, #8
 800efa0:	80fb      	strh	r3, [r7, #6]
 800efa2:	e008      	b.n	800efb6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800efa4:	88fb      	ldrh	r3, [r7, #6]
 800efa6:	3b50      	subs	r3, #80	; 0x50
 800efa8:	80fb      	strh	r3, [r7, #6]
 800efaa:	e004      	b.n	800efb6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800efac:	88fb      	ldrh	r3, [r7, #6]
 800efae:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800efb2:	80fb      	strh	r3, [r7, #6]
 800efb4:	bf00      	nop
			}
			break;
 800efb6:	e008      	b.n	800efca <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800efb8:	89fb      	ldrh	r3, [r7, #14]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d195      	bne.n	800eeea <ff_wtoupper+0x1a>
 800efbe:	8a3b      	ldrh	r3, [r7, #16]
 800efc0:	005b      	lsls	r3, r3, #1
 800efc2:	697a      	ldr	r2, [r7, #20]
 800efc4:	4413      	add	r3, r2
 800efc6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800efc8:	e78f      	b.n	800eeea <ff_wtoupper+0x1a>
			break;
 800efca:	bf00      	nop
	}

	return chr;
 800efcc:	88fb      	ldrh	r3, [r7, #6]
}
 800efce:	4618      	mov	r0, r3
 800efd0:	371c      	adds	r7, #28
 800efd2:	46bd      	mov	sp, r7
 800efd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd8:	4770      	bx	lr
 800efda:	bf00      	nop
 800efdc:	08071528 	.word	0x08071528
 800efe0:	0807171c 	.word	0x0807171c

0800efe4 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b084      	sub	sp, #16
 800efe8:	af00      	add	r7, sp, #0
 800efea:	4603      	mov	r3, r0
 800efec:	6039      	str	r1, [r7, #0]
 800efee:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800eff0:	2200      	movs	r2, #0
 800eff2:	2101      	movs	r1, #1
 800eff4:	2001      	movs	r0, #1
 800eff6:	f000 fabd 	bl	800f574 <osSemaphoreNew>
 800effa:	4602      	mov	r2, r0
 800effc:	683b      	ldr	r3, [r7, #0]
 800effe:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	2b00      	cmp	r3, #0
 800f006:	bf14      	ite	ne
 800f008:	2301      	movne	r3, #1
 800f00a:	2300      	moveq	r3, #0
 800f00c:	b2db      	uxtb	r3, r3
 800f00e:	60fb      	str	r3, [r7, #12]

    return ret;
 800f010:	68fb      	ldr	r3, [r7, #12]
}
 800f012:	4618      	mov	r0, r3
 800f014:	3710      	adds	r7, #16
 800f016:	46bd      	mov	sp, r7
 800f018:	bd80      	pop	{r7, pc}

0800f01a <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800f01a:	b580      	push	{r7, lr}
 800f01c:	b082      	sub	sp, #8
 800f01e:	af00      	add	r7, sp, #0
 800f020:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800f022:	6878      	ldr	r0, [r7, #4]
 800f024:	f000 fbc6 	bl	800f7b4 <osSemaphoreDelete>
#endif
    return 1;
 800f028:	2301      	movs	r3, #1
}
 800f02a:	4618      	mov	r0, r3
 800f02c:	3708      	adds	r7, #8
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}

0800f032 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800f032:	b580      	push	{r7, lr}
 800f034:	b084      	sub	sp, #16
 800f036:	af00      	add	r7, sp, #0
 800f038:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800f03a:	2300      	movs	r3, #0
 800f03c:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800f03e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f042:	6878      	ldr	r0, [r7, #4]
 800f044:	f000 fb20 	bl	800f688 <osSemaphoreAcquire>
 800f048:	4603      	mov	r3, r0
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d101      	bne.n	800f052 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800f04e:	2301      	movs	r3, #1
 800f050:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800f052:	68fb      	ldr	r3, [r7, #12]
}
 800f054:	4618      	mov	r0, r3
 800f056:	3710      	adds	r7, #16
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}

0800f05c <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b082      	sub	sp, #8
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800f064:	6878      	ldr	r0, [r7, #4]
 800f066:	f000 fb61 	bl	800f72c <osSemaphoreRelease>
#endif
}
 800f06a:	bf00      	nop
 800f06c:	3708      	adds	r7, #8
 800f06e:	46bd      	mov	sp, r7
 800f070:	bd80      	pop	{r7, pc}
	...

0800f074 <__NVIC_SetPriority>:
{
 800f074:	b480      	push	{r7}
 800f076:	b083      	sub	sp, #12
 800f078:	af00      	add	r7, sp, #0
 800f07a:	4603      	mov	r3, r0
 800f07c:	6039      	str	r1, [r7, #0]
 800f07e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f084:	2b00      	cmp	r3, #0
 800f086:	db0a      	blt.n	800f09e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	b2da      	uxtb	r2, r3
 800f08c:	490c      	ldr	r1, [pc, #48]	; (800f0c0 <__NVIC_SetPriority+0x4c>)
 800f08e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f092:	0112      	lsls	r2, r2, #4
 800f094:	b2d2      	uxtb	r2, r2
 800f096:	440b      	add	r3, r1
 800f098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800f09c:	e00a      	b.n	800f0b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	b2da      	uxtb	r2, r3
 800f0a2:	4908      	ldr	r1, [pc, #32]	; (800f0c4 <__NVIC_SetPriority+0x50>)
 800f0a4:	79fb      	ldrb	r3, [r7, #7]
 800f0a6:	f003 030f 	and.w	r3, r3, #15
 800f0aa:	3b04      	subs	r3, #4
 800f0ac:	0112      	lsls	r2, r2, #4
 800f0ae:	b2d2      	uxtb	r2, r2
 800f0b0:	440b      	add	r3, r1
 800f0b2:	761a      	strb	r2, [r3, #24]
}
 800f0b4:	bf00      	nop
 800f0b6:	370c      	adds	r7, #12
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0be:	4770      	bx	lr
 800f0c0:	e000e100 	.word	0xe000e100
 800f0c4:	e000ed00 	.word	0xe000ed00

0800f0c8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800f0cc:	4b05      	ldr	r3, [pc, #20]	; (800f0e4 <SysTick_Handler+0x1c>)
 800f0ce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f0d0:	f002 ff0c 	bl	8011eec <xTaskGetSchedulerState>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	2b01      	cmp	r3, #1
 800f0d8:	d001      	beq.n	800f0de <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800f0da:	f003 ff35 	bl	8012f48 <xPortSysTickHandler>
  }
}
 800f0de:	bf00      	nop
 800f0e0:	bd80      	pop	{r7, pc}
 800f0e2:	bf00      	nop
 800f0e4:	e000e010 	.word	0xe000e010

0800f0e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800f0ec:	2100      	movs	r1, #0
 800f0ee:	f06f 0004 	mvn.w	r0, #4
 800f0f2:	f7ff ffbf 	bl	800f074 <__NVIC_SetPriority>
#endif
}
 800f0f6:	bf00      	nop
 800f0f8:	bd80      	pop	{r7, pc}
	...

0800f0fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f0fc:	b480      	push	{r7}
 800f0fe:	b083      	sub	sp, #12
 800f100:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f102:	f3ef 8305 	mrs	r3, IPSR
 800f106:	603b      	str	r3, [r7, #0]
  return(result);
 800f108:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d003      	beq.n	800f116 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800f10e:	f06f 0305 	mvn.w	r3, #5
 800f112:	607b      	str	r3, [r7, #4]
 800f114:	e00c      	b.n	800f130 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f116:	4b0a      	ldr	r3, [pc, #40]	; (800f140 <osKernelInitialize+0x44>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d105      	bne.n	800f12a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f11e:	4b08      	ldr	r3, [pc, #32]	; (800f140 <osKernelInitialize+0x44>)
 800f120:	2201      	movs	r2, #1
 800f122:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f124:	2300      	movs	r3, #0
 800f126:	607b      	str	r3, [r7, #4]
 800f128:	e002      	b.n	800f130 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800f12a:	f04f 33ff 	mov.w	r3, #4294967295
 800f12e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f130:	687b      	ldr	r3, [r7, #4]
}
 800f132:	4618      	mov	r0, r3
 800f134:	370c      	adds	r7, #12
 800f136:	46bd      	mov	sp, r7
 800f138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13c:	4770      	bx	lr
 800f13e:	bf00      	nop
 800f140:	200041d8 	.word	0x200041d8

0800f144 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800f144:	b580      	push	{r7, lr}
 800f146:	b082      	sub	sp, #8
 800f148:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800f14a:	f002 fecf 	bl	8011eec <xTaskGetSchedulerState>
 800f14e:	4603      	mov	r3, r0
 800f150:	2b00      	cmp	r3, #0
 800f152:	d004      	beq.n	800f15e <osKernelGetState+0x1a>
 800f154:	2b02      	cmp	r3, #2
 800f156:	d105      	bne.n	800f164 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800f158:	2302      	movs	r3, #2
 800f15a:	607b      	str	r3, [r7, #4]
      break;
 800f15c:	e00c      	b.n	800f178 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800f15e:	2303      	movs	r3, #3
 800f160:	607b      	str	r3, [r7, #4]
      break;
 800f162:	e009      	b.n	800f178 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800f164:	4b07      	ldr	r3, [pc, #28]	; (800f184 <osKernelGetState+0x40>)
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	2b01      	cmp	r3, #1
 800f16a:	d102      	bne.n	800f172 <osKernelGetState+0x2e>
        state = osKernelReady;
 800f16c:	2301      	movs	r3, #1
 800f16e:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800f170:	e001      	b.n	800f176 <osKernelGetState+0x32>
        state = osKernelInactive;
 800f172:	2300      	movs	r3, #0
 800f174:	607b      	str	r3, [r7, #4]
      break;
 800f176:	bf00      	nop
  }

  return (state);
 800f178:	687b      	ldr	r3, [r7, #4]
}
 800f17a:	4618      	mov	r0, r3
 800f17c:	3708      	adds	r7, #8
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}
 800f182:	bf00      	nop
 800f184:	200041d8 	.word	0x200041d8

0800f188 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800f188:	b580      	push	{r7, lr}
 800f18a:	b082      	sub	sp, #8
 800f18c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f18e:	f3ef 8305 	mrs	r3, IPSR
 800f192:	603b      	str	r3, [r7, #0]
  return(result);
 800f194:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f196:	2b00      	cmp	r3, #0
 800f198:	d003      	beq.n	800f1a2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800f19a:	f06f 0305 	mvn.w	r3, #5
 800f19e:	607b      	str	r3, [r7, #4]
 800f1a0:	e010      	b.n	800f1c4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f1a2:	4b0b      	ldr	r3, [pc, #44]	; (800f1d0 <osKernelStart+0x48>)
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	2b01      	cmp	r3, #1
 800f1a8:	d109      	bne.n	800f1be <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f1aa:	f7ff ff9d 	bl	800f0e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f1ae:	4b08      	ldr	r3, [pc, #32]	; (800f1d0 <osKernelStart+0x48>)
 800f1b0:	2202      	movs	r2, #2
 800f1b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f1b4:	f002 f8b0 	bl	8011318 <vTaskStartScheduler>
      stat = osOK;
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	607b      	str	r3, [r7, #4]
 800f1bc:	e002      	b.n	800f1c4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800f1be:	f04f 33ff 	mov.w	r3, #4294967295
 800f1c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f1c4:	687b      	ldr	r3, [r7, #4]
}
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	3708      	adds	r7, #8
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	bd80      	pop	{r7, pc}
 800f1ce:	bf00      	nop
 800f1d0:	200041d8 	.word	0x200041d8

0800f1d4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b082      	sub	sp, #8
 800f1d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f1da:	f3ef 8305 	mrs	r3, IPSR
 800f1de:	603b      	str	r3, [r7, #0]
  return(result);
 800f1e0:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d003      	beq.n	800f1ee <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800f1e6:	f002 f9bb 	bl	8011560 <xTaskGetTickCountFromISR>
 800f1ea:	6078      	str	r0, [r7, #4]
 800f1ec:	e002      	b.n	800f1f4 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800f1ee:	f002 f9a7 	bl	8011540 <xTaskGetTickCount>
 800f1f2:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800f1f4:	687b      	ldr	r3, [r7, #4]
}
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	3708      	adds	r7, #8
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bd80      	pop	{r7, pc}

0800f1fe <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f1fe:	b580      	push	{r7, lr}
 800f200:	b08e      	sub	sp, #56	; 0x38
 800f202:	af04      	add	r7, sp, #16
 800f204:	60f8      	str	r0, [r7, #12]
 800f206:	60b9      	str	r1, [r7, #8]
 800f208:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f20a:	2300      	movs	r3, #0
 800f20c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f20e:	f3ef 8305 	mrs	r3, IPSR
 800f212:	617b      	str	r3, [r7, #20]
  return(result);
 800f214:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800f216:	2b00      	cmp	r3, #0
 800f218:	d17e      	bne.n	800f318 <osThreadNew+0x11a>
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d07b      	beq.n	800f318 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800f220:	2380      	movs	r3, #128	; 0x80
 800f222:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800f224:	2318      	movs	r3, #24
 800f226:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800f228:	2300      	movs	r3, #0
 800f22a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800f22c:	f04f 33ff 	mov.w	r3, #4294967295
 800f230:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d045      	beq.n	800f2c4 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d002      	beq.n	800f246 <osThreadNew+0x48>
        name = attr->name;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	699b      	ldr	r3, [r3, #24]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d002      	beq.n	800f254 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	699b      	ldr	r3, [r3, #24]
 800f252:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f254:	69fb      	ldr	r3, [r7, #28]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d008      	beq.n	800f26c <osThreadNew+0x6e>
 800f25a:	69fb      	ldr	r3, [r7, #28]
 800f25c:	2b38      	cmp	r3, #56	; 0x38
 800f25e:	d805      	bhi.n	800f26c <osThreadNew+0x6e>
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	685b      	ldr	r3, [r3, #4]
 800f264:	f003 0301 	and.w	r3, r3, #1
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d001      	beq.n	800f270 <osThreadNew+0x72>
        return (NULL);
 800f26c:	2300      	movs	r3, #0
 800f26e:	e054      	b.n	800f31a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	695b      	ldr	r3, [r3, #20]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d003      	beq.n	800f280 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	695b      	ldr	r3, [r3, #20]
 800f27c:	089b      	lsrs	r3, r3, #2
 800f27e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	689b      	ldr	r3, [r3, #8]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d00e      	beq.n	800f2a6 <osThreadNew+0xa8>
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	68db      	ldr	r3, [r3, #12]
 800f28c:	2b5f      	cmp	r3, #95	; 0x5f
 800f28e:	d90a      	bls.n	800f2a6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f294:	2b00      	cmp	r3, #0
 800f296:	d006      	beq.n	800f2a6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	695b      	ldr	r3, [r3, #20]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d002      	beq.n	800f2a6 <osThreadNew+0xa8>
        mem = 1;
 800f2a0:	2301      	movs	r3, #1
 800f2a2:	61bb      	str	r3, [r7, #24]
 800f2a4:	e010      	b.n	800f2c8 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	689b      	ldr	r3, [r3, #8]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d10c      	bne.n	800f2c8 <osThreadNew+0xca>
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	68db      	ldr	r3, [r3, #12]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d108      	bne.n	800f2c8 <osThreadNew+0xca>
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	691b      	ldr	r3, [r3, #16]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d104      	bne.n	800f2c8 <osThreadNew+0xca>
          mem = 0;
 800f2be:	2300      	movs	r3, #0
 800f2c0:	61bb      	str	r3, [r7, #24]
 800f2c2:	e001      	b.n	800f2c8 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f2c8:	69bb      	ldr	r3, [r7, #24]
 800f2ca:	2b01      	cmp	r3, #1
 800f2cc:	d110      	bne.n	800f2f0 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f2d2:	687a      	ldr	r2, [r7, #4]
 800f2d4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f2d6:	9202      	str	r2, [sp, #8]
 800f2d8:	9301      	str	r3, [sp, #4]
 800f2da:	69fb      	ldr	r3, [r7, #28]
 800f2dc:	9300      	str	r3, [sp, #0]
 800f2de:	68bb      	ldr	r3, [r7, #8]
 800f2e0:	6a3a      	ldr	r2, [r7, #32]
 800f2e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f2e4:	68f8      	ldr	r0, [r7, #12]
 800f2e6:	f001 fd67 	bl	8010db8 <xTaskCreateStatic>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	613b      	str	r3, [r7, #16]
 800f2ee:	e013      	b.n	800f318 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800f2f0:	69bb      	ldr	r3, [r7, #24]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d110      	bne.n	800f318 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f2f6:	6a3b      	ldr	r3, [r7, #32]
 800f2f8:	b29a      	uxth	r2, r3
 800f2fa:	f107 0310 	add.w	r3, r7, #16
 800f2fe:	9301      	str	r3, [sp, #4]
 800f300:	69fb      	ldr	r3, [r7, #28]
 800f302:	9300      	str	r3, [sp, #0]
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f308:	68f8      	ldr	r0, [r7, #12]
 800f30a:	f001 fdb2 	bl	8010e72 <xTaskCreate>
 800f30e:	4603      	mov	r3, r0
 800f310:	2b01      	cmp	r3, #1
 800f312:	d001      	beq.n	800f318 <osThreadNew+0x11a>
            hTask = NULL;
 800f314:	2300      	movs	r3, #0
 800f316:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f318:	693b      	ldr	r3, [r7, #16]
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	3728      	adds	r7, #40	; 0x28
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}

0800f322 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800f322:	b580      	push	{r7, lr}
 800f324:	b084      	sub	sp, #16
 800f326:	af00      	add	r7, sp, #0
 800f328:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f32a:	f3ef 8305 	mrs	r3, IPSR
 800f32e:	60bb      	str	r3, [r7, #8]
  return(result);
 800f330:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f332:	2b00      	cmp	r3, #0
 800f334:	d003      	beq.n	800f33e <osDelay+0x1c>
    stat = osErrorISR;
 800f336:	f06f 0305 	mvn.w	r3, #5
 800f33a:	60fb      	str	r3, [r7, #12]
 800f33c:	e007      	b.n	800f34e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800f33e:	2300      	movs	r3, #0
 800f340:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d002      	beq.n	800f34e <osDelay+0x2c>
      vTaskDelay(ticks);
 800f348:	6878      	ldr	r0, [r7, #4]
 800f34a:	f001 ff4b 	bl	80111e4 <vTaskDelay>
    }
  }

  return (stat);
 800f34e:	68fb      	ldr	r3, [r7, #12]
}
 800f350:	4618      	mov	r0, r3
 800f352:	3710      	adds	r7, #16
 800f354:	46bd      	mov	sp, r7
 800f356:	bd80      	pop	{r7, pc}

0800f358 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800f358:	b580      	push	{r7, lr}
 800f35a:	b088      	sub	sp, #32
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800f360:	2300      	movs	r3, #0
 800f362:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f364:	f3ef 8305 	mrs	r3, IPSR
 800f368:	60bb      	str	r3, [r7, #8]
  return(result);
 800f36a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d174      	bne.n	800f45a <osMutexNew+0x102>
    if (attr != NULL) {
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d003      	beq.n	800f37e <osMutexNew+0x26>
      type = attr->attr_bits;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	685b      	ldr	r3, [r3, #4]
 800f37a:	61bb      	str	r3, [r7, #24]
 800f37c:	e001      	b.n	800f382 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800f37e:	2300      	movs	r3, #0
 800f380:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800f382:	69bb      	ldr	r3, [r7, #24]
 800f384:	f003 0301 	and.w	r3, r3, #1
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d002      	beq.n	800f392 <osMutexNew+0x3a>
      rmtx = 1U;
 800f38c:	2301      	movs	r3, #1
 800f38e:	617b      	str	r3, [r7, #20]
 800f390:	e001      	b.n	800f396 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800f392:	2300      	movs	r3, #0
 800f394:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800f396:	69bb      	ldr	r3, [r7, #24]
 800f398:	f003 0308 	and.w	r3, r3, #8
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d15c      	bne.n	800f45a <osMutexNew+0x102>
      mem = -1;
 800f3a0:	f04f 33ff 	mov.w	r3, #4294967295
 800f3a4:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d015      	beq.n	800f3d8 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	689b      	ldr	r3, [r3, #8]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d006      	beq.n	800f3c2 <osMutexNew+0x6a>
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	68db      	ldr	r3, [r3, #12]
 800f3b8:	2b4f      	cmp	r3, #79	; 0x4f
 800f3ba:	d902      	bls.n	800f3c2 <osMutexNew+0x6a>
          mem = 1;
 800f3bc:	2301      	movs	r3, #1
 800f3be:	613b      	str	r3, [r7, #16]
 800f3c0:	e00c      	b.n	800f3dc <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	689b      	ldr	r3, [r3, #8]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d108      	bne.n	800f3dc <osMutexNew+0x84>
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	68db      	ldr	r3, [r3, #12]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d104      	bne.n	800f3dc <osMutexNew+0x84>
            mem = 0;
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	613b      	str	r3, [r7, #16]
 800f3d6:	e001      	b.n	800f3dc <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800f3d8:	2300      	movs	r3, #0
 800f3da:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800f3dc:	693b      	ldr	r3, [r7, #16]
 800f3de:	2b01      	cmp	r3, #1
 800f3e0:	d112      	bne.n	800f408 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800f3e2:	697b      	ldr	r3, [r7, #20]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d007      	beq.n	800f3f8 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	689b      	ldr	r3, [r3, #8]
 800f3ec:	4619      	mov	r1, r3
 800f3ee:	2004      	movs	r0, #4
 800f3f0:	f000 fd8d 	bl	800ff0e <xQueueCreateMutexStatic>
 800f3f4:	61f8      	str	r0, [r7, #28]
 800f3f6:	e016      	b.n	800f426 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	689b      	ldr	r3, [r3, #8]
 800f3fc:	4619      	mov	r1, r3
 800f3fe:	2001      	movs	r0, #1
 800f400:	f000 fd85 	bl	800ff0e <xQueueCreateMutexStatic>
 800f404:	61f8      	str	r0, [r7, #28]
 800f406:	e00e      	b.n	800f426 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800f408:	693b      	ldr	r3, [r7, #16]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d10b      	bne.n	800f426 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800f40e:	697b      	ldr	r3, [r7, #20]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d004      	beq.n	800f41e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800f414:	2004      	movs	r0, #4
 800f416:	f000 fd62 	bl	800fede <xQueueCreateMutex>
 800f41a:	61f8      	str	r0, [r7, #28]
 800f41c:	e003      	b.n	800f426 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800f41e:	2001      	movs	r0, #1
 800f420:	f000 fd5d 	bl	800fede <xQueueCreateMutex>
 800f424:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800f426:	69fb      	ldr	r3, [r7, #28]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d00c      	beq.n	800f446 <osMutexNew+0xee>
        if (attr != NULL) {
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d003      	beq.n	800f43a <osMutexNew+0xe2>
          name = attr->name;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	60fb      	str	r3, [r7, #12]
 800f438:	e001      	b.n	800f43e <osMutexNew+0xe6>
        } else {
          name = NULL;
 800f43a:	2300      	movs	r3, #0
 800f43c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800f43e:	68f9      	ldr	r1, [r7, #12]
 800f440:	69f8      	ldr	r0, [r7, #28]
 800f442:	f001 fc31 	bl	8010ca8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800f446:	69fb      	ldr	r3, [r7, #28]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d006      	beq.n	800f45a <osMutexNew+0x102>
 800f44c:	697b      	ldr	r3, [r7, #20]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d003      	beq.n	800f45a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800f452:	69fb      	ldr	r3, [r7, #28]
 800f454:	f043 0301 	orr.w	r3, r3, #1
 800f458:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800f45a:	69fb      	ldr	r3, [r7, #28]
}
 800f45c:	4618      	mov	r0, r3
 800f45e:	3720      	adds	r7, #32
 800f460:	46bd      	mov	sp, r7
 800f462:	bd80      	pop	{r7, pc}

0800f464 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800f464:	b580      	push	{r7, lr}
 800f466:	b086      	sub	sp, #24
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
 800f46c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	f023 0301 	bic.w	r3, r3, #1
 800f474:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	f003 0301 	and.w	r3, r3, #1
 800f47c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800f47e:	2300      	movs	r3, #0
 800f480:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f482:	f3ef 8305 	mrs	r3, IPSR
 800f486:	60bb      	str	r3, [r7, #8]
  return(result);
 800f488:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d003      	beq.n	800f496 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800f48e:	f06f 0305 	mvn.w	r3, #5
 800f492:	617b      	str	r3, [r7, #20]
 800f494:	e02c      	b.n	800f4f0 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800f496:	693b      	ldr	r3, [r7, #16]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d103      	bne.n	800f4a4 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800f49c:	f06f 0303 	mvn.w	r3, #3
 800f4a0:	617b      	str	r3, [r7, #20]
 800f4a2:	e025      	b.n	800f4f0 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d011      	beq.n	800f4ce <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800f4aa:	6839      	ldr	r1, [r7, #0]
 800f4ac:	6938      	ldr	r0, [r7, #16]
 800f4ae:	f000 fd7d 	bl	800ffac <xQueueTakeMutexRecursive>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	2b01      	cmp	r3, #1
 800f4b6:	d01b      	beq.n	800f4f0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d003      	beq.n	800f4c6 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800f4be:	f06f 0301 	mvn.w	r3, #1
 800f4c2:	617b      	str	r3, [r7, #20]
 800f4c4:	e014      	b.n	800f4f0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800f4c6:	f06f 0302 	mvn.w	r3, #2
 800f4ca:	617b      	str	r3, [r7, #20]
 800f4cc:	e010      	b.n	800f4f0 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800f4ce:	6839      	ldr	r1, [r7, #0]
 800f4d0:	6938      	ldr	r0, [r7, #16]
 800f4d2:	f001 f911 	bl	80106f8 <xQueueSemaphoreTake>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	2b01      	cmp	r3, #1
 800f4da:	d009      	beq.n	800f4f0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800f4dc:	683b      	ldr	r3, [r7, #0]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d003      	beq.n	800f4ea <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800f4e2:	f06f 0301 	mvn.w	r3, #1
 800f4e6:	617b      	str	r3, [r7, #20]
 800f4e8:	e002      	b.n	800f4f0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800f4ea:	f06f 0302 	mvn.w	r3, #2
 800f4ee:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800f4f0:	697b      	ldr	r3, [r7, #20]
}
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3718      	adds	r7, #24
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}

0800f4fa <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800f4fa:	b580      	push	{r7, lr}
 800f4fc:	b086      	sub	sp, #24
 800f4fe:	af00      	add	r7, sp, #0
 800f500:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f023 0301 	bic.w	r3, r3, #1
 800f508:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	f003 0301 	and.w	r3, r3, #1
 800f510:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800f512:	2300      	movs	r3, #0
 800f514:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f516:	f3ef 8305 	mrs	r3, IPSR
 800f51a:	60bb      	str	r3, [r7, #8]
  return(result);
 800f51c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d003      	beq.n	800f52a <osMutexRelease+0x30>
    stat = osErrorISR;
 800f522:	f06f 0305 	mvn.w	r3, #5
 800f526:	617b      	str	r3, [r7, #20]
 800f528:	e01f      	b.n	800f56a <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800f52a:	693b      	ldr	r3, [r7, #16]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d103      	bne.n	800f538 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800f530:	f06f 0303 	mvn.w	r3, #3
 800f534:	617b      	str	r3, [r7, #20]
 800f536:	e018      	b.n	800f56a <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d009      	beq.n	800f552 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800f53e:	6938      	ldr	r0, [r7, #16]
 800f540:	f000 fd00 	bl	800ff44 <xQueueGiveMutexRecursive>
 800f544:	4603      	mov	r3, r0
 800f546:	2b01      	cmp	r3, #1
 800f548:	d00f      	beq.n	800f56a <osMutexRelease+0x70>
        stat = osErrorResource;
 800f54a:	f06f 0302 	mvn.w	r3, #2
 800f54e:	617b      	str	r3, [r7, #20]
 800f550:	e00b      	b.n	800f56a <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800f552:	2300      	movs	r3, #0
 800f554:	2200      	movs	r2, #0
 800f556:	2100      	movs	r1, #0
 800f558:	6938      	ldr	r0, [r7, #16]
 800f55a:	f000 fdc7 	bl	80100ec <xQueueGenericSend>
 800f55e:	4603      	mov	r3, r0
 800f560:	2b01      	cmp	r3, #1
 800f562:	d002      	beq.n	800f56a <osMutexRelease+0x70>
        stat = osErrorResource;
 800f564:	f06f 0302 	mvn.w	r3, #2
 800f568:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800f56a:	697b      	ldr	r3, [r7, #20]
}
 800f56c:	4618      	mov	r0, r3
 800f56e:	3718      	adds	r7, #24
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}

0800f574 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800f574:	b580      	push	{r7, lr}
 800f576:	b08a      	sub	sp, #40	; 0x28
 800f578:	af02      	add	r7, sp, #8
 800f57a:	60f8      	str	r0, [r7, #12]
 800f57c:	60b9      	str	r1, [r7, #8]
 800f57e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800f580:	2300      	movs	r3, #0
 800f582:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f584:	f3ef 8305 	mrs	r3, IPSR
 800f588:	613b      	str	r3, [r7, #16]
  return(result);
 800f58a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d175      	bne.n	800f67c <osSemaphoreNew+0x108>
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d072      	beq.n	800f67c <osSemaphoreNew+0x108>
 800f596:	68ba      	ldr	r2, [r7, #8]
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	429a      	cmp	r2, r3
 800f59c:	d86e      	bhi.n	800f67c <osSemaphoreNew+0x108>
    mem = -1;
 800f59e:	f04f 33ff 	mov.w	r3, #4294967295
 800f5a2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d015      	beq.n	800f5d6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	689b      	ldr	r3, [r3, #8]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d006      	beq.n	800f5c0 <osSemaphoreNew+0x4c>
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	68db      	ldr	r3, [r3, #12]
 800f5b6:	2b4f      	cmp	r3, #79	; 0x4f
 800f5b8:	d902      	bls.n	800f5c0 <osSemaphoreNew+0x4c>
        mem = 1;
 800f5ba:	2301      	movs	r3, #1
 800f5bc:	61bb      	str	r3, [r7, #24]
 800f5be:	e00c      	b.n	800f5da <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	689b      	ldr	r3, [r3, #8]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d108      	bne.n	800f5da <osSemaphoreNew+0x66>
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	68db      	ldr	r3, [r3, #12]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d104      	bne.n	800f5da <osSemaphoreNew+0x66>
          mem = 0;
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	61bb      	str	r3, [r7, #24]
 800f5d4:	e001      	b.n	800f5da <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800f5da:	69bb      	ldr	r3, [r7, #24]
 800f5dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5e0:	d04c      	beq.n	800f67c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	2b01      	cmp	r3, #1
 800f5e6:	d128      	bne.n	800f63a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800f5e8:	69bb      	ldr	r3, [r7, #24]
 800f5ea:	2b01      	cmp	r3, #1
 800f5ec:	d10a      	bne.n	800f604 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	689b      	ldr	r3, [r3, #8]
 800f5f2:	2203      	movs	r2, #3
 800f5f4:	9200      	str	r2, [sp, #0]
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	2100      	movs	r1, #0
 800f5fa:	2001      	movs	r0, #1
 800f5fc:	f000 fb80 	bl	800fd00 <xQueueGenericCreateStatic>
 800f600:	61f8      	str	r0, [r7, #28]
 800f602:	e005      	b.n	800f610 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800f604:	2203      	movs	r2, #3
 800f606:	2100      	movs	r1, #0
 800f608:	2001      	movs	r0, #1
 800f60a:	f000 fbf1 	bl	800fdf0 <xQueueGenericCreate>
 800f60e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800f610:	69fb      	ldr	r3, [r7, #28]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d022      	beq.n	800f65c <osSemaphoreNew+0xe8>
 800f616:	68bb      	ldr	r3, [r7, #8]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d01f      	beq.n	800f65c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f61c:	2300      	movs	r3, #0
 800f61e:	2200      	movs	r2, #0
 800f620:	2100      	movs	r1, #0
 800f622:	69f8      	ldr	r0, [r7, #28]
 800f624:	f000 fd62 	bl	80100ec <xQueueGenericSend>
 800f628:	4603      	mov	r3, r0
 800f62a:	2b01      	cmp	r3, #1
 800f62c:	d016      	beq.n	800f65c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800f62e:	69f8      	ldr	r0, [r7, #28]
 800f630:	f001 f9ee 	bl	8010a10 <vQueueDelete>
            hSemaphore = NULL;
 800f634:	2300      	movs	r3, #0
 800f636:	61fb      	str	r3, [r7, #28]
 800f638:	e010      	b.n	800f65c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800f63a:	69bb      	ldr	r3, [r7, #24]
 800f63c:	2b01      	cmp	r3, #1
 800f63e:	d108      	bne.n	800f652 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	689b      	ldr	r3, [r3, #8]
 800f644:	461a      	mov	r2, r3
 800f646:	68b9      	ldr	r1, [r7, #8]
 800f648:	68f8      	ldr	r0, [r7, #12]
 800f64a:	f000 fce5 	bl	8010018 <xQueueCreateCountingSemaphoreStatic>
 800f64e:	61f8      	str	r0, [r7, #28]
 800f650:	e004      	b.n	800f65c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800f652:	68b9      	ldr	r1, [r7, #8]
 800f654:	68f8      	ldr	r0, [r7, #12]
 800f656:	f000 fd16 	bl	8010086 <xQueueCreateCountingSemaphore>
 800f65a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800f65c:	69fb      	ldr	r3, [r7, #28]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d00c      	beq.n	800f67c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d003      	beq.n	800f670 <osSemaphoreNew+0xfc>
          name = attr->name;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	617b      	str	r3, [r7, #20]
 800f66e:	e001      	b.n	800f674 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800f670:	2300      	movs	r3, #0
 800f672:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800f674:	6979      	ldr	r1, [r7, #20]
 800f676:	69f8      	ldr	r0, [r7, #28]
 800f678:	f001 fb16 	bl	8010ca8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800f67c:	69fb      	ldr	r3, [r7, #28]
}
 800f67e:	4618      	mov	r0, r3
 800f680:	3720      	adds	r7, #32
 800f682:	46bd      	mov	sp, r7
 800f684:	bd80      	pop	{r7, pc}
	...

0800f688 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800f688:	b580      	push	{r7, lr}
 800f68a:	b086      	sub	sp, #24
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
 800f690:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f696:	2300      	movs	r3, #0
 800f698:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800f69a:	693b      	ldr	r3, [r7, #16]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d103      	bne.n	800f6a8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800f6a0:	f06f 0303 	mvn.w	r3, #3
 800f6a4:	617b      	str	r3, [r7, #20]
 800f6a6:	e039      	b.n	800f71c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f6a8:	f3ef 8305 	mrs	r3, IPSR
 800f6ac:	60fb      	str	r3, [r7, #12]
  return(result);
 800f6ae:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d022      	beq.n	800f6fa <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800f6b4:	683b      	ldr	r3, [r7, #0]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d003      	beq.n	800f6c2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800f6ba:	f06f 0303 	mvn.w	r3, #3
 800f6be:	617b      	str	r3, [r7, #20]
 800f6c0:	e02c      	b.n	800f71c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f6c6:	f107 0308 	add.w	r3, r7, #8
 800f6ca:	461a      	mov	r2, r3
 800f6cc:	2100      	movs	r1, #0
 800f6ce:	6938      	ldr	r0, [r7, #16]
 800f6d0:	f001 f91e 	bl	8010910 <xQueueReceiveFromISR>
 800f6d4:	4603      	mov	r3, r0
 800f6d6:	2b01      	cmp	r3, #1
 800f6d8:	d003      	beq.n	800f6e2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800f6da:	f06f 0302 	mvn.w	r3, #2
 800f6de:	617b      	str	r3, [r7, #20]
 800f6e0:	e01c      	b.n	800f71c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800f6e2:	68bb      	ldr	r3, [r7, #8]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d019      	beq.n	800f71c <osSemaphoreAcquire+0x94>
 800f6e8:	4b0f      	ldr	r3, [pc, #60]	; (800f728 <osSemaphoreAcquire+0xa0>)
 800f6ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6ee:	601a      	str	r2, [r3, #0]
 800f6f0:	f3bf 8f4f 	dsb	sy
 800f6f4:	f3bf 8f6f 	isb	sy
 800f6f8:	e010      	b.n	800f71c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800f6fa:	6839      	ldr	r1, [r7, #0]
 800f6fc:	6938      	ldr	r0, [r7, #16]
 800f6fe:	f000 fffb 	bl	80106f8 <xQueueSemaphoreTake>
 800f702:	4603      	mov	r3, r0
 800f704:	2b01      	cmp	r3, #1
 800f706:	d009      	beq.n	800f71c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800f708:	683b      	ldr	r3, [r7, #0]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d003      	beq.n	800f716 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800f70e:	f06f 0301 	mvn.w	r3, #1
 800f712:	617b      	str	r3, [r7, #20]
 800f714:	e002      	b.n	800f71c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800f716:	f06f 0302 	mvn.w	r3, #2
 800f71a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800f71c:	697b      	ldr	r3, [r7, #20]
}
 800f71e:	4618      	mov	r0, r3
 800f720:	3718      	adds	r7, #24
 800f722:	46bd      	mov	sp, r7
 800f724:	bd80      	pop	{r7, pc}
 800f726:	bf00      	nop
 800f728:	e000ed04 	.word	0xe000ed04

0800f72c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b086      	sub	sp, #24
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f738:	2300      	movs	r3, #0
 800f73a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800f73c:	693b      	ldr	r3, [r7, #16]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d103      	bne.n	800f74a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800f742:	f06f 0303 	mvn.w	r3, #3
 800f746:	617b      	str	r3, [r7, #20]
 800f748:	e02c      	b.n	800f7a4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f74a:	f3ef 8305 	mrs	r3, IPSR
 800f74e:	60fb      	str	r3, [r7, #12]
  return(result);
 800f750:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f752:	2b00      	cmp	r3, #0
 800f754:	d01a      	beq.n	800f78c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800f756:	2300      	movs	r3, #0
 800f758:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f75a:	f107 0308 	add.w	r3, r7, #8
 800f75e:	4619      	mov	r1, r3
 800f760:	6938      	ldr	r0, [r7, #16]
 800f762:	f000 fe5c 	bl	801041e <xQueueGiveFromISR>
 800f766:	4603      	mov	r3, r0
 800f768:	2b01      	cmp	r3, #1
 800f76a:	d003      	beq.n	800f774 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800f76c:	f06f 0302 	mvn.w	r3, #2
 800f770:	617b      	str	r3, [r7, #20]
 800f772:	e017      	b.n	800f7a4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800f774:	68bb      	ldr	r3, [r7, #8]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d014      	beq.n	800f7a4 <osSemaphoreRelease+0x78>
 800f77a:	4b0d      	ldr	r3, [pc, #52]	; (800f7b0 <osSemaphoreRelease+0x84>)
 800f77c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f780:	601a      	str	r2, [r3, #0]
 800f782:	f3bf 8f4f 	dsb	sy
 800f786:	f3bf 8f6f 	isb	sy
 800f78a:	e00b      	b.n	800f7a4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f78c:	2300      	movs	r3, #0
 800f78e:	2200      	movs	r2, #0
 800f790:	2100      	movs	r1, #0
 800f792:	6938      	ldr	r0, [r7, #16]
 800f794:	f000 fcaa 	bl	80100ec <xQueueGenericSend>
 800f798:	4603      	mov	r3, r0
 800f79a:	2b01      	cmp	r3, #1
 800f79c:	d002      	beq.n	800f7a4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800f79e:	f06f 0302 	mvn.w	r3, #2
 800f7a2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800f7a4:	697b      	ldr	r3, [r7, #20]
}
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	3718      	adds	r7, #24
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	bd80      	pop	{r7, pc}
 800f7ae:	bf00      	nop
 800f7b0:	e000ed04 	.word	0xe000ed04

0800f7b4 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b086      	sub	sp, #24
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f7c0:	f3ef 8305 	mrs	r3, IPSR
 800f7c4:	60fb      	str	r3, [r7, #12]
  return(result);
 800f7c6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d003      	beq.n	800f7d4 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800f7cc:	f06f 0305 	mvn.w	r3, #5
 800f7d0:	617b      	str	r3, [r7, #20]
 800f7d2:	e00e      	b.n	800f7f2 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800f7d4:	693b      	ldr	r3, [r7, #16]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d103      	bne.n	800f7e2 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800f7da:	f06f 0303 	mvn.w	r3, #3
 800f7de:	617b      	str	r3, [r7, #20]
 800f7e0:	e007      	b.n	800f7f2 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800f7e2:	6938      	ldr	r0, [r7, #16]
 800f7e4:	f001 fa8a 	bl	8010cfc <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800f7ec:	6938      	ldr	r0, [r7, #16]
 800f7ee:	f001 f90f 	bl	8010a10 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800f7f2:	697b      	ldr	r3, [r7, #20]
}
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	3718      	adds	r7, #24
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	bd80      	pop	{r7, pc}

0800f7fc <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b08a      	sub	sp, #40	; 0x28
 800f800:	af02      	add	r7, sp, #8
 800f802:	60f8      	str	r0, [r7, #12]
 800f804:	60b9      	str	r1, [r7, #8]
 800f806:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800f808:	2300      	movs	r3, #0
 800f80a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f80c:	f3ef 8305 	mrs	r3, IPSR
 800f810:	613b      	str	r3, [r7, #16]
  return(result);
 800f812:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f814:	2b00      	cmp	r3, #0
 800f816:	d15f      	bne.n	800f8d8 <osMessageQueueNew+0xdc>
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d05c      	beq.n	800f8d8 <osMessageQueueNew+0xdc>
 800f81e:	68bb      	ldr	r3, [r7, #8]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d059      	beq.n	800f8d8 <osMessageQueueNew+0xdc>
    mem = -1;
 800f824:	f04f 33ff 	mov.w	r3, #4294967295
 800f828:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d029      	beq.n	800f884 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	689b      	ldr	r3, [r3, #8]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d012      	beq.n	800f85e <osMessageQueueNew+0x62>
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	68db      	ldr	r3, [r3, #12]
 800f83c:	2b4f      	cmp	r3, #79	; 0x4f
 800f83e:	d90e      	bls.n	800f85e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f844:	2b00      	cmp	r3, #0
 800f846:	d00a      	beq.n	800f85e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	695a      	ldr	r2, [r3, #20]
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	68b9      	ldr	r1, [r7, #8]
 800f850:	fb01 f303 	mul.w	r3, r1, r3
 800f854:	429a      	cmp	r2, r3
 800f856:	d302      	bcc.n	800f85e <osMessageQueueNew+0x62>
        mem = 1;
 800f858:	2301      	movs	r3, #1
 800f85a:	61bb      	str	r3, [r7, #24]
 800f85c:	e014      	b.n	800f888 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	689b      	ldr	r3, [r3, #8]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d110      	bne.n	800f888 <osMessageQueueNew+0x8c>
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	68db      	ldr	r3, [r3, #12]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d10c      	bne.n	800f888 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f872:	2b00      	cmp	r3, #0
 800f874:	d108      	bne.n	800f888 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	695b      	ldr	r3, [r3, #20]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d104      	bne.n	800f888 <osMessageQueueNew+0x8c>
          mem = 0;
 800f87e:	2300      	movs	r3, #0
 800f880:	61bb      	str	r3, [r7, #24]
 800f882:	e001      	b.n	800f888 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800f884:	2300      	movs	r3, #0
 800f886:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f888:	69bb      	ldr	r3, [r7, #24]
 800f88a:	2b01      	cmp	r3, #1
 800f88c:	d10b      	bne.n	800f8a6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	691a      	ldr	r2, [r3, #16]
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	689b      	ldr	r3, [r3, #8]
 800f896:	2100      	movs	r1, #0
 800f898:	9100      	str	r1, [sp, #0]
 800f89a:	68b9      	ldr	r1, [r7, #8]
 800f89c:	68f8      	ldr	r0, [r7, #12]
 800f89e:	f000 fa2f 	bl	800fd00 <xQueueGenericCreateStatic>
 800f8a2:	61f8      	str	r0, [r7, #28]
 800f8a4:	e008      	b.n	800f8b8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800f8a6:	69bb      	ldr	r3, [r7, #24]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d105      	bne.n	800f8b8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	68b9      	ldr	r1, [r7, #8]
 800f8b0:	68f8      	ldr	r0, [r7, #12]
 800f8b2:	f000 fa9d 	bl	800fdf0 <xQueueGenericCreate>
 800f8b6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800f8b8:	69fb      	ldr	r3, [r7, #28]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d00c      	beq.n	800f8d8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d003      	beq.n	800f8cc <osMessageQueueNew+0xd0>
        name = attr->name;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	617b      	str	r3, [r7, #20]
 800f8ca:	e001      	b.n	800f8d0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800f8d0:	6979      	ldr	r1, [r7, #20]
 800f8d2:	69f8      	ldr	r0, [r7, #28]
 800f8d4:	f001 f9e8 	bl	8010ca8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800f8d8:	69fb      	ldr	r3, [r7, #28]
}
 800f8da:	4618      	mov	r0, r3
 800f8dc:	3720      	adds	r7, #32
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	bd80      	pop	{r7, pc}
	...

0800f8e4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b088      	sub	sp, #32
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	60f8      	str	r0, [r7, #12]
 800f8ec:	60b9      	str	r1, [r7, #8]
 800f8ee:	603b      	str	r3, [r7, #0]
 800f8f0:	4613      	mov	r3, r2
 800f8f2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f8fc:	f3ef 8305 	mrs	r3, IPSR
 800f900:	617b      	str	r3, [r7, #20]
  return(result);
 800f902:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800f904:	2b00      	cmp	r3, #0
 800f906:	d028      	beq.n	800f95a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f908:	69bb      	ldr	r3, [r7, #24]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d005      	beq.n	800f91a <osMessageQueuePut+0x36>
 800f90e:	68bb      	ldr	r3, [r7, #8]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d002      	beq.n	800f91a <osMessageQueuePut+0x36>
 800f914:	683b      	ldr	r3, [r7, #0]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d003      	beq.n	800f922 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800f91a:	f06f 0303 	mvn.w	r3, #3
 800f91e:	61fb      	str	r3, [r7, #28]
 800f920:	e038      	b.n	800f994 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800f922:	2300      	movs	r3, #0
 800f924:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f926:	f107 0210 	add.w	r2, r7, #16
 800f92a:	2300      	movs	r3, #0
 800f92c:	68b9      	ldr	r1, [r7, #8]
 800f92e:	69b8      	ldr	r0, [r7, #24]
 800f930:	f000 fcda 	bl	80102e8 <xQueueGenericSendFromISR>
 800f934:	4603      	mov	r3, r0
 800f936:	2b01      	cmp	r3, #1
 800f938:	d003      	beq.n	800f942 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800f93a:	f06f 0302 	mvn.w	r3, #2
 800f93e:	61fb      	str	r3, [r7, #28]
 800f940:	e028      	b.n	800f994 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800f942:	693b      	ldr	r3, [r7, #16]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d025      	beq.n	800f994 <osMessageQueuePut+0xb0>
 800f948:	4b15      	ldr	r3, [pc, #84]	; (800f9a0 <osMessageQueuePut+0xbc>)
 800f94a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f94e:	601a      	str	r2, [r3, #0]
 800f950:	f3bf 8f4f 	dsb	sy
 800f954:	f3bf 8f6f 	isb	sy
 800f958:	e01c      	b.n	800f994 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f95a:	69bb      	ldr	r3, [r7, #24]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d002      	beq.n	800f966 <osMessageQueuePut+0x82>
 800f960:	68bb      	ldr	r3, [r7, #8]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d103      	bne.n	800f96e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800f966:	f06f 0303 	mvn.w	r3, #3
 800f96a:	61fb      	str	r3, [r7, #28]
 800f96c:	e012      	b.n	800f994 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f96e:	2300      	movs	r3, #0
 800f970:	683a      	ldr	r2, [r7, #0]
 800f972:	68b9      	ldr	r1, [r7, #8]
 800f974:	69b8      	ldr	r0, [r7, #24]
 800f976:	f000 fbb9 	bl	80100ec <xQueueGenericSend>
 800f97a:	4603      	mov	r3, r0
 800f97c:	2b01      	cmp	r3, #1
 800f97e:	d009      	beq.n	800f994 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800f980:	683b      	ldr	r3, [r7, #0]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d003      	beq.n	800f98e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800f986:	f06f 0301 	mvn.w	r3, #1
 800f98a:	61fb      	str	r3, [r7, #28]
 800f98c:	e002      	b.n	800f994 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800f98e:	f06f 0302 	mvn.w	r3, #2
 800f992:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800f994:	69fb      	ldr	r3, [r7, #28]
}
 800f996:	4618      	mov	r0, r3
 800f998:	3720      	adds	r7, #32
 800f99a:	46bd      	mov	sp, r7
 800f99c:	bd80      	pop	{r7, pc}
 800f99e:	bf00      	nop
 800f9a0:	e000ed04 	.word	0xe000ed04

0800f9a4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b088      	sub	sp, #32
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	60f8      	str	r0, [r7, #12]
 800f9ac:	60b9      	str	r1, [r7, #8]
 800f9ae:	607a      	str	r2, [r7, #4]
 800f9b0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f9ba:	f3ef 8305 	mrs	r3, IPSR
 800f9be:	617b      	str	r3, [r7, #20]
  return(result);
 800f9c0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d028      	beq.n	800fa18 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f9c6:	69bb      	ldr	r3, [r7, #24]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d005      	beq.n	800f9d8 <osMessageQueueGet+0x34>
 800f9cc:	68bb      	ldr	r3, [r7, #8]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d002      	beq.n	800f9d8 <osMessageQueueGet+0x34>
 800f9d2:	683b      	ldr	r3, [r7, #0]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d003      	beq.n	800f9e0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800f9d8:	f06f 0303 	mvn.w	r3, #3
 800f9dc:	61fb      	str	r3, [r7, #28]
 800f9de:	e037      	b.n	800fa50 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f9e4:	f107 0310 	add.w	r3, r7, #16
 800f9e8:	461a      	mov	r2, r3
 800f9ea:	68b9      	ldr	r1, [r7, #8]
 800f9ec:	69b8      	ldr	r0, [r7, #24]
 800f9ee:	f000 ff8f 	bl	8010910 <xQueueReceiveFromISR>
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	2b01      	cmp	r3, #1
 800f9f6:	d003      	beq.n	800fa00 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800f9f8:	f06f 0302 	mvn.w	r3, #2
 800f9fc:	61fb      	str	r3, [r7, #28]
 800f9fe:	e027      	b.n	800fa50 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800fa00:	693b      	ldr	r3, [r7, #16]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d024      	beq.n	800fa50 <osMessageQueueGet+0xac>
 800fa06:	4b15      	ldr	r3, [pc, #84]	; (800fa5c <osMessageQueueGet+0xb8>)
 800fa08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa0c:	601a      	str	r2, [r3, #0]
 800fa0e:	f3bf 8f4f 	dsb	sy
 800fa12:	f3bf 8f6f 	isb	sy
 800fa16:	e01b      	b.n	800fa50 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800fa18:	69bb      	ldr	r3, [r7, #24]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d002      	beq.n	800fa24 <osMessageQueueGet+0x80>
 800fa1e:	68bb      	ldr	r3, [r7, #8]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d103      	bne.n	800fa2c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800fa24:	f06f 0303 	mvn.w	r3, #3
 800fa28:	61fb      	str	r3, [r7, #28]
 800fa2a:	e011      	b.n	800fa50 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800fa2c:	683a      	ldr	r2, [r7, #0]
 800fa2e:	68b9      	ldr	r1, [r7, #8]
 800fa30:	69b8      	ldr	r0, [r7, #24]
 800fa32:	f000 fd81 	bl	8010538 <xQueueReceive>
 800fa36:	4603      	mov	r3, r0
 800fa38:	2b01      	cmp	r3, #1
 800fa3a:	d009      	beq.n	800fa50 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800fa3c:	683b      	ldr	r3, [r7, #0]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d003      	beq.n	800fa4a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800fa42:	f06f 0301 	mvn.w	r3, #1
 800fa46:	61fb      	str	r3, [r7, #28]
 800fa48:	e002      	b.n	800fa50 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800fa4a:	f06f 0302 	mvn.w	r3, #2
 800fa4e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800fa50:	69fb      	ldr	r3, [r7, #28]
}
 800fa52:	4618      	mov	r0, r3
 800fa54:	3720      	adds	r7, #32
 800fa56:	46bd      	mov	sp, r7
 800fa58:	bd80      	pop	{r7, pc}
 800fa5a:	bf00      	nop
 800fa5c:	e000ed04 	.word	0xe000ed04

0800fa60 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800fa60:	b480      	push	{r7}
 800fa62:	b085      	sub	sp, #20
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	60f8      	str	r0, [r7, #12]
 800fa68:	60b9      	str	r1, [r7, #8]
 800fa6a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	4a07      	ldr	r2, [pc, #28]	; (800fa8c <vApplicationGetIdleTaskMemory+0x2c>)
 800fa70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800fa72:	68bb      	ldr	r3, [r7, #8]
 800fa74:	4a06      	ldr	r2, [pc, #24]	; (800fa90 <vApplicationGetIdleTaskMemory+0x30>)
 800fa76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	2280      	movs	r2, #128	; 0x80
 800fa7c:	601a      	str	r2, [r3, #0]
}
 800fa7e:	bf00      	nop
 800fa80:	3714      	adds	r7, #20
 800fa82:	46bd      	mov	sp, r7
 800fa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa88:	4770      	bx	lr
 800fa8a:	bf00      	nop
 800fa8c:	200041dc 	.word	0x200041dc
 800fa90:	2000423c 	.word	0x2000423c

0800fa94 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800fa94:	b480      	push	{r7}
 800fa96:	b085      	sub	sp, #20
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	60f8      	str	r0, [r7, #12]
 800fa9c:	60b9      	str	r1, [r7, #8]
 800fa9e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	4a07      	ldr	r2, [pc, #28]	; (800fac0 <vApplicationGetTimerTaskMemory+0x2c>)
 800faa4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800faa6:	68bb      	ldr	r3, [r7, #8]
 800faa8:	4a06      	ldr	r2, [pc, #24]	; (800fac4 <vApplicationGetTimerTaskMemory+0x30>)
 800faaa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fab2:	601a      	str	r2, [r3, #0]
}
 800fab4:	bf00      	nop
 800fab6:	3714      	adds	r7, #20
 800fab8:	46bd      	mov	sp, r7
 800faba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabe:	4770      	bx	lr
 800fac0:	2000443c 	.word	0x2000443c
 800fac4:	2000449c 	.word	0x2000449c

0800fac8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fac8:	b480      	push	{r7}
 800faca:	b083      	sub	sp, #12
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	f103 0208 	add.w	r2, r3, #8
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	f04f 32ff 	mov.w	r2, #4294967295
 800fae0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	f103 0208 	add.w	r2, r3, #8
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	f103 0208 	add.w	r2, r3, #8
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	2200      	movs	r2, #0
 800fafa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fafc:	bf00      	nop
 800fafe:	370c      	adds	r7, #12
 800fb00:	46bd      	mov	sp, r7
 800fb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb06:	4770      	bx	lr

0800fb08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800fb08:	b480      	push	{r7}
 800fb0a:	b083      	sub	sp, #12
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	2200      	movs	r2, #0
 800fb14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fb16:	bf00      	nop
 800fb18:	370c      	adds	r7, #12
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb20:	4770      	bx	lr

0800fb22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fb22:	b480      	push	{r7}
 800fb24:	b085      	sub	sp, #20
 800fb26:	af00      	add	r7, sp, #0
 800fb28:	6078      	str	r0, [r7, #4]
 800fb2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	685b      	ldr	r3, [r3, #4]
 800fb30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fb32:	683b      	ldr	r3, [r7, #0]
 800fb34:	68fa      	ldr	r2, [r7, #12]
 800fb36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	689a      	ldr	r2, [r3, #8]
 800fb3c:	683b      	ldr	r3, [r7, #0]
 800fb3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	689b      	ldr	r3, [r3, #8]
 800fb44:	683a      	ldr	r2, [r7, #0]
 800fb46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	683a      	ldr	r2, [r7, #0]
 800fb4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800fb4e:	683b      	ldr	r3, [r7, #0]
 800fb50:	687a      	ldr	r2, [r7, #4]
 800fb52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	1c5a      	adds	r2, r3, #1
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	601a      	str	r2, [r3, #0]
}
 800fb5e:	bf00      	nop
 800fb60:	3714      	adds	r7, #20
 800fb62:	46bd      	mov	sp, r7
 800fb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb68:	4770      	bx	lr

0800fb6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fb6a:	b480      	push	{r7}
 800fb6c:	b085      	sub	sp, #20
 800fb6e:	af00      	add	r7, sp, #0
 800fb70:	6078      	str	r0, [r7, #4]
 800fb72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fb74:	683b      	ldr	r3, [r7, #0]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fb7a:	68bb      	ldr	r3, [r7, #8]
 800fb7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb80:	d103      	bne.n	800fb8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	691b      	ldr	r3, [r3, #16]
 800fb86:	60fb      	str	r3, [r7, #12]
 800fb88:	e00c      	b.n	800fba4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	3308      	adds	r3, #8
 800fb8e:	60fb      	str	r3, [r7, #12]
 800fb90:	e002      	b.n	800fb98 <vListInsert+0x2e>
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	685b      	ldr	r3, [r3, #4]
 800fb96:	60fb      	str	r3, [r7, #12]
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	685b      	ldr	r3, [r3, #4]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	68ba      	ldr	r2, [r7, #8]
 800fba0:	429a      	cmp	r2, r3
 800fba2:	d2f6      	bcs.n	800fb92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	685a      	ldr	r2, [r3, #4]
 800fba8:	683b      	ldr	r3, [r7, #0]
 800fbaa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fbac:	683b      	ldr	r3, [r7, #0]
 800fbae:	685b      	ldr	r3, [r3, #4]
 800fbb0:	683a      	ldr	r2, [r7, #0]
 800fbb2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fbb4:	683b      	ldr	r3, [r7, #0]
 800fbb6:	68fa      	ldr	r2, [r7, #12]
 800fbb8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	683a      	ldr	r2, [r7, #0]
 800fbbe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800fbc0:	683b      	ldr	r3, [r7, #0]
 800fbc2:	687a      	ldr	r2, [r7, #4]
 800fbc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	1c5a      	adds	r2, r3, #1
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	601a      	str	r2, [r3, #0]
}
 800fbd0:	bf00      	nop
 800fbd2:	3714      	adds	r7, #20
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbda:	4770      	bx	lr

0800fbdc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fbdc:	b480      	push	{r7}
 800fbde:	b085      	sub	sp, #20
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	691b      	ldr	r3, [r3, #16]
 800fbe8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	685b      	ldr	r3, [r3, #4]
 800fbee:	687a      	ldr	r2, [r7, #4]
 800fbf0:	6892      	ldr	r2, [r2, #8]
 800fbf2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	689b      	ldr	r3, [r3, #8]
 800fbf8:	687a      	ldr	r2, [r7, #4]
 800fbfa:	6852      	ldr	r2, [r2, #4]
 800fbfc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	685b      	ldr	r3, [r3, #4]
 800fc02:	687a      	ldr	r2, [r7, #4]
 800fc04:	429a      	cmp	r2, r3
 800fc06:	d103      	bne.n	800fc10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	689a      	ldr	r2, [r3, #8]
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	2200      	movs	r2, #0
 800fc14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	1e5a      	subs	r2, r3, #1
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	681b      	ldr	r3, [r3, #0]
}
 800fc24:	4618      	mov	r0, r3
 800fc26:	3714      	adds	r7, #20
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2e:	4770      	bx	lr

0800fc30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b084      	sub	sp, #16
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
 800fc38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d10a      	bne.n	800fc5a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fc44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc48:	f383 8811 	msr	BASEPRI, r3
 800fc4c:	f3bf 8f6f 	isb	sy
 800fc50:	f3bf 8f4f 	dsb	sy
 800fc54:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800fc56:	bf00      	nop
 800fc58:	e7fe      	b.n	800fc58 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800fc5a:	f003 f8e3 	bl	8012e24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	681a      	ldr	r2, [r3, #0]
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc66:	68f9      	ldr	r1, [r7, #12]
 800fc68:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fc6a:	fb01 f303 	mul.w	r3, r1, r3
 800fc6e:	441a      	add	r2, r3
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	2200      	movs	r2, #0
 800fc78:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	681a      	ldr	r2, [r3, #0]
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	681a      	ldr	r2, [r3, #0]
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc8a:	3b01      	subs	r3, #1
 800fc8c:	68f9      	ldr	r1, [r7, #12]
 800fc8e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fc90:	fb01 f303 	mul.w	r3, r1, r3
 800fc94:	441a      	add	r2, r3
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	22ff      	movs	r2, #255	; 0xff
 800fc9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	22ff      	movs	r2, #255	; 0xff
 800fca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800fcaa:	683b      	ldr	r3, [r7, #0]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d114      	bne.n	800fcda <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	691b      	ldr	r3, [r3, #16]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d01a      	beq.n	800fcee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	3310      	adds	r3, #16
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	f001 fe73 	bl	80119a8 <xTaskRemoveFromEventList>
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d012      	beq.n	800fcee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800fcc8:	4b0c      	ldr	r3, [pc, #48]	; (800fcfc <xQueueGenericReset+0xcc>)
 800fcca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcce:	601a      	str	r2, [r3, #0]
 800fcd0:	f3bf 8f4f 	dsb	sy
 800fcd4:	f3bf 8f6f 	isb	sy
 800fcd8:	e009      	b.n	800fcee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	3310      	adds	r3, #16
 800fcde:	4618      	mov	r0, r3
 800fce0:	f7ff fef2 	bl	800fac8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	3324      	adds	r3, #36	; 0x24
 800fce8:	4618      	mov	r0, r3
 800fcea:	f7ff feed 	bl	800fac8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fcee:	f003 f8c9 	bl	8012e84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fcf2:	2301      	movs	r3, #1
}
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	3710      	adds	r7, #16
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd80      	pop	{r7, pc}
 800fcfc:	e000ed04 	.word	0xe000ed04

0800fd00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b08e      	sub	sp, #56	; 0x38
 800fd04:	af02      	add	r7, sp, #8
 800fd06:	60f8      	str	r0, [r7, #12]
 800fd08:	60b9      	str	r1, [r7, #8]
 800fd0a:	607a      	str	r2, [r7, #4]
 800fd0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d10a      	bne.n	800fd2a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800fd14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd18:	f383 8811 	msr	BASEPRI, r3
 800fd1c:	f3bf 8f6f 	isb	sy
 800fd20:	f3bf 8f4f 	dsb	sy
 800fd24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fd26:	bf00      	nop
 800fd28:	e7fe      	b.n	800fd28 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fd2a:	683b      	ldr	r3, [r7, #0]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d10a      	bne.n	800fd46 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800fd30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd34:	f383 8811 	msr	BASEPRI, r3
 800fd38:	f3bf 8f6f 	isb	sy
 800fd3c:	f3bf 8f4f 	dsb	sy
 800fd40:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fd42:	bf00      	nop
 800fd44:	e7fe      	b.n	800fd44 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d002      	beq.n	800fd52 <xQueueGenericCreateStatic+0x52>
 800fd4c:	68bb      	ldr	r3, [r7, #8]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d001      	beq.n	800fd56 <xQueueGenericCreateStatic+0x56>
 800fd52:	2301      	movs	r3, #1
 800fd54:	e000      	b.n	800fd58 <xQueueGenericCreateStatic+0x58>
 800fd56:	2300      	movs	r3, #0
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d10a      	bne.n	800fd72 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800fd5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd60:	f383 8811 	msr	BASEPRI, r3
 800fd64:	f3bf 8f6f 	isb	sy
 800fd68:	f3bf 8f4f 	dsb	sy
 800fd6c:	623b      	str	r3, [r7, #32]
}
 800fd6e:	bf00      	nop
 800fd70:	e7fe      	b.n	800fd70 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d102      	bne.n	800fd7e <xQueueGenericCreateStatic+0x7e>
 800fd78:	68bb      	ldr	r3, [r7, #8]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d101      	bne.n	800fd82 <xQueueGenericCreateStatic+0x82>
 800fd7e:	2301      	movs	r3, #1
 800fd80:	e000      	b.n	800fd84 <xQueueGenericCreateStatic+0x84>
 800fd82:	2300      	movs	r3, #0
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d10a      	bne.n	800fd9e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800fd88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd8c:	f383 8811 	msr	BASEPRI, r3
 800fd90:	f3bf 8f6f 	isb	sy
 800fd94:	f3bf 8f4f 	dsb	sy
 800fd98:	61fb      	str	r3, [r7, #28]
}
 800fd9a:	bf00      	nop
 800fd9c:	e7fe      	b.n	800fd9c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fd9e:	2350      	movs	r3, #80	; 0x50
 800fda0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fda2:	697b      	ldr	r3, [r7, #20]
 800fda4:	2b50      	cmp	r3, #80	; 0x50
 800fda6:	d00a      	beq.n	800fdbe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800fda8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdac:	f383 8811 	msr	BASEPRI, r3
 800fdb0:	f3bf 8f6f 	isb	sy
 800fdb4:	f3bf 8f4f 	dsb	sy
 800fdb8:	61bb      	str	r3, [r7, #24]
}
 800fdba:	bf00      	nop
 800fdbc:	e7fe      	b.n	800fdbc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fdbe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fdc0:	683b      	ldr	r3, [r7, #0]
 800fdc2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800fdc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d00d      	beq.n	800fde6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fdca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdcc:	2201      	movs	r2, #1
 800fdce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fdd2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800fdd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdd8:	9300      	str	r3, [sp, #0]
 800fdda:	4613      	mov	r3, r2
 800fddc:	687a      	ldr	r2, [r7, #4]
 800fdde:	68b9      	ldr	r1, [r7, #8]
 800fde0:	68f8      	ldr	r0, [r7, #12]
 800fde2:	f000 f83f 	bl	800fe64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fde6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800fde8:	4618      	mov	r0, r3
 800fdea:	3730      	adds	r7, #48	; 0x30
 800fdec:	46bd      	mov	sp, r7
 800fdee:	bd80      	pop	{r7, pc}

0800fdf0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b08a      	sub	sp, #40	; 0x28
 800fdf4:	af02      	add	r7, sp, #8
 800fdf6:	60f8      	str	r0, [r7, #12]
 800fdf8:	60b9      	str	r1, [r7, #8]
 800fdfa:	4613      	mov	r3, r2
 800fdfc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d10a      	bne.n	800fe1a <xQueueGenericCreate+0x2a>
	__asm volatile
 800fe04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe08:	f383 8811 	msr	BASEPRI, r3
 800fe0c:	f3bf 8f6f 	isb	sy
 800fe10:	f3bf 8f4f 	dsb	sy
 800fe14:	613b      	str	r3, [r7, #16]
}
 800fe16:	bf00      	nop
 800fe18:	e7fe      	b.n	800fe18 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	68ba      	ldr	r2, [r7, #8]
 800fe1e:	fb02 f303 	mul.w	r3, r2, r3
 800fe22:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800fe24:	69fb      	ldr	r3, [r7, #28]
 800fe26:	3350      	adds	r3, #80	; 0x50
 800fe28:	4618      	mov	r0, r3
 800fe2a:	f003 f91d 	bl	8013068 <pvPortMalloc>
 800fe2e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800fe30:	69bb      	ldr	r3, [r7, #24]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d011      	beq.n	800fe5a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800fe36:	69bb      	ldr	r3, [r7, #24]
 800fe38:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fe3a:	697b      	ldr	r3, [r7, #20]
 800fe3c:	3350      	adds	r3, #80	; 0x50
 800fe3e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fe40:	69bb      	ldr	r3, [r7, #24]
 800fe42:	2200      	movs	r2, #0
 800fe44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fe48:	79fa      	ldrb	r2, [r7, #7]
 800fe4a:	69bb      	ldr	r3, [r7, #24]
 800fe4c:	9300      	str	r3, [sp, #0]
 800fe4e:	4613      	mov	r3, r2
 800fe50:	697a      	ldr	r2, [r7, #20]
 800fe52:	68b9      	ldr	r1, [r7, #8]
 800fe54:	68f8      	ldr	r0, [r7, #12]
 800fe56:	f000 f805 	bl	800fe64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fe5a:	69bb      	ldr	r3, [r7, #24]
	}
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	3720      	adds	r7, #32
 800fe60:	46bd      	mov	sp, r7
 800fe62:	bd80      	pop	{r7, pc}

0800fe64 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b084      	sub	sp, #16
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	60f8      	str	r0, [r7, #12]
 800fe6c:	60b9      	str	r1, [r7, #8]
 800fe6e:	607a      	str	r2, [r7, #4]
 800fe70:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800fe72:	68bb      	ldr	r3, [r7, #8]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d103      	bne.n	800fe80 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fe78:	69bb      	ldr	r3, [r7, #24]
 800fe7a:	69ba      	ldr	r2, [r7, #24]
 800fe7c:	601a      	str	r2, [r3, #0]
 800fe7e:	e002      	b.n	800fe86 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fe80:	69bb      	ldr	r3, [r7, #24]
 800fe82:	687a      	ldr	r2, [r7, #4]
 800fe84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fe86:	69bb      	ldr	r3, [r7, #24]
 800fe88:	68fa      	ldr	r2, [r7, #12]
 800fe8a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fe8c:	69bb      	ldr	r3, [r7, #24]
 800fe8e:	68ba      	ldr	r2, [r7, #8]
 800fe90:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fe92:	2101      	movs	r1, #1
 800fe94:	69b8      	ldr	r0, [r7, #24]
 800fe96:	f7ff fecb 	bl	800fc30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800fe9a:	69bb      	ldr	r3, [r7, #24]
 800fe9c:	78fa      	ldrb	r2, [r7, #3]
 800fe9e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fea2:	bf00      	nop
 800fea4:	3710      	adds	r7, #16
 800fea6:	46bd      	mov	sp, r7
 800fea8:	bd80      	pop	{r7, pc}

0800feaa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800feaa:	b580      	push	{r7, lr}
 800feac:	b082      	sub	sp, #8
 800feae:	af00      	add	r7, sp, #0
 800feb0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d00e      	beq.n	800fed6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	2200      	movs	r2, #0
 800febc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	2200      	movs	r2, #0
 800fec2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	2200      	movs	r2, #0
 800fec8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800feca:	2300      	movs	r3, #0
 800fecc:	2200      	movs	r2, #0
 800fece:	2100      	movs	r1, #0
 800fed0:	6878      	ldr	r0, [r7, #4]
 800fed2:	f000 f90b 	bl	80100ec <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800fed6:	bf00      	nop
 800fed8:	3708      	adds	r7, #8
 800feda:	46bd      	mov	sp, r7
 800fedc:	bd80      	pop	{r7, pc}

0800fede <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800fede:	b580      	push	{r7, lr}
 800fee0:	b086      	sub	sp, #24
 800fee2:	af00      	add	r7, sp, #0
 800fee4:	4603      	mov	r3, r0
 800fee6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fee8:	2301      	movs	r3, #1
 800feea:	617b      	str	r3, [r7, #20]
 800feec:	2300      	movs	r3, #0
 800feee:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800fef0:	79fb      	ldrb	r3, [r7, #7]
 800fef2:	461a      	mov	r2, r3
 800fef4:	6939      	ldr	r1, [r7, #16]
 800fef6:	6978      	ldr	r0, [r7, #20]
 800fef8:	f7ff ff7a 	bl	800fdf0 <xQueueGenericCreate>
 800fefc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800fefe:	68f8      	ldr	r0, [r7, #12]
 800ff00:	f7ff ffd3 	bl	800feaa <prvInitialiseMutex>

		return xNewQueue;
 800ff04:	68fb      	ldr	r3, [r7, #12]
	}
 800ff06:	4618      	mov	r0, r3
 800ff08:	3718      	adds	r7, #24
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd80      	pop	{r7, pc}

0800ff0e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ff0e:	b580      	push	{r7, lr}
 800ff10:	b088      	sub	sp, #32
 800ff12:	af02      	add	r7, sp, #8
 800ff14:	4603      	mov	r3, r0
 800ff16:	6039      	str	r1, [r7, #0]
 800ff18:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ff1a:	2301      	movs	r3, #1
 800ff1c:	617b      	str	r3, [r7, #20]
 800ff1e:	2300      	movs	r3, #0
 800ff20:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ff22:	79fb      	ldrb	r3, [r7, #7]
 800ff24:	9300      	str	r3, [sp, #0]
 800ff26:	683b      	ldr	r3, [r7, #0]
 800ff28:	2200      	movs	r2, #0
 800ff2a:	6939      	ldr	r1, [r7, #16]
 800ff2c:	6978      	ldr	r0, [r7, #20]
 800ff2e:	f7ff fee7 	bl	800fd00 <xQueueGenericCreateStatic>
 800ff32:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ff34:	68f8      	ldr	r0, [r7, #12]
 800ff36:	f7ff ffb8 	bl	800feaa <prvInitialiseMutex>

		return xNewQueue;
 800ff3a:	68fb      	ldr	r3, [r7, #12]
	}
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	3718      	adds	r7, #24
 800ff40:	46bd      	mov	sp, r7
 800ff42:	bd80      	pop	{r7, pc}

0800ff44 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800ff44:	b590      	push	{r4, r7, lr}
 800ff46:	b087      	sub	sp, #28
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800ff50:	693b      	ldr	r3, [r7, #16]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d10a      	bne.n	800ff6c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800ff56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff5a:	f383 8811 	msr	BASEPRI, r3
 800ff5e:	f3bf 8f6f 	isb	sy
 800ff62:	f3bf 8f4f 	dsb	sy
 800ff66:	60fb      	str	r3, [r7, #12]
}
 800ff68:	bf00      	nop
 800ff6a:	e7fe      	b.n	800ff6a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800ff6c:	693b      	ldr	r3, [r7, #16]
 800ff6e:	689c      	ldr	r4, [r3, #8]
 800ff70:	f001 ffac 	bl	8011ecc <xTaskGetCurrentTaskHandle>
 800ff74:	4603      	mov	r3, r0
 800ff76:	429c      	cmp	r4, r3
 800ff78:	d111      	bne.n	800ff9e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800ff7a:	693b      	ldr	r3, [r7, #16]
 800ff7c:	68db      	ldr	r3, [r3, #12]
 800ff7e:	1e5a      	subs	r2, r3, #1
 800ff80:	693b      	ldr	r3, [r7, #16]
 800ff82:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800ff84:	693b      	ldr	r3, [r7, #16]
 800ff86:	68db      	ldr	r3, [r3, #12]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d105      	bne.n	800ff98 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	2200      	movs	r2, #0
 800ff90:	2100      	movs	r1, #0
 800ff92:	6938      	ldr	r0, [r7, #16]
 800ff94:	f000 f8aa 	bl	80100ec <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800ff98:	2301      	movs	r3, #1
 800ff9a:	617b      	str	r3, [r7, #20]
 800ff9c:	e001      	b.n	800ffa2 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800ffa2:	697b      	ldr	r3, [r7, #20]
	}
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	371c      	adds	r7, #28
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd90      	pop	{r4, r7, pc}

0800ffac <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800ffac:	b590      	push	{r4, r7, lr}
 800ffae:	b087      	sub	sp, #28
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
 800ffb4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800ffba:	693b      	ldr	r3, [r7, #16]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d10a      	bne.n	800ffd6 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800ffc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffc4:	f383 8811 	msr	BASEPRI, r3
 800ffc8:	f3bf 8f6f 	isb	sy
 800ffcc:	f3bf 8f4f 	dsb	sy
 800ffd0:	60fb      	str	r3, [r7, #12]
}
 800ffd2:	bf00      	nop
 800ffd4:	e7fe      	b.n	800ffd4 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800ffd6:	693b      	ldr	r3, [r7, #16]
 800ffd8:	689c      	ldr	r4, [r3, #8]
 800ffda:	f001 ff77 	bl	8011ecc <xTaskGetCurrentTaskHandle>
 800ffde:	4603      	mov	r3, r0
 800ffe0:	429c      	cmp	r4, r3
 800ffe2:	d107      	bne.n	800fff4 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ffe4:	693b      	ldr	r3, [r7, #16]
 800ffe6:	68db      	ldr	r3, [r3, #12]
 800ffe8:	1c5a      	adds	r2, r3, #1
 800ffea:	693b      	ldr	r3, [r7, #16]
 800ffec:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800ffee:	2301      	movs	r3, #1
 800fff0:	617b      	str	r3, [r7, #20]
 800fff2:	e00c      	b.n	801000e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800fff4:	6839      	ldr	r1, [r7, #0]
 800fff6:	6938      	ldr	r0, [r7, #16]
 800fff8:	f000 fb7e 	bl	80106f8 <xQueueSemaphoreTake>
 800fffc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800fffe:	697b      	ldr	r3, [r7, #20]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d004      	beq.n	801000e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8010004:	693b      	ldr	r3, [r7, #16]
 8010006:	68db      	ldr	r3, [r3, #12]
 8010008:	1c5a      	adds	r2, r3, #1
 801000a:	693b      	ldr	r3, [r7, #16]
 801000c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 801000e:	697b      	ldr	r3, [r7, #20]
	}
 8010010:	4618      	mov	r0, r3
 8010012:	371c      	adds	r7, #28
 8010014:	46bd      	mov	sp, r7
 8010016:	bd90      	pop	{r4, r7, pc}

08010018 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8010018:	b580      	push	{r7, lr}
 801001a:	b08a      	sub	sp, #40	; 0x28
 801001c:	af02      	add	r7, sp, #8
 801001e:	60f8      	str	r0, [r7, #12]
 8010020:	60b9      	str	r1, [r7, #8]
 8010022:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d10a      	bne.n	8010040 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 801002a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801002e:	f383 8811 	msr	BASEPRI, r3
 8010032:	f3bf 8f6f 	isb	sy
 8010036:	f3bf 8f4f 	dsb	sy
 801003a:	61bb      	str	r3, [r7, #24]
}
 801003c:	bf00      	nop
 801003e:	e7fe      	b.n	801003e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010040:	68ba      	ldr	r2, [r7, #8]
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	429a      	cmp	r2, r3
 8010046:	d90a      	bls.n	801005e <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8010048:	f04f 0350 	mov.w	r3, #80	; 0x50
 801004c:	f383 8811 	msr	BASEPRI, r3
 8010050:	f3bf 8f6f 	isb	sy
 8010054:	f3bf 8f4f 	dsb	sy
 8010058:	617b      	str	r3, [r7, #20]
}
 801005a:	bf00      	nop
 801005c:	e7fe      	b.n	801005c <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801005e:	2302      	movs	r3, #2
 8010060:	9300      	str	r3, [sp, #0]
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	2200      	movs	r2, #0
 8010066:	2100      	movs	r1, #0
 8010068:	68f8      	ldr	r0, [r7, #12]
 801006a:	f7ff fe49 	bl	800fd00 <xQueueGenericCreateStatic>
 801006e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8010070:	69fb      	ldr	r3, [r7, #28]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d002      	beq.n	801007c <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010076:	69fb      	ldr	r3, [r7, #28]
 8010078:	68ba      	ldr	r2, [r7, #8]
 801007a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801007c:	69fb      	ldr	r3, [r7, #28]
	}
 801007e:	4618      	mov	r0, r3
 8010080:	3720      	adds	r7, #32
 8010082:	46bd      	mov	sp, r7
 8010084:	bd80      	pop	{r7, pc}

08010086 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8010086:	b580      	push	{r7, lr}
 8010088:	b086      	sub	sp, #24
 801008a:	af00      	add	r7, sp, #0
 801008c:	6078      	str	r0, [r7, #4]
 801008e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d10a      	bne.n	80100ac <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8010096:	f04f 0350 	mov.w	r3, #80	; 0x50
 801009a:	f383 8811 	msr	BASEPRI, r3
 801009e:	f3bf 8f6f 	isb	sy
 80100a2:	f3bf 8f4f 	dsb	sy
 80100a6:	613b      	str	r3, [r7, #16]
}
 80100a8:	bf00      	nop
 80100aa:	e7fe      	b.n	80100aa <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80100ac:	683a      	ldr	r2, [r7, #0]
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	429a      	cmp	r2, r3
 80100b2:	d90a      	bls.n	80100ca <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80100b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100b8:	f383 8811 	msr	BASEPRI, r3
 80100bc:	f3bf 8f6f 	isb	sy
 80100c0:	f3bf 8f4f 	dsb	sy
 80100c4:	60fb      	str	r3, [r7, #12]
}
 80100c6:	bf00      	nop
 80100c8:	e7fe      	b.n	80100c8 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80100ca:	2202      	movs	r2, #2
 80100cc:	2100      	movs	r1, #0
 80100ce:	6878      	ldr	r0, [r7, #4]
 80100d0:	f7ff fe8e 	bl	800fdf0 <xQueueGenericCreate>
 80100d4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80100d6:	697b      	ldr	r3, [r7, #20]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d002      	beq.n	80100e2 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80100dc:	697b      	ldr	r3, [r7, #20]
 80100de:	683a      	ldr	r2, [r7, #0]
 80100e0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80100e2:	697b      	ldr	r3, [r7, #20]
	}
 80100e4:	4618      	mov	r0, r3
 80100e6:	3718      	adds	r7, #24
 80100e8:	46bd      	mov	sp, r7
 80100ea:	bd80      	pop	{r7, pc}

080100ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b08e      	sub	sp, #56	; 0x38
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	60f8      	str	r0, [r7, #12]
 80100f4:	60b9      	str	r1, [r7, #8]
 80100f6:	607a      	str	r2, [r7, #4]
 80100f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80100fa:	2300      	movs	r3, #0
 80100fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010104:	2b00      	cmp	r3, #0
 8010106:	d10a      	bne.n	801011e <xQueueGenericSend+0x32>
	__asm volatile
 8010108:	f04f 0350 	mov.w	r3, #80	; 0x50
 801010c:	f383 8811 	msr	BASEPRI, r3
 8010110:	f3bf 8f6f 	isb	sy
 8010114:	f3bf 8f4f 	dsb	sy
 8010118:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801011a:	bf00      	nop
 801011c:	e7fe      	b.n	801011c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801011e:	68bb      	ldr	r3, [r7, #8]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d103      	bne.n	801012c <xQueueGenericSend+0x40>
 8010124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010128:	2b00      	cmp	r3, #0
 801012a:	d101      	bne.n	8010130 <xQueueGenericSend+0x44>
 801012c:	2301      	movs	r3, #1
 801012e:	e000      	b.n	8010132 <xQueueGenericSend+0x46>
 8010130:	2300      	movs	r3, #0
 8010132:	2b00      	cmp	r3, #0
 8010134:	d10a      	bne.n	801014c <xQueueGenericSend+0x60>
	__asm volatile
 8010136:	f04f 0350 	mov.w	r3, #80	; 0x50
 801013a:	f383 8811 	msr	BASEPRI, r3
 801013e:	f3bf 8f6f 	isb	sy
 8010142:	f3bf 8f4f 	dsb	sy
 8010146:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010148:	bf00      	nop
 801014a:	e7fe      	b.n	801014a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801014c:	683b      	ldr	r3, [r7, #0]
 801014e:	2b02      	cmp	r3, #2
 8010150:	d103      	bne.n	801015a <xQueueGenericSend+0x6e>
 8010152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010156:	2b01      	cmp	r3, #1
 8010158:	d101      	bne.n	801015e <xQueueGenericSend+0x72>
 801015a:	2301      	movs	r3, #1
 801015c:	e000      	b.n	8010160 <xQueueGenericSend+0x74>
 801015e:	2300      	movs	r3, #0
 8010160:	2b00      	cmp	r3, #0
 8010162:	d10a      	bne.n	801017a <xQueueGenericSend+0x8e>
	__asm volatile
 8010164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010168:	f383 8811 	msr	BASEPRI, r3
 801016c:	f3bf 8f6f 	isb	sy
 8010170:	f3bf 8f4f 	dsb	sy
 8010174:	623b      	str	r3, [r7, #32]
}
 8010176:	bf00      	nop
 8010178:	e7fe      	b.n	8010178 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801017a:	f001 feb7 	bl	8011eec <xTaskGetSchedulerState>
 801017e:	4603      	mov	r3, r0
 8010180:	2b00      	cmp	r3, #0
 8010182:	d102      	bne.n	801018a <xQueueGenericSend+0x9e>
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d101      	bne.n	801018e <xQueueGenericSend+0xa2>
 801018a:	2301      	movs	r3, #1
 801018c:	e000      	b.n	8010190 <xQueueGenericSend+0xa4>
 801018e:	2300      	movs	r3, #0
 8010190:	2b00      	cmp	r3, #0
 8010192:	d10a      	bne.n	80101aa <xQueueGenericSend+0xbe>
	__asm volatile
 8010194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010198:	f383 8811 	msr	BASEPRI, r3
 801019c:	f3bf 8f6f 	isb	sy
 80101a0:	f3bf 8f4f 	dsb	sy
 80101a4:	61fb      	str	r3, [r7, #28]
}
 80101a6:	bf00      	nop
 80101a8:	e7fe      	b.n	80101a8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80101aa:	f002 fe3b 	bl	8012e24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80101ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80101b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101b6:	429a      	cmp	r2, r3
 80101b8:	d302      	bcc.n	80101c0 <xQueueGenericSend+0xd4>
 80101ba:	683b      	ldr	r3, [r7, #0]
 80101bc:	2b02      	cmp	r3, #2
 80101be:	d129      	bne.n	8010214 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80101c0:	683a      	ldr	r2, [r7, #0]
 80101c2:	68b9      	ldr	r1, [r7, #8]
 80101c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80101c6:	f000 fc5e 	bl	8010a86 <prvCopyDataToQueue>
 80101ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80101cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d010      	beq.n	80101f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80101d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101d6:	3324      	adds	r3, #36	; 0x24
 80101d8:	4618      	mov	r0, r3
 80101da:	f001 fbe5 	bl	80119a8 <xTaskRemoveFromEventList>
 80101de:	4603      	mov	r3, r0
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d013      	beq.n	801020c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80101e4:	4b3f      	ldr	r3, [pc, #252]	; (80102e4 <xQueueGenericSend+0x1f8>)
 80101e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101ea:	601a      	str	r2, [r3, #0]
 80101ec:	f3bf 8f4f 	dsb	sy
 80101f0:	f3bf 8f6f 	isb	sy
 80101f4:	e00a      	b.n	801020c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80101f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d007      	beq.n	801020c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80101fc:	4b39      	ldr	r3, [pc, #228]	; (80102e4 <xQueueGenericSend+0x1f8>)
 80101fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010202:	601a      	str	r2, [r3, #0]
 8010204:	f3bf 8f4f 	dsb	sy
 8010208:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801020c:	f002 fe3a 	bl	8012e84 <vPortExitCritical>
				return pdPASS;
 8010210:	2301      	movs	r3, #1
 8010212:	e063      	b.n	80102dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d103      	bne.n	8010222 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801021a:	f002 fe33 	bl	8012e84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801021e:	2300      	movs	r3, #0
 8010220:	e05c      	b.n	80102dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010224:	2b00      	cmp	r3, #0
 8010226:	d106      	bne.n	8010236 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010228:	f107 0314 	add.w	r3, r7, #20
 801022c:	4618      	mov	r0, r3
 801022e:	f001 fc1f 	bl	8011a70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010232:	2301      	movs	r3, #1
 8010234:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010236:	f002 fe25 	bl	8012e84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801023a:	f001 f8d5 	bl	80113e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801023e:	f002 fdf1 	bl	8012e24 <vPortEnterCritical>
 8010242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010244:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010248:	b25b      	sxtb	r3, r3
 801024a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801024e:	d103      	bne.n	8010258 <xQueueGenericSend+0x16c>
 8010250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010252:	2200      	movs	r2, #0
 8010254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801025a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801025e:	b25b      	sxtb	r3, r3
 8010260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010264:	d103      	bne.n	801026e <xQueueGenericSend+0x182>
 8010266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010268:	2200      	movs	r2, #0
 801026a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801026e:	f002 fe09 	bl	8012e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010272:	1d3a      	adds	r2, r7, #4
 8010274:	f107 0314 	add.w	r3, r7, #20
 8010278:	4611      	mov	r1, r2
 801027a:	4618      	mov	r0, r3
 801027c:	f001 fc0e 	bl	8011a9c <xTaskCheckForTimeOut>
 8010280:	4603      	mov	r3, r0
 8010282:	2b00      	cmp	r3, #0
 8010284:	d124      	bne.n	80102d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010286:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010288:	f000 fcf5 	bl	8010c76 <prvIsQueueFull>
 801028c:	4603      	mov	r3, r0
 801028e:	2b00      	cmp	r3, #0
 8010290:	d018      	beq.n	80102c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010294:	3310      	adds	r3, #16
 8010296:	687a      	ldr	r2, [r7, #4]
 8010298:	4611      	mov	r1, r2
 801029a:	4618      	mov	r0, r3
 801029c:	f001 fb34 	bl	8011908 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80102a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80102a2:	f000 fc80 	bl	8010ba6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80102a6:	f001 f8ad 	bl	8011404 <xTaskResumeAll>
 80102aa:	4603      	mov	r3, r0
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	f47f af7c 	bne.w	80101aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80102b2:	4b0c      	ldr	r3, [pc, #48]	; (80102e4 <xQueueGenericSend+0x1f8>)
 80102b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102b8:	601a      	str	r2, [r3, #0]
 80102ba:	f3bf 8f4f 	dsb	sy
 80102be:	f3bf 8f6f 	isb	sy
 80102c2:	e772      	b.n	80101aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80102c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80102c6:	f000 fc6e 	bl	8010ba6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80102ca:	f001 f89b 	bl	8011404 <xTaskResumeAll>
 80102ce:	e76c      	b.n	80101aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80102d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80102d2:	f000 fc68 	bl	8010ba6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80102d6:	f001 f895 	bl	8011404 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80102da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80102dc:	4618      	mov	r0, r3
 80102de:	3738      	adds	r7, #56	; 0x38
 80102e0:	46bd      	mov	sp, r7
 80102e2:	bd80      	pop	{r7, pc}
 80102e4:	e000ed04 	.word	0xe000ed04

080102e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b090      	sub	sp, #64	; 0x40
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	60f8      	str	r0, [r7, #12]
 80102f0:	60b9      	str	r1, [r7, #8]
 80102f2:	607a      	str	r2, [r7, #4]
 80102f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80102fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d10a      	bne.n	8010316 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8010300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010304:	f383 8811 	msr	BASEPRI, r3
 8010308:	f3bf 8f6f 	isb	sy
 801030c:	f3bf 8f4f 	dsb	sy
 8010310:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010312:	bf00      	nop
 8010314:	e7fe      	b.n	8010314 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010316:	68bb      	ldr	r3, [r7, #8]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d103      	bne.n	8010324 <xQueueGenericSendFromISR+0x3c>
 801031c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801031e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010320:	2b00      	cmp	r3, #0
 8010322:	d101      	bne.n	8010328 <xQueueGenericSendFromISR+0x40>
 8010324:	2301      	movs	r3, #1
 8010326:	e000      	b.n	801032a <xQueueGenericSendFromISR+0x42>
 8010328:	2300      	movs	r3, #0
 801032a:	2b00      	cmp	r3, #0
 801032c:	d10a      	bne.n	8010344 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801032e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010332:	f383 8811 	msr	BASEPRI, r3
 8010336:	f3bf 8f6f 	isb	sy
 801033a:	f3bf 8f4f 	dsb	sy
 801033e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010340:	bf00      	nop
 8010342:	e7fe      	b.n	8010342 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010344:	683b      	ldr	r3, [r7, #0]
 8010346:	2b02      	cmp	r3, #2
 8010348:	d103      	bne.n	8010352 <xQueueGenericSendFromISR+0x6a>
 801034a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801034c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801034e:	2b01      	cmp	r3, #1
 8010350:	d101      	bne.n	8010356 <xQueueGenericSendFromISR+0x6e>
 8010352:	2301      	movs	r3, #1
 8010354:	e000      	b.n	8010358 <xQueueGenericSendFromISR+0x70>
 8010356:	2300      	movs	r3, #0
 8010358:	2b00      	cmp	r3, #0
 801035a:	d10a      	bne.n	8010372 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801035c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010360:	f383 8811 	msr	BASEPRI, r3
 8010364:	f3bf 8f6f 	isb	sy
 8010368:	f3bf 8f4f 	dsb	sy
 801036c:	623b      	str	r3, [r7, #32]
}
 801036e:	bf00      	nop
 8010370:	e7fe      	b.n	8010370 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010372:	f002 fe39 	bl	8012fe8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010376:	f3ef 8211 	mrs	r2, BASEPRI
 801037a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801037e:	f383 8811 	msr	BASEPRI, r3
 8010382:	f3bf 8f6f 	isb	sy
 8010386:	f3bf 8f4f 	dsb	sy
 801038a:	61fa      	str	r2, [r7, #28]
 801038c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801038e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010390:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010394:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801039a:	429a      	cmp	r2, r3
 801039c:	d302      	bcc.n	80103a4 <xQueueGenericSendFromISR+0xbc>
 801039e:	683b      	ldr	r3, [r7, #0]
 80103a0:	2b02      	cmp	r3, #2
 80103a2:	d12f      	bne.n	8010404 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80103a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80103aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80103ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80103b4:	683a      	ldr	r2, [r7, #0]
 80103b6:	68b9      	ldr	r1, [r7, #8]
 80103b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80103ba:	f000 fb64 	bl	8010a86 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80103be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80103c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103c6:	d112      	bne.n	80103ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80103c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d016      	beq.n	80103fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80103d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103d2:	3324      	adds	r3, #36	; 0x24
 80103d4:	4618      	mov	r0, r3
 80103d6:	f001 fae7 	bl	80119a8 <xTaskRemoveFromEventList>
 80103da:	4603      	mov	r3, r0
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d00e      	beq.n	80103fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d00b      	beq.n	80103fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	2201      	movs	r2, #1
 80103ea:	601a      	str	r2, [r3, #0]
 80103ec:	e007      	b.n	80103fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80103ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80103f2:	3301      	adds	r3, #1
 80103f4:	b2db      	uxtb	r3, r3
 80103f6:	b25a      	sxtb	r2, r3
 80103f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80103fe:	2301      	movs	r3, #1
 8010400:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8010402:	e001      	b.n	8010408 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010404:	2300      	movs	r3, #0
 8010406:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801040a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801040c:	697b      	ldr	r3, [r7, #20]
 801040e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010412:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010416:	4618      	mov	r0, r3
 8010418:	3740      	adds	r7, #64	; 0x40
 801041a:	46bd      	mov	sp, r7
 801041c:	bd80      	pop	{r7, pc}

0801041e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801041e:	b580      	push	{r7, lr}
 8010420:	b08e      	sub	sp, #56	; 0x38
 8010422:	af00      	add	r7, sp, #0
 8010424:	6078      	str	r0, [r7, #4]
 8010426:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801042c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801042e:	2b00      	cmp	r3, #0
 8010430:	d10a      	bne.n	8010448 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8010432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010436:	f383 8811 	msr	BASEPRI, r3
 801043a:	f3bf 8f6f 	isb	sy
 801043e:	f3bf 8f4f 	dsb	sy
 8010442:	623b      	str	r3, [r7, #32]
}
 8010444:	bf00      	nop
 8010446:	e7fe      	b.n	8010446 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801044a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801044c:	2b00      	cmp	r3, #0
 801044e:	d00a      	beq.n	8010466 <xQueueGiveFromISR+0x48>
	__asm volatile
 8010450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010454:	f383 8811 	msr	BASEPRI, r3
 8010458:	f3bf 8f6f 	isb	sy
 801045c:	f3bf 8f4f 	dsb	sy
 8010460:	61fb      	str	r3, [r7, #28]
}
 8010462:	bf00      	nop
 8010464:	e7fe      	b.n	8010464 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d103      	bne.n	8010476 <xQueueGiveFromISR+0x58>
 801046e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010470:	689b      	ldr	r3, [r3, #8]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d101      	bne.n	801047a <xQueueGiveFromISR+0x5c>
 8010476:	2301      	movs	r3, #1
 8010478:	e000      	b.n	801047c <xQueueGiveFromISR+0x5e>
 801047a:	2300      	movs	r3, #0
 801047c:	2b00      	cmp	r3, #0
 801047e:	d10a      	bne.n	8010496 <xQueueGiveFromISR+0x78>
	__asm volatile
 8010480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010484:	f383 8811 	msr	BASEPRI, r3
 8010488:	f3bf 8f6f 	isb	sy
 801048c:	f3bf 8f4f 	dsb	sy
 8010490:	61bb      	str	r3, [r7, #24]
}
 8010492:	bf00      	nop
 8010494:	e7fe      	b.n	8010494 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010496:	f002 fda7 	bl	8012fe8 <vPortValidateInterruptPriority>
	__asm volatile
 801049a:	f3ef 8211 	mrs	r2, BASEPRI
 801049e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104a2:	f383 8811 	msr	BASEPRI, r3
 80104a6:	f3bf 8f6f 	isb	sy
 80104aa:	f3bf 8f4f 	dsb	sy
 80104ae:	617a      	str	r2, [r7, #20]
 80104b0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80104b2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80104b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80104b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80104bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80104c2:	429a      	cmp	r2, r3
 80104c4:	d22b      	bcs.n	801051e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80104c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80104cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80104d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104d2:	1c5a      	adds	r2, r3, #1
 80104d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104d6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80104d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80104dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104e0:	d112      	bne.n	8010508 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80104e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d016      	beq.n	8010518 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80104ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104ec:	3324      	adds	r3, #36	; 0x24
 80104ee:	4618      	mov	r0, r3
 80104f0:	f001 fa5a 	bl	80119a8 <xTaskRemoveFromEventList>
 80104f4:	4603      	mov	r3, r0
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d00e      	beq.n	8010518 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80104fa:	683b      	ldr	r3, [r7, #0]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d00b      	beq.n	8010518 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	2201      	movs	r2, #1
 8010504:	601a      	str	r2, [r3, #0]
 8010506:	e007      	b.n	8010518 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010508:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801050c:	3301      	adds	r3, #1
 801050e:	b2db      	uxtb	r3, r3
 8010510:	b25a      	sxtb	r2, r3
 8010512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010518:	2301      	movs	r3, #1
 801051a:	637b      	str	r3, [r7, #52]	; 0x34
 801051c:	e001      	b.n	8010522 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801051e:	2300      	movs	r3, #0
 8010520:	637b      	str	r3, [r7, #52]	; 0x34
 8010522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010524:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	f383 8811 	msr	BASEPRI, r3
}
 801052c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801052e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010530:	4618      	mov	r0, r3
 8010532:	3738      	adds	r7, #56	; 0x38
 8010534:	46bd      	mov	sp, r7
 8010536:	bd80      	pop	{r7, pc}

08010538 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b08c      	sub	sp, #48	; 0x30
 801053c:	af00      	add	r7, sp, #0
 801053e:	60f8      	str	r0, [r7, #12]
 8010540:	60b9      	str	r1, [r7, #8]
 8010542:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010544:	2300      	movs	r3, #0
 8010546:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801054c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801054e:	2b00      	cmp	r3, #0
 8010550:	d10a      	bne.n	8010568 <xQueueReceive+0x30>
	__asm volatile
 8010552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010556:	f383 8811 	msr	BASEPRI, r3
 801055a:	f3bf 8f6f 	isb	sy
 801055e:	f3bf 8f4f 	dsb	sy
 8010562:	623b      	str	r3, [r7, #32]
}
 8010564:	bf00      	nop
 8010566:	e7fe      	b.n	8010566 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010568:	68bb      	ldr	r3, [r7, #8]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d103      	bne.n	8010576 <xQueueReceive+0x3e>
 801056e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010572:	2b00      	cmp	r3, #0
 8010574:	d101      	bne.n	801057a <xQueueReceive+0x42>
 8010576:	2301      	movs	r3, #1
 8010578:	e000      	b.n	801057c <xQueueReceive+0x44>
 801057a:	2300      	movs	r3, #0
 801057c:	2b00      	cmp	r3, #0
 801057e:	d10a      	bne.n	8010596 <xQueueReceive+0x5e>
	__asm volatile
 8010580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010584:	f383 8811 	msr	BASEPRI, r3
 8010588:	f3bf 8f6f 	isb	sy
 801058c:	f3bf 8f4f 	dsb	sy
 8010590:	61fb      	str	r3, [r7, #28]
}
 8010592:	bf00      	nop
 8010594:	e7fe      	b.n	8010594 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010596:	f001 fca9 	bl	8011eec <xTaskGetSchedulerState>
 801059a:	4603      	mov	r3, r0
 801059c:	2b00      	cmp	r3, #0
 801059e:	d102      	bne.n	80105a6 <xQueueReceive+0x6e>
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d101      	bne.n	80105aa <xQueueReceive+0x72>
 80105a6:	2301      	movs	r3, #1
 80105a8:	e000      	b.n	80105ac <xQueueReceive+0x74>
 80105aa:	2300      	movs	r3, #0
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d10a      	bne.n	80105c6 <xQueueReceive+0x8e>
	__asm volatile
 80105b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105b4:	f383 8811 	msr	BASEPRI, r3
 80105b8:	f3bf 8f6f 	isb	sy
 80105bc:	f3bf 8f4f 	dsb	sy
 80105c0:	61bb      	str	r3, [r7, #24]
}
 80105c2:	bf00      	nop
 80105c4:	e7fe      	b.n	80105c4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80105c6:	f002 fc2d 	bl	8012e24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80105ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105ce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80105d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d01f      	beq.n	8010616 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80105d6:	68b9      	ldr	r1, [r7, #8]
 80105d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80105da:	f000 fabe 	bl	8010b5a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80105de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105e0:	1e5a      	subs	r2, r3, #1
 80105e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80105e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105e8:	691b      	ldr	r3, [r3, #16]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d00f      	beq.n	801060e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80105ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105f0:	3310      	adds	r3, #16
 80105f2:	4618      	mov	r0, r3
 80105f4:	f001 f9d8 	bl	80119a8 <xTaskRemoveFromEventList>
 80105f8:	4603      	mov	r3, r0
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d007      	beq.n	801060e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80105fe:	4b3d      	ldr	r3, [pc, #244]	; (80106f4 <xQueueReceive+0x1bc>)
 8010600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010604:	601a      	str	r2, [r3, #0]
 8010606:	f3bf 8f4f 	dsb	sy
 801060a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801060e:	f002 fc39 	bl	8012e84 <vPortExitCritical>
				return pdPASS;
 8010612:	2301      	movs	r3, #1
 8010614:	e069      	b.n	80106ea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d103      	bne.n	8010624 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801061c:	f002 fc32 	bl	8012e84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010620:	2300      	movs	r3, #0
 8010622:	e062      	b.n	80106ea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010626:	2b00      	cmp	r3, #0
 8010628:	d106      	bne.n	8010638 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801062a:	f107 0310 	add.w	r3, r7, #16
 801062e:	4618      	mov	r0, r3
 8010630:	f001 fa1e 	bl	8011a70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010634:	2301      	movs	r3, #1
 8010636:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010638:	f002 fc24 	bl	8012e84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801063c:	f000 fed4 	bl	80113e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010640:	f002 fbf0 	bl	8012e24 <vPortEnterCritical>
 8010644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010646:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801064a:	b25b      	sxtb	r3, r3
 801064c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010650:	d103      	bne.n	801065a <xQueueReceive+0x122>
 8010652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010654:	2200      	movs	r2, #0
 8010656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801065a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801065c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010660:	b25b      	sxtb	r3, r3
 8010662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010666:	d103      	bne.n	8010670 <xQueueReceive+0x138>
 8010668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801066a:	2200      	movs	r2, #0
 801066c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010670:	f002 fc08 	bl	8012e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010674:	1d3a      	adds	r2, r7, #4
 8010676:	f107 0310 	add.w	r3, r7, #16
 801067a:	4611      	mov	r1, r2
 801067c:	4618      	mov	r0, r3
 801067e:	f001 fa0d 	bl	8011a9c <xTaskCheckForTimeOut>
 8010682:	4603      	mov	r3, r0
 8010684:	2b00      	cmp	r3, #0
 8010686:	d123      	bne.n	80106d0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010688:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801068a:	f000 fade 	bl	8010c4a <prvIsQueueEmpty>
 801068e:	4603      	mov	r3, r0
 8010690:	2b00      	cmp	r3, #0
 8010692:	d017      	beq.n	80106c4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010696:	3324      	adds	r3, #36	; 0x24
 8010698:	687a      	ldr	r2, [r7, #4]
 801069a:	4611      	mov	r1, r2
 801069c:	4618      	mov	r0, r3
 801069e:	f001 f933 	bl	8011908 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80106a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80106a4:	f000 fa7f 	bl	8010ba6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80106a8:	f000 feac 	bl	8011404 <xTaskResumeAll>
 80106ac:	4603      	mov	r3, r0
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d189      	bne.n	80105c6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80106b2:	4b10      	ldr	r3, [pc, #64]	; (80106f4 <xQueueReceive+0x1bc>)
 80106b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106b8:	601a      	str	r2, [r3, #0]
 80106ba:	f3bf 8f4f 	dsb	sy
 80106be:	f3bf 8f6f 	isb	sy
 80106c2:	e780      	b.n	80105c6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80106c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80106c6:	f000 fa6e 	bl	8010ba6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80106ca:	f000 fe9b 	bl	8011404 <xTaskResumeAll>
 80106ce:	e77a      	b.n	80105c6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80106d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80106d2:	f000 fa68 	bl	8010ba6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80106d6:	f000 fe95 	bl	8011404 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80106da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80106dc:	f000 fab5 	bl	8010c4a <prvIsQueueEmpty>
 80106e0:	4603      	mov	r3, r0
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	f43f af6f 	beq.w	80105c6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80106e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80106ea:	4618      	mov	r0, r3
 80106ec:	3730      	adds	r7, #48	; 0x30
 80106ee:	46bd      	mov	sp, r7
 80106f0:	bd80      	pop	{r7, pc}
 80106f2:	bf00      	nop
 80106f4:	e000ed04 	.word	0xe000ed04

080106f8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80106f8:	b580      	push	{r7, lr}
 80106fa:	b08e      	sub	sp, #56	; 0x38
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
 8010700:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010702:	2300      	movs	r3, #0
 8010704:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801070a:	2300      	movs	r3, #0
 801070c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801070e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010710:	2b00      	cmp	r3, #0
 8010712:	d10a      	bne.n	801072a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8010714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010718:	f383 8811 	msr	BASEPRI, r3
 801071c:	f3bf 8f6f 	isb	sy
 8010720:	f3bf 8f4f 	dsb	sy
 8010724:	623b      	str	r3, [r7, #32]
}
 8010726:	bf00      	nop
 8010728:	e7fe      	b.n	8010728 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801072a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801072c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801072e:	2b00      	cmp	r3, #0
 8010730:	d00a      	beq.n	8010748 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8010732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010736:	f383 8811 	msr	BASEPRI, r3
 801073a:	f3bf 8f6f 	isb	sy
 801073e:	f3bf 8f4f 	dsb	sy
 8010742:	61fb      	str	r3, [r7, #28]
}
 8010744:	bf00      	nop
 8010746:	e7fe      	b.n	8010746 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010748:	f001 fbd0 	bl	8011eec <xTaskGetSchedulerState>
 801074c:	4603      	mov	r3, r0
 801074e:	2b00      	cmp	r3, #0
 8010750:	d102      	bne.n	8010758 <xQueueSemaphoreTake+0x60>
 8010752:	683b      	ldr	r3, [r7, #0]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d101      	bne.n	801075c <xQueueSemaphoreTake+0x64>
 8010758:	2301      	movs	r3, #1
 801075a:	e000      	b.n	801075e <xQueueSemaphoreTake+0x66>
 801075c:	2300      	movs	r3, #0
 801075e:	2b00      	cmp	r3, #0
 8010760:	d10a      	bne.n	8010778 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8010762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010766:	f383 8811 	msr	BASEPRI, r3
 801076a:	f3bf 8f6f 	isb	sy
 801076e:	f3bf 8f4f 	dsb	sy
 8010772:	61bb      	str	r3, [r7, #24]
}
 8010774:	bf00      	nop
 8010776:	e7fe      	b.n	8010776 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010778:	f002 fb54 	bl	8012e24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801077c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801077e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010780:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010784:	2b00      	cmp	r3, #0
 8010786:	d024      	beq.n	80107d2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801078a:	1e5a      	subs	r2, r3, #1
 801078c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801078e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d104      	bne.n	80107a2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010798:	f001 fe5e 	bl	8012458 <pvTaskIncrementMutexHeldCount>
 801079c:	4602      	mov	r2, r0
 801079e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107a0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80107a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107a4:	691b      	ldr	r3, [r3, #16]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d00f      	beq.n	80107ca <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80107aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107ac:	3310      	adds	r3, #16
 80107ae:	4618      	mov	r0, r3
 80107b0:	f001 f8fa 	bl	80119a8 <xTaskRemoveFromEventList>
 80107b4:	4603      	mov	r3, r0
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d007      	beq.n	80107ca <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80107ba:	4b54      	ldr	r3, [pc, #336]	; (801090c <xQueueSemaphoreTake+0x214>)
 80107bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107c0:	601a      	str	r2, [r3, #0]
 80107c2:	f3bf 8f4f 	dsb	sy
 80107c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80107ca:	f002 fb5b 	bl	8012e84 <vPortExitCritical>
				return pdPASS;
 80107ce:	2301      	movs	r3, #1
 80107d0:	e097      	b.n	8010902 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80107d2:	683b      	ldr	r3, [r7, #0]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d111      	bne.n	80107fc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80107d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d00a      	beq.n	80107f4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80107de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107e2:	f383 8811 	msr	BASEPRI, r3
 80107e6:	f3bf 8f6f 	isb	sy
 80107ea:	f3bf 8f4f 	dsb	sy
 80107ee:	617b      	str	r3, [r7, #20]
}
 80107f0:	bf00      	nop
 80107f2:	e7fe      	b.n	80107f2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80107f4:	f002 fb46 	bl	8012e84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80107f8:	2300      	movs	r3, #0
 80107fa:	e082      	b.n	8010902 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80107fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d106      	bne.n	8010810 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010802:	f107 030c 	add.w	r3, r7, #12
 8010806:	4618      	mov	r0, r3
 8010808:	f001 f932 	bl	8011a70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801080c:	2301      	movs	r3, #1
 801080e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010810:	f002 fb38 	bl	8012e84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010814:	f000 fde8 	bl	80113e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010818:	f002 fb04 	bl	8012e24 <vPortEnterCritical>
 801081c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801081e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010822:	b25b      	sxtb	r3, r3
 8010824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010828:	d103      	bne.n	8010832 <xQueueSemaphoreTake+0x13a>
 801082a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801082c:	2200      	movs	r2, #0
 801082e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010834:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010838:	b25b      	sxtb	r3, r3
 801083a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801083e:	d103      	bne.n	8010848 <xQueueSemaphoreTake+0x150>
 8010840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010842:	2200      	movs	r2, #0
 8010844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010848:	f002 fb1c 	bl	8012e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801084c:	463a      	mov	r2, r7
 801084e:	f107 030c 	add.w	r3, r7, #12
 8010852:	4611      	mov	r1, r2
 8010854:	4618      	mov	r0, r3
 8010856:	f001 f921 	bl	8011a9c <xTaskCheckForTimeOut>
 801085a:	4603      	mov	r3, r0
 801085c:	2b00      	cmp	r3, #0
 801085e:	d132      	bne.n	80108c6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010860:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010862:	f000 f9f2 	bl	8010c4a <prvIsQueueEmpty>
 8010866:	4603      	mov	r3, r0
 8010868:	2b00      	cmp	r3, #0
 801086a:	d026      	beq.n	80108ba <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801086c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d109      	bne.n	8010888 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8010874:	f002 fad6 	bl	8012e24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801087a:	689b      	ldr	r3, [r3, #8]
 801087c:	4618      	mov	r0, r3
 801087e:	f001 fb53 	bl	8011f28 <xTaskPriorityInherit>
 8010882:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010884:	f002 fafe 	bl	8012e84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801088a:	3324      	adds	r3, #36	; 0x24
 801088c:	683a      	ldr	r2, [r7, #0]
 801088e:	4611      	mov	r1, r2
 8010890:	4618      	mov	r0, r3
 8010892:	f001 f839 	bl	8011908 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010896:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010898:	f000 f985 	bl	8010ba6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801089c:	f000 fdb2 	bl	8011404 <xTaskResumeAll>
 80108a0:	4603      	mov	r3, r0
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	f47f af68 	bne.w	8010778 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80108a8:	4b18      	ldr	r3, [pc, #96]	; (801090c <xQueueSemaphoreTake+0x214>)
 80108aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108ae:	601a      	str	r2, [r3, #0]
 80108b0:	f3bf 8f4f 	dsb	sy
 80108b4:	f3bf 8f6f 	isb	sy
 80108b8:	e75e      	b.n	8010778 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80108ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80108bc:	f000 f973 	bl	8010ba6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80108c0:	f000 fda0 	bl	8011404 <xTaskResumeAll>
 80108c4:	e758      	b.n	8010778 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80108c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80108c8:	f000 f96d 	bl	8010ba6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80108cc:	f000 fd9a 	bl	8011404 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80108d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80108d2:	f000 f9ba 	bl	8010c4a <prvIsQueueEmpty>
 80108d6:	4603      	mov	r3, r0
 80108d8:	2b00      	cmp	r3, #0
 80108da:	f43f af4d 	beq.w	8010778 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80108de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d00d      	beq.n	8010900 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80108e4:	f002 fa9e 	bl	8012e24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80108e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80108ea:	f000 f8b4 	bl	8010a56 <prvGetDisinheritPriorityAfterTimeout>
 80108ee:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80108f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108f2:	689b      	ldr	r3, [r3, #8]
 80108f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80108f6:	4618      	mov	r0, r3
 80108f8:	f001 fbec 	bl	80120d4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80108fc:	f002 fac2 	bl	8012e84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010900:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010902:	4618      	mov	r0, r3
 8010904:	3738      	adds	r7, #56	; 0x38
 8010906:	46bd      	mov	sp, r7
 8010908:	bd80      	pop	{r7, pc}
 801090a:	bf00      	nop
 801090c:	e000ed04 	.word	0xe000ed04

08010910 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010910:	b580      	push	{r7, lr}
 8010912:	b08e      	sub	sp, #56	; 0x38
 8010914:	af00      	add	r7, sp, #0
 8010916:	60f8      	str	r0, [r7, #12]
 8010918:	60b9      	str	r1, [r7, #8]
 801091a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010922:	2b00      	cmp	r3, #0
 8010924:	d10a      	bne.n	801093c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8010926:	f04f 0350 	mov.w	r3, #80	; 0x50
 801092a:	f383 8811 	msr	BASEPRI, r3
 801092e:	f3bf 8f6f 	isb	sy
 8010932:	f3bf 8f4f 	dsb	sy
 8010936:	623b      	str	r3, [r7, #32]
}
 8010938:	bf00      	nop
 801093a:	e7fe      	b.n	801093a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801093c:	68bb      	ldr	r3, [r7, #8]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d103      	bne.n	801094a <xQueueReceiveFromISR+0x3a>
 8010942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010946:	2b00      	cmp	r3, #0
 8010948:	d101      	bne.n	801094e <xQueueReceiveFromISR+0x3e>
 801094a:	2301      	movs	r3, #1
 801094c:	e000      	b.n	8010950 <xQueueReceiveFromISR+0x40>
 801094e:	2300      	movs	r3, #0
 8010950:	2b00      	cmp	r3, #0
 8010952:	d10a      	bne.n	801096a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8010954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010958:	f383 8811 	msr	BASEPRI, r3
 801095c:	f3bf 8f6f 	isb	sy
 8010960:	f3bf 8f4f 	dsb	sy
 8010964:	61fb      	str	r3, [r7, #28]
}
 8010966:	bf00      	nop
 8010968:	e7fe      	b.n	8010968 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801096a:	f002 fb3d 	bl	8012fe8 <vPortValidateInterruptPriority>
	__asm volatile
 801096e:	f3ef 8211 	mrs	r2, BASEPRI
 8010972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010976:	f383 8811 	msr	BASEPRI, r3
 801097a:	f3bf 8f6f 	isb	sy
 801097e:	f3bf 8f4f 	dsb	sy
 8010982:	61ba      	str	r2, [r7, #24]
 8010984:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010986:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010988:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801098a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801098c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801098e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010992:	2b00      	cmp	r3, #0
 8010994:	d02f      	beq.n	80109f6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010998:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801099c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80109a0:	68b9      	ldr	r1, [r7, #8]
 80109a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80109a4:	f000 f8d9 	bl	8010b5a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80109a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109aa:	1e5a      	subs	r2, r3, #1
 80109ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80109b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80109b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109b8:	d112      	bne.n	80109e0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80109ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109bc:	691b      	ldr	r3, [r3, #16]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d016      	beq.n	80109f0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80109c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109c4:	3310      	adds	r3, #16
 80109c6:	4618      	mov	r0, r3
 80109c8:	f000 ffee 	bl	80119a8 <xTaskRemoveFromEventList>
 80109cc:	4603      	mov	r3, r0
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d00e      	beq.n	80109f0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d00b      	beq.n	80109f0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	2201      	movs	r2, #1
 80109dc:	601a      	str	r2, [r3, #0]
 80109de:	e007      	b.n	80109f0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80109e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80109e4:	3301      	adds	r3, #1
 80109e6:	b2db      	uxtb	r3, r3
 80109e8:	b25a      	sxtb	r2, r3
 80109ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80109f0:	2301      	movs	r3, #1
 80109f2:	637b      	str	r3, [r7, #52]	; 0x34
 80109f4:	e001      	b.n	80109fa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80109f6:	2300      	movs	r3, #0
 80109f8:	637b      	str	r3, [r7, #52]	; 0x34
 80109fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80109fe:	693b      	ldr	r3, [r7, #16]
 8010a00:	f383 8811 	msr	BASEPRI, r3
}
 8010a04:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010a08:	4618      	mov	r0, r3
 8010a0a:	3738      	adds	r7, #56	; 0x38
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	bd80      	pop	{r7, pc}

08010a10 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b084      	sub	sp, #16
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d10a      	bne.n	8010a38 <vQueueDelete+0x28>
	__asm volatile
 8010a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a26:	f383 8811 	msr	BASEPRI, r3
 8010a2a:	f3bf 8f6f 	isb	sy
 8010a2e:	f3bf 8f4f 	dsb	sy
 8010a32:	60bb      	str	r3, [r7, #8]
}
 8010a34:	bf00      	nop
 8010a36:	e7fe      	b.n	8010a36 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010a38:	68f8      	ldr	r0, [r7, #12]
 8010a3a:	f000 f95f 	bl	8010cfc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d102      	bne.n	8010a4e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8010a48:	68f8      	ldr	r0, [r7, #12]
 8010a4a:	f002 fbd9 	bl	8013200 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010a4e:	bf00      	nop
 8010a50:	3710      	adds	r7, #16
 8010a52:	46bd      	mov	sp, r7
 8010a54:	bd80      	pop	{r7, pc}

08010a56 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010a56:	b480      	push	{r7}
 8010a58:	b085      	sub	sp, #20
 8010a5a:	af00      	add	r7, sp, #0
 8010a5c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d006      	beq.n	8010a74 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8010a70:	60fb      	str	r3, [r7, #12]
 8010a72:	e001      	b.n	8010a78 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010a74:	2300      	movs	r3, #0
 8010a76:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010a78:	68fb      	ldr	r3, [r7, #12]
	}
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	3714      	adds	r7, #20
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a84:	4770      	bx	lr

08010a86 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010a86:	b580      	push	{r7, lr}
 8010a88:	b086      	sub	sp, #24
 8010a8a:	af00      	add	r7, sp, #0
 8010a8c:	60f8      	str	r0, [r7, #12]
 8010a8e:	60b9      	str	r1, [r7, #8]
 8010a90:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010a92:	2300      	movs	r3, #0
 8010a94:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a9a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d10d      	bne.n	8010ac0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d14d      	bne.n	8010b48 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	689b      	ldr	r3, [r3, #8]
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	f001 faa1 	bl	8011ff8 <xTaskPriorityDisinherit>
 8010ab6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	2200      	movs	r2, #0
 8010abc:	609a      	str	r2, [r3, #8]
 8010abe:	e043      	b.n	8010b48 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d119      	bne.n	8010afa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	6858      	ldr	r0, [r3, #4]
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ace:	461a      	mov	r2, r3
 8010ad0:	68b9      	ldr	r1, [r7, #8]
 8010ad2:	f00f fa17 	bl	801ff04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	685a      	ldr	r2, [r3, #4]
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ade:	441a      	add	r2, r3
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	685a      	ldr	r2, [r3, #4]
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	689b      	ldr	r3, [r3, #8]
 8010aec:	429a      	cmp	r2, r3
 8010aee:	d32b      	bcc.n	8010b48 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	681a      	ldr	r2, [r3, #0]
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	605a      	str	r2, [r3, #4]
 8010af8:	e026      	b.n	8010b48 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	68d8      	ldr	r0, [r3, #12]
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b02:	461a      	mov	r2, r3
 8010b04:	68b9      	ldr	r1, [r7, #8]
 8010b06:	f00f f9fd 	bl	801ff04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	68da      	ldr	r2, [r3, #12]
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b12:	425b      	negs	r3, r3
 8010b14:	441a      	add	r2, r3
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	68da      	ldr	r2, [r3, #12]
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	429a      	cmp	r2, r3
 8010b24:	d207      	bcs.n	8010b36 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	689a      	ldr	r2, [r3, #8]
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b2e:	425b      	negs	r3, r3
 8010b30:	441a      	add	r2, r3
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	2b02      	cmp	r3, #2
 8010b3a:	d105      	bne.n	8010b48 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010b3c:	693b      	ldr	r3, [r7, #16]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d002      	beq.n	8010b48 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010b42:	693b      	ldr	r3, [r7, #16]
 8010b44:	3b01      	subs	r3, #1
 8010b46:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010b48:	693b      	ldr	r3, [r7, #16]
 8010b4a:	1c5a      	adds	r2, r3, #1
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010b50:	697b      	ldr	r3, [r7, #20]
}
 8010b52:	4618      	mov	r0, r3
 8010b54:	3718      	adds	r7, #24
 8010b56:	46bd      	mov	sp, r7
 8010b58:	bd80      	pop	{r7, pc}

08010b5a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010b5a:	b580      	push	{r7, lr}
 8010b5c:	b082      	sub	sp, #8
 8010b5e:	af00      	add	r7, sp, #0
 8010b60:	6078      	str	r0, [r7, #4]
 8010b62:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d018      	beq.n	8010b9e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	68da      	ldr	r2, [r3, #12]
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b74:	441a      	add	r2, r3
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	68da      	ldr	r2, [r3, #12]
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	689b      	ldr	r3, [r3, #8]
 8010b82:	429a      	cmp	r2, r3
 8010b84:	d303      	bcc.n	8010b8e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	681a      	ldr	r2, [r3, #0]
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	68d9      	ldr	r1, [r3, #12]
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b96:	461a      	mov	r2, r3
 8010b98:	6838      	ldr	r0, [r7, #0]
 8010b9a:	f00f f9b3 	bl	801ff04 <memcpy>
	}
}
 8010b9e:	bf00      	nop
 8010ba0:	3708      	adds	r7, #8
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	bd80      	pop	{r7, pc}

08010ba6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010ba6:	b580      	push	{r7, lr}
 8010ba8:	b084      	sub	sp, #16
 8010baa:	af00      	add	r7, sp, #0
 8010bac:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010bae:	f002 f939 	bl	8012e24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010bb8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010bba:	e011      	b.n	8010be0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d012      	beq.n	8010bea <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	3324      	adds	r3, #36	; 0x24
 8010bc8:	4618      	mov	r0, r3
 8010bca:	f000 feed 	bl	80119a8 <xTaskRemoveFromEventList>
 8010bce:	4603      	mov	r3, r0
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d001      	beq.n	8010bd8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010bd4:	f000 ffc4 	bl	8011b60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010bd8:	7bfb      	ldrb	r3, [r7, #15]
 8010bda:	3b01      	subs	r3, #1
 8010bdc:	b2db      	uxtb	r3, r3
 8010bde:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	dce9      	bgt.n	8010bbc <prvUnlockQueue+0x16>
 8010be8:	e000      	b.n	8010bec <prvUnlockQueue+0x46>
					break;
 8010bea:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	22ff      	movs	r2, #255	; 0xff
 8010bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010bf4:	f002 f946 	bl	8012e84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010bf8:	f002 f914 	bl	8012e24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010c02:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010c04:	e011      	b.n	8010c2a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	691b      	ldr	r3, [r3, #16]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d012      	beq.n	8010c34 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	3310      	adds	r3, #16
 8010c12:	4618      	mov	r0, r3
 8010c14:	f000 fec8 	bl	80119a8 <xTaskRemoveFromEventList>
 8010c18:	4603      	mov	r3, r0
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d001      	beq.n	8010c22 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010c1e:	f000 ff9f 	bl	8011b60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010c22:	7bbb      	ldrb	r3, [r7, #14]
 8010c24:	3b01      	subs	r3, #1
 8010c26:	b2db      	uxtb	r3, r3
 8010c28:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010c2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	dce9      	bgt.n	8010c06 <prvUnlockQueue+0x60>
 8010c32:	e000      	b.n	8010c36 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010c34:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	22ff      	movs	r2, #255	; 0xff
 8010c3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010c3e:	f002 f921 	bl	8012e84 <vPortExitCritical>
}
 8010c42:	bf00      	nop
 8010c44:	3710      	adds	r7, #16
 8010c46:	46bd      	mov	sp, r7
 8010c48:	bd80      	pop	{r7, pc}

08010c4a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010c4a:	b580      	push	{r7, lr}
 8010c4c:	b084      	sub	sp, #16
 8010c4e:	af00      	add	r7, sp, #0
 8010c50:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010c52:	f002 f8e7 	bl	8012e24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d102      	bne.n	8010c64 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010c5e:	2301      	movs	r3, #1
 8010c60:	60fb      	str	r3, [r7, #12]
 8010c62:	e001      	b.n	8010c68 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010c64:	2300      	movs	r3, #0
 8010c66:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010c68:	f002 f90c 	bl	8012e84 <vPortExitCritical>

	return xReturn;
 8010c6c:	68fb      	ldr	r3, [r7, #12]
}
 8010c6e:	4618      	mov	r0, r3
 8010c70:	3710      	adds	r7, #16
 8010c72:	46bd      	mov	sp, r7
 8010c74:	bd80      	pop	{r7, pc}

08010c76 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010c76:	b580      	push	{r7, lr}
 8010c78:	b084      	sub	sp, #16
 8010c7a:	af00      	add	r7, sp, #0
 8010c7c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010c7e:	f002 f8d1 	bl	8012e24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c8a:	429a      	cmp	r2, r3
 8010c8c:	d102      	bne.n	8010c94 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010c8e:	2301      	movs	r3, #1
 8010c90:	60fb      	str	r3, [r7, #12]
 8010c92:	e001      	b.n	8010c98 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010c94:	2300      	movs	r3, #0
 8010c96:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010c98:	f002 f8f4 	bl	8012e84 <vPortExitCritical>

	return xReturn;
 8010c9c:	68fb      	ldr	r3, [r7, #12]
}
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	3710      	adds	r7, #16
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	bd80      	pop	{r7, pc}
	...

08010ca8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010ca8:	b480      	push	{r7}
 8010caa:	b085      	sub	sp, #20
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
 8010cb0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	60fb      	str	r3, [r7, #12]
 8010cb6:	e014      	b.n	8010ce2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010cb8:	4a0f      	ldr	r2, [pc, #60]	; (8010cf8 <vQueueAddToRegistry+0x50>)
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d10b      	bne.n	8010cdc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010cc4:	490c      	ldr	r1, [pc, #48]	; (8010cf8 <vQueueAddToRegistry+0x50>)
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	683a      	ldr	r2, [r7, #0]
 8010cca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010cce:	4a0a      	ldr	r2, [pc, #40]	; (8010cf8 <vQueueAddToRegistry+0x50>)
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	00db      	lsls	r3, r3, #3
 8010cd4:	4413      	add	r3, r2
 8010cd6:	687a      	ldr	r2, [r7, #4]
 8010cd8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010cda:	e006      	b.n	8010cea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	3301      	adds	r3, #1
 8010ce0:	60fb      	str	r3, [r7, #12]
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	2b07      	cmp	r3, #7
 8010ce6:	d9e7      	bls.n	8010cb8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010ce8:	bf00      	nop
 8010cea:	bf00      	nop
 8010cec:	3714      	adds	r7, #20
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf4:	4770      	bx	lr
 8010cf6:	bf00      	nop
 8010cf8:	2000489c 	.word	0x2000489c

08010cfc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010cfc:	b480      	push	{r7}
 8010cfe:	b085      	sub	sp, #20
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010d04:	2300      	movs	r3, #0
 8010d06:	60fb      	str	r3, [r7, #12]
 8010d08:	e016      	b.n	8010d38 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010d0a:	4a10      	ldr	r2, [pc, #64]	; (8010d4c <vQueueUnregisterQueue+0x50>)
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	00db      	lsls	r3, r3, #3
 8010d10:	4413      	add	r3, r2
 8010d12:	685b      	ldr	r3, [r3, #4]
 8010d14:	687a      	ldr	r2, [r7, #4]
 8010d16:	429a      	cmp	r2, r3
 8010d18:	d10b      	bne.n	8010d32 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010d1a:	4a0c      	ldr	r2, [pc, #48]	; (8010d4c <vQueueUnregisterQueue+0x50>)
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	2100      	movs	r1, #0
 8010d20:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010d24:	4a09      	ldr	r2, [pc, #36]	; (8010d4c <vQueueUnregisterQueue+0x50>)
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	00db      	lsls	r3, r3, #3
 8010d2a:	4413      	add	r3, r2
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	605a      	str	r2, [r3, #4]
				break;
 8010d30:	e006      	b.n	8010d40 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	3301      	adds	r3, #1
 8010d36:	60fb      	str	r3, [r7, #12]
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	2b07      	cmp	r3, #7
 8010d3c:	d9e5      	bls.n	8010d0a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010d3e:	bf00      	nop
 8010d40:	bf00      	nop
 8010d42:	3714      	adds	r7, #20
 8010d44:	46bd      	mov	sp, r7
 8010d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4a:	4770      	bx	lr
 8010d4c:	2000489c 	.word	0x2000489c

08010d50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b086      	sub	sp, #24
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	60f8      	str	r0, [r7, #12]
 8010d58:	60b9      	str	r1, [r7, #8]
 8010d5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010d60:	f002 f860 	bl	8012e24 <vPortEnterCritical>
 8010d64:	697b      	ldr	r3, [r7, #20]
 8010d66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010d6a:	b25b      	sxtb	r3, r3
 8010d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d70:	d103      	bne.n	8010d7a <vQueueWaitForMessageRestricted+0x2a>
 8010d72:	697b      	ldr	r3, [r7, #20]
 8010d74:	2200      	movs	r2, #0
 8010d76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010d7a:	697b      	ldr	r3, [r7, #20]
 8010d7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010d80:	b25b      	sxtb	r3, r3
 8010d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d86:	d103      	bne.n	8010d90 <vQueueWaitForMessageRestricted+0x40>
 8010d88:	697b      	ldr	r3, [r7, #20]
 8010d8a:	2200      	movs	r2, #0
 8010d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010d90:	f002 f878 	bl	8012e84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010d94:	697b      	ldr	r3, [r7, #20]
 8010d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d106      	bne.n	8010daa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010d9c:	697b      	ldr	r3, [r7, #20]
 8010d9e:	3324      	adds	r3, #36	; 0x24
 8010da0:	687a      	ldr	r2, [r7, #4]
 8010da2:	68b9      	ldr	r1, [r7, #8]
 8010da4:	4618      	mov	r0, r3
 8010da6:	f000 fdd3 	bl	8011950 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010daa:	6978      	ldr	r0, [r7, #20]
 8010dac:	f7ff fefb 	bl	8010ba6 <prvUnlockQueue>
	}
 8010db0:	bf00      	nop
 8010db2:	3718      	adds	r7, #24
 8010db4:	46bd      	mov	sp, r7
 8010db6:	bd80      	pop	{r7, pc}

08010db8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010db8:	b580      	push	{r7, lr}
 8010dba:	b08e      	sub	sp, #56	; 0x38
 8010dbc:	af04      	add	r7, sp, #16
 8010dbe:	60f8      	str	r0, [r7, #12]
 8010dc0:	60b9      	str	r1, [r7, #8]
 8010dc2:	607a      	str	r2, [r7, #4]
 8010dc4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d10a      	bne.n	8010de2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8010dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dd0:	f383 8811 	msr	BASEPRI, r3
 8010dd4:	f3bf 8f6f 	isb	sy
 8010dd8:	f3bf 8f4f 	dsb	sy
 8010ddc:	623b      	str	r3, [r7, #32]
}
 8010dde:	bf00      	nop
 8010de0:	e7fe      	b.n	8010de0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d10a      	bne.n	8010dfe <xTaskCreateStatic+0x46>
	__asm volatile
 8010de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dec:	f383 8811 	msr	BASEPRI, r3
 8010df0:	f3bf 8f6f 	isb	sy
 8010df4:	f3bf 8f4f 	dsb	sy
 8010df8:	61fb      	str	r3, [r7, #28]
}
 8010dfa:	bf00      	nop
 8010dfc:	e7fe      	b.n	8010dfc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010dfe:	2360      	movs	r3, #96	; 0x60
 8010e00:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010e02:	693b      	ldr	r3, [r7, #16]
 8010e04:	2b60      	cmp	r3, #96	; 0x60
 8010e06:	d00a      	beq.n	8010e1e <xTaskCreateStatic+0x66>
	__asm volatile
 8010e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e0c:	f383 8811 	msr	BASEPRI, r3
 8010e10:	f3bf 8f6f 	isb	sy
 8010e14:	f3bf 8f4f 	dsb	sy
 8010e18:	61bb      	str	r3, [r7, #24]
}
 8010e1a:	bf00      	nop
 8010e1c:	e7fe      	b.n	8010e1c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010e1e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d01e      	beq.n	8010e64 <xTaskCreateStatic+0xac>
 8010e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d01b      	beq.n	8010e64 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e2e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e34:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e38:	2202      	movs	r2, #2
 8010e3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010e3e:	2300      	movs	r3, #0
 8010e40:	9303      	str	r3, [sp, #12]
 8010e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e44:	9302      	str	r3, [sp, #8]
 8010e46:	f107 0314 	add.w	r3, r7, #20
 8010e4a:	9301      	str	r3, [sp, #4]
 8010e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e4e:	9300      	str	r3, [sp, #0]
 8010e50:	683b      	ldr	r3, [r7, #0]
 8010e52:	687a      	ldr	r2, [r7, #4]
 8010e54:	68b9      	ldr	r1, [r7, #8]
 8010e56:	68f8      	ldr	r0, [r7, #12]
 8010e58:	f000 f850 	bl	8010efc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010e5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e5e:	f000 f8df 	bl	8011020 <prvAddNewTaskToReadyList>
 8010e62:	e001      	b.n	8010e68 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010e64:	2300      	movs	r3, #0
 8010e66:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010e68:	697b      	ldr	r3, [r7, #20]
	}
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	3728      	adds	r7, #40	; 0x28
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	bd80      	pop	{r7, pc}

08010e72 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010e72:	b580      	push	{r7, lr}
 8010e74:	b08c      	sub	sp, #48	; 0x30
 8010e76:	af04      	add	r7, sp, #16
 8010e78:	60f8      	str	r0, [r7, #12]
 8010e7a:	60b9      	str	r1, [r7, #8]
 8010e7c:	603b      	str	r3, [r7, #0]
 8010e7e:	4613      	mov	r3, r2
 8010e80:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010e82:	88fb      	ldrh	r3, [r7, #6]
 8010e84:	009b      	lsls	r3, r3, #2
 8010e86:	4618      	mov	r0, r3
 8010e88:	f002 f8ee 	bl	8013068 <pvPortMalloc>
 8010e8c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010e8e:	697b      	ldr	r3, [r7, #20]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d00e      	beq.n	8010eb2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010e94:	2060      	movs	r0, #96	; 0x60
 8010e96:	f002 f8e7 	bl	8013068 <pvPortMalloc>
 8010e9a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010e9c:	69fb      	ldr	r3, [r7, #28]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d003      	beq.n	8010eaa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010ea2:	69fb      	ldr	r3, [r7, #28]
 8010ea4:	697a      	ldr	r2, [r7, #20]
 8010ea6:	631a      	str	r2, [r3, #48]	; 0x30
 8010ea8:	e005      	b.n	8010eb6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010eaa:	6978      	ldr	r0, [r7, #20]
 8010eac:	f002 f9a8 	bl	8013200 <vPortFree>
 8010eb0:	e001      	b.n	8010eb6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010eb6:	69fb      	ldr	r3, [r7, #28]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d017      	beq.n	8010eec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010ebc:	69fb      	ldr	r3, [r7, #28]
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010ec4:	88fa      	ldrh	r2, [r7, #6]
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	9303      	str	r3, [sp, #12]
 8010eca:	69fb      	ldr	r3, [r7, #28]
 8010ecc:	9302      	str	r3, [sp, #8]
 8010ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ed0:	9301      	str	r3, [sp, #4]
 8010ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ed4:	9300      	str	r3, [sp, #0]
 8010ed6:	683b      	ldr	r3, [r7, #0]
 8010ed8:	68b9      	ldr	r1, [r7, #8]
 8010eda:	68f8      	ldr	r0, [r7, #12]
 8010edc:	f000 f80e 	bl	8010efc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010ee0:	69f8      	ldr	r0, [r7, #28]
 8010ee2:	f000 f89d 	bl	8011020 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010ee6:	2301      	movs	r3, #1
 8010ee8:	61bb      	str	r3, [r7, #24]
 8010eea:	e002      	b.n	8010ef2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010eec:	f04f 33ff 	mov.w	r3, #4294967295
 8010ef0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010ef2:	69bb      	ldr	r3, [r7, #24]
	}
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	3720      	adds	r7, #32
 8010ef8:	46bd      	mov	sp, r7
 8010efa:	bd80      	pop	{r7, pc}

08010efc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010efc:	b580      	push	{r7, lr}
 8010efe:	b088      	sub	sp, #32
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	60f8      	str	r0, [r7, #12]
 8010f04:	60b9      	str	r1, [r7, #8]
 8010f06:	607a      	str	r2, [r7, #4]
 8010f08:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f0c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	009b      	lsls	r3, r3, #2
 8010f12:	461a      	mov	r2, r3
 8010f14:	21a5      	movs	r1, #165	; 0xa5
 8010f16:	f00f f81d 	bl	801ff54 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010f24:	3b01      	subs	r3, #1
 8010f26:	009b      	lsls	r3, r3, #2
 8010f28:	4413      	add	r3, r2
 8010f2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010f2c:	69bb      	ldr	r3, [r7, #24]
 8010f2e:	f023 0307 	bic.w	r3, r3, #7
 8010f32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010f34:	69bb      	ldr	r3, [r7, #24]
 8010f36:	f003 0307 	and.w	r3, r3, #7
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d00a      	beq.n	8010f54 <prvInitialiseNewTask+0x58>
	__asm volatile
 8010f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f42:	f383 8811 	msr	BASEPRI, r3
 8010f46:	f3bf 8f6f 	isb	sy
 8010f4a:	f3bf 8f4f 	dsb	sy
 8010f4e:	617b      	str	r3, [r7, #20]
}
 8010f50:	bf00      	nop
 8010f52:	e7fe      	b.n	8010f52 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010f54:	68bb      	ldr	r3, [r7, #8]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d01f      	beq.n	8010f9a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	61fb      	str	r3, [r7, #28]
 8010f5e:	e012      	b.n	8010f86 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010f60:	68ba      	ldr	r2, [r7, #8]
 8010f62:	69fb      	ldr	r3, [r7, #28]
 8010f64:	4413      	add	r3, r2
 8010f66:	7819      	ldrb	r1, [r3, #0]
 8010f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f6a:	69fb      	ldr	r3, [r7, #28]
 8010f6c:	4413      	add	r3, r2
 8010f6e:	3334      	adds	r3, #52	; 0x34
 8010f70:	460a      	mov	r2, r1
 8010f72:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010f74:	68ba      	ldr	r2, [r7, #8]
 8010f76:	69fb      	ldr	r3, [r7, #28]
 8010f78:	4413      	add	r3, r2
 8010f7a:	781b      	ldrb	r3, [r3, #0]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d006      	beq.n	8010f8e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010f80:	69fb      	ldr	r3, [r7, #28]
 8010f82:	3301      	adds	r3, #1
 8010f84:	61fb      	str	r3, [r7, #28]
 8010f86:	69fb      	ldr	r3, [r7, #28]
 8010f88:	2b0f      	cmp	r3, #15
 8010f8a:	d9e9      	bls.n	8010f60 <prvInitialiseNewTask+0x64>
 8010f8c:	e000      	b.n	8010f90 <prvInitialiseNewTask+0x94>
			{
				break;
 8010f8e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f92:	2200      	movs	r2, #0
 8010f94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010f98:	e003      	b.n	8010fa2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f9c:	2200      	movs	r2, #0
 8010f9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fa4:	2b37      	cmp	r3, #55	; 0x37
 8010fa6:	d901      	bls.n	8010fac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010fa8:	2337      	movs	r3, #55	; 0x37
 8010faa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010fb0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010fb6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fba:	2200      	movs	r2, #0
 8010fbc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fc0:	3304      	adds	r3, #4
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	f7fe fda0 	bl	800fb08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fca:	3318      	adds	r3, #24
 8010fcc:	4618      	mov	r0, r3
 8010fce:	f7fe fd9b 	bl	800fb08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010fd6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fda:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fe0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010fe6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8010fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fea:	2200      	movs	r2, #0
 8010fec:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ff0:	2200      	movs	r2, #0
 8010ff2:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ff6:	2200      	movs	r2, #0
 8010ff8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010ffc:	683a      	ldr	r2, [r7, #0]
 8010ffe:	68f9      	ldr	r1, [r7, #12]
 8011000:	69b8      	ldr	r0, [r7, #24]
 8011002:	f001 fddf 	bl	8012bc4 <pxPortInitialiseStack>
 8011006:	4602      	mov	r2, r0
 8011008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801100a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801100c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801100e:	2b00      	cmp	r3, #0
 8011010:	d002      	beq.n	8011018 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011016:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011018:	bf00      	nop
 801101a:	3720      	adds	r7, #32
 801101c:	46bd      	mov	sp, r7
 801101e:	bd80      	pop	{r7, pc}

08011020 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011020:	b580      	push	{r7, lr}
 8011022:	b082      	sub	sp, #8
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011028:	f001 fefc 	bl	8012e24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801102c:	4b2d      	ldr	r3, [pc, #180]	; (80110e4 <prvAddNewTaskToReadyList+0xc4>)
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	3301      	adds	r3, #1
 8011032:	4a2c      	ldr	r2, [pc, #176]	; (80110e4 <prvAddNewTaskToReadyList+0xc4>)
 8011034:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011036:	4b2c      	ldr	r3, [pc, #176]	; (80110e8 <prvAddNewTaskToReadyList+0xc8>)
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d109      	bne.n	8011052 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801103e:	4a2a      	ldr	r2, [pc, #168]	; (80110e8 <prvAddNewTaskToReadyList+0xc8>)
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011044:	4b27      	ldr	r3, [pc, #156]	; (80110e4 <prvAddNewTaskToReadyList+0xc4>)
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	2b01      	cmp	r3, #1
 801104a:	d110      	bne.n	801106e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801104c:	f000 fdac 	bl	8011ba8 <prvInitialiseTaskLists>
 8011050:	e00d      	b.n	801106e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011052:	4b26      	ldr	r3, [pc, #152]	; (80110ec <prvAddNewTaskToReadyList+0xcc>)
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d109      	bne.n	801106e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801105a:	4b23      	ldr	r3, [pc, #140]	; (80110e8 <prvAddNewTaskToReadyList+0xc8>)
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011064:	429a      	cmp	r2, r3
 8011066:	d802      	bhi.n	801106e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011068:	4a1f      	ldr	r2, [pc, #124]	; (80110e8 <prvAddNewTaskToReadyList+0xc8>)
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801106e:	4b20      	ldr	r3, [pc, #128]	; (80110f0 <prvAddNewTaskToReadyList+0xd0>)
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	3301      	adds	r3, #1
 8011074:	4a1e      	ldr	r2, [pc, #120]	; (80110f0 <prvAddNewTaskToReadyList+0xd0>)
 8011076:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011078:	4b1d      	ldr	r3, [pc, #116]	; (80110f0 <prvAddNewTaskToReadyList+0xd0>)
 801107a:	681a      	ldr	r2, [r3, #0]
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011084:	4b1b      	ldr	r3, [pc, #108]	; (80110f4 <prvAddNewTaskToReadyList+0xd4>)
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	429a      	cmp	r2, r3
 801108a:	d903      	bls.n	8011094 <prvAddNewTaskToReadyList+0x74>
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011090:	4a18      	ldr	r2, [pc, #96]	; (80110f4 <prvAddNewTaskToReadyList+0xd4>)
 8011092:	6013      	str	r3, [r2, #0]
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011098:	4613      	mov	r3, r2
 801109a:	009b      	lsls	r3, r3, #2
 801109c:	4413      	add	r3, r2
 801109e:	009b      	lsls	r3, r3, #2
 80110a0:	4a15      	ldr	r2, [pc, #84]	; (80110f8 <prvAddNewTaskToReadyList+0xd8>)
 80110a2:	441a      	add	r2, r3
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	3304      	adds	r3, #4
 80110a8:	4619      	mov	r1, r3
 80110aa:	4610      	mov	r0, r2
 80110ac:	f7fe fd39 	bl	800fb22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80110b0:	f001 fee8 	bl	8012e84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80110b4:	4b0d      	ldr	r3, [pc, #52]	; (80110ec <prvAddNewTaskToReadyList+0xcc>)
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d00e      	beq.n	80110da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80110bc:	4b0a      	ldr	r3, [pc, #40]	; (80110e8 <prvAddNewTaskToReadyList+0xc8>)
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110c6:	429a      	cmp	r2, r3
 80110c8:	d207      	bcs.n	80110da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80110ca:	4b0c      	ldr	r3, [pc, #48]	; (80110fc <prvAddNewTaskToReadyList+0xdc>)
 80110cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110d0:	601a      	str	r2, [r3, #0]
 80110d2:	f3bf 8f4f 	dsb	sy
 80110d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80110da:	bf00      	nop
 80110dc:	3708      	adds	r7, #8
 80110de:	46bd      	mov	sp, r7
 80110e0:	bd80      	pop	{r7, pc}
 80110e2:	bf00      	nop
 80110e4:	20004db0 	.word	0x20004db0
 80110e8:	200048dc 	.word	0x200048dc
 80110ec:	20004dbc 	.word	0x20004dbc
 80110f0:	20004dcc 	.word	0x20004dcc
 80110f4:	20004db8 	.word	0x20004db8
 80110f8:	200048e0 	.word	0x200048e0
 80110fc:	e000ed04 	.word	0xe000ed04

08011100 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8011100:	b580      	push	{r7, lr}
 8011102:	b084      	sub	sp, #16
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8011108:	f001 fe8c 	bl	8012e24 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d102      	bne.n	8011118 <vTaskDelete+0x18>
 8011112:	4b2c      	ldr	r3, [pc, #176]	; (80111c4 <vTaskDelete+0xc4>)
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	e000      	b.n	801111a <vTaskDelete+0x1a>
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	3304      	adds	r3, #4
 8011120:	4618      	mov	r0, r3
 8011122:	f7fe fd5b 	bl	800fbdc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801112a:	2b00      	cmp	r3, #0
 801112c:	d004      	beq.n	8011138 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	3318      	adds	r3, #24
 8011132:	4618      	mov	r0, r3
 8011134:	f7fe fd52 	bl	800fbdc <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8011138:	4b23      	ldr	r3, [pc, #140]	; (80111c8 <vTaskDelete+0xc8>)
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	3301      	adds	r3, #1
 801113e:	4a22      	ldr	r2, [pc, #136]	; (80111c8 <vTaskDelete+0xc8>)
 8011140:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8011142:	4b20      	ldr	r3, [pc, #128]	; (80111c4 <vTaskDelete+0xc4>)
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	68fa      	ldr	r2, [r7, #12]
 8011148:	429a      	cmp	r2, r3
 801114a:	d10b      	bne.n	8011164 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	3304      	adds	r3, #4
 8011150:	4619      	mov	r1, r3
 8011152:	481e      	ldr	r0, [pc, #120]	; (80111cc <vTaskDelete+0xcc>)
 8011154:	f7fe fce5 	bl	800fb22 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8011158:	4b1d      	ldr	r3, [pc, #116]	; (80111d0 <vTaskDelete+0xd0>)
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	3301      	adds	r3, #1
 801115e:	4a1c      	ldr	r2, [pc, #112]	; (80111d0 <vTaskDelete+0xd0>)
 8011160:	6013      	str	r3, [r2, #0]
 8011162:	e009      	b.n	8011178 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8011164:	4b1b      	ldr	r3, [pc, #108]	; (80111d4 <vTaskDelete+0xd4>)
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	3b01      	subs	r3, #1
 801116a:	4a1a      	ldr	r2, [pc, #104]	; (80111d4 <vTaskDelete+0xd4>)
 801116c:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 801116e:	68f8      	ldr	r0, [r7, #12]
 8011170:	f000 fe5c 	bl	8011e2c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8011174:	f000 fe8a 	bl	8011e8c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8011178:	f001 fe84 	bl	8012e84 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 801117c:	4b16      	ldr	r3, [pc, #88]	; (80111d8 <vTaskDelete+0xd8>)
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d01b      	beq.n	80111bc <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8011184:	4b0f      	ldr	r3, [pc, #60]	; (80111c4 <vTaskDelete+0xc4>)
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	68fa      	ldr	r2, [r7, #12]
 801118a:	429a      	cmp	r2, r3
 801118c:	d116      	bne.n	80111bc <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 801118e:	4b13      	ldr	r3, [pc, #76]	; (80111dc <vTaskDelete+0xdc>)
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	2b00      	cmp	r3, #0
 8011194:	d00a      	beq.n	80111ac <vTaskDelete+0xac>
	__asm volatile
 8011196:	f04f 0350 	mov.w	r3, #80	; 0x50
 801119a:	f383 8811 	msr	BASEPRI, r3
 801119e:	f3bf 8f6f 	isb	sy
 80111a2:	f3bf 8f4f 	dsb	sy
 80111a6:	60bb      	str	r3, [r7, #8]
}
 80111a8:	bf00      	nop
 80111aa:	e7fe      	b.n	80111aa <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80111ac:	4b0c      	ldr	r3, [pc, #48]	; (80111e0 <vTaskDelete+0xe0>)
 80111ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111b2:	601a      	str	r2, [r3, #0]
 80111b4:	f3bf 8f4f 	dsb	sy
 80111b8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80111bc:	bf00      	nop
 80111be:	3710      	adds	r7, #16
 80111c0:	46bd      	mov	sp, r7
 80111c2:	bd80      	pop	{r7, pc}
 80111c4:	200048dc 	.word	0x200048dc
 80111c8:	20004dcc 	.word	0x20004dcc
 80111cc:	20004d84 	.word	0x20004d84
 80111d0:	20004d98 	.word	0x20004d98
 80111d4:	20004db0 	.word	0x20004db0
 80111d8:	20004dbc 	.word	0x20004dbc
 80111dc:	20004dd8 	.word	0x20004dd8
 80111e0:	e000ed04 	.word	0xe000ed04

080111e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80111e4:	b580      	push	{r7, lr}
 80111e6:	b084      	sub	sp, #16
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80111ec:	2300      	movs	r3, #0
 80111ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d017      	beq.n	8011226 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80111f6:	4b13      	ldr	r3, [pc, #76]	; (8011244 <vTaskDelay+0x60>)
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d00a      	beq.n	8011214 <vTaskDelay+0x30>
	__asm volatile
 80111fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011202:	f383 8811 	msr	BASEPRI, r3
 8011206:	f3bf 8f6f 	isb	sy
 801120a:	f3bf 8f4f 	dsb	sy
 801120e:	60bb      	str	r3, [r7, #8]
}
 8011210:	bf00      	nop
 8011212:	e7fe      	b.n	8011212 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011214:	f000 f8e8 	bl	80113e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011218:	2100      	movs	r1, #0
 801121a:	6878      	ldr	r0, [r7, #4]
 801121c:	f001 f930 	bl	8012480 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011220:	f000 f8f0 	bl	8011404 <xTaskResumeAll>
 8011224:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d107      	bne.n	801123c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801122c:	4b06      	ldr	r3, [pc, #24]	; (8011248 <vTaskDelay+0x64>)
 801122e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011232:	601a      	str	r2, [r3, #0]
 8011234:	f3bf 8f4f 	dsb	sy
 8011238:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801123c:	bf00      	nop
 801123e:	3710      	adds	r7, #16
 8011240:	46bd      	mov	sp, r7
 8011242:	bd80      	pop	{r7, pc}
 8011244:	20004dd8 	.word	0x20004dd8
 8011248:	e000ed04 	.word	0xe000ed04

0801124c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 801124c:	b580      	push	{r7, lr}
 801124e:	b088      	sub	sp, #32
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8011258:	69bb      	ldr	r3, [r7, #24]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d10a      	bne.n	8011274 <eTaskGetState+0x28>
	__asm volatile
 801125e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011262:	f383 8811 	msr	BASEPRI, r3
 8011266:	f3bf 8f6f 	isb	sy
 801126a:	f3bf 8f4f 	dsb	sy
 801126e:	60bb      	str	r3, [r7, #8]
}
 8011270:	bf00      	nop
 8011272:	e7fe      	b.n	8011272 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8011274:	4b23      	ldr	r3, [pc, #140]	; (8011304 <eTaskGetState+0xb8>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	69ba      	ldr	r2, [r7, #24]
 801127a:	429a      	cmp	r2, r3
 801127c:	d102      	bne.n	8011284 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 801127e:	2300      	movs	r3, #0
 8011280:	77fb      	strb	r3, [r7, #31]
 8011282:	e03a      	b.n	80112fa <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8011284:	f001 fdce 	bl	8012e24 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8011288:	69bb      	ldr	r3, [r7, #24]
 801128a:	695b      	ldr	r3, [r3, #20]
 801128c:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 801128e:	4b1e      	ldr	r3, [pc, #120]	; (8011308 <eTaskGetState+0xbc>)
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8011294:	4b1d      	ldr	r3, [pc, #116]	; (801130c <eTaskGetState+0xc0>)
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 801129a:	f001 fdf3 	bl	8012e84 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 801129e:	697a      	ldr	r2, [r7, #20]
 80112a0:	693b      	ldr	r3, [r7, #16]
 80112a2:	429a      	cmp	r2, r3
 80112a4:	d003      	beq.n	80112ae <eTaskGetState+0x62>
 80112a6:	697a      	ldr	r2, [r7, #20]
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	429a      	cmp	r2, r3
 80112ac:	d102      	bne.n	80112b4 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80112ae:	2302      	movs	r3, #2
 80112b0:	77fb      	strb	r3, [r7, #31]
 80112b2:	e022      	b.n	80112fa <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80112b4:	697b      	ldr	r3, [r7, #20]
 80112b6:	4a16      	ldr	r2, [pc, #88]	; (8011310 <eTaskGetState+0xc4>)
 80112b8:	4293      	cmp	r3, r2
 80112ba:	d112      	bne.n	80112e2 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80112bc:	69bb      	ldr	r3, [r7, #24]
 80112be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d10b      	bne.n	80112dc <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80112c4:	69bb      	ldr	r3, [r7, #24]
 80112c6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80112ca:	b2db      	uxtb	r3, r3
 80112cc:	2b01      	cmp	r3, #1
 80112ce:	d102      	bne.n	80112d6 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 80112d0:	2302      	movs	r3, #2
 80112d2:	77fb      	strb	r3, [r7, #31]
 80112d4:	e011      	b.n	80112fa <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 80112d6:	2303      	movs	r3, #3
 80112d8:	77fb      	strb	r3, [r7, #31]
 80112da:	e00e      	b.n	80112fa <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 80112dc:	2302      	movs	r3, #2
 80112de:	77fb      	strb	r3, [r7, #31]
 80112e0:	e00b      	b.n	80112fa <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80112e2:	697b      	ldr	r3, [r7, #20]
 80112e4:	4a0b      	ldr	r2, [pc, #44]	; (8011314 <eTaskGetState+0xc8>)
 80112e6:	4293      	cmp	r3, r2
 80112e8:	d002      	beq.n	80112f0 <eTaskGetState+0xa4>
 80112ea:	697b      	ldr	r3, [r7, #20]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d102      	bne.n	80112f6 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80112f0:	2304      	movs	r3, #4
 80112f2:	77fb      	strb	r3, [r7, #31]
 80112f4:	e001      	b.n	80112fa <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80112f6:	2301      	movs	r3, #1
 80112f8:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 80112fa:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80112fc:	4618      	mov	r0, r3
 80112fe:	3720      	adds	r7, #32
 8011300:	46bd      	mov	sp, r7
 8011302:	bd80      	pop	{r7, pc}
 8011304:	200048dc 	.word	0x200048dc
 8011308:	20004d68 	.word	0x20004d68
 801130c:	20004d6c 	.word	0x20004d6c
 8011310:	20004d9c 	.word	0x20004d9c
 8011314:	20004d84 	.word	0x20004d84

08011318 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b08a      	sub	sp, #40	; 0x28
 801131c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801131e:	2300      	movs	r3, #0
 8011320:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011322:	2300      	movs	r3, #0
 8011324:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011326:	463a      	mov	r2, r7
 8011328:	1d39      	adds	r1, r7, #4
 801132a:	f107 0308 	add.w	r3, r7, #8
 801132e:	4618      	mov	r0, r3
 8011330:	f7fe fb96 	bl	800fa60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011334:	6839      	ldr	r1, [r7, #0]
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	68ba      	ldr	r2, [r7, #8]
 801133a:	9202      	str	r2, [sp, #8]
 801133c:	9301      	str	r3, [sp, #4]
 801133e:	2300      	movs	r3, #0
 8011340:	9300      	str	r3, [sp, #0]
 8011342:	2300      	movs	r3, #0
 8011344:	460a      	mov	r2, r1
 8011346:	4922      	ldr	r1, [pc, #136]	; (80113d0 <vTaskStartScheduler+0xb8>)
 8011348:	4822      	ldr	r0, [pc, #136]	; (80113d4 <vTaskStartScheduler+0xbc>)
 801134a:	f7ff fd35 	bl	8010db8 <xTaskCreateStatic>
 801134e:	4603      	mov	r3, r0
 8011350:	4a21      	ldr	r2, [pc, #132]	; (80113d8 <vTaskStartScheduler+0xc0>)
 8011352:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011354:	4b20      	ldr	r3, [pc, #128]	; (80113d8 <vTaskStartScheduler+0xc0>)
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d002      	beq.n	8011362 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801135c:	2301      	movs	r3, #1
 801135e:	617b      	str	r3, [r7, #20]
 8011360:	e001      	b.n	8011366 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011362:	2300      	movs	r3, #0
 8011364:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011366:	697b      	ldr	r3, [r7, #20]
 8011368:	2b01      	cmp	r3, #1
 801136a:	d102      	bne.n	8011372 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801136c:	f001 f8dc 	bl	8012528 <xTimerCreateTimerTask>
 8011370:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011372:	697b      	ldr	r3, [r7, #20]
 8011374:	2b01      	cmp	r3, #1
 8011376:	d118      	bne.n	80113aa <vTaskStartScheduler+0x92>
	__asm volatile
 8011378:	f04f 0350 	mov.w	r3, #80	; 0x50
 801137c:	f383 8811 	msr	BASEPRI, r3
 8011380:	f3bf 8f6f 	isb	sy
 8011384:	f3bf 8f4f 	dsb	sy
 8011388:	613b      	str	r3, [r7, #16]
}
 801138a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801138c:	4b13      	ldr	r3, [pc, #76]	; (80113dc <vTaskStartScheduler+0xc4>)
 801138e:	f04f 32ff 	mov.w	r2, #4294967295
 8011392:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011394:	4b12      	ldr	r3, [pc, #72]	; (80113e0 <vTaskStartScheduler+0xc8>)
 8011396:	2201      	movs	r2, #1
 8011398:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801139a:	4b12      	ldr	r3, [pc, #72]	; (80113e4 <vTaskStartScheduler+0xcc>)
 801139c:	2200      	movs	r2, #0
 801139e:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80113a0:	f7f0 f8de 	bl	8001560 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80113a4:	f001 fc9c 	bl	8012ce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80113a8:	e00e      	b.n	80113c8 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80113aa:	697b      	ldr	r3, [r7, #20]
 80113ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113b0:	d10a      	bne.n	80113c8 <vTaskStartScheduler+0xb0>
	__asm volatile
 80113b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113b6:	f383 8811 	msr	BASEPRI, r3
 80113ba:	f3bf 8f6f 	isb	sy
 80113be:	f3bf 8f4f 	dsb	sy
 80113c2:	60fb      	str	r3, [r7, #12]
}
 80113c4:	bf00      	nop
 80113c6:	e7fe      	b.n	80113c6 <vTaskStartScheduler+0xae>
}
 80113c8:	bf00      	nop
 80113ca:	3718      	adds	r7, #24
 80113cc:	46bd      	mov	sp, r7
 80113ce:	bd80      	pop	{r7, pc}
 80113d0:	080263ac 	.word	0x080263ac
 80113d4:	08011b79 	.word	0x08011b79
 80113d8:	20004dd4 	.word	0x20004dd4
 80113dc:	20004dd0 	.word	0x20004dd0
 80113e0:	20004dbc 	.word	0x20004dbc
 80113e4:	20004db4 	.word	0x20004db4

080113e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80113e8:	b480      	push	{r7}
 80113ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80113ec:	4b04      	ldr	r3, [pc, #16]	; (8011400 <vTaskSuspendAll+0x18>)
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	3301      	adds	r3, #1
 80113f2:	4a03      	ldr	r2, [pc, #12]	; (8011400 <vTaskSuspendAll+0x18>)
 80113f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80113f6:	bf00      	nop
 80113f8:	46bd      	mov	sp, r7
 80113fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113fe:	4770      	bx	lr
 8011400:	20004dd8 	.word	0x20004dd8

08011404 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011404:	b580      	push	{r7, lr}
 8011406:	b084      	sub	sp, #16
 8011408:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801140a:	2300      	movs	r3, #0
 801140c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801140e:	2300      	movs	r3, #0
 8011410:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011412:	4b42      	ldr	r3, [pc, #264]	; (801151c <xTaskResumeAll+0x118>)
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d10a      	bne.n	8011430 <xTaskResumeAll+0x2c>
	__asm volatile
 801141a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801141e:	f383 8811 	msr	BASEPRI, r3
 8011422:	f3bf 8f6f 	isb	sy
 8011426:	f3bf 8f4f 	dsb	sy
 801142a:	603b      	str	r3, [r7, #0]
}
 801142c:	bf00      	nop
 801142e:	e7fe      	b.n	801142e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011430:	f001 fcf8 	bl	8012e24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011434:	4b39      	ldr	r3, [pc, #228]	; (801151c <xTaskResumeAll+0x118>)
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	3b01      	subs	r3, #1
 801143a:	4a38      	ldr	r2, [pc, #224]	; (801151c <xTaskResumeAll+0x118>)
 801143c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801143e:	4b37      	ldr	r3, [pc, #220]	; (801151c <xTaskResumeAll+0x118>)
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d162      	bne.n	801150c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011446:	4b36      	ldr	r3, [pc, #216]	; (8011520 <xTaskResumeAll+0x11c>)
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	2b00      	cmp	r3, #0
 801144c:	d05e      	beq.n	801150c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801144e:	e02f      	b.n	80114b0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011450:	4b34      	ldr	r3, [pc, #208]	; (8011524 <xTaskResumeAll+0x120>)
 8011452:	68db      	ldr	r3, [r3, #12]
 8011454:	68db      	ldr	r3, [r3, #12]
 8011456:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	3318      	adds	r3, #24
 801145c:	4618      	mov	r0, r3
 801145e:	f7fe fbbd 	bl	800fbdc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	3304      	adds	r3, #4
 8011466:	4618      	mov	r0, r3
 8011468:	f7fe fbb8 	bl	800fbdc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011470:	4b2d      	ldr	r3, [pc, #180]	; (8011528 <xTaskResumeAll+0x124>)
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	429a      	cmp	r2, r3
 8011476:	d903      	bls.n	8011480 <xTaskResumeAll+0x7c>
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801147c:	4a2a      	ldr	r2, [pc, #168]	; (8011528 <xTaskResumeAll+0x124>)
 801147e:	6013      	str	r3, [r2, #0]
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011484:	4613      	mov	r3, r2
 8011486:	009b      	lsls	r3, r3, #2
 8011488:	4413      	add	r3, r2
 801148a:	009b      	lsls	r3, r3, #2
 801148c:	4a27      	ldr	r2, [pc, #156]	; (801152c <xTaskResumeAll+0x128>)
 801148e:	441a      	add	r2, r3
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	3304      	adds	r3, #4
 8011494:	4619      	mov	r1, r3
 8011496:	4610      	mov	r0, r2
 8011498:	f7fe fb43 	bl	800fb22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114a0:	4b23      	ldr	r3, [pc, #140]	; (8011530 <xTaskResumeAll+0x12c>)
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114a6:	429a      	cmp	r2, r3
 80114a8:	d302      	bcc.n	80114b0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80114aa:	4b22      	ldr	r3, [pc, #136]	; (8011534 <xTaskResumeAll+0x130>)
 80114ac:	2201      	movs	r2, #1
 80114ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80114b0:	4b1c      	ldr	r3, [pc, #112]	; (8011524 <xTaskResumeAll+0x120>)
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d1cb      	bne.n	8011450 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d001      	beq.n	80114c2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80114be:	f000 fce5 	bl	8011e8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80114c2:	4b1d      	ldr	r3, [pc, #116]	; (8011538 <xTaskResumeAll+0x134>)
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d010      	beq.n	80114f0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80114ce:	f000 f8e9 	bl	80116a4 <xTaskIncrementTick>
 80114d2:	4603      	mov	r3, r0
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d002      	beq.n	80114de <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80114d8:	4b16      	ldr	r3, [pc, #88]	; (8011534 <xTaskResumeAll+0x130>)
 80114da:	2201      	movs	r2, #1
 80114dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	3b01      	subs	r3, #1
 80114e2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d1f1      	bne.n	80114ce <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80114ea:	4b13      	ldr	r3, [pc, #76]	; (8011538 <xTaskResumeAll+0x134>)
 80114ec:	2200      	movs	r2, #0
 80114ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80114f0:	4b10      	ldr	r3, [pc, #64]	; (8011534 <xTaskResumeAll+0x130>)
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d009      	beq.n	801150c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80114f8:	2301      	movs	r3, #1
 80114fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80114fc:	4b0f      	ldr	r3, [pc, #60]	; (801153c <xTaskResumeAll+0x138>)
 80114fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011502:	601a      	str	r2, [r3, #0]
 8011504:	f3bf 8f4f 	dsb	sy
 8011508:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801150c:	f001 fcba 	bl	8012e84 <vPortExitCritical>

	return xAlreadyYielded;
 8011510:	68bb      	ldr	r3, [r7, #8]
}
 8011512:	4618      	mov	r0, r3
 8011514:	3710      	adds	r7, #16
 8011516:	46bd      	mov	sp, r7
 8011518:	bd80      	pop	{r7, pc}
 801151a:	bf00      	nop
 801151c:	20004dd8 	.word	0x20004dd8
 8011520:	20004db0 	.word	0x20004db0
 8011524:	20004d70 	.word	0x20004d70
 8011528:	20004db8 	.word	0x20004db8
 801152c:	200048e0 	.word	0x200048e0
 8011530:	200048dc 	.word	0x200048dc
 8011534:	20004dc4 	.word	0x20004dc4
 8011538:	20004dc0 	.word	0x20004dc0
 801153c:	e000ed04 	.word	0xe000ed04

08011540 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011540:	b480      	push	{r7}
 8011542:	b083      	sub	sp, #12
 8011544:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011546:	4b05      	ldr	r3, [pc, #20]	; (801155c <xTaskGetTickCount+0x1c>)
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801154c:	687b      	ldr	r3, [r7, #4]
}
 801154e:	4618      	mov	r0, r3
 8011550:	370c      	adds	r7, #12
 8011552:	46bd      	mov	sp, r7
 8011554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011558:	4770      	bx	lr
 801155a:	bf00      	nop
 801155c:	20004db4 	.word	0x20004db4

08011560 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8011560:	b580      	push	{r7, lr}
 8011562:	b082      	sub	sp, #8
 8011564:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011566:	f001 fd3f 	bl	8012fe8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801156a:	2300      	movs	r3, #0
 801156c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801156e:	4b04      	ldr	r3, [pc, #16]	; (8011580 <xTaskGetTickCountFromISR+0x20>)
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011574:	683b      	ldr	r3, [r7, #0]
}
 8011576:	4618      	mov	r0, r3
 8011578:	3708      	adds	r7, #8
 801157a:	46bd      	mov	sp, r7
 801157c:	bd80      	pop	{r7, pc}
 801157e:	bf00      	nop
 8011580:	20004db4 	.word	0x20004db4

08011584 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8011584:	b580      	push	{r7, lr}
 8011586:	b086      	sub	sp, #24
 8011588:	af00      	add	r7, sp, #0
 801158a:	60f8      	str	r0, [r7, #12]
 801158c:	60b9      	str	r1, [r7, #8]
 801158e:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8011590:	2300      	movs	r3, #0
 8011592:	617b      	str	r3, [r7, #20]
 8011594:	2338      	movs	r3, #56	; 0x38
 8011596:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8011598:	f7ff ff26 	bl	80113e8 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 801159c:	4b3b      	ldr	r3, [pc, #236]	; (801168c <uxTaskGetSystemState+0x108>)
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	68ba      	ldr	r2, [r7, #8]
 80115a2:	429a      	cmp	r2, r3
 80115a4:	d36a      	bcc.n	801167c <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 80115a6:	693b      	ldr	r3, [r7, #16]
 80115a8:	3b01      	subs	r3, #1
 80115aa:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80115ac:	697a      	ldr	r2, [r7, #20]
 80115ae:	4613      	mov	r3, r2
 80115b0:	00db      	lsls	r3, r3, #3
 80115b2:	4413      	add	r3, r2
 80115b4:	009b      	lsls	r3, r3, #2
 80115b6:	461a      	mov	r2, r3
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	1898      	adds	r0, r3, r2
 80115bc:	693a      	ldr	r2, [r7, #16]
 80115be:	4613      	mov	r3, r2
 80115c0:	009b      	lsls	r3, r3, #2
 80115c2:	4413      	add	r3, r2
 80115c4:	009b      	lsls	r3, r3, #2
 80115c6:	4a32      	ldr	r2, [pc, #200]	; (8011690 <uxTaskGetSystemState+0x10c>)
 80115c8:	4413      	add	r3, r2
 80115ca:	2201      	movs	r2, #1
 80115cc:	4619      	mov	r1, r3
 80115ce:	f000 fbbf 	bl	8011d50 <prvListTasksWithinSingleList>
 80115d2:	4602      	mov	r2, r0
 80115d4:	697b      	ldr	r3, [r7, #20]
 80115d6:	4413      	add	r3, r2
 80115d8:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80115da:	693b      	ldr	r3, [r7, #16]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d1e2      	bne.n	80115a6 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 80115e0:	697a      	ldr	r2, [r7, #20]
 80115e2:	4613      	mov	r3, r2
 80115e4:	00db      	lsls	r3, r3, #3
 80115e6:	4413      	add	r3, r2
 80115e8:	009b      	lsls	r3, r3, #2
 80115ea:	461a      	mov	r2, r3
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	4413      	add	r3, r2
 80115f0:	4a28      	ldr	r2, [pc, #160]	; (8011694 <uxTaskGetSystemState+0x110>)
 80115f2:	6811      	ldr	r1, [r2, #0]
 80115f4:	2202      	movs	r2, #2
 80115f6:	4618      	mov	r0, r3
 80115f8:	f000 fbaa 	bl	8011d50 <prvListTasksWithinSingleList>
 80115fc:	4602      	mov	r2, r0
 80115fe:	697b      	ldr	r3, [r7, #20]
 8011600:	4413      	add	r3, r2
 8011602:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8011604:	697a      	ldr	r2, [r7, #20]
 8011606:	4613      	mov	r3, r2
 8011608:	00db      	lsls	r3, r3, #3
 801160a:	4413      	add	r3, r2
 801160c:	009b      	lsls	r3, r3, #2
 801160e:	461a      	mov	r2, r3
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	4413      	add	r3, r2
 8011614:	4a20      	ldr	r2, [pc, #128]	; (8011698 <uxTaskGetSystemState+0x114>)
 8011616:	6811      	ldr	r1, [r2, #0]
 8011618:	2202      	movs	r2, #2
 801161a:	4618      	mov	r0, r3
 801161c:	f000 fb98 	bl	8011d50 <prvListTasksWithinSingleList>
 8011620:	4602      	mov	r2, r0
 8011622:	697b      	ldr	r3, [r7, #20]
 8011624:	4413      	add	r3, r2
 8011626:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8011628:	697a      	ldr	r2, [r7, #20]
 801162a:	4613      	mov	r3, r2
 801162c:	00db      	lsls	r3, r3, #3
 801162e:	4413      	add	r3, r2
 8011630:	009b      	lsls	r3, r3, #2
 8011632:	461a      	mov	r2, r3
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	4413      	add	r3, r2
 8011638:	2204      	movs	r2, #4
 801163a:	4918      	ldr	r1, [pc, #96]	; (801169c <uxTaskGetSystemState+0x118>)
 801163c:	4618      	mov	r0, r3
 801163e:	f000 fb87 	bl	8011d50 <prvListTasksWithinSingleList>
 8011642:	4602      	mov	r2, r0
 8011644:	697b      	ldr	r3, [r7, #20]
 8011646:	4413      	add	r3, r2
 8011648:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 801164a:	697a      	ldr	r2, [r7, #20]
 801164c:	4613      	mov	r3, r2
 801164e:	00db      	lsls	r3, r3, #3
 8011650:	4413      	add	r3, r2
 8011652:	009b      	lsls	r3, r3, #2
 8011654:	461a      	mov	r2, r3
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	4413      	add	r3, r2
 801165a:	2203      	movs	r2, #3
 801165c:	4910      	ldr	r1, [pc, #64]	; (80116a0 <uxTaskGetSystemState+0x11c>)
 801165e:	4618      	mov	r0, r3
 8011660:	f000 fb76 	bl	8011d50 <prvListTasksWithinSingleList>
 8011664:	4602      	mov	r2, r0
 8011666:	697b      	ldr	r3, [r7, #20]
 8011668:	4413      	add	r3, r2
 801166a:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d004      	beq.n	801167c <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8011672:	f7ef ff7c 	bl	800156e <getRunTimeCounterValue>
 8011676:	4602      	mov	r2, r0
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 801167c:	f7ff fec2 	bl	8011404 <xTaskResumeAll>

		return uxTask;
 8011680:	697b      	ldr	r3, [r7, #20]
	}
 8011682:	4618      	mov	r0, r3
 8011684:	3718      	adds	r7, #24
 8011686:	46bd      	mov	sp, r7
 8011688:	bd80      	pop	{r7, pc}
 801168a:	bf00      	nop
 801168c:	20004db0 	.word	0x20004db0
 8011690:	200048e0 	.word	0x200048e0
 8011694:	20004d68 	.word	0x20004d68
 8011698:	20004d6c 	.word	0x20004d6c
 801169c:	20004d84 	.word	0x20004d84
 80116a0:	20004d9c 	.word	0x20004d9c

080116a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80116a4:	b580      	push	{r7, lr}
 80116a6:	b086      	sub	sp, #24
 80116a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80116aa:	2300      	movs	r3, #0
 80116ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80116ae:	4b4f      	ldr	r3, [pc, #316]	; (80117ec <xTaskIncrementTick+0x148>)
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	f040 808f 	bne.w	80117d6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80116b8:	4b4d      	ldr	r3, [pc, #308]	; (80117f0 <xTaskIncrementTick+0x14c>)
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	3301      	adds	r3, #1
 80116be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80116c0:	4a4b      	ldr	r2, [pc, #300]	; (80117f0 <xTaskIncrementTick+0x14c>)
 80116c2:	693b      	ldr	r3, [r7, #16]
 80116c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80116c6:	693b      	ldr	r3, [r7, #16]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d120      	bne.n	801170e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80116cc:	4b49      	ldr	r3, [pc, #292]	; (80117f4 <xTaskIncrementTick+0x150>)
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d00a      	beq.n	80116ec <xTaskIncrementTick+0x48>
	__asm volatile
 80116d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116da:	f383 8811 	msr	BASEPRI, r3
 80116de:	f3bf 8f6f 	isb	sy
 80116e2:	f3bf 8f4f 	dsb	sy
 80116e6:	603b      	str	r3, [r7, #0]
}
 80116e8:	bf00      	nop
 80116ea:	e7fe      	b.n	80116ea <xTaskIncrementTick+0x46>
 80116ec:	4b41      	ldr	r3, [pc, #260]	; (80117f4 <xTaskIncrementTick+0x150>)
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	60fb      	str	r3, [r7, #12]
 80116f2:	4b41      	ldr	r3, [pc, #260]	; (80117f8 <xTaskIncrementTick+0x154>)
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	4a3f      	ldr	r2, [pc, #252]	; (80117f4 <xTaskIncrementTick+0x150>)
 80116f8:	6013      	str	r3, [r2, #0]
 80116fa:	4a3f      	ldr	r2, [pc, #252]	; (80117f8 <xTaskIncrementTick+0x154>)
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	6013      	str	r3, [r2, #0]
 8011700:	4b3e      	ldr	r3, [pc, #248]	; (80117fc <xTaskIncrementTick+0x158>)
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	3301      	adds	r3, #1
 8011706:	4a3d      	ldr	r2, [pc, #244]	; (80117fc <xTaskIncrementTick+0x158>)
 8011708:	6013      	str	r3, [r2, #0]
 801170a:	f000 fbbf 	bl	8011e8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801170e:	4b3c      	ldr	r3, [pc, #240]	; (8011800 <xTaskIncrementTick+0x15c>)
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	693a      	ldr	r2, [r7, #16]
 8011714:	429a      	cmp	r2, r3
 8011716:	d349      	bcc.n	80117ac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011718:	4b36      	ldr	r3, [pc, #216]	; (80117f4 <xTaskIncrementTick+0x150>)
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	2b00      	cmp	r3, #0
 8011720:	d104      	bne.n	801172c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011722:	4b37      	ldr	r3, [pc, #220]	; (8011800 <xTaskIncrementTick+0x15c>)
 8011724:	f04f 32ff 	mov.w	r2, #4294967295
 8011728:	601a      	str	r2, [r3, #0]
					break;
 801172a:	e03f      	b.n	80117ac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801172c:	4b31      	ldr	r3, [pc, #196]	; (80117f4 <xTaskIncrementTick+0x150>)
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	68db      	ldr	r3, [r3, #12]
 8011732:	68db      	ldr	r3, [r3, #12]
 8011734:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011736:	68bb      	ldr	r3, [r7, #8]
 8011738:	685b      	ldr	r3, [r3, #4]
 801173a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801173c:	693a      	ldr	r2, [r7, #16]
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	429a      	cmp	r2, r3
 8011742:	d203      	bcs.n	801174c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011744:	4a2e      	ldr	r2, [pc, #184]	; (8011800 <xTaskIncrementTick+0x15c>)
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801174a:	e02f      	b.n	80117ac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801174c:	68bb      	ldr	r3, [r7, #8]
 801174e:	3304      	adds	r3, #4
 8011750:	4618      	mov	r0, r3
 8011752:	f7fe fa43 	bl	800fbdc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011756:	68bb      	ldr	r3, [r7, #8]
 8011758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801175a:	2b00      	cmp	r3, #0
 801175c:	d004      	beq.n	8011768 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801175e:	68bb      	ldr	r3, [r7, #8]
 8011760:	3318      	adds	r3, #24
 8011762:	4618      	mov	r0, r3
 8011764:	f7fe fa3a 	bl	800fbdc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011768:	68bb      	ldr	r3, [r7, #8]
 801176a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801176c:	4b25      	ldr	r3, [pc, #148]	; (8011804 <xTaskIncrementTick+0x160>)
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	429a      	cmp	r2, r3
 8011772:	d903      	bls.n	801177c <xTaskIncrementTick+0xd8>
 8011774:	68bb      	ldr	r3, [r7, #8]
 8011776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011778:	4a22      	ldr	r2, [pc, #136]	; (8011804 <xTaskIncrementTick+0x160>)
 801177a:	6013      	str	r3, [r2, #0]
 801177c:	68bb      	ldr	r3, [r7, #8]
 801177e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011780:	4613      	mov	r3, r2
 8011782:	009b      	lsls	r3, r3, #2
 8011784:	4413      	add	r3, r2
 8011786:	009b      	lsls	r3, r3, #2
 8011788:	4a1f      	ldr	r2, [pc, #124]	; (8011808 <xTaskIncrementTick+0x164>)
 801178a:	441a      	add	r2, r3
 801178c:	68bb      	ldr	r3, [r7, #8]
 801178e:	3304      	adds	r3, #4
 8011790:	4619      	mov	r1, r3
 8011792:	4610      	mov	r0, r2
 8011794:	f7fe f9c5 	bl	800fb22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011798:	68bb      	ldr	r3, [r7, #8]
 801179a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801179c:	4b1b      	ldr	r3, [pc, #108]	; (801180c <xTaskIncrementTick+0x168>)
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117a2:	429a      	cmp	r2, r3
 80117a4:	d3b8      	bcc.n	8011718 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80117a6:	2301      	movs	r3, #1
 80117a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80117aa:	e7b5      	b.n	8011718 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80117ac:	4b17      	ldr	r3, [pc, #92]	; (801180c <xTaskIncrementTick+0x168>)
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117b2:	4915      	ldr	r1, [pc, #84]	; (8011808 <xTaskIncrementTick+0x164>)
 80117b4:	4613      	mov	r3, r2
 80117b6:	009b      	lsls	r3, r3, #2
 80117b8:	4413      	add	r3, r2
 80117ba:	009b      	lsls	r3, r3, #2
 80117bc:	440b      	add	r3, r1
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	2b01      	cmp	r3, #1
 80117c2:	d901      	bls.n	80117c8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80117c4:	2301      	movs	r3, #1
 80117c6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80117c8:	4b11      	ldr	r3, [pc, #68]	; (8011810 <xTaskIncrementTick+0x16c>)
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d007      	beq.n	80117e0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80117d0:	2301      	movs	r3, #1
 80117d2:	617b      	str	r3, [r7, #20]
 80117d4:	e004      	b.n	80117e0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80117d6:	4b0f      	ldr	r3, [pc, #60]	; (8011814 <xTaskIncrementTick+0x170>)
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	3301      	adds	r3, #1
 80117dc:	4a0d      	ldr	r2, [pc, #52]	; (8011814 <xTaskIncrementTick+0x170>)
 80117de:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80117e0:	697b      	ldr	r3, [r7, #20]
}
 80117e2:	4618      	mov	r0, r3
 80117e4:	3718      	adds	r7, #24
 80117e6:	46bd      	mov	sp, r7
 80117e8:	bd80      	pop	{r7, pc}
 80117ea:	bf00      	nop
 80117ec:	20004dd8 	.word	0x20004dd8
 80117f0:	20004db4 	.word	0x20004db4
 80117f4:	20004d68 	.word	0x20004d68
 80117f8:	20004d6c 	.word	0x20004d6c
 80117fc:	20004dc8 	.word	0x20004dc8
 8011800:	20004dd0 	.word	0x20004dd0
 8011804:	20004db8 	.word	0x20004db8
 8011808:	200048e0 	.word	0x200048e0
 801180c:	200048dc 	.word	0x200048dc
 8011810:	20004dc4 	.word	0x20004dc4
 8011814:	20004dc0 	.word	0x20004dc0

08011818 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011818:	b580      	push	{r7, lr}
 801181a:	b084      	sub	sp, #16
 801181c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801181e:	4b33      	ldr	r3, [pc, #204]	; (80118ec <vTaskSwitchContext+0xd4>)
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d003      	beq.n	801182e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011826:	4b32      	ldr	r3, [pc, #200]	; (80118f0 <vTaskSwitchContext+0xd8>)
 8011828:	2201      	movs	r2, #1
 801182a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801182c:	e05a      	b.n	80118e4 <vTaskSwitchContext+0xcc>
		xYieldPending = pdFALSE;
 801182e:	4b30      	ldr	r3, [pc, #192]	; (80118f0 <vTaskSwitchContext+0xd8>)
 8011830:	2200      	movs	r2, #0
 8011832:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8011834:	f7ef fe9b 	bl	800156e <getRunTimeCounterValue>
 8011838:	4603      	mov	r3, r0
 801183a:	4a2e      	ldr	r2, [pc, #184]	; (80118f4 <vTaskSwitchContext+0xdc>)
 801183c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 801183e:	4b2d      	ldr	r3, [pc, #180]	; (80118f4 <vTaskSwitchContext+0xdc>)
 8011840:	681a      	ldr	r2, [r3, #0]
 8011842:	4b2d      	ldr	r3, [pc, #180]	; (80118f8 <vTaskSwitchContext+0xe0>)
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	429a      	cmp	r2, r3
 8011848:	d909      	bls.n	801185e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 801184a:	4b2c      	ldr	r3, [pc, #176]	; (80118fc <vTaskSwitchContext+0xe4>)
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011850:	4a28      	ldr	r2, [pc, #160]	; (80118f4 <vTaskSwitchContext+0xdc>)
 8011852:	6810      	ldr	r0, [r2, #0]
 8011854:	4a28      	ldr	r2, [pc, #160]	; (80118f8 <vTaskSwitchContext+0xe0>)
 8011856:	6812      	ldr	r2, [r2, #0]
 8011858:	1a82      	subs	r2, r0, r2
 801185a:	440a      	add	r2, r1
 801185c:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 801185e:	4b25      	ldr	r3, [pc, #148]	; (80118f4 <vTaskSwitchContext+0xdc>)
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	4a25      	ldr	r2, [pc, #148]	; (80118f8 <vTaskSwitchContext+0xe0>)
 8011864:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011866:	4b26      	ldr	r3, [pc, #152]	; (8011900 <vTaskSwitchContext+0xe8>)
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	60fb      	str	r3, [r7, #12]
 801186c:	e010      	b.n	8011890 <vTaskSwitchContext+0x78>
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d10a      	bne.n	801188a <vTaskSwitchContext+0x72>
	__asm volatile
 8011874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011878:	f383 8811 	msr	BASEPRI, r3
 801187c:	f3bf 8f6f 	isb	sy
 8011880:	f3bf 8f4f 	dsb	sy
 8011884:	607b      	str	r3, [r7, #4]
}
 8011886:	bf00      	nop
 8011888:	e7fe      	b.n	8011888 <vTaskSwitchContext+0x70>
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	3b01      	subs	r3, #1
 801188e:	60fb      	str	r3, [r7, #12]
 8011890:	491c      	ldr	r1, [pc, #112]	; (8011904 <vTaskSwitchContext+0xec>)
 8011892:	68fa      	ldr	r2, [r7, #12]
 8011894:	4613      	mov	r3, r2
 8011896:	009b      	lsls	r3, r3, #2
 8011898:	4413      	add	r3, r2
 801189a:	009b      	lsls	r3, r3, #2
 801189c:	440b      	add	r3, r1
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d0e4      	beq.n	801186e <vTaskSwitchContext+0x56>
 80118a4:	68fa      	ldr	r2, [r7, #12]
 80118a6:	4613      	mov	r3, r2
 80118a8:	009b      	lsls	r3, r3, #2
 80118aa:	4413      	add	r3, r2
 80118ac:	009b      	lsls	r3, r3, #2
 80118ae:	4a15      	ldr	r2, [pc, #84]	; (8011904 <vTaskSwitchContext+0xec>)
 80118b0:	4413      	add	r3, r2
 80118b2:	60bb      	str	r3, [r7, #8]
 80118b4:	68bb      	ldr	r3, [r7, #8]
 80118b6:	685b      	ldr	r3, [r3, #4]
 80118b8:	685a      	ldr	r2, [r3, #4]
 80118ba:	68bb      	ldr	r3, [r7, #8]
 80118bc:	605a      	str	r2, [r3, #4]
 80118be:	68bb      	ldr	r3, [r7, #8]
 80118c0:	685a      	ldr	r2, [r3, #4]
 80118c2:	68bb      	ldr	r3, [r7, #8]
 80118c4:	3308      	adds	r3, #8
 80118c6:	429a      	cmp	r2, r3
 80118c8:	d104      	bne.n	80118d4 <vTaskSwitchContext+0xbc>
 80118ca:	68bb      	ldr	r3, [r7, #8]
 80118cc:	685b      	ldr	r3, [r3, #4]
 80118ce:	685a      	ldr	r2, [r3, #4]
 80118d0:	68bb      	ldr	r3, [r7, #8]
 80118d2:	605a      	str	r2, [r3, #4]
 80118d4:	68bb      	ldr	r3, [r7, #8]
 80118d6:	685b      	ldr	r3, [r3, #4]
 80118d8:	68db      	ldr	r3, [r3, #12]
 80118da:	4a08      	ldr	r2, [pc, #32]	; (80118fc <vTaskSwitchContext+0xe4>)
 80118dc:	6013      	str	r3, [r2, #0]
 80118de:	4a08      	ldr	r2, [pc, #32]	; (8011900 <vTaskSwitchContext+0xe8>)
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	6013      	str	r3, [r2, #0]
}
 80118e4:	bf00      	nop
 80118e6:	3710      	adds	r7, #16
 80118e8:	46bd      	mov	sp, r7
 80118ea:	bd80      	pop	{r7, pc}
 80118ec:	20004dd8 	.word	0x20004dd8
 80118f0:	20004dc4 	.word	0x20004dc4
 80118f4:	20004de0 	.word	0x20004de0
 80118f8:	20004ddc 	.word	0x20004ddc
 80118fc:	200048dc 	.word	0x200048dc
 8011900:	20004db8 	.word	0x20004db8
 8011904:	200048e0 	.word	0x200048e0

08011908 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b084      	sub	sp, #16
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
 8011910:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d10a      	bne.n	801192e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011918:	f04f 0350 	mov.w	r3, #80	; 0x50
 801191c:	f383 8811 	msr	BASEPRI, r3
 8011920:	f3bf 8f6f 	isb	sy
 8011924:	f3bf 8f4f 	dsb	sy
 8011928:	60fb      	str	r3, [r7, #12]
}
 801192a:	bf00      	nop
 801192c:	e7fe      	b.n	801192c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801192e:	4b07      	ldr	r3, [pc, #28]	; (801194c <vTaskPlaceOnEventList+0x44>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	3318      	adds	r3, #24
 8011934:	4619      	mov	r1, r3
 8011936:	6878      	ldr	r0, [r7, #4]
 8011938:	f7fe f917 	bl	800fb6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801193c:	2101      	movs	r1, #1
 801193e:	6838      	ldr	r0, [r7, #0]
 8011940:	f000 fd9e 	bl	8012480 <prvAddCurrentTaskToDelayedList>
}
 8011944:	bf00      	nop
 8011946:	3710      	adds	r7, #16
 8011948:	46bd      	mov	sp, r7
 801194a:	bd80      	pop	{r7, pc}
 801194c:	200048dc 	.word	0x200048dc

08011950 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011950:	b580      	push	{r7, lr}
 8011952:	b086      	sub	sp, #24
 8011954:	af00      	add	r7, sp, #0
 8011956:	60f8      	str	r0, [r7, #12]
 8011958:	60b9      	str	r1, [r7, #8]
 801195a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d10a      	bne.n	8011978 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8011962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011966:	f383 8811 	msr	BASEPRI, r3
 801196a:	f3bf 8f6f 	isb	sy
 801196e:	f3bf 8f4f 	dsb	sy
 8011972:	617b      	str	r3, [r7, #20]
}
 8011974:	bf00      	nop
 8011976:	e7fe      	b.n	8011976 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011978:	4b0a      	ldr	r3, [pc, #40]	; (80119a4 <vTaskPlaceOnEventListRestricted+0x54>)
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	3318      	adds	r3, #24
 801197e:	4619      	mov	r1, r3
 8011980:	68f8      	ldr	r0, [r7, #12]
 8011982:	f7fe f8ce 	bl	800fb22 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	2b00      	cmp	r3, #0
 801198a:	d002      	beq.n	8011992 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801198c:	f04f 33ff 	mov.w	r3, #4294967295
 8011990:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011992:	6879      	ldr	r1, [r7, #4]
 8011994:	68b8      	ldr	r0, [r7, #8]
 8011996:	f000 fd73 	bl	8012480 <prvAddCurrentTaskToDelayedList>
	}
 801199a:	bf00      	nop
 801199c:	3718      	adds	r7, #24
 801199e:	46bd      	mov	sp, r7
 80119a0:	bd80      	pop	{r7, pc}
 80119a2:	bf00      	nop
 80119a4:	200048dc 	.word	0x200048dc

080119a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80119a8:	b580      	push	{r7, lr}
 80119aa:	b086      	sub	sp, #24
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	68db      	ldr	r3, [r3, #12]
 80119b4:	68db      	ldr	r3, [r3, #12]
 80119b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80119b8:	693b      	ldr	r3, [r7, #16]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d10a      	bne.n	80119d4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80119be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119c2:	f383 8811 	msr	BASEPRI, r3
 80119c6:	f3bf 8f6f 	isb	sy
 80119ca:	f3bf 8f4f 	dsb	sy
 80119ce:	60fb      	str	r3, [r7, #12]
}
 80119d0:	bf00      	nop
 80119d2:	e7fe      	b.n	80119d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80119d4:	693b      	ldr	r3, [r7, #16]
 80119d6:	3318      	adds	r3, #24
 80119d8:	4618      	mov	r0, r3
 80119da:	f7fe f8ff 	bl	800fbdc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80119de:	4b1e      	ldr	r3, [pc, #120]	; (8011a58 <xTaskRemoveFromEventList+0xb0>)
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d11d      	bne.n	8011a22 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80119e6:	693b      	ldr	r3, [r7, #16]
 80119e8:	3304      	adds	r3, #4
 80119ea:	4618      	mov	r0, r3
 80119ec:	f7fe f8f6 	bl	800fbdc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80119f0:	693b      	ldr	r3, [r7, #16]
 80119f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119f4:	4b19      	ldr	r3, [pc, #100]	; (8011a5c <xTaskRemoveFromEventList+0xb4>)
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	429a      	cmp	r2, r3
 80119fa:	d903      	bls.n	8011a04 <xTaskRemoveFromEventList+0x5c>
 80119fc:	693b      	ldr	r3, [r7, #16]
 80119fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a00:	4a16      	ldr	r2, [pc, #88]	; (8011a5c <xTaskRemoveFromEventList+0xb4>)
 8011a02:	6013      	str	r3, [r2, #0]
 8011a04:	693b      	ldr	r3, [r7, #16]
 8011a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a08:	4613      	mov	r3, r2
 8011a0a:	009b      	lsls	r3, r3, #2
 8011a0c:	4413      	add	r3, r2
 8011a0e:	009b      	lsls	r3, r3, #2
 8011a10:	4a13      	ldr	r2, [pc, #76]	; (8011a60 <xTaskRemoveFromEventList+0xb8>)
 8011a12:	441a      	add	r2, r3
 8011a14:	693b      	ldr	r3, [r7, #16]
 8011a16:	3304      	adds	r3, #4
 8011a18:	4619      	mov	r1, r3
 8011a1a:	4610      	mov	r0, r2
 8011a1c:	f7fe f881 	bl	800fb22 <vListInsertEnd>
 8011a20:	e005      	b.n	8011a2e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011a22:	693b      	ldr	r3, [r7, #16]
 8011a24:	3318      	adds	r3, #24
 8011a26:	4619      	mov	r1, r3
 8011a28:	480e      	ldr	r0, [pc, #56]	; (8011a64 <xTaskRemoveFromEventList+0xbc>)
 8011a2a:	f7fe f87a 	bl	800fb22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011a2e:	693b      	ldr	r3, [r7, #16]
 8011a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a32:	4b0d      	ldr	r3, [pc, #52]	; (8011a68 <xTaskRemoveFromEventList+0xc0>)
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a38:	429a      	cmp	r2, r3
 8011a3a:	d905      	bls.n	8011a48 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011a3c:	2301      	movs	r3, #1
 8011a3e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011a40:	4b0a      	ldr	r3, [pc, #40]	; (8011a6c <xTaskRemoveFromEventList+0xc4>)
 8011a42:	2201      	movs	r2, #1
 8011a44:	601a      	str	r2, [r3, #0]
 8011a46:	e001      	b.n	8011a4c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011a48:	2300      	movs	r3, #0
 8011a4a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011a4c:	697b      	ldr	r3, [r7, #20]
}
 8011a4e:	4618      	mov	r0, r3
 8011a50:	3718      	adds	r7, #24
 8011a52:	46bd      	mov	sp, r7
 8011a54:	bd80      	pop	{r7, pc}
 8011a56:	bf00      	nop
 8011a58:	20004dd8 	.word	0x20004dd8
 8011a5c:	20004db8 	.word	0x20004db8
 8011a60:	200048e0 	.word	0x200048e0
 8011a64:	20004d70 	.word	0x20004d70
 8011a68:	200048dc 	.word	0x200048dc
 8011a6c:	20004dc4 	.word	0x20004dc4

08011a70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011a70:	b480      	push	{r7}
 8011a72:	b083      	sub	sp, #12
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011a78:	4b06      	ldr	r3, [pc, #24]	; (8011a94 <vTaskInternalSetTimeOutState+0x24>)
 8011a7a:	681a      	ldr	r2, [r3, #0]
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011a80:	4b05      	ldr	r3, [pc, #20]	; (8011a98 <vTaskInternalSetTimeOutState+0x28>)
 8011a82:	681a      	ldr	r2, [r3, #0]
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	605a      	str	r2, [r3, #4]
}
 8011a88:	bf00      	nop
 8011a8a:	370c      	adds	r7, #12
 8011a8c:	46bd      	mov	sp, r7
 8011a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a92:	4770      	bx	lr
 8011a94:	20004dc8 	.word	0x20004dc8
 8011a98:	20004db4 	.word	0x20004db4

08011a9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	b088      	sub	sp, #32
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	6078      	str	r0, [r7, #4]
 8011aa4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d10a      	bne.n	8011ac2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ab0:	f383 8811 	msr	BASEPRI, r3
 8011ab4:	f3bf 8f6f 	isb	sy
 8011ab8:	f3bf 8f4f 	dsb	sy
 8011abc:	613b      	str	r3, [r7, #16]
}
 8011abe:	bf00      	nop
 8011ac0:	e7fe      	b.n	8011ac0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011ac2:	683b      	ldr	r3, [r7, #0]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d10a      	bne.n	8011ade <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011acc:	f383 8811 	msr	BASEPRI, r3
 8011ad0:	f3bf 8f6f 	isb	sy
 8011ad4:	f3bf 8f4f 	dsb	sy
 8011ad8:	60fb      	str	r3, [r7, #12]
}
 8011ada:	bf00      	nop
 8011adc:	e7fe      	b.n	8011adc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011ade:	f001 f9a1 	bl	8012e24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011ae2:	4b1d      	ldr	r3, [pc, #116]	; (8011b58 <xTaskCheckForTimeOut+0xbc>)
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	685b      	ldr	r3, [r3, #4]
 8011aec:	69ba      	ldr	r2, [r7, #24]
 8011aee:	1ad3      	subs	r3, r2, r3
 8011af0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011af2:	683b      	ldr	r3, [r7, #0]
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011afa:	d102      	bne.n	8011b02 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011afc:	2300      	movs	r3, #0
 8011afe:	61fb      	str	r3, [r7, #28]
 8011b00:	e023      	b.n	8011b4a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	681a      	ldr	r2, [r3, #0]
 8011b06:	4b15      	ldr	r3, [pc, #84]	; (8011b5c <xTaskCheckForTimeOut+0xc0>)
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	429a      	cmp	r2, r3
 8011b0c:	d007      	beq.n	8011b1e <xTaskCheckForTimeOut+0x82>
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	685b      	ldr	r3, [r3, #4]
 8011b12:	69ba      	ldr	r2, [r7, #24]
 8011b14:	429a      	cmp	r2, r3
 8011b16:	d302      	bcc.n	8011b1e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011b18:	2301      	movs	r3, #1
 8011b1a:	61fb      	str	r3, [r7, #28]
 8011b1c:	e015      	b.n	8011b4a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011b1e:	683b      	ldr	r3, [r7, #0]
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	697a      	ldr	r2, [r7, #20]
 8011b24:	429a      	cmp	r2, r3
 8011b26:	d20b      	bcs.n	8011b40 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011b28:	683b      	ldr	r3, [r7, #0]
 8011b2a:	681a      	ldr	r2, [r3, #0]
 8011b2c:	697b      	ldr	r3, [r7, #20]
 8011b2e:	1ad2      	subs	r2, r2, r3
 8011b30:	683b      	ldr	r3, [r7, #0]
 8011b32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011b34:	6878      	ldr	r0, [r7, #4]
 8011b36:	f7ff ff9b 	bl	8011a70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	61fb      	str	r3, [r7, #28]
 8011b3e:	e004      	b.n	8011b4a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011b40:	683b      	ldr	r3, [r7, #0]
 8011b42:	2200      	movs	r2, #0
 8011b44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011b46:	2301      	movs	r3, #1
 8011b48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011b4a:	f001 f99b 	bl	8012e84 <vPortExitCritical>

	return xReturn;
 8011b4e:	69fb      	ldr	r3, [r7, #28]
}
 8011b50:	4618      	mov	r0, r3
 8011b52:	3720      	adds	r7, #32
 8011b54:	46bd      	mov	sp, r7
 8011b56:	bd80      	pop	{r7, pc}
 8011b58:	20004db4 	.word	0x20004db4
 8011b5c:	20004dc8 	.word	0x20004dc8

08011b60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011b60:	b480      	push	{r7}
 8011b62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011b64:	4b03      	ldr	r3, [pc, #12]	; (8011b74 <vTaskMissedYield+0x14>)
 8011b66:	2201      	movs	r2, #1
 8011b68:	601a      	str	r2, [r3, #0]
}
 8011b6a:	bf00      	nop
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b72:	4770      	bx	lr
 8011b74:	20004dc4 	.word	0x20004dc4

08011b78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b082      	sub	sp, #8
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011b80:	f000 f852 	bl	8011c28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011b84:	4b06      	ldr	r3, [pc, #24]	; (8011ba0 <prvIdleTask+0x28>)
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	2b01      	cmp	r3, #1
 8011b8a:	d9f9      	bls.n	8011b80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011b8c:	4b05      	ldr	r3, [pc, #20]	; (8011ba4 <prvIdleTask+0x2c>)
 8011b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b92:	601a      	str	r2, [r3, #0]
 8011b94:	f3bf 8f4f 	dsb	sy
 8011b98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011b9c:	e7f0      	b.n	8011b80 <prvIdleTask+0x8>
 8011b9e:	bf00      	nop
 8011ba0:	200048e0 	.word	0x200048e0
 8011ba4:	e000ed04 	.word	0xe000ed04

08011ba8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011ba8:	b580      	push	{r7, lr}
 8011baa:	b082      	sub	sp, #8
 8011bac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011bae:	2300      	movs	r3, #0
 8011bb0:	607b      	str	r3, [r7, #4]
 8011bb2:	e00c      	b.n	8011bce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011bb4:	687a      	ldr	r2, [r7, #4]
 8011bb6:	4613      	mov	r3, r2
 8011bb8:	009b      	lsls	r3, r3, #2
 8011bba:	4413      	add	r3, r2
 8011bbc:	009b      	lsls	r3, r3, #2
 8011bbe:	4a12      	ldr	r2, [pc, #72]	; (8011c08 <prvInitialiseTaskLists+0x60>)
 8011bc0:	4413      	add	r3, r2
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	f7fd ff80 	bl	800fac8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	3301      	adds	r3, #1
 8011bcc:	607b      	str	r3, [r7, #4]
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	2b37      	cmp	r3, #55	; 0x37
 8011bd2:	d9ef      	bls.n	8011bb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011bd4:	480d      	ldr	r0, [pc, #52]	; (8011c0c <prvInitialiseTaskLists+0x64>)
 8011bd6:	f7fd ff77 	bl	800fac8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011bda:	480d      	ldr	r0, [pc, #52]	; (8011c10 <prvInitialiseTaskLists+0x68>)
 8011bdc:	f7fd ff74 	bl	800fac8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011be0:	480c      	ldr	r0, [pc, #48]	; (8011c14 <prvInitialiseTaskLists+0x6c>)
 8011be2:	f7fd ff71 	bl	800fac8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011be6:	480c      	ldr	r0, [pc, #48]	; (8011c18 <prvInitialiseTaskLists+0x70>)
 8011be8:	f7fd ff6e 	bl	800fac8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011bec:	480b      	ldr	r0, [pc, #44]	; (8011c1c <prvInitialiseTaskLists+0x74>)
 8011bee:	f7fd ff6b 	bl	800fac8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011bf2:	4b0b      	ldr	r3, [pc, #44]	; (8011c20 <prvInitialiseTaskLists+0x78>)
 8011bf4:	4a05      	ldr	r2, [pc, #20]	; (8011c0c <prvInitialiseTaskLists+0x64>)
 8011bf6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011bf8:	4b0a      	ldr	r3, [pc, #40]	; (8011c24 <prvInitialiseTaskLists+0x7c>)
 8011bfa:	4a05      	ldr	r2, [pc, #20]	; (8011c10 <prvInitialiseTaskLists+0x68>)
 8011bfc:	601a      	str	r2, [r3, #0]
}
 8011bfe:	bf00      	nop
 8011c00:	3708      	adds	r7, #8
 8011c02:	46bd      	mov	sp, r7
 8011c04:	bd80      	pop	{r7, pc}
 8011c06:	bf00      	nop
 8011c08:	200048e0 	.word	0x200048e0
 8011c0c:	20004d40 	.word	0x20004d40
 8011c10:	20004d54 	.word	0x20004d54
 8011c14:	20004d70 	.word	0x20004d70
 8011c18:	20004d84 	.word	0x20004d84
 8011c1c:	20004d9c 	.word	0x20004d9c
 8011c20:	20004d68 	.word	0x20004d68
 8011c24:	20004d6c 	.word	0x20004d6c

08011c28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011c28:	b580      	push	{r7, lr}
 8011c2a:	b082      	sub	sp, #8
 8011c2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011c2e:	e019      	b.n	8011c64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011c30:	f001 f8f8 	bl	8012e24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c34:	4b10      	ldr	r3, [pc, #64]	; (8011c78 <prvCheckTasksWaitingTermination+0x50>)
 8011c36:	68db      	ldr	r3, [r3, #12]
 8011c38:	68db      	ldr	r3, [r3, #12]
 8011c3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	3304      	adds	r3, #4
 8011c40:	4618      	mov	r0, r3
 8011c42:	f7fd ffcb 	bl	800fbdc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011c46:	4b0d      	ldr	r3, [pc, #52]	; (8011c7c <prvCheckTasksWaitingTermination+0x54>)
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	3b01      	subs	r3, #1
 8011c4c:	4a0b      	ldr	r2, [pc, #44]	; (8011c7c <prvCheckTasksWaitingTermination+0x54>)
 8011c4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011c50:	4b0b      	ldr	r3, [pc, #44]	; (8011c80 <prvCheckTasksWaitingTermination+0x58>)
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	3b01      	subs	r3, #1
 8011c56:	4a0a      	ldr	r2, [pc, #40]	; (8011c80 <prvCheckTasksWaitingTermination+0x58>)
 8011c58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011c5a:	f001 f913 	bl	8012e84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011c5e:	6878      	ldr	r0, [r7, #4]
 8011c60:	f000 f8e4 	bl	8011e2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011c64:	4b06      	ldr	r3, [pc, #24]	; (8011c80 <prvCheckTasksWaitingTermination+0x58>)
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d1e1      	bne.n	8011c30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011c6c:	bf00      	nop
 8011c6e:	bf00      	nop
 8011c70:	3708      	adds	r7, #8
 8011c72:	46bd      	mov	sp, r7
 8011c74:	bd80      	pop	{r7, pc}
 8011c76:	bf00      	nop
 8011c78:	20004d84 	.word	0x20004d84
 8011c7c:	20004db0 	.word	0x20004db0
 8011c80:	20004d98 	.word	0x20004d98

08011c84 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b086      	sub	sp, #24
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	60f8      	str	r0, [r7, #12]
 8011c8c:	60b9      	str	r1, [r7, #8]
 8011c8e:	607a      	str	r2, [r7, #4]
 8011c90:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d102      	bne.n	8011c9e <vTaskGetInfo+0x1a>
 8011c98:	4b2c      	ldr	r3, [pc, #176]	; (8011d4c <vTaskGetInfo+0xc8>)
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	e000      	b.n	8011ca0 <vTaskGetInfo+0x1c>
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8011ca2:	68bb      	ldr	r3, [r7, #8]
 8011ca4:	697a      	ldr	r2, [r7, #20]
 8011ca6:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8011ca8:	697b      	ldr	r3, [r7, #20]
 8011caa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011cae:	68bb      	ldr	r3, [r7, #8]
 8011cb0:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8011cb2:	697b      	ldr	r3, [r7, #20]
 8011cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cb6:	68bb      	ldr	r3, [r7, #8]
 8011cb8:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8011cba:	697b      	ldr	r3, [r7, #20]
 8011cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011cbe:	68bb      	ldr	r3, [r7, #8]
 8011cc0:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8011cc2:	697b      	ldr	r3, [r7, #20]
 8011cc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011cc6:	68bb      	ldr	r3, [r7, #8]
 8011cc8:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8011cca:	697b      	ldr	r3, [r7, #20]
 8011ccc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011cce:	68bb      	ldr	r3, [r7, #8]
 8011cd0:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8011cd2:	697b      	ldr	r3, [r7, #20]
 8011cd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011cd6:	68bb      	ldr	r3, [r7, #8]
 8011cd8:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8011cda:	78fb      	ldrb	r3, [r7, #3]
 8011cdc:	2b05      	cmp	r3, #5
 8011cde:	d01a      	beq.n	8011d16 <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 8011ce0:	4b1a      	ldr	r3, [pc, #104]	; (8011d4c <vTaskGetInfo+0xc8>)
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	697a      	ldr	r2, [r7, #20]
 8011ce6:	429a      	cmp	r2, r3
 8011ce8:	d103      	bne.n	8011cf2 <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8011cea:	68bb      	ldr	r3, [r7, #8]
 8011cec:	2200      	movs	r2, #0
 8011cee:	731a      	strb	r2, [r3, #12]
 8011cf0:	e018      	b.n	8011d24 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8011cf2:	68bb      	ldr	r3, [r7, #8]
 8011cf4:	78fa      	ldrb	r2, [r7, #3]
 8011cf6:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8011cf8:	78fb      	ldrb	r3, [r7, #3]
 8011cfa:	2b03      	cmp	r3, #3
 8011cfc:	d112      	bne.n	8011d24 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 8011cfe:	f7ff fb73 	bl	80113e8 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011d02:	697b      	ldr	r3, [r7, #20]
 8011d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d002      	beq.n	8011d10 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8011d0a:	68bb      	ldr	r3, [r7, #8]
 8011d0c:	2202      	movs	r2, #2
 8011d0e:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8011d10:	f7ff fb78 	bl	8011404 <xTaskResumeAll>
 8011d14:	e006      	b.n	8011d24 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8011d16:	6978      	ldr	r0, [r7, #20]
 8011d18:	f7ff fa98 	bl	801124c <eTaskGetState>
 8011d1c:	4603      	mov	r3, r0
 8011d1e:	461a      	mov	r2, r3
 8011d20:	68bb      	ldr	r3, [r7, #8]
 8011d22:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d009      	beq.n	8011d3e <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8011d2a:	697b      	ldr	r3, [r7, #20]
 8011d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d2e:	4618      	mov	r0, r3
 8011d30:	f000 f860 	bl	8011df4 <prvTaskCheckFreeStackSpace>
 8011d34:	4603      	mov	r3, r0
 8011d36:	461a      	mov	r2, r3
 8011d38:	68bb      	ldr	r3, [r7, #8]
 8011d3a:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8011d3c:	e002      	b.n	8011d44 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 8011d3e:	68bb      	ldr	r3, [r7, #8]
 8011d40:	2200      	movs	r2, #0
 8011d42:	841a      	strh	r2, [r3, #32]
	}
 8011d44:	bf00      	nop
 8011d46:	3718      	adds	r7, #24
 8011d48:	46bd      	mov	sp, r7
 8011d4a:	bd80      	pop	{r7, pc}
 8011d4c:	200048dc 	.word	0x200048dc

08011d50 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8011d50:	b580      	push	{r7, lr}
 8011d52:	b08a      	sub	sp, #40	; 0x28
 8011d54:	af00      	add	r7, sp, #0
 8011d56:	60f8      	str	r0, [r7, #12]
 8011d58:	60b9      	str	r1, [r7, #8]
 8011d5a:	4613      	mov	r3, r2
 8011d5c:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8011d5e:	2300      	movs	r3, #0
 8011d60:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8011d62:	68bb      	ldr	r3, [r7, #8]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d03f      	beq.n	8011dea <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d6a:	68bb      	ldr	r3, [r7, #8]
 8011d6c:	623b      	str	r3, [r7, #32]
 8011d6e:	6a3b      	ldr	r3, [r7, #32]
 8011d70:	685b      	ldr	r3, [r3, #4]
 8011d72:	685a      	ldr	r2, [r3, #4]
 8011d74:	6a3b      	ldr	r3, [r7, #32]
 8011d76:	605a      	str	r2, [r3, #4]
 8011d78:	6a3b      	ldr	r3, [r7, #32]
 8011d7a:	685a      	ldr	r2, [r3, #4]
 8011d7c:	6a3b      	ldr	r3, [r7, #32]
 8011d7e:	3308      	adds	r3, #8
 8011d80:	429a      	cmp	r2, r3
 8011d82:	d104      	bne.n	8011d8e <prvListTasksWithinSingleList+0x3e>
 8011d84:	6a3b      	ldr	r3, [r7, #32]
 8011d86:	685b      	ldr	r3, [r3, #4]
 8011d88:	685a      	ldr	r2, [r3, #4]
 8011d8a:	6a3b      	ldr	r3, [r7, #32]
 8011d8c:	605a      	str	r2, [r3, #4]
 8011d8e:	6a3b      	ldr	r3, [r7, #32]
 8011d90:	685b      	ldr	r3, [r3, #4]
 8011d92:	68db      	ldr	r3, [r3, #12]
 8011d94:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d96:	68bb      	ldr	r3, [r7, #8]
 8011d98:	61bb      	str	r3, [r7, #24]
 8011d9a:	69bb      	ldr	r3, [r7, #24]
 8011d9c:	685b      	ldr	r3, [r3, #4]
 8011d9e:	685a      	ldr	r2, [r3, #4]
 8011da0:	69bb      	ldr	r3, [r7, #24]
 8011da2:	605a      	str	r2, [r3, #4]
 8011da4:	69bb      	ldr	r3, [r7, #24]
 8011da6:	685a      	ldr	r2, [r3, #4]
 8011da8:	69bb      	ldr	r3, [r7, #24]
 8011daa:	3308      	adds	r3, #8
 8011dac:	429a      	cmp	r2, r3
 8011dae:	d104      	bne.n	8011dba <prvListTasksWithinSingleList+0x6a>
 8011db0:	69bb      	ldr	r3, [r7, #24]
 8011db2:	685b      	ldr	r3, [r3, #4]
 8011db4:	685a      	ldr	r2, [r3, #4]
 8011db6:	69bb      	ldr	r3, [r7, #24]
 8011db8:	605a      	str	r2, [r3, #4]
 8011dba:	69bb      	ldr	r3, [r7, #24]
 8011dbc:	685b      	ldr	r3, [r3, #4]
 8011dbe:	68db      	ldr	r3, [r3, #12]
 8011dc0:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8011dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011dc4:	4613      	mov	r3, r2
 8011dc6:	00db      	lsls	r3, r3, #3
 8011dc8:	4413      	add	r3, r2
 8011dca:	009b      	lsls	r3, r3, #2
 8011dcc:	461a      	mov	r2, r3
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	1899      	adds	r1, r3, r2
 8011dd2:	79fb      	ldrb	r3, [r7, #7]
 8011dd4:	2201      	movs	r2, #1
 8011dd6:	6978      	ldr	r0, [r7, #20]
 8011dd8:	f7ff ff54 	bl	8011c84 <vTaskGetInfo>
				uxTask++;
 8011ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dde:	3301      	adds	r3, #1
 8011de0:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 8011de2:	697a      	ldr	r2, [r7, #20]
 8011de4:	69fb      	ldr	r3, [r7, #28]
 8011de6:	429a      	cmp	r2, r3
 8011de8:	d1d5      	bne.n	8011d96 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8011dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8011dec:	4618      	mov	r0, r3
 8011dee:	3728      	adds	r7, #40	; 0x28
 8011df0:	46bd      	mov	sp, r7
 8011df2:	bd80      	pop	{r7, pc}

08011df4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8011df4:	b480      	push	{r7}
 8011df6:	b085      	sub	sp, #20
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8011dfc:	2300      	movs	r3, #0
 8011dfe:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8011e00:	e005      	b.n	8011e0e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	3301      	adds	r3, #1
 8011e06:	607b      	str	r3, [r7, #4]
			ulCount++;
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	3301      	adds	r3, #1
 8011e0c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	781b      	ldrb	r3, [r3, #0]
 8011e12:	2ba5      	cmp	r3, #165	; 0xa5
 8011e14:	d0f5      	beq.n	8011e02 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	089b      	lsrs	r3, r3, #2
 8011e1a:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	b29b      	uxth	r3, r3
	}
 8011e20:	4618      	mov	r0, r3
 8011e22:	3714      	adds	r7, #20
 8011e24:	46bd      	mov	sp, r7
 8011e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e2a:	4770      	bx	lr

08011e2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b084      	sub	sp, #16
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d108      	bne.n	8011e50 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e42:	4618      	mov	r0, r3
 8011e44:	f001 f9dc 	bl	8013200 <vPortFree>
				vPortFree( pxTCB );
 8011e48:	6878      	ldr	r0, [r7, #4]
 8011e4a:	f001 f9d9 	bl	8013200 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011e4e:	e018      	b.n	8011e82 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8011e56:	2b01      	cmp	r3, #1
 8011e58:	d103      	bne.n	8011e62 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8011e5a:	6878      	ldr	r0, [r7, #4]
 8011e5c:	f001 f9d0 	bl	8013200 <vPortFree>
	}
 8011e60:	e00f      	b.n	8011e82 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8011e68:	2b02      	cmp	r3, #2
 8011e6a:	d00a      	beq.n	8011e82 <prvDeleteTCB+0x56>
	__asm volatile
 8011e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e70:	f383 8811 	msr	BASEPRI, r3
 8011e74:	f3bf 8f6f 	isb	sy
 8011e78:	f3bf 8f4f 	dsb	sy
 8011e7c:	60fb      	str	r3, [r7, #12]
}
 8011e7e:	bf00      	nop
 8011e80:	e7fe      	b.n	8011e80 <prvDeleteTCB+0x54>
	}
 8011e82:	bf00      	nop
 8011e84:	3710      	adds	r7, #16
 8011e86:	46bd      	mov	sp, r7
 8011e88:	bd80      	pop	{r7, pc}
	...

08011e8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011e8c:	b480      	push	{r7}
 8011e8e:	b083      	sub	sp, #12
 8011e90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011e92:	4b0c      	ldr	r3, [pc, #48]	; (8011ec4 <prvResetNextTaskUnblockTime+0x38>)
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d104      	bne.n	8011ea6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011e9c:	4b0a      	ldr	r3, [pc, #40]	; (8011ec8 <prvResetNextTaskUnblockTime+0x3c>)
 8011e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8011ea2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011ea4:	e008      	b.n	8011eb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011ea6:	4b07      	ldr	r3, [pc, #28]	; (8011ec4 <prvResetNextTaskUnblockTime+0x38>)
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	68db      	ldr	r3, [r3, #12]
 8011eac:	68db      	ldr	r3, [r3, #12]
 8011eae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	685b      	ldr	r3, [r3, #4]
 8011eb4:	4a04      	ldr	r2, [pc, #16]	; (8011ec8 <prvResetNextTaskUnblockTime+0x3c>)
 8011eb6:	6013      	str	r3, [r2, #0]
}
 8011eb8:	bf00      	nop
 8011eba:	370c      	adds	r7, #12
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec2:	4770      	bx	lr
 8011ec4:	20004d68 	.word	0x20004d68
 8011ec8:	20004dd0 	.word	0x20004dd0

08011ecc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8011ecc:	b480      	push	{r7}
 8011ece:	b083      	sub	sp, #12
 8011ed0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8011ed2:	4b05      	ldr	r3, [pc, #20]	; (8011ee8 <xTaskGetCurrentTaskHandle+0x1c>)
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8011ed8:	687b      	ldr	r3, [r7, #4]
	}
 8011eda:	4618      	mov	r0, r3
 8011edc:	370c      	adds	r7, #12
 8011ede:	46bd      	mov	sp, r7
 8011ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee4:	4770      	bx	lr
 8011ee6:	bf00      	nop
 8011ee8:	200048dc 	.word	0x200048dc

08011eec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011eec:	b480      	push	{r7}
 8011eee:	b083      	sub	sp, #12
 8011ef0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011ef2:	4b0b      	ldr	r3, [pc, #44]	; (8011f20 <xTaskGetSchedulerState+0x34>)
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d102      	bne.n	8011f00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011efa:	2301      	movs	r3, #1
 8011efc:	607b      	str	r3, [r7, #4]
 8011efe:	e008      	b.n	8011f12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011f00:	4b08      	ldr	r3, [pc, #32]	; (8011f24 <xTaskGetSchedulerState+0x38>)
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d102      	bne.n	8011f0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011f08:	2302      	movs	r3, #2
 8011f0a:	607b      	str	r3, [r7, #4]
 8011f0c:	e001      	b.n	8011f12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011f0e:	2300      	movs	r3, #0
 8011f10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011f12:	687b      	ldr	r3, [r7, #4]
	}
 8011f14:	4618      	mov	r0, r3
 8011f16:	370c      	adds	r7, #12
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f1e:	4770      	bx	lr
 8011f20:	20004dbc 	.word	0x20004dbc
 8011f24:	20004dd8 	.word	0x20004dd8

08011f28 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b084      	sub	sp, #16
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011f34:	2300      	movs	r3, #0
 8011f36:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d051      	beq.n	8011fe2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011f3e:	68bb      	ldr	r3, [r7, #8]
 8011f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f42:	4b2a      	ldr	r3, [pc, #168]	; (8011fec <xTaskPriorityInherit+0xc4>)
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f48:	429a      	cmp	r2, r3
 8011f4a:	d241      	bcs.n	8011fd0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011f4c:	68bb      	ldr	r3, [r7, #8]
 8011f4e:	699b      	ldr	r3, [r3, #24]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	db06      	blt.n	8011f62 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011f54:	4b25      	ldr	r3, [pc, #148]	; (8011fec <xTaskPriorityInherit+0xc4>)
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f5a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011f5e:	68bb      	ldr	r3, [r7, #8]
 8011f60:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011f62:	68bb      	ldr	r3, [r7, #8]
 8011f64:	6959      	ldr	r1, [r3, #20]
 8011f66:	68bb      	ldr	r3, [r7, #8]
 8011f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f6a:	4613      	mov	r3, r2
 8011f6c:	009b      	lsls	r3, r3, #2
 8011f6e:	4413      	add	r3, r2
 8011f70:	009b      	lsls	r3, r3, #2
 8011f72:	4a1f      	ldr	r2, [pc, #124]	; (8011ff0 <xTaskPriorityInherit+0xc8>)
 8011f74:	4413      	add	r3, r2
 8011f76:	4299      	cmp	r1, r3
 8011f78:	d122      	bne.n	8011fc0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011f7a:	68bb      	ldr	r3, [r7, #8]
 8011f7c:	3304      	adds	r3, #4
 8011f7e:	4618      	mov	r0, r3
 8011f80:	f7fd fe2c 	bl	800fbdc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011f84:	4b19      	ldr	r3, [pc, #100]	; (8011fec <xTaskPriorityInherit+0xc4>)
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f8a:	68bb      	ldr	r3, [r7, #8]
 8011f8c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011f8e:	68bb      	ldr	r3, [r7, #8]
 8011f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f92:	4b18      	ldr	r3, [pc, #96]	; (8011ff4 <xTaskPriorityInherit+0xcc>)
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	429a      	cmp	r2, r3
 8011f98:	d903      	bls.n	8011fa2 <xTaskPriorityInherit+0x7a>
 8011f9a:	68bb      	ldr	r3, [r7, #8]
 8011f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f9e:	4a15      	ldr	r2, [pc, #84]	; (8011ff4 <xTaskPriorityInherit+0xcc>)
 8011fa0:	6013      	str	r3, [r2, #0]
 8011fa2:	68bb      	ldr	r3, [r7, #8]
 8011fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fa6:	4613      	mov	r3, r2
 8011fa8:	009b      	lsls	r3, r3, #2
 8011faa:	4413      	add	r3, r2
 8011fac:	009b      	lsls	r3, r3, #2
 8011fae:	4a10      	ldr	r2, [pc, #64]	; (8011ff0 <xTaskPriorityInherit+0xc8>)
 8011fb0:	441a      	add	r2, r3
 8011fb2:	68bb      	ldr	r3, [r7, #8]
 8011fb4:	3304      	adds	r3, #4
 8011fb6:	4619      	mov	r1, r3
 8011fb8:	4610      	mov	r0, r2
 8011fba:	f7fd fdb2 	bl	800fb22 <vListInsertEnd>
 8011fbe:	e004      	b.n	8011fca <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011fc0:	4b0a      	ldr	r3, [pc, #40]	; (8011fec <xTaskPriorityInherit+0xc4>)
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fc6:	68bb      	ldr	r3, [r7, #8]
 8011fc8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011fca:	2301      	movs	r3, #1
 8011fcc:	60fb      	str	r3, [r7, #12]
 8011fce:	e008      	b.n	8011fe2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011fd0:	68bb      	ldr	r3, [r7, #8]
 8011fd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011fd4:	4b05      	ldr	r3, [pc, #20]	; (8011fec <xTaskPriorityInherit+0xc4>)
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fda:	429a      	cmp	r2, r3
 8011fdc:	d201      	bcs.n	8011fe2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011fde:	2301      	movs	r3, #1
 8011fe0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011fe2:	68fb      	ldr	r3, [r7, #12]
	}
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	3710      	adds	r7, #16
 8011fe8:	46bd      	mov	sp, r7
 8011fea:	bd80      	pop	{r7, pc}
 8011fec:	200048dc 	.word	0x200048dc
 8011ff0:	200048e0 	.word	0x200048e0
 8011ff4:	20004db8 	.word	0x20004db8

08011ff8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011ff8:	b580      	push	{r7, lr}
 8011ffa:	b086      	sub	sp, #24
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012004:	2300      	movs	r3, #0
 8012006:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d056      	beq.n	80120bc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801200e:	4b2e      	ldr	r3, [pc, #184]	; (80120c8 <xTaskPriorityDisinherit+0xd0>)
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	693a      	ldr	r2, [r7, #16]
 8012014:	429a      	cmp	r2, r3
 8012016:	d00a      	beq.n	801202e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8012018:	f04f 0350 	mov.w	r3, #80	; 0x50
 801201c:	f383 8811 	msr	BASEPRI, r3
 8012020:	f3bf 8f6f 	isb	sy
 8012024:	f3bf 8f4f 	dsb	sy
 8012028:	60fb      	str	r3, [r7, #12]
}
 801202a:	bf00      	nop
 801202c:	e7fe      	b.n	801202c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801202e:	693b      	ldr	r3, [r7, #16]
 8012030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012032:	2b00      	cmp	r3, #0
 8012034:	d10a      	bne.n	801204c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8012036:	f04f 0350 	mov.w	r3, #80	; 0x50
 801203a:	f383 8811 	msr	BASEPRI, r3
 801203e:	f3bf 8f6f 	isb	sy
 8012042:	f3bf 8f4f 	dsb	sy
 8012046:	60bb      	str	r3, [r7, #8]
}
 8012048:	bf00      	nop
 801204a:	e7fe      	b.n	801204a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801204c:	693b      	ldr	r3, [r7, #16]
 801204e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012050:	1e5a      	subs	r2, r3, #1
 8012052:	693b      	ldr	r3, [r7, #16]
 8012054:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012056:	693b      	ldr	r3, [r7, #16]
 8012058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801205a:	693b      	ldr	r3, [r7, #16]
 801205c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801205e:	429a      	cmp	r2, r3
 8012060:	d02c      	beq.n	80120bc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012062:	693b      	ldr	r3, [r7, #16]
 8012064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012066:	2b00      	cmp	r3, #0
 8012068:	d128      	bne.n	80120bc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801206a:	693b      	ldr	r3, [r7, #16]
 801206c:	3304      	adds	r3, #4
 801206e:	4618      	mov	r0, r3
 8012070:	f7fd fdb4 	bl	800fbdc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012074:	693b      	ldr	r3, [r7, #16]
 8012076:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012078:	693b      	ldr	r3, [r7, #16]
 801207a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801207c:	693b      	ldr	r3, [r7, #16]
 801207e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012080:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012084:	693b      	ldr	r3, [r7, #16]
 8012086:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012088:	693b      	ldr	r3, [r7, #16]
 801208a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801208c:	4b0f      	ldr	r3, [pc, #60]	; (80120cc <xTaskPriorityDisinherit+0xd4>)
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	429a      	cmp	r2, r3
 8012092:	d903      	bls.n	801209c <xTaskPriorityDisinherit+0xa4>
 8012094:	693b      	ldr	r3, [r7, #16]
 8012096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012098:	4a0c      	ldr	r2, [pc, #48]	; (80120cc <xTaskPriorityDisinherit+0xd4>)
 801209a:	6013      	str	r3, [r2, #0]
 801209c:	693b      	ldr	r3, [r7, #16]
 801209e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120a0:	4613      	mov	r3, r2
 80120a2:	009b      	lsls	r3, r3, #2
 80120a4:	4413      	add	r3, r2
 80120a6:	009b      	lsls	r3, r3, #2
 80120a8:	4a09      	ldr	r2, [pc, #36]	; (80120d0 <xTaskPriorityDisinherit+0xd8>)
 80120aa:	441a      	add	r2, r3
 80120ac:	693b      	ldr	r3, [r7, #16]
 80120ae:	3304      	adds	r3, #4
 80120b0:	4619      	mov	r1, r3
 80120b2:	4610      	mov	r0, r2
 80120b4:	f7fd fd35 	bl	800fb22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80120b8:	2301      	movs	r3, #1
 80120ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80120bc:	697b      	ldr	r3, [r7, #20]
	}
 80120be:	4618      	mov	r0, r3
 80120c0:	3718      	adds	r7, #24
 80120c2:	46bd      	mov	sp, r7
 80120c4:	bd80      	pop	{r7, pc}
 80120c6:	bf00      	nop
 80120c8:	200048dc 	.word	0x200048dc
 80120cc:	20004db8 	.word	0x20004db8
 80120d0:	200048e0 	.word	0x200048e0

080120d4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80120d4:	b580      	push	{r7, lr}
 80120d6:	b088      	sub	sp, #32
 80120d8:	af00      	add	r7, sp, #0
 80120da:	6078      	str	r0, [r7, #4]
 80120dc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80120e2:	2301      	movs	r3, #1
 80120e4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d06a      	beq.n	80121c2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80120ec:	69bb      	ldr	r3, [r7, #24]
 80120ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d10a      	bne.n	801210a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80120f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120f8:	f383 8811 	msr	BASEPRI, r3
 80120fc:	f3bf 8f6f 	isb	sy
 8012100:	f3bf 8f4f 	dsb	sy
 8012104:	60fb      	str	r3, [r7, #12]
}
 8012106:	bf00      	nop
 8012108:	e7fe      	b.n	8012108 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801210a:	69bb      	ldr	r3, [r7, #24]
 801210c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801210e:	683a      	ldr	r2, [r7, #0]
 8012110:	429a      	cmp	r2, r3
 8012112:	d902      	bls.n	801211a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012114:	683b      	ldr	r3, [r7, #0]
 8012116:	61fb      	str	r3, [r7, #28]
 8012118:	e002      	b.n	8012120 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801211a:	69bb      	ldr	r3, [r7, #24]
 801211c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801211e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012120:	69bb      	ldr	r3, [r7, #24]
 8012122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012124:	69fa      	ldr	r2, [r7, #28]
 8012126:	429a      	cmp	r2, r3
 8012128:	d04b      	beq.n	80121c2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801212a:	69bb      	ldr	r3, [r7, #24]
 801212c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801212e:	697a      	ldr	r2, [r7, #20]
 8012130:	429a      	cmp	r2, r3
 8012132:	d146      	bne.n	80121c2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012134:	4b25      	ldr	r3, [pc, #148]	; (80121cc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	69ba      	ldr	r2, [r7, #24]
 801213a:	429a      	cmp	r2, r3
 801213c:	d10a      	bne.n	8012154 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801213e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012142:	f383 8811 	msr	BASEPRI, r3
 8012146:	f3bf 8f6f 	isb	sy
 801214a:	f3bf 8f4f 	dsb	sy
 801214e:	60bb      	str	r3, [r7, #8]
}
 8012150:	bf00      	nop
 8012152:	e7fe      	b.n	8012152 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012154:	69bb      	ldr	r3, [r7, #24]
 8012156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012158:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801215a:	69bb      	ldr	r3, [r7, #24]
 801215c:	69fa      	ldr	r2, [r7, #28]
 801215e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012160:	69bb      	ldr	r3, [r7, #24]
 8012162:	699b      	ldr	r3, [r3, #24]
 8012164:	2b00      	cmp	r3, #0
 8012166:	db04      	blt.n	8012172 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012168:	69fb      	ldr	r3, [r7, #28]
 801216a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801216e:	69bb      	ldr	r3, [r7, #24]
 8012170:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012172:	69bb      	ldr	r3, [r7, #24]
 8012174:	6959      	ldr	r1, [r3, #20]
 8012176:	693a      	ldr	r2, [r7, #16]
 8012178:	4613      	mov	r3, r2
 801217a:	009b      	lsls	r3, r3, #2
 801217c:	4413      	add	r3, r2
 801217e:	009b      	lsls	r3, r3, #2
 8012180:	4a13      	ldr	r2, [pc, #76]	; (80121d0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012182:	4413      	add	r3, r2
 8012184:	4299      	cmp	r1, r3
 8012186:	d11c      	bne.n	80121c2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012188:	69bb      	ldr	r3, [r7, #24]
 801218a:	3304      	adds	r3, #4
 801218c:	4618      	mov	r0, r3
 801218e:	f7fd fd25 	bl	800fbdc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8012192:	69bb      	ldr	r3, [r7, #24]
 8012194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012196:	4b0f      	ldr	r3, [pc, #60]	; (80121d4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	429a      	cmp	r2, r3
 801219c:	d903      	bls.n	80121a6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 801219e:	69bb      	ldr	r3, [r7, #24]
 80121a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121a2:	4a0c      	ldr	r2, [pc, #48]	; (80121d4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80121a4:	6013      	str	r3, [r2, #0]
 80121a6:	69bb      	ldr	r3, [r7, #24]
 80121a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121aa:	4613      	mov	r3, r2
 80121ac:	009b      	lsls	r3, r3, #2
 80121ae:	4413      	add	r3, r2
 80121b0:	009b      	lsls	r3, r3, #2
 80121b2:	4a07      	ldr	r2, [pc, #28]	; (80121d0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80121b4:	441a      	add	r2, r3
 80121b6:	69bb      	ldr	r3, [r7, #24]
 80121b8:	3304      	adds	r3, #4
 80121ba:	4619      	mov	r1, r3
 80121bc:	4610      	mov	r0, r2
 80121be:	f7fd fcb0 	bl	800fb22 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80121c2:	bf00      	nop
 80121c4:	3720      	adds	r7, #32
 80121c6:	46bd      	mov	sp, r7
 80121c8:	bd80      	pop	{r7, pc}
 80121ca:	bf00      	nop
 80121cc:	200048dc 	.word	0x200048dc
 80121d0:	200048e0 	.word	0x200048e0
 80121d4:	20004db8 	.word	0x20004db8

080121d8 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 80121d8:	b580      	push	{r7, lr}
 80121da:	b084      	sub	sp, #16
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
 80121e0:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 80121e2:	6839      	ldr	r1, [r7, #0]
 80121e4:	6878      	ldr	r0, [r7, #4]
 80121e6:	f00d ff59 	bl	802009c <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80121ea:	6878      	ldr	r0, [r7, #4]
 80121ec:	f7ee f800 	bl	80001f0 <strlen>
 80121f0:	60f8      	str	r0, [r7, #12]
 80121f2:	e007      	b.n	8012204 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 80121f4:	687a      	ldr	r2, [r7, #4]
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	4413      	add	r3, r2
 80121fa:	2220      	movs	r2, #32
 80121fc:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	3301      	adds	r3, #1
 8012202:	60fb      	str	r3, [r7, #12]
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	2b0e      	cmp	r3, #14
 8012208:	d9f4      	bls.n	80121f4 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 801220a:	687a      	ldr	r2, [r7, #4]
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	4413      	add	r3, r2
 8012210:	2200      	movs	r2, #0
 8012212:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 8012214:	687a      	ldr	r2, [r7, #4]
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	4413      	add	r3, r2
	}
 801221a:	4618      	mov	r0, r3
 801221c:	3710      	adds	r7, #16
 801221e:	46bd      	mov	sp, r7
 8012220:	bd80      	pop	{r7, pc}
	...

08012224 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8012224:	b590      	push	{r4, r7, lr}
 8012226:	b089      	sub	sp, #36	; 0x24
 8012228:	af02      	add	r7, sp, #8
 801222a:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	2200      	movs	r2, #0
 8012230:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8012232:	4b45      	ldr	r3, [pc, #276]	; (8012348 <vTaskList+0x124>)
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8012238:	4b43      	ldr	r3, [pc, #268]	; (8012348 <vTaskList+0x124>)
 801223a:	681a      	ldr	r2, [r3, #0]
 801223c:	4613      	mov	r3, r2
 801223e:	00db      	lsls	r3, r3, #3
 8012240:	4413      	add	r3, r2
 8012242:	009b      	lsls	r3, r3, #2
 8012244:	4618      	mov	r0, r3
 8012246:	f000 ff0f 	bl	8013068 <pvPortMalloc>
 801224a:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 801224c:	68bb      	ldr	r3, [r7, #8]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d076      	beq.n	8012340 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8012252:	2200      	movs	r2, #0
 8012254:	68f9      	ldr	r1, [r7, #12]
 8012256:	68b8      	ldr	r0, [r7, #8]
 8012258:	f7ff f994 	bl	8011584 <uxTaskGetSystemState>
 801225c:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 801225e:	2300      	movs	r3, #0
 8012260:	617b      	str	r3, [r7, #20]
 8012262:	e066      	b.n	8012332 <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8012264:	697a      	ldr	r2, [r7, #20]
 8012266:	4613      	mov	r3, r2
 8012268:	00db      	lsls	r3, r3, #3
 801226a:	4413      	add	r3, r2
 801226c:	009b      	lsls	r3, r3, #2
 801226e:	461a      	mov	r2, r3
 8012270:	68bb      	ldr	r3, [r7, #8]
 8012272:	4413      	add	r3, r2
 8012274:	7b1b      	ldrb	r3, [r3, #12]
 8012276:	2b04      	cmp	r3, #4
 8012278:	d81b      	bhi.n	80122b2 <vTaskList+0x8e>
 801227a:	a201      	add	r2, pc, #4	; (adr r2, 8012280 <vTaskList+0x5c>)
 801227c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012280:	08012295 	.word	0x08012295
 8012284:	0801229b 	.word	0x0801229b
 8012288:	080122a1 	.word	0x080122a1
 801228c:	080122a7 	.word	0x080122a7
 8012290:	080122ad 	.word	0x080122ad
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 8012294:	2358      	movs	r3, #88	; 0x58
 8012296:	74fb      	strb	r3, [r7, #19]
										break;
 8012298:	e00e      	b.n	80122b8 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 801229a:	2352      	movs	r3, #82	; 0x52
 801229c:	74fb      	strb	r3, [r7, #19]
										break;
 801229e:	e00b      	b.n	80122b8 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 80122a0:	2342      	movs	r3, #66	; 0x42
 80122a2:	74fb      	strb	r3, [r7, #19]
										break;
 80122a4:	e008      	b.n	80122b8 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 80122a6:	2353      	movs	r3, #83	; 0x53
 80122a8:	74fb      	strb	r3, [r7, #19]
										break;
 80122aa:	e005      	b.n	80122b8 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 80122ac:	2344      	movs	r3, #68	; 0x44
 80122ae:	74fb      	strb	r3, [r7, #19]
										break;
 80122b0:	e002      	b.n	80122b8 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 80122b2:	2300      	movs	r3, #0
 80122b4:	74fb      	strb	r3, [r7, #19]
										break;
 80122b6:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 80122b8:	697a      	ldr	r2, [r7, #20]
 80122ba:	4613      	mov	r3, r2
 80122bc:	00db      	lsls	r3, r3, #3
 80122be:	4413      	add	r3, r2
 80122c0:	009b      	lsls	r3, r3, #2
 80122c2:	461a      	mov	r2, r3
 80122c4:	68bb      	ldr	r3, [r7, #8]
 80122c6:	4413      	add	r3, r2
 80122c8:	685b      	ldr	r3, [r3, #4]
 80122ca:	4619      	mov	r1, r3
 80122cc:	6878      	ldr	r0, [r7, #4]
 80122ce:	f7ff ff83 	bl	80121d8 <prvWriteNameToBuffer>
 80122d2:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 80122d4:	7cf9      	ldrb	r1, [r7, #19]
 80122d6:	697a      	ldr	r2, [r7, #20]
 80122d8:	4613      	mov	r3, r2
 80122da:	00db      	lsls	r3, r3, #3
 80122dc:	4413      	add	r3, r2
 80122de:	009b      	lsls	r3, r3, #2
 80122e0:	461a      	mov	r2, r3
 80122e2:	68bb      	ldr	r3, [r7, #8]
 80122e4:	4413      	add	r3, r2
 80122e6:	6918      	ldr	r0, [r3, #16]
 80122e8:	697a      	ldr	r2, [r7, #20]
 80122ea:	4613      	mov	r3, r2
 80122ec:	00db      	lsls	r3, r3, #3
 80122ee:	4413      	add	r3, r2
 80122f0:	009b      	lsls	r3, r3, #2
 80122f2:	461a      	mov	r2, r3
 80122f4:	68bb      	ldr	r3, [r7, #8]
 80122f6:	4413      	add	r3, r2
 80122f8:	8c1b      	ldrh	r3, [r3, #32]
 80122fa:	461c      	mov	r4, r3
 80122fc:	697a      	ldr	r2, [r7, #20]
 80122fe:	4613      	mov	r3, r2
 8012300:	00db      	lsls	r3, r3, #3
 8012302:	4413      	add	r3, r2
 8012304:	009b      	lsls	r3, r3, #2
 8012306:	461a      	mov	r2, r3
 8012308:	68bb      	ldr	r3, [r7, #8]
 801230a:	4413      	add	r3, r2
 801230c:	689b      	ldr	r3, [r3, #8]
 801230e:	9301      	str	r3, [sp, #4]
 8012310:	9400      	str	r4, [sp, #0]
 8012312:	4603      	mov	r3, r0
 8012314:	460a      	mov	r2, r1
 8012316:	490d      	ldr	r1, [pc, #52]	; (801234c <vTaskList+0x128>)
 8012318:	6878      	ldr	r0, [r7, #4]
 801231a:	f00d fe9f 	bl	802005c <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 801231e:	6878      	ldr	r0, [r7, #4]
 8012320:	f7ed ff66 	bl	80001f0 <strlen>
 8012324:	4602      	mov	r2, r0
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	4413      	add	r3, r2
 801232a:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 801232c:	697b      	ldr	r3, [r7, #20]
 801232e:	3301      	adds	r3, #1
 8012330:	617b      	str	r3, [r7, #20]
 8012332:	697a      	ldr	r2, [r7, #20]
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	429a      	cmp	r2, r3
 8012338:	d394      	bcc.n	8012264 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 801233a:	68b8      	ldr	r0, [r7, #8]
 801233c:	f000 ff60 	bl	8013200 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012340:	bf00      	nop
 8012342:	371c      	adds	r7, #28
 8012344:	46bd      	mov	sp, r7
 8012346:	bd90      	pop	{r4, r7, pc}
 8012348:	20004db0 	.word	0x20004db0
 801234c:	080263b4 	.word	0x080263b4

08012350 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 8012350:	b580      	push	{r7, lr}
 8012352:	b088      	sub	sp, #32
 8012354:	af00      	add	r7, sp, #0
 8012356:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	2200      	movs	r2, #0
 801235c:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 801235e:	4b3a      	ldr	r3, [pc, #232]	; (8012448 <vTaskGetRunTimeStats+0xf8>)
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8012364:	4b38      	ldr	r3, [pc, #224]	; (8012448 <vTaskGetRunTimeStats+0xf8>)
 8012366:	681a      	ldr	r2, [r3, #0]
 8012368:	4613      	mov	r3, r2
 801236a:	00db      	lsls	r3, r3, #3
 801236c:	4413      	add	r3, r2
 801236e:	009b      	lsls	r3, r3, #2
 8012370:	4618      	mov	r0, r3
 8012372:	f000 fe79 	bl	8013068 <pvPortMalloc>
 8012376:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 8012378:	697b      	ldr	r3, [r7, #20]
 801237a:	2b00      	cmp	r3, #0
 801237c:	d05f      	beq.n	801243e <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 801237e:	f107 030c 	add.w	r3, r7, #12
 8012382:	461a      	mov	r2, r3
 8012384:	69b9      	ldr	r1, [r7, #24]
 8012386:	6978      	ldr	r0, [r7, #20]
 8012388:	f7ff f8fc 	bl	8011584 <uxTaskGetSystemState>
 801238c:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	4a2e      	ldr	r2, [pc, #184]	; (801244c <vTaskGetRunTimeStats+0xfc>)
 8012392:	fba2 2303 	umull	r2, r3, r2, r3
 8012396:	095b      	lsrs	r3, r3, #5
 8012398:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d04b      	beq.n	8012438 <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 80123a0:	2300      	movs	r3, #0
 80123a2:	61fb      	str	r3, [r7, #28]
 80123a4:	e044      	b.n	8012430 <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 80123a6:	69fa      	ldr	r2, [r7, #28]
 80123a8:	4613      	mov	r3, r2
 80123aa:	00db      	lsls	r3, r3, #3
 80123ac:	4413      	add	r3, r2
 80123ae:	009b      	lsls	r3, r3, #2
 80123b0:	461a      	mov	r2, r3
 80123b2:	697b      	ldr	r3, [r7, #20]
 80123b4:	4413      	add	r3, r2
 80123b6:	699a      	ldr	r2, [r3, #24]
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80123be:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 80123c0:	69fa      	ldr	r2, [r7, #28]
 80123c2:	4613      	mov	r3, r2
 80123c4:	00db      	lsls	r3, r3, #3
 80123c6:	4413      	add	r3, r2
 80123c8:	009b      	lsls	r3, r3, #2
 80123ca:	461a      	mov	r2, r3
 80123cc:	697b      	ldr	r3, [r7, #20]
 80123ce:	4413      	add	r3, r2
 80123d0:	685b      	ldr	r3, [r3, #4]
 80123d2:	4619      	mov	r1, r3
 80123d4:	6878      	ldr	r0, [r7, #4]
 80123d6:	f7ff feff 	bl	80121d8 <prvWriteNameToBuffer>
 80123da:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 80123dc:	693b      	ldr	r3, [r7, #16]
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d00e      	beq.n	8012400 <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 80123e2:	69fa      	ldr	r2, [r7, #28]
 80123e4:	4613      	mov	r3, r2
 80123e6:	00db      	lsls	r3, r3, #3
 80123e8:	4413      	add	r3, r2
 80123ea:	009b      	lsls	r3, r3, #2
 80123ec:	461a      	mov	r2, r3
 80123ee:	697b      	ldr	r3, [r7, #20]
 80123f0:	4413      	add	r3, r2
 80123f2:	699a      	ldr	r2, [r3, #24]
 80123f4:	693b      	ldr	r3, [r7, #16]
 80123f6:	4916      	ldr	r1, [pc, #88]	; (8012450 <vTaskGetRunTimeStats+0x100>)
 80123f8:	6878      	ldr	r0, [r7, #4]
 80123fa:	f00d fe2f 	bl	802005c <sprintf>
 80123fe:	e00d      	b.n	801241c <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8012400:	69fa      	ldr	r2, [r7, #28]
 8012402:	4613      	mov	r3, r2
 8012404:	00db      	lsls	r3, r3, #3
 8012406:	4413      	add	r3, r2
 8012408:	009b      	lsls	r3, r3, #2
 801240a:	461a      	mov	r2, r3
 801240c:	697b      	ldr	r3, [r7, #20]
 801240e:	4413      	add	r3, r2
 8012410:	699b      	ldr	r3, [r3, #24]
 8012412:	461a      	mov	r2, r3
 8012414:	490f      	ldr	r1, [pc, #60]	; (8012454 <vTaskGetRunTimeStats+0x104>)
 8012416:	6878      	ldr	r0, [r7, #4]
 8012418:	f00d fe20 	bl	802005c <sprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 801241c:	6878      	ldr	r0, [r7, #4]
 801241e:	f7ed fee7 	bl	80001f0 <strlen>
 8012422:	4602      	mov	r2, r0
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	4413      	add	r3, r2
 8012428:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 801242a:	69fb      	ldr	r3, [r7, #28]
 801242c:	3301      	adds	r3, #1
 801242e:	61fb      	str	r3, [r7, #28]
 8012430:	69fa      	ldr	r2, [r7, #28]
 8012432:	69bb      	ldr	r3, [r7, #24]
 8012434:	429a      	cmp	r2, r3
 8012436:	d3b6      	bcc.n	80123a6 <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8012438:	6978      	ldr	r0, [r7, #20]
 801243a:	f000 fee1 	bl	8013200 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801243e:	bf00      	nop
 8012440:	3720      	adds	r7, #32
 8012442:	46bd      	mov	sp, r7
 8012444:	bd80      	pop	{r7, pc}
 8012446:	bf00      	nop
 8012448:	20004db0 	.word	0x20004db0
 801244c:	51eb851f 	.word	0x51eb851f
 8012450:	080263c4 	.word	0x080263c4
 8012454:	080263d0 	.word	0x080263d0

08012458 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8012458:	b480      	push	{r7}
 801245a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801245c:	4b07      	ldr	r3, [pc, #28]	; (801247c <pvTaskIncrementMutexHeldCount+0x24>)
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	2b00      	cmp	r3, #0
 8012462:	d004      	beq.n	801246e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012464:	4b05      	ldr	r3, [pc, #20]	; (801247c <pvTaskIncrementMutexHeldCount+0x24>)
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801246a:	3201      	adds	r2, #1
 801246c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801246e:	4b03      	ldr	r3, [pc, #12]	; (801247c <pvTaskIncrementMutexHeldCount+0x24>)
 8012470:	681b      	ldr	r3, [r3, #0]
	}
 8012472:	4618      	mov	r0, r3
 8012474:	46bd      	mov	sp, r7
 8012476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247a:	4770      	bx	lr
 801247c:	200048dc 	.word	0x200048dc

08012480 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012480:	b580      	push	{r7, lr}
 8012482:	b084      	sub	sp, #16
 8012484:	af00      	add	r7, sp, #0
 8012486:	6078      	str	r0, [r7, #4]
 8012488:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801248a:	4b21      	ldr	r3, [pc, #132]	; (8012510 <prvAddCurrentTaskToDelayedList+0x90>)
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012490:	4b20      	ldr	r3, [pc, #128]	; (8012514 <prvAddCurrentTaskToDelayedList+0x94>)
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	3304      	adds	r3, #4
 8012496:	4618      	mov	r0, r3
 8012498:	f7fd fba0 	bl	800fbdc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124a2:	d10a      	bne.n	80124ba <prvAddCurrentTaskToDelayedList+0x3a>
 80124a4:	683b      	ldr	r3, [r7, #0]
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d007      	beq.n	80124ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80124aa:	4b1a      	ldr	r3, [pc, #104]	; (8012514 <prvAddCurrentTaskToDelayedList+0x94>)
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	3304      	adds	r3, #4
 80124b0:	4619      	mov	r1, r3
 80124b2:	4819      	ldr	r0, [pc, #100]	; (8012518 <prvAddCurrentTaskToDelayedList+0x98>)
 80124b4:	f7fd fb35 	bl	800fb22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80124b8:	e026      	b.n	8012508 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80124ba:	68fa      	ldr	r2, [r7, #12]
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	4413      	add	r3, r2
 80124c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80124c2:	4b14      	ldr	r3, [pc, #80]	; (8012514 <prvAddCurrentTaskToDelayedList+0x94>)
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	68ba      	ldr	r2, [r7, #8]
 80124c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80124ca:	68ba      	ldr	r2, [r7, #8]
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	429a      	cmp	r2, r3
 80124d0:	d209      	bcs.n	80124e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80124d2:	4b12      	ldr	r3, [pc, #72]	; (801251c <prvAddCurrentTaskToDelayedList+0x9c>)
 80124d4:	681a      	ldr	r2, [r3, #0]
 80124d6:	4b0f      	ldr	r3, [pc, #60]	; (8012514 <prvAddCurrentTaskToDelayedList+0x94>)
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	3304      	adds	r3, #4
 80124dc:	4619      	mov	r1, r3
 80124de:	4610      	mov	r0, r2
 80124e0:	f7fd fb43 	bl	800fb6a <vListInsert>
}
 80124e4:	e010      	b.n	8012508 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80124e6:	4b0e      	ldr	r3, [pc, #56]	; (8012520 <prvAddCurrentTaskToDelayedList+0xa0>)
 80124e8:	681a      	ldr	r2, [r3, #0]
 80124ea:	4b0a      	ldr	r3, [pc, #40]	; (8012514 <prvAddCurrentTaskToDelayedList+0x94>)
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	3304      	adds	r3, #4
 80124f0:	4619      	mov	r1, r3
 80124f2:	4610      	mov	r0, r2
 80124f4:	f7fd fb39 	bl	800fb6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80124f8:	4b0a      	ldr	r3, [pc, #40]	; (8012524 <prvAddCurrentTaskToDelayedList+0xa4>)
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	68ba      	ldr	r2, [r7, #8]
 80124fe:	429a      	cmp	r2, r3
 8012500:	d202      	bcs.n	8012508 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8012502:	4a08      	ldr	r2, [pc, #32]	; (8012524 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012504:	68bb      	ldr	r3, [r7, #8]
 8012506:	6013      	str	r3, [r2, #0]
}
 8012508:	bf00      	nop
 801250a:	3710      	adds	r7, #16
 801250c:	46bd      	mov	sp, r7
 801250e:	bd80      	pop	{r7, pc}
 8012510:	20004db4 	.word	0x20004db4
 8012514:	200048dc 	.word	0x200048dc
 8012518:	20004d9c 	.word	0x20004d9c
 801251c:	20004d6c 	.word	0x20004d6c
 8012520:	20004d68 	.word	0x20004d68
 8012524:	20004dd0 	.word	0x20004dd0

08012528 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012528:	b580      	push	{r7, lr}
 801252a:	b08a      	sub	sp, #40	; 0x28
 801252c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801252e:	2300      	movs	r3, #0
 8012530:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8012532:	f000 fb07 	bl	8012b44 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8012536:	4b1c      	ldr	r3, [pc, #112]	; (80125a8 <xTimerCreateTimerTask+0x80>)
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d021      	beq.n	8012582 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801253e:	2300      	movs	r3, #0
 8012540:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012542:	2300      	movs	r3, #0
 8012544:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012546:	1d3a      	adds	r2, r7, #4
 8012548:	f107 0108 	add.w	r1, r7, #8
 801254c:	f107 030c 	add.w	r3, r7, #12
 8012550:	4618      	mov	r0, r3
 8012552:	f7fd fa9f 	bl	800fa94 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012556:	6879      	ldr	r1, [r7, #4]
 8012558:	68bb      	ldr	r3, [r7, #8]
 801255a:	68fa      	ldr	r2, [r7, #12]
 801255c:	9202      	str	r2, [sp, #8]
 801255e:	9301      	str	r3, [sp, #4]
 8012560:	2302      	movs	r3, #2
 8012562:	9300      	str	r3, [sp, #0]
 8012564:	2300      	movs	r3, #0
 8012566:	460a      	mov	r2, r1
 8012568:	4910      	ldr	r1, [pc, #64]	; (80125ac <xTimerCreateTimerTask+0x84>)
 801256a:	4811      	ldr	r0, [pc, #68]	; (80125b0 <xTimerCreateTimerTask+0x88>)
 801256c:	f7fe fc24 	bl	8010db8 <xTaskCreateStatic>
 8012570:	4603      	mov	r3, r0
 8012572:	4a10      	ldr	r2, [pc, #64]	; (80125b4 <xTimerCreateTimerTask+0x8c>)
 8012574:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8012576:	4b0f      	ldr	r3, [pc, #60]	; (80125b4 <xTimerCreateTimerTask+0x8c>)
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	2b00      	cmp	r3, #0
 801257c:	d001      	beq.n	8012582 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801257e:	2301      	movs	r3, #1
 8012580:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8012582:	697b      	ldr	r3, [r7, #20]
 8012584:	2b00      	cmp	r3, #0
 8012586:	d10a      	bne.n	801259e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8012588:	f04f 0350 	mov.w	r3, #80	; 0x50
 801258c:	f383 8811 	msr	BASEPRI, r3
 8012590:	f3bf 8f6f 	isb	sy
 8012594:	f3bf 8f4f 	dsb	sy
 8012598:	613b      	str	r3, [r7, #16]
}
 801259a:	bf00      	nop
 801259c:	e7fe      	b.n	801259c <xTimerCreateTimerTask+0x74>
	return xReturn;
 801259e:	697b      	ldr	r3, [r7, #20]
}
 80125a0:	4618      	mov	r0, r3
 80125a2:	3718      	adds	r7, #24
 80125a4:	46bd      	mov	sp, r7
 80125a6:	bd80      	pop	{r7, pc}
 80125a8:	20004e14 	.word	0x20004e14
 80125ac:	080263dc 	.word	0x080263dc
 80125b0:	080126ed 	.word	0x080126ed
 80125b4:	20004e18 	.word	0x20004e18

080125b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b08a      	sub	sp, #40	; 0x28
 80125bc:	af00      	add	r7, sp, #0
 80125be:	60f8      	str	r0, [r7, #12]
 80125c0:	60b9      	str	r1, [r7, #8]
 80125c2:	607a      	str	r2, [r7, #4]
 80125c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80125c6:	2300      	movs	r3, #0
 80125c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d10a      	bne.n	80125e6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80125d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125d4:	f383 8811 	msr	BASEPRI, r3
 80125d8:	f3bf 8f6f 	isb	sy
 80125dc:	f3bf 8f4f 	dsb	sy
 80125e0:	623b      	str	r3, [r7, #32]
}
 80125e2:	bf00      	nop
 80125e4:	e7fe      	b.n	80125e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80125e6:	4b1a      	ldr	r3, [pc, #104]	; (8012650 <xTimerGenericCommand+0x98>)
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d02a      	beq.n	8012644 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80125ee:	68bb      	ldr	r3, [r7, #8]
 80125f0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80125fa:	68bb      	ldr	r3, [r7, #8]
 80125fc:	2b05      	cmp	r3, #5
 80125fe:	dc18      	bgt.n	8012632 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012600:	f7ff fc74 	bl	8011eec <xTaskGetSchedulerState>
 8012604:	4603      	mov	r3, r0
 8012606:	2b02      	cmp	r3, #2
 8012608:	d109      	bne.n	801261e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801260a:	4b11      	ldr	r3, [pc, #68]	; (8012650 <xTimerGenericCommand+0x98>)
 801260c:	6818      	ldr	r0, [r3, #0]
 801260e:	f107 0110 	add.w	r1, r7, #16
 8012612:	2300      	movs	r3, #0
 8012614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012616:	f7fd fd69 	bl	80100ec <xQueueGenericSend>
 801261a:	6278      	str	r0, [r7, #36]	; 0x24
 801261c:	e012      	b.n	8012644 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801261e:	4b0c      	ldr	r3, [pc, #48]	; (8012650 <xTimerGenericCommand+0x98>)
 8012620:	6818      	ldr	r0, [r3, #0]
 8012622:	f107 0110 	add.w	r1, r7, #16
 8012626:	2300      	movs	r3, #0
 8012628:	2200      	movs	r2, #0
 801262a:	f7fd fd5f 	bl	80100ec <xQueueGenericSend>
 801262e:	6278      	str	r0, [r7, #36]	; 0x24
 8012630:	e008      	b.n	8012644 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012632:	4b07      	ldr	r3, [pc, #28]	; (8012650 <xTimerGenericCommand+0x98>)
 8012634:	6818      	ldr	r0, [r3, #0]
 8012636:	f107 0110 	add.w	r1, r7, #16
 801263a:	2300      	movs	r3, #0
 801263c:	683a      	ldr	r2, [r7, #0]
 801263e:	f7fd fe53 	bl	80102e8 <xQueueGenericSendFromISR>
 8012642:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012646:	4618      	mov	r0, r3
 8012648:	3728      	adds	r7, #40	; 0x28
 801264a:	46bd      	mov	sp, r7
 801264c:	bd80      	pop	{r7, pc}
 801264e:	bf00      	nop
 8012650:	20004e14 	.word	0x20004e14

08012654 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012654:	b580      	push	{r7, lr}
 8012656:	b088      	sub	sp, #32
 8012658:	af02      	add	r7, sp, #8
 801265a:	6078      	str	r0, [r7, #4]
 801265c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801265e:	4b22      	ldr	r3, [pc, #136]	; (80126e8 <prvProcessExpiredTimer+0x94>)
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	68db      	ldr	r3, [r3, #12]
 8012664:	68db      	ldr	r3, [r3, #12]
 8012666:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012668:	697b      	ldr	r3, [r7, #20]
 801266a:	3304      	adds	r3, #4
 801266c:	4618      	mov	r0, r3
 801266e:	f7fd fab5 	bl	800fbdc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012672:	697b      	ldr	r3, [r7, #20]
 8012674:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012678:	f003 0304 	and.w	r3, r3, #4
 801267c:	2b00      	cmp	r3, #0
 801267e:	d022      	beq.n	80126c6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012680:	697b      	ldr	r3, [r7, #20]
 8012682:	699a      	ldr	r2, [r3, #24]
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	18d1      	adds	r1, r2, r3
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	683a      	ldr	r2, [r7, #0]
 801268c:	6978      	ldr	r0, [r7, #20]
 801268e:	f000 f8d1 	bl	8012834 <prvInsertTimerInActiveList>
 8012692:	4603      	mov	r3, r0
 8012694:	2b00      	cmp	r3, #0
 8012696:	d01f      	beq.n	80126d8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012698:	2300      	movs	r3, #0
 801269a:	9300      	str	r3, [sp, #0]
 801269c:	2300      	movs	r3, #0
 801269e:	687a      	ldr	r2, [r7, #4]
 80126a0:	2100      	movs	r1, #0
 80126a2:	6978      	ldr	r0, [r7, #20]
 80126a4:	f7ff ff88 	bl	80125b8 <xTimerGenericCommand>
 80126a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80126aa:	693b      	ldr	r3, [r7, #16]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d113      	bne.n	80126d8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80126b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126b4:	f383 8811 	msr	BASEPRI, r3
 80126b8:	f3bf 8f6f 	isb	sy
 80126bc:	f3bf 8f4f 	dsb	sy
 80126c0:	60fb      	str	r3, [r7, #12]
}
 80126c2:	bf00      	nop
 80126c4:	e7fe      	b.n	80126c4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80126c6:	697b      	ldr	r3, [r7, #20]
 80126c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80126cc:	f023 0301 	bic.w	r3, r3, #1
 80126d0:	b2da      	uxtb	r2, r3
 80126d2:	697b      	ldr	r3, [r7, #20]
 80126d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80126d8:	697b      	ldr	r3, [r7, #20]
 80126da:	6a1b      	ldr	r3, [r3, #32]
 80126dc:	6978      	ldr	r0, [r7, #20]
 80126de:	4798      	blx	r3
}
 80126e0:	bf00      	nop
 80126e2:	3718      	adds	r7, #24
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd80      	pop	{r7, pc}
 80126e8:	20004e0c 	.word	0x20004e0c

080126ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80126ec:	b580      	push	{r7, lr}
 80126ee:	b084      	sub	sp, #16
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80126f4:	f107 0308 	add.w	r3, r7, #8
 80126f8:	4618      	mov	r0, r3
 80126fa:	f000 f857 	bl	80127ac <prvGetNextExpireTime>
 80126fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012700:	68bb      	ldr	r3, [r7, #8]
 8012702:	4619      	mov	r1, r3
 8012704:	68f8      	ldr	r0, [r7, #12]
 8012706:	f000 f803 	bl	8012710 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801270a:	f000 f8d5 	bl	80128b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801270e:	e7f1      	b.n	80126f4 <prvTimerTask+0x8>

08012710 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012710:	b580      	push	{r7, lr}
 8012712:	b084      	sub	sp, #16
 8012714:	af00      	add	r7, sp, #0
 8012716:	6078      	str	r0, [r7, #4]
 8012718:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801271a:	f7fe fe65 	bl	80113e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801271e:	f107 0308 	add.w	r3, r7, #8
 8012722:	4618      	mov	r0, r3
 8012724:	f000 f866 	bl	80127f4 <prvSampleTimeNow>
 8012728:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801272a:	68bb      	ldr	r3, [r7, #8]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d130      	bne.n	8012792 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012730:	683b      	ldr	r3, [r7, #0]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d10a      	bne.n	801274c <prvProcessTimerOrBlockTask+0x3c>
 8012736:	687a      	ldr	r2, [r7, #4]
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	429a      	cmp	r2, r3
 801273c:	d806      	bhi.n	801274c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801273e:	f7fe fe61 	bl	8011404 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012742:	68f9      	ldr	r1, [r7, #12]
 8012744:	6878      	ldr	r0, [r7, #4]
 8012746:	f7ff ff85 	bl	8012654 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801274a:	e024      	b.n	8012796 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801274c:	683b      	ldr	r3, [r7, #0]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d008      	beq.n	8012764 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012752:	4b13      	ldr	r3, [pc, #76]	; (80127a0 <prvProcessTimerOrBlockTask+0x90>)
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d101      	bne.n	8012760 <prvProcessTimerOrBlockTask+0x50>
 801275c:	2301      	movs	r3, #1
 801275e:	e000      	b.n	8012762 <prvProcessTimerOrBlockTask+0x52>
 8012760:	2300      	movs	r3, #0
 8012762:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012764:	4b0f      	ldr	r3, [pc, #60]	; (80127a4 <prvProcessTimerOrBlockTask+0x94>)
 8012766:	6818      	ldr	r0, [r3, #0]
 8012768:	687a      	ldr	r2, [r7, #4]
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	1ad3      	subs	r3, r2, r3
 801276e:	683a      	ldr	r2, [r7, #0]
 8012770:	4619      	mov	r1, r3
 8012772:	f7fe faed 	bl	8010d50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012776:	f7fe fe45 	bl	8011404 <xTaskResumeAll>
 801277a:	4603      	mov	r3, r0
 801277c:	2b00      	cmp	r3, #0
 801277e:	d10a      	bne.n	8012796 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012780:	4b09      	ldr	r3, [pc, #36]	; (80127a8 <prvProcessTimerOrBlockTask+0x98>)
 8012782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012786:	601a      	str	r2, [r3, #0]
 8012788:	f3bf 8f4f 	dsb	sy
 801278c:	f3bf 8f6f 	isb	sy
}
 8012790:	e001      	b.n	8012796 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012792:	f7fe fe37 	bl	8011404 <xTaskResumeAll>
}
 8012796:	bf00      	nop
 8012798:	3710      	adds	r7, #16
 801279a:	46bd      	mov	sp, r7
 801279c:	bd80      	pop	{r7, pc}
 801279e:	bf00      	nop
 80127a0:	20004e10 	.word	0x20004e10
 80127a4:	20004e14 	.word	0x20004e14
 80127a8:	e000ed04 	.word	0xe000ed04

080127ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80127ac:	b480      	push	{r7}
 80127ae:	b085      	sub	sp, #20
 80127b0:	af00      	add	r7, sp, #0
 80127b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80127b4:	4b0e      	ldr	r3, [pc, #56]	; (80127f0 <prvGetNextExpireTime+0x44>)
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d101      	bne.n	80127c2 <prvGetNextExpireTime+0x16>
 80127be:	2201      	movs	r2, #1
 80127c0:	e000      	b.n	80127c4 <prvGetNextExpireTime+0x18>
 80127c2:	2200      	movs	r2, #0
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d105      	bne.n	80127dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80127d0:	4b07      	ldr	r3, [pc, #28]	; (80127f0 <prvGetNextExpireTime+0x44>)
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	68db      	ldr	r3, [r3, #12]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	60fb      	str	r3, [r7, #12]
 80127da:	e001      	b.n	80127e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80127dc:	2300      	movs	r3, #0
 80127de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80127e0:	68fb      	ldr	r3, [r7, #12]
}
 80127e2:	4618      	mov	r0, r3
 80127e4:	3714      	adds	r7, #20
 80127e6:	46bd      	mov	sp, r7
 80127e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ec:	4770      	bx	lr
 80127ee:	bf00      	nop
 80127f0:	20004e0c 	.word	0x20004e0c

080127f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b084      	sub	sp, #16
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80127fc:	f7fe fea0 	bl	8011540 <xTaskGetTickCount>
 8012800:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012802:	4b0b      	ldr	r3, [pc, #44]	; (8012830 <prvSampleTimeNow+0x3c>)
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	68fa      	ldr	r2, [r7, #12]
 8012808:	429a      	cmp	r2, r3
 801280a:	d205      	bcs.n	8012818 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801280c:	f000 f936 	bl	8012a7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	2201      	movs	r2, #1
 8012814:	601a      	str	r2, [r3, #0]
 8012816:	e002      	b.n	801281e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	2200      	movs	r2, #0
 801281c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801281e:	4a04      	ldr	r2, [pc, #16]	; (8012830 <prvSampleTimeNow+0x3c>)
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012824:	68fb      	ldr	r3, [r7, #12]
}
 8012826:	4618      	mov	r0, r3
 8012828:	3710      	adds	r7, #16
 801282a:	46bd      	mov	sp, r7
 801282c:	bd80      	pop	{r7, pc}
 801282e:	bf00      	nop
 8012830:	20004e1c 	.word	0x20004e1c

08012834 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012834:	b580      	push	{r7, lr}
 8012836:	b086      	sub	sp, #24
 8012838:	af00      	add	r7, sp, #0
 801283a:	60f8      	str	r0, [r7, #12]
 801283c:	60b9      	str	r1, [r7, #8]
 801283e:	607a      	str	r2, [r7, #4]
 8012840:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012842:	2300      	movs	r3, #0
 8012844:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	68ba      	ldr	r2, [r7, #8]
 801284a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	68fa      	ldr	r2, [r7, #12]
 8012850:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012852:	68ba      	ldr	r2, [r7, #8]
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	429a      	cmp	r2, r3
 8012858:	d812      	bhi.n	8012880 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801285a:	687a      	ldr	r2, [r7, #4]
 801285c:	683b      	ldr	r3, [r7, #0]
 801285e:	1ad2      	subs	r2, r2, r3
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	699b      	ldr	r3, [r3, #24]
 8012864:	429a      	cmp	r2, r3
 8012866:	d302      	bcc.n	801286e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012868:	2301      	movs	r3, #1
 801286a:	617b      	str	r3, [r7, #20]
 801286c:	e01b      	b.n	80128a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801286e:	4b10      	ldr	r3, [pc, #64]	; (80128b0 <prvInsertTimerInActiveList+0x7c>)
 8012870:	681a      	ldr	r2, [r3, #0]
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	3304      	adds	r3, #4
 8012876:	4619      	mov	r1, r3
 8012878:	4610      	mov	r0, r2
 801287a:	f7fd f976 	bl	800fb6a <vListInsert>
 801287e:	e012      	b.n	80128a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012880:	687a      	ldr	r2, [r7, #4]
 8012882:	683b      	ldr	r3, [r7, #0]
 8012884:	429a      	cmp	r2, r3
 8012886:	d206      	bcs.n	8012896 <prvInsertTimerInActiveList+0x62>
 8012888:	68ba      	ldr	r2, [r7, #8]
 801288a:	683b      	ldr	r3, [r7, #0]
 801288c:	429a      	cmp	r2, r3
 801288e:	d302      	bcc.n	8012896 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012890:	2301      	movs	r3, #1
 8012892:	617b      	str	r3, [r7, #20]
 8012894:	e007      	b.n	80128a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012896:	4b07      	ldr	r3, [pc, #28]	; (80128b4 <prvInsertTimerInActiveList+0x80>)
 8012898:	681a      	ldr	r2, [r3, #0]
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	3304      	adds	r3, #4
 801289e:	4619      	mov	r1, r3
 80128a0:	4610      	mov	r0, r2
 80128a2:	f7fd f962 	bl	800fb6a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80128a6:	697b      	ldr	r3, [r7, #20]
}
 80128a8:	4618      	mov	r0, r3
 80128aa:	3718      	adds	r7, #24
 80128ac:	46bd      	mov	sp, r7
 80128ae:	bd80      	pop	{r7, pc}
 80128b0:	20004e10 	.word	0x20004e10
 80128b4:	20004e0c 	.word	0x20004e0c

080128b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80128b8:	b580      	push	{r7, lr}
 80128ba:	b08e      	sub	sp, #56	; 0x38
 80128bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80128be:	e0ca      	b.n	8012a56 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	da18      	bge.n	80128f8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80128c6:	1d3b      	adds	r3, r7, #4
 80128c8:	3304      	adds	r3, #4
 80128ca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80128cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d10a      	bne.n	80128e8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80128d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128d6:	f383 8811 	msr	BASEPRI, r3
 80128da:	f3bf 8f6f 	isb	sy
 80128de:	f3bf 8f4f 	dsb	sy
 80128e2:	61fb      	str	r3, [r7, #28]
}
 80128e4:	bf00      	nop
 80128e6:	e7fe      	b.n	80128e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80128e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80128ee:	6850      	ldr	r0, [r2, #4]
 80128f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80128f2:	6892      	ldr	r2, [r2, #8]
 80128f4:	4611      	mov	r1, r2
 80128f6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	f2c0 80aa 	blt.w	8012a54 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012906:	695b      	ldr	r3, [r3, #20]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d004      	beq.n	8012916 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801290c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801290e:	3304      	adds	r3, #4
 8012910:	4618      	mov	r0, r3
 8012912:	f7fd f963 	bl	800fbdc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012916:	463b      	mov	r3, r7
 8012918:	4618      	mov	r0, r3
 801291a:	f7ff ff6b 	bl	80127f4 <prvSampleTimeNow>
 801291e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	2b09      	cmp	r3, #9
 8012924:	f200 8097 	bhi.w	8012a56 <prvProcessReceivedCommands+0x19e>
 8012928:	a201      	add	r2, pc, #4	; (adr r2, 8012930 <prvProcessReceivedCommands+0x78>)
 801292a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801292e:	bf00      	nop
 8012930:	08012959 	.word	0x08012959
 8012934:	08012959 	.word	0x08012959
 8012938:	08012959 	.word	0x08012959
 801293c:	080129cd 	.word	0x080129cd
 8012940:	080129e1 	.word	0x080129e1
 8012944:	08012a2b 	.word	0x08012a2b
 8012948:	08012959 	.word	0x08012959
 801294c:	08012959 	.word	0x08012959
 8012950:	080129cd 	.word	0x080129cd
 8012954:	080129e1 	.word	0x080129e1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801295a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801295e:	f043 0301 	orr.w	r3, r3, #1
 8012962:	b2da      	uxtb	r2, r3
 8012964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012966:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801296a:	68ba      	ldr	r2, [r7, #8]
 801296c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801296e:	699b      	ldr	r3, [r3, #24]
 8012970:	18d1      	adds	r1, r2, r3
 8012972:	68bb      	ldr	r3, [r7, #8]
 8012974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012976:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012978:	f7ff ff5c 	bl	8012834 <prvInsertTimerInActiveList>
 801297c:	4603      	mov	r3, r0
 801297e:	2b00      	cmp	r3, #0
 8012980:	d069      	beq.n	8012a56 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012984:	6a1b      	ldr	r3, [r3, #32]
 8012986:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012988:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801298a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801298c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012990:	f003 0304 	and.w	r3, r3, #4
 8012994:	2b00      	cmp	r3, #0
 8012996:	d05e      	beq.n	8012a56 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012998:	68ba      	ldr	r2, [r7, #8]
 801299a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801299c:	699b      	ldr	r3, [r3, #24]
 801299e:	441a      	add	r2, r3
 80129a0:	2300      	movs	r3, #0
 80129a2:	9300      	str	r3, [sp, #0]
 80129a4:	2300      	movs	r3, #0
 80129a6:	2100      	movs	r1, #0
 80129a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80129aa:	f7ff fe05 	bl	80125b8 <xTimerGenericCommand>
 80129ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80129b0:	6a3b      	ldr	r3, [r7, #32]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d14f      	bne.n	8012a56 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80129b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129ba:	f383 8811 	msr	BASEPRI, r3
 80129be:	f3bf 8f6f 	isb	sy
 80129c2:	f3bf 8f4f 	dsb	sy
 80129c6:	61bb      	str	r3, [r7, #24]
}
 80129c8:	bf00      	nop
 80129ca:	e7fe      	b.n	80129ca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80129cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80129d2:	f023 0301 	bic.w	r3, r3, #1
 80129d6:	b2da      	uxtb	r2, r3
 80129d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80129de:	e03a      	b.n	8012a56 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80129e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80129e6:	f043 0301 	orr.w	r3, r3, #1
 80129ea:	b2da      	uxtb	r2, r3
 80129ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80129f2:	68ba      	ldr	r2, [r7, #8]
 80129f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129f6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80129f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129fa:	699b      	ldr	r3, [r3, #24]
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d10a      	bne.n	8012a16 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8012a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a04:	f383 8811 	msr	BASEPRI, r3
 8012a08:	f3bf 8f6f 	isb	sy
 8012a0c:	f3bf 8f4f 	dsb	sy
 8012a10:	617b      	str	r3, [r7, #20]
}
 8012a12:	bf00      	nop
 8012a14:	e7fe      	b.n	8012a14 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a18:	699a      	ldr	r2, [r3, #24]
 8012a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a1c:	18d1      	adds	r1, r2, r3
 8012a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012a24:	f7ff ff06 	bl	8012834 <prvInsertTimerInActiveList>
					break;
 8012a28:	e015      	b.n	8012a56 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012a30:	f003 0302 	and.w	r3, r3, #2
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d103      	bne.n	8012a40 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8012a38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012a3a:	f000 fbe1 	bl	8013200 <vPortFree>
 8012a3e:	e00a      	b.n	8012a56 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012a46:	f023 0301 	bic.w	r3, r3, #1
 8012a4a:	b2da      	uxtb	r2, r3
 8012a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012a52:	e000      	b.n	8012a56 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8012a54:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012a56:	4b08      	ldr	r3, [pc, #32]	; (8012a78 <prvProcessReceivedCommands+0x1c0>)
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	1d39      	adds	r1, r7, #4
 8012a5c:	2200      	movs	r2, #0
 8012a5e:	4618      	mov	r0, r3
 8012a60:	f7fd fd6a 	bl	8010538 <xQueueReceive>
 8012a64:	4603      	mov	r3, r0
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	f47f af2a 	bne.w	80128c0 <prvProcessReceivedCommands+0x8>
	}
}
 8012a6c:	bf00      	nop
 8012a6e:	bf00      	nop
 8012a70:	3730      	adds	r7, #48	; 0x30
 8012a72:	46bd      	mov	sp, r7
 8012a74:	bd80      	pop	{r7, pc}
 8012a76:	bf00      	nop
 8012a78:	20004e14 	.word	0x20004e14

08012a7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012a7c:	b580      	push	{r7, lr}
 8012a7e:	b088      	sub	sp, #32
 8012a80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012a82:	e048      	b.n	8012b16 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012a84:	4b2d      	ldr	r3, [pc, #180]	; (8012b3c <prvSwitchTimerLists+0xc0>)
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	68db      	ldr	r3, [r3, #12]
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012a8e:	4b2b      	ldr	r3, [pc, #172]	; (8012b3c <prvSwitchTimerLists+0xc0>)
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	68db      	ldr	r3, [r3, #12]
 8012a94:	68db      	ldr	r3, [r3, #12]
 8012a96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	3304      	adds	r3, #4
 8012a9c:	4618      	mov	r0, r3
 8012a9e:	f7fd f89d 	bl	800fbdc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	6a1b      	ldr	r3, [r3, #32]
 8012aa6:	68f8      	ldr	r0, [r7, #12]
 8012aa8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012ab0:	f003 0304 	and.w	r3, r3, #4
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d02e      	beq.n	8012b16 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	699b      	ldr	r3, [r3, #24]
 8012abc:	693a      	ldr	r2, [r7, #16]
 8012abe:	4413      	add	r3, r2
 8012ac0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012ac2:	68ba      	ldr	r2, [r7, #8]
 8012ac4:	693b      	ldr	r3, [r7, #16]
 8012ac6:	429a      	cmp	r2, r3
 8012ac8:	d90e      	bls.n	8012ae8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	68ba      	ldr	r2, [r7, #8]
 8012ace:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	68fa      	ldr	r2, [r7, #12]
 8012ad4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012ad6:	4b19      	ldr	r3, [pc, #100]	; (8012b3c <prvSwitchTimerLists+0xc0>)
 8012ad8:	681a      	ldr	r2, [r3, #0]
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	3304      	adds	r3, #4
 8012ade:	4619      	mov	r1, r3
 8012ae0:	4610      	mov	r0, r2
 8012ae2:	f7fd f842 	bl	800fb6a <vListInsert>
 8012ae6:	e016      	b.n	8012b16 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012ae8:	2300      	movs	r3, #0
 8012aea:	9300      	str	r3, [sp, #0]
 8012aec:	2300      	movs	r3, #0
 8012aee:	693a      	ldr	r2, [r7, #16]
 8012af0:	2100      	movs	r1, #0
 8012af2:	68f8      	ldr	r0, [r7, #12]
 8012af4:	f7ff fd60 	bl	80125b8 <xTimerGenericCommand>
 8012af8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d10a      	bne.n	8012b16 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8012b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b04:	f383 8811 	msr	BASEPRI, r3
 8012b08:	f3bf 8f6f 	isb	sy
 8012b0c:	f3bf 8f4f 	dsb	sy
 8012b10:	603b      	str	r3, [r7, #0]
}
 8012b12:	bf00      	nop
 8012b14:	e7fe      	b.n	8012b14 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012b16:	4b09      	ldr	r3, [pc, #36]	; (8012b3c <prvSwitchTimerLists+0xc0>)
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d1b1      	bne.n	8012a84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012b20:	4b06      	ldr	r3, [pc, #24]	; (8012b3c <prvSwitchTimerLists+0xc0>)
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012b26:	4b06      	ldr	r3, [pc, #24]	; (8012b40 <prvSwitchTimerLists+0xc4>)
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	4a04      	ldr	r2, [pc, #16]	; (8012b3c <prvSwitchTimerLists+0xc0>)
 8012b2c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012b2e:	4a04      	ldr	r2, [pc, #16]	; (8012b40 <prvSwitchTimerLists+0xc4>)
 8012b30:	697b      	ldr	r3, [r7, #20]
 8012b32:	6013      	str	r3, [r2, #0]
}
 8012b34:	bf00      	nop
 8012b36:	3718      	adds	r7, #24
 8012b38:	46bd      	mov	sp, r7
 8012b3a:	bd80      	pop	{r7, pc}
 8012b3c:	20004e0c 	.word	0x20004e0c
 8012b40:	20004e10 	.word	0x20004e10

08012b44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012b44:	b580      	push	{r7, lr}
 8012b46:	b082      	sub	sp, #8
 8012b48:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012b4a:	f000 f96b 	bl	8012e24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8012b4e:	4b15      	ldr	r3, [pc, #84]	; (8012ba4 <prvCheckForValidListAndQueue+0x60>)
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d120      	bne.n	8012b98 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8012b56:	4814      	ldr	r0, [pc, #80]	; (8012ba8 <prvCheckForValidListAndQueue+0x64>)
 8012b58:	f7fc ffb6 	bl	800fac8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012b5c:	4813      	ldr	r0, [pc, #76]	; (8012bac <prvCheckForValidListAndQueue+0x68>)
 8012b5e:	f7fc ffb3 	bl	800fac8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012b62:	4b13      	ldr	r3, [pc, #76]	; (8012bb0 <prvCheckForValidListAndQueue+0x6c>)
 8012b64:	4a10      	ldr	r2, [pc, #64]	; (8012ba8 <prvCheckForValidListAndQueue+0x64>)
 8012b66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012b68:	4b12      	ldr	r3, [pc, #72]	; (8012bb4 <prvCheckForValidListAndQueue+0x70>)
 8012b6a:	4a10      	ldr	r2, [pc, #64]	; (8012bac <prvCheckForValidListAndQueue+0x68>)
 8012b6c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012b6e:	2300      	movs	r3, #0
 8012b70:	9300      	str	r3, [sp, #0]
 8012b72:	4b11      	ldr	r3, [pc, #68]	; (8012bb8 <prvCheckForValidListAndQueue+0x74>)
 8012b74:	4a11      	ldr	r2, [pc, #68]	; (8012bbc <prvCheckForValidListAndQueue+0x78>)
 8012b76:	2110      	movs	r1, #16
 8012b78:	200a      	movs	r0, #10
 8012b7a:	f7fd f8c1 	bl	800fd00 <xQueueGenericCreateStatic>
 8012b7e:	4603      	mov	r3, r0
 8012b80:	4a08      	ldr	r2, [pc, #32]	; (8012ba4 <prvCheckForValidListAndQueue+0x60>)
 8012b82:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012b84:	4b07      	ldr	r3, [pc, #28]	; (8012ba4 <prvCheckForValidListAndQueue+0x60>)
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d005      	beq.n	8012b98 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012b8c:	4b05      	ldr	r3, [pc, #20]	; (8012ba4 <prvCheckForValidListAndQueue+0x60>)
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	490b      	ldr	r1, [pc, #44]	; (8012bc0 <prvCheckForValidListAndQueue+0x7c>)
 8012b92:	4618      	mov	r0, r3
 8012b94:	f7fe f888 	bl	8010ca8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012b98:	f000 f974 	bl	8012e84 <vPortExitCritical>
}
 8012b9c:	bf00      	nop
 8012b9e:	46bd      	mov	sp, r7
 8012ba0:	bd80      	pop	{r7, pc}
 8012ba2:	bf00      	nop
 8012ba4:	20004e14 	.word	0x20004e14
 8012ba8:	20004de4 	.word	0x20004de4
 8012bac:	20004df8 	.word	0x20004df8
 8012bb0:	20004e0c 	.word	0x20004e0c
 8012bb4:	20004e10 	.word	0x20004e10
 8012bb8:	20004ec0 	.word	0x20004ec0
 8012bbc:	20004e20 	.word	0x20004e20
 8012bc0:	080263e4 	.word	0x080263e4

08012bc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012bc4:	b480      	push	{r7}
 8012bc6:	b085      	sub	sp, #20
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	60f8      	str	r0, [r7, #12]
 8012bcc:	60b9      	str	r1, [r7, #8]
 8012bce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	3b04      	subs	r3, #4
 8012bd4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012bdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	3b04      	subs	r3, #4
 8012be2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012be4:	68bb      	ldr	r3, [r7, #8]
 8012be6:	f023 0201 	bic.w	r2, r3, #1
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	3b04      	subs	r3, #4
 8012bf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012bf4:	4a0c      	ldr	r2, [pc, #48]	; (8012c28 <pxPortInitialiseStack+0x64>)
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	3b14      	subs	r3, #20
 8012bfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012c00:	687a      	ldr	r2, [r7, #4]
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	3b04      	subs	r3, #4
 8012c0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	f06f 0202 	mvn.w	r2, #2
 8012c12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	3b20      	subs	r3, #32
 8012c18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012c1a:	68fb      	ldr	r3, [r7, #12]
}
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	3714      	adds	r7, #20
 8012c20:	46bd      	mov	sp, r7
 8012c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c26:	4770      	bx	lr
 8012c28:	08012c2d 	.word	0x08012c2d

08012c2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012c2c:	b480      	push	{r7}
 8012c2e:	b085      	sub	sp, #20
 8012c30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012c32:	2300      	movs	r3, #0
 8012c34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012c36:	4b12      	ldr	r3, [pc, #72]	; (8012c80 <prvTaskExitError+0x54>)
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c3e:	d00a      	beq.n	8012c56 <prvTaskExitError+0x2a>
	__asm volatile
 8012c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c44:	f383 8811 	msr	BASEPRI, r3
 8012c48:	f3bf 8f6f 	isb	sy
 8012c4c:	f3bf 8f4f 	dsb	sy
 8012c50:	60fb      	str	r3, [r7, #12]
}
 8012c52:	bf00      	nop
 8012c54:	e7fe      	b.n	8012c54 <prvTaskExitError+0x28>
	__asm volatile
 8012c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c5a:	f383 8811 	msr	BASEPRI, r3
 8012c5e:	f3bf 8f6f 	isb	sy
 8012c62:	f3bf 8f4f 	dsb	sy
 8012c66:	60bb      	str	r3, [r7, #8]
}
 8012c68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012c6a:	bf00      	nop
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d0fc      	beq.n	8012c6c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012c72:	bf00      	nop
 8012c74:	bf00      	nop
 8012c76:	3714      	adds	r7, #20
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c7e:	4770      	bx	lr
 8012c80:	2000000c 	.word	0x2000000c
	...

08012c90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012c90:	4b07      	ldr	r3, [pc, #28]	; (8012cb0 <pxCurrentTCBConst2>)
 8012c92:	6819      	ldr	r1, [r3, #0]
 8012c94:	6808      	ldr	r0, [r1, #0]
 8012c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c9a:	f380 8809 	msr	PSP, r0
 8012c9e:	f3bf 8f6f 	isb	sy
 8012ca2:	f04f 0000 	mov.w	r0, #0
 8012ca6:	f380 8811 	msr	BASEPRI, r0
 8012caa:	4770      	bx	lr
 8012cac:	f3af 8000 	nop.w

08012cb0 <pxCurrentTCBConst2>:
 8012cb0:	200048dc 	.word	0x200048dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012cb4:	bf00      	nop
 8012cb6:	bf00      	nop

08012cb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012cb8:	4808      	ldr	r0, [pc, #32]	; (8012cdc <prvPortStartFirstTask+0x24>)
 8012cba:	6800      	ldr	r0, [r0, #0]
 8012cbc:	6800      	ldr	r0, [r0, #0]
 8012cbe:	f380 8808 	msr	MSP, r0
 8012cc2:	f04f 0000 	mov.w	r0, #0
 8012cc6:	f380 8814 	msr	CONTROL, r0
 8012cca:	b662      	cpsie	i
 8012ccc:	b661      	cpsie	f
 8012cce:	f3bf 8f4f 	dsb	sy
 8012cd2:	f3bf 8f6f 	isb	sy
 8012cd6:	df00      	svc	0
 8012cd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012cda:	bf00      	nop
 8012cdc:	e000ed08 	.word	0xe000ed08

08012ce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	b086      	sub	sp, #24
 8012ce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012ce6:	4b46      	ldr	r3, [pc, #280]	; (8012e00 <xPortStartScheduler+0x120>)
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	4a46      	ldr	r2, [pc, #280]	; (8012e04 <xPortStartScheduler+0x124>)
 8012cec:	4293      	cmp	r3, r2
 8012cee:	d10a      	bne.n	8012d06 <xPortStartScheduler+0x26>
	__asm volatile
 8012cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cf4:	f383 8811 	msr	BASEPRI, r3
 8012cf8:	f3bf 8f6f 	isb	sy
 8012cfc:	f3bf 8f4f 	dsb	sy
 8012d00:	613b      	str	r3, [r7, #16]
}
 8012d02:	bf00      	nop
 8012d04:	e7fe      	b.n	8012d04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012d06:	4b3e      	ldr	r3, [pc, #248]	; (8012e00 <xPortStartScheduler+0x120>)
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	4a3f      	ldr	r2, [pc, #252]	; (8012e08 <xPortStartScheduler+0x128>)
 8012d0c:	4293      	cmp	r3, r2
 8012d0e:	d10a      	bne.n	8012d26 <xPortStartScheduler+0x46>
	__asm volatile
 8012d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d14:	f383 8811 	msr	BASEPRI, r3
 8012d18:	f3bf 8f6f 	isb	sy
 8012d1c:	f3bf 8f4f 	dsb	sy
 8012d20:	60fb      	str	r3, [r7, #12]
}
 8012d22:	bf00      	nop
 8012d24:	e7fe      	b.n	8012d24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012d26:	4b39      	ldr	r3, [pc, #228]	; (8012e0c <xPortStartScheduler+0x12c>)
 8012d28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012d2a:	697b      	ldr	r3, [r7, #20]
 8012d2c:	781b      	ldrb	r3, [r3, #0]
 8012d2e:	b2db      	uxtb	r3, r3
 8012d30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012d32:	697b      	ldr	r3, [r7, #20]
 8012d34:	22ff      	movs	r2, #255	; 0xff
 8012d36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012d38:	697b      	ldr	r3, [r7, #20]
 8012d3a:	781b      	ldrb	r3, [r3, #0]
 8012d3c:	b2db      	uxtb	r3, r3
 8012d3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012d40:	78fb      	ldrb	r3, [r7, #3]
 8012d42:	b2db      	uxtb	r3, r3
 8012d44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012d48:	b2da      	uxtb	r2, r3
 8012d4a:	4b31      	ldr	r3, [pc, #196]	; (8012e10 <xPortStartScheduler+0x130>)
 8012d4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012d4e:	4b31      	ldr	r3, [pc, #196]	; (8012e14 <xPortStartScheduler+0x134>)
 8012d50:	2207      	movs	r2, #7
 8012d52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012d54:	e009      	b.n	8012d6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012d56:	4b2f      	ldr	r3, [pc, #188]	; (8012e14 <xPortStartScheduler+0x134>)
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	3b01      	subs	r3, #1
 8012d5c:	4a2d      	ldr	r2, [pc, #180]	; (8012e14 <xPortStartScheduler+0x134>)
 8012d5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012d60:	78fb      	ldrb	r3, [r7, #3]
 8012d62:	b2db      	uxtb	r3, r3
 8012d64:	005b      	lsls	r3, r3, #1
 8012d66:	b2db      	uxtb	r3, r3
 8012d68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012d6a:	78fb      	ldrb	r3, [r7, #3]
 8012d6c:	b2db      	uxtb	r3, r3
 8012d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012d72:	2b80      	cmp	r3, #128	; 0x80
 8012d74:	d0ef      	beq.n	8012d56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012d76:	4b27      	ldr	r3, [pc, #156]	; (8012e14 <xPortStartScheduler+0x134>)
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	f1c3 0307 	rsb	r3, r3, #7
 8012d7e:	2b04      	cmp	r3, #4
 8012d80:	d00a      	beq.n	8012d98 <xPortStartScheduler+0xb8>
	__asm volatile
 8012d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d86:	f383 8811 	msr	BASEPRI, r3
 8012d8a:	f3bf 8f6f 	isb	sy
 8012d8e:	f3bf 8f4f 	dsb	sy
 8012d92:	60bb      	str	r3, [r7, #8]
}
 8012d94:	bf00      	nop
 8012d96:	e7fe      	b.n	8012d96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012d98:	4b1e      	ldr	r3, [pc, #120]	; (8012e14 <xPortStartScheduler+0x134>)
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	021b      	lsls	r3, r3, #8
 8012d9e:	4a1d      	ldr	r2, [pc, #116]	; (8012e14 <xPortStartScheduler+0x134>)
 8012da0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012da2:	4b1c      	ldr	r3, [pc, #112]	; (8012e14 <xPortStartScheduler+0x134>)
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012daa:	4a1a      	ldr	r2, [pc, #104]	; (8012e14 <xPortStartScheduler+0x134>)
 8012dac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	b2da      	uxtb	r2, r3
 8012db2:	697b      	ldr	r3, [r7, #20]
 8012db4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012db6:	4b18      	ldr	r3, [pc, #96]	; (8012e18 <xPortStartScheduler+0x138>)
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	4a17      	ldr	r2, [pc, #92]	; (8012e18 <xPortStartScheduler+0x138>)
 8012dbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012dc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012dc2:	4b15      	ldr	r3, [pc, #84]	; (8012e18 <xPortStartScheduler+0x138>)
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	4a14      	ldr	r2, [pc, #80]	; (8012e18 <xPortStartScheduler+0x138>)
 8012dc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012dcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012dce:	f000 f8dd 	bl	8012f8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012dd2:	4b12      	ldr	r3, [pc, #72]	; (8012e1c <xPortStartScheduler+0x13c>)
 8012dd4:	2200      	movs	r2, #0
 8012dd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012dd8:	f000 f8fc 	bl	8012fd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012ddc:	4b10      	ldr	r3, [pc, #64]	; (8012e20 <xPortStartScheduler+0x140>)
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	4a0f      	ldr	r2, [pc, #60]	; (8012e20 <xPortStartScheduler+0x140>)
 8012de2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012de6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012de8:	f7ff ff66 	bl	8012cb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012dec:	f7fe fd14 	bl	8011818 <vTaskSwitchContext>
	prvTaskExitError();
 8012df0:	f7ff ff1c 	bl	8012c2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012df4:	2300      	movs	r3, #0
}
 8012df6:	4618      	mov	r0, r3
 8012df8:	3718      	adds	r7, #24
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	bd80      	pop	{r7, pc}
 8012dfe:	bf00      	nop
 8012e00:	e000ed00 	.word	0xe000ed00
 8012e04:	410fc271 	.word	0x410fc271
 8012e08:	410fc270 	.word	0x410fc270
 8012e0c:	e000e400 	.word	0xe000e400
 8012e10:	20004f10 	.word	0x20004f10
 8012e14:	20004f14 	.word	0x20004f14
 8012e18:	e000ed20 	.word	0xe000ed20
 8012e1c:	2000000c 	.word	0x2000000c
 8012e20:	e000ef34 	.word	0xe000ef34

08012e24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012e24:	b480      	push	{r7}
 8012e26:	b083      	sub	sp, #12
 8012e28:	af00      	add	r7, sp, #0
	__asm volatile
 8012e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e2e:	f383 8811 	msr	BASEPRI, r3
 8012e32:	f3bf 8f6f 	isb	sy
 8012e36:	f3bf 8f4f 	dsb	sy
 8012e3a:	607b      	str	r3, [r7, #4]
}
 8012e3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012e3e:	4b0f      	ldr	r3, [pc, #60]	; (8012e7c <vPortEnterCritical+0x58>)
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	3301      	adds	r3, #1
 8012e44:	4a0d      	ldr	r2, [pc, #52]	; (8012e7c <vPortEnterCritical+0x58>)
 8012e46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012e48:	4b0c      	ldr	r3, [pc, #48]	; (8012e7c <vPortEnterCritical+0x58>)
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	2b01      	cmp	r3, #1
 8012e4e:	d10f      	bne.n	8012e70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012e50:	4b0b      	ldr	r3, [pc, #44]	; (8012e80 <vPortEnterCritical+0x5c>)
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	b2db      	uxtb	r3, r3
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d00a      	beq.n	8012e70 <vPortEnterCritical+0x4c>
	__asm volatile
 8012e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e5e:	f383 8811 	msr	BASEPRI, r3
 8012e62:	f3bf 8f6f 	isb	sy
 8012e66:	f3bf 8f4f 	dsb	sy
 8012e6a:	603b      	str	r3, [r7, #0]
}
 8012e6c:	bf00      	nop
 8012e6e:	e7fe      	b.n	8012e6e <vPortEnterCritical+0x4a>
	}
}
 8012e70:	bf00      	nop
 8012e72:	370c      	adds	r7, #12
 8012e74:	46bd      	mov	sp, r7
 8012e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e7a:	4770      	bx	lr
 8012e7c:	2000000c 	.word	0x2000000c
 8012e80:	e000ed04 	.word	0xe000ed04

08012e84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012e84:	b480      	push	{r7}
 8012e86:	b083      	sub	sp, #12
 8012e88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012e8a:	4b12      	ldr	r3, [pc, #72]	; (8012ed4 <vPortExitCritical+0x50>)
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d10a      	bne.n	8012ea8 <vPortExitCritical+0x24>
	__asm volatile
 8012e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e96:	f383 8811 	msr	BASEPRI, r3
 8012e9a:	f3bf 8f6f 	isb	sy
 8012e9e:	f3bf 8f4f 	dsb	sy
 8012ea2:	607b      	str	r3, [r7, #4]
}
 8012ea4:	bf00      	nop
 8012ea6:	e7fe      	b.n	8012ea6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012ea8:	4b0a      	ldr	r3, [pc, #40]	; (8012ed4 <vPortExitCritical+0x50>)
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	3b01      	subs	r3, #1
 8012eae:	4a09      	ldr	r2, [pc, #36]	; (8012ed4 <vPortExitCritical+0x50>)
 8012eb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012eb2:	4b08      	ldr	r3, [pc, #32]	; (8012ed4 <vPortExitCritical+0x50>)
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d105      	bne.n	8012ec6 <vPortExitCritical+0x42>
 8012eba:	2300      	movs	r3, #0
 8012ebc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012ebe:	683b      	ldr	r3, [r7, #0]
 8012ec0:	f383 8811 	msr	BASEPRI, r3
}
 8012ec4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012ec6:	bf00      	nop
 8012ec8:	370c      	adds	r7, #12
 8012eca:	46bd      	mov	sp, r7
 8012ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed0:	4770      	bx	lr
 8012ed2:	bf00      	nop
 8012ed4:	2000000c 	.word	0x2000000c
	...

08012ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012ee0:	f3ef 8009 	mrs	r0, PSP
 8012ee4:	f3bf 8f6f 	isb	sy
 8012ee8:	4b15      	ldr	r3, [pc, #84]	; (8012f40 <pxCurrentTCBConst>)
 8012eea:	681a      	ldr	r2, [r3, #0]
 8012eec:	f01e 0f10 	tst.w	lr, #16
 8012ef0:	bf08      	it	eq
 8012ef2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012ef6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012efa:	6010      	str	r0, [r2, #0]
 8012efc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012f00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012f04:	f380 8811 	msr	BASEPRI, r0
 8012f08:	f3bf 8f4f 	dsb	sy
 8012f0c:	f3bf 8f6f 	isb	sy
 8012f10:	f7fe fc82 	bl	8011818 <vTaskSwitchContext>
 8012f14:	f04f 0000 	mov.w	r0, #0
 8012f18:	f380 8811 	msr	BASEPRI, r0
 8012f1c:	bc09      	pop	{r0, r3}
 8012f1e:	6819      	ldr	r1, [r3, #0]
 8012f20:	6808      	ldr	r0, [r1, #0]
 8012f22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f26:	f01e 0f10 	tst.w	lr, #16
 8012f2a:	bf08      	it	eq
 8012f2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012f30:	f380 8809 	msr	PSP, r0
 8012f34:	f3bf 8f6f 	isb	sy
 8012f38:	4770      	bx	lr
 8012f3a:	bf00      	nop
 8012f3c:	f3af 8000 	nop.w

08012f40 <pxCurrentTCBConst>:
 8012f40:	200048dc 	.word	0x200048dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012f44:	bf00      	nop
 8012f46:	bf00      	nop

08012f48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b082      	sub	sp, #8
 8012f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8012f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f52:	f383 8811 	msr	BASEPRI, r3
 8012f56:	f3bf 8f6f 	isb	sy
 8012f5a:	f3bf 8f4f 	dsb	sy
 8012f5e:	607b      	str	r3, [r7, #4]
}
 8012f60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012f62:	f7fe fb9f 	bl	80116a4 <xTaskIncrementTick>
 8012f66:	4603      	mov	r3, r0
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d003      	beq.n	8012f74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012f6c:	4b06      	ldr	r3, [pc, #24]	; (8012f88 <xPortSysTickHandler+0x40>)
 8012f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f72:	601a      	str	r2, [r3, #0]
 8012f74:	2300      	movs	r3, #0
 8012f76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012f78:	683b      	ldr	r3, [r7, #0]
 8012f7a:	f383 8811 	msr	BASEPRI, r3
}
 8012f7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012f80:	bf00      	nop
 8012f82:	3708      	adds	r7, #8
 8012f84:	46bd      	mov	sp, r7
 8012f86:	bd80      	pop	{r7, pc}
 8012f88:	e000ed04 	.word	0xe000ed04

08012f8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012f8c:	b480      	push	{r7}
 8012f8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012f90:	4b0b      	ldr	r3, [pc, #44]	; (8012fc0 <vPortSetupTimerInterrupt+0x34>)
 8012f92:	2200      	movs	r2, #0
 8012f94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012f96:	4b0b      	ldr	r3, [pc, #44]	; (8012fc4 <vPortSetupTimerInterrupt+0x38>)
 8012f98:	2200      	movs	r2, #0
 8012f9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012f9c:	4b0a      	ldr	r3, [pc, #40]	; (8012fc8 <vPortSetupTimerInterrupt+0x3c>)
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	4a0a      	ldr	r2, [pc, #40]	; (8012fcc <vPortSetupTimerInterrupt+0x40>)
 8012fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8012fa6:	099b      	lsrs	r3, r3, #6
 8012fa8:	4a09      	ldr	r2, [pc, #36]	; (8012fd0 <vPortSetupTimerInterrupt+0x44>)
 8012faa:	3b01      	subs	r3, #1
 8012fac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012fae:	4b04      	ldr	r3, [pc, #16]	; (8012fc0 <vPortSetupTimerInterrupt+0x34>)
 8012fb0:	2207      	movs	r2, #7
 8012fb2:	601a      	str	r2, [r3, #0]
}
 8012fb4:	bf00      	nop
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fbc:	4770      	bx	lr
 8012fbe:	bf00      	nop
 8012fc0:	e000e010 	.word	0xe000e010
 8012fc4:	e000e018 	.word	0xe000e018
 8012fc8:	20000000 	.word	0x20000000
 8012fcc:	10624dd3 	.word	0x10624dd3
 8012fd0:	e000e014 	.word	0xe000e014

08012fd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012fd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012fe4 <vPortEnableVFP+0x10>
 8012fd8:	6801      	ldr	r1, [r0, #0]
 8012fda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012fde:	6001      	str	r1, [r0, #0]
 8012fe0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012fe2:	bf00      	nop
 8012fe4:	e000ed88 	.word	0xe000ed88

08012fe8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012fe8:	b480      	push	{r7}
 8012fea:	b085      	sub	sp, #20
 8012fec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012fee:	f3ef 8305 	mrs	r3, IPSR
 8012ff2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	2b0f      	cmp	r3, #15
 8012ff8:	d914      	bls.n	8013024 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012ffa:	4a17      	ldr	r2, [pc, #92]	; (8013058 <vPortValidateInterruptPriority+0x70>)
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	4413      	add	r3, r2
 8013000:	781b      	ldrb	r3, [r3, #0]
 8013002:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013004:	4b15      	ldr	r3, [pc, #84]	; (801305c <vPortValidateInterruptPriority+0x74>)
 8013006:	781b      	ldrb	r3, [r3, #0]
 8013008:	7afa      	ldrb	r2, [r7, #11]
 801300a:	429a      	cmp	r2, r3
 801300c:	d20a      	bcs.n	8013024 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801300e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013012:	f383 8811 	msr	BASEPRI, r3
 8013016:	f3bf 8f6f 	isb	sy
 801301a:	f3bf 8f4f 	dsb	sy
 801301e:	607b      	str	r3, [r7, #4]
}
 8013020:	bf00      	nop
 8013022:	e7fe      	b.n	8013022 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013024:	4b0e      	ldr	r3, [pc, #56]	; (8013060 <vPortValidateInterruptPriority+0x78>)
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801302c:	4b0d      	ldr	r3, [pc, #52]	; (8013064 <vPortValidateInterruptPriority+0x7c>)
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	429a      	cmp	r2, r3
 8013032:	d90a      	bls.n	801304a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8013034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013038:	f383 8811 	msr	BASEPRI, r3
 801303c:	f3bf 8f6f 	isb	sy
 8013040:	f3bf 8f4f 	dsb	sy
 8013044:	603b      	str	r3, [r7, #0]
}
 8013046:	bf00      	nop
 8013048:	e7fe      	b.n	8013048 <vPortValidateInterruptPriority+0x60>
	}
 801304a:	bf00      	nop
 801304c:	3714      	adds	r7, #20
 801304e:	46bd      	mov	sp, r7
 8013050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013054:	4770      	bx	lr
 8013056:	bf00      	nop
 8013058:	e000e3f0 	.word	0xe000e3f0
 801305c:	20004f10 	.word	0x20004f10
 8013060:	e000ed0c 	.word	0xe000ed0c
 8013064:	20004f14 	.word	0x20004f14

08013068 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013068:	b580      	push	{r7, lr}
 801306a:	b08a      	sub	sp, #40	; 0x28
 801306c:	af00      	add	r7, sp, #0
 801306e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013070:	2300      	movs	r3, #0
 8013072:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013074:	f7fe f9b8 	bl	80113e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013078:	4b5b      	ldr	r3, [pc, #364]	; (80131e8 <pvPortMalloc+0x180>)
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	2b00      	cmp	r3, #0
 801307e:	d101      	bne.n	8013084 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013080:	f000 f920 	bl	80132c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013084:	4b59      	ldr	r3, [pc, #356]	; (80131ec <pvPortMalloc+0x184>)
 8013086:	681a      	ldr	r2, [r3, #0]
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	4013      	ands	r3, r2
 801308c:	2b00      	cmp	r3, #0
 801308e:	f040 8093 	bne.w	80131b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d01d      	beq.n	80130d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8013098:	2208      	movs	r2, #8
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	4413      	add	r3, r2
 801309e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	f003 0307 	and.w	r3, r3, #7
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d014      	beq.n	80130d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	f023 0307 	bic.w	r3, r3, #7
 80130b0:	3308      	adds	r3, #8
 80130b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	f003 0307 	and.w	r3, r3, #7
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d00a      	beq.n	80130d4 <pvPortMalloc+0x6c>
	__asm volatile
 80130be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130c2:	f383 8811 	msr	BASEPRI, r3
 80130c6:	f3bf 8f6f 	isb	sy
 80130ca:	f3bf 8f4f 	dsb	sy
 80130ce:	617b      	str	r3, [r7, #20]
}
 80130d0:	bf00      	nop
 80130d2:	e7fe      	b.n	80130d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d06e      	beq.n	80131b8 <pvPortMalloc+0x150>
 80130da:	4b45      	ldr	r3, [pc, #276]	; (80131f0 <pvPortMalloc+0x188>)
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	687a      	ldr	r2, [r7, #4]
 80130e0:	429a      	cmp	r2, r3
 80130e2:	d869      	bhi.n	80131b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80130e4:	4b43      	ldr	r3, [pc, #268]	; (80131f4 <pvPortMalloc+0x18c>)
 80130e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80130e8:	4b42      	ldr	r3, [pc, #264]	; (80131f4 <pvPortMalloc+0x18c>)
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80130ee:	e004      	b.n	80130fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80130f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80130f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80130fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130fc:	685b      	ldr	r3, [r3, #4]
 80130fe:	687a      	ldr	r2, [r7, #4]
 8013100:	429a      	cmp	r2, r3
 8013102:	d903      	bls.n	801310c <pvPortMalloc+0xa4>
 8013104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	2b00      	cmp	r3, #0
 801310a:	d1f1      	bne.n	80130f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801310c:	4b36      	ldr	r3, [pc, #216]	; (80131e8 <pvPortMalloc+0x180>)
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013112:	429a      	cmp	r2, r3
 8013114:	d050      	beq.n	80131b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013116:	6a3b      	ldr	r3, [r7, #32]
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	2208      	movs	r2, #8
 801311c:	4413      	add	r3, r2
 801311e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013122:	681a      	ldr	r2, [r3, #0]
 8013124:	6a3b      	ldr	r3, [r7, #32]
 8013126:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801312a:	685a      	ldr	r2, [r3, #4]
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	1ad2      	subs	r2, r2, r3
 8013130:	2308      	movs	r3, #8
 8013132:	005b      	lsls	r3, r3, #1
 8013134:	429a      	cmp	r2, r3
 8013136:	d91f      	bls.n	8013178 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	4413      	add	r3, r2
 801313e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013140:	69bb      	ldr	r3, [r7, #24]
 8013142:	f003 0307 	and.w	r3, r3, #7
 8013146:	2b00      	cmp	r3, #0
 8013148:	d00a      	beq.n	8013160 <pvPortMalloc+0xf8>
	__asm volatile
 801314a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801314e:	f383 8811 	msr	BASEPRI, r3
 8013152:	f3bf 8f6f 	isb	sy
 8013156:	f3bf 8f4f 	dsb	sy
 801315a:	613b      	str	r3, [r7, #16]
}
 801315c:	bf00      	nop
 801315e:	e7fe      	b.n	801315e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013162:	685a      	ldr	r2, [r3, #4]
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	1ad2      	subs	r2, r2, r3
 8013168:	69bb      	ldr	r3, [r7, #24]
 801316a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801316e:	687a      	ldr	r2, [r7, #4]
 8013170:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013172:	69b8      	ldr	r0, [r7, #24]
 8013174:	f000 f908 	bl	8013388 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013178:	4b1d      	ldr	r3, [pc, #116]	; (80131f0 <pvPortMalloc+0x188>)
 801317a:	681a      	ldr	r2, [r3, #0]
 801317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801317e:	685b      	ldr	r3, [r3, #4]
 8013180:	1ad3      	subs	r3, r2, r3
 8013182:	4a1b      	ldr	r2, [pc, #108]	; (80131f0 <pvPortMalloc+0x188>)
 8013184:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013186:	4b1a      	ldr	r3, [pc, #104]	; (80131f0 <pvPortMalloc+0x188>)
 8013188:	681a      	ldr	r2, [r3, #0]
 801318a:	4b1b      	ldr	r3, [pc, #108]	; (80131f8 <pvPortMalloc+0x190>)
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	429a      	cmp	r2, r3
 8013190:	d203      	bcs.n	801319a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013192:	4b17      	ldr	r3, [pc, #92]	; (80131f0 <pvPortMalloc+0x188>)
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	4a18      	ldr	r2, [pc, #96]	; (80131f8 <pvPortMalloc+0x190>)
 8013198:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801319c:	685a      	ldr	r2, [r3, #4]
 801319e:	4b13      	ldr	r3, [pc, #76]	; (80131ec <pvPortMalloc+0x184>)
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	431a      	orrs	r2, r3
 80131a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80131a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131aa:	2200      	movs	r2, #0
 80131ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80131ae:	4b13      	ldr	r3, [pc, #76]	; (80131fc <pvPortMalloc+0x194>)
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	3301      	adds	r3, #1
 80131b4:	4a11      	ldr	r2, [pc, #68]	; (80131fc <pvPortMalloc+0x194>)
 80131b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80131b8:	f7fe f924 	bl	8011404 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80131bc:	69fb      	ldr	r3, [r7, #28]
 80131be:	f003 0307 	and.w	r3, r3, #7
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d00a      	beq.n	80131dc <pvPortMalloc+0x174>
	__asm volatile
 80131c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131ca:	f383 8811 	msr	BASEPRI, r3
 80131ce:	f3bf 8f6f 	isb	sy
 80131d2:	f3bf 8f4f 	dsb	sy
 80131d6:	60fb      	str	r3, [r7, #12]
}
 80131d8:	bf00      	nop
 80131da:	e7fe      	b.n	80131da <pvPortMalloc+0x172>
	return pvReturn;
 80131dc:	69fb      	ldr	r3, [r7, #28]
}
 80131de:	4618      	mov	r0, r3
 80131e0:	3728      	adds	r7, #40	; 0x28
 80131e2:	46bd      	mov	sp, r7
 80131e4:	bd80      	pop	{r7, pc}
 80131e6:	bf00      	nop
 80131e8:	20011720 	.word	0x20011720
 80131ec:	20011734 	.word	0x20011734
 80131f0:	20011724 	.word	0x20011724
 80131f4:	20011718 	.word	0x20011718
 80131f8:	20011728 	.word	0x20011728
 80131fc:	2001172c 	.word	0x2001172c

08013200 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013200:	b580      	push	{r7, lr}
 8013202:	b086      	sub	sp, #24
 8013204:	af00      	add	r7, sp, #0
 8013206:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	2b00      	cmp	r3, #0
 8013210:	d04d      	beq.n	80132ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013212:	2308      	movs	r3, #8
 8013214:	425b      	negs	r3, r3
 8013216:	697a      	ldr	r2, [r7, #20]
 8013218:	4413      	add	r3, r2
 801321a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801321c:	697b      	ldr	r3, [r7, #20]
 801321e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013220:	693b      	ldr	r3, [r7, #16]
 8013222:	685a      	ldr	r2, [r3, #4]
 8013224:	4b24      	ldr	r3, [pc, #144]	; (80132b8 <vPortFree+0xb8>)
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	4013      	ands	r3, r2
 801322a:	2b00      	cmp	r3, #0
 801322c:	d10a      	bne.n	8013244 <vPortFree+0x44>
	__asm volatile
 801322e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013232:	f383 8811 	msr	BASEPRI, r3
 8013236:	f3bf 8f6f 	isb	sy
 801323a:	f3bf 8f4f 	dsb	sy
 801323e:	60fb      	str	r3, [r7, #12]
}
 8013240:	bf00      	nop
 8013242:	e7fe      	b.n	8013242 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013244:	693b      	ldr	r3, [r7, #16]
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d00a      	beq.n	8013262 <vPortFree+0x62>
	__asm volatile
 801324c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013250:	f383 8811 	msr	BASEPRI, r3
 8013254:	f3bf 8f6f 	isb	sy
 8013258:	f3bf 8f4f 	dsb	sy
 801325c:	60bb      	str	r3, [r7, #8]
}
 801325e:	bf00      	nop
 8013260:	e7fe      	b.n	8013260 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013262:	693b      	ldr	r3, [r7, #16]
 8013264:	685a      	ldr	r2, [r3, #4]
 8013266:	4b14      	ldr	r3, [pc, #80]	; (80132b8 <vPortFree+0xb8>)
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	4013      	ands	r3, r2
 801326c:	2b00      	cmp	r3, #0
 801326e:	d01e      	beq.n	80132ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013270:	693b      	ldr	r3, [r7, #16]
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	2b00      	cmp	r3, #0
 8013276:	d11a      	bne.n	80132ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013278:	693b      	ldr	r3, [r7, #16]
 801327a:	685a      	ldr	r2, [r3, #4]
 801327c:	4b0e      	ldr	r3, [pc, #56]	; (80132b8 <vPortFree+0xb8>)
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	43db      	mvns	r3, r3
 8013282:	401a      	ands	r2, r3
 8013284:	693b      	ldr	r3, [r7, #16]
 8013286:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013288:	f7fe f8ae 	bl	80113e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801328c:	693b      	ldr	r3, [r7, #16]
 801328e:	685a      	ldr	r2, [r3, #4]
 8013290:	4b0a      	ldr	r3, [pc, #40]	; (80132bc <vPortFree+0xbc>)
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	4413      	add	r3, r2
 8013296:	4a09      	ldr	r2, [pc, #36]	; (80132bc <vPortFree+0xbc>)
 8013298:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801329a:	6938      	ldr	r0, [r7, #16]
 801329c:	f000 f874 	bl	8013388 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80132a0:	4b07      	ldr	r3, [pc, #28]	; (80132c0 <vPortFree+0xc0>)
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	3301      	adds	r3, #1
 80132a6:	4a06      	ldr	r2, [pc, #24]	; (80132c0 <vPortFree+0xc0>)
 80132a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80132aa:	f7fe f8ab 	bl	8011404 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80132ae:	bf00      	nop
 80132b0:	3718      	adds	r7, #24
 80132b2:	46bd      	mov	sp, r7
 80132b4:	bd80      	pop	{r7, pc}
 80132b6:	bf00      	nop
 80132b8:	20011734 	.word	0x20011734
 80132bc:	20011724 	.word	0x20011724
 80132c0:	20011730 	.word	0x20011730

080132c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80132c4:	b480      	push	{r7}
 80132c6:	b085      	sub	sp, #20
 80132c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80132ca:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 80132ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80132d0:	4b27      	ldr	r3, [pc, #156]	; (8013370 <prvHeapInit+0xac>)
 80132d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	f003 0307 	and.w	r3, r3, #7
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d00c      	beq.n	80132f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	3307      	adds	r3, #7
 80132e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	f023 0307 	bic.w	r3, r3, #7
 80132ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80132ec:	68ba      	ldr	r2, [r7, #8]
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	1ad3      	subs	r3, r2, r3
 80132f2:	4a1f      	ldr	r2, [pc, #124]	; (8013370 <prvHeapInit+0xac>)
 80132f4:	4413      	add	r3, r2
 80132f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80132fc:	4a1d      	ldr	r2, [pc, #116]	; (8013374 <prvHeapInit+0xb0>)
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013302:	4b1c      	ldr	r3, [pc, #112]	; (8013374 <prvHeapInit+0xb0>)
 8013304:	2200      	movs	r2, #0
 8013306:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	68ba      	ldr	r2, [r7, #8]
 801330c:	4413      	add	r3, r2
 801330e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013310:	2208      	movs	r2, #8
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	1a9b      	subs	r3, r3, r2
 8013316:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	f023 0307 	bic.w	r3, r3, #7
 801331e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	4a15      	ldr	r2, [pc, #84]	; (8013378 <prvHeapInit+0xb4>)
 8013324:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013326:	4b14      	ldr	r3, [pc, #80]	; (8013378 <prvHeapInit+0xb4>)
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	2200      	movs	r2, #0
 801332c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801332e:	4b12      	ldr	r3, [pc, #72]	; (8013378 <prvHeapInit+0xb4>)
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	2200      	movs	r2, #0
 8013334:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801333a:	683b      	ldr	r3, [r7, #0]
 801333c:	68fa      	ldr	r2, [r7, #12]
 801333e:	1ad2      	subs	r2, r2, r3
 8013340:	683b      	ldr	r3, [r7, #0]
 8013342:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013344:	4b0c      	ldr	r3, [pc, #48]	; (8013378 <prvHeapInit+0xb4>)
 8013346:	681a      	ldr	r2, [r3, #0]
 8013348:	683b      	ldr	r3, [r7, #0]
 801334a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801334c:	683b      	ldr	r3, [r7, #0]
 801334e:	685b      	ldr	r3, [r3, #4]
 8013350:	4a0a      	ldr	r2, [pc, #40]	; (801337c <prvHeapInit+0xb8>)
 8013352:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013354:	683b      	ldr	r3, [r7, #0]
 8013356:	685b      	ldr	r3, [r3, #4]
 8013358:	4a09      	ldr	r2, [pc, #36]	; (8013380 <prvHeapInit+0xbc>)
 801335a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801335c:	4b09      	ldr	r3, [pc, #36]	; (8013384 <prvHeapInit+0xc0>)
 801335e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013362:	601a      	str	r2, [r3, #0]
}
 8013364:	bf00      	nop
 8013366:	3714      	adds	r7, #20
 8013368:	46bd      	mov	sp, r7
 801336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801336e:	4770      	bx	lr
 8013370:	20004f18 	.word	0x20004f18
 8013374:	20011718 	.word	0x20011718
 8013378:	20011720 	.word	0x20011720
 801337c:	20011728 	.word	0x20011728
 8013380:	20011724 	.word	0x20011724
 8013384:	20011734 	.word	0x20011734

08013388 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013388:	b480      	push	{r7}
 801338a:	b085      	sub	sp, #20
 801338c:	af00      	add	r7, sp, #0
 801338e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013390:	4b28      	ldr	r3, [pc, #160]	; (8013434 <prvInsertBlockIntoFreeList+0xac>)
 8013392:	60fb      	str	r3, [r7, #12]
 8013394:	e002      	b.n	801339c <prvInsertBlockIntoFreeList+0x14>
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	60fb      	str	r3, [r7, #12]
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	687a      	ldr	r2, [r7, #4]
 80133a2:	429a      	cmp	r2, r3
 80133a4:	d8f7      	bhi.n	8013396 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	685b      	ldr	r3, [r3, #4]
 80133ae:	68ba      	ldr	r2, [r7, #8]
 80133b0:	4413      	add	r3, r2
 80133b2:	687a      	ldr	r2, [r7, #4]
 80133b4:	429a      	cmp	r2, r3
 80133b6:	d108      	bne.n	80133ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	685a      	ldr	r2, [r3, #4]
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	685b      	ldr	r3, [r3, #4]
 80133c0:	441a      	add	r2, r3
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	685b      	ldr	r3, [r3, #4]
 80133d2:	68ba      	ldr	r2, [r7, #8]
 80133d4:	441a      	add	r2, r3
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	429a      	cmp	r2, r3
 80133dc:	d118      	bne.n	8013410 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	681a      	ldr	r2, [r3, #0]
 80133e2:	4b15      	ldr	r3, [pc, #84]	; (8013438 <prvInsertBlockIntoFreeList+0xb0>)
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	429a      	cmp	r2, r3
 80133e8:	d00d      	beq.n	8013406 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	685a      	ldr	r2, [r3, #4]
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	685b      	ldr	r3, [r3, #4]
 80133f4:	441a      	add	r2, r3
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	681a      	ldr	r2, [r3, #0]
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	601a      	str	r2, [r3, #0]
 8013404:	e008      	b.n	8013418 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013406:	4b0c      	ldr	r3, [pc, #48]	; (8013438 <prvInsertBlockIntoFreeList+0xb0>)
 8013408:	681a      	ldr	r2, [r3, #0]
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	601a      	str	r2, [r3, #0]
 801340e:	e003      	b.n	8013418 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	681a      	ldr	r2, [r3, #0]
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013418:	68fa      	ldr	r2, [r7, #12]
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	429a      	cmp	r2, r3
 801341e:	d002      	beq.n	8013426 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	687a      	ldr	r2, [r7, #4]
 8013424:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013426:	bf00      	nop
 8013428:	3714      	adds	r7, #20
 801342a:	46bd      	mov	sp, r7
 801342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013430:	4770      	bx	lr
 8013432:	bf00      	nop
 8013434:	20011718 	.word	0x20011718
 8013438:	20011720 	.word	0x20011720

0801343c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801343c:	b580      	push	{r7, lr}
 801343e:	b084      	sub	sp, #16
 8013440:	af00      	add	r7, sp, #0
 8013442:	6078      	str	r0, [r7, #4]
 8013444:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8013446:	f009 ff7f 	bl	801d348 <sys_timeouts_sleeptime>
 801344a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013452:	d10b      	bne.n	801346c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8013454:	4813      	ldr	r0, [pc, #76]	; (80134a4 <tcpip_timeouts_mbox_fetch+0x68>)
 8013456:	f00c fcd6 	bl	801fe06 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801345a:	2200      	movs	r2, #0
 801345c:	6839      	ldr	r1, [r7, #0]
 801345e:	6878      	ldr	r0, [r7, #4]
 8013460:	f00c fc5e 	bl	801fd20 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8013464:	480f      	ldr	r0, [pc, #60]	; (80134a4 <tcpip_timeouts_mbox_fetch+0x68>)
 8013466:	f00c fcbf 	bl	801fde8 <sys_mutex_lock>
    return;
 801346a:	e018      	b.n	801349e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d102      	bne.n	8013478 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8013472:	f009 ff2f 	bl	801d2d4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8013476:	e7e6      	b.n	8013446 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8013478:	480a      	ldr	r0, [pc, #40]	; (80134a4 <tcpip_timeouts_mbox_fetch+0x68>)
 801347a:	f00c fcc4 	bl	801fe06 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801347e:	68fa      	ldr	r2, [r7, #12]
 8013480:	6839      	ldr	r1, [r7, #0]
 8013482:	6878      	ldr	r0, [r7, #4]
 8013484:	f00c fc4c 	bl	801fd20 <sys_arch_mbox_fetch>
 8013488:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801348a:	4806      	ldr	r0, [pc, #24]	; (80134a4 <tcpip_timeouts_mbox_fetch+0x68>)
 801348c:	f00c fcac 	bl	801fde8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8013490:	68bb      	ldr	r3, [r7, #8]
 8013492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013496:	d102      	bne.n	801349e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8013498:	f009 ff1c 	bl	801d2d4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801349c:	e7d3      	b.n	8013446 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801349e:	3710      	adds	r7, #16
 80134a0:	46bd      	mov	sp, r7
 80134a2:	bd80      	pop	{r7, pc}
 80134a4:	20011744 	.word	0x20011744

080134a8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80134a8:	b580      	push	{r7, lr}
 80134aa:	b084      	sub	sp, #16
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80134b0:	4810      	ldr	r0, [pc, #64]	; (80134f4 <tcpip_thread+0x4c>)
 80134b2:	f00c fc99 	bl	801fde8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80134b6:	4b10      	ldr	r3, [pc, #64]	; (80134f8 <tcpip_thread+0x50>)
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d005      	beq.n	80134ca <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80134be:	4b0e      	ldr	r3, [pc, #56]	; (80134f8 <tcpip_thread+0x50>)
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	4a0e      	ldr	r2, [pc, #56]	; (80134fc <tcpip_thread+0x54>)
 80134c4:	6812      	ldr	r2, [r2, #0]
 80134c6:	4610      	mov	r0, r2
 80134c8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80134ca:	f107 030c 	add.w	r3, r7, #12
 80134ce:	4619      	mov	r1, r3
 80134d0:	480b      	ldr	r0, [pc, #44]	; (8013500 <tcpip_thread+0x58>)
 80134d2:	f7ff ffb3 	bl	801343c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d106      	bne.n	80134ea <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80134dc:	4b09      	ldr	r3, [pc, #36]	; (8013504 <tcpip_thread+0x5c>)
 80134de:	2291      	movs	r2, #145	; 0x91
 80134e0:	4909      	ldr	r1, [pc, #36]	; (8013508 <tcpip_thread+0x60>)
 80134e2:	480a      	ldr	r0, [pc, #40]	; (801350c <tcpip_thread+0x64>)
 80134e4:	f00c fd3e 	bl	801ff64 <printf>
      continue;
 80134e8:	e003      	b.n	80134f2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	4618      	mov	r0, r3
 80134ee:	f000 f80f 	bl	8013510 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80134f2:	e7ea      	b.n	80134ca <tcpip_thread+0x22>
 80134f4:	20011744 	.word	0x20011744
 80134f8:	20011738 	.word	0x20011738
 80134fc:	2001173c 	.word	0x2001173c
 8013500:	20011740 	.word	0x20011740
 8013504:	080263ec 	.word	0x080263ec
 8013508:	0802641c 	.word	0x0802641c
 801350c:	0802643c 	.word	0x0802643c

08013510 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8013510:	b580      	push	{r7, lr}
 8013512:	b082      	sub	sp, #8
 8013514:	af00      	add	r7, sp, #0
 8013516:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	781b      	ldrb	r3, [r3, #0]
 801351c:	2b02      	cmp	r3, #2
 801351e:	d026      	beq.n	801356e <tcpip_thread_handle_msg+0x5e>
 8013520:	2b02      	cmp	r3, #2
 8013522:	dc2b      	bgt.n	801357c <tcpip_thread_handle_msg+0x6c>
 8013524:	2b00      	cmp	r3, #0
 8013526:	d002      	beq.n	801352e <tcpip_thread_handle_msg+0x1e>
 8013528:	2b01      	cmp	r3, #1
 801352a:	d015      	beq.n	8013558 <tcpip_thread_handle_msg+0x48>
 801352c:	e026      	b.n	801357c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	68db      	ldr	r3, [r3, #12]
 8013532:	687a      	ldr	r2, [r7, #4]
 8013534:	6850      	ldr	r0, [r2, #4]
 8013536:	687a      	ldr	r2, [r7, #4]
 8013538:	6892      	ldr	r2, [r2, #8]
 801353a:	4611      	mov	r1, r2
 801353c:	4798      	blx	r3
 801353e:	4603      	mov	r3, r0
 8013540:	2b00      	cmp	r3, #0
 8013542:	d004      	beq.n	801354e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	685b      	ldr	r3, [r3, #4]
 8013548:	4618      	mov	r0, r3
 801354a:	f003 fa23 	bl	8016994 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801354e:	6879      	ldr	r1, [r7, #4]
 8013550:	2009      	movs	r0, #9
 8013552:	f002 fb5f 	bl	8015c14 <memp_free>
      break;
 8013556:	e018      	b.n	801358a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	685b      	ldr	r3, [r3, #4]
 801355c:	687a      	ldr	r2, [r7, #4]
 801355e:	6892      	ldr	r2, [r2, #8]
 8013560:	4610      	mov	r0, r2
 8013562:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8013564:	6879      	ldr	r1, [r7, #4]
 8013566:	2008      	movs	r0, #8
 8013568:	f002 fb54 	bl	8015c14 <memp_free>
      break;
 801356c:	e00d      	b.n	801358a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	685b      	ldr	r3, [r3, #4]
 8013572:	687a      	ldr	r2, [r7, #4]
 8013574:	6892      	ldr	r2, [r2, #8]
 8013576:	4610      	mov	r0, r2
 8013578:	4798      	blx	r3
      break;
 801357a:	e006      	b.n	801358a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801357c:	4b05      	ldr	r3, [pc, #20]	; (8013594 <tcpip_thread_handle_msg+0x84>)
 801357e:	22cf      	movs	r2, #207	; 0xcf
 8013580:	4905      	ldr	r1, [pc, #20]	; (8013598 <tcpip_thread_handle_msg+0x88>)
 8013582:	4806      	ldr	r0, [pc, #24]	; (801359c <tcpip_thread_handle_msg+0x8c>)
 8013584:	f00c fcee 	bl	801ff64 <printf>
      break;
 8013588:	bf00      	nop
  }
}
 801358a:	bf00      	nop
 801358c:	3708      	adds	r7, #8
 801358e:	46bd      	mov	sp, r7
 8013590:	bd80      	pop	{r7, pc}
 8013592:	bf00      	nop
 8013594:	080263ec 	.word	0x080263ec
 8013598:	0802641c 	.word	0x0802641c
 801359c:	0802643c 	.word	0x0802643c

080135a0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80135a0:	b580      	push	{r7, lr}
 80135a2:	b086      	sub	sp, #24
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	60f8      	str	r0, [r7, #12]
 80135a8:	60b9      	str	r1, [r7, #8]
 80135aa:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80135ac:	481a      	ldr	r0, [pc, #104]	; (8013618 <tcpip_inpkt+0x78>)
 80135ae:	f00c fbe8 	bl	801fd82 <sys_mbox_valid>
 80135b2:	4603      	mov	r3, r0
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d105      	bne.n	80135c4 <tcpip_inpkt+0x24>
 80135b8:	4b18      	ldr	r3, [pc, #96]	; (801361c <tcpip_inpkt+0x7c>)
 80135ba:	22fc      	movs	r2, #252	; 0xfc
 80135bc:	4918      	ldr	r1, [pc, #96]	; (8013620 <tcpip_inpkt+0x80>)
 80135be:	4819      	ldr	r0, [pc, #100]	; (8013624 <tcpip_inpkt+0x84>)
 80135c0:	f00c fcd0 	bl	801ff64 <printf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80135c4:	2009      	movs	r0, #9
 80135c6:	f002 fad3 	bl	8015b70 <memp_malloc>
 80135ca:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80135cc:	697b      	ldr	r3, [r7, #20]
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d102      	bne.n	80135d8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80135d2:	f04f 33ff 	mov.w	r3, #4294967295
 80135d6:	e01a      	b.n	801360e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80135d8:	697b      	ldr	r3, [r7, #20]
 80135da:	2200      	movs	r2, #0
 80135dc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80135de:	697b      	ldr	r3, [r7, #20]
 80135e0:	68fa      	ldr	r2, [r7, #12]
 80135e2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80135e4:	697b      	ldr	r3, [r7, #20]
 80135e6:	68ba      	ldr	r2, [r7, #8]
 80135e8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80135ea:	697b      	ldr	r3, [r7, #20]
 80135ec:	687a      	ldr	r2, [r7, #4]
 80135ee:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80135f0:	6979      	ldr	r1, [r7, #20]
 80135f2:	4809      	ldr	r0, [pc, #36]	; (8013618 <tcpip_inpkt+0x78>)
 80135f4:	f00c fb7a 	bl	801fcec <sys_mbox_trypost>
 80135f8:	4603      	mov	r3, r0
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d006      	beq.n	801360c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80135fe:	6979      	ldr	r1, [r7, #20]
 8013600:	2009      	movs	r0, #9
 8013602:	f002 fb07 	bl	8015c14 <memp_free>
    return ERR_MEM;
 8013606:	f04f 33ff 	mov.w	r3, #4294967295
 801360a:	e000      	b.n	801360e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801360c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801360e:	4618      	mov	r0, r3
 8013610:	3718      	adds	r7, #24
 8013612:	46bd      	mov	sp, r7
 8013614:	bd80      	pop	{r7, pc}
 8013616:	bf00      	nop
 8013618:	20011740 	.word	0x20011740
 801361c:	080263ec 	.word	0x080263ec
 8013620:	08026464 	.word	0x08026464
 8013624:	0802643c 	.word	0x0802643c

08013628 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8013628:	b580      	push	{r7, lr}
 801362a:	b082      	sub	sp, #8
 801362c:	af00      	add	r7, sp, #0
 801362e:	6078      	str	r0, [r7, #4]
 8013630:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8013632:	683b      	ldr	r3, [r7, #0]
 8013634:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013638:	f003 0318 	and.w	r3, r3, #24
 801363c:	2b00      	cmp	r3, #0
 801363e:	d006      	beq.n	801364e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8013640:	4a08      	ldr	r2, [pc, #32]	; (8013664 <tcpip_input+0x3c>)
 8013642:	6839      	ldr	r1, [r7, #0]
 8013644:	6878      	ldr	r0, [r7, #4]
 8013646:	f7ff ffab 	bl	80135a0 <tcpip_inpkt>
 801364a:	4603      	mov	r3, r0
 801364c:	e005      	b.n	801365a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801364e:	4a06      	ldr	r2, [pc, #24]	; (8013668 <tcpip_input+0x40>)
 8013650:	6839      	ldr	r1, [r7, #0]
 8013652:	6878      	ldr	r0, [r7, #4]
 8013654:	f7ff ffa4 	bl	80135a0 <tcpip_inpkt>
 8013658:	4603      	mov	r3, r0
}
 801365a:	4618      	mov	r0, r3
 801365c:	3708      	adds	r7, #8
 801365e:	46bd      	mov	sp, r7
 8013660:	bd80      	pop	{r7, pc}
 8013662:	bf00      	nop
 8013664:	0801fb0d 	.word	0x0801fb0d
 8013668:	0801ea15 	.word	0x0801ea15

0801366c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 801366c:	b580      	push	{r7, lr}
 801366e:	b084      	sub	sp, #16
 8013670:	af00      	add	r7, sp, #0
 8013672:	6078      	str	r0, [r7, #4]
 8013674:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8013676:	4819      	ldr	r0, [pc, #100]	; (80136dc <tcpip_try_callback+0x70>)
 8013678:	f00c fb83 	bl	801fd82 <sys_mbox_valid>
 801367c:	4603      	mov	r3, r0
 801367e:	2b00      	cmp	r3, #0
 8013680:	d106      	bne.n	8013690 <tcpip_try_callback+0x24>
 8013682:	4b17      	ldr	r3, [pc, #92]	; (80136e0 <tcpip_try_callback+0x74>)
 8013684:	f240 125d 	movw	r2, #349	; 0x15d
 8013688:	4916      	ldr	r1, [pc, #88]	; (80136e4 <tcpip_try_callback+0x78>)
 801368a:	4817      	ldr	r0, [pc, #92]	; (80136e8 <tcpip_try_callback+0x7c>)
 801368c:	f00c fc6a 	bl	801ff64 <printf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8013690:	2008      	movs	r0, #8
 8013692:	f002 fa6d 	bl	8015b70 <memp_malloc>
 8013696:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d102      	bne.n	80136a4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801369e:	f04f 33ff 	mov.w	r3, #4294967295
 80136a2:	e017      	b.n	80136d4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	2201      	movs	r2, #1
 80136a8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	687a      	ldr	r2, [r7, #4]
 80136ae:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	683a      	ldr	r2, [r7, #0]
 80136b4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80136b6:	68f9      	ldr	r1, [r7, #12]
 80136b8:	4808      	ldr	r0, [pc, #32]	; (80136dc <tcpip_try_callback+0x70>)
 80136ba:	f00c fb17 	bl	801fcec <sys_mbox_trypost>
 80136be:	4603      	mov	r3, r0
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d006      	beq.n	80136d2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80136c4:	68f9      	ldr	r1, [r7, #12]
 80136c6:	2008      	movs	r0, #8
 80136c8:	f002 faa4 	bl	8015c14 <memp_free>
    return ERR_MEM;
 80136cc:	f04f 33ff 	mov.w	r3, #4294967295
 80136d0:	e000      	b.n	80136d4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80136d2:	2300      	movs	r3, #0
}
 80136d4:	4618      	mov	r0, r3
 80136d6:	3710      	adds	r7, #16
 80136d8:	46bd      	mov	sp, r7
 80136da:	bd80      	pop	{r7, pc}
 80136dc:	20011740 	.word	0x20011740
 80136e0:	080263ec 	.word	0x080263ec
 80136e4:	08026464 	.word	0x08026464
 80136e8:	0802643c 	.word	0x0802643c

080136ec <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80136ec:	b580      	push	{r7, lr}
 80136ee:	b084      	sub	sp, #16
 80136f0:	af02      	add	r7, sp, #8
 80136f2:	6078      	str	r0, [r7, #4]
 80136f4:	6039      	str	r1, [r7, #0]
  lwip_init();
 80136f6:	f001 fd8b 	bl	8015210 <lwip_init>

  tcpip_init_done = initfunc;
 80136fa:	4a17      	ldr	r2, [pc, #92]	; (8013758 <tcpip_init+0x6c>)
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8013700:	4a16      	ldr	r2, [pc, #88]	; (801375c <tcpip_init+0x70>)
 8013702:	683b      	ldr	r3, [r7, #0]
 8013704:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8013706:	2106      	movs	r1, #6
 8013708:	4815      	ldr	r0, [pc, #84]	; (8013760 <tcpip_init+0x74>)
 801370a:	f00c fad5 	bl	801fcb8 <sys_mbox_new>
 801370e:	4603      	mov	r3, r0
 8013710:	2b00      	cmp	r3, #0
 8013712:	d006      	beq.n	8013722 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8013714:	4b13      	ldr	r3, [pc, #76]	; (8013764 <tcpip_init+0x78>)
 8013716:	f240 2261 	movw	r2, #609	; 0x261
 801371a:	4913      	ldr	r1, [pc, #76]	; (8013768 <tcpip_init+0x7c>)
 801371c:	4813      	ldr	r0, [pc, #76]	; (801376c <tcpip_init+0x80>)
 801371e:	f00c fc21 	bl	801ff64 <printf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8013722:	4813      	ldr	r0, [pc, #76]	; (8013770 <tcpip_init+0x84>)
 8013724:	f00c fb4a 	bl	801fdbc <sys_mutex_new>
 8013728:	4603      	mov	r3, r0
 801372a:	2b00      	cmp	r3, #0
 801372c:	d006      	beq.n	801373c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801372e:	4b0d      	ldr	r3, [pc, #52]	; (8013764 <tcpip_init+0x78>)
 8013730:	f240 2265 	movw	r2, #613	; 0x265
 8013734:	490f      	ldr	r1, [pc, #60]	; (8013774 <tcpip_init+0x88>)
 8013736:	480d      	ldr	r0, [pc, #52]	; (801376c <tcpip_init+0x80>)
 8013738:	f00c fc14 	bl	801ff64 <printf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801373c:	2318      	movs	r3, #24
 801373e:	9300      	str	r3, [sp, #0]
 8013740:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013744:	2200      	movs	r2, #0
 8013746:	490c      	ldr	r1, [pc, #48]	; (8013778 <tcpip_init+0x8c>)
 8013748:	480c      	ldr	r0, [pc, #48]	; (801377c <tcpip_init+0x90>)
 801374a:	f00c fb69 	bl	801fe20 <sys_thread_new>
}
 801374e:	bf00      	nop
 8013750:	3708      	adds	r7, #8
 8013752:	46bd      	mov	sp, r7
 8013754:	bd80      	pop	{r7, pc}
 8013756:	bf00      	nop
 8013758:	20011738 	.word	0x20011738
 801375c:	2001173c 	.word	0x2001173c
 8013760:	20011740 	.word	0x20011740
 8013764:	080263ec 	.word	0x080263ec
 8013768:	08026474 	.word	0x08026474
 801376c:	0802643c 	.word	0x0802643c
 8013770:	20011744 	.word	0x20011744
 8013774:	08026498 	.word	0x08026498
 8013778:	080134a9 	.word	0x080134a9
 801377c:	080264bc 	.word	0x080264bc

08013780 <msg_generate_packet_id>:
 * @param client MQTT client
 * @return New packet identifier, range 1 to 65535
 */
static u16_t
msg_generate_packet_id(mqtt_client_t *client)
{
 8013780:	b480      	push	{r7}
 8013782:	b083      	sub	sp, #12
 8013784:	af00      	add	r7, sp, #0
 8013786:	6078      	str	r0, [r7, #4]
  client->pkt_id_seq++;
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	88db      	ldrh	r3, [r3, #6]
 801378c:	3301      	adds	r3, #1
 801378e:	b29a      	uxth	r2, r3
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	80da      	strh	r2, [r3, #6]
  if (client->pkt_id_seq == 0) {
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	88db      	ldrh	r3, [r3, #6]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d105      	bne.n	80137a8 <msg_generate_packet_id+0x28>
    client->pkt_id_seq++;
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	88db      	ldrh	r3, [r3, #6]
 80137a0:	3301      	adds	r3, #1
 80137a2:	b29a      	uxth	r2, r3
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	80da      	strh	r2, [r3, #6]
  }
  return client->pkt_id_seq;
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	88db      	ldrh	r3, [r3, #6]
}
 80137ac:	4618      	mov	r0, r3
 80137ae:	370c      	adds	r7, #12
 80137b0:	46bd      	mov	sp, r7
 80137b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b6:	4770      	bx	lr

080137b8 <mqtt_ringbuf_put>:
/* Output ring buffer */

/** Add single item to ring buffer */
static void
mqtt_ringbuf_put(struct mqtt_ringbuf_t *rb, u8_t item)
{
 80137b8:	b480      	push	{r7}
 80137ba:	b083      	sub	sp, #12
 80137bc:	af00      	add	r7, sp, #0
 80137be:	6078      	str	r0, [r7, #4]
 80137c0:	460b      	mov	r3, r1
 80137c2:	70fb      	strb	r3, [r7, #3]
  rb->buf[rb->put] = item;
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	881b      	ldrh	r3, [r3, #0]
 80137c8:	461a      	mov	r2, r3
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	4413      	add	r3, r2
 80137ce:	78fa      	ldrb	r2, [r7, #3]
 80137d0:	711a      	strb	r2, [r3, #4]
  rb->put++;
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	881b      	ldrh	r3, [r3, #0]
 80137d6:	3301      	adds	r3, #1
 80137d8:	b29a      	uxth	r2, r3
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	801a      	strh	r2, [r3, #0]
  if (rb->put >= MQTT_OUTPUT_RINGBUF_SIZE) {
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	881b      	ldrh	r3, [r3, #0]
 80137e2:	2bff      	cmp	r3, #255	; 0xff
 80137e4:	d902      	bls.n	80137ec <mqtt_ringbuf_put+0x34>
    rb->put = 0;
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	2200      	movs	r2, #0
 80137ea:	801a      	strh	r2, [r3, #0]
  }
}
 80137ec:	bf00      	nop
 80137ee:	370c      	adds	r7, #12
 80137f0:	46bd      	mov	sp, r7
 80137f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f6:	4770      	bx	lr

080137f8 <mqtt_ringbuf_get_ptr>:

/** Return pointer to ring buffer get position */
static u8_t *
mqtt_ringbuf_get_ptr(struct mqtt_ringbuf_t *rb)
{
 80137f8:	b480      	push	{r7}
 80137fa:	b083      	sub	sp, #12
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	6078      	str	r0, [r7, #4]
  return &rb->buf[rb->get];
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	885b      	ldrh	r3, [r3, #2]
 8013804:	461a      	mov	r2, r3
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	4413      	add	r3, r2
 801380a:	3304      	adds	r3, #4
}
 801380c:	4618      	mov	r0, r3
 801380e:	370c      	adds	r7, #12
 8013810:	46bd      	mov	sp, r7
 8013812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013816:	4770      	bx	lr

08013818 <mqtt_ringbuf_advance_get_idx>:

static void
mqtt_ringbuf_advance_get_idx(struct mqtt_ringbuf_t *rb, u16_t len)
{
 8013818:	b580      	push	{r7, lr}
 801381a:	b082      	sub	sp, #8
 801381c:	af00      	add	r7, sp, #0
 801381e:	6078      	str	r0, [r7, #4]
 8013820:	460b      	mov	r3, r1
 8013822:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_ringbuf_advance_get_idx: len < MQTT_OUTPUT_RINGBUF_SIZE", len < MQTT_OUTPUT_RINGBUF_SIZE);
 8013824:	887b      	ldrh	r3, [r7, #2]
 8013826:	2bff      	cmp	r3, #255	; 0xff
 8013828:	d905      	bls.n	8013836 <mqtt_ringbuf_advance_get_idx+0x1e>
 801382a:	4b0e      	ldr	r3, [pc, #56]	; (8013864 <mqtt_ringbuf_advance_get_idx+0x4c>)
 801382c:	22cb      	movs	r2, #203	; 0xcb
 801382e:	490e      	ldr	r1, [pc, #56]	; (8013868 <mqtt_ringbuf_advance_get_idx+0x50>)
 8013830:	480e      	ldr	r0, [pc, #56]	; (801386c <mqtt_ringbuf_advance_get_idx+0x54>)
 8013832:	f00c fb97 	bl	801ff64 <printf>

  rb->get += len;
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	885a      	ldrh	r2, [r3, #2]
 801383a:	887b      	ldrh	r3, [r7, #2]
 801383c:	4413      	add	r3, r2
 801383e:	b29a      	uxth	r2, r3
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	805a      	strh	r2, [r3, #2]
  if (rb->get >= MQTT_OUTPUT_RINGBUF_SIZE) {
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	885b      	ldrh	r3, [r3, #2]
 8013848:	2bff      	cmp	r3, #255	; 0xff
 801384a:	d906      	bls.n	801385a <mqtt_ringbuf_advance_get_idx+0x42>
    rb->get = rb->get - MQTT_OUTPUT_RINGBUF_SIZE;
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	885b      	ldrh	r3, [r3, #2]
 8013850:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8013854:	b29a      	uxth	r2, r3
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	805a      	strh	r2, [r3, #2]
  }
}
 801385a:	bf00      	nop
 801385c:	3708      	adds	r7, #8
 801385e:	46bd      	mov	sp, r7
 8013860:	bd80      	pop	{r7, pc}
 8013862:	bf00      	nop
 8013864:	080264cc 	.word	0x080264cc
 8013868:	08026504 	.word	0x08026504
 801386c:	08026544 	.word	0x08026544

08013870 <mqtt_ringbuf_len>:

/** Return number of bytes in ring buffer */
static u16_t
mqtt_ringbuf_len(struct mqtt_ringbuf_t *rb)
{
 8013870:	b480      	push	{r7}
 8013872:	b085      	sub	sp, #20
 8013874:	af00      	add	r7, sp, #0
 8013876:	6078      	str	r0, [r7, #4]
  u32_t len = rb->put - rb->get;
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	881b      	ldrh	r3, [r3, #0]
 801387c:	461a      	mov	r2, r3
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	885b      	ldrh	r3, [r3, #2]
 8013882:	1ad3      	subs	r3, r2, r3
 8013884:	60fb      	str	r3, [r7, #12]
  if (len > 0xFFFF) {
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801388c:	d303      	bcc.n	8013896 <mqtt_ringbuf_len+0x26>
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013894:	60fb      	str	r3, [r7, #12]
  }
  return (u16_t)len;
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	b29b      	uxth	r3, r3
}
 801389a:	4618      	mov	r0, r3
 801389c:	3714      	adds	r7, #20
 801389e:	46bd      	mov	sp, r7
 80138a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a4:	4770      	bx	lr
	...

080138a8 <mqtt_output_send>:
 * @param rb Output ring buffer
 * @param tpcb TCP connection handle
 */
static void
mqtt_output_send(struct mqtt_ringbuf_t *rb, struct altcp_pcb *tpcb)
{
 80138a8:	b590      	push	{r4, r7, lr}
 80138aa:	b085      	sub	sp, #20
 80138ac:	af00      	add	r7, sp, #0
 80138ae:	6078      	str	r0, [r7, #4]
 80138b0:	6039      	str	r1, [r7, #0]
  err_t err;
  u8_t wrap = 0;
 80138b2:	2300      	movs	r3, #0
 80138b4:	73bb      	strb	r3, [r7, #14]
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 80138b6:	6878      	ldr	r0, [r7, #4]
 80138b8:	f7ff ffda 	bl	8013870 <mqtt_ringbuf_len>
 80138bc:	4603      	mov	r3, r0
 80138be:	461a      	mov	r2, r3
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	885b      	ldrh	r3, [r3, #2]
 80138c4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80138c8:	429a      	cmp	r2, r3
 80138ca:	da04      	bge.n	80138d6 <mqtt_output_send+0x2e>
 80138cc:	6878      	ldr	r0, [r7, #4]
 80138ce:	f7ff ffcf 	bl	8013870 <mqtt_ringbuf_len>
 80138d2:	4603      	mov	r3, r0
 80138d4:	e004      	b.n	80138e0 <mqtt_output_send+0x38>
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	885b      	ldrh	r3, [r3, #2]
 80138da:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80138de:	b29b      	uxth	r3, r3
 80138e0:	817b      	strh	r3, [r7, #10]
  u16_t send_len = altcp_sndbuf(tpcb);
 80138e2:	683b      	ldr	r3, [r7, #0]
 80138e4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80138e8:	81bb      	strh	r3, [r7, #12]
  LWIP_ASSERT("mqtt_output_send: tpcb != NULL", tpcb != NULL);
 80138ea:	683b      	ldr	r3, [r7, #0]
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d105      	bne.n	80138fc <mqtt_output_send+0x54>
 80138f0:	4b44      	ldr	r3, [pc, #272]	; (8013a04 <mqtt_output_send+0x15c>)
 80138f2:	22f0      	movs	r2, #240	; 0xf0
 80138f4:	4944      	ldr	r1, [pc, #272]	; (8013a08 <mqtt_output_send+0x160>)
 80138f6:	4845      	ldr	r0, [pc, #276]	; (8013a0c <mqtt_output_send+0x164>)
 80138f8:	f00c fb34 	bl	801ff64 <printf>

  if (send_len == 0 || ringbuf_lin_len == 0) {
 80138fc:	89bb      	ldrh	r3, [r7, #12]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d07c      	beq.n	80139fc <mqtt_output_send+0x154>
 8013902:	897b      	ldrh	r3, [r7, #10]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d079      	beq.n	80139fc <mqtt_output_send+0x154>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_output_send: tcp_sndbuf: %d bytes, ringbuf_linear_available: %d, get %d, put %d\n",
                                 send_len, ringbuf_lin_len, rb->get, rb->put));

  if (send_len > ringbuf_lin_len) {
 8013908:	89ba      	ldrh	r2, [r7, #12]
 801390a:	897b      	ldrh	r3, [r7, #10]
 801390c:	429a      	cmp	r2, r3
 801390e:	d90d      	bls.n	801392c <mqtt_output_send+0x84>
    /* Space in TCP output buffer is larger than available in ring buffer linear portion */
    send_len = ringbuf_lin_len;
 8013910:	897b      	ldrh	r3, [r7, #10]
 8013912:	81bb      	strh	r3, [r7, #12]
    /* Wrap around if more data in ring buffer after linear portion */
    wrap = (mqtt_ringbuf_len(rb) > ringbuf_lin_len);
 8013914:	6878      	ldr	r0, [r7, #4]
 8013916:	f7ff ffab 	bl	8013870 <mqtt_ringbuf_len>
 801391a:	4603      	mov	r3, r0
 801391c:	461a      	mov	r2, r3
 801391e:	897b      	ldrh	r3, [r7, #10]
 8013920:	4293      	cmp	r3, r2
 8013922:	bf34      	ite	cc
 8013924:	2301      	movcc	r3, #1
 8013926:	2300      	movcs	r3, #0
 8013928:	b2db      	uxtb	r3, r3
 801392a:	73bb      	strb	r3, [r7, #14]
  }
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 801392c:	6878      	ldr	r0, [r7, #4]
 801392e:	f7ff ff63 	bl	80137f8 <mqtt_ringbuf_get_ptr>
 8013932:	4601      	mov	r1, r0
 8013934:	7bbb      	ldrb	r3, [r7, #14]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d001      	beq.n	801393e <mqtt_output_send+0x96>
 801393a:	2303      	movs	r3, #3
 801393c:	e000      	b.n	8013940 <mqtt_output_send+0x98>
 801393e:	2301      	movs	r3, #1
 8013940:	89ba      	ldrh	r2, [r7, #12]
 8013942:	6838      	ldr	r0, [r7, #0]
 8013944:	f007 fe24 	bl	801b590 <tcp_write>
 8013948:	4603      	mov	r3, r0
 801394a:	73fb      	strb	r3, [r7, #15]
  if ((err == ERR_OK) && wrap) {
 801394c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013950:	2b00      	cmp	r3, #0
 8013952:	d146      	bne.n	80139e2 <mqtt_output_send+0x13a>
 8013954:	7bbb      	ldrb	r3, [r7, #14]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d043      	beq.n	80139e2 <mqtt_output_send+0x13a>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 801395a:	89bb      	ldrh	r3, [r7, #12]
 801395c:	4619      	mov	r1, r3
 801395e:	6878      	ldr	r0, [r7, #4]
 8013960:	f7ff ff5a 	bl	8013818 <mqtt_ringbuf_advance_get_idx>
    /* Use the lesser one of ring buffer linear length and TCP send buffer size */
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 8013964:	683b      	ldr	r3, [r7, #0]
 8013966:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801396a:	461c      	mov	r4, r3
 801396c:	6878      	ldr	r0, [r7, #4]
 801396e:	f7ff ff7f 	bl	8013870 <mqtt_ringbuf_len>
 8013972:	4603      	mov	r3, r0
 8013974:	461a      	mov	r2, r3
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	885b      	ldrh	r3, [r3, #2]
 801397a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 801397e:	429a      	cmp	r2, r3
 8013980:	da04      	bge.n	801398c <mqtt_output_send+0xe4>
 8013982:	6878      	ldr	r0, [r7, #4]
 8013984:	f7ff ff74 	bl	8013870 <mqtt_ringbuf_len>
 8013988:	4603      	mov	r3, r0
 801398a:	e003      	b.n	8013994 <mqtt_output_send+0xec>
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	885b      	ldrh	r3, [r3, #2]
 8013990:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8013994:	42a3      	cmp	r3, r4
 8013996:	dd03      	ble.n	80139a0 <mqtt_output_send+0xf8>
 8013998:	683b      	ldr	r3, [r7, #0]
 801399a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801399e:	e014      	b.n	80139ca <mqtt_output_send+0x122>
 80139a0:	6878      	ldr	r0, [r7, #4]
 80139a2:	f7ff ff65 	bl	8013870 <mqtt_ringbuf_len>
 80139a6:	4603      	mov	r3, r0
 80139a8:	461a      	mov	r2, r3
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	885b      	ldrh	r3, [r3, #2]
 80139ae:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80139b2:	429a      	cmp	r2, r3
 80139b4:	da04      	bge.n	80139c0 <mqtt_output_send+0x118>
 80139b6:	6878      	ldr	r0, [r7, #4]
 80139b8:	f7ff ff5a 	bl	8013870 <mqtt_ringbuf_len>
 80139bc:	4603      	mov	r3, r0
 80139be:	e004      	b.n	80139ca <mqtt_output_send+0x122>
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	885b      	ldrh	r3, [r3, #2]
 80139c4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80139c8:	b29b      	uxth	r3, r3
 80139ca:	81bb      	strh	r3, [r7, #12]
    err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 80139cc:	6878      	ldr	r0, [r7, #4]
 80139ce:	f7ff ff13 	bl	80137f8 <mqtt_ringbuf_get_ptr>
 80139d2:	4601      	mov	r1, r0
 80139d4:	89ba      	ldrh	r2, [r7, #12]
 80139d6:	2301      	movs	r3, #1
 80139d8:	6838      	ldr	r0, [r7, #0]
 80139da:	f007 fdd9 	bl	801b590 <tcp_write>
 80139de:	4603      	mov	r3, r0
 80139e0:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 80139e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d109      	bne.n	80139fe <mqtt_output_send+0x156>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 80139ea:	89bb      	ldrh	r3, [r7, #12]
 80139ec:	4619      	mov	r1, r3
 80139ee:	6878      	ldr	r0, [r7, #4]
 80139f0:	f7ff ff12 	bl	8013818 <mqtt_ringbuf_advance_get_idx>
    /* Flush */
    altcp_output(tpcb);
 80139f4:	6838      	ldr	r0, [r7, #0]
 80139f6:	f008 fbb5 	bl	801c164 <tcp_output>
 80139fa:	e000      	b.n	80139fe <mqtt_output_send+0x156>
    return;
 80139fc:	bf00      	nop
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_output_send: Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
  }
}
 80139fe:	3714      	adds	r7, #20
 8013a00:	46bd      	mov	sp, r7
 8013a02:	bd90      	pop	{r4, r7, pc}
 8013a04:	080264cc 	.word	0x080264cc
 8013a08:	0802656c 	.word	0x0802656c
 8013a0c:	08026544 	.word	0x08026544

08013a10 <mqtt_create_request>:
 * @param arg Parameter following callback
 * @return Request or NULL if failed to create
 */
static struct mqtt_request_t *
mqtt_create_request(struct mqtt_request_t *r_objs, size_t r_objs_len, u16_t pkt_id, mqtt_request_cb_t cb, void *arg)
{
 8013a10:	b580      	push	{r7, lr}
 8013a12:	b086      	sub	sp, #24
 8013a14:	af00      	add	r7, sp, #0
 8013a16:	60f8      	str	r0, [r7, #12]
 8013a18:	60b9      	str	r1, [r7, #8]
 8013a1a:	603b      	str	r3, [r7, #0]
 8013a1c:	4613      	mov	r3, r2
 8013a1e:	80fb      	strh	r3, [r7, #6]
  struct mqtt_request_t *r = NULL;
 8013a20:	2300      	movs	r3, #0
 8013a22:	617b      	str	r3, [r7, #20]
  u8_t n;
  LWIP_ASSERT("mqtt_create_request: r_objs != NULL", r_objs != NULL);
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d106      	bne.n	8013a38 <mqtt_create_request+0x28>
 8013a2a:	4b19      	ldr	r3, [pc, #100]	; (8013a90 <mqtt_create_request+0x80>)
 8013a2c:	f240 1223 	movw	r2, #291	; 0x123
 8013a30:	4918      	ldr	r1, [pc, #96]	; (8013a94 <mqtt_create_request+0x84>)
 8013a32:	4819      	ldr	r0, [pc, #100]	; (8013a98 <mqtt_create_request+0x88>)
 8013a34:	f00c fa96 	bl	801ff64 <printf>
  for (n = 0; n < r_objs_len; n++) {
 8013a38:	2300      	movs	r3, #0
 8013a3a:	74fb      	strb	r3, [r7, #19]
 8013a3c:	e01f      	b.n	8013a7e <mqtt_create_request+0x6e>
    /* Item point to itself if not in use */
    if (r_objs[n].next == &r_objs[n]) {
 8013a3e:	7cfb      	ldrb	r3, [r7, #19]
 8013a40:	011b      	lsls	r3, r3, #4
 8013a42:	68fa      	ldr	r2, [r7, #12]
 8013a44:	4413      	add	r3, r2
 8013a46:	681a      	ldr	r2, [r3, #0]
 8013a48:	7cfb      	ldrb	r3, [r7, #19]
 8013a4a:	011b      	lsls	r3, r3, #4
 8013a4c:	68f9      	ldr	r1, [r7, #12]
 8013a4e:	440b      	add	r3, r1
 8013a50:	429a      	cmp	r2, r3
 8013a52:	d111      	bne.n	8013a78 <mqtt_create_request+0x68>
      r = &r_objs[n];
 8013a54:	7cfb      	ldrb	r3, [r7, #19]
 8013a56:	011b      	lsls	r3, r3, #4
 8013a58:	68fa      	ldr	r2, [r7, #12]
 8013a5a:	4413      	add	r3, r2
 8013a5c:	617b      	str	r3, [r7, #20]
      r->next = NULL;
 8013a5e:	697b      	ldr	r3, [r7, #20]
 8013a60:	2200      	movs	r2, #0
 8013a62:	601a      	str	r2, [r3, #0]
      r->cb = cb;
 8013a64:	697b      	ldr	r3, [r7, #20]
 8013a66:	683a      	ldr	r2, [r7, #0]
 8013a68:	605a      	str	r2, [r3, #4]
      r->arg = arg;
 8013a6a:	697b      	ldr	r3, [r7, #20]
 8013a6c:	6a3a      	ldr	r2, [r7, #32]
 8013a6e:	609a      	str	r2, [r3, #8]
      r->pkt_id = pkt_id;
 8013a70:	697b      	ldr	r3, [r7, #20]
 8013a72:	88fa      	ldrh	r2, [r7, #6]
 8013a74:	819a      	strh	r2, [r3, #12]
      break;
 8013a76:	e006      	b.n	8013a86 <mqtt_create_request+0x76>
  for (n = 0; n < r_objs_len; n++) {
 8013a78:	7cfb      	ldrb	r3, [r7, #19]
 8013a7a:	3301      	adds	r3, #1
 8013a7c:	74fb      	strb	r3, [r7, #19]
 8013a7e:	7cfb      	ldrb	r3, [r7, #19]
 8013a80:	68ba      	ldr	r2, [r7, #8]
 8013a82:	429a      	cmp	r2, r3
 8013a84:	d8db      	bhi.n	8013a3e <mqtt_create_request+0x2e>
    }
  }
  return r;
 8013a86:	697b      	ldr	r3, [r7, #20]
}
 8013a88:	4618      	mov	r0, r3
 8013a8a:	3718      	adds	r7, #24
 8013a8c:	46bd      	mov	sp, r7
 8013a8e:	bd80      	pop	{r7, pc}
 8013a90:	080264cc 	.word	0x080264cc
 8013a94:	0802658c 	.word	0x0802658c
 8013a98:	08026544 	.word	0x08026544

08013a9c <mqtt_append_request>:
 * @param tail Pointer to request queue tail pointer
 * @param r Request to append
 */
static void
mqtt_append_request(struct mqtt_request_t **tail, struct mqtt_request_t *r)
{
 8013a9c:	b580      	push	{r7, lr}
 8013a9e:	b086      	sub	sp, #24
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	6078      	str	r0, [r7, #4]
 8013aa4:	6039      	str	r1, [r7, #0]
  struct mqtt_request_t *head = NULL;
 8013aa6:	2300      	movs	r3, #0
 8013aa8:	617b      	str	r3, [r7, #20]
  s16_t time_before = 0;
 8013aaa:	2300      	movs	r3, #0
 8013aac:	827b      	strh	r3, [r7, #18]
  struct mqtt_request_t *iter;

  LWIP_ASSERT("mqtt_append_request: tail != NULL", tail != NULL);
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d106      	bne.n	8013ac2 <mqtt_append_request+0x26>
 8013ab4:	4b1b      	ldr	r3, [pc, #108]	; (8013b24 <mqtt_append_request+0x88>)
 8013ab6:	f240 123f 	movw	r2, #319	; 0x13f
 8013aba:	491b      	ldr	r1, [pc, #108]	; (8013b28 <mqtt_append_request+0x8c>)
 8013abc:	481b      	ldr	r0, [pc, #108]	; (8013b2c <mqtt_append_request+0x90>)
 8013abe:	f00c fa51 	bl	801ff64 <printf>

  /* Iterate trough queue to find head, and count total timeout time */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	60fb      	str	r3, [r7, #12]
 8013ac8:	e00a      	b.n	8013ae0 <mqtt_append_request+0x44>
    time_before += iter->timeout_diff;
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	89da      	ldrh	r2, [r3, #14]
 8013ace:	8a7b      	ldrh	r3, [r7, #18]
 8013ad0:	4413      	add	r3, r2
 8013ad2:	b29b      	uxth	r3, r3
 8013ad4:	827b      	strh	r3, [r7, #18]
    head = iter;
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	617b      	str	r3, [r7, #20]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	60fb      	str	r3, [r7, #12]
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d1f1      	bne.n	8013aca <mqtt_append_request+0x2e>
  }

  LWIP_ASSERT("mqtt_append_request: time_before <= MQTT_REQ_TIMEOUT", time_before <= MQTT_REQ_TIMEOUT);
 8013ae6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013aea:	2b1e      	cmp	r3, #30
 8013aec:	dd06      	ble.n	8013afc <mqtt_append_request+0x60>
 8013aee:	4b0d      	ldr	r3, [pc, #52]	; (8013b24 <mqtt_append_request+0x88>)
 8013af0:	f240 1247 	movw	r2, #327	; 0x147
 8013af4:	490e      	ldr	r1, [pc, #56]	; (8013b30 <mqtt_append_request+0x94>)
 8013af6:	480d      	ldr	r0, [pc, #52]	; (8013b2c <mqtt_append_request+0x90>)
 8013af8:	f00c fa34 	bl	801ff64 <printf>
  r->timeout_diff = MQTT_REQ_TIMEOUT - time_before;
 8013afc:	8a7b      	ldrh	r3, [r7, #18]
 8013afe:	f1c3 031e 	rsb	r3, r3, #30
 8013b02:	b29a      	uxth	r2, r3
 8013b04:	683b      	ldr	r3, [r7, #0]
 8013b06:	81da      	strh	r2, [r3, #14]
  if (head == NULL) {
 8013b08:	697b      	ldr	r3, [r7, #20]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d103      	bne.n	8013b16 <mqtt_append_request+0x7a>
    *tail = r;
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	683a      	ldr	r2, [r7, #0]
 8013b12:	601a      	str	r2, [r3, #0]
  } else {
    head->next = r;
  }
}
 8013b14:	e002      	b.n	8013b1c <mqtt_append_request+0x80>
    head->next = r;
 8013b16:	697b      	ldr	r3, [r7, #20]
 8013b18:	683a      	ldr	r2, [r7, #0]
 8013b1a:	601a      	str	r2, [r3, #0]
}
 8013b1c:	bf00      	nop
 8013b1e:	3718      	adds	r7, #24
 8013b20:	46bd      	mov	sp, r7
 8013b22:	bd80      	pop	{r7, pc}
 8013b24:	080264cc 	.word	0x080264cc
 8013b28:	080265b0 	.word	0x080265b0
 8013b2c:	08026544 	.word	0x08026544
 8013b30:	080265d4 	.word	0x080265d4

08013b34 <mqtt_delete_request>:
 * Delete request item
 * @param r Request item to delete
 */
static void
mqtt_delete_request(struct mqtt_request_t *r)
{
 8013b34:	b480      	push	{r7}
 8013b36:	b083      	sub	sp, #12
 8013b38:	af00      	add	r7, sp, #0
 8013b3a:	6078      	str	r0, [r7, #4]
  if (r != NULL) {
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d002      	beq.n	8013b48 <mqtt_delete_request+0x14>
    r->next = r;
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	687a      	ldr	r2, [r7, #4]
 8013b46:	601a      	str	r2, [r3, #0]
  }
}
 8013b48:	bf00      	nop
 8013b4a:	370c      	adds	r7, #12
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b52:	4770      	bx	lr

08013b54 <mqtt_take_request>:
 * @param pkt_id Packet identifier of request to take
 * @return Request item if found, NULL if not
 */
static struct mqtt_request_t *
mqtt_take_request(struct mqtt_request_t **tail, u16_t pkt_id)
{
 8013b54:	b580      	push	{r7, lr}
 8013b56:	b084      	sub	sp, #16
 8013b58:	af00      	add	r7, sp, #0
 8013b5a:	6078      	str	r0, [r7, #4]
 8013b5c:	460b      	mov	r3, r1
 8013b5e:	807b      	strh	r3, [r7, #2]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 8013b60:	2300      	movs	r3, #0
 8013b62:	60fb      	str	r3, [r7, #12]
 8013b64:	2300      	movs	r3, #0
 8013b66:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d106      	bne.n	8013b7c <mqtt_take_request+0x28>
 8013b6e:	4b1f      	ldr	r3, [pc, #124]	; (8013bec <mqtt_take_request+0x98>)
 8013b70:	f240 1267 	movw	r2, #359	; 0x167
 8013b74:	491e      	ldr	r1, [pc, #120]	; (8013bf0 <mqtt_take_request+0x9c>)
 8013b76:	481f      	ldr	r0, [pc, #124]	; (8013bf4 <mqtt_take_request+0xa0>)
 8013b78:	f00c f9f4 	bl	801ff64 <printf>
  /* Search all request for pkt_id */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	60fb      	str	r3, [r7, #12]
 8013b82:	e009      	b.n	8013b98 <mqtt_take_request+0x44>
    if (iter->pkt_id == pkt_id) {
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	899b      	ldrh	r3, [r3, #12]
 8013b88:	887a      	ldrh	r2, [r7, #2]
 8013b8a:	429a      	cmp	r2, r3
 8013b8c:	d008      	beq.n	8013ba0 <mqtt_take_request+0x4c>
      break;
    }
    prev = iter;
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	60bb      	str	r3, [r7, #8]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	60fb      	str	r3, [r7, #12]
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d1f2      	bne.n	8013b84 <mqtt_take_request+0x30>
 8013b9e:	e000      	b.n	8013ba2 <mqtt_take_request+0x4e>
      break;
 8013ba0:	bf00      	nop
  }

  /* If request was found */
  if (iter != NULL) {
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d01c      	beq.n	8013be2 <mqtt_take_request+0x8e>
    /* unchain */
    if (prev == NULL) {
 8013ba8:	68bb      	ldr	r3, [r7, #8]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d104      	bne.n	8013bb8 <mqtt_take_request+0x64>
      *tail = iter->next;
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	681a      	ldr	r2, [r3, #0]
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	601a      	str	r2, [r3, #0]
 8013bb6:	e003      	b.n	8013bc0 <mqtt_take_request+0x6c>
    } else {
      prev->next = iter->next;
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	681a      	ldr	r2, [r3, #0]
 8013bbc:	68bb      	ldr	r3, [r7, #8]
 8013bbe:	601a      	str	r2, [r3, #0]
    }
    /* If exists, add remaining timeout time for the request to next */
    if (iter->next != NULL) {
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d009      	beq.n	8013bdc <mqtt_take_request+0x88>
      iter->next->timeout_diff += iter->timeout_diff;
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	89d9      	ldrh	r1, [r3, #14]
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	89da      	ldrh	r2, [r3, #14]
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	440a      	add	r2, r1
 8013bd8:	b292      	uxth	r2, r2
 8013bda:	81da      	strh	r2, [r3, #14]
    }
    iter->next = NULL;
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	2200      	movs	r2, #0
 8013be0:	601a      	str	r2, [r3, #0]
  }
  return iter;
 8013be2:	68fb      	ldr	r3, [r7, #12]
}
 8013be4:	4618      	mov	r0, r3
 8013be6:	3710      	adds	r7, #16
 8013be8:	46bd      	mov	sp, r7
 8013bea:	bd80      	pop	{r7, pc}
 8013bec:	080264cc 	.word	0x080264cc
 8013bf0:	0802660c 	.word	0x0802660c
 8013bf4:	08026544 	.word	0x08026544

08013bf8 <mqtt_request_time_elapsed>:
 * @param tail Pointer to request queue tail pointer
 * @param t Time since last call in seconds
 */
static void
mqtt_request_time_elapsed(struct mqtt_request_t **tail, u8_t t)
{
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b084      	sub	sp, #16
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	6078      	str	r0, [r7, #4]
 8013c00:	460b      	mov	r3, r1
 8013c02:	70fb      	strb	r3, [r7, #3]
  struct mqtt_request_t *r;
  LWIP_ASSERT("mqtt_request_time_elapsed: tail != NULL", tail != NULL);
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d106      	bne.n	8013c18 <mqtt_request_time_elapsed+0x20>
 8013c0a:	4b21      	ldr	r3, [pc, #132]	; (8013c90 <mqtt_request_time_elapsed+0x98>)
 8013c0c:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 8013c10:	4920      	ldr	r1, [pc, #128]	; (8013c94 <mqtt_request_time_elapsed+0x9c>)
 8013c12:	4821      	ldr	r0, [pc, #132]	; (8013c98 <mqtt_request_time_elapsed+0xa0>)
 8013c14:	f00c f9a6 	bl	801ff64 <printf>
  r = *tail;
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	60fb      	str	r3, [r7, #12]
  while (t > 0 && r != NULL) {
 8013c1e:	e02c      	b.n	8013c7a <mqtt_request_time_elapsed+0x82>
    if (t >= r->timeout_diff) {
 8013c20:	78fb      	ldrb	r3, [r7, #3]
 8013c22:	b29a      	uxth	r2, r3
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	89db      	ldrh	r3, [r3, #14]
 8013c28:	429a      	cmp	r2, r3
 8013c2a:	d31c      	bcc.n	8013c66 <mqtt_request_time_elapsed+0x6e>
      t -= (u8_t)r->timeout_diff;
 8013c2c:	68fb      	ldr	r3, [r7, #12]
 8013c2e:	89db      	ldrh	r3, [r3, #14]
 8013c30:	b2db      	uxtb	r3, r3
 8013c32:	78fa      	ldrb	r2, [r7, #3]
 8013c34:	1ad3      	subs	r3, r2, r3
 8013c36:	70fb      	strb	r3, [r7, #3]
      /* Unchain */
      *tail = r->next;
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	681a      	ldr	r2, [r3, #0]
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	601a      	str	r2, [r3, #0]
      /* Notify upper layer about timeout */
      if (r->cb != NULL) {
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	685b      	ldr	r3, [r3, #4]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d007      	beq.n	8013c58 <mqtt_request_time_elapsed+0x60>
        r->cb(r->arg, ERR_TIMEOUT);
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	685b      	ldr	r3, [r3, #4]
 8013c4c:	68fa      	ldr	r2, [r7, #12]
 8013c4e:	6892      	ldr	r2, [r2, #8]
 8013c50:	f06f 0102 	mvn.w	r1, #2
 8013c54:	4610      	mov	r0, r2
 8013c56:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 8013c58:	68f8      	ldr	r0, [r7, #12]
 8013c5a:	f7ff ff6b 	bl	8013b34 <mqtt_delete_request>
      /* Tail might be be modified in callback, so re-read it in every iteration */
      r = *(struct mqtt_request_t *const volatile *)tail;
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	60fb      	str	r3, [r7, #12]
 8013c64:	e009      	b.n	8013c7a <mqtt_request_time_elapsed+0x82>
    } else {
      r->timeout_diff -= t;
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	89da      	ldrh	r2, [r3, #14]
 8013c6a:	78fb      	ldrb	r3, [r7, #3]
 8013c6c:	b29b      	uxth	r3, r3
 8013c6e:	1ad3      	subs	r3, r2, r3
 8013c70:	b29a      	uxth	r2, r3
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	81da      	strh	r2, [r3, #14]
      t = 0;
 8013c76:	2300      	movs	r3, #0
 8013c78:	70fb      	strb	r3, [r7, #3]
  while (t > 0 && r != NULL) {
 8013c7a:	78fb      	ldrb	r3, [r7, #3]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d002      	beq.n	8013c86 <mqtt_request_time_elapsed+0x8e>
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d1cc      	bne.n	8013c20 <mqtt_request_time_elapsed+0x28>
    }
  }
}
 8013c86:	bf00      	nop
 8013c88:	3710      	adds	r7, #16
 8013c8a:	46bd      	mov	sp, r7
 8013c8c:	bd80      	pop	{r7, pc}
 8013c8e:	bf00      	nop
 8013c90:	080264cc 	.word	0x080264cc
 8013c94:	0802662c 	.word	0x0802662c
 8013c98:	08026544 	.word	0x08026544

08013c9c <mqtt_clear_requests>:
 * Free all request items
 * @param tail Pointer to request queue tail pointer
 */
static void
mqtt_clear_requests(struct mqtt_request_t **tail)
{
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	b084      	sub	sp, #16
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	6078      	str	r0, [r7, #4]
  struct mqtt_request_t *iter, *next;
  LWIP_ASSERT("mqtt_clear_requests: tail != NULL", tail != NULL);
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d106      	bne.n	8013cb8 <mqtt_clear_requests+0x1c>
 8013caa:	4b0e      	ldr	r3, [pc, #56]	; (8013ce4 <mqtt_clear_requests+0x48>)
 8013cac:	f240 12a7 	movw	r2, #423	; 0x1a7
 8013cb0:	490d      	ldr	r1, [pc, #52]	; (8013ce8 <mqtt_clear_requests+0x4c>)
 8013cb2:	480e      	ldr	r0, [pc, #56]	; (8013cec <mqtt_clear_requests+0x50>)
 8013cb4:	f00c f956 	bl	801ff64 <printf>
  for (iter = *tail; iter != NULL; iter = next) {
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	60fb      	str	r3, [r7, #12]
 8013cbe:	e007      	b.n	8013cd0 <mqtt_clear_requests+0x34>
    next = iter->next;
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	60bb      	str	r3, [r7, #8]
    mqtt_delete_request(iter);
 8013cc6:	68f8      	ldr	r0, [r7, #12]
 8013cc8:	f7ff ff34 	bl	8013b34 <mqtt_delete_request>
  for (iter = *tail; iter != NULL; iter = next) {
 8013ccc:	68bb      	ldr	r3, [r7, #8]
 8013cce:	60fb      	str	r3, [r7, #12]
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d1f4      	bne.n	8013cc0 <mqtt_clear_requests+0x24>
  }
  *tail = NULL;
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	2200      	movs	r2, #0
 8013cda:	601a      	str	r2, [r3, #0]
}
 8013cdc:	bf00      	nop
 8013cde:	3710      	adds	r7, #16
 8013ce0:	46bd      	mov	sp, r7
 8013ce2:	bd80      	pop	{r7, pc}
 8013ce4:	080264cc 	.word	0x080264cc
 8013ce8:	08026654 	.word	0x08026654
 8013cec:	08026544 	.word	0x08026544

08013cf0 <mqtt_init_requests>:
 * @param r_objs Pointer to request objects
 * @param r_objs_len Number of array entries
 */
static void
mqtt_init_requests(struct mqtt_request_t *r_objs, size_t r_objs_len)
{
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	b084      	sub	sp, #16
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	6078      	str	r0, [r7, #4]
 8013cf8:	6039      	str	r1, [r7, #0]
  u8_t n;
  LWIP_ASSERT("mqtt_init_requests: r_objs != NULL", r_objs != NULL);
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d106      	bne.n	8013d0e <mqtt_init_requests+0x1e>
 8013d00:	4b0f      	ldr	r3, [pc, #60]	; (8013d40 <mqtt_init_requests+0x50>)
 8013d02:	f240 12b7 	movw	r2, #439	; 0x1b7
 8013d06:	490f      	ldr	r1, [pc, #60]	; (8013d44 <mqtt_init_requests+0x54>)
 8013d08:	480f      	ldr	r0, [pc, #60]	; (8013d48 <mqtt_init_requests+0x58>)
 8013d0a:	f00c f92b 	bl	801ff64 <printf>
  for (n = 0; n < r_objs_len; n++) {
 8013d0e:	2300      	movs	r3, #0
 8013d10:	73fb      	strb	r3, [r7, #15]
 8013d12:	e00b      	b.n	8013d2c <mqtt_init_requests+0x3c>
    /* Item pointing to itself indicates unused */
    r_objs[n].next = &r_objs[n];
 8013d14:	7bfb      	ldrb	r3, [r7, #15]
 8013d16:	011a      	lsls	r2, r3, #4
 8013d18:	7bfb      	ldrb	r3, [r7, #15]
 8013d1a:	011b      	lsls	r3, r3, #4
 8013d1c:	6879      	ldr	r1, [r7, #4]
 8013d1e:	440b      	add	r3, r1
 8013d20:	6879      	ldr	r1, [r7, #4]
 8013d22:	440a      	add	r2, r1
 8013d24:	601a      	str	r2, [r3, #0]
  for (n = 0; n < r_objs_len; n++) {
 8013d26:	7bfb      	ldrb	r3, [r7, #15]
 8013d28:	3301      	adds	r3, #1
 8013d2a:	73fb      	strb	r3, [r7, #15]
 8013d2c:	7bfb      	ldrb	r3, [r7, #15]
 8013d2e:	683a      	ldr	r2, [r7, #0]
 8013d30:	429a      	cmp	r2, r3
 8013d32:	d8ef      	bhi.n	8013d14 <mqtt_init_requests+0x24>
  }
}
 8013d34:	bf00      	nop
 8013d36:	bf00      	nop
 8013d38:	3710      	adds	r7, #16
 8013d3a:	46bd      	mov	sp, r7
 8013d3c:	bd80      	pop	{r7, pc}
 8013d3e:	bf00      	nop
 8013d40:	080264cc 	.word	0x080264cc
 8013d44:	08026678 	.word	0x08026678
 8013d48:	08026544 	.word	0x08026544

08013d4c <mqtt_output_append_u8>:
/* Output message build helpers */


static void
mqtt_output_append_u8(struct mqtt_ringbuf_t *rb, u8_t value)
{
 8013d4c:	b580      	push	{r7, lr}
 8013d4e:	b082      	sub	sp, #8
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	6078      	str	r0, [r7, #4]
 8013d54:	460b      	mov	r3, r1
 8013d56:	70fb      	strb	r3, [r7, #3]
  mqtt_ringbuf_put(rb, value);
 8013d58:	78fb      	ldrb	r3, [r7, #3]
 8013d5a:	4619      	mov	r1, r3
 8013d5c:	6878      	ldr	r0, [r7, #4]
 8013d5e:	f7ff fd2b 	bl	80137b8 <mqtt_ringbuf_put>
}
 8013d62:	bf00      	nop
 8013d64:	3708      	adds	r7, #8
 8013d66:	46bd      	mov	sp, r7
 8013d68:	bd80      	pop	{r7, pc}

08013d6a <mqtt_output_append_u16>:

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
 8013d6a:	b580      	push	{r7, lr}
 8013d6c:	b082      	sub	sp, #8
 8013d6e:	af00      	add	r7, sp, #0
 8013d70:	6078      	str	r0, [r7, #4]
 8013d72:	460b      	mov	r3, r1
 8013d74:	807b      	strh	r3, [r7, #2]
  mqtt_ringbuf_put(rb, value >> 8);
 8013d76:	887b      	ldrh	r3, [r7, #2]
 8013d78:	0a1b      	lsrs	r3, r3, #8
 8013d7a:	b29b      	uxth	r3, r3
 8013d7c:	b2db      	uxtb	r3, r3
 8013d7e:	4619      	mov	r1, r3
 8013d80:	6878      	ldr	r0, [r7, #4]
 8013d82:	f7ff fd19 	bl	80137b8 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, value & 0xff);
 8013d86:	887b      	ldrh	r3, [r7, #2]
 8013d88:	b2db      	uxtb	r3, r3
 8013d8a:	4619      	mov	r1, r3
 8013d8c:	6878      	ldr	r0, [r7, #4]
 8013d8e:	f7ff fd13 	bl	80137b8 <mqtt_ringbuf_put>
}
 8013d92:	bf00      	nop
 8013d94:	3708      	adds	r7, #8
 8013d96:	46bd      	mov	sp, r7
 8013d98:	bd80      	pop	{r7, pc}

08013d9a <mqtt_output_append_buf>:

static void
mqtt_output_append_buf(struct mqtt_ringbuf_t *rb, const void *data, u16_t length)
{
 8013d9a:	b580      	push	{r7, lr}
 8013d9c:	b086      	sub	sp, #24
 8013d9e:	af00      	add	r7, sp, #0
 8013da0:	60f8      	str	r0, [r7, #12]
 8013da2:	60b9      	str	r1, [r7, #8]
 8013da4:	4613      	mov	r3, r2
 8013da6:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  for (n = 0; n < length; n++) {
 8013da8:	2300      	movs	r3, #0
 8013daa:	82fb      	strh	r3, [r7, #22]
 8013dac:	e00a      	b.n	8013dc4 <mqtt_output_append_buf+0x2a>
    mqtt_ringbuf_put(rb, ((const u8_t *)data)[n]);
 8013dae:	8afb      	ldrh	r3, [r7, #22]
 8013db0:	68ba      	ldr	r2, [r7, #8]
 8013db2:	4413      	add	r3, r2
 8013db4:	781b      	ldrb	r3, [r3, #0]
 8013db6:	4619      	mov	r1, r3
 8013db8:	68f8      	ldr	r0, [r7, #12]
 8013dba:	f7ff fcfd 	bl	80137b8 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8013dbe:	8afb      	ldrh	r3, [r7, #22]
 8013dc0:	3301      	adds	r3, #1
 8013dc2:	82fb      	strh	r3, [r7, #22]
 8013dc4:	8afa      	ldrh	r2, [r7, #22]
 8013dc6:	88fb      	ldrh	r3, [r7, #6]
 8013dc8:	429a      	cmp	r2, r3
 8013dca:	d3f0      	bcc.n	8013dae <mqtt_output_append_buf+0x14>
  }
}
 8013dcc:	bf00      	nop
 8013dce:	bf00      	nop
 8013dd0:	3718      	adds	r7, #24
 8013dd2:	46bd      	mov	sp, r7
 8013dd4:	bd80      	pop	{r7, pc}

08013dd6 <mqtt_output_append_string>:

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
 8013dd6:	b580      	push	{r7, lr}
 8013dd8:	b086      	sub	sp, #24
 8013dda:	af00      	add	r7, sp, #0
 8013ddc:	60f8      	str	r0, [r7, #12]
 8013dde:	60b9      	str	r1, [r7, #8]
 8013de0:	4613      	mov	r3, r2
 8013de2:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 8013de4:	88fb      	ldrh	r3, [r7, #6]
 8013de6:	0a1b      	lsrs	r3, r3, #8
 8013de8:	b29b      	uxth	r3, r3
 8013dea:	b2db      	uxtb	r3, r3
 8013dec:	4619      	mov	r1, r3
 8013dee:	68f8      	ldr	r0, [r7, #12]
 8013df0:	f7ff fce2 	bl	80137b8 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, length & 0xff);
 8013df4:	88fb      	ldrh	r3, [r7, #6]
 8013df6:	b2db      	uxtb	r3, r3
 8013df8:	4619      	mov	r1, r3
 8013dfa:	68f8      	ldr	r0, [r7, #12]
 8013dfc:	f7ff fcdc 	bl	80137b8 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8013e00:	2300      	movs	r3, #0
 8013e02:	82fb      	strh	r3, [r7, #22]
 8013e04:	e00a      	b.n	8013e1c <mqtt_output_append_string+0x46>
    mqtt_ringbuf_put(rb, str[n]);
 8013e06:	8afb      	ldrh	r3, [r7, #22]
 8013e08:	68ba      	ldr	r2, [r7, #8]
 8013e0a:	4413      	add	r3, r2
 8013e0c:	781b      	ldrb	r3, [r3, #0]
 8013e0e:	4619      	mov	r1, r3
 8013e10:	68f8      	ldr	r0, [r7, #12]
 8013e12:	f7ff fcd1 	bl	80137b8 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8013e16:	8afb      	ldrh	r3, [r7, #22]
 8013e18:	3301      	adds	r3, #1
 8013e1a:	82fb      	strh	r3, [r7, #22]
 8013e1c:	8afa      	ldrh	r2, [r7, #22]
 8013e1e:	88fb      	ldrh	r3, [r7, #6]
 8013e20:	429a      	cmp	r2, r3
 8013e22:	d3f0      	bcc.n	8013e06 <mqtt_output_append_string+0x30>
  }
}
 8013e24:	bf00      	nop
 8013e26:	bf00      	nop
 8013e28:	3718      	adds	r7, #24
 8013e2a:	46bd      	mov	sp, r7
 8013e2c:	bd80      	pop	{r7, pc}

08013e2e <mqtt_output_append_fixed_header>:
 */

static void
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t fdup,
                                u8_t fqos, u8_t fretain, u16_t r_length)
{
 8013e2e:	b580      	push	{r7, lr}
 8013e30:	b082      	sub	sp, #8
 8013e32:	af00      	add	r7, sp, #0
 8013e34:	6078      	str	r0, [r7, #4]
 8013e36:	4608      	mov	r0, r1
 8013e38:	4611      	mov	r1, r2
 8013e3a:	461a      	mov	r2, r3
 8013e3c:	4603      	mov	r3, r0
 8013e3e:	70fb      	strb	r3, [r7, #3]
 8013e40:	460b      	mov	r3, r1
 8013e42:	70bb      	strb	r3, [r7, #2]
 8013e44:	4613      	mov	r3, r2
 8013e46:	707b      	strb	r3, [r7, #1]
  /* Start with control byte */
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((fdup & 1) << 3) | ((fqos & 3) << 1) | (fretain & 1)));
 8013e48:	78fb      	ldrb	r3, [r7, #3]
 8013e4a:	011b      	lsls	r3, r3, #4
 8013e4c:	b25a      	sxtb	r2, r3
 8013e4e:	78bb      	ldrb	r3, [r7, #2]
 8013e50:	00db      	lsls	r3, r3, #3
 8013e52:	b25b      	sxtb	r3, r3
 8013e54:	f003 0308 	and.w	r3, r3, #8
 8013e58:	b25b      	sxtb	r3, r3
 8013e5a:	4313      	orrs	r3, r2
 8013e5c:	b25a      	sxtb	r2, r3
 8013e5e:	787b      	ldrb	r3, [r7, #1]
 8013e60:	005b      	lsls	r3, r3, #1
 8013e62:	b25b      	sxtb	r3, r3
 8013e64:	f003 0306 	and.w	r3, r3, #6
 8013e68:	b25b      	sxtb	r3, r3
 8013e6a:	4313      	orrs	r3, r2
 8013e6c:	b25a      	sxtb	r2, r3
 8013e6e:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8013e72:	f003 0301 	and.w	r3, r3, #1
 8013e76:	b25b      	sxtb	r3, r3
 8013e78:	4313      	orrs	r3, r2
 8013e7a:	b25b      	sxtb	r3, r3
 8013e7c:	b2db      	uxtb	r3, r3
 8013e7e:	4619      	mov	r1, r3
 8013e80:	6878      	ldr	r0, [r7, #4]
 8013e82:	f7ff ff63 	bl	8013d4c <mqtt_output_append_u8>
  /* Encode remaining length field */
  do {
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 8013e86:	8abb      	ldrh	r3, [r7, #20]
 8013e88:	b25b      	sxtb	r3, r3
 8013e8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013e8e:	b25b      	sxtb	r3, r3
 8013e90:	8aba      	ldrh	r2, [r7, #20]
 8013e92:	2a7f      	cmp	r2, #127	; 0x7f
 8013e94:	d902      	bls.n	8013e9c <mqtt_output_append_fixed_header+0x6e>
 8013e96:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8013e9a:	e000      	b.n	8013e9e <mqtt_output_append_fixed_header+0x70>
 8013e9c:	2200      	movs	r2, #0
 8013e9e:	4313      	orrs	r3, r2
 8013ea0:	b25b      	sxtb	r3, r3
 8013ea2:	b2db      	uxtb	r3, r3
 8013ea4:	4619      	mov	r1, r3
 8013ea6:	6878      	ldr	r0, [r7, #4]
 8013ea8:	f7ff ff50 	bl	8013d4c <mqtt_output_append_u8>
    r_length >>= 7;
 8013eac:	8abb      	ldrh	r3, [r7, #20]
 8013eae:	09db      	lsrs	r3, r3, #7
 8013eb0:	82bb      	strh	r3, [r7, #20]
  } while (r_length > 0);
 8013eb2:	8abb      	ldrh	r3, [r7, #20]
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d1e6      	bne.n	8013e86 <mqtt_output_append_fixed_header+0x58>
}
 8013eb8:	bf00      	nop
 8013eba:	bf00      	nop
 8013ebc:	3708      	adds	r7, #8
 8013ebe:	46bd      	mov	sp, r7
 8013ec0:	bd80      	pop	{r7, pc}
	...

08013ec4 <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 8013ec4:	b590      	push	{r4, r7, lr}
 8013ec6:	b085      	sub	sp, #20
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	6078      	str	r0, [r7, #4]
 8013ecc:	460b      	mov	r3, r1
 8013ece:	807b      	strh	r3, [r7, #2]
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 8013ed0:	887b      	ldrh	r3, [r7, #2]
 8013ed2:	3301      	adds	r3, #1
 8013ed4:	81fb      	strh	r3, [r7, #14]

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d106      	bne.n	8013eea <mqtt_output_check_space+0x26>
 8013edc:	4b0f      	ldr	r3, [pc, #60]	; (8013f1c <mqtt_output_check_space+0x58>)
 8013ede:	f240 2207 	movw	r2, #519	; 0x207
 8013ee2:	490f      	ldr	r1, [pc, #60]	; (8013f20 <mqtt_output_check_space+0x5c>)
 8013ee4:	480f      	ldr	r0, [pc, #60]	; (8013f24 <mqtt_output_check_space+0x60>)
 8013ee6:	f00c f83d 	bl	801ff64 <printf>

  /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 8013eea:	89fb      	ldrh	r3, [r7, #14]
 8013eec:	3301      	adds	r3, #1
 8013eee:	81fb      	strh	r3, [r7, #14]
    r_length >>= 7;
 8013ef0:	887b      	ldrh	r3, [r7, #2]
 8013ef2:	09db      	lsrs	r3, r3, #7
 8013ef4:	807b      	strh	r3, [r7, #2]
  } while (r_length > 0);
 8013ef6:	887b      	ldrh	r3, [r7, #2]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d1f6      	bne.n	8013eea <mqtt_output_check_space+0x26>

  return (total_len <= mqtt_ringbuf_free(rb));
 8013efc:	89fc      	ldrh	r4, [r7, #14]
 8013efe:	6878      	ldr	r0, [r7, #4]
 8013f00:	f7ff fcb6 	bl	8013870 <mqtt_ringbuf_len>
 8013f04:	4603      	mov	r3, r0
 8013f06:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8013f0a:	429c      	cmp	r4, r3
 8013f0c:	bfd4      	ite	le
 8013f0e:	2301      	movle	r3, #1
 8013f10:	2300      	movgt	r3, #0
 8013f12:	b2db      	uxtb	r3, r3
}
 8013f14:	4618      	mov	r0, r3
 8013f16:	3714      	adds	r7, #20
 8013f18:	46bd      	mov	sp, r7
 8013f1a:	bd90      	pop	{r4, r7, pc}
 8013f1c:	080264cc 	.word	0x080264cc
 8013f20:	0802669c 	.word	0x0802669c
 8013f24:	08026544 	.word	0x08026544

08013f28 <mqtt_close>:
 * @param client MQTT client
 * @param reason Reason for disconnection
 */
static void
mqtt_close(mqtt_client_t *client, mqtt_connection_status_t reason)
{
 8013f28:	b580      	push	{r7, lr}
 8013f2a:	b084      	sub	sp, #16
 8013f2c:	af00      	add	r7, sp, #0
 8013f2e:	6078      	str	r0, [r7, #4]
 8013f30:	460b      	mov	r3, r1
 8013f32:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d106      	bne.n	8013f48 <mqtt_close+0x20>
 8013f3a:	4b27      	ldr	r3, [pc, #156]	; (8013fd8 <mqtt_close+0xb0>)
 8013f3c:	f240 221b 	movw	r2, #539	; 0x21b
 8013f40:	4926      	ldr	r1, [pc, #152]	; (8013fdc <mqtt_close+0xb4>)
 8013f42:	4827      	ldr	r0, [pc, #156]	; (8013fe0 <mqtt_close+0xb8>)
 8013f44:	f00c f80e 	bl	801ff64 <printf>

  /* Bring down TCP connection if not already done */
  if (client->conn != NULL) {
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	68db      	ldr	r3, [r3, #12]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d024      	beq.n	8013f9a <mqtt_close+0x72>
    err_t res;
    altcp_recv(client->conn, NULL);
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	68db      	ldr	r3, [r3, #12]
 8013f54:	2100      	movs	r1, #0
 8013f56:	4618      	mov	r0, r3
 8013f58:	f004 fc02 	bl	8018760 <tcp_recv>
    altcp_err(client->conn,  NULL);
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	68db      	ldr	r3, [r3, #12]
 8013f60:	2100      	movs	r1, #0
 8013f62:	4618      	mov	r0, r3
 8013f64:	f004 fc40 	bl	80187e8 <tcp_err>
    altcp_sent(client->conn, NULL);
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	68db      	ldr	r3, [r3, #12]
 8013f6c:	2100      	movs	r1, #0
 8013f6e:	4618      	mov	r0, r3
 8013f70:	f004 fc18 	bl	80187a4 <tcp_sent>
    res = altcp_close(client->conn);
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	68db      	ldr	r3, [r3, #12]
 8013f78:	4618      	mov	r0, r3
 8013f7a:	f003 fa19 	bl	80173b0 <tcp_close>
 8013f7e:	4603      	mov	r3, r0
 8013f80:	73fb      	strb	r3, [r7, #15]
    if (res != ERR_OK) {
 8013f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d004      	beq.n	8013f94 <mqtt_close+0x6c>
      altcp_abort(client->conn);
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	68db      	ldr	r3, [r3, #12]
 8013f8e:	4618      	mov	r0, r3
 8013f90:	f003 faf8 	bl	8017584 <tcp_abort>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_close: Close err=%s\n", lwip_strerr(res)));
    }
    client->conn = NULL;
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	2200      	movs	r2, #0
 8013f98:	60da      	str	r2, [r3, #12]
  }

  /* Remove all pending requests */
  mqtt_clear_requests(&client->pend_req_queue);
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	3318      	adds	r3, #24
 8013f9e:	4618      	mov	r0, r3
 8013fa0:	f7ff fe7c 	bl	8013c9c <mqtt_clear_requests>
  /* Stop cyclic timer */
  sys_untimeout(mqtt_cyclic_timer, client);
 8013fa4:	6879      	ldr	r1, [r7, #4]
 8013fa6:	480f      	ldr	r0, [pc, #60]	; (8013fe4 <mqtt_close+0xbc>)
 8013fa8:	f009 f95a 	bl	801d260 <sys_untimeout>

  /* Notify upper layer of disconnection if changed state */
  if (client->conn_state != TCP_DISCONNECTED) {
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	7a9b      	ldrb	r3, [r3, #10]
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d00d      	beq.n	8013fd0 <mqtt_close+0xa8>

    client->conn_state = TCP_DISCONNECTED;
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	2200      	movs	r2, #0
 8013fb8:	729a      	strb	r2, [r3, #10]
    if (client->connect_cb != NULL) {
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	695b      	ldr	r3, [r3, #20]
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d006      	beq.n	8013fd0 <mqtt_close+0xa8>
      client->connect_cb(client, client->connect_arg, reason);
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	695b      	ldr	r3, [r3, #20]
 8013fc6:	687a      	ldr	r2, [r7, #4]
 8013fc8:	6911      	ldr	r1, [r2, #16]
 8013fca:	887a      	ldrh	r2, [r7, #2]
 8013fcc:	6878      	ldr	r0, [r7, #4]
 8013fce:	4798      	blx	r3
    }
  }
}
 8013fd0:	bf00      	nop
 8013fd2:	3710      	adds	r7, #16
 8013fd4:	46bd      	mov	sp, r7
 8013fd6:	bd80      	pop	{r7, pc}
 8013fd8:	080264cc 	.word	0x080264cc
 8013fdc:	080266c0 	.word	0x080266c0
 8013fe0:	08026544 	.word	0x08026544
 8013fe4:	08013fe9 	.word	0x08013fe9

08013fe8 <mqtt_cyclic_timer>:
 * Interval timer, called every MQTT_CYCLIC_TIMER_INTERVAL seconds in MQTT_CONNECTING and MQTT_CONNECTED states
 * @param arg MQTT client
 */
static void
mqtt_cyclic_timer(void *arg)
{
 8013fe8:	b580      	push	{r7, lr}
 8013fea:	b086      	sub	sp, #24
 8013fec:	af02      	add	r7, sp, #8
 8013fee:	6078      	str	r0, [r7, #4]
  u8_t restart_timer = 1;
 8013ff0:	2301      	movs	r3, #1
 8013ff2:	73fb      	strb	r3, [r7, #15]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 8013ff8:	68bb      	ldr	r3, [r7, #8]
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d106      	bne.n	801400c <mqtt_cyclic_timer+0x24>
 8013ffe:	4b42      	ldr	r3, [pc, #264]	; (8014108 <mqtt_cyclic_timer+0x120>)
 8014000:	f44f 7211 	mov.w	r2, #580	; 0x244
 8014004:	4941      	ldr	r1, [pc, #260]	; (801410c <mqtt_cyclic_timer+0x124>)
 8014006:	4842      	ldr	r0, [pc, #264]	; (8014110 <mqtt_cyclic_timer+0x128>)
 8014008:	f00b ffac 	bl	801ff64 <printf>

  if (client->conn_state == MQTT_CONNECTING) {
 801400c:	68bb      	ldr	r3, [r7, #8]
 801400e:	7a9b      	ldrb	r3, [r3, #10]
 8014010:	2b02      	cmp	r3, #2
 8014012:	d115      	bne.n	8014040 <mqtt_cyclic_timer+0x58>
    client->cyclic_tick++;
 8014014:	68bb      	ldr	r3, [r7, #8]
 8014016:	881b      	ldrh	r3, [r3, #0]
 8014018:	3301      	adds	r3, #1
 801401a:	b29a      	uxth	r2, r3
 801401c:	68bb      	ldr	r3, [r7, #8]
 801401e:	801a      	strh	r2, [r3, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 8014020:	68bb      	ldr	r3, [r7, #8]
 8014022:	881b      	ldrh	r3, [r3, #0]
 8014024:	461a      	mov	r2, r3
 8014026:	4613      	mov	r3, r2
 8014028:	009b      	lsls	r3, r3, #2
 801402a:	4413      	add	r3, r2
 801402c:	2b63      	cmp	r3, #99	; 0x63
 801402e:	dd5e      	ble.n	80140ee <mqtt_cyclic_timer+0x106>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: CONNECT attempt to server timed out\n"));
      /* Disconnect TCP */
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8014030:	f240 1101 	movw	r1, #257	; 0x101
 8014034:	68b8      	ldr	r0, [r7, #8]
 8014036:	f7ff ff77 	bl	8013f28 <mqtt_close>
      restart_timer = 0;
 801403a:	2300      	movs	r3, #0
 801403c:	73fb      	strb	r3, [r7, #15]
 801403e:	e056      	b.n	80140ee <mqtt_cyclic_timer+0x106>
    }
  } else if (client->conn_state == MQTT_CONNECTED) {
 8014040:	68bb      	ldr	r3, [r7, #8]
 8014042:	7a9b      	ldrb	r3, [r3, #10]
 8014044:	2b03      	cmp	r3, #3
 8014046:	d150      	bne.n	80140ea <mqtt_cyclic_timer+0x102>
    /* Handle timeout for pending requests */
    mqtt_request_time_elapsed(&client->pend_req_queue, MQTT_CYCLIC_TIMER_INTERVAL);
 8014048:	68bb      	ldr	r3, [r7, #8]
 801404a:	3318      	adds	r3, #24
 801404c:	2105      	movs	r1, #5
 801404e:	4618      	mov	r0, r3
 8014050:	f7ff fdd2 	bl	8013bf8 <mqtt_request_time_elapsed>

    /* keep_alive > 0 means keep alive functionality shall be used */
    if (client->keep_alive > 0) {
 8014054:	68bb      	ldr	r3, [r7, #8]
 8014056:	885b      	ldrh	r3, [r3, #2]
 8014058:	2b00      	cmp	r3, #0
 801405a:	d048      	beq.n	80140ee <mqtt_cyclic_timer+0x106>

      client->server_watchdog++;
 801405c:	68bb      	ldr	r3, [r7, #8]
 801405e:	889b      	ldrh	r3, [r3, #4]
 8014060:	3301      	adds	r3, #1
 8014062:	b29a      	uxth	r2, r3
 8014064:	68bb      	ldr	r3, [r7, #8]
 8014066:	809a      	strh	r2, [r3, #4]
      /* If reception from server has been idle for 1.5*keep_alive time, server is considered unresponsive */
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive / 2)) {
 8014068:	68bb      	ldr	r3, [r7, #8]
 801406a:	889b      	ldrh	r3, [r3, #4]
 801406c:	461a      	mov	r2, r3
 801406e:	4613      	mov	r3, r2
 8014070:	009b      	lsls	r3, r3, #2
 8014072:	441a      	add	r2, r3
 8014074:	68bb      	ldr	r3, [r7, #8]
 8014076:	885b      	ldrh	r3, [r3, #2]
 8014078:	4619      	mov	r1, r3
 801407a:	68bb      	ldr	r3, [r7, #8]
 801407c:	885b      	ldrh	r3, [r3, #2]
 801407e:	085b      	lsrs	r3, r3, #1
 8014080:	b29b      	uxth	r3, r3
 8014082:	440b      	add	r3, r1
 8014084:	429a      	cmp	r2, r3
 8014086:	dd06      	ble.n	8014096 <mqtt_cyclic_timer+0xae>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Server incoming keep-alive timeout\n"));
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8014088:	f240 1101 	movw	r1, #257	; 0x101
 801408c:	68b8      	ldr	r0, [r7, #8]
 801408e:	f7ff ff4b 	bl	8013f28 <mqtt_close>
        restart_timer = 0;
 8014092:	2300      	movs	r3, #0
 8014094:	73fb      	strb	r3, [r7, #15]
      }

      /* If time for a keep alive message to be sent, transmission has been idle for keep_alive time */
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 8014096:	68bb      	ldr	r3, [r7, #8]
 8014098:	881b      	ldrh	r3, [r3, #0]
 801409a:	461a      	mov	r2, r3
 801409c:	4613      	mov	r3, r2
 801409e:	009b      	lsls	r3, r3, #2
 80140a0:	4413      	add	r3, r2
 80140a2:	68ba      	ldr	r2, [r7, #8]
 80140a4:	8852      	ldrh	r2, [r2, #2]
 80140a6:	4293      	cmp	r3, r2
 80140a8:	db18      	blt.n	80140dc <mqtt_cyclic_timer+0xf4>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: Sending keep-alive message to server\n"));
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 80140aa:	68bb      	ldr	r3, [r7, #8]
 80140ac:	33ec      	adds	r3, #236	; 0xec
 80140ae:	2100      	movs	r1, #0
 80140b0:	4618      	mov	r0, r3
 80140b2:	f7ff ff07 	bl	8013ec4 <mqtt_output_check_space>
 80140b6:	4603      	mov	r3, r0
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d018      	beq.n	80140ee <mqtt_cyclic_timer+0x106>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 80140bc:	68bb      	ldr	r3, [r7, #8]
 80140be:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 80140c2:	2300      	movs	r3, #0
 80140c4:	9301      	str	r3, [sp, #4]
 80140c6:	2300      	movs	r3, #0
 80140c8:	9300      	str	r3, [sp, #0]
 80140ca:	2300      	movs	r3, #0
 80140cc:	2200      	movs	r2, #0
 80140ce:	210c      	movs	r1, #12
 80140d0:	f7ff fead 	bl	8013e2e <mqtt_output_append_fixed_header>
          client->cyclic_tick = 0;
 80140d4:	68bb      	ldr	r3, [r7, #8]
 80140d6:	2200      	movs	r2, #0
 80140d8:	801a      	strh	r2, [r3, #0]
 80140da:	e008      	b.n	80140ee <mqtt_cyclic_timer+0x106>
        }
      } else {
        client->cyclic_tick++;
 80140dc:	68bb      	ldr	r3, [r7, #8]
 80140de:	881b      	ldrh	r3, [r3, #0]
 80140e0:	3301      	adds	r3, #1
 80140e2:	b29a      	uxth	r2, r3
 80140e4:	68bb      	ldr	r3, [r7, #8]
 80140e6:	801a      	strh	r2, [r3, #0]
 80140e8:	e001      	b.n	80140ee <mqtt_cyclic_timer+0x106>
      }
    }
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Timer should not be running in state %d\n", client->conn_state));
    restart_timer = 0;
 80140ea:	2300      	movs	r3, #0
 80140ec:	73fb      	strb	r3, [r7, #15]
  }
  if (restart_timer) {
 80140ee:	7bfb      	ldrb	r3, [r7, #15]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d005      	beq.n	8014100 <mqtt_cyclic_timer+0x118>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, arg);
 80140f4:	687a      	ldr	r2, [r7, #4]
 80140f6:	4907      	ldr	r1, [pc, #28]	; (8014114 <mqtt_cyclic_timer+0x12c>)
 80140f8:	f241 3088 	movw	r0, #5000	; 0x1388
 80140fc:	f009 f88a 	bl	801d214 <sys_timeout>
  }
}
 8014100:	bf00      	nop
 8014102:	3710      	adds	r7, #16
 8014104:	46bd      	mov	sp, r7
 8014106:	bd80      	pop	{r7, pc}
 8014108:	080264cc 	.word	0x080264cc
 801410c:	080266dc 	.word	0x080266dc
 8014110:	08026544 	.word	0x08026544
 8014114:	08013fe9 	.word	0x08013fe9

08014118 <pub_ack_rec_rel_response>:
 * @param qos QoS value
 * @return ERR_OK if successful, ERR_MEM if out of memory
 */
static err_t
pub_ack_rec_rel_response(mqtt_client_t *client, u8_t msg, u16_t pkt_id, u8_t qos)
{
 8014118:	b580      	push	{r7, lr}
 801411a:	b086      	sub	sp, #24
 801411c:	af02      	add	r7, sp, #8
 801411e:	6078      	str	r0, [r7, #4]
 8014120:	4608      	mov	r0, r1
 8014122:	4611      	mov	r1, r2
 8014124:	461a      	mov	r2, r3
 8014126:	4603      	mov	r3, r0
 8014128:	70fb      	strb	r3, [r7, #3]
 801412a:	460b      	mov	r3, r1
 801412c:	803b      	strh	r3, [r7, #0]
 801412e:	4613      	mov	r3, r2
 8014130:	70bb      	strb	r3, [r7, #2]
  err_t err = ERR_OK;
 8014132:	2300      	movs	r3, #0
 8014134:	73fb      	strb	r3, [r7, #15]
  if (mqtt_output_check_space(&client->output, 2)) {
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	33ec      	adds	r3, #236	; 0xec
 801413a:	2102      	movs	r1, #2
 801413c:	4618      	mov	r0, r3
 801413e:	f7ff fec1 	bl	8013ec4 <mqtt_output_check_space>
 8014142:	4603      	mov	r3, r0
 8014144:	2b00      	cmp	r3, #0
 8014146:	d01c      	beq.n	8014182 <pub_ack_rec_rel_response+0x6a>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 801414e:	78bb      	ldrb	r3, [r7, #2]
 8014150:	78f9      	ldrb	r1, [r7, #3]
 8014152:	2202      	movs	r2, #2
 8014154:	9201      	str	r2, [sp, #4]
 8014156:	2200      	movs	r2, #0
 8014158:	9200      	str	r2, [sp, #0]
 801415a:	2200      	movs	r2, #0
 801415c:	f7ff fe67 	bl	8013e2e <mqtt_output_append_fixed_header>
    mqtt_output_append_u16(&client->output, pkt_id);
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	33ec      	adds	r3, #236	; 0xec
 8014164:	883a      	ldrh	r2, [r7, #0]
 8014166:	4611      	mov	r1, r2
 8014168:	4618      	mov	r0, r3
 801416a:	f7ff fdfe 	bl	8013d6a <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	68db      	ldr	r3, [r3, #12]
 8014178:	4619      	mov	r1, r3
 801417a:	4610      	mov	r0, r2
 801417c:	f7ff fb94 	bl	80138a8 <mqtt_output_send>
 8014180:	e001      	b.n	8014186 <pub_ack_rec_rel_response+0x6e>
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("pub_ack_rec_rel_response: OOM creating response: %s with pkt_id: %d\n",
                                   mqtt_msg_type_to_str(msg), pkt_id));
    err = ERR_MEM;
 8014182:	23ff      	movs	r3, #255	; 0xff
 8014184:	73fb      	strb	r3, [r7, #15]
  }
  return err;
 8014186:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801418a:	4618      	mov	r0, r3
 801418c:	3710      	adds	r7, #16
 801418e:	46bd      	mov	sp, r7
 8014190:	bd80      	pop	{r7, pc}

08014192 <mqtt_incomming_suback>:
 * @param r Matching request
 * @param result Result code from server
 */
static void
mqtt_incomming_suback(struct mqtt_request_t *r, u8_t result)
{
 8014192:	b580      	push	{r7, lr}
 8014194:	b082      	sub	sp, #8
 8014196:	af00      	add	r7, sp, #0
 8014198:	6078      	str	r0, [r7, #4]
 801419a:	460b      	mov	r3, r1
 801419c:	70fb      	strb	r3, [r7, #3]
  if (r->cb != NULL) {
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	685b      	ldr	r3, [r3, #4]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d00c      	beq.n	80141c0 <mqtt_incomming_suback+0x2e>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	685b      	ldr	r3, [r3, #4]
 80141aa:	687a      	ldr	r2, [r7, #4]
 80141ac:	6890      	ldr	r0, [r2, #8]
 80141ae:	78fa      	ldrb	r2, [r7, #3]
 80141b0:	2a02      	cmp	r2, #2
 80141b2:	d801      	bhi.n	80141b8 <mqtt_incomming_suback+0x26>
 80141b4:	2200      	movs	r2, #0
 80141b6:	e001      	b.n	80141bc <mqtt_incomming_suback+0x2a>
 80141b8:	f06f 020c 	mvn.w	r2, #12
 80141bc:	4611      	mov	r1, r2
 80141be:	4798      	blx	r3
  }
}
 80141c0:	bf00      	nop
 80141c2:	3708      	adds	r7, #8
 80141c4:	46bd      	mov	sp, r7
 80141c6:	bd80      	pop	{r7, pc}

080141c8 <mqtt_message_received>:
 * @param length length received part
 * @param remaining_length Remaining length of complete message
 */
static mqtt_connection_status_t
mqtt_message_received(mqtt_client_t *client, u8_t fixed_hdr_idx, u16_t length, u32_t remaining_length)
{
 80141c8:	b590      	push	{r4, r7, lr}
 80141ca:	b08f      	sub	sp, #60	; 0x3c
 80141cc:	af00      	add	r7, sp, #0
 80141ce:	60f8      	str	r0, [r7, #12]
 80141d0:	607b      	str	r3, [r7, #4]
 80141d2:	460b      	mov	r3, r1
 80141d4:	72fb      	strb	r3, [r7, #11]
 80141d6:	4613      	mov	r3, r2
 80141d8:	813b      	strh	r3, [r7, #8]
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 80141da:	2300      	movs	r3, #0
 80141dc:	86fb      	strh	r3, [r7, #54]	; 0x36

  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_idx;
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80141e4:	7afb      	ldrb	r3, [r7, #11]
 80141e6:	4413      	add	r3, r2
 80141e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  size_t var_hdr_payload_bufsize = sizeof(client->rx_buffer) - fixed_hdr_idx;
 80141ea:	7afb      	ldrb	r3, [r7, #11]
 80141ec:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80141f0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Control packet type */
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80141f8:	091b      	lsrs	r3, r3, #4
 80141fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u16_t pkt_id = 0;
 80141fe:	2300      	movs	r3, #0
 8014200:	84bb      	strh	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN", client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN);
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014206:	2b7f      	cmp	r3, #127	; 0x7f
 8014208:	d906      	bls.n	8014218 <mqtt_message_received+0x50>
 801420a:	4b97      	ldr	r3, [pc, #604]	; (8014468 <mqtt_message_received+0x2a0>)
 801420c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014210:	4996      	ldr	r1, [pc, #600]	; (801446c <mqtt_message_received+0x2a4>)
 8014212:	4897      	ldr	r0, [pc, #604]	; (8014470 <mqtt_message_received+0x2a8>)
 8014214:	f00b fea6 	bl	801ff64 <printf>
  LWIP_ASSERT("fixed_hdr_idx <= client->msg_idx", fixed_hdr_idx <= client->msg_idx);
 8014218:	7afa      	ldrb	r2, [r7, #11]
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801421e:	429a      	cmp	r2, r3
 8014220:	d906      	bls.n	8014230 <mqtt_message_received+0x68>
 8014222:	4b91      	ldr	r3, [pc, #580]	; (8014468 <mqtt_message_received+0x2a0>)
 8014224:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 8014228:	4992      	ldr	r1, [pc, #584]	; (8014474 <mqtt_message_received+0x2ac>)
 801422a:	4891      	ldr	r0, [pc, #580]	; (8014470 <mqtt_message_received+0x2a8>)
 801422c:	f00b fe9a 	bl	801ff64 <printf>
  LWIP_ERROR("buffer length mismatch", fixed_hdr_idx + length <= MQTT_VAR_HEADER_BUFFER_LEN,
 8014230:	7afa      	ldrb	r2, [r7, #11]
 8014232:	893b      	ldrh	r3, [r7, #8]
 8014234:	4413      	add	r3, r2
 8014236:	2b80      	cmp	r3, #128	; 0x80
 8014238:	dd09      	ble.n	801424e <mqtt_message_received+0x86>
 801423a:	4b8b      	ldr	r3, [pc, #556]	; (8014468 <mqtt_message_received+0x2a0>)
 801423c:	f240 22ad 	movw	r2, #685	; 0x2ad
 8014240:	498d      	ldr	r1, [pc, #564]	; (8014478 <mqtt_message_received+0x2b0>)
 8014242:	488b      	ldr	r0, [pc, #556]	; (8014470 <mqtt_message_received+0x2a8>)
 8014244:	f00b fe8e 	bl	801ff64 <printf>
 8014248:	f44f 7380 	mov.w	r3, #256	; 0x100
 801424c:	e16f      	b.n	801452e <mqtt_message_received+0x366>
             return MQTT_CONNECT_DISCONNECTED);

  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 801424e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014252:	2b02      	cmp	r3, #2
 8014254:	d123      	bne.n	801429e <mqtt_message_received+0xd6>
    if (client->conn_state == MQTT_CONNECTING) {
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	7a9b      	ldrb	r3, [r3, #10]
 801425a:	2b02      	cmp	r3, #2
 801425c:	f040 8152 	bne.w	8014504 <mqtt_message_received+0x33c>
      if (length < 2) {
 8014260:	893b      	ldrh	r3, [r7, #8]
 8014262:	2b01      	cmp	r3, #1
 8014264:	f240 8150 	bls.w	8014508 <mqtt_message_received+0x340>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short CONNACK message\n"));
        goto out_disconnect;
      }
      /* Get result code from CONNACK */
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 8014268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801426a:	3301      	adds	r3, #1
 801426c:	781b      	ldrb	r3, [r3, #0]
 801426e:	86fb      	strh	r3, [r7, #54]	; 0x36
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: Connect response code %d\n", res));
      if (res == MQTT_CONNECT_ACCEPTED) {
 8014270:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014272:	2b00      	cmp	r3, #0
 8014274:	f040 8146 	bne.w	8014504 <mqtt_message_received+0x33c>
        /* Reset cyclic_tick when changing to connected state */
        client->cyclic_tick = 0;
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	2200      	movs	r2, #0
 801427c:	801a      	strh	r2, [r3, #0]
        client->conn_state = MQTT_CONNECTED;
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	2203      	movs	r2, #3
 8014282:	729a      	strb	r2, [r3, #10]
        /* Notify upper layer */
        if (client->connect_cb != 0) {
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	695b      	ldr	r3, [r3, #20]
 8014288:	2b00      	cmp	r3, #0
 801428a:	f000 813b 	beq.w	8014504 <mqtt_message_received+0x33c>
          client->connect_cb(client, client->connect_arg, res);
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	695b      	ldr	r3, [r3, #20]
 8014292:	68fa      	ldr	r2, [r7, #12]
 8014294:	6911      	ldr	r1, [r2, #16]
 8014296:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014298:	68f8      	ldr	r0, [r7, #12]
 801429a:	4798      	blx	r3
 801429c:	e132      	b.n	8014504 <mqtt_message_received+0x33c>
        }
      }
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Received CONNACK in connected state\n"));
    }
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 801429e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80142a2:	2b0d      	cmp	r3, #13
 80142a4:	f000 812e 	beq.w	8014504 <mqtt_message_received+0x33c>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ( "mqtt_message_received: Received PINGRESP from server\n"));

  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 80142a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80142ac:	2b03      	cmp	r3, #3
 80142ae:	f040 80c0 	bne.w	8014432 <mqtt_message_received+0x26a>
    u16_t payload_offset = 0;
 80142b2:	2300      	movs	r3, #0
 80142b4:	86bb      	strh	r3, [r7, #52]	; 0x34
    u16_t payload_length = length;
 80142b6:	893b      	ldrh	r3, [r7, #8]
 80142b8:	867b      	strh	r3, [r7, #50]	; 0x32
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80142c0:	105b      	asrs	r3, r3, #1
 80142c2:	b2db      	uxtb	r3, r3
 80142c4:	f003 0303 	and.w	r3, r3, #3
 80142c8:	77fb      	strb	r3, [r7, #31]

    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 80142ca:	68fb      	ldr	r3, [r7, #12]
 80142cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80142ce:	2b80      	cmp	r3, #128	; 0x80
 80142d0:	d87d      	bhi.n	80143ce <mqtt_message_received+0x206>
      /* Should have topic and pkt id*/
      u8_t *topic;
      u16_t after_topic;
      u8_t bkp;
      u16_t topic_len;
      u16_t qos_len = (qos ? 2U : 0U);
 80142d2:	7ffb      	ldrb	r3, [r7, #31]
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d001      	beq.n	80142dc <mqtt_message_received+0x114>
 80142d8:	2302      	movs	r3, #2
 80142da:	e000      	b.n	80142de <mqtt_message_received+0x116>
 80142dc:	2300      	movs	r3, #0
 80142de:	83bb      	strh	r3, [r7, #28]
      if (length < 2 + qos_len) {
 80142e0:	8bbb      	ldrh	r3, [r7, #28]
 80142e2:	1c5a      	adds	r2, r3, #1
 80142e4:	893b      	ldrh	r3, [r7, #8]
 80142e6:	429a      	cmp	r2, r3
 80142e8:	f280 8110 	bge.w	801450c <mqtt_message_received+0x344>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet\n"));
        goto out_disconnect;
      }
      topic_len = var_hdr_payload[0];
 80142ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142ee:	781b      	ldrb	r3, [r3, #0]
 80142f0:	837b      	strh	r3, [r7, #26]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 80142f2:	8b7b      	ldrh	r3, [r7, #26]
 80142f4:	021b      	lsls	r3, r3, #8
 80142f6:	b29a      	uxth	r2, r3
 80142f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142fa:	3301      	adds	r3, #1
 80142fc:	781b      	ldrb	r3, [r3, #0]
 80142fe:	b29b      	uxth	r3, r3
 8014300:	4413      	add	r3, r2
 8014302:	837b      	strh	r3, [r7, #26]
      if ((topic_len > length - (2 + qos_len)) ||
 8014304:	8b7a      	ldrh	r2, [r7, #26]
 8014306:	8939      	ldrh	r1, [r7, #8]
 8014308:	8bbb      	ldrh	r3, [r7, #28]
 801430a:	3302      	adds	r3, #2
 801430c:	1acb      	subs	r3, r1, r3
 801430e:	429a      	cmp	r2, r3
 8014310:	f300 80fe 	bgt.w	8014510 <mqtt_message_received+0x348>
          (topic_len > var_hdr_payload_bufsize - (2 + qos_len))) {
 8014314:	8b7a      	ldrh	r2, [r7, #26]
 8014316:	8bbb      	ldrh	r3, [r7, #28]
 8014318:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801431a:	1acb      	subs	r3, r1, r3
 801431c:	3b02      	subs	r3, #2
      if ((topic_len > length - (2 + qos_len)) ||
 801431e:	429a      	cmp	r2, r3
 8014320:	f200 80f6 	bhi.w	8014510 <mqtt_message_received+0x348>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (topic)\n"));
        goto out_disconnect;
      }

      topic = var_hdr_payload + 2;
 8014324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014326:	3302      	adds	r3, #2
 8014328:	617b      	str	r3, [r7, #20]
      after_topic = 2 + topic_len;
 801432a:	8b7b      	ldrh	r3, [r7, #26]
 801432c:	3302      	adds	r3, #2
 801432e:	863b      	strh	r3, [r7, #48]	; 0x30
      /* Check buffer length, add one byte even for QoS 0 so that zero termination will fit */
      if ((after_topic + (qos ? 2U : 1U)) > var_hdr_payload_bufsize) {
 8014330:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014332:	7ffa      	ldrb	r2, [r7, #31]
 8014334:	2a00      	cmp	r2, #0
 8014336:	d001      	beq.n	801433c <mqtt_message_received+0x174>
 8014338:	2202      	movs	r2, #2
 801433a:	e000      	b.n	801433e <mqtt_message_received+0x176>
 801433c:	2201      	movs	r2, #1
 801433e:	4413      	add	r3, r2
 8014340:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014342:	429a      	cmp	r2, r3
 8014344:	f0c0 80e6 	bcc.w	8014514 <mqtt_message_received+0x34c>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Receive buffer can not fit topic + pkt_id\n"));
        goto out_disconnect;
      }

      /* id for QoS 1 and 2 */
      if (qos > 0) {
 8014348:	7ffb      	ldrb	r3, [r7, #31]
 801434a:	2b00      	cmp	r3, #0
 801434c:	d01a      	beq.n	8014384 <mqtt_message_received+0x1bc>
        if (length < after_topic + 2U) {
 801434e:	893a      	ldrh	r2, [r7, #8]
 8014350:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014352:	3302      	adds	r3, #2
 8014354:	429a      	cmp	r2, r3
 8014356:	f0c0 80df 	bcc.w	8014518 <mqtt_message_received+0x350>
          LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (after_topic)\n"));
          goto out_disconnect;
        }
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 801435a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801435c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801435e:	4413      	add	r3, r2
 8014360:	781b      	ldrb	r3, [r3, #0]
 8014362:	b29b      	uxth	r3, r3
 8014364:	021b      	lsls	r3, r3, #8
 8014366:	b29a      	uxth	r2, r3
 8014368:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801436a:	3301      	adds	r3, #1
 801436c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801436e:	440b      	add	r3, r1
 8014370:	781b      	ldrb	r3, [r3, #0]
 8014372:	b29b      	uxth	r3, r3
 8014374:	4413      	add	r3, r2
 8014376:	b29a      	uxth	r2, r3
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	811a      	strh	r2, [r3, #8]
        after_topic += 2;
 801437c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801437e:	3302      	adds	r3, #2
 8014380:	863b      	strh	r3, [r7, #48]	; 0x30
 8014382:	e002      	b.n	801438a <mqtt_message_received+0x1c2>
      } else {
        client->inpub_pkt_id = 0;
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	2200      	movs	r2, #0
 8014388:	811a      	strh	r2, [r3, #8]
      }
      /* Take backup of byte after topic */
      bkp = topic[topic_len];
 801438a:	8b7b      	ldrh	r3, [r7, #26]
 801438c:	697a      	ldr	r2, [r7, #20]
 801438e:	4413      	add	r3, r2
 8014390:	781b      	ldrb	r3, [r3, #0]
 8014392:	74fb      	strb	r3, [r7, #19]
      /* Zero terminate string */
      topic[topic_len] = 0;
 8014394:	8b7b      	ldrh	r3, [r7, #26]
 8014396:	697a      	ldr	r2, [r7, #20]
 8014398:	4413      	add	r3, r2
 801439a:	2200      	movs	r2, #0
 801439c:	701a      	strb	r2, [r3, #0]
      /* Payload data remaining in receive buffer */
      payload_length = length - after_topic;
 801439e:	893a      	ldrh	r2, [r7, #8]
 80143a0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80143a2:	1ad3      	subs	r3, r2, r3
 80143a4:	867b      	strh	r3, [r7, #50]	; 0x32
      payload_offset = after_topic;
 80143a6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80143a8:	86bb      	strh	r3, [r7, #52]	; 0x34

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Received message with QoS %d at topic: %s, payload length %"U32_F"\n",
                                     qos, topic, remaining_length + payload_length));
      if (client->pub_cb != NULL) {
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d008      	beq.n	80143c4 <mqtt_message_received+0x1fc>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80143b6:	68fa      	ldr	r2, [r7, #12]
 80143b8:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 80143ba:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 80143bc:	687a      	ldr	r2, [r7, #4]
 80143be:	440a      	add	r2, r1
 80143c0:	6979      	ldr	r1, [r7, #20]
 80143c2:	4798      	blx	r3
      }
      /* Restore byte after topic */
      topic[topic_len] = bkp;
 80143c4:	8b7b      	ldrh	r3, [r7, #26]
 80143c6:	697a      	ldr	r2, [r7, #20]
 80143c8:	4413      	add	r3, r2
 80143ca:	7cfa      	ldrb	r2, [r7, #19]
 80143cc:	701a      	strb	r2, [r3, #0]
    }
    if (payload_length > 0 || remaining_length == 0) {
 80143ce:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d103      	bne.n	80143dc <mqtt_message_received+0x214>
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	f040 8094 	bne.w	8014504 <mqtt_message_received+0x33c>
      if (length < (size_t)(payload_offset + payload_length)) {
 80143dc:	893b      	ldrh	r3, [r7, #8]
 80143de:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80143e0:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80143e2:	440a      	add	r2, r1
 80143e4:	4293      	cmp	r3, r2
 80143e6:	f0c0 8099 	bcc.w	801451c <mqtt_message_received+0x354>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short packet (payload)\n"));
        goto out_disconnect;
      }
      client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80143f2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80143f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80143f6:	18d1      	adds	r1, r2, r3
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	bf0c      	ite	eq
 80143fe:	2301      	moveq	r3, #1
 8014400:	2300      	movne	r3, #0
 8014402:	b2db      	uxtb	r3, r3
 8014404:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8014406:	47a0      	blx	r4
      /* Reply if QoS > 0 */
      if (remaining_length == 0 && qos > 0) {
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d17a      	bne.n	8014504 <mqtt_message_received+0x33c>
 801440e:	7ffb      	ldrb	r3, [r7, #31]
 8014410:	2b00      	cmp	r3, #0
 8014412:	d077      	beq.n	8014504 <mqtt_message_received+0x33c>
        /* Send PUBACK for QoS 1 or PUBREC for QoS 2 */
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 8014414:	7ffb      	ldrb	r3, [r7, #31]
 8014416:	2b01      	cmp	r3, #1
 8014418:	d101      	bne.n	801441e <mqtt_message_received+0x256>
 801441a:	2304      	movs	r3, #4
 801441c:	e000      	b.n	8014420 <mqtt_message_received+0x258>
 801441e:	2305      	movs	r3, #5
 8014420:	74bb      	strb	r3, [r7, #18]
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Sending publish response: %s with pkt_id: %d\n",
                                       mqtt_msg_type_to_str(resp_msg), client->inpub_pkt_id));
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	891a      	ldrh	r2, [r3, #8]
 8014426:	7cb9      	ldrb	r1, [r7, #18]
 8014428:	2300      	movs	r3, #0
 801442a:	68f8      	ldr	r0, [r7, #12]
 801442c:	f7ff fe74 	bl	8014118 <pub_ack_rec_rel_response>
 8014430:	e068      	b.n	8014504 <mqtt_message_received+0x33c>
      }
    }
  } else {
    /* Get packet identifier */
    pkt_id = (u16_t)var_hdr_payload[0] << 8;
 8014432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014434:	781b      	ldrb	r3, [r3, #0]
 8014436:	b29b      	uxth	r3, r3
 8014438:	021b      	lsls	r3, r3, #8
 801443a:	84bb      	strh	r3, [r7, #36]	; 0x24
    pkt_id |= (u16_t)var_hdr_payload[1];
 801443c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801443e:	3301      	adds	r3, #1
 8014440:	781b      	ldrb	r3, [r3, #0]
 8014442:	b29a      	uxth	r2, r3
 8014444:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014446:	4313      	orrs	r3, r2
 8014448:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (pkt_id == 0) {
 801444a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801444c:	2b00      	cmp	r3, #0
 801444e:	d067      	beq.n	8014520 <mqtt_message_received+0x358>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Got message with illegal packet identifier: 0\n"));
      goto out_disconnect;
    }
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 8014450:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014454:	2b05      	cmp	r3, #5
 8014456:	d111      	bne.n	801447c <mqtt_message_received+0x2b4>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREC, sending PUBREL with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 8014458:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801445a:	2301      	movs	r3, #1
 801445c:	2106      	movs	r1, #6
 801445e:	68f8      	ldr	r0, [r7, #12]
 8014460:	f7ff fe5a 	bl	8014118 <pub_ack_rec_rel_response>
 8014464:	e04e      	b.n	8014504 <mqtt_message_received+0x33c>
 8014466:	bf00      	nop
 8014468:	080264cc 	.word	0x080264cc
 801446c:	08026700 	.word	0x08026700
 8014470:	08026544 	.word	0x08026544
 8014474:	08026730 	.word	0x08026730
 8014478:	08026754 	.word	0x08026754

    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 801447c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014480:	2b06      	cmp	r3, #6
 8014482:	d106      	bne.n	8014492 <mqtt_message_received+0x2ca>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREL, sending PUBCOMP response with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 8014484:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014486:	2300      	movs	r3, #0
 8014488:	2107      	movs	r1, #7
 801448a:	68f8      	ldr	r0, [r7, #12]
 801448c:	f7ff fe44 	bl	8014118 <pub_ack_rec_rel_response>
 8014490:	e038      	b.n	8014504 <mqtt_message_received+0x33c>

    } else if (pkt_type == MQTT_MSG_TYPE_SUBACK || pkt_type == MQTT_MSG_TYPE_UNSUBACK ||
 8014492:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014496:	2b09      	cmp	r3, #9
 8014498:	d00b      	beq.n	80144b2 <mqtt_message_received+0x2ea>
 801449a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801449e:	2b0b      	cmp	r3, #11
 80144a0:	d007      	beq.n	80144b2 <mqtt_message_received+0x2ea>
 80144a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80144a6:	2b07      	cmp	r3, #7
 80144a8:	d003      	beq.n	80144b2 <mqtt_message_received+0x2ea>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 80144aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80144ae:	2b04      	cmp	r3, #4
 80144b0:	d138      	bne.n	8014524 <mqtt_message_received+0x35c>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	3318      	adds	r3, #24
 80144b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80144b8:	4611      	mov	r1, r2
 80144ba:	4618      	mov	r0, r3
 80144bc:	f7ff fb4a 	bl	8013b54 <mqtt_take_request>
 80144c0:	6238      	str	r0, [r7, #32]
      if (r != NULL) {
 80144c2:	6a3b      	ldr	r3, [r7, #32]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d01c      	beq.n	8014502 <mqtt_message_received+0x33a>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: %s response with id %d\n", mqtt_msg_type_to_str(pkt_type), pkt_id));
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 80144c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80144cc:	2b09      	cmp	r3, #9
 80144ce:	d10a      	bne.n	80144e6 <mqtt_message_received+0x31e>
          if (length < 3) {
 80144d0:	893b      	ldrh	r3, [r7, #8]
 80144d2:	2b02      	cmp	r3, #2
 80144d4:	d928      	bls.n	8014528 <mqtt_message_received+0x360>
            LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: To small SUBACK packet\n"));
            goto out_disconnect;
          } else {
            mqtt_incomming_suback(r, var_hdr_payload[2]);
 80144d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144d8:	3302      	adds	r3, #2
 80144da:	781b      	ldrb	r3, [r3, #0]
 80144dc:	4619      	mov	r1, r3
 80144de:	6a38      	ldr	r0, [r7, #32]
 80144e0:	f7ff fe57 	bl	8014192 <mqtt_incomming_suback>
 80144e4:	e00a      	b.n	80144fc <mqtt_message_received+0x334>
          }
        } else if (r->cb != NULL) {
 80144e6:	6a3b      	ldr	r3, [r7, #32]
 80144e8:	685b      	ldr	r3, [r3, #4]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d006      	beq.n	80144fc <mqtt_message_received+0x334>
          r->cb(r->arg, ERR_OK);
 80144ee:	6a3b      	ldr	r3, [r7, #32]
 80144f0:	685b      	ldr	r3, [r3, #4]
 80144f2:	6a3a      	ldr	r2, [r7, #32]
 80144f4:	6892      	ldr	r2, [r2, #8]
 80144f6:	2100      	movs	r1, #0
 80144f8:	4610      	mov	r0, r2
 80144fa:	4798      	blx	r3
        }
        mqtt_delete_request(r);
 80144fc:	6a38      	ldr	r0, [r7, #32]
 80144fe:	f7ff fb19 	bl	8013b34 <mqtt_delete_request>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 8014502:	bf00      	nop
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ( "mqtt_message_received: Received unknown message type: %d\n", pkt_type));
      goto out_disconnect;
    }
  }
  return res;
 8014504:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014506:	e012      	b.n	801452e <mqtt_message_received+0x366>
        goto out_disconnect;
 8014508:	bf00      	nop
 801450a:	e00e      	b.n	801452a <mqtt_message_received+0x362>
        goto out_disconnect;
 801450c:	bf00      	nop
 801450e:	e00c      	b.n	801452a <mqtt_message_received+0x362>
        goto out_disconnect;
 8014510:	bf00      	nop
 8014512:	e00a      	b.n	801452a <mqtt_message_received+0x362>
        goto out_disconnect;
 8014514:	bf00      	nop
 8014516:	e008      	b.n	801452a <mqtt_message_received+0x362>
          goto out_disconnect;
 8014518:	bf00      	nop
 801451a:	e006      	b.n	801452a <mqtt_message_received+0x362>
        goto out_disconnect;
 801451c:	bf00      	nop
 801451e:	e004      	b.n	801452a <mqtt_message_received+0x362>
      goto out_disconnect;
 8014520:	bf00      	nop
 8014522:	e002      	b.n	801452a <mqtt_message_received+0x362>
      goto out_disconnect;
 8014524:	bf00      	nop
 8014526:	e000      	b.n	801452a <mqtt_message_received+0x362>
            goto out_disconnect;
 8014528:	bf00      	nop
out_disconnect:
  return MQTT_CONNECT_DISCONNECTED;
 801452a:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 801452e:	4618      	mov	r0, r3
 8014530:	373c      	adds	r7, #60	; 0x3c
 8014532:	46bd      	mov	sp, r7
 8014534:	bd90      	pop	{r4, r7, pc}
 8014536:	bf00      	nop

08014538 <mqtt_parse_incoming>:
 * @param p PBUF chain of received data
 * @return Connection status
 */
static mqtt_connection_status_t
mqtt_parse_incoming(mqtt_client_t *client, struct pbuf *p)
{
 8014538:	b580      	push	{r7, lr}
 801453a:	b088      	sub	sp, #32
 801453c:	af00      	add	r7, sp, #0
 801453e:	6078      	str	r0, [r7, #4]
 8014540:	6039      	str	r1, [r7, #0]
  u16_t in_offset = 0;
 8014542:	2300      	movs	r3, #0
 8014544:	83fb      	strh	r3, [r7, #30]
  u32_t msg_rem_len = 0;
 8014546:	2300      	movs	r3, #0
 8014548:	61bb      	str	r3, [r7, #24]
  u8_t fixed_hdr_idx = 0;
 801454a:	2300      	movs	r3, #0
 801454c:	75fb      	strb	r3, [r7, #23]
  u8_t b = 0;
 801454e:	2300      	movs	r3, #0
 8014550:	75bb      	strb	r3, [r7, #22]

  while (p->tot_len > in_offset) {
 8014552:	e0bc      	b.n	80146ce <mqtt_parse_incoming+0x196>
    /* We ALWAYS parse the header here first. Even if the header was not
       included in this segment, we re-parse it here by buffering it in
       client->rx_buffer. client->msg_idx keeps track of this. */
    if ((fixed_hdr_idx < 2) || ((b & 0x80) != 0)) {
 8014554:	7dfb      	ldrb	r3, [r7, #23]
 8014556:	2b01      	cmp	r3, #1
 8014558:	d903      	bls.n	8014562 <mqtt_parse_incoming+0x2a>
 801455a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 801455e:	2b00      	cmp	r3, #0
 8014560:	da4d      	bge.n	80145fe <mqtt_parse_incoming+0xc6>

      if (fixed_hdr_idx < client->msg_idx) {
 8014562:	7dfa      	ldrb	r2, [r7, #23]
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014568:	429a      	cmp	r2, r3
 801456a:	d206      	bcs.n	801457a <mqtt_parse_incoming+0x42>
        /* parse header from old pbuf (buffered in client->rx_buffer) */
        b = client->rx_buffer[fixed_hdr_idx];
 801456c:	7dfb      	ldrb	r3, [r7, #23]
 801456e:	687a      	ldr	r2, [r7, #4]
 8014570:	4413      	add	r3, r2
 8014572:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8014576:	75bb      	strb	r3, [r7, #22]
 8014578:	e012      	b.n	80145a0 <mqtt_parse_incoming+0x68>
      } else {
        /* parse header from this pbuf and save it in client->rx_buffer in case
           it comes in segmented */
        b = pbuf_get_at(p, in_offset++);
 801457a:	8bfb      	ldrh	r3, [r7, #30]
 801457c:	1c5a      	adds	r2, r3, #1
 801457e:	83fa      	strh	r2, [r7, #30]
 8014580:	4619      	mov	r1, r3
 8014582:	6838      	ldr	r0, [r7, #0]
 8014584:	f002 fcca 	bl	8016f1c <pbuf_get_at>
 8014588:	4603      	mov	r3, r0
 801458a:	75bb      	strb	r3, [r7, #22]
        client->rx_buffer[client->msg_idx++] = b;
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014590:	1c59      	adds	r1, r3, #1
 8014592:	687a      	ldr	r2, [r7, #4]
 8014594:	6691      	str	r1, [r2, #104]	; 0x68
 8014596:	687a      	ldr	r2, [r7, #4]
 8014598:	4413      	add	r3, r2
 801459a:	7dba      	ldrb	r2, [r7, #22]
 801459c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      }
      fixed_hdr_idx++;
 80145a0:	7dfb      	ldrb	r3, [r7, #23]
 80145a2:	3301      	adds	r3, #1
 80145a4:	75fb      	strb	r3, [r7, #23]

      if (fixed_hdr_idx >= 2) {
 80145a6:	7dfb      	ldrb	r3, [r7, #23]
 80145a8:	2b01      	cmp	r3, #1
 80145aa:	f240 8090 	bls.w	80146ce <mqtt_parse_incoming+0x196>
        /* fixed header contains at least 2 bytes but can contain more, depending on
           'remaining length'. All bytes but the last of this have 0x80 set to
           indicate more bytes are coming. */
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_idx - 2) * 7);
 80145ae:	7dbb      	ldrb	r3, [r7, #22]
 80145b0:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 80145b4:	7dfb      	ldrb	r3, [r7, #23]
 80145b6:	1e9a      	subs	r2, r3, #2
 80145b8:	4613      	mov	r3, r2
 80145ba:	00db      	lsls	r3, r3, #3
 80145bc:	1a9b      	subs	r3, r3, r2
 80145be:	fa01 f303 	lsl.w	r3, r1, r3
 80145c2:	69ba      	ldr	r2, [r7, #24]
 80145c4:	4313      	orrs	r3, r2
 80145c6:	61bb      	str	r3, [r7, #24]
        if ((b & 0x80) == 0) {
 80145c8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	db7e      	blt.n	80146ce <mqtt_parse_incoming+0x196>
          /* fixed header is done */
          LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: Remaining length after fixed header: %"U32_F"\n", msg_rem_len));
          if (msg_rem_len == 0) {
 80145d0:	69bb      	ldr	r3, [r7, #24]
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d10b      	bne.n	80145ee <mqtt_parse_incoming+0xb6>
            /* Complete message with no extra headers of payload received */
            mqtt_message_received(client, fixed_hdr_idx, 0, 0);
 80145d6:	7df9      	ldrb	r1, [r7, #23]
 80145d8:	2300      	movs	r3, #0
 80145da:	2200      	movs	r2, #0
 80145dc:	6878      	ldr	r0, [r7, #4]
 80145de:	f7ff fdf3 	bl	80141c8 <mqtt_message_received>
            client->msg_idx = 0;
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	2200      	movs	r2, #0
 80145e6:	669a      	str	r2, [r3, #104]	; 0x68
            fixed_hdr_idx = 0;
 80145e8:	2300      	movs	r3, #0
 80145ea:	75fb      	strb	r3, [r7, #23]
 80145ec:	e06f      	b.n	80146ce <mqtt_parse_incoming+0x196>
          } else {
            /* Bytes remaining in message (changes remaining length if this is
               not the first segment of this message) */
            msg_rem_len = (msg_rem_len + fixed_hdr_idx) - client->msg_idx;
 80145ee:	7dfa      	ldrb	r2, [r7, #23]
 80145f0:	69bb      	ldr	r3, [r7, #24]
 80145f2:	441a      	add	r2, r3
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80145f8:	1ad3      	subs	r3, r2, r3
 80145fa:	61bb      	str	r3, [r7, #24]
      if (fixed_hdr_idx >= 2) {
 80145fc:	e067      	b.n	80146ce <mqtt_parse_incoming+0x196>
      }
    } else {
      /* Fixed header has been parsed, parse variable header */
      u16_t cpy_len, cpy_start, buffer_space;

      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8014602:	7dfb      	ldrb	r3, [r7, #23]
 8014604:	1ad3      	subs	r3, r2, r3
 8014606:	7dfa      	ldrb	r2, [r7, #23]
 8014608:	f1c2 0280 	rsb	r2, r2, #128	; 0x80
 801460c:	fbb3 f1f2 	udiv	r1, r3, r2
 8014610:	fb01 f202 	mul.w	r2, r1, r2
 8014614:	1a9b      	subs	r3, r3, r2
 8014616:	b29a      	uxth	r2, r3
 8014618:	7dfb      	ldrb	r3, [r7, #23]
 801461a:	b29b      	uxth	r3, r3
 801461c:	4413      	add	r3, r2
 801461e:	827b      	strh	r3, [r7, #18]

      /* Allow to copy the lesser one of available length in input data or bytes remaining in message */
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 8014620:	683b      	ldr	r3, [r7, #0]
 8014622:	891a      	ldrh	r2, [r3, #8]
 8014624:	8bfb      	ldrh	r3, [r7, #30]
 8014626:	1ad3      	subs	r3, r2, r3
 8014628:	b29b      	uxth	r3, r3
 801462a:	461a      	mov	r2, r3
 801462c:	69bb      	ldr	r3, [r7, #24]
 801462e:	4293      	cmp	r3, r2
 8014630:	d905      	bls.n	801463e <mqtt_parse_incoming+0x106>
 8014632:	683b      	ldr	r3, [r7, #0]
 8014634:	891a      	ldrh	r2, [r3, #8]
 8014636:	8bfb      	ldrh	r3, [r7, #30]
 8014638:	1ad3      	subs	r3, r2, r3
 801463a:	b29b      	uxth	r3, r3
 801463c:	e001      	b.n	8014642 <mqtt_parse_incoming+0x10a>
 801463e:	69bb      	ldr	r3, [r7, #24]
 8014640:	b29b      	uxth	r3, r3
 8014642:	82bb      	strh	r3, [r7, #20]

      /* Limit to available space in buffer */
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - cpy_start;
 8014644:	8a7b      	ldrh	r3, [r7, #18]
 8014646:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 801464a:	823b      	strh	r3, [r7, #16]
      if (cpy_len > buffer_space) {
 801464c:	8aba      	ldrh	r2, [r7, #20]
 801464e:	8a3b      	ldrh	r3, [r7, #16]
 8014650:	429a      	cmp	r2, r3
 8014652:	d901      	bls.n	8014658 <mqtt_parse_incoming+0x120>
        cpy_len = buffer_space;
 8014654:	8a3b      	ldrh	r3, [r7, #16]
 8014656:	82bb      	strh	r3, [r7, #20]
      }
      pbuf_copy_partial(p, client->rx_buffer + cpy_start, cpy_len, in_offset);
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 801465e:	8a7b      	ldrh	r3, [r7, #18]
 8014660:	18d1      	adds	r1, r2, r3
 8014662:	8bfb      	ldrh	r3, [r7, #30]
 8014664:	8aba      	ldrh	r2, [r7, #20]
 8014666:	6838      	ldr	r0, [r7, #0]
 8014668:	f002 fb8a 	bl	8016d80 <pbuf_copy_partial>

      /* Advance get and put indexes  */
      client->msg_idx += cpy_len;
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8014670:	8abb      	ldrh	r3, [r7, #20]
 8014672:	441a      	add	r2, r3
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	669a      	str	r2, [r3, #104]	; 0x68
      in_offset += cpy_len;
 8014678:	8bfa      	ldrh	r2, [r7, #30]
 801467a:	8abb      	ldrh	r3, [r7, #20]
 801467c:	4413      	add	r3, r2
 801467e:	83fb      	strh	r3, [r7, #30]
      msg_rem_len -= cpy_len;
 8014680:	8abb      	ldrh	r3, [r7, #20]
 8014682:	69ba      	ldr	r2, [r7, #24]
 8014684:	1ad3      	subs	r3, r2, r3
 8014686:	61bb      	str	r3, [r7, #24]

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: msg_idx: %"U32_F", cpy_len: %"U16_F", remaining %"U32_F"\n", client->msg_idx, cpy_len, msg_rem_len));
      if ((msg_rem_len == 0) || (cpy_len == buffer_space)) {
 8014688:	69bb      	ldr	r3, [r7, #24]
 801468a:	2b00      	cmp	r3, #0
 801468c:	d003      	beq.n	8014696 <mqtt_parse_incoming+0x15e>
 801468e:	8aba      	ldrh	r2, [r7, #20]
 8014690:	8a3b      	ldrh	r3, [r7, #16]
 8014692:	429a      	cmp	r2, r3
 8014694:	d11b      	bne.n	80146ce <mqtt_parse_incoming+0x196>
        /* Whole message received or buffer is full */
        mqtt_connection_status_t res = mqtt_message_received(client, fixed_hdr_idx, (cpy_start + cpy_len) - fixed_hdr_idx, msg_rem_len);
 8014696:	8a7a      	ldrh	r2, [r7, #18]
 8014698:	8abb      	ldrh	r3, [r7, #20]
 801469a:	4413      	add	r3, r2
 801469c:	b29a      	uxth	r2, r3
 801469e:	7dfb      	ldrb	r3, [r7, #23]
 80146a0:	b29b      	uxth	r3, r3
 80146a2:	1ad3      	subs	r3, r2, r3
 80146a4:	b29a      	uxth	r2, r3
 80146a6:	7df9      	ldrb	r1, [r7, #23]
 80146a8:	69bb      	ldr	r3, [r7, #24]
 80146aa:	6878      	ldr	r0, [r7, #4]
 80146ac:	f7ff fd8c 	bl	80141c8 <mqtt_message_received>
 80146b0:	4603      	mov	r3, r0
 80146b2:	81fb      	strh	r3, [r7, #14]
        if (res != MQTT_CONNECT_ACCEPTED) {
 80146b4:	89fb      	ldrh	r3, [r7, #14]
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d001      	beq.n	80146be <mqtt_parse_incoming+0x186>
          return res;
 80146ba:	89fb      	ldrh	r3, [r7, #14]
 80146bc:	e00e      	b.n	80146dc <mqtt_parse_incoming+0x1a4>
        }
        if (msg_rem_len == 0) {
 80146be:	69bb      	ldr	r3, [r7, #24]
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d104      	bne.n	80146ce <mqtt_parse_incoming+0x196>
          /* Reset parser state */
          client->msg_idx = 0;
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	2200      	movs	r2, #0
 80146c8:	669a      	str	r2, [r3, #104]	; 0x68
          /* msg_tot_len = 0; */
          fixed_hdr_idx = 0;
 80146ca:	2300      	movs	r3, #0
 80146cc:	75fb      	strb	r3, [r7, #23]
  while (p->tot_len > in_offset) {
 80146ce:	683b      	ldr	r3, [r7, #0]
 80146d0:	891b      	ldrh	r3, [r3, #8]
 80146d2:	8bfa      	ldrh	r2, [r7, #30]
 80146d4:	429a      	cmp	r2, r3
 80146d6:	f4ff af3d 	bcc.w	8014554 <mqtt_parse_incoming+0x1c>
        }
      }
    }
  }
  return MQTT_CONNECT_ACCEPTED;
 80146da:	2300      	movs	r3, #0
}
 80146dc:	4618      	mov	r0, r3
 80146de:	3720      	adds	r7, #32
 80146e0:	46bd      	mov	sp, r7
 80146e2:	bd80      	pop	{r7, pc}

080146e4 <mqtt_tcp_recv_cb>:
 * @param err Passed as return value if not ERR_OK
 * @return ERR_OK or err passed into callback
 */
static err_t
mqtt_tcp_recv_cb(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80146e4:	b580      	push	{r7, lr}
 80146e6:	b086      	sub	sp, #24
 80146e8:	af00      	add	r7, sp, #0
 80146ea:	60f8      	str	r0, [r7, #12]
 80146ec:	60b9      	str	r1, [r7, #8]
 80146ee:	607a      	str	r2, [r7, #4]
 80146f0:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 80146f6:	697b      	ldr	r3, [r7, #20]
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d106      	bne.n	801470a <mqtt_tcp_recv_cb+0x26>
 80146fc:	4b24      	ldr	r3, [pc, #144]	; (8014790 <mqtt_tcp_recv_cb+0xac>)
 80146fe:	f240 32a7 	movw	r2, #935	; 0x3a7
 8014702:	4924      	ldr	r1, [pc, #144]	; (8014794 <mqtt_tcp_recv_cb+0xb0>)
 8014704:	4824      	ldr	r0, [pc, #144]	; (8014798 <mqtt_tcp_recv_cb+0xb4>)
 8014706:	f00b fc2d 	bl	801ff64 <printf>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 801470a:	697b      	ldr	r3, [r7, #20]
 801470c:	68db      	ldr	r3, [r3, #12]
 801470e:	68ba      	ldr	r2, [r7, #8]
 8014710:	429a      	cmp	r2, r3
 8014712:	d006      	beq.n	8014722 <mqtt_tcp_recv_cb+0x3e>
 8014714:	4b1e      	ldr	r3, [pc, #120]	; (8014790 <mqtt_tcp_recv_cb+0xac>)
 8014716:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801471a:	4920      	ldr	r1, [pc, #128]	; (801479c <mqtt_tcp_recv_cb+0xb8>)
 801471c:	481e      	ldr	r0, [pc, #120]	; (8014798 <mqtt_tcp_recv_cb+0xb4>)
 801471e:	f00b fc21 	bl	801ff64 <printf>

  if (p == NULL) {
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d105      	bne.n	8014734 <mqtt_tcp_recv_cb+0x50>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_recv_cb: Recv pbuf=NULL, remote has closed connection\n"));
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 8014728:	f44f 7180 	mov.w	r1, #256	; 0x100
 801472c:	6978      	ldr	r0, [r7, #20]
 801472e:	f7ff fbfb 	bl	8013f28 <mqtt_close>
 8014732:	e027      	b.n	8014784 <mqtt_tcp_recv_cb+0xa0>
  } else {
    mqtt_connection_status_t res;
    if (err != ERR_OK) {
 8014734:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014738:	2b00      	cmp	r3, #0
 801473a:	d005      	beq.n	8014748 <mqtt_tcp_recv_cb+0x64>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_recv_cb: Recv err=%d\n", err));
      pbuf_free(p);
 801473c:	6878      	ldr	r0, [r7, #4]
 801473e:	f002 f929 	bl	8016994 <pbuf_free>
      return err;
 8014742:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014746:	e01e      	b.n	8014786 <mqtt_tcp_recv_cb+0xa2>
    }

    /* Tell remote that data has been received */
    altcp_recved(pcb, p->tot_len);
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	891b      	ldrh	r3, [r3, #8]
 801474c:	4619      	mov	r1, r3
 801474e:	68b8      	ldr	r0, [r7, #8]
 8014750:	f003 f816 	bl	8017780 <tcp_recved>
    res = mqtt_parse_incoming(client, p);
 8014754:	6879      	ldr	r1, [r7, #4]
 8014756:	6978      	ldr	r0, [r7, #20]
 8014758:	f7ff feee 	bl	8014538 <mqtt_parse_incoming>
 801475c:	4603      	mov	r3, r0
 801475e:	827b      	strh	r3, [r7, #18]
    pbuf_free(p);
 8014760:	6878      	ldr	r0, [r7, #4]
 8014762:	f002 f917 	bl	8016994 <pbuf_free>

    if (res != MQTT_CONNECT_ACCEPTED) {
 8014766:	8a7b      	ldrh	r3, [r7, #18]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d004      	beq.n	8014776 <mqtt_tcp_recv_cb+0x92>
      mqtt_close(client, res);
 801476c:	8a7b      	ldrh	r3, [r7, #18]
 801476e:	4619      	mov	r1, r3
 8014770:	6978      	ldr	r0, [r7, #20]
 8014772:	f7ff fbd9 	bl	8013f28 <mqtt_close>
    }
    /* If keep alive functionality is used */
    if (client->keep_alive != 0) {
 8014776:	697b      	ldr	r3, [r7, #20]
 8014778:	885b      	ldrh	r3, [r3, #2]
 801477a:	2b00      	cmp	r3, #0
 801477c:	d002      	beq.n	8014784 <mqtt_tcp_recv_cb+0xa0>
      /* Reset server alive watchdog */
      client->server_watchdog = 0;
 801477e:	697b      	ldr	r3, [r7, #20]
 8014780:	2200      	movs	r2, #0
 8014782:	809a      	strh	r2, [r3, #4]
    }

  }
  return ERR_OK;
 8014784:	2300      	movs	r3, #0
}
 8014786:	4618      	mov	r0, r3
 8014788:	3718      	adds	r7, #24
 801478a:	46bd      	mov	sp, r7
 801478c:	bd80      	pop	{r7, pc}
 801478e:	bf00      	nop
 8014790:	080264cc 	.word	0x080264cc
 8014794:	0802676c 	.word	0x0802676c
 8014798:	08026544 	.word	0x08026544
 801479c:	08026790 	.word	0x08026790

080147a0 <mqtt_tcp_sent_cb>:
 * @param len Number of bytes sent
 * @return ERR_OK
 */
static err_t
mqtt_tcp_sent_cb(void *arg, struct altcp_pcb *tpcb, u16_t len)
{
 80147a0:	b580      	push	{r7, lr}
 80147a2:	b086      	sub	sp, #24
 80147a4:	af00      	add	r7, sp, #0
 80147a6:	60f8      	str	r0, [r7, #12]
 80147a8:	60b9      	str	r1, [r7, #8]
 80147aa:	4613      	mov	r3, r2
 80147ac:	80fb      	strh	r3, [r7, #6]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  if (client->conn_state == MQTT_CONNECTED) {
 80147b2:	697b      	ldr	r3, [r7, #20]
 80147b4:	7a9b      	ldrb	r3, [r3, #10]
 80147b6:	2b03      	cmp	r3, #3
 80147b8:	d127      	bne.n	801480a <mqtt_tcp_sent_cb+0x6a>
    struct mqtt_request_t *r;

    /* Reset keep-alive send timer and server watchdog */
    client->cyclic_tick = 0;
 80147ba:	697b      	ldr	r3, [r7, #20]
 80147bc:	2200      	movs	r2, #0
 80147be:	801a      	strh	r2, [r3, #0]
    client->server_watchdog = 0;
 80147c0:	697b      	ldr	r3, [r7, #20]
 80147c2:	2200      	movs	r2, #0
 80147c4:	809a      	strh	r2, [r3, #4]
    /* QoS 0 publish has no response from server, so call its callbacks here */
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 80147c6:	e00d      	b.n	80147e4 <mqtt_tcp_sent_cb+0x44>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_sent_cb: Calling QoS 0 publish complete callback\n"));
      if (r->cb != NULL) {
 80147c8:	693b      	ldr	r3, [r7, #16]
 80147ca:	685b      	ldr	r3, [r3, #4]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d006      	beq.n	80147de <mqtt_tcp_sent_cb+0x3e>
        r->cb(r->arg, ERR_OK);
 80147d0:	693b      	ldr	r3, [r7, #16]
 80147d2:	685b      	ldr	r3, [r3, #4]
 80147d4:	693a      	ldr	r2, [r7, #16]
 80147d6:	6892      	ldr	r2, [r2, #8]
 80147d8:	2100      	movs	r1, #0
 80147da:	4610      	mov	r0, r2
 80147dc:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 80147de:	6938      	ldr	r0, [r7, #16]
 80147e0:	f7ff f9a8 	bl	8013b34 <mqtt_delete_request>
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 80147e4:	697b      	ldr	r3, [r7, #20]
 80147e6:	3318      	adds	r3, #24
 80147e8:	2100      	movs	r1, #0
 80147ea:	4618      	mov	r0, r3
 80147ec:	f7ff f9b2 	bl	8013b54 <mqtt_take_request>
 80147f0:	6138      	str	r0, [r7, #16]
 80147f2:	693b      	ldr	r3, [r7, #16]
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d1e7      	bne.n	80147c8 <mqtt_tcp_sent_cb+0x28>
    }
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, client->conn);
 80147f8:	697b      	ldr	r3, [r7, #20]
 80147fa:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 80147fe:	697b      	ldr	r3, [r7, #20]
 8014800:	68db      	ldr	r3, [r3, #12]
 8014802:	4619      	mov	r1, r3
 8014804:	4610      	mov	r0, r2
 8014806:	f7ff f84f 	bl	80138a8 <mqtt_output_send>
  }
  return ERR_OK;
 801480a:	2300      	movs	r3, #0
}
 801480c:	4618      	mov	r0, r3
 801480e:	3718      	adds	r7, #24
 8014810:	46bd      	mov	sp, r7
 8014812:	bd80      	pop	{r7, pc}

08014814 <mqtt_tcp_err_cb>:
 * @param arg MQTT client
 * @param err Error encountered
 */
static void
mqtt_tcp_err_cb(void *arg, err_t err)
{
 8014814:	b580      	push	{r7, lr}
 8014816:	b084      	sub	sp, #16
 8014818:	af00      	add	r7, sp, #0
 801481a:	6078      	str	r0, [r7, #4]
 801481c:	460b      	mov	r3, r1
 801481e:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err); /* only used for debug output */
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_err_cb: TCP error callback: error %d, arg: %p\n", err, arg));
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 8014824:	68fb      	ldr	r3, [r7, #12]
 8014826:	2b00      	cmp	r3, #0
 8014828:	d106      	bne.n	8014838 <mqtt_tcp_err_cb+0x24>
 801482a:	4b09      	ldr	r3, [pc, #36]	; (8014850 <mqtt_tcp_err_cb+0x3c>)
 801482c:	f240 32f6 	movw	r2, #1014	; 0x3f6
 8014830:	4908      	ldr	r1, [pc, #32]	; (8014854 <mqtt_tcp_err_cb+0x40>)
 8014832:	4809      	ldr	r0, [pc, #36]	; (8014858 <mqtt_tcp_err_cb+0x44>)
 8014834:	f00b fb96 	bl	801ff64 <printf>
  /* Set conn to null before calling close as pcb is already deallocated*/
  client->conn = 0;
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	2200      	movs	r2, #0
 801483c:	60da      	str	r2, [r3, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 801483e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014842:	68f8      	ldr	r0, [r7, #12]
 8014844:	f7ff fb70 	bl	8013f28 <mqtt_close>
}
 8014848:	bf00      	nop
 801484a:	3710      	adds	r7, #16
 801484c:	46bd      	mov	sp, r7
 801484e:	bd80      	pop	{r7, pc}
 8014850:	080264cc 	.word	0x080264cc
 8014854:	080267b8 	.word	0x080267b8
 8014858:	08026544 	.word	0x08026544

0801485c <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct altcp_pcb *tpcb)
{
 801485c:	b580      	push	{r7, lr}
 801485e:	b084      	sub	sp, #16
 8014860:	af00      	add	r7, sp, #0
 8014862:	6078      	str	r0, [r7, #4]
 8014864:	6039      	str	r1, [r7, #0]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	60fb      	str	r3, [r7, #12]
  if (client->conn_state == MQTT_CONNECTED) {
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	7a9b      	ldrb	r3, [r3, #10]
 801486e:	2b03      	cmp	r3, #3
 8014870:	d105      	bne.n	801487e <mqtt_tcp_poll_cb+0x22>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	33ec      	adds	r3, #236	; 0xec
 8014876:	6839      	ldr	r1, [r7, #0]
 8014878:	4618      	mov	r0, r3
 801487a:	f7ff f815 	bl	80138a8 <mqtt_output_send>
  }
  return ERR_OK;
 801487e:	2300      	movs	r3, #0
}
 8014880:	4618      	mov	r0, r3
 8014882:	3710      	adds	r7, #16
 8014884:	46bd      	mov	sp, r7
 8014886:	bd80      	pop	{r7, pc}

08014888 <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct altcp_pcb *tpcb, err_t err)
{
 8014888:	b580      	push	{r7, lr}
 801488a:	b086      	sub	sp, #24
 801488c:	af00      	add	r7, sp, #0
 801488e:	60f8      	str	r0, [r7, #12]
 8014890:	60b9      	str	r1, [r7, #8]
 8014892:	4613      	mov	r3, r2
 8014894:	71fb      	strb	r3, [r7, #7]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	617b      	str	r3, [r7, #20]

  if (err != ERR_OK) {
 801489a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d002      	beq.n	80148a8 <mqtt_tcp_connect_cb+0x20>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
    return err;
 80148a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80148a6:	e025      	b.n	80148f4 <mqtt_tcp_connect_cb+0x6c>
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 80148a8:	697b      	ldr	r3, [r7, #20]
 80148aa:	2200      	movs	r2, #0
 80148ac:	669a      	str	r2, [r3, #104]	; 0x68

  /* Setup TCP callbacks */
  altcp_recv(tpcb, mqtt_tcp_recv_cb);
 80148ae:	4913      	ldr	r1, [pc, #76]	; (80148fc <mqtt_tcp_connect_cb+0x74>)
 80148b0:	68b8      	ldr	r0, [r7, #8]
 80148b2:	f003 ff55 	bl	8018760 <tcp_recv>
  altcp_sent(tpcb, mqtt_tcp_sent_cb);
 80148b6:	4912      	ldr	r1, [pc, #72]	; (8014900 <mqtt_tcp_connect_cb+0x78>)
 80148b8:	68b8      	ldr	r0, [r7, #8]
 80148ba:	f003 ff73 	bl	80187a4 <tcp_sent>
  altcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 80148be:	2202      	movs	r2, #2
 80148c0:	4910      	ldr	r1, [pc, #64]	; (8014904 <mqtt_tcp_connect_cb+0x7c>)
 80148c2:	68b8      	ldr	r0, [r7, #8]
 80148c4:	f003 ffb2 	bl	801882c <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_connect_cb: TCP connection established to server\n"));
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 80148c8:	697b      	ldr	r3, [r7, #20]
 80148ca:	2202      	movs	r2, #2
 80148cc:	729a      	strb	r2, [r3, #10]

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, client);
 80148ce:	697a      	ldr	r2, [r7, #20]
 80148d0:	490d      	ldr	r1, [pc, #52]	; (8014908 <mqtt_tcp_connect_cb+0x80>)
 80148d2:	f241 3088 	movw	r0, #5000	; 0x1388
 80148d6:	f008 fc9d 	bl	801d214 <sys_timeout>
  client->cyclic_tick = 0;
 80148da:	697b      	ldr	r3, [r7, #20]
 80148dc:	2200      	movs	r2, #0
 80148de:	801a      	strh	r2, [r3, #0]

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 80148e0:	697b      	ldr	r3, [r7, #20]
 80148e2:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 80148e6:	697b      	ldr	r3, [r7, #20]
 80148e8:	68db      	ldr	r3, [r3, #12]
 80148ea:	4619      	mov	r1, r3
 80148ec:	4610      	mov	r0, r2
 80148ee:	f7fe ffdb 	bl	80138a8 <mqtt_output_send>

  return ERR_OK;
 80148f2:	2300      	movs	r3, #0
}
 80148f4:	4618      	mov	r0, r3
 80148f6:	3718      	adds	r7, #24
 80148f8:	46bd      	mov	sp, r7
 80148fa:	bd80      	pop	{r7, pc}
 80148fc:	080146e5 	.word	0x080146e5
 8014900:	080147a1 	.word	0x080147a1
 8014904:	0801485d 	.word	0x0801485d
 8014908:	08013fe9 	.word	0x08013fe9

0801490c <mqtt_publish>:
 *         ERR_MEM if short on memory
 */
err_t
mqtt_publish(mqtt_client_t *client, const char *topic, const void *payload, u16_t payload_length, u8_t qos, u8_t retain,
             mqtt_request_cb_t cb, void *arg)
{
 801490c:	b580      	push	{r7, lr}
 801490e:	b08c      	sub	sp, #48	; 0x30
 8014910:	af02      	add	r7, sp, #8
 8014912:	60f8      	str	r0, [r7, #12]
 8014914:	60b9      	str	r1, [r7, #8]
 8014916:	607a      	str	r2, [r7, #4]
 8014918:	807b      	strh	r3, [r7, #2]
  size_t total_len;
  u16_t topic_len;
  u16_t remaining_length;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_publish: client != NULL", client);
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	2b00      	cmp	r3, #0
 801491e:	d106      	bne.n	801492e <mqtt_publish+0x22>
 8014920:	4b5d      	ldr	r3, [pc, #372]	; (8014a98 <mqtt_publish+0x18c>)
 8014922:	f240 4254 	movw	r2, #1108	; 0x454
 8014926:	495d      	ldr	r1, [pc, #372]	; (8014a9c <mqtt_publish+0x190>)
 8014928:	485d      	ldr	r0, [pc, #372]	; (8014aa0 <mqtt_publish+0x194>)
 801492a:	f00b fb1b 	bl	801ff64 <printf>
  LWIP_ASSERT("mqtt_publish: topic != NULL", topic);
 801492e:	68bb      	ldr	r3, [r7, #8]
 8014930:	2b00      	cmp	r3, #0
 8014932:	d106      	bne.n	8014942 <mqtt_publish+0x36>
 8014934:	4b58      	ldr	r3, [pc, #352]	; (8014a98 <mqtt_publish+0x18c>)
 8014936:	f240 4255 	movw	r2, #1109	; 0x455
 801493a:	495a      	ldr	r1, [pc, #360]	; (8014aa4 <mqtt_publish+0x198>)
 801493c:	4858      	ldr	r0, [pc, #352]	; (8014aa0 <mqtt_publish+0x194>)
 801493e:	f00b fb11 	bl	801ff64 <printf>
  LWIP_ERROR("mqtt_publish: TCP disconnected", (client->conn_state != TCP_DISCONNECTED), return ERR_CONN);
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	7a9b      	ldrb	r3, [r3, #10]
 8014946:	2b00      	cmp	r3, #0
 8014948:	d109      	bne.n	801495e <mqtt_publish+0x52>
 801494a:	4b53      	ldr	r3, [pc, #332]	; (8014a98 <mqtt_publish+0x18c>)
 801494c:	f240 4256 	movw	r2, #1110	; 0x456
 8014950:	4955      	ldr	r1, [pc, #340]	; (8014aa8 <mqtt_publish+0x19c>)
 8014952:	4853      	ldr	r0, [pc, #332]	; (8014aa0 <mqtt_publish+0x194>)
 8014954:	f00b fb06 	bl	801ff64 <printf>
 8014958:	f06f 030a 	mvn.w	r3, #10
 801495c:	e097      	b.n	8014a8e <mqtt_publish+0x182>

  topic_strlen = strlen(topic);
 801495e:	68b8      	ldr	r0, [r7, #8]
 8014960:	f7eb fc46 	bl	80001f0 <strlen>
 8014964:	61f8      	str	r0, [r7, #28]
  LWIP_ERROR("mqtt_publish: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 8014966:	69fb      	ldr	r3, [r7, #28]
 8014968:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801496c:	4293      	cmp	r3, r2
 801496e:	d909      	bls.n	8014984 <mqtt_publish+0x78>
 8014970:	4b49      	ldr	r3, [pc, #292]	; (8014a98 <mqtt_publish+0x18c>)
 8014972:	f240 4259 	movw	r2, #1113	; 0x459
 8014976:	494d      	ldr	r1, [pc, #308]	; (8014aac <mqtt_publish+0x1a0>)
 8014978:	4849      	ldr	r0, [pc, #292]	; (8014aa0 <mqtt_publish+0x194>)
 801497a:	f00b faf3 	bl	801ff64 <printf>
 801497e:	f06f 030f 	mvn.w	r3, #15
 8014982:	e084      	b.n	8014a8e <mqtt_publish+0x182>
  topic_len = (u16_t)topic_strlen;
 8014984:	69fb      	ldr	r3, [r7, #28]
 8014986:	837b      	strh	r3, [r7, #26]
  total_len = 2 + topic_len + payload_length;
 8014988:	8b7b      	ldrh	r3, [r7, #26]
 801498a:	1c9a      	adds	r2, r3, #2
 801498c:	887b      	ldrh	r3, [r7, #2]
 801498e:	4413      	add	r3, r2
 8014990:	623b      	str	r3, [r7, #32]

  if (qos > 0) {
 8014992:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8014996:	2b00      	cmp	r3, #0
 8014998:	d008      	beq.n	80149ac <mqtt_publish+0xa0>
    total_len += 2;
 801499a:	6a3b      	ldr	r3, [r7, #32]
 801499c:	3302      	adds	r3, #2
 801499e:	623b      	str	r3, [r7, #32]
    /* Generate pkt_id id for QoS1 and 2 */
    pkt_id = msg_generate_packet_id(client);
 80149a0:	68f8      	ldr	r0, [r7, #12]
 80149a2:	f7fe feed 	bl	8013780 <msg_generate_packet_id>
 80149a6:	4603      	mov	r3, r0
 80149a8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80149aa:	e001      	b.n	80149b0 <mqtt_publish+0xa4>
  } else {
    /* Use reserved value pkt_id 0 for QoS 0 in request handle */
    pkt_id = 0;
 80149ac:	2300      	movs	r3, #0
 80149ae:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  LWIP_ERROR("mqtt_publish: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 80149b0:	6a3b      	ldr	r3, [r7, #32]
 80149b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80149b6:	d309      	bcc.n	80149cc <mqtt_publish+0xc0>
 80149b8:	4b37      	ldr	r3, [pc, #220]	; (8014a98 <mqtt_publish+0x18c>)
 80149ba:	f240 4265 	movw	r2, #1125	; 0x465
 80149be:	493c      	ldr	r1, [pc, #240]	; (8014ab0 <mqtt_publish+0x1a4>)
 80149c0:	4837      	ldr	r0, [pc, #220]	; (8014aa0 <mqtt_publish+0x194>)
 80149c2:	f00b facf 	bl	801ff64 <printf>
 80149c6:	f06f 030f 	mvn.w	r3, #15
 80149ca:	e060      	b.n	8014a8e <mqtt_publish+0x182>
  remaining_length = (u16_t)total_len;
 80149cc:	6a3b      	ldr	r3, [r7, #32]
 80149ce:	833b      	strh	r3, [r7, #24]

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_publish: Publish with payload length %d to topic \"%s\"\n", payload_length, topic));

  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	f103 001c 	add.w	r0, r3, #28
 80149d6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80149d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149da:	9300      	str	r3, [sp, #0]
 80149dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149de:	2104      	movs	r1, #4
 80149e0:	f7ff f816 	bl	8013a10 <mqtt_create_request>
 80149e4:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 80149e6:	697b      	ldr	r3, [r7, #20]
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d102      	bne.n	80149f2 <mqtt_publish+0xe6>
    return ERR_MEM;
 80149ec:	f04f 33ff 	mov.w	r3, #4294967295
 80149f0:	e04d      	b.n	8014a8e <mqtt_publish+0x182>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	33ec      	adds	r3, #236	; 0xec
 80149f6:	8b3a      	ldrh	r2, [r7, #24]
 80149f8:	4611      	mov	r1, r2
 80149fa:	4618      	mov	r0, r3
 80149fc:	f7ff fa62 	bl	8013ec4 <mqtt_output_check_space>
 8014a00:	4603      	mov	r3, r0
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d105      	bne.n	8014a12 <mqtt_publish+0x106>
    mqtt_delete_request(r);
 8014a06:	6978      	ldr	r0, [r7, #20]
 8014a08:	f7ff f894 	bl	8013b34 <mqtt_delete_request>
    return ERR_MEM;
 8014a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8014a10:	e03d      	b.n	8014a8e <mqtt_publish+0x182>
  }
  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PUBLISH, 0, qos, retain, remaining_length);
 8014a12:	68fb      	ldr	r3, [r7, #12]
 8014a14:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8014a18:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8014a1c:	8b3b      	ldrh	r3, [r7, #24]
 8014a1e:	9301      	str	r3, [sp, #4]
 8014a20:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8014a24:	9300      	str	r3, [sp, #0]
 8014a26:	4613      	mov	r3, r2
 8014a28:	2200      	movs	r2, #0
 8014a2a:	2103      	movs	r1, #3
 8014a2c:	f7ff f9ff 	bl	8013e2e <mqtt_output_append_fixed_header>

  /* Append Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	33ec      	adds	r3, #236	; 0xec
 8014a34:	8b7a      	ldrh	r2, [r7, #26]
 8014a36:	68b9      	ldr	r1, [r7, #8]
 8014a38:	4618      	mov	r0, r3
 8014a3a:	f7ff f9cc 	bl	8013dd6 <mqtt_output_append_string>

  /* Append packet if for QoS 1 and 2*/
  if (qos > 0) {
 8014a3e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d006      	beq.n	8014a54 <mqtt_publish+0x148>
    mqtt_output_append_u16(&client->output, pkt_id);
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	33ec      	adds	r3, #236	; 0xec
 8014a4a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014a4c:	4611      	mov	r1, r2
 8014a4e:	4618      	mov	r0, r3
 8014a50:	f7ff f98b 	bl	8013d6a <mqtt_output_append_u16>
  }

  /* Append optional publish payload */
  if ((payload != NULL) && (payload_length > 0)) {
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d009      	beq.n	8014a6e <mqtt_publish+0x162>
 8014a5a:	887b      	ldrh	r3, [r7, #2]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d006      	beq.n	8014a6e <mqtt_publish+0x162>
    mqtt_output_append_buf(&client->output, payload, payload_length);
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	33ec      	adds	r3, #236	; 0xec
 8014a64:	887a      	ldrh	r2, [r7, #2]
 8014a66:	6879      	ldr	r1, [r7, #4]
 8014a68:	4618      	mov	r0, r3
 8014a6a:	f7ff f996 	bl	8013d9a <mqtt_output_append_buf>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	3318      	adds	r3, #24
 8014a72:	6979      	ldr	r1, [r7, #20]
 8014a74:	4618      	mov	r0, r3
 8014a76:	f7ff f811 	bl	8013a9c <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8014a80:	68fb      	ldr	r3, [r7, #12]
 8014a82:	68db      	ldr	r3, [r3, #12]
 8014a84:	4619      	mov	r1, r3
 8014a86:	4610      	mov	r0, r2
 8014a88:	f7fe ff0e 	bl	80138a8 <mqtt_output_send>
  return ERR_OK;
 8014a8c:	2300      	movs	r3, #0
}
 8014a8e:	4618      	mov	r0, r3
 8014a90:	3728      	adds	r7, #40	; 0x28
 8014a92:	46bd      	mov	sp, r7
 8014a94:	bd80      	pop	{r7, pc}
 8014a96:	bf00      	nop
 8014a98:	080264cc 	.word	0x080264cc
 8014a9c:	080267d8 	.word	0x080267d8
 8014aa0:	08026544 	.word	0x08026544
 8014aa4:	080267f8 	.word	0x080267f8
 8014aa8:	08026814 	.word	0x08026814
 8014aac:	08026834 	.word	0x08026834
 8014ab0:	08026858 	.word	0x08026858

08014ab4 <mqtt_sub_unsub>:
 * @param sub 1 for subscribe, 0 for unsubscribe
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_sub_unsub(mqtt_client_t *client, const char *topic, u8_t qos, mqtt_request_cb_t cb, void *arg, u8_t sub)
{
 8014ab4:	b580      	push	{r7, lr}
 8014ab6:	b08c      	sub	sp, #48	; 0x30
 8014ab8:	af02      	add	r7, sp, #8
 8014aba:	60f8      	str	r0, [r7, #12]
 8014abc:	60b9      	str	r1, [r7, #8]
 8014abe:	603b      	str	r3, [r7, #0]
 8014ac0:	4613      	mov	r3, r2
 8014ac2:	71fb      	strb	r3, [r7, #7]
  u16_t remaining_length;
  u16_t pkt_id;
  struct mqtt_request_t *r;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_sub_unsub: client != NULL", client);
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d106      	bne.n	8014ad8 <mqtt_sub_unsub+0x24>
 8014aca:	4b5e      	ldr	r3, [pc, #376]	; (8014c44 <mqtt_sub_unsub+0x190>)
 8014acc:	f240 429f 	movw	r2, #1183	; 0x49f
 8014ad0:	495d      	ldr	r1, [pc, #372]	; (8014c48 <mqtt_sub_unsub+0x194>)
 8014ad2:	485e      	ldr	r0, [pc, #376]	; (8014c4c <mqtt_sub_unsub+0x198>)
 8014ad4:	f00b fa46 	bl	801ff64 <printf>
  LWIP_ASSERT("mqtt_sub_unsub: topic != NULL", topic);
 8014ad8:	68bb      	ldr	r3, [r7, #8]
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d106      	bne.n	8014aec <mqtt_sub_unsub+0x38>
 8014ade:	4b59      	ldr	r3, [pc, #356]	; (8014c44 <mqtt_sub_unsub+0x190>)
 8014ae0:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
 8014ae4:	495a      	ldr	r1, [pc, #360]	; (8014c50 <mqtt_sub_unsub+0x19c>)
 8014ae6:	4859      	ldr	r0, [pc, #356]	; (8014c4c <mqtt_sub_unsub+0x198>)
 8014ae8:	f00b fa3c 	bl	801ff64 <printf>

  topic_strlen = strlen(topic);
 8014aec:	68b8      	ldr	r0, [r7, #8]
 8014aee:	f7eb fb7f 	bl	80001f0 <strlen>
 8014af2:	6278      	str	r0, [r7, #36]	; 0x24
  LWIP_ERROR("mqtt_sub_unsub: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 8014af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014af6:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8014afa:	4293      	cmp	r3, r2
 8014afc:	d909      	bls.n	8014b12 <mqtt_sub_unsub+0x5e>
 8014afe:	4b51      	ldr	r3, [pc, #324]	; (8014c44 <mqtt_sub_unsub+0x190>)
 8014b00:	f240 42a3 	movw	r2, #1187	; 0x4a3
 8014b04:	4953      	ldr	r1, [pc, #332]	; (8014c54 <mqtt_sub_unsub+0x1a0>)
 8014b06:	4851      	ldr	r0, [pc, #324]	; (8014c4c <mqtt_sub_unsub+0x198>)
 8014b08:	f00b fa2c 	bl	801ff64 <printf>
 8014b0c:	f06f 030f 	mvn.w	r3, #15
 8014b10:	e093      	b.n	8014c3a <mqtt_sub_unsub+0x186>
  topic_len = (u16_t)topic_strlen;
 8014b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b14:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Topic string, pkt_id, qos for subscribe */
  total_len =  topic_len + 2 + 2 + (sub != 0);
 8014b16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014b18:	3304      	adds	r3, #4
 8014b1a:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8014b1e:	2a00      	cmp	r2, #0
 8014b20:	bf14      	ite	ne
 8014b22:	2201      	movne	r2, #1
 8014b24:	2200      	moveq	r2, #0
 8014b26:	b2d2      	uxtb	r2, r2
 8014b28:	4413      	add	r3, r2
 8014b2a:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("mqtt_sub_unsub: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 8014b2c:	69fb      	ldr	r3, [r7, #28]
 8014b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014b32:	d309      	bcc.n	8014b48 <mqtt_sub_unsub+0x94>
 8014b34:	4b43      	ldr	r3, [pc, #268]	; (8014c44 <mqtt_sub_unsub+0x190>)
 8014b36:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8014b3a:	4947      	ldr	r1, [pc, #284]	; (8014c58 <mqtt_sub_unsub+0x1a4>)
 8014b3c:	4843      	ldr	r0, [pc, #268]	; (8014c4c <mqtt_sub_unsub+0x198>)
 8014b3e:	f00b fa11 	bl	801ff64 <printf>
 8014b42:	f06f 030f 	mvn.w	r3, #15
 8014b46:	e078      	b.n	8014c3a <mqtt_sub_unsub+0x186>
  remaining_length = (u16_t)total_len;
 8014b48:	69fb      	ldr	r3, [r7, #28]
 8014b4a:	837b      	strh	r3, [r7, #26]

  LWIP_ASSERT("mqtt_sub_unsub: qos < 3", qos < 3);
 8014b4c:	79fb      	ldrb	r3, [r7, #7]
 8014b4e:	2b02      	cmp	r3, #2
 8014b50:	d906      	bls.n	8014b60 <mqtt_sub_unsub+0xac>
 8014b52:	4b3c      	ldr	r3, [pc, #240]	; (8014c44 <mqtt_sub_unsub+0x190>)
 8014b54:	f240 42aa 	movw	r2, #1194	; 0x4aa
 8014b58:	4940      	ldr	r1, [pc, #256]	; (8014c5c <mqtt_sub_unsub+0x1a8>)
 8014b5a:	483c      	ldr	r0, [pc, #240]	; (8014c4c <mqtt_sub_unsub+0x198>)
 8014b5c:	f00b fa02 	bl	801ff64 <printf>
  if (client->conn_state == TCP_DISCONNECTED) {
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	7a9b      	ldrb	r3, [r3, #10]
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d102      	bne.n	8014b6e <mqtt_sub_unsub+0xba>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_sub_unsub: Can not (un)subscribe in disconnected state\n"));
    return ERR_CONN;
 8014b68:	f06f 030a 	mvn.w	r3, #10
 8014b6c:	e065      	b.n	8014c3a <mqtt_sub_unsub+0x186>
  }

  pkt_id = msg_generate_packet_id(client);
 8014b6e:	68f8      	ldr	r0, [r7, #12]
 8014b70:	f7fe fe06 	bl	8013780 <msg_generate_packet_id>
 8014b74:	4603      	mov	r3, r0
 8014b76:	833b      	strh	r3, [r7, #24]
  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	f103 001c 	add.w	r0, r3, #28
 8014b7e:	8b3a      	ldrh	r2, [r7, #24]
 8014b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b82:	9300      	str	r3, [sp, #0]
 8014b84:	683b      	ldr	r3, [r7, #0]
 8014b86:	2104      	movs	r1, #4
 8014b88:	f7fe ff42 	bl	8013a10 <mqtt_create_request>
 8014b8c:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 8014b8e:	697b      	ldr	r3, [r7, #20]
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d102      	bne.n	8014b9a <mqtt_sub_unsub+0xe6>
    return ERR_MEM;
 8014b94:	f04f 33ff 	mov.w	r3, #4294967295
 8014b98:	e04f      	b.n	8014c3a <mqtt_sub_unsub+0x186>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	33ec      	adds	r3, #236	; 0xec
 8014b9e:	8b7a      	ldrh	r2, [r7, #26]
 8014ba0:	4611      	mov	r1, r2
 8014ba2:	4618      	mov	r0, r3
 8014ba4:	f7ff f98e 	bl	8013ec4 <mqtt_output_check_space>
 8014ba8:	4603      	mov	r3, r0
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d105      	bne.n	8014bba <mqtt_sub_unsub+0x106>
    mqtt_delete_request(r);
 8014bae:	6978      	ldr	r0, [r7, #20]
 8014bb0:	f7fe ffc0 	bl	8013b34 <mqtt_delete_request>
    return ERR_MEM;
 8014bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8014bb8:	e03f      	b.n	8014c3a <mqtt_sub_unsub+0x186>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_sub_unsub: Client (un)subscribe to topic \"%s\", id: %d\n", topic, pkt_id));

  mqtt_output_append_fixed_header(&client->output, sub ? MQTT_MSG_TYPE_SUBSCRIBE : MQTT_MSG_TYPE_UNSUBSCRIBE, 0, 1, 0, remaining_length);
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8014bc0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d001      	beq.n	8014bcc <mqtt_sub_unsub+0x118>
 8014bc8:	2108      	movs	r1, #8
 8014bca:	e000      	b.n	8014bce <mqtt_sub_unsub+0x11a>
 8014bcc:	210a      	movs	r1, #10
 8014bce:	8b7b      	ldrh	r3, [r7, #26]
 8014bd0:	9301      	str	r3, [sp, #4]
 8014bd2:	2300      	movs	r3, #0
 8014bd4:	9300      	str	r3, [sp, #0]
 8014bd6:	2301      	movs	r3, #1
 8014bd8:	2200      	movs	r2, #0
 8014bda:	f7ff f928 	bl	8013e2e <mqtt_output_append_fixed_header>
  /* Packet id */
  mqtt_output_append_u16(&client->output, pkt_id);
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	33ec      	adds	r3, #236	; 0xec
 8014be2:	8b3a      	ldrh	r2, [r7, #24]
 8014be4:	4611      	mov	r1, r2
 8014be6:	4618      	mov	r0, r3
 8014be8:	f7ff f8bf 	bl	8013d6a <mqtt_output_append_u16>
  /* Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	33ec      	adds	r3, #236	; 0xec
 8014bf0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014bf2:	68b9      	ldr	r1, [r7, #8]
 8014bf4:	4618      	mov	r0, r3
 8014bf6:	f7ff f8ee 	bl	8013dd6 <mqtt_output_append_string>
  /* QoS */
  if (sub != 0) {
 8014bfa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d00b      	beq.n	8014c1a <mqtt_sub_unsub+0x166>
    mqtt_output_append_u8(&client->output, LWIP_MIN(qos, 2));
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8014c08:	79fb      	ldrb	r3, [r7, #7]
 8014c0a:	2b02      	cmp	r3, #2
 8014c0c:	bf28      	it	cs
 8014c0e:	2302      	movcs	r3, #2
 8014c10:	b2db      	uxtb	r3, r3
 8014c12:	4619      	mov	r1, r3
 8014c14:	4610      	mov	r0, r2
 8014c16:	f7ff f899 	bl	8013d4c <mqtt_output_append_u8>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	3318      	adds	r3, #24
 8014c1e:	6979      	ldr	r1, [r7, #20]
 8014c20:	4618      	mov	r0, r3
 8014c22:	f7fe ff3b 	bl	8013a9c <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	68db      	ldr	r3, [r3, #12]
 8014c30:	4619      	mov	r1, r3
 8014c32:	4610      	mov	r0, r2
 8014c34:	f7fe fe38 	bl	80138a8 <mqtt_output_send>
  return ERR_OK;
 8014c38:	2300      	movs	r3, #0
}
 8014c3a:	4618      	mov	r0, r3
 8014c3c:	3728      	adds	r7, #40	; 0x28
 8014c3e:	46bd      	mov	sp, r7
 8014c40:	bd80      	pop	{r7, pc}
 8014c42:	bf00      	nop
 8014c44:	080264cc 	.word	0x080264cc
 8014c48:	0802687c 	.word	0x0802687c
 8014c4c:	08026544 	.word	0x08026544
 8014c50:	0802689c 	.word	0x0802689c
 8014c54:	080268bc 	.word	0x080268bc
 8014c58:	080268e4 	.word	0x080268e4
 8014c5c:	0802690c 	.word	0x0802690c

08014c60 <mqtt_set_inpub_callback>:
 * @param arg User supplied argument to both callbacks
 */
void
mqtt_set_inpub_callback(mqtt_client_t *client, mqtt_incoming_publish_cb_t pub_cb,
                        mqtt_incoming_data_cb_t data_cb, void *arg)
{
 8014c60:	b580      	push	{r7, lr}
 8014c62:	b084      	sub	sp, #16
 8014c64:	af00      	add	r7, sp, #0
 8014c66:	60f8      	str	r0, [r7, #12]
 8014c68:	60b9      	str	r1, [r7, #8]
 8014c6a:	607a      	str	r2, [r7, #4]
 8014c6c:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_set_inpub_callback: client != NULL", client != NULL);
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d106      	bne.n	8014c82 <mqtt_set_inpub_callback+0x22>
 8014c74:	4b09      	ldr	r3, [pc, #36]	; (8014c9c <mqtt_set_inpub_callback+0x3c>)
 8014c76:	f240 42da 	movw	r2, #1242	; 0x4da
 8014c7a:	4909      	ldr	r1, [pc, #36]	; (8014ca0 <mqtt_set_inpub_callback+0x40>)
 8014c7c:	4809      	ldr	r0, [pc, #36]	; (8014ca4 <mqtt_set_inpub_callback+0x44>)
 8014c7e:	f00b f971 	bl	801ff64 <printf>
  client->data_cb = data_cb;
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	687a      	ldr	r2, [r7, #4]
 8014c86:	661a      	str	r2, [r3, #96]	; 0x60
  client->pub_cb = pub_cb;
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	68ba      	ldr	r2, [r7, #8]
 8014c8c:	665a      	str	r2, [r3, #100]	; 0x64
  client->inpub_arg = arg;
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	683a      	ldr	r2, [r7, #0]
 8014c92:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8014c94:	bf00      	nop
 8014c96:	3710      	adds	r7, #16
 8014c98:	46bd      	mov	sp, r7
 8014c9a:	bd80      	pop	{r7, pc}
 8014c9c:	080264cc 	.word	0x080264cc
 8014ca0:	08026924 	.word	0x08026924
 8014ca4:	08026544 	.word	0x08026544

08014ca8 <mqtt_client_new>:
 * Create a new MQTT client instance
 * @return Pointer to instance on success, NULL otherwise
 */
mqtt_client_t *
mqtt_client_new(void)
{
 8014ca8:	b580      	push	{r7, lr}
 8014caa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
  return (mqtt_client_t *)mem_calloc(1, sizeof(mqtt_client_t));
 8014cac:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8014cb0:	2001      	movs	r0, #1
 8014cb2:	f000 feb9 	bl	8015a28 <mem_calloc>
 8014cb6:	4603      	mov	r3, r0
}
 8014cb8:	4618      	mov	r0, r3
 8014cba:	bd80      	pop	{r7, pc}

08014cbc <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 8014cbc:	b580      	push	{r7, lr}
 8014cbe:	b08c      	sub	sp, #48	; 0x30
 8014cc0:	af02      	add	r7, sp, #8
 8014cc2:	60f8      	str	r0, [r7, #12]
 8014cc4:	60b9      	str	r1, [r7, #8]
 8014cc6:	603b      	str	r3, [r7, #0]
 8014cc8:	4613      	mov	r3, r2
 8014cca:	80fb      	strh	r3, [r7, #6]
  err_t err;
  size_t len;
  u16_t client_id_length;
  /* Length is the sum of 2+"MQTT", protocol level, flags and keep alive */
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 8014ccc:	230a      	movs	r3, #10
 8014cce:	84bb      	strh	r3, [r7, #36]	; 0x24
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 8014cd0:	2300      	movs	r3, #0
 8014cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014cd6:	2300      	movs	r3, #0
 8014cd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014cdc:	2300      	movs	r3, #0
 8014cde:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  u16_t client_user_len = 0, client_pass_len = 0;
 8014ce2:	2300      	movs	r3, #0
 8014ce4:	83fb      	strh	r3, [r7, #30]
 8014ce6:	2300      	movs	r3, #0
 8014ce8:	83bb      	strh	r3, [r7, #28]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d106      	bne.n	8014cfe <mqtt_client_connect+0x42>
 8014cf0:	4b9e      	ldr	r3, [pc, #632]	; (8014f6c <mqtt_client_connect+0x2b0>)
 8014cf2:	f240 520f 	movw	r2, #1295	; 0x50f
 8014cf6:	499e      	ldr	r1, [pc, #632]	; (8014f70 <mqtt_client_connect+0x2b4>)
 8014cf8:	489e      	ldr	r0, [pc, #632]	; (8014f74 <mqtt_client_connect+0x2b8>)
 8014cfa:	f00b f933 	bl	801ff64 <printf>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 8014cfe:	68bb      	ldr	r3, [r7, #8]
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d106      	bne.n	8014d12 <mqtt_client_connect+0x56>
 8014d04:	4b99      	ldr	r3, [pc, #612]	; (8014f6c <mqtt_client_connect+0x2b0>)
 8014d06:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 8014d0a:	499b      	ldr	r1, [pc, #620]	; (8014f78 <mqtt_client_connect+0x2bc>)
 8014d0c:	4899      	ldr	r0, [pc, #612]	; (8014f74 <mqtt_client_connect+0x2b8>)
 8014d0e:	f00b f929 	bl	801ff64 <printf>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 8014d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d106      	bne.n	8014d26 <mqtt_client_connect+0x6a>
 8014d18:	4b94      	ldr	r3, [pc, #592]	; (8014f6c <mqtt_client_connect+0x2b0>)
 8014d1a:	f240 5211 	movw	r2, #1297	; 0x511
 8014d1e:	4997      	ldr	r1, [pc, #604]	; (8014f7c <mqtt_client_connect+0x2c0>)
 8014d20:	4894      	ldr	r0, [pc, #592]	; (8014f74 <mqtt_client_connect+0x2b8>)
 8014d22:	f00b f91f 	bl	801ff64 <printf>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 8014d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d106      	bne.n	8014d3c <mqtt_client_connect+0x80>
 8014d2e:	4b8f      	ldr	r3, [pc, #572]	; (8014f6c <mqtt_client_connect+0x2b0>)
 8014d30:	f240 5212 	movw	r2, #1298	; 0x512
 8014d34:	4992      	ldr	r1, [pc, #584]	; (8014f80 <mqtt_client_connect+0x2c4>)
 8014d36:	488f      	ldr	r0, [pc, #572]	; (8014f74 <mqtt_client_connect+0x2b8>)
 8014d38:	f00b f914 	bl	801ff64 <printf>

  if (client->conn_state != TCP_DISCONNECTED) {
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	7a9b      	ldrb	r3, [r3, #10]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d002      	beq.n	8014d4a <mqtt_client_connect+0x8e>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
 8014d44:	f06f 0309 	mvn.w	r3, #9
 8014d48:	e21f      	b.n	801518a <mqtt_client_connect+0x4ce>
  }

  /* Wipe clean */
  memset(client, 0, sizeof(mqtt_client_t));
 8014d4a:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8014d4e:	2100      	movs	r1, #0
 8014d50:	68f8      	ldr	r0, [r7, #12]
 8014d52:	f00b f8ff 	bl	801ff54 <memset>
  client->connect_arg = arg;
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014d5a:	611a      	str	r2, [r3, #16]
  client->connect_cb = cb;
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	683a      	ldr	r2, [r7, #0]
 8014d60:	615a      	str	r2, [r3, #20]
  client->keep_alive = client_info->keep_alive;
 8014d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d64:	899a      	ldrh	r2, [r3, #12]
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	805a      	strh	r2, [r3, #2]
  mqtt_init_requests(client->req_list, LWIP_ARRAYSIZE(client->req_list));
 8014d6a:	68fb      	ldr	r3, [r7, #12]
 8014d6c:	331c      	adds	r3, #28
 8014d6e:	2104      	movs	r1, #4
 8014d70:	4618      	mov	r0, r3
 8014d72:	f7fe ffbd 	bl	8013cf0 <mqtt_init_requests>

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 8014d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d78:	691b      	ldr	r3, [r3, #16]
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d073      	beq.n	8014e66 <mqtt_client_connect+0x1aa>
 8014d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d80:	695b      	ldr	r3, [r3, #20]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d06f      	beq.n	8014e66 <mqtt_client_connect+0x1aa>
    flags |= MQTT_CONNECT_FLAG_WILL;
 8014d86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014d8a:	f043 0304 	orr.w	r3, r3, #4
 8014d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    flags |= (client_info->will_qos & 3) << 3;
 8014d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d94:	7e1b      	ldrb	r3, [r3, #24]
 8014d96:	00db      	lsls	r3, r3, #3
 8014d98:	b25b      	sxtb	r3, r3
 8014d9a:	f003 0318 	and.w	r3, r3, #24
 8014d9e:	b25a      	sxtb	r2, r3
 8014da0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8014da4:	4313      	orrs	r3, r2
 8014da6:	b25b      	sxtb	r3, r3
 8014da8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (client_info->will_retain) {
 8014dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014dae:	7e5b      	ldrb	r3, [r3, #25]
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d005      	beq.n	8014dc0 <mqtt_client_connect+0x104>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 8014db4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014db8:	f043 0320 	orr.w	r3, r3, #32
 8014dbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
    len = strlen(client_info->will_topic);
 8014dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014dc2:	691b      	ldr	r3, [r3, #16]
 8014dc4:	4618      	mov	r0, r3
 8014dc6:	f7eb fa13 	bl	80001f0 <strlen>
 8014dca:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 8014dcc:	69bb      	ldr	r3, [r7, #24]
 8014dce:	2bff      	cmp	r3, #255	; 0xff
 8014dd0:	d909      	bls.n	8014de6 <mqtt_client_connect+0x12a>
 8014dd2:	4b66      	ldr	r3, [pc, #408]	; (8014f6c <mqtt_client_connect+0x2b0>)
 8014dd4:	f44f 62a5 	mov.w	r2, #1320	; 0x528
 8014dd8:	496a      	ldr	r1, [pc, #424]	; (8014f84 <mqtt_client_connect+0x2c8>)
 8014dda:	4866      	ldr	r0, [pc, #408]	; (8014f74 <mqtt_client_connect+0x2b8>)
 8014ddc:	f00b f8c2 	bl	801ff64 <printf>
 8014de0:	f06f 0305 	mvn.w	r3, #5
 8014de4:	e1d1      	b.n	801518a <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 8014de6:	69bb      	ldr	r3, [r7, #24]
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d109      	bne.n	8014e00 <mqtt_client_connect+0x144>
 8014dec:	4b5f      	ldr	r3, [pc, #380]	; (8014f6c <mqtt_client_connect+0x2b0>)
 8014dee:	f240 5229 	movw	r2, #1321	; 0x529
 8014df2:	4965      	ldr	r1, [pc, #404]	; (8014f88 <mqtt_client_connect+0x2cc>)
 8014df4:	485f      	ldr	r0, [pc, #380]	; (8014f74 <mqtt_client_connect+0x2b8>)
 8014df6:	f00b f8b5 	bl	801ff64 <printf>
 8014dfa:	f06f 0305 	mvn.w	r3, #5
 8014dfe:	e1c4      	b.n	801518a <mqtt_client_connect+0x4ce>
    will_topic_len = (u8_t)len;
 8014e00:	69bb      	ldr	r3, [r7, #24]
 8014e02:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    len = strlen(client_info->will_msg);
 8014e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e08:	695b      	ldr	r3, [r3, #20]
 8014e0a:	4618      	mov	r0, r3
 8014e0c:	f7eb f9f0 	bl	80001f0 <strlen>
 8014e10:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 8014e12:	69bb      	ldr	r3, [r7, #24]
 8014e14:	2bff      	cmp	r3, #255	; 0xff
 8014e16:	d909      	bls.n	8014e2c <mqtt_client_connect+0x170>
 8014e18:	4b54      	ldr	r3, [pc, #336]	; (8014f6c <mqtt_client_connect+0x2b0>)
 8014e1a:	f240 522c 	movw	r2, #1324	; 0x52c
 8014e1e:	495b      	ldr	r1, [pc, #364]	; (8014f8c <mqtt_client_connect+0x2d0>)
 8014e20:	4854      	ldr	r0, [pc, #336]	; (8014f74 <mqtt_client_connect+0x2b8>)
 8014e22:	f00b f89f 	bl	801ff64 <printf>
 8014e26:	f06f 0305 	mvn.w	r3, #5
 8014e2a:	e1ae      	b.n	801518a <mqtt_client_connect+0x4ce>
    will_msg_len = (u8_t)len;
 8014e2c:	69bb      	ldr	r3, [r7, #24]
 8014e2e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 8014e32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014e34:	1c9a      	adds	r2, r3, #2
 8014e36:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014e3a:	4413      	add	r3, r2
 8014e3c:	1c9a      	adds	r2, r3, #2
 8014e3e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014e42:	4413      	add	r3, r2
 8014e44:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8014e46:	69bb      	ldr	r3, [r7, #24]
 8014e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014e4c:	d309      	bcc.n	8014e62 <mqtt_client_connect+0x1a6>
 8014e4e:	4b47      	ldr	r3, [pc, #284]	; (8014f6c <mqtt_client_connect+0x2b0>)
 8014e50:	f240 522f 	movw	r2, #1327	; 0x52f
 8014e54:	494e      	ldr	r1, [pc, #312]	; (8014f90 <mqtt_client_connect+0x2d4>)
 8014e56:	4847      	ldr	r0, [pc, #284]	; (8014f74 <mqtt_client_connect+0x2b8>)
 8014e58:	f00b f884 	bl	801ff64 <printf>
 8014e5c:	f06f 0305 	mvn.w	r3, #5
 8014e60:	e193      	b.n	801518a <mqtt_client_connect+0x4ce>
    remaining_length = (u16_t)len;
 8014e62:	69bb      	ldr	r3, [r7, #24]
 8014e64:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_user != NULL) {
 8014e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e68:	685b      	ldr	r3, [r3, #4]
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d03d      	beq.n	8014eea <mqtt_client_connect+0x22e>
    flags |= MQTT_CONNECT_FLAG_USERNAME;
 8014e6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014e72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_user);
 8014e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e7c:	685b      	ldr	r3, [r3, #4]
 8014e7e:	4618      	mov	r0, r3
 8014e80:	f7eb f9b6 	bl	80001f0 <strlen>
 8014e84:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length overflow", len <= 0xFFFF, return ERR_VAL);
 8014e86:	69bb      	ldr	r3, [r7, #24]
 8014e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014e8c:	d309      	bcc.n	8014ea2 <mqtt_client_connect+0x1e6>
 8014e8e:	4b37      	ldr	r3, [pc, #220]	; (8014f6c <mqtt_client_connect+0x2b0>)
 8014e90:	f240 5235 	movw	r2, #1333	; 0x535
 8014e94:	493f      	ldr	r1, [pc, #252]	; (8014f94 <mqtt_client_connect+0x2d8>)
 8014e96:	4837      	ldr	r0, [pc, #220]	; (8014f74 <mqtt_client_connect+0x2b8>)
 8014e98:	f00b f864 	bl	801ff64 <printf>
 8014e9c:	f06f 0305 	mvn.w	r3, #5
 8014ea0:	e173      	b.n	801518a <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length must be > 0", len > 0, return ERR_VAL);
 8014ea2:	69bb      	ldr	r3, [r7, #24]
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d109      	bne.n	8014ebc <mqtt_client_connect+0x200>
 8014ea8:	4b30      	ldr	r3, [pc, #192]	; (8014f6c <mqtt_client_connect+0x2b0>)
 8014eaa:	f240 5236 	movw	r2, #1334	; 0x536
 8014eae:	493a      	ldr	r1, [pc, #232]	; (8014f98 <mqtt_client_connect+0x2dc>)
 8014eb0:	4830      	ldr	r0, [pc, #192]	; (8014f74 <mqtt_client_connect+0x2b8>)
 8014eb2:	f00b f857 	bl	801ff64 <printf>
 8014eb6:	f06f 0305 	mvn.w	r3, #5
 8014eba:	e166      	b.n	801518a <mqtt_client_connect+0x4ce>
    client_user_len = (u16_t)len;
 8014ebc:	69bb      	ldr	r3, [r7, #24]
 8014ebe:	83fb      	strh	r3, [r7, #30]
    len = remaining_length + 2 + client_user_len;
 8014ec0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014ec2:	1c9a      	adds	r2, r3, #2
 8014ec4:	8bfb      	ldrh	r3, [r7, #30]
 8014ec6:	4413      	add	r3, r2
 8014ec8:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8014eca:	69bb      	ldr	r3, [r7, #24]
 8014ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014ed0:	d309      	bcc.n	8014ee6 <mqtt_client_connect+0x22a>
 8014ed2:	4b26      	ldr	r3, [pc, #152]	; (8014f6c <mqtt_client_connect+0x2b0>)
 8014ed4:	f240 5239 	movw	r2, #1337	; 0x539
 8014ed8:	492d      	ldr	r1, [pc, #180]	; (8014f90 <mqtt_client_connect+0x2d4>)
 8014eda:	4826      	ldr	r0, [pc, #152]	; (8014f74 <mqtt_client_connect+0x2b8>)
 8014edc:	f00b f842 	bl	801ff64 <printf>
 8014ee0:	f06f 0305 	mvn.w	r3, #5
 8014ee4:	e151      	b.n	801518a <mqtt_client_connect+0x4ce>
    remaining_length = (u16_t)len;
 8014ee6:	69bb      	ldr	r3, [r7, #24]
 8014ee8:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_pass != NULL) {
 8014eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014eec:	689b      	ldr	r3, [r3, #8]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d05a      	beq.n	8014fa8 <mqtt_client_connect+0x2ec>
    flags |= MQTT_CONNECT_FLAG_PASSWORD;
 8014ef2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014ef6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_pass);
 8014efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f00:	689b      	ldr	r3, [r3, #8]
 8014f02:	4618      	mov	r0, r3
 8014f04:	f7eb f974 	bl	80001f0 <strlen>
 8014f08:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length overflow", len <= 0xFFFF, return ERR_VAL);
 8014f0a:	69bb      	ldr	r3, [r7, #24]
 8014f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014f10:	d309      	bcc.n	8014f26 <mqtt_client_connect+0x26a>
 8014f12:	4b16      	ldr	r3, [pc, #88]	; (8014f6c <mqtt_client_connect+0x2b0>)
 8014f14:	f240 523f 	movw	r2, #1343	; 0x53f
 8014f18:	4920      	ldr	r1, [pc, #128]	; (8014f9c <mqtt_client_connect+0x2e0>)
 8014f1a:	4816      	ldr	r0, [pc, #88]	; (8014f74 <mqtt_client_connect+0x2b8>)
 8014f1c:	f00b f822 	bl	801ff64 <printf>
 8014f20:	f06f 0305 	mvn.w	r3, #5
 8014f24:	e131      	b.n	801518a <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length must be > 0", len > 0, return ERR_VAL);
 8014f26:	69bb      	ldr	r3, [r7, #24]
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d109      	bne.n	8014f40 <mqtt_client_connect+0x284>
 8014f2c:	4b0f      	ldr	r3, [pc, #60]	; (8014f6c <mqtt_client_connect+0x2b0>)
 8014f2e:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 8014f32:	491b      	ldr	r1, [pc, #108]	; (8014fa0 <mqtt_client_connect+0x2e4>)
 8014f34:	480f      	ldr	r0, [pc, #60]	; (8014f74 <mqtt_client_connect+0x2b8>)
 8014f36:	f00b f815 	bl	801ff64 <printf>
 8014f3a:	f06f 0305 	mvn.w	r3, #5
 8014f3e:	e124      	b.n	801518a <mqtt_client_connect+0x4ce>
    client_pass_len = (u16_t)len;
 8014f40:	69bb      	ldr	r3, [r7, #24]
 8014f42:	83bb      	strh	r3, [r7, #28]
    len = remaining_length + 2 + client_pass_len;
 8014f44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014f46:	1c9a      	adds	r2, r3, #2
 8014f48:	8bbb      	ldrh	r3, [r7, #28]
 8014f4a:	4413      	add	r3, r2
 8014f4c:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8014f4e:	69bb      	ldr	r3, [r7, #24]
 8014f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014f54:	d326      	bcc.n	8014fa4 <mqtt_client_connect+0x2e8>
 8014f56:	4b05      	ldr	r3, [pc, #20]	; (8014f6c <mqtt_client_connect+0x2b0>)
 8014f58:	f240 5243 	movw	r2, #1347	; 0x543
 8014f5c:	490c      	ldr	r1, [pc, #48]	; (8014f90 <mqtt_client_connect+0x2d4>)
 8014f5e:	4805      	ldr	r0, [pc, #20]	; (8014f74 <mqtt_client_connect+0x2b8>)
 8014f60:	f00b f800 	bl	801ff64 <printf>
 8014f64:	f06f 0305 	mvn.w	r3, #5
 8014f68:	e10f      	b.n	801518a <mqtt_client_connect+0x4ce>
 8014f6a:	bf00      	nop
 8014f6c:	080264cc 	.word	0x080264cc
 8014f70:	0802694c 	.word	0x0802694c
 8014f74:	08026544 	.word	0x08026544
 8014f78:	08026970 	.word	0x08026970
 8014f7c:	08026998 	.word	0x08026998
 8014f80:	080269c4 	.word	0x080269c4
 8014f84:	080269f8 	.word	0x080269f8
 8014f88:	08026a38 	.word	0x08026a38
 8014f8c:	08026a78 	.word	0x08026a78
 8014f90:	08026ab4 	.word	0x08026ab4
 8014f94:	08026ae4 	.word	0x08026ae4
 8014f98:	08026b24 	.word	0x08026b24
 8014f9c:	08026b68 	.word	0x08026b68
 8014fa0:	08026ba8 	.word	0x08026ba8
    remaining_length = (u16_t)len;
 8014fa4:	69bb      	ldr	r3, [r7, #24]
 8014fa6:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Don't complicate things, always connect using clean session */
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 8014fa8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014fac:	f043 0302 	orr.w	r3, r3, #2
 8014fb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  len = strlen(client_info->client_id);
 8014fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	4618      	mov	r0, r3
 8014fba:	f7eb f919 	bl	80001f0 <strlen>
 8014fbe:	61b8      	str	r0, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 8014fc0:	69bb      	ldr	r3, [r7, #24]
 8014fc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014fc6:	d309      	bcc.n	8014fdc <mqtt_client_connect+0x320>
 8014fc8:	4b72      	ldr	r3, [pc, #456]	; (8015194 <mqtt_client_connect+0x4d8>)
 8014fca:	f240 524b 	movw	r2, #1355	; 0x54b
 8014fce:	4972      	ldr	r1, [pc, #456]	; (8015198 <mqtt_client_connect+0x4dc>)
 8014fd0:	4872      	ldr	r0, [pc, #456]	; (801519c <mqtt_client_connect+0x4e0>)
 8014fd2:	f00a ffc7 	bl	801ff64 <printf>
 8014fd6:	f06f 0305 	mvn.w	r3, #5
 8014fda:	e0d6      	b.n	801518a <mqtt_client_connect+0x4ce>
  client_id_length = (u16_t)len;
 8014fdc:	69bb      	ldr	r3, [r7, #24]
 8014fde:	82fb      	strh	r3, [r7, #22]
  len = remaining_length + 2 + client_id_length;
 8014fe0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014fe2:	1c9a      	adds	r2, r3, #2
 8014fe4:	8afb      	ldrh	r3, [r7, #22]
 8014fe6:	4413      	add	r3, r2
 8014fe8:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8014fea:	69bb      	ldr	r3, [r7, #24]
 8014fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014ff0:	d309      	bcc.n	8015006 <mqtt_client_connect+0x34a>
 8014ff2:	4b68      	ldr	r3, [pc, #416]	; (8015194 <mqtt_client_connect+0x4d8>)
 8014ff4:	f240 524e 	movw	r2, #1358	; 0x54e
 8014ff8:	4969      	ldr	r1, [pc, #420]	; (80151a0 <mqtt_client_connect+0x4e4>)
 8014ffa:	4868      	ldr	r0, [pc, #416]	; (801519c <mqtt_client_connect+0x4e0>)
 8014ffc:	f00a ffb2 	bl	801ff64 <printf>
 8015000:	f06f 0305 	mvn.w	r3, #5
 8015004:	e0c1      	b.n	801518a <mqtt_client_connect+0x4ce>
  remaining_length = (u16_t)len;
 8015006:	69bb      	ldr	r3, [r7, #24]
 8015008:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	33ec      	adds	r3, #236	; 0xec
 801500e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015010:	4611      	mov	r1, r2
 8015012:	4618      	mov	r0, r3
 8015014:	f7fe ff56 	bl	8013ec4 <mqtt_output_check_space>
 8015018:	4603      	mov	r3, r0
 801501a:	2b00      	cmp	r3, #0
 801501c:	d102      	bne.n	8015024 <mqtt_client_connect+0x368>
    return ERR_MEM;
 801501e:	f04f 33ff 	mov.w	r3, #4294967295
 8015022:	e0b2      	b.n	801518a <mqtt_client_connect+0x4ce>
  if (client_info->tls_config) {
    client->conn = altcp_tls_new(client_info->tls_config, IP_GET_TYPE(ip_addr));
  } else
#endif
  {
    client->conn = altcp_tcp_new_ip_type(IP_GET_TYPE(ip_addr));
 8015024:	2000      	movs	r0, #0
 8015026:	f003 fb7b 	bl	8018720 <tcp_new_ip_type>
 801502a:	4602      	mov	r2, r0
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	60da      	str	r2, [r3, #12]
  }
  if (client->conn == NULL) {
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	68db      	ldr	r3, [r3, #12]
 8015034:	2b00      	cmp	r3, #0
 8015036:	d102      	bne.n	801503e <mqtt_client_connect+0x382>
    return ERR_MEM;
 8015038:	f04f 33ff 	mov.w	r3, #4294967295
 801503c:	e0a5      	b.n	801518a <mqtt_client_connect+0x4ce>
  }

  /* Set arg pointer for callbacks */
  altcp_arg(client->conn, client);
 801503e:	68fb      	ldr	r3, [r7, #12]
 8015040:	68db      	ldr	r3, [r3, #12]
 8015042:	68f9      	ldr	r1, [r7, #12]
 8015044:	4618      	mov	r0, r3
 8015046:	f003 fb79 	bl	801873c <tcp_arg>
  /* Any local address, pick random local port number */
  err = altcp_bind(client->conn, IP_ADDR_ANY, 0);
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	68db      	ldr	r3, [r3, #12]
 801504e:	2200      	movs	r2, #0
 8015050:	4954      	ldr	r1, [pc, #336]	; (80151a4 <mqtt_client_connect+0x4e8>)
 8015052:	4618      	mov	r0, r3
 8015054:	f002 faa2 	bl	801759c <tcp_bind>
 8015058:	4603      	mov	r3, r0
 801505a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 801505e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015062:	2b00      	cmp	r3, #0
 8015064:	f040 8084 	bne.w	8015170 <mqtt_client_connect+0x4b4>
    goto tcp_fail;
  }
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Connecting to host: %s at port:%"U16_F"\n", ipaddr_ntoa(ip_addr), port));

  /* Connect to server */
  err = altcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 8015068:	68fb      	ldr	r3, [r7, #12]
 801506a:	68d8      	ldr	r0, [r3, #12]
 801506c:	88fa      	ldrh	r2, [r7, #6]
 801506e:	4b4e      	ldr	r3, [pc, #312]	; (80151a8 <mqtt_client_connect+0x4ec>)
 8015070:	68b9      	ldr	r1, [r7, #8]
 8015072:	f002 fc1b 	bl	80178ac <tcp_connect>
 8015076:	4603      	mov	r3, r0
 8015078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 801507c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015080:	2b00      	cmp	r3, #0
 8015082:	d177      	bne.n	8015174 <mqtt_client_connect+0x4b8>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Error connecting to remote ip/port, %d\n", err));
    goto tcp_fail;
  }
  /* Set error callback */
  altcp_err(client->conn, mqtt_tcp_err_cb);
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	68db      	ldr	r3, [r3, #12]
 8015088:	4948      	ldr	r1, [pc, #288]	; (80151ac <mqtt_client_connect+0x4f0>)
 801508a:	4618      	mov	r0, r3
 801508c:	f003 fbac 	bl	80187e8 <tcp_err>
  client->conn_state = TCP_CONNECTING;
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	2201      	movs	r2, #1
 8015094:	729a      	strb	r2, [r3, #10]

  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 801509c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801509e:	9301      	str	r3, [sp, #4]
 80150a0:	2300      	movs	r3, #0
 80150a2:	9300      	str	r3, [sp, #0]
 80150a4:	2300      	movs	r3, #0
 80150a6:	2200      	movs	r2, #0
 80150a8:	2101      	movs	r1, #1
 80150aa:	f7fe fec0 	bl	8013e2e <mqtt_output_append_fixed_header>
  /* Append Protocol string */
  mqtt_output_append_string(&client->output, "MQTT", 4);
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	33ec      	adds	r3, #236	; 0xec
 80150b2:	2204      	movs	r2, #4
 80150b4:	493e      	ldr	r1, [pc, #248]	; (80151b0 <mqtt_client_connect+0x4f4>)
 80150b6:	4618      	mov	r0, r3
 80150b8:	f7fe fe8d 	bl	8013dd6 <mqtt_output_append_string>
  /* Append Protocol level */
  mqtt_output_append_u8(&client->output, 4);
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	33ec      	adds	r3, #236	; 0xec
 80150c0:	2104      	movs	r1, #4
 80150c2:	4618      	mov	r0, r3
 80150c4:	f7fe fe42 	bl	8013d4c <mqtt_output_append_u8>
  /* Append connect flags */
  mqtt_output_append_u8(&client->output, flags);
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	33ec      	adds	r3, #236	; 0xec
 80150cc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80150d0:	4611      	mov	r1, r2
 80150d2:	4618      	mov	r0, r3
 80150d4:	f7fe fe3a 	bl	8013d4c <mqtt_output_append_u8>
  /* Append keep-alive */
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 80150de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150e0:	899b      	ldrh	r3, [r3, #12]
 80150e2:	4619      	mov	r1, r3
 80150e4:	4610      	mov	r0, r2
 80150e6:	f7fe fe40 	bl	8013d6a <mqtt_output_append_u16>
  /* Append client id */
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 80150f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	8afa      	ldrh	r2, [r7, #22]
 80150f6:	4619      	mov	r1, r3
 80150f8:	f7fe fe6d 	bl	8013dd6 <mqtt_output_append_string>
  /* Append will message if used */
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 80150fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015100:	f003 0304 	and.w	r3, r3, #4
 8015104:	2b00      	cmp	r3, #0
 8015106:	d015      	beq.n	8015134 <mqtt_client_connect+0x478>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 801510e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015110:	691b      	ldr	r3, [r3, #16]
 8015112:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015116:	b292      	uxth	r2, r2
 8015118:	4619      	mov	r1, r3
 801511a:	f7fe fe5c 	bl	8013dd6 <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8015124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015126:	695b      	ldr	r3, [r3, #20]
 8015128:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 801512c:	b292      	uxth	r2, r2
 801512e:	4619      	mov	r1, r3
 8015130:	f7fe fe51 	bl	8013dd6 <mqtt_output_append_string>
  }
  /* Append user name if given */
  if ((flags & MQTT_CONNECT_FLAG_USERNAME) != 0) {
 8015134:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8015138:	2b00      	cmp	r3, #0
 801513a:	da08      	bge.n	801514e <mqtt_client_connect+0x492>
    mqtt_output_append_string(&client->output, client_info->client_user, client_user_len);
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8015142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015144:	685b      	ldr	r3, [r3, #4]
 8015146:	8bfa      	ldrh	r2, [r7, #30]
 8015148:	4619      	mov	r1, r3
 801514a:	f7fe fe44 	bl	8013dd6 <mqtt_output_append_string>
  }
  /* Append password if given */
  if ((flags & MQTT_CONNECT_FLAG_PASSWORD) != 0) {
 801514e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015156:	2b00      	cmp	r3, #0
 8015158:	d008      	beq.n	801516c <mqtt_client_connect+0x4b0>
    mqtt_output_append_string(&client->output, client_info->client_pass, client_pass_len);
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8015160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015162:	689b      	ldr	r3, [r3, #8]
 8015164:	8bba      	ldrh	r2, [r7, #28]
 8015166:	4619      	mov	r1, r3
 8015168:	f7fe fe35 	bl	8013dd6 <mqtt_output_append_string>
  }
  return ERR_OK;
 801516c:	2300      	movs	r3, #0
 801516e:	e00c      	b.n	801518a <mqtt_client_connect+0x4ce>
    goto tcp_fail;
 8015170:	bf00      	nop
 8015172:	e000      	b.n	8015176 <mqtt_client_connect+0x4ba>
    goto tcp_fail;
 8015174:	bf00      	nop

tcp_fail:
  altcp_abort(client->conn);
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	68db      	ldr	r3, [r3, #12]
 801517a:	4618      	mov	r0, r3
 801517c:	f002 fa02 	bl	8017584 <tcp_abort>
  client->conn = NULL;
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	2200      	movs	r2, #0
 8015184:	60da      	str	r2, [r3, #12]
  return err;
 8015186:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801518a:	4618      	mov	r0, r3
 801518c:	3728      	adds	r7, #40	; 0x28
 801518e:	46bd      	mov	sp, r7
 8015190:	bd80      	pop	{r7, pc}
 8015192:	bf00      	nop
 8015194:	080264cc 	.word	0x080264cc
 8015198:	08026bec 	.word	0x08026bec
 801519c:	08026544 	.word	0x08026544
 80151a0:	08026ab4 	.word	0x08026ab4
 80151a4:	080718e8 	.word	0x080718e8
 80151a8:	08014889 	.word	0x08014889
 80151ac:	08014815 	.word	0x08014815
 80151b0:	08026c28 	.word	0x08026c28

080151b4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80151b4:	b480      	push	{r7}
 80151b6:	b083      	sub	sp, #12
 80151b8:	af00      	add	r7, sp, #0
 80151ba:	4603      	mov	r3, r0
 80151bc:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80151be:	88fb      	ldrh	r3, [r7, #6]
 80151c0:	021b      	lsls	r3, r3, #8
 80151c2:	b21a      	sxth	r2, r3
 80151c4:	88fb      	ldrh	r3, [r7, #6]
 80151c6:	0a1b      	lsrs	r3, r3, #8
 80151c8:	b29b      	uxth	r3, r3
 80151ca:	b21b      	sxth	r3, r3
 80151cc:	4313      	orrs	r3, r2
 80151ce:	b21b      	sxth	r3, r3
 80151d0:	b29b      	uxth	r3, r3
}
 80151d2:	4618      	mov	r0, r3
 80151d4:	370c      	adds	r7, #12
 80151d6:	46bd      	mov	sp, r7
 80151d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151dc:	4770      	bx	lr

080151de <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80151de:	b480      	push	{r7}
 80151e0:	b083      	sub	sp, #12
 80151e2:	af00      	add	r7, sp, #0
 80151e4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	061a      	lsls	r2, r3, #24
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	021b      	lsls	r3, r3, #8
 80151ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80151f2:	431a      	orrs	r2, r3
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	0a1b      	lsrs	r3, r3, #8
 80151f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80151fc:	431a      	orrs	r2, r3
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	0e1b      	lsrs	r3, r3, #24
 8015202:	4313      	orrs	r3, r2
}
 8015204:	4618      	mov	r0, r3
 8015206:	370c      	adds	r7, #12
 8015208:	46bd      	mov	sp, r7
 801520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801520e:	4770      	bx	lr

08015210 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8015210:	b580      	push	{r7, lr}
 8015212:	b082      	sub	sp, #8
 8015214:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8015216:	2300      	movs	r3, #0
 8015218:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801521a:	f00a fdc3 	bl	801fda4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 801521e:	f000 f8d5 	bl	80153cc <mem_init>
  memp_init();
 8015222:	f000 fc59 	bl	8015ad8 <memp_init>
  pbuf_init();
  netif_init();
 8015226:	f000 fd1f 	bl	8015c68 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801522a:	f008 f8c5 	bl	801d3b8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801522e:	f001 feaf 	bl	8016f90 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8015232:	f007 ffcd 	bl	801d1d0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8015236:	bf00      	nop
 8015238:	3708      	adds	r7, #8
 801523a:	46bd      	mov	sp, r7
 801523c:	bd80      	pop	{r7, pc}
	...

08015240 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8015240:	b480      	push	{r7}
 8015242:	b083      	sub	sp, #12
 8015244:	af00      	add	r7, sp, #0
 8015246:	4603      	mov	r3, r0
 8015248:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801524a:	4b05      	ldr	r3, [pc, #20]	; (8015260 <ptr_to_mem+0x20>)
 801524c:	681a      	ldr	r2, [r3, #0]
 801524e:	88fb      	ldrh	r3, [r7, #6]
 8015250:	4413      	add	r3, r2
}
 8015252:	4618      	mov	r0, r3
 8015254:	370c      	adds	r7, #12
 8015256:	46bd      	mov	sp, r7
 8015258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801525c:	4770      	bx	lr
 801525e:	bf00      	nop
 8015260:	20015774 	.word	0x20015774

08015264 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8015264:	b480      	push	{r7}
 8015266:	b083      	sub	sp, #12
 8015268:	af00      	add	r7, sp, #0
 801526a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 801526c:	4b05      	ldr	r3, [pc, #20]	; (8015284 <mem_to_ptr+0x20>)
 801526e:	681b      	ldr	r3, [r3, #0]
 8015270:	687a      	ldr	r2, [r7, #4]
 8015272:	1ad3      	subs	r3, r2, r3
 8015274:	b29b      	uxth	r3, r3
}
 8015276:	4618      	mov	r0, r3
 8015278:	370c      	adds	r7, #12
 801527a:	46bd      	mov	sp, r7
 801527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015280:	4770      	bx	lr
 8015282:	bf00      	nop
 8015284:	20015774 	.word	0x20015774

08015288 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8015288:	b590      	push	{r4, r7, lr}
 801528a:	b085      	sub	sp, #20
 801528c:	af00      	add	r7, sp, #0
 801528e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8015290:	4b45      	ldr	r3, [pc, #276]	; (80153a8 <plug_holes+0x120>)
 8015292:	681b      	ldr	r3, [r3, #0]
 8015294:	687a      	ldr	r2, [r7, #4]
 8015296:	429a      	cmp	r2, r3
 8015298:	d206      	bcs.n	80152a8 <plug_holes+0x20>
 801529a:	4b44      	ldr	r3, [pc, #272]	; (80153ac <plug_holes+0x124>)
 801529c:	f240 12df 	movw	r2, #479	; 0x1df
 80152a0:	4943      	ldr	r1, [pc, #268]	; (80153b0 <plug_holes+0x128>)
 80152a2:	4844      	ldr	r0, [pc, #272]	; (80153b4 <plug_holes+0x12c>)
 80152a4:	f00a fe5e 	bl	801ff64 <printf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80152a8:	4b43      	ldr	r3, [pc, #268]	; (80153b8 <plug_holes+0x130>)
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	687a      	ldr	r2, [r7, #4]
 80152ae:	429a      	cmp	r2, r3
 80152b0:	d306      	bcc.n	80152c0 <plug_holes+0x38>
 80152b2:	4b3e      	ldr	r3, [pc, #248]	; (80153ac <plug_holes+0x124>)
 80152b4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80152b8:	4940      	ldr	r1, [pc, #256]	; (80153bc <plug_holes+0x134>)
 80152ba:	483e      	ldr	r0, [pc, #248]	; (80153b4 <plug_holes+0x12c>)
 80152bc:	f00a fe52 	bl	801ff64 <printf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	791b      	ldrb	r3, [r3, #4]
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d006      	beq.n	80152d6 <plug_holes+0x4e>
 80152c8:	4b38      	ldr	r3, [pc, #224]	; (80153ac <plug_holes+0x124>)
 80152ca:	f240 12e1 	movw	r2, #481	; 0x1e1
 80152ce:	493c      	ldr	r1, [pc, #240]	; (80153c0 <plug_holes+0x138>)
 80152d0:	4838      	ldr	r0, [pc, #224]	; (80153b4 <plug_holes+0x12c>)
 80152d2:	f00a fe47 	bl	801ff64 <printf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	881b      	ldrh	r3, [r3, #0]
 80152da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80152de:	d906      	bls.n	80152ee <plug_holes+0x66>
 80152e0:	4b32      	ldr	r3, [pc, #200]	; (80153ac <plug_holes+0x124>)
 80152e2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80152e6:	4937      	ldr	r1, [pc, #220]	; (80153c4 <plug_holes+0x13c>)
 80152e8:	4832      	ldr	r0, [pc, #200]	; (80153b4 <plug_holes+0x12c>)
 80152ea:	f00a fe3b 	bl	801ff64 <printf>

  nmem = ptr_to_mem(mem->next);
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	881b      	ldrh	r3, [r3, #0]
 80152f2:	4618      	mov	r0, r3
 80152f4:	f7ff ffa4 	bl	8015240 <ptr_to_mem>
 80152f8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80152fa:	687a      	ldr	r2, [r7, #4]
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	429a      	cmp	r2, r3
 8015300:	d024      	beq.n	801534c <plug_holes+0xc4>
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	791b      	ldrb	r3, [r3, #4]
 8015306:	2b00      	cmp	r3, #0
 8015308:	d120      	bne.n	801534c <plug_holes+0xc4>
 801530a:	4b2b      	ldr	r3, [pc, #172]	; (80153b8 <plug_holes+0x130>)
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	68fa      	ldr	r2, [r7, #12]
 8015310:	429a      	cmp	r2, r3
 8015312:	d01b      	beq.n	801534c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8015314:	4b2c      	ldr	r3, [pc, #176]	; (80153c8 <plug_holes+0x140>)
 8015316:	681b      	ldr	r3, [r3, #0]
 8015318:	68fa      	ldr	r2, [r7, #12]
 801531a:	429a      	cmp	r2, r3
 801531c:	d102      	bne.n	8015324 <plug_holes+0x9c>
      lfree = mem;
 801531e:	4a2a      	ldr	r2, [pc, #168]	; (80153c8 <plug_holes+0x140>)
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	881a      	ldrh	r2, [r3, #0]
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	881b      	ldrh	r3, [r3, #0]
 8015330:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015334:	d00a      	beq.n	801534c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	881b      	ldrh	r3, [r3, #0]
 801533a:	4618      	mov	r0, r3
 801533c:	f7ff ff80 	bl	8015240 <ptr_to_mem>
 8015340:	4604      	mov	r4, r0
 8015342:	6878      	ldr	r0, [r7, #4]
 8015344:	f7ff ff8e 	bl	8015264 <mem_to_ptr>
 8015348:	4603      	mov	r3, r0
 801534a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	885b      	ldrh	r3, [r3, #2]
 8015350:	4618      	mov	r0, r3
 8015352:	f7ff ff75 	bl	8015240 <ptr_to_mem>
 8015356:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8015358:	68ba      	ldr	r2, [r7, #8]
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	429a      	cmp	r2, r3
 801535e:	d01f      	beq.n	80153a0 <plug_holes+0x118>
 8015360:	68bb      	ldr	r3, [r7, #8]
 8015362:	791b      	ldrb	r3, [r3, #4]
 8015364:	2b00      	cmp	r3, #0
 8015366:	d11b      	bne.n	80153a0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8015368:	4b17      	ldr	r3, [pc, #92]	; (80153c8 <plug_holes+0x140>)
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	687a      	ldr	r2, [r7, #4]
 801536e:	429a      	cmp	r2, r3
 8015370:	d102      	bne.n	8015378 <plug_holes+0xf0>
      lfree = pmem;
 8015372:	4a15      	ldr	r2, [pc, #84]	; (80153c8 <plug_holes+0x140>)
 8015374:	68bb      	ldr	r3, [r7, #8]
 8015376:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	881a      	ldrh	r2, [r3, #0]
 801537c:	68bb      	ldr	r3, [r7, #8]
 801537e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	881b      	ldrh	r3, [r3, #0]
 8015384:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015388:	d00a      	beq.n	80153a0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	881b      	ldrh	r3, [r3, #0]
 801538e:	4618      	mov	r0, r3
 8015390:	f7ff ff56 	bl	8015240 <ptr_to_mem>
 8015394:	4604      	mov	r4, r0
 8015396:	68b8      	ldr	r0, [r7, #8]
 8015398:	f7ff ff64 	bl	8015264 <mem_to_ptr>
 801539c:	4603      	mov	r3, r0
 801539e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80153a0:	bf00      	nop
 80153a2:	3714      	adds	r7, #20
 80153a4:	46bd      	mov	sp, r7
 80153a6:	bd90      	pop	{r4, r7, pc}
 80153a8:	20015774 	.word	0x20015774
 80153ac:	08026c7c 	.word	0x08026c7c
 80153b0:	08026cac 	.word	0x08026cac
 80153b4:	08026cc4 	.word	0x08026cc4
 80153b8:	20015778 	.word	0x20015778
 80153bc:	08026cec 	.word	0x08026cec
 80153c0:	08026d08 	.word	0x08026d08
 80153c4:	08026d24 	.word	0x08026d24
 80153c8:	20015780 	.word	0x20015780

080153cc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80153cc:	b580      	push	{r7, lr}
 80153ce:	b082      	sub	sp, #8
 80153d0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80153d2:	4b1f      	ldr	r3, [pc, #124]	; (8015450 <mem_init+0x84>)
 80153d4:	3303      	adds	r3, #3
 80153d6:	f023 0303 	bic.w	r3, r3, #3
 80153da:	461a      	mov	r2, r3
 80153dc:	4b1d      	ldr	r3, [pc, #116]	; (8015454 <mem_init+0x88>)
 80153de:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80153e0:	4b1c      	ldr	r3, [pc, #112]	; (8015454 <mem_init+0x88>)
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80153ec:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	2200      	movs	r2, #0
 80153f2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	2200      	movs	r2, #0
 80153f8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80153fa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80153fe:	f7ff ff1f 	bl	8015240 <ptr_to_mem>
 8015402:	4603      	mov	r3, r0
 8015404:	4a14      	ldr	r2, [pc, #80]	; (8015458 <mem_init+0x8c>)
 8015406:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8015408:	4b13      	ldr	r3, [pc, #76]	; (8015458 <mem_init+0x8c>)
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	2201      	movs	r2, #1
 801540e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8015410:	4b11      	ldr	r3, [pc, #68]	; (8015458 <mem_init+0x8c>)
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8015418:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801541a:	4b0f      	ldr	r3, [pc, #60]	; (8015458 <mem_init+0x8c>)
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8015422:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8015424:	4b0b      	ldr	r3, [pc, #44]	; (8015454 <mem_init+0x88>)
 8015426:	681b      	ldr	r3, [r3, #0]
 8015428:	4a0c      	ldr	r2, [pc, #48]	; (801545c <mem_init+0x90>)
 801542a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801542c:	480c      	ldr	r0, [pc, #48]	; (8015460 <mem_init+0x94>)
 801542e:	f00a fcc5 	bl	801fdbc <sys_mutex_new>
 8015432:	4603      	mov	r3, r0
 8015434:	2b00      	cmp	r3, #0
 8015436:	d006      	beq.n	8015446 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8015438:	4b0a      	ldr	r3, [pc, #40]	; (8015464 <mem_init+0x98>)
 801543a:	f240 221f 	movw	r2, #543	; 0x21f
 801543e:	490a      	ldr	r1, [pc, #40]	; (8015468 <mem_init+0x9c>)
 8015440:	480a      	ldr	r0, [pc, #40]	; (801546c <mem_init+0xa0>)
 8015442:	f00a fd8f 	bl	801ff64 <printf>
  }
}
 8015446:	bf00      	nop
 8015448:	3708      	adds	r7, #8
 801544a:	46bd      	mov	sp, r7
 801544c:	bd80      	pop	{r7, pc}
 801544e:	bf00      	nop
 8015450:	20011760 	.word	0x20011760
 8015454:	20015774 	.word	0x20015774
 8015458:	20015778 	.word	0x20015778
 801545c:	20015780 	.word	0x20015780
 8015460:	2001577c 	.word	0x2001577c
 8015464:	08026c7c 	.word	0x08026c7c
 8015468:	08026d50 	.word	0x08026d50
 801546c:	08026cc4 	.word	0x08026cc4

08015470 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8015470:	b580      	push	{r7, lr}
 8015472:	b086      	sub	sp, #24
 8015474:	af00      	add	r7, sp, #0
 8015476:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8015478:	6878      	ldr	r0, [r7, #4]
 801547a:	f7ff fef3 	bl	8015264 <mem_to_ptr>
 801547e:	4603      	mov	r3, r0
 8015480:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	881b      	ldrh	r3, [r3, #0]
 8015486:	4618      	mov	r0, r3
 8015488:	f7ff feda 	bl	8015240 <ptr_to_mem>
 801548c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	885b      	ldrh	r3, [r3, #2]
 8015492:	4618      	mov	r0, r3
 8015494:	f7ff fed4 	bl	8015240 <ptr_to_mem>
 8015498:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	881b      	ldrh	r3, [r3, #0]
 801549e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80154a2:	d818      	bhi.n	80154d6 <mem_link_valid+0x66>
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	885b      	ldrh	r3, [r3, #2]
 80154a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80154ac:	d813      	bhi.n	80154d6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80154b2:	8afa      	ldrh	r2, [r7, #22]
 80154b4:	429a      	cmp	r2, r3
 80154b6:	d004      	beq.n	80154c2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	881b      	ldrh	r3, [r3, #0]
 80154bc:	8afa      	ldrh	r2, [r7, #22]
 80154be:	429a      	cmp	r2, r3
 80154c0:	d109      	bne.n	80154d6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80154c2:	4b08      	ldr	r3, [pc, #32]	; (80154e4 <mem_link_valid+0x74>)
 80154c4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80154c6:	693a      	ldr	r2, [r7, #16]
 80154c8:	429a      	cmp	r2, r3
 80154ca:	d006      	beq.n	80154da <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80154cc:	693b      	ldr	r3, [r7, #16]
 80154ce:	885b      	ldrh	r3, [r3, #2]
 80154d0:	8afa      	ldrh	r2, [r7, #22]
 80154d2:	429a      	cmp	r2, r3
 80154d4:	d001      	beq.n	80154da <mem_link_valid+0x6a>
    return 0;
 80154d6:	2300      	movs	r3, #0
 80154d8:	e000      	b.n	80154dc <mem_link_valid+0x6c>
  }
  return 1;
 80154da:	2301      	movs	r3, #1
}
 80154dc:	4618      	mov	r0, r3
 80154de:	3718      	adds	r7, #24
 80154e0:	46bd      	mov	sp, r7
 80154e2:	bd80      	pop	{r7, pc}
 80154e4:	20015778 	.word	0x20015778

080154e8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80154e8:	b580      	push	{r7, lr}
 80154ea:	b088      	sub	sp, #32
 80154ec:	af00      	add	r7, sp, #0
 80154ee:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	d070      	beq.n	80155d8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	f003 0303 	and.w	r3, r3, #3
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d00d      	beq.n	801551c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8015500:	4b37      	ldr	r3, [pc, #220]	; (80155e0 <mem_free+0xf8>)
 8015502:	f240 2273 	movw	r2, #627	; 0x273
 8015506:	4937      	ldr	r1, [pc, #220]	; (80155e4 <mem_free+0xfc>)
 8015508:	4837      	ldr	r0, [pc, #220]	; (80155e8 <mem_free+0x100>)
 801550a:	f00a fd2b 	bl	801ff64 <printf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801550e:	f00a fca7 	bl	801fe60 <sys_arch_protect>
 8015512:	60f8      	str	r0, [r7, #12]
 8015514:	68f8      	ldr	r0, [r7, #12]
 8015516:	f00a fcb1 	bl	801fe7c <sys_arch_unprotect>
    return;
 801551a:	e05e      	b.n	80155da <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	3b08      	subs	r3, #8
 8015520:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8015522:	4b32      	ldr	r3, [pc, #200]	; (80155ec <mem_free+0x104>)
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	69fa      	ldr	r2, [r7, #28]
 8015528:	429a      	cmp	r2, r3
 801552a:	d306      	bcc.n	801553a <mem_free+0x52>
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	f103 020c 	add.w	r2, r3, #12
 8015532:	4b2f      	ldr	r3, [pc, #188]	; (80155f0 <mem_free+0x108>)
 8015534:	681b      	ldr	r3, [r3, #0]
 8015536:	429a      	cmp	r2, r3
 8015538:	d90d      	bls.n	8015556 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801553a:	4b29      	ldr	r3, [pc, #164]	; (80155e0 <mem_free+0xf8>)
 801553c:	f240 227f 	movw	r2, #639	; 0x27f
 8015540:	492c      	ldr	r1, [pc, #176]	; (80155f4 <mem_free+0x10c>)
 8015542:	4829      	ldr	r0, [pc, #164]	; (80155e8 <mem_free+0x100>)
 8015544:	f00a fd0e 	bl	801ff64 <printf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8015548:	f00a fc8a 	bl	801fe60 <sys_arch_protect>
 801554c:	6138      	str	r0, [r7, #16]
 801554e:	6938      	ldr	r0, [r7, #16]
 8015550:	f00a fc94 	bl	801fe7c <sys_arch_unprotect>
    return;
 8015554:	e041      	b.n	80155da <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8015556:	4828      	ldr	r0, [pc, #160]	; (80155f8 <mem_free+0x110>)
 8015558:	f00a fc46 	bl	801fde8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 801555c:	69fb      	ldr	r3, [r7, #28]
 801555e:	791b      	ldrb	r3, [r3, #4]
 8015560:	2b00      	cmp	r3, #0
 8015562:	d110      	bne.n	8015586 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8015564:	4b1e      	ldr	r3, [pc, #120]	; (80155e0 <mem_free+0xf8>)
 8015566:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801556a:	4924      	ldr	r1, [pc, #144]	; (80155fc <mem_free+0x114>)
 801556c:	481e      	ldr	r0, [pc, #120]	; (80155e8 <mem_free+0x100>)
 801556e:	f00a fcf9 	bl	801ff64 <printf>
    LWIP_MEM_FREE_UNPROTECT();
 8015572:	4821      	ldr	r0, [pc, #132]	; (80155f8 <mem_free+0x110>)
 8015574:	f00a fc47 	bl	801fe06 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8015578:	f00a fc72 	bl	801fe60 <sys_arch_protect>
 801557c:	6178      	str	r0, [r7, #20]
 801557e:	6978      	ldr	r0, [r7, #20]
 8015580:	f00a fc7c 	bl	801fe7c <sys_arch_unprotect>
    return;
 8015584:	e029      	b.n	80155da <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8015586:	69f8      	ldr	r0, [r7, #28]
 8015588:	f7ff ff72 	bl	8015470 <mem_link_valid>
 801558c:	4603      	mov	r3, r0
 801558e:	2b00      	cmp	r3, #0
 8015590:	d110      	bne.n	80155b4 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8015592:	4b13      	ldr	r3, [pc, #76]	; (80155e0 <mem_free+0xf8>)
 8015594:	f240 2295 	movw	r2, #661	; 0x295
 8015598:	4919      	ldr	r1, [pc, #100]	; (8015600 <mem_free+0x118>)
 801559a:	4813      	ldr	r0, [pc, #76]	; (80155e8 <mem_free+0x100>)
 801559c:	f00a fce2 	bl	801ff64 <printf>
    LWIP_MEM_FREE_UNPROTECT();
 80155a0:	4815      	ldr	r0, [pc, #84]	; (80155f8 <mem_free+0x110>)
 80155a2:	f00a fc30 	bl	801fe06 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80155a6:	f00a fc5b 	bl	801fe60 <sys_arch_protect>
 80155aa:	61b8      	str	r0, [r7, #24]
 80155ac:	69b8      	ldr	r0, [r7, #24]
 80155ae:	f00a fc65 	bl	801fe7c <sys_arch_unprotect>
    return;
 80155b2:	e012      	b.n	80155da <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80155b4:	69fb      	ldr	r3, [r7, #28]
 80155b6:	2200      	movs	r2, #0
 80155b8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80155ba:	4b12      	ldr	r3, [pc, #72]	; (8015604 <mem_free+0x11c>)
 80155bc:	681b      	ldr	r3, [r3, #0]
 80155be:	69fa      	ldr	r2, [r7, #28]
 80155c0:	429a      	cmp	r2, r3
 80155c2:	d202      	bcs.n	80155ca <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80155c4:	4a0f      	ldr	r2, [pc, #60]	; (8015604 <mem_free+0x11c>)
 80155c6:	69fb      	ldr	r3, [r7, #28]
 80155c8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80155ca:	69f8      	ldr	r0, [r7, #28]
 80155cc:	f7ff fe5c 	bl	8015288 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80155d0:	4809      	ldr	r0, [pc, #36]	; (80155f8 <mem_free+0x110>)
 80155d2:	f00a fc18 	bl	801fe06 <sys_mutex_unlock>
 80155d6:	e000      	b.n	80155da <mem_free+0xf2>
    return;
 80155d8:	bf00      	nop
}
 80155da:	3720      	adds	r7, #32
 80155dc:	46bd      	mov	sp, r7
 80155de:	bd80      	pop	{r7, pc}
 80155e0:	08026c7c 	.word	0x08026c7c
 80155e4:	08026d6c 	.word	0x08026d6c
 80155e8:	08026cc4 	.word	0x08026cc4
 80155ec:	20015774 	.word	0x20015774
 80155f0:	20015778 	.word	0x20015778
 80155f4:	08026d90 	.word	0x08026d90
 80155f8:	2001577c 	.word	0x2001577c
 80155fc:	08026dac 	.word	0x08026dac
 8015600:	08026dd4 	.word	0x08026dd4
 8015604:	20015780 	.word	0x20015780

08015608 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8015608:	b580      	push	{r7, lr}
 801560a:	b088      	sub	sp, #32
 801560c:	af00      	add	r7, sp, #0
 801560e:	6078      	str	r0, [r7, #4]
 8015610:	460b      	mov	r3, r1
 8015612:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8015614:	887b      	ldrh	r3, [r7, #2]
 8015616:	3303      	adds	r3, #3
 8015618:	b29b      	uxth	r3, r3
 801561a:	f023 0303 	bic.w	r3, r3, #3
 801561e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8015620:	8bfb      	ldrh	r3, [r7, #30]
 8015622:	2b0b      	cmp	r3, #11
 8015624:	d801      	bhi.n	801562a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8015626:	230c      	movs	r3, #12
 8015628:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801562a:	8bfb      	ldrh	r3, [r7, #30]
 801562c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015630:	d803      	bhi.n	801563a <mem_trim+0x32>
 8015632:	8bfa      	ldrh	r2, [r7, #30]
 8015634:	887b      	ldrh	r3, [r7, #2]
 8015636:	429a      	cmp	r2, r3
 8015638:	d201      	bcs.n	801563e <mem_trim+0x36>
    return NULL;
 801563a:	2300      	movs	r3, #0
 801563c:	e0d8      	b.n	80157f0 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801563e:	4b6e      	ldr	r3, [pc, #440]	; (80157f8 <mem_trim+0x1f0>)
 8015640:	681b      	ldr	r3, [r3, #0]
 8015642:	687a      	ldr	r2, [r7, #4]
 8015644:	429a      	cmp	r2, r3
 8015646:	d304      	bcc.n	8015652 <mem_trim+0x4a>
 8015648:	4b6c      	ldr	r3, [pc, #432]	; (80157fc <mem_trim+0x1f4>)
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	687a      	ldr	r2, [r7, #4]
 801564e:	429a      	cmp	r2, r3
 8015650:	d306      	bcc.n	8015660 <mem_trim+0x58>
 8015652:	4b6b      	ldr	r3, [pc, #428]	; (8015800 <mem_trim+0x1f8>)
 8015654:	f240 22d1 	movw	r2, #721	; 0x2d1
 8015658:	496a      	ldr	r1, [pc, #424]	; (8015804 <mem_trim+0x1fc>)
 801565a:	486b      	ldr	r0, [pc, #428]	; (8015808 <mem_trim+0x200>)
 801565c:	f00a fc82 	bl	801ff64 <printf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8015660:	4b65      	ldr	r3, [pc, #404]	; (80157f8 <mem_trim+0x1f0>)
 8015662:	681b      	ldr	r3, [r3, #0]
 8015664:	687a      	ldr	r2, [r7, #4]
 8015666:	429a      	cmp	r2, r3
 8015668:	d304      	bcc.n	8015674 <mem_trim+0x6c>
 801566a:	4b64      	ldr	r3, [pc, #400]	; (80157fc <mem_trim+0x1f4>)
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	687a      	ldr	r2, [r7, #4]
 8015670:	429a      	cmp	r2, r3
 8015672:	d307      	bcc.n	8015684 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8015674:	f00a fbf4 	bl	801fe60 <sys_arch_protect>
 8015678:	60b8      	str	r0, [r7, #8]
 801567a:	68b8      	ldr	r0, [r7, #8]
 801567c:	f00a fbfe 	bl	801fe7c <sys_arch_unprotect>
    return rmem;
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	e0b5      	b.n	80157f0 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	3b08      	subs	r3, #8
 8015688:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801568a:	69b8      	ldr	r0, [r7, #24]
 801568c:	f7ff fdea 	bl	8015264 <mem_to_ptr>
 8015690:	4603      	mov	r3, r0
 8015692:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8015694:	69bb      	ldr	r3, [r7, #24]
 8015696:	881a      	ldrh	r2, [r3, #0]
 8015698:	8afb      	ldrh	r3, [r7, #22]
 801569a:	1ad3      	subs	r3, r2, r3
 801569c:	b29b      	uxth	r3, r3
 801569e:	3b08      	subs	r3, #8
 80156a0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80156a2:	8bfa      	ldrh	r2, [r7, #30]
 80156a4:	8abb      	ldrh	r3, [r7, #20]
 80156a6:	429a      	cmp	r2, r3
 80156a8:	d906      	bls.n	80156b8 <mem_trim+0xb0>
 80156aa:	4b55      	ldr	r3, [pc, #340]	; (8015800 <mem_trim+0x1f8>)
 80156ac:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80156b0:	4956      	ldr	r1, [pc, #344]	; (801580c <mem_trim+0x204>)
 80156b2:	4855      	ldr	r0, [pc, #340]	; (8015808 <mem_trim+0x200>)
 80156b4:	f00a fc56 	bl	801ff64 <printf>
  if (newsize > size) {
 80156b8:	8bfa      	ldrh	r2, [r7, #30]
 80156ba:	8abb      	ldrh	r3, [r7, #20]
 80156bc:	429a      	cmp	r2, r3
 80156be:	d901      	bls.n	80156c4 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 80156c0:	2300      	movs	r3, #0
 80156c2:	e095      	b.n	80157f0 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 80156c4:	8bfa      	ldrh	r2, [r7, #30]
 80156c6:	8abb      	ldrh	r3, [r7, #20]
 80156c8:	429a      	cmp	r2, r3
 80156ca:	d101      	bne.n	80156d0 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	e08f      	b.n	80157f0 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80156d0:	484f      	ldr	r0, [pc, #316]	; (8015810 <mem_trim+0x208>)
 80156d2:	f00a fb89 	bl	801fde8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80156d6:	69bb      	ldr	r3, [r7, #24]
 80156d8:	881b      	ldrh	r3, [r3, #0]
 80156da:	4618      	mov	r0, r3
 80156dc:	f7ff fdb0 	bl	8015240 <ptr_to_mem>
 80156e0:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80156e2:	693b      	ldr	r3, [r7, #16]
 80156e4:	791b      	ldrb	r3, [r3, #4]
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d13f      	bne.n	801576a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80156ea:	69bb      	ldr	r3, [r7, #24]
 80156ec:	881b      	ldrh	r3, [r3, #0]
 80156ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80156f2:	d106      	bne.n	8015702 <mem_trim+0xfa>
 80156f4:	4b42      	ldr	r3, [pc, #264]	; (8015800 <mem_trim+0x1f8>)
 80156f6:	f240 22f5 	movw	r2, #757	; 0x2f5
 80156fa:	4946      	ldr	r1, [pc, #280]	; (8015814 <mem_trim+0x20c>)
 80156fc:	4842      	ldr	r0, [pc, #264]	; (8015808 <mem_trim+0x200>)
 80156fe:	f00a fc31 	bl	801ff64 <printf>
    /* remember the old next pointer */
    next = mem2->next;
 8015702:	693b      	ldr	r3, [r7, #16]
 8015704:	881b      	ldrh	r3, [r3, #0]
 8015706:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8015708:	8afa      	ldrh	r2, [r7, #22]
 801570a:	8bfb      	ldrh	r3, [r7, #30]
 801570c:	4413      	add	r3, r2
 801570e:	b29b      	uxth	r3, r3
 8015710:	3308      	adds	r3, #8
 8015712:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8015714:	4b40      	ldr	r3, [pc, #256]	; (8015818 <mem_trim+0x210>)
 8015716:	681b      	ldr	r3, [r3, #0]
 8015718:	693a      	ldr	r2, [r7, #16]
 801571a:	429a      	cmp	r2, r3
 801571c:	d106      	bne.n	801572c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 801571e:	89fb      	ldrh	r3, [r7, #14]
 8015720:	4618      	mov	r0, r3
 8015722:	f7ff fd8d 	bl	8015240 <ptr_to_mem>
 8015726:	4603      	mov	r3, r0
 8015728:	4a3b      	ldr	r2, [pc, #236]	; (8015818 <mem_trim+0x210>)
 801572a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 801572c:	89fb      	ldrh	r3, [r7, #14]
 801572e:	4618      	mov	r0, r3
 8015730:	f7ff fd86 	bl	8015240 <ptr_to_mem>
 8015734:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8015736:	693b      	ldr	r3, [r7, #16]
 8015738:	2200      	movs	r2, #0
 801573a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801573c:	693b      	ldr	r3, [r7, #16]
 801573e:	89ba      	ldrh	r2, [r7, #12]
 8015740:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8015742:	693b      	ldr	r3, [r7, #16]
 8015744:	8afa      	ldrh	r2, [r7, #22]
 8015746:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8015748:	69bb      	ldr	r3, [r7, #24]
 801574a:	89fa      	ldrh	r2, [r7, #14]
 801574c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801574e:	693b      	ldr	r3, [r7, #16]
 8015750:	881b      	ldrh	r3, [r3, #0]
 8015752:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015756:	d047      	beq.n	80157e8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8015758:	693b      	ldr	r3, [r7, #16]
 801575a:	881b      	ldrh	r3, [r3, #0]
 801575c:	4618      	mov	r0, r3
 801575e:	f7ff fd6f 	bl	8015240 <ptr_to_mem>
 8015762:	4602      	mov	r2, r0
 8015764:	89fb      	ldrh	r3, [r7, #14]
 8015766:	8053      	strh	r3, [r2, #2]
 8015768:	e03e      	b.n	80157e8 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801576a:	8bfb      	ldrh	r3, [r7, #30]
 801576c:	f103 0214 	add.w	r2, r3, #20
 8015770:	8abb      	ldrh	r3, [r7, #20]
 8015772:	429a      	cmp	r2, r3
 8015774:	d838      	bhi.n	80157e8 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8015776:	8afa      	ldrh	r2, [r7, #22]
 8015778:	8bfb      	ldrh	r3, [r7, #30]
 801577a:	4413      	add	r3, r2
 801577c:	b29b      	uxth	r3, r3
 801577e:	3308      	adds	r3, #8
 8015780:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8015782:	69bb      	ldr	r3, [r7, #24]
 8015784:	881b      	ldrh	r3, [r3, #0]
 8015786:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801578a:	d106      	bne.n	801579a <mem_trim+0x192>
 801578c:	4b1c      	ldr	r3, [pc, #112]	; (8015800 <mem_trim+0x1f8>)
 801578e:	f240 3216 	movw	r2, #790	; 0x316
 8015792:	4920      	ldr	r1, [pc, #128]	; (8015814 <mem_trim+0x20c>)
 8015794:	481c      	ldr	r0, [pc, #112]	; (8015808 <mem_trim+0x200>)
 8015796:	f00a fbe5 	bl	801ff64 <printf>
    mem2 = ptr_to_mem(ptr2);
 801579a:	89fb      	ldrh	r3, [r7, #14]
 801579c:	4618      	mov	r0, r3
 801579e:	f7ff fd4f 	bl	8015240 <ptr_to_mem>
 80157a2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80157a4:	4b1c      	ldr	r3, [pc, #112]	; (8015818 <mem_trim+0x210>)
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	693a      	ldr	r2, [r7, #16]
 80157aa:	429a      	cmp	r2, r3
 80157ac:	d202      	bcs.n	80157b4 <mem_trim+0x1ac>
      lfree = mem2;
 80157ae:	4a1a      	ldr	r2, [pc, #104]	; (8015818 <mem_trim+0x210>)
 80157b0:	693b      	ldr	r3, [r7, #16]
 80157b2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80157b4:	693b      	ldr	r3, [r7, #16]
 80157b6:	2200      	movs	r2, #0
 80157b8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80157ba:	69bb      	ldr	r3, [r7, #24]
 80157bc:	881a      	ldrh	r2, [r3, #0]
 80157be:	693b      	ldr	r3, [r7, #16]
 80157c0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80157c2:	693b      	ldr	r3, [r7, #16]
 80157c4:	8afa      	ldrh	r2, [r7, #22]
 80157c6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80157c8:	69bb      	ldr	r3, [r7, #24]
 80157ca:	89fa      	ldrh	r2, [r7, #14]
 80157cc:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80157ce:	693b      	ldr	r3, [r7, #16]
 80157d0:	881b      	ldrh	r3, [r3, #0]
 80157d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80157d6:	d007      	beq.n	80157e8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80157d8:	693b      	ldr	r3, [r7, #16]
 80157da:	881b      	ldrh	r3, [r3, #0]
 80157dc:	4618      	mov	r0, r3
 80157de:	f7ff fd2f 	bl	8015240 <ptr_to_mem>
 80157e2:	4602      	mov	r2, r0
 80157e4:	89fb      	ldrh	r3, [r7, #14]
 80157e6:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80157e8:	4809      	ldr	r0, [pc, #36]	; (8015810 <mem_trim+0x208>)
 80157ea:	f00a fb0c 	bl	801fe06 <sys_mutex_unlock>
  return rmem;
 80157ee:	687b      	ldr	r3, [r7, #4]
}
 80157f0:	4618      	mov	r0, r3
 80157f2:	3720      	adds	r7, #32
 80157f4:	46bd      	mov	sp, r7
 80157f6:	bd80      	pop	{r7, pc}
 80157f8:	20015774 	.word	0x20015774
 80157fc:	20015778 	.word	0x20015778
 8015800:	08026c7c 	.word	0x08026c7c
 8015804:	08026e08 	.word	0x08026e08
 8015808:	08026cc4 	.word	0x08026cc4
 801580c:	08026e20 	.word	0x08026e20
 8015810:	2001577c 	.word	0x2001577c
 8015814:	08026e40 	.word	0x08026e40
 8015818:	20015780 	.word	0x20015780

0801581c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 801581c:	b580      	push	{r7, lr}
 801581e:	b088      	sub	sp, #32
 8015820:	af00      	add	r7, sp, #0
 8015822:	4603      	mov	r3, r0
 8015824:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8015826:	88fb      	ldrh	r3, [r7, #6]
 8015828:	2b00      	cmp	r3, #0
 801582a:	d101      	bne.n	8015830 <mem_malloc+0x14>
    return NULL;
 801582c:	2300      	movs	r3, #0
 801582e:	e0e2      	b.n	80159f6 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8015830:	88fb      	ldrh	r3, [r7, #6]
 8015832:	3303      	adds	r3, #3
 8015834:	b29b      	uxth	r3, r3
 8015836:	f023 0303 	bic.w	r3, r3, #3
 801583a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 801583c:	8bbb      	ldrh	r3, [r7, #28]
 801583e:	2b0b      	cmp	r3, #11
 8015840:	d801      	bhi.n	8015846 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8015842:	230c      	movs	r3, #12
 8015844:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8015846:	8bbb      	ldrh	r3, [r7, #28]
 8015848:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801584c:	d803      	bhi.n	8015856 <mem_malloc+0x3a>
 801584e:	8bba      	ldrh	r2, [r7, #28]
 8015850:	88fb      	ldrh	r3, [r7, #6]
 8015852:	429a      	cmp	r2, r3
 8015854:	d201      	bcs.n	801585a <mem_malloc+0x3e>
    return NULL;
 8015856:	2300      	movs	r3, #0
 8015858:	e0cd      	b.n	80159f6 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801585a:	4869      	ldr	r0, [pc, #420]	; (8015a00 <mem_malloc+0x1e4>)
 801585c:	f00a fac4 	bl	801fde8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8015860:	4b68      	ldr	r3, [pc, #416]	; (8015a04 <mem_malloc+0x1e8>)
 8015862:	681b      	ldr	r3, [r3, #0]
 8015864:	4618      	mov	r0, r3
 8015866:	f7ff fcfd 	bl	8015264 <mem_to_ptr>
 801586a:	4603      	mov	r3, r0
 801586c:	83fb      	strh	r3, [r7, #30]
 801586e:	e0b7      	b.n	80159e0 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8015870:	8bfb      	ldrh	r3, [r7, #30]
 8015872:	4618      	mov	r0, r3
 8015874:	f7ff fce4 	bl	8015240 <ptr_to_mem>
 8015878:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801587a:	697b      	ldr	r3, [r7, #20]
 801587c:	791b      	ldrb	r3, [r3, #4]
 801587e:	2b00      	cmp	r3, #0
 8015880:	f040 80a7 	bne.w	80159d2 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8015884:	697b      	ldr	r3, [r7, #20]
 8015886:	881b      	ldrh	r3, [r3, #0]
 8015888:	461a      	mov	r2, r3
 801588a:	8bfb      	ldrh	r3, [r7, #30]
 801588c:	1ad3      	subs	r3, r2, r3
 801588e:	f1a3 0208 	sub.w	r2, r3, #8
 8015892:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8015894:	429a      	cmp	r2, r3
 8015896:	f0c0 809c 	bcc.w	80159d2 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801589a:	697b      	ldr	r3, [r7, #20]
 801589c:	881b      	ldrh	r3, [r3, #0]
 801589e:	461a      	mov	r2, r3
 80158a0:	8bfb      	ldrh	r3, [r7, #30]
 80158a2:	1ad3      	subs	r3, r2, r3
 80158a4:	f1a3 0208 	sub.w	r2, r3, #8
 80158a8:	8bbb      	ldrh	r3, [r7, #28]
 80158aa:	3314      	adds	r3, #20
 80158ac:	429a      	cmp	r2, r3
 80158ae:	d333      	bcc.n	8015918 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80158b0:	8bfa      	ldrh	r2, [r7, #30]
 80158b2:	8bbb      	ldrh	r3, [r7, #28]
 80158b4:	4413      	add	r3, r2
 80158b6:	b29b      	uxth	r3, r3
 80158b8:	3308      	adds	r3, #8
 80158ba:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80158bc:	8a7b      	ldrh	r3, [r7, #18]
 80158be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80158c2:	d106      	bne.n	80158d2 <mem_malloc+0xb6>
 80158c4:	4b50      	ldr	r3, [pc, #320]	; (8015a08 <mem_malloc+0x1ec>)
 80158c6:	f240 3287 	movw	r2, #903	; 0x387
 80158ca:	4950      	ldr	r1, [pc, #320]	; (8015a0c <mem_malloc+0x1f0>)
 80158cc:	4850      	ldr	r0, [pc, #320]	; (8015a10 <mem_malloc+0x1f4>)
 80158ce:	f00a fb49 	bl	801ff64 <printf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80158d2:	8a7b      	ldrh	r3, [r7, #18]
 80158d4:	4618      	mov	r0, r3
 80158d6:	f7ff fcb3 	bl	8015240 <ptr_to_mem>
 80158da:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80158dc:	68fb      	ldr	r3, [r7, #12]
 80158de:	2200      	movs	r2, #0
 80158e0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80158e2:	697b      	ldr	r3, [r7, #20]
 80158e4:	881a      	ldrh	r2, [r3, #0]
 80158e6:	68fb      	ldr	r3, [r7, #12]
 80158e8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	8bfa      	ldrh	r2, [r7, #30]
 80158ee:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80158f0:	697b      	ldr	r3, [r7, #20]
 80158f2:	8a7a      	ldrh	r2, [r7, #18]
 80158f4:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80158f6:	697b      	ldr	r3, [r7, #20]
 80158f8:	2201      	movs	r2, #1
 80158fa:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	881b      	ldrh	r3, [r3, #0]
 8015900:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015904:	d00b      	beq.n	801591e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8015906:	68fb      	ldr	r3, [r7, #12]
 8015908:	881b      	ldrh	r3, [r3, #0]
 801590a:	4618      	mov	r0, r3
 801590c:	f7ff fc98 	bl	8015240 <ptr_to_mem>
 8015910:	4602      	mov	r2, r0
 8015912:	8a7b      	ldrh	r3, [r7, #18]
 8015914:	8053      	strh	r3, [r2, #2]
 8015916:	e002      	b.n	801591e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8015918:	697b      	ldr	r3, [r7, #20]
 801591a:	2201      	movs	r2, #1
 801591c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801591e:	4b39      	ldr	r3, [pc, #228]	; (8015a04 <mem_malloc+0x1e8>)
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	697a      	ldr	r2, [r7, #20]
 8015924:	429a      	cmp	r2, r3
 8015926:	d127      	bne.n	8015978 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8015928:	4b36      	ldr	r3, [pc, #216]	; (8015a04 <mem_malloc+0x1e8>)
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801592e:	e005      	b.n	801593c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8015930:	69bb      	ldr	r3, [r7, #24]
 8015932:	881b      	ldrh	r3, [r3, #0]
 8015934:	4618      	mov	r0, r3
 8015936:	f7ff fc83 	bl	8015240 <ptr_to_mem>
 801593a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801593c:	69bb      	ldr	r3, [r7, #24]
 801593e:	791b      	ldrb	r3, [r3, #4]
 8015940:	2b00      	cmp	r3, #0
 8015942:	d004      	beq.n	801594e <mem_malloc+0x132>
 8015944:	4b33      	ldr	r3, [pc, #204]	; (8015a14 <mem_malloc+0x1f8>)
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	69ba      	ldr	r2, [r7, #24]
 801594a:	429a      	cmp	r2, r3
 801594c:	d1f0      	bne.n	8015930 <mem_malloc+0x114>
          }
          lfree = cur;
 801594e:	4a2d      	ldr	r2, [pc, #180]	; (8015a04 <mem_malloc+0x1e8>)
 8015950:	69bb      	ldr	r3, [r7, #24]
 8015952:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8015954:	4b2b      	ldr	r3, [pc, #172]	; (8015a04 <mem_malloc+0x1e8>)
 8015956:	681a      	ldr	r2, [r3, #0]
 8015958:	4b2e      	ldr	r3, [pc, #184]	; (8015a14 <mem_malloc+0x1f8>)
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	429a      	cmp	r2, r3
 801595e:	d00b      	beq.n	8015978 <mem_malloc+0x15c>
 8015960:	4b28      	ldr	r3, [pc, #160]	; (8015a04 <mem_malloc+0x1e8>)
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	791b      	ldrb	r3, [r3, #4]
 8015966:	2b00      	cmp	r3, #0
 8015968:	d006      	beq.n	8015978 <mem_malloc+0x15c>
 801596a:	4b27      	ldr	r3, [pc, #156]	; (8015a08 <mem_malloc+0x1ec>)
 801596c:	f240 32b5 	movw	r2, #949	; 0x3b5
 8015970:	4929      	ldr	r1, [pc, #164]	; (8015a18 <mem_malloc+0x1fc>)
 8015972:	4827      	ldr	r0, [pc, #156]	; (8015a10 <mem_malloc+0x1f4>)
 8015974:	f00a faf6 	bl	801ff64 <printf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8015978:	4821      	ldr	r0, [pc, #132]	; (8015a00 <mem_malloc+0x1e4>)
 801597a:	f00a fa44 	bl	801fe06 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801597e:	8bba      	ldrh	r2, [r7, #28]
 8015980:	697b      	ldr	r3, [r7, #20]
 8015982:	4413      	add	r3, r2
 8015984:	3308      	adds	r3, #8
 8015986:	4a23      	ldr	r2, [pc, #140]	; (8015a14 <mem_malloc+0x1f8>)
 8015988:	6812      	ldr	r2, [r2, #0]
 801598a:	4293      	cmp	r3, r2
 801598c:	d906      	bls.n	801599c <mem_malloc+0x180>
 801598e:	4b1e      	ldr	r3, [pc, #120]	; (8015a08 <mem_malloc+0x1ec>)
 8015990:	f240 32b9 	movw	r2, #953	; 0x3b9
 8015994:	4921      	ldr	r1, [pc, #132]	; (8015a1c <mem_malloc+0x200>)
 8015996:	481e      	ldr	r0, [pc, #120]	; (8015a10 <mem_malloc+0x1f4>)
 8015998:	f00a fae4 	bl	801ff64 <printf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801599c:	697b      	ldr	r3, [r7, #20]
 801599e:	f003 0303 	and.w	r3, r3, #3
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d006      	beq.n	80159b4 <mem_malloc+0x198>
 80159a6:	4b18      	ldr	r3, [pc, #96]	; (8015a08 <mem_malloc+0x1ec>)
 80159a8:	f240 32bb 	movw	r2, #955	; 0x3bb
 80159ac:	491c      	ldr	r1, [pc, #112]	; (8015a20 <mem_malloc+0x204>)
 80159ae:	4818      	ldr	r0, [pc, #96]	; (8015a10 <mem_malloc+0x1f4>)
 80159b0:	f00a fad8 	bl	801ff64 <printf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80159b4:	697b      	ldr	r3, [r7, #20]
 80159b6:	f003 0303 	and.w	r3, r3, #3
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d006      	beq.n	80159cc <mem_malloc+0x1b0>
 80159be:	4b12      	ldr	r3, [pc, #72]	; (8015a08 <mem_malloc+0x1ec>)
 80159c0:	f240 32bd 	movw	r2, #957	; 0x3bd
 80159c4:	4917      	ldr	r1, [pc, #92]	; (8015a24 <mem_malloc+0x208>)
 80159c6:	4812      	ldr	r0, [pc, #72]	; (8015a10 <mem_malloc+0x1f4>)
 80159c8:	f00a facc 	bl	801ff64 <printf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80159cc:	697b      	ldr	r3, [r7, #20]
 80159ce:	3308      	adds	r3, #8
 80159d0:	e011      	b.n	80159f6 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 80159d2:	8bfb      	ldrh	r3, [r7, #30]
 80159d4:	4618      	mov	r0, r3
 80159d6:	f7ff fc33 	bl	8015240 <ptr_to_mem>
 80159da:	4603      	mov	r3, r0
 80159dc:	881b      	ldrh	r3, [r3, #0]
 80159de:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80159e0:	8bfa      	ldrh	r2, [r7, #30]
 80159e2:	8bbb      	ldrh	r3, [r7, #28]
 80159e4:	f5c3 4380 	rsb	r3, r3, #16384	; 0x4000
 80159e8:	429a      	cmp	r2, r3
 80159ea:	f4ff af41 	bcc.w	8015870 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80159ee:	4804      	ldr	r0, [pc, #16]	; (8015a00 <mem_malloc+0x1e4>)
 80159f0:	f00a fa09 	bl	801fe06 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80159f4:	2300      	movs	r3, #0
}
 80159f6:	4618      	mov	r0, r3
 80159f8:	3720      	adds	r7, #32
 80159fa:	46bd      	mov	sp, r7
 80159fc:	bd80      	pop	{r7, pc}
 80159fe:	bf00      	nop
 8015a00:	2001577c 	.word	0x2001577c
 8015a04:	20015780 	.word	0x20015780
 8015a08:	08026c7c 	.word	0x08026c7c
 8015a0c:	08026e40 	.word	0x08026e40
 8015a10:	08026cc4 	.word	0x08026cc4
 8015a14:	20015778 	.word	0x20015778
 8015a18:	08026e54 	.word	0x08026e54
 8015a1c:	08026e70 	.word	0x08026e70
 8015a20:	08026ea0 	.word	0x08026ea0
 8015a24:	08026ed0 	.word	0x08026ed0

08015a28 <mem_calloc>:
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *
mem_calloc(mem_size_t count, mem_size_t size)
{
 8015a28:	b580      	push	{r7, lr}
 8015a2a:	b084      	sub	sp, #16
 8015a2c:	af00      	add	r7, sp, #0
 8015a2e:	4603      	mov	r3, r0
 8015a30:	460a      	mov	r2, r1
 8015a32:	80fb      	strh	r3, [r7, #6]
 8015a34:	4613      	mov	r3, r2
 8015a36:	80bb      	strh	r3, [r7, #4]
  void *p;
  size_t alloc_size = (size_t)count * (size_t)size;
 8015a38:	88fb      	ldrh	r3, [r7, #6]
 8015a3a:	88ba      	ldrh	r2, [r7, #4]
 8015a3c:	fb02 f303 	mul.w	r3, r2, r3
 8015a40:	60fb      	str	r3, [r7, #12]

  if ((size_t)(mem_size_t)alloc_size != alloc_size) {
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	b29b      	uxth	r3, r3
 8015a46:	461a      	mov	r2, r3
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	4293      	cmp	r3, r2
 8015a4c:	d001      	beq.n	8015a52 <mem_calloc+0x2a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
    return NULL;
 8015a4e:	2300      	movs	r3, #0
 8015a50:	e00e      	b.n	8015a70 <mem_calloc+0x48>
  }

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc((mem_size_t)alloc_size);
 8015a52:	68fb      	ldr	r3, [r7, #12]
 8015a54:	b29b      	uxth	r3, r3
 8015a56:	4618      	mov	r0, r3
 8015a58:	f7ff fee0 	bl	801581c <mem_malloc>
 8015a5c:	60b8      	str	r0, [r7, #8]
  if (p) {
 8015a5e:	68bb      	ldr	r3, [r7, #8]
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d004      	beq.n	8015a6e <mem_calloc+0x46>
    /* zero the memory */
    memset(p, 0, alloc_size);
 8015a64:	68fa      	ldr	r2, [r7, #12]
 8015a66:	2100      	movs	r1, #0
 8015a68:	68b8      	ldr	r0, [r7, #8]
 8015a6a:	f00a fa73 	bl	801ff54 <memset>
  }
  return p;
 8015a6e:	68bb      	ldr	r3, [r7, #8]
}
 8015a70:	4618      	mov	r0, r3
 8015a72:	3710      	adds	r7, #16
 8015a74:	46bd      	mov	sp, r7
 8015a76:	bd80      	pop	{r7, pc}

08015a78 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8015a78:	b480      	push	{r7}
 8015a7a:	b085      	sub	sp, #20
 8015a7c:	af00      	add	r7, sp, #0
 8015a7e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	689b      	ldr	r3, [r3, #8]
 8015a84:	2200      	movs	r2, #0
 8015a86:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	685b      	ldr	r3, [r3, #4]
 8015a8c:	3303      	adds	r3, #3
 8015a8e:	f023 0303 	bic.w	r3, r3, #3
 8015a92:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8015a94:	2300      	movs	r3, #0
 8015a96:	60fb      	str	r3, [r7, #12]
 8015a98:	e011      	b.n	8015abe <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	689b      	ldr	r3, [r3, #8]
 8015a9e:	681a      	ldr	r2, [r3, #0]
 8015aa0:	68bb      	ldr	r3, [r7, #8]
 8015aa2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	689b      	ldr	r3, [r3, #8]
 8015aa8:	68ba      	ldr	r2, [r7, #8]
 8015aaa:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	881b      	ldrh	r3, [r3, #0]
 8015ab0:	461a      	mov	r2, r3
 8015ab2:	68bb      	ldr	r3, [r7, #8]
 8015ab4:	4413      	add	r3, r2
 8015ab6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8015ab8:	68fb      	ldr	r3, [r7, #12]
 8015aba:	3301      	adds	r3, #1
 8015abc:	60fb      	str	r3, [r7, #12]
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	885b      	ldrh	r3, [r3, #2]
 8015ac2:	461a      	mov	r2, r3
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	4293      	cmp	r3, r2
 8015ac8:	dbe7      	blt.n	8015a9a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8015aca:	bf00      	nop
 8015acc:	bf00      	nop
 8015ace:	3714      	adds	r7, #20
 8015ad0:	46bd      	mov	sp, r7
 8015ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ad6:	4770      	bx	lr

08015ad8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8015ad8:	b580      	push	{r7, lr}
 8015ada:	b082      	sub	sp, #8
 8015adc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8015ade:	2300      	movs	r3, #0
 8015ae0:	80fb      	strh	r3, [r7, #6]
 8015ae2:	e009      	b.n	8015af8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8015ae4:	88fb      	ldrh	r3, [r7, #6]
 8015ae6:	4a08      	ldr	r2, [pc, #32]	; (8015b08 <memp_init+0x30>)
 8015ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015aec:	4618      	mov	r0, r3
 8015aee:	f7ff ffc3 	bl	8015a78 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8015af2:	88fb      	ldrh	r3, [r7, #6]
 8015af4:	3301      	adds	r3, #1
 8015af6:	80fb      	strh	r3, [r7, #6]
 8015af8:	88fb      	ldrh	r3, [r7, #6]
 8015afa:	2b0c      	cmp	r3, #12
 8015afc:	d9f2      	bls.n	8015ae4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8015afe:	bf00      	nop
 8015b00:	bf00      	nop
 8015b02:	3708      	adds	r7, #8
 8015b04:	46bd      	mov	sp, r7
 8015b06:	bd80      	pop	{r7, pc}
 8015b08:	08071874 	.word	0x08071874

08015b0c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8015b0c:	b580      	push	{r7, lr}
 8015b0e:	b084      	sub	sp, #16
 8015b10:	af00      	add	r7, sp, #0
 8015b12:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8015b14:	f00a f9a4 	bl	801fe60 <sys_arch_protect>
 8015b18:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	689b      	ldr	r3, [r3, #8]
 8015b1e:	681b      	ldr	r3, [r3, #0]
 8015b20:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8015b22:	68bb      	ldr	r3, [r7, #8]
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d015      	beq.n	8015b54 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	689b      	ldr	r3, [r3, #8]
 8015b2c:	68ba      	ldr	r2, [r7, #8]
 8015b2e:	6812      	ldr	r2, [r2, #0]
 8015b30:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8015b32:	68bb      	ldr	r3, [r7, #8]
 8015b34:	f003 0303 	and.w	r3, r3, #3
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d006      	beq.n	8015b4a <do_memp_malloc_pool+0x3e>
 8015b3c:	4b09      	ldr	r3, [pc, #36]	; (8015b64 <do_memp_malloc_pool+0x58>)
 8015b3e:	f44f 728c 	mov.w	r2, #280	; 0x118
 8015b42:	4909      	ldr	r1, [pc, #36]	; (8015b68 <do_memp_malloc_pool+0x5c>)
 8015b44:	4809      	ldr	r0, [pc, #36]	; (8015b6c <do_memp_malloc_pool+0x60>)
 8015b46:	f00a fa0d 	bl	801ff64 <printf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8015b4a:	68f8      	ldr	r0, [r7, #12]
 8015b4c:	f00a f996 	bl	801fe7c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8015b50:	68bb      	ldr	r3, [r7, #8]
 8015b52:	e003      	b.n	8015b5c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8015b54:	68f8      	ldr	r0, [r7, #12]
 8015b56:	f00a f991 	bl	801fe7c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8015b5a:	2300      	movs	r3, #0
}
 8015b5c:	4618      	mov	r0, r3
 8015b5e:	3710      	adds	r7, #16
 8015b60:	46bd      	mov	sp, r7
 8015b62:	bd80      	pop	{r7, pc}
 8015b64:	08026ef4 	.word	0x08026ef4
 8015b68:	08026f24 	.word	0x08026f24
 8015b6c:	08026f48 	.word	0x08026f48

08015b70 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8015b70:	b580      	push	{r7, lr}
 8015b72:	b084      	sub	sp, #16
 8015b74:	af00      	add	r7, sp, #0
 8015b76:	4603      	mov	r3, r0
 8015b78:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8015b7a:	79fb      	ldrb	r3, [r7, #7]
 8015b7c:	2b0c      	cmp	r3, #12
 8015b7e:	d908      	bls.n	8015b92 <memp_malloc+0x22>
 8015b80:	4b0a      	ldr	r3, [pc, #40]	; (8015bac <memp_malloc+0x3c>)
 8015b82:	f240 1257 	movw	r2, #343	; 0x157
 8015b86:	490a      	ldr	r1, [pc, #40]	; (8015bb0 <memp_malloc+0x40>)
 8015b88:	480a      	ldr	r0, [pc, #40]	; (8015bb4 <memp_malloc+0x44>)
 8015b8a:	f00a f9eb 	bl	801ff64 <printf>
 8015b8e:	2300      	movs	r3, #0
 8015b90:	e008      	b.n	8015ba4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8015b92:	79fb      	ldrb	r3, [r7, #7]
 8015b94:	4a08      	ldr	r2, [pc, #32]	; (8015bb8 <memp_malloc+0x48>)
 8015b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015b9a:	4618      	mov	r0, r3
 8015b9c:	f7ff ffb6 	bl	8015b0c <do_memp_malloc_pool>
 8015ba0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8015ba2:	68fb      	ldr	r3, [r7, #12]
}
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	3710      	adds	r7, #16
 8015ba8:	46bd      	mov	sp, r7
 8015baa:	bd80      	pop	{r7, pc}
 8015bac:	08026ef4 	.word	0x08026ef4
 8015bb0:	08026f84 	.word	0x08026f84
 8015bb4:	08026f48 	.word	0x08026f48
 8015bb8:	08071874 	.word	0x08071874

08015bbc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8015bbc:	b580      	push	{r7, lr}
 8015bbe:	b084      	sub	sp, #16
 8015bc0:	af00      	add	r7, sp, #0
 8015bc2:	6078      	str	r0, [r7, #4]
 8015bc4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8015bc6:	683b      	ldr	r3, [r7, #0]
 8015bc8:	f003 0303 	and.w	r3, r3, #3
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d006      	beq.n	8015bde <do_memp_free_pool+0x22>
 8015bd0:	4b0d      	ldr	r3, [pc, #52]	; (8015c08 <do_memp_free_pool+0x4c>)
 8015bd2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8015bd6:	490d      	ldr	r1, [pc, #52]	; (8015c0c <do_memp_free_pool+0x50>)
 8015bd8:	480d      	ldr	r0, [pc, #52]	; (8015c10 <do_memp_free_pool+0x54>)
 8015bda:	f00a f9c3 	bl	801ff64 <printf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8015bde:	683b      	ldr	r3, [r7, #0]
 8015be0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8015be2:	f00a f93d 	bl	801fe60 <sys_arch_protect>
 8015be6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	689b      	ldr	r3, [r3, #8]
 8015bec:	681a      	ldr	r2, [r3, #0]
 8015bee:	68fb      	ldr	r3, [r7, #12]
 8015bf0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	689b      	ldr	r3, [r3, #8]
 8015bf6:	68fa      	ldr	r2, [r7, #12]
 8015bf8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8015bfa:	68b8      	ldr	r0, [r7, #8]
 8015bfc:	f00a f93e 	bl	801fe7c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8015c00:	bf00      	nop
 8015c02:	3710      	adds	r7, #16
 8015c04:	46bd      	mov	sp, r7
 8015c06:	bd80      	pop	{r7, pc}
 8015c08:	08026ef4 	.word	0x08026ef4
 8015c0c:	08026fa4 	.word	0x08026fa4
 8015c10:	08026f48 	.word	0x08026f48

08015c14 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8015c14:	b580      	push	{r7, lr}
 8015c16:	b082      	sub	sp, #8
 8015c18:	af00      	add	r7, sp, #0
 8015c1a:	4603      	mov	r3, r0
 8015c1c:	6039      	str	r1, [r7, #0]
 8015c1e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8015c20:	79fb      	ldrb	r3, [r7, #7]
 8015c22:	2b0c      	cmp	r3, #12
 8015c24:	d907      	bls.n	8015c36 <memp_free+0x22>
 8015c26:	4b0c      	ldr	r3, [pc, #48]	; (8015c58 <memp_free+0x44>)
 8015c28:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8015c2c:	490b      	ldr	r1, [pc, #44]	; (8015c5c <memp_free+0x48>)
 8015c2e:	480c      	ldr	r0, [pc, #48]	; (8015c60 <memp_free+0x4c>)
 8015c30:	f00a f998 	bl	801ff64 <printf>
 8015c34:	e00c      	b.n	8015c50 <memp_free+0x3c>

  if (mem == NULL) {
 8015c36:	683b      	ldr	r3, [r7, #0]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d008      	beq.n	8015c4e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8015c3c:	79fb      	ldrb	r3, [r7, #7]
 8015c3e:	4a09      	ldr	r2, [pc, #36]	; (8015c64 <memp_free+0x50>)
 8015c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015c44:	6839      	ldr	r1, [r7, #0]
 8015c46:	4618      	mov	r0, r3
 8015c48:	f7ff ffb8 	bl	8015bbc <do_memp_free_pool>
 8015c4c:	e000      	b.n	8015c50 <memp_free+0x3c>
    return;
 8015c4e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8015c50:	3708      	adds	r7, #8
 8015c52:	46bd      	mov	sp, r7
 8015c54:	bd80      	pop	{r7, pc}
 8015c56:	bf00      	nop
 8015c58:	08026ef4 	.word	0x08026ef4
 8015c5c:	08026fc4 	.word	0x08026fc4
 8015c60:	08026f48 	.word	0x08026f48
 8015c64:	08071874 	.word	0x08071874

08015c68 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8015c68:	b480      	push	{r7}
 8015c6a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8015c6c:	bf00      	nop
 8015c6e:	46bd      	mov	sp, r7
 8015c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c74:	4770      	bx	lr
	...

08015c78 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8015c78:	b580      	push	{r7, lr}
 8015c7a:	b086      	sub	sp, #24
 8015c7c:	af00      	add	r7, sp, #0
 8015c7e:	60f8      	str	r0, [r7, #12]
 8015c80:	60b9      	str	r1, [r7, #8]
 8015c82:	607a      	str	r2, [r7, #4]
 8015c84:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	d108      	bne.n	8015c9e <netif_add+0x26>
 8015c8c:	4b59      	ldr	r3, [pc, #356]	; (8015df4 <netif_add+0x17c>)
 8015c8e:	f240 1227 	movw	r2, #295	; 0x127
 8015c92:	4959      	ldr	r1, [pc, #356]	; (8015df8 <netif_add+0x180>)
 8015c94:	4859      	ldr	r0, [pc, #356]	; (8015dfc <netif_add+0x184>)
 8015c96:	f00a f965 	bl	801ff64 <printf>
 8015c9a:	2300      	movs	r3, #0
 8015c9c:	e0a5      	b.n	8015dea <netif_add+0x172>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8015c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d108      	bne.n	8015cb6 <netif_add+0x3e>
 8015ca4:	4b53      	ldr	r3, [pc, #332]	; (8015df4 <netif_add+0x17c>)
 8015ca6:	f44f 7294 	mov.w	r2, #296	; 0x128
 8015caa:	4955      	ldr	r1, [pc, #340]	; (8015e00 <netif_add+0x188>)
 8015cac:	4853      	ldr	r0, [pc, #332]	; (8015dfc <netif_add+0x184>)
 8015cae:	f00a f959 	bl	801ff64 <printf>
 8015cb2:	2300      	movs	r3, #0
 8015cb4:	e099      	b.n	8015dea <netif_add+0x172>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8015cb6:	68bb      	ldr	r3, [r7, #8]
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d101      	bne.n	8015cc0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8015cbc:	4b51      	ldr	r3, [pc, #324]	; (8015e04 <netif_add+0x18c>)
 8015cbe:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d101      	bne.n	8015cca <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8015cc6:	4b4f      	ldr	r3, [pc, #316]	; (8015e04 <netif_add+0x18c>)
 8015cc8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8015cca:	683b      	ldr	r3, [r7, #0]
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d101      	bne.n	8015cd4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8015cd0:	4b4c      	ldr	r3, [pc, #304]	; (8015e04 <netif_add+0x18c>)
 8015cd2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8015cd4:	68fb      	ldr	r3, [r7, #12]
 8015cd6:	2200      	movs	r2, #0
 8015cd8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8015cda:	68fb      	ldr	r3, [r7, #12]
 8015cdc:	2200      	movs	r2, #0
 8015cde:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	2200      	movs	r2, #0
 8015ce4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8015ce6:	68fb      	ldr	r3, [r7, #12]
 8015ce8:	4a47      	ldr	r2, [pc, #284]	; (8015e08 <netif_add+0x190>)
 8015cea:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8015cec:	68fb      	ldr	r3, [r7, #12]
 8015cee:	2200      	movs	r2, #0
 8015cf0:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	2200      	movs	r2, #0
 8015cf6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
  nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
 8015cfa:	68fb      	ldr	r3, [r7, #12]
 8015cfc:	2200      	movs	r2, #0
 8015cfe:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8015d00:	68fb      	ldr	r3, [r7, #12]
 8015d02:	2200      	movs	r2, #0
 8015d04:	621a      	str	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8015d06:	68fb      	ldr	r3, [r7, #12]
 8015d08:	6a3a      	ldr	r2, [r7, #32]
 8015d0a:	625a      	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num;
 8015d0c:	4b3f      	ldr	r3, [pc, #252]	; (8015e0c <netif_add+0x194>)
 8015d0e:	781a      	ldrb	r2, [r3, #0]
 8015d10:	68fb      	ldr	r3, [r7, #12]
 8015d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8015d16:	68fb      	ldr	r3, [r7, #12]
 8015d18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015d1a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8015d1c:	683b      	ldr	r3, [r7, #0]
 8015d1e:	687a      	ldr	r2, [r7, #4]
 8015d20:	68b9      	ldr	r1, [r7, #8]
 8015d22:	68f8      	ldr	r0, [r7, #12]
 8015d24:	f000 f91c 	bl	8015f60 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8015d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d2a:	68f8      	ldr	r0, [r7, #12]
 8015d2c:	4798      	blx	r3
 8015d2e:	4603      	mov	r3, r0
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d001      	beq.n	8015d38 <netif_add+0xc0>
    return NULL;
 8015d34:	2300      	movs	r3, #0
 8015d36:	e058      	b.n	8015dea <netif_add+0x172>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8015d38:	68fb      	ldr	r3, [r7, #12]
 8015d3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015d3e:	2bff      	cmp	r3, #255	; 0xff
 8015d40:	d103      	bne.n	8015d4a <netif_add+0xd2>
        netif->num = 0;
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	2200      	movs	r2, #0
 8015d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8015d4a:	2300      	movs	r3, #0
 8015d4c:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8015d4e:	4b30      	ldr	r3, [pc, #192]	; (8015e10 <netif_add+0x198>)
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	617b      	str	r3, [r7, #20]
 8015d54:	e02b      	b.n	8015dae <netif_add+0x136>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8015d56:	697a      	ldr	r2, [r7, #20]
 8015d58:	68fb      	ldr	r3, [r7, #12]
 8015d5a:	429a      	cmp	r2, r3
 8015d5c:	d106      	bne.n	8015d6c <netif_add+0xf4>
 8015d5e:	4b25      	ldr	r3, [pc, #148]	; (8015df4 <netif_add+0x17c>)
 8015d60:	f240 128b 	movw	r2, #395	; 0x18b
 8015d64:	492b      	ldr	r1, [pc, #172]	; (8015e14 <netif_add+0x19c>)
 8015d66:	4825      	ldr	r0, [pc, #148]	; (8015dfc <netif_add+0x184>)
 8015d68:	f00a f8fc 	bl	801ff64 <printf>
        num_netifs++;
 8015d6c:	693b      	ldr	r3, [r7, #16]
 8015d6e:	3301      	adds	r3, #1
 8015d70:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8015d72:	693b      	ldr	r3, [r7, #16]
 8015d74:	2bff      	cmp	r3, #255	; 0xff
 8015d76:	dd06      	ble.n	8015d86 <netif_add+0x10e>
 8015d78:	4b1e      	ldr	r3, [pc, #120]	; (8015df4 <netif_add+0x17c>)
 8015d7a:	f240 128d 	movw	r2, #397	; 0x18d
 8015d7e:	4926      	ldr	r1, [pc, #152]	; (8015e18 <netif_add+0x1a0>)
 8015d80:	481e      	ldr	r0, [pc, #120]	; (8015dfc <netif_add+0x184>)
 8015d82:	f00a f8ef 	bl	801ff64 <printf>
        if (netif2->num == netif->num) {
 8015d86:	697b      	ldr	r3, [r7, #20]
 8015d88:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015d92:	429a      	cmp	r2, r3
 8015d94:	d108      	bne.n	8015da8 <netif_add+0x130>
          netif->num++;
 8015d96:	68fb      	ldr	r3, [r7, #12]
 8015d98:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015d9c:	3301      	adds	r3, #1
 8015d9e:	b2da      	uxtb	r2, r3
 8015da0:	68fb      	ldr	r3, [r7, #12]
 8015da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8015da6:	e005      	b.n	8015db4 <netif_add+0x13c>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8015da8:	697b      	ldr	r3, [r7, #20]
 8015daa:	681b      	ldr	r3, [r3, #0]
 8015dac:	617b      	str	r3, [r7, #20]
 8015dae:	697b      	ldr	r3, [r7, #20]
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	d1d0      	bne.n	8015d56 <netif_add+0xde>
        }
      }
    } while (netif2 != NULL);
 8015db4:	697b      	ldr	r3, [r7, #20]
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d1be      	bne.n	8015d38 <netif_add+0xc0>
  }
  if (netif->num == 254) {
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015dc0:	2bfe      	cmp	r3, #254	; 0xfe
 8015dc2:	d103      	bne.n	8015dcc <netif_add+0x154>
    netif_num = 0;
 8015dc4:	4b11      	ldr	r3, [pc, #68]	; (8015e0c <netif_add+0x194>)
 8015dc6:	2200      	movs	r2, #0
 8015dc8:	701a      	strb	r2, [r3, #0]
 8015dca:	e006      	b.n	8015dda <netif_add+0x162>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8015dcc:	68fb      	ldr	r3, [r7, #12]
 8015dce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015dd2:	3301      	adds	r3, #1
 8015dd4:	b2da      	uxtb	r2, r3
 8015dd6:	4b0d      	ldr	r3, [pc, #52]	; (8015e0c <netif_add+0x194>)
 8015dd8:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8015dda:	4b0d      	ldr	r3, [pc, #52]	; (8015e10 <netif_add+0x198>)
 8015ddc:	681a      	ldr	r2, [r3, #0]
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8015de2:	4a0b      	ldr	r2, [pc, #44]	; (8015e10 <netif_add+0x198>)
 8015de4:	68fb      	ldr	r3, [r7, #12]
 8015de6:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8015de8:	68fb      	ldr	r3, [r7, #12]
}
 8015dea:	4618      	mov	r0, r3
 8015dec:	3718      	adds	r7, #24
 8015dee:	46bd      	mov	sp, r7
 8015df0:	bd80      	pop	{r7, pc}
 8015df2:	bf00      	nop
 8015df4:	08026fe0 	.word	0x08026fe0
 8015df8:	08027074 	.word	0x08027074
 8015dfc:	08027030 	.word	0x08027030
 8015e00:	08027090 	.word	0x08027090
 8015e04:	080718e8 	.word	0x080718e8
 8015e08:	0801625b 	.word	0x0801625b
 8015e0c:	20018898 	.word	0x20018898
 8015e10:	20018890 	.word	0x20018890
 8015e14:	080270b4 	.word	0x080270b4
 8015e18:	080270c8 	.word	0x080270c8

08015e1c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015e1c:	b580      	push	{r7, lr}
 8015e1e:	b082      	sub	sp, #8
 8015e20:	af00      	add	r7, sp, #0
 8015e22:	6078      	str	r0, [r7, #4]
 8015e24:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8015e26:	6839      	ldr	r1, [r7, #0]
 8015e28:	6878      	ldr	r0, [r7, #4]
 8015e2a:	f002 fea5 	bl	8018b78 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8015e2e:	6839      	ldr	r1, [r7, #0]
 8015e30:	6878      	ldr	r0, [r7, #4]
 8015e32:	f007 fc4b 	bl	801d6cc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8015e36:	bf00      	nop
 8015e38:	3708      	adds	r7, #8
 8015e3a:	46bd      	mov	sp, r7
 8015e3c:	bd80      	pop	{r7, pc}
	...

08015e40 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8015e40:	b580      	push	{r7, lr}
 8015e42:	b086      	sub	sp, #24
 8015e44:	af00      	add	r7, sp, #0
 8015e46:	60f8      	str	r0, [r7, #12]
 8015e48:	60b9      	str	r1, [r7, #8]
 8015e4a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8015e4c:	68bb      	ldr	r3, [r7, #8]
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d106      	bne.n	8015e60 <netif_do_set_ipaddr+0x20>
 8015e52:	4b21      	ldr	r3, [pc, #132]	; (8015ed8 <netif_do_set_ipaddr+0x98>)
 8015e54:	f240 12cb 	movw	r2, #459	; 0x1cb
 8015e58:	4920      	ldr	r1, [pc, #128]	; (8015edc <netif_do_set_ipaddr+0x9c>)
 8015e5a:	4821      	ldr	r0, [pc, #132]	; (8015ee0 <netif_do_set_ipaddr+0xa0>)
 8015e5c:	f00a f882 	bl	801ff64 <printf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d106      	bne.n	8015e74 <netif_do_set_ipaddr+0x34>
 8015e66:	4b1c      	ldr	r3, [pc, #112]	; (8015ed8 <netif_do_set_ipaddr+0x98>)
 8015e68:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8015e6c:	491b      	ldr	r1, [pc, #108]	; (8015edc <netif_do_set_ipaddr+0x9c>)
 8015e6e:	481c      	ldr	r0, [pc, #112]	; (8015ee0 <netif_do_set_ipaddr+0xa0>)
 8015e70:	f00a f878 	bl	801ff64 <printf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8015e74:	68bb      	ldr	r3, [r7, #8]
 8015e76:	681a      	ldr	r2, [r3, #0]
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	3304      	adds	r3, #4
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	429a      	cmp	r2, r3
 8015e80:	d024      	beq.n	8015ecc <netif_do_set_ipaddr+0x8c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8015e82:	68bb      	ldr	r3, [r7, #8]
 8015e84:	681b      	ldr	r3, [r3, #0]
 8015e86:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8015e88:	68fb      	ldr	r3, [r7, #12]
 8015e8a:	3304      	adds	r3, #4
 8015e8c:	681a      	ldr	r2, [r3, #0]
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8015e92:	f107 0314 	add.w	r3, r7, #20
 8015e96:	4619      	mov	r1, r3
 8015e98:	6878      	ldr	r0, [r7, #4]
 8015e9a:	f7ff ffbf 	bl	8015e1c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8015e9e:	68bb      	ldr	r3, [r7, #8]
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d002      	beq.n	8015eaa <netif_do_set_ipaddr+0x6a>
 8015ea4:	68bb      	ldr	r3, [r7, #8]
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	e000      	b.n	8015eac <netif_do_set_ipaddr+0x6c>
 8015eaa:	2300      	movs	r3, #0
 8015eac:	68fa      	ldr	r2, [r7, #12]
 8015eae:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8015eb0:	2101      	movs	r1, #1
 8015eb2:	68f8      	ldr	r0, [r7, #12]
 8015eb4:	f000 f8e2 	bl	801607c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
 8015eb8:	68fb      	ldr	r3, [r7, #12]
 8015eba:	69db      	ldr	r3, [r3, #28]
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d003      	beq.n	8015ec8 <netif_do_set_ipaddr+0x88>
 8015ec0:	68fb      	ldr	r3, [r7, #12]
 8015ec2:	69db      	ldr	r3, [r3, #28]
 8015ec4:	68f8      	ldr	r0, [r7, #12]
 8015ec6:	4798      	blx	r3
    return 1; /* address changed */
 8015ec8:	2301      	movs	r3, #1
 8015eca:	e000      	b.n	8015ece <netif_do_set_ipaddr+0x8e>
  }
  return 0; /* address unchanged */
 8015ecc:	2300      	movs	r3, #0
}
 8015ece:	4618      	mov	r0, r3
 8015ed0:	3718      	adds	r7, #24
 8015ed2:	46bd      	mov	sp, r7
 8015ed4:	bd80      	pop	{r7, pc}
 8015ed6:	bf00      	nop
 8015ed8:	08026fe0 	.word	0x08026fe0
 8015edc:	080270f8 	.word	0x080270f8
 8015ee0:	08027030 	.word	0x08027030

08015ee4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8015ee4:	b480      	push	{r7}
 8015ee6:	b085      	sub	sp, #20
 8015ee8:	af00      	add	r7, sp, #0
 8015eea:	60f8      	str	r0, [r7, #12]
 8015eec:	60b9      	str	r1, [r7, #8]
 8015eee:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8015ef0:	68bb      	ldr	r3, [r7, #8]
 8015ef2:	681a      	ldr	r2, [r3, #0]
 8015ef4:	68fb      	ldr	r3, [r7, #12]
 8015ef6:	3308      	adds	r3, #8
 8015ef8:	681b      	ldr	r3, [r3, #0]
 8015efa:	429a      	cmp	r2, r3
 8015efc:	d00a      	beq.n	8015f14 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8015efe:	68bb      	ldr	r3, [r7, #8]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d002      	beq.n	8015f0a <netif_do_set_netmask+0x26>
 8015f04:	68bb      	ldr	r3, [r7, #8]
 8015f06:	681b      	ldr	r3, [r3, #0]
 8015f08:	e000      	b.n	8015f0c <netif_do_set_netmask+0x28>
 8015f0a:	2300      	movs	r3, #0
 8015f0c:	68fa      	ldr	r2, [r7, #12]
 8015f0e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8015f10:	2301      	movs	r3, #1
 8015f12:	e000      	b.n	8015f16 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8015f14:	2300      	movs	r3, #0
}
 8015f16:	4618      	mov	r0, r3
 8015f18:	3714      	adds	r7, #20
 8015f1a:	46bd      	mov	sp, r7
 8015f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f20:	4770      	bx	lr

08015f22 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8015f22:	b480      	push	{r7}
 8015f24:	b085      	sub	sp, #20
 8015f26:	af00      	add	r7, sp, #0
 8015f28:	60f8      	str	r0, [r7, #12]
 8015f2a:	60b9      	str	r1, [r7, #8]
 8015f2c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8015f2e:	68bb      	ldr	r3, [r7, #8]
 8015f30:	681a      	ldr	r2, [r3, #0]
 8015f32:	68fb      	ldr	r3, [r7, #12]
 8015f34:	330c      	adds	r3, #12
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	429a      	cmp	r2, r3
 8015f3a:	d00a      	beq.n	8015f52 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8015f3c:	68bb      	ldr	r3, [r7, #8]
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d002      	beq.n	8015f48 <netif_do_set_gw+0x26>
 8015f42:	68bb      	ldr	r3, [r7, #8]
 8015f44:	681b      	ldr	r3, [r3, #0]
 8015f46:	e000      	b.n	8015f4a <netif_do_set_gw+0x28>
 8015f48:	2300      	movs	r3, #0
 8015f4a:	68fa      	ldr	r2, [r7, #12]
 8015f4c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8015f4e:	2301      	movs	r3, #1
 8015f50:	e000      	b.n	8015f54 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8015f52:	2300      	movs	r3, #0
}
 8015f54:	4618      	mov	r0, r3
 8015f56:	3714      	adds	r7, #20
 8015f58:	46bd      	mov	sp, r7
 8015f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f5e:	4770      	bx	lr

08015f60 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8015f60:	b580      	push	{r7, lr}
 8015f62:	b088      	sub	sp, #32
 8015f64:	af00      	add	r7, sp, #0
 8015f66:	60f8      	str	r0, [r7, #12]
 8015f68:	60b9      	str	r1, [r7, #8]
 8015f6a:	607a      	str	r2, [r7, #4]
 8015f6c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8015f6e:	2300      	movs	r3, #0
 8015f70:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8015f72:	2300      	movs	r3, #0
 8015f74:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8015f76:	68bb      	ldr	r3, [r7, #8]
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d101      	bne.n	8015f80 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8015f7c:	4b1c      	ldr	r3, [pc, #112]	; (8015ff0 <netif_set_addr+0x90>)
 8015f7e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d101      	bne.n	8015f8a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8015f86:	4b1a      	ldr	r3, [pc, #104]	; (8015ff0 <netif_set_addr+0x90>)
 8015f88:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8015f8a:	683b      	ldr	r3, [r7, #0]
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d101      	bne.n	8015f94 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8015f90:	4b17      	ldr	r3, [pc, #92]	; (8015ff0 <netif_set_addr+0x90>)
 8015f92:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8015f94:	68bb      	ldr	r3, [r7, #8]
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	d003      	beq.n	8015fa2 <netif_set_addr+0x42>
 8015f9a:	68bb      	ldr	r3, [r7, #8]
 8015f9c:	681b      	ldr	r3, [r3, #0]
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d101      	bne.n	8015fa6 <netif_set_addr+0x46>
 8015fa2:	2301      	movs	r3, #1
 8015fa4:	e000      	b.n	8015fa8 <netif_set_addr+0x48>
 8015fa6:	2300      	movs	r3, #0
 8015fa8:	617b      	str	r3, [r7, #20]
  if (remove) {
 8015faa:	697b      	ldr	r3, [r7, #20]
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d006      	beq.n	8015fbe <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8015fb0:	f107 0310 	add.w	r3, r7, #16
 8015fb4:	461a      	mov	r2, r3
 8015fb6:	68b9      	ldr	r1, [r7, #8]
 8015fb8:	68f8      	ldr	r0, [r7, #12]
 8015fba:	f7ff ff41 	bl	8015e40 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8015fbe:	69fa      	ldr	r2, [r7, #28]
 8015fc0:	6879      	ldr	r1, [r7, #4]
 8015fc2:	68f8      	ldr	r0, [r7, #12]
 8015fc4:	f7ff ff8e 	bl	8015ee4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8015fc8:	69ba      	ldr	r2, [r7, #24]
 8015fca:	6839      	ldr	r1, [r7, #0]
 8015fcc:	68f8      	ldr	r0, [r7, #12]
 8015fce:	f7ff ffa8 	bl	8015f22 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8015fd2:	697b      	ldr	r3, [r7, #20]
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d106      	bne.n	8015fe6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8015fd8:	f107 0310 	add.w	r3, r7, #16
 8015fdc:	461a      	mov	r2, r3
 8015fde:	68b9      	ldr	r1, [r7, #8]
 8015fe0:	68f8      	ldr	r0, [r7, #12]
 8015fe2:	f7ff ff2d 	bl	8015e40 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8015fe6:	bf00      	nop
 8015fe8:	3720      	adds	r7, #32
 8015fea:	46bd      	mov	sp, r7
 8015fec:	bd80      	pop	{r7, pc}
 8015fee:	bf00      	nop
 8015ff0:	080718e8 	.word	0x080718e8

08015ff4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8015ff4:	b480      	push	{r7}
 8015ff6:	b083      	sub	sp, #12
 8015ff8:	af00      	add	r7, sp, #0
 8015ffa:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8015ffc:	4a04      	ldr	r2, [pc, #16]	; (8016010 <netif_set_default+0x1c>)
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8016002:	bf00      	nop
 8016004:	370c      	adds	r7, #12
 8016006:	46bd      	mov	sp, r7
 8016008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801600c:	4770      	bx	lr
 801600e:	bf00      	nop
 8016010:	20018894 	.word	0x20018894

08016014 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8016014:	b580      	push	{r7, lr}
 8016016:	b082      	sub	sp, #8
 8016018:	af00      	add	r7, sp, #0
 801601a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	2b00      	cmp	r3, #0
 8016020:	d107      	bne.n	8016032 <netif_set_up+0x1e>
 8016022:	4b13      	ldr	r3, [pc, #76]	; (8016070 <netif_set_up+0x5c>)
 8016024:	f44f 7254 	mov.w	r2, #848	; 0x350
 8016028:	4912      	ldr	r1, [pc, #72]	; (8016074 <netif_set_up+0x60>)
 801602a:	4813      	ldr	r0, [pc, #76]	; (8016078 <netif_set_up+0x64>)
 801602c:	f009 ff9a 	bl	801ff64 <printf>
 8016030:	e01b      	b.n	801606a <netif_set_up+0x56>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016038:	f003 0301 	and.w	r3, r3, #1
 801603c:	2b00      	cmp	r3, #0
 801603e:	d114      	bne.n	801606a <netif_set_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016046:	f043 0301 	orr.w	r3, r3, #1
 801604a:	b2da      	uxtb	r2, r3
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	69db      	ldr	r3, [r3, #28]
 8016056:	2b00      	cmp	r3, #0
 8016058:	d003      	beq.n	8016062 <netif_set_up+0x4e>
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	69db      	ldr	r3, [r3, #28]
 801605e:	6878      	ldr	r0, [r7, #4]
 8016060:	4798      	blx	r3
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8016062:	2103      	movs	r1, #3
 8016064:	6878      	ldr	r0, [r7, #4]
 8016066:	f000 f809 	bl	801607c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801606a:	3708      	adds	r7, #8
 801606c:	46bd      	mov	sp, r7
 801606e:	bd80      	pop	{r7, pc}
 8016070:	08026fe0 	.word	0x08026fe0
 8016074:	08027168 	.word	0x08027168
 8016078:	08027030 	.word	0x08027030

0801607c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 801607c:	b580      	push	{r7, lr}
 801607e:	b082      	sub	sp, #8
 8016080:	af00      	add	r7, sp, #0
 8016082:	6078      	str	r0, [r7, #4]
 8016084:	460b      	mov	r3, r1
 8016086:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	2b00      	cmp	r3, #0
 801608c:	d106      	bne.n	801609c <netif_issue_reports+0x20>
 801608e:	4b18      	ldr	r3, [pc, #96]	; (80160f0 <netif_issue_reports+0x74>)
 8016090:	f240 326d 	movw	r2, #877	; 0x36d
 8016094:	4917      	ldr	r1, [pc, #92]	; (80160f4 <netif_issue_reports+0x78>)
 8016096:	4818      	ldr	r0, [pc, #96]	; (80160f8 <netif_issue_reports+0x7c>)
 8016098:	f009 ff64 	bl	801ff64 <printf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80160a2:	f003 0304 	and.w	r3, r3, #4
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d01e      	beq.n	80160e8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80160b0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d017      	beq.n	80160e8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80160b8:	78fb      	ldrb	r3, [r7, #3]
 80160ba:	f003 0301 	and.w	r3, r3, #1
 80160be:	2b00      	cmp	r3, #0
 80160c0:	d013      	beq.n	80160ea <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	3304      	adds	r3, #4
 80160c6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d00e      	beq.n	80160ea <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80160d2:	f003 0308 	and.w	r3, r3, #8
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d007      	beq.n	80160ea <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	3304      	adds	r3, #4
 80160de:	4619      	mov	r1, r3
 80160e0:	6878      	ldr	r0, [r7, #4]
 80160e2:	f008 fa5d 	bl	801e5a0 <etharp_request>
 80160e6:	e000      	b.n	80160ea <netif_issue_reports+0x6e>
    return;
 80160e8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80160ea:	3708      	adds	r7, #8
 80160ec:	46bd      	mov	sp, r7
 80160ee:	bd80      	pop	{r7, pc}
 80160f0:	08026fe0 	.word	0x08026fe0
 80160f4:	08027184 	.word	0x08027184
 80160f8:	08027030 	.word	0x08027030

080160fc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80160fc:	b580      	push	{r7, lr}
 80160fe:	b082      	sub	sp, #8
 8016100:	af00      	add	r7, sp, #0
 8016102:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	2b00      	cmp	r3, #0
 8016108:	d107      	bne.n	801611a <netif_set_down+0x1e>
 801610a:	4b16      	ldr	r3, [pc, #88]	; (8016164 <netif_set_down+0x68>)
 801610c:	f240 329b 	movw	r2, #923	; 0x39b
 8016110:	4915      	ldr	r1, [pc, #84]	; (8016168 <netif_set_down+0x6c>)
 8016112:	4816      	ldr	r0, [pc, #88]	; (801616c <netif_set_down+0x70>)
 8016114:	f009 ff26 	bl	801ff64 <printf>
 8016118:	e021      	b.n	801615e <netif_set_down+0x62>

  if (netif->flags & NETIF_FLAG_UP) {
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016120:	f003 0301 	and.w	r3, r3, #1
 8016124:	2b00      	cmp	r3, #0
 8016126:	d01a      	beq.n	801615e <netif_set_down+0x62>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801612e:	f023 0301 	bic.w	r3, r3, #1
 8016132:	b2da      	uxtb	r2, r3
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016140:	f003 0308 	and.w	r3, r3, #8
 8016144:	2b00      	cmp	r3, #0
 8016146:	d002      	beq.n	801614e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8016148:	6878      	ldr	r0, [r7, #4]
 801614a:	f007 fde7 	bl	801dd1c <etharp_cleanup_netif>

#if LWIP_IPV6
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	69db      	ldr	r3, [r3, #28]
 8016152:	2b00      	cmp	r3, #0
 8016154:	d003      	beq.n	801615e <netif_set_down+0x62>
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	69db      	ldr	r3, [r3, #28]
 801615a:	6878      	ldr	r0, [r7, #4]
 801615c:	4798      	blx	r3
  }
}
 801615e:	3708      	adds	r7, #8
 8016160:	46bd      	mov	sp, r7
 8016162:	bd80      	pop	{r7, pc}
 8016164:	08026fe0 	.word	0x08026fe0
 8016168:	080271a8 	.word	0x080271a8
 801616c:	08027030 	.word	0x08027030

08016170 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8016170:	b580      	push	{r7, lr}
 8016172:	b082      	sub	sp, #8
 8016174:	af00      	add	r7, sp, #0
 8016176:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	2b00      	cmp	r3, #0
 801617c:	d107      	bne.n	801618e <netif_set_link_up+0x1e>
 801617e:	4b13      	ldr	r3, [pc, #76]	; (80161cc <netif_set_link_up+0x5c>)
 8016180:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8016184:	4912      	ldr	r1, [pc, #72]	; (80161d0 <netif_set_link_up+0x60>)
 8016186:	4813      	ldr	r0, [pc, #76]	; (80161d4 <netif_set_link_up+0x64>)
 8016188:	f009 feec 	bl	801ff64 <printf>
 801618c:	e01b      	b.n	80161c6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016194:	f003 0304 	and.w	r3, r3, #4
 8016198:	2b00      	cmp	r3, #0
 801619a:	d114      	bne.n	80161c6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80161a2:	f043 0304 	orr.w	r3, r3, #4
 80161a6:	b2da      	uxtb	r2, r3
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80161ae:	2103      	movs	r1, #3
 80161b0:	6878      	ldr	r0, [r7, #4]
 80161b2:	f7ff ff63 	bl	801607c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	6a1b      	ldr	r3, [r3, #32]
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d003      	beq.n	80161c6 <netif_set_link_up+0x56>
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	6a1b      	ldr	r3, [r3, #32]
 80161c2:	6878      	ldr	r0, [r7, #4]
 80161c4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80161c6:	3708      	adds	r7, #8
 80161c8:	46bd      	mov	sp, r7
 80161ca:	bd80      	pop	{r7, pc}
 80161cc:	08026fe0 	.word	0x08026fe0
 80161d0:	080271c8 	.word	0x080271c8
 80161d4:	08027030 	.word	0x08027030

080161d8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80161d8:	b580      	push	{r7, lr}
 80161da:	b082      	sub	sp, #8
 80161dc:	af00      	add	r7, sp, #0
 80161de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d107      	bne.n	80161f6 <netif_set_link_down+0x1e>
 80161e6:	4b11      	ldr	r3, [pc, #68]	; (801622c <netif_set_link_down+0x54>)
 80161e8:	f240 4206 	movw	r2, #1030	; 0x406
 80161ec:	4910      	ldr	r1, [pc, #64]	; (8016230 <netif_set_link_down+0x58>)
 80161ee:	4811      	ldr	r0, [pc, #68]	; (8016234 <netif_set_link_down+0x5c>)
 80161f0:	f009 feb8 	bl	801ff64 <printf>
 80161f4:	e017      	b.n	8016226 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80161fc:	f003 0304 	and.w	r3, r3, #4
 8016200:	2b00      	cmp	r3, #0
 8016202:	d010      	beq.n	8016226 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801620a:	f023 0304 	bic.w	r3, r3, #4
 801620e:	b2da      	uxtb	r2, r3
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	6a1b      	ldr	r3, [r3, #32]
 801621a:	2b00      	cmp	r3, #0
 801621c:	d003      	beq.n	8016226 <netif_set_link_down+0x4e>
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	6a1b      	ldr	r3, [r3, #32]
 8016222:	6878      	ldr	r0, [r7, #4]
 8016224:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8016226:	3708      	adds	r7, #8
 8016228:	46bd      	mov	sp, r7
 801622a:	bd80      	pop	{r7, pc}
 801622c:	08026fe0 	.word	0x08026fe0
 8016230:	080271ec 	.word	0x080271ec
 8016234:	08027030 	.word	0x08027030

08016238 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8016238:	b480      	push	{r7}
 801623a:	b083      	sub	sp, #12
 801623c:	af00      	add	r7, sp, #0
 801623e:	6078      	str	r0, [r7, #4]
 8016240:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	2b00      	cmp	r3, #0
 8016246:	d002      	beq.n	801624e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	683a      	ldr	r2, [r7, #0]
 801624c:	621a      	str	r2, [r3, #32]
  }
}
 801624e:	bf00      	nop
 8016250:	370c      	adds	r7, #12
 8016252:	46bd      	mov	sp, r7
 8016254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016258:	4770      	bx	lr

0801625a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801625a:	b480      	push	{r7}
 801625c:	b085      	sub	sp, #20
 801625e:	af00      	add	r7, sp, #0
 8016260:	60f8      	str	r0, [r7, #12]
 8016262:	60b9      	str	r1, [r7, #8]
 8016264:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8016266:	f06f 030b 	mvn.w	r3, #11
}
 801626a:	4618      	mov	r0, r3
 801626c:	3714      	adds	r7, #20
 801626e:	46bd      	mov	sp, r7
 8016270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016274:	4770      	bx	lr
	...

08016278 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8016278:	b480      	push	{r7}
 801627a:	b085      	sub	sp, #20
 801627c:	af00      	add	r7, sp, #0
 801627e:	4603      	mov	r3, r0
 8016280:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8016282:	79fb      	ldrb	r3, [r7, #7]
 8016284:	2b00      	cmp	r3, #0
 8016286:	d013      	beq.n	80162b0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8016288:	4b0d      	ldr	r3, [pc, #52]	; (80162c0 <netif_get_by_index+0x48>)
 801628a:	681b      	ldr	r3, [r3, #0]
 801628c:	60fb      	str	r3, [r7, #12]
 801628e:	e00c      	b.n	80162aa <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016296:	3301      	adds	r3, #1
 8016298:	b2db      	uxtb	r3, r3
 801629a:	79fa      	ldrb	r2, [r7, #7]
 801629c:	429a      	cmp	r2, r3
 801629e:	d101      	bne.n	80162a4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	e006      	b.n	80162b2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	681b      	ldr	r3, [r3, #0]
 80162a8:	60fb      	str	r3, [r7, #12]
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d1ef      	bne.n	8016290 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80162b0:	2300      	movs	r3, #0
}
 80162b2:	4618      	mov	r0, r3
 80162b4:	3714      	adds	r7, #20
 80162b6:	46bd      	mov	sp, r7
 80162b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162bc:	4770      	bx	lr
 80162be:	bf00      	nop
 80162c0:	20018890 	.word	0x20018890

080162c4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80162c4:	b580      	push	{r7, lr}
 80162c6:	b082      	sub	sp, #8
 80162c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80162ca:	f009 fdc9 	bl	801fe60 <sys_arch_protect>
 80162ce:	6038      	str	r0, [r7, #0]
 80162d0:	4b0d      	ldr	r3, [pc, #52]	; (8016308 <pbuf_free_ooseq+0x44>)
 80162d2:	2200      	movs	r2, #0
 80162d4:	701a      	strb	r2, [r3, #0]
 80162d6:	6838      	ldr	r0, [r7, #0]
 80162d8:	f009 fdd0 	bl	801fe7c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80162dc:	4b0b      	ldr	r3, [pc, #44]	; (801630c <pbuf_free_ooseq+0x48>)
 80162de:	681b      	ldr	r3, [r3, #0]
 80162e0:	607b      	str	r3, [r7, #4]
 80162e2:	e00a      	b.n	80162fa <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d003      	beq.n	80162f4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80162ec:	6878      	ldr	r0, [r7, #4]
 80162ee:	f002 fc81 	bl	8018bf4 <tcp_free_ooseq>
      return;
 80162f2:	e005      	b.n	8016300 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	68db      	ldr	r3, [r3, #12]
 80162f8:	607b      	str	r3, [r7, #4]
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d1f1      	bne.n	80162e4 <pbuf_free_ooseq+0x20>
    }
  }
}
 8016300:	3708      	adds	r7, #8
 8016302:	46bd      	mov	sp, r7
 8016304:	bd80      	pop	{r7, pc}
 8016306:	bf00      	nop
 8016308:	20018899 	.word	0x20018899
 801630c:	200188a8 	.word	0x200188a8

08016310 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8016310:	b580      	push	{r7, lr}
 8016312:	b082      	sub	sp, #8
 8016314:	af00      	add	r7, sp, #0
 8016316:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8016318:	f7ff ffd4 	bl	80162c4 <pbuf_free_ooseq>
}
 801631c:	bf00      	nop
 801631e:	3708      	adds	r7, #8
 8016320:	46bd      	mov	sp, r7
 8016322:	bd80      	pop	{r7, pc}

08016324 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8016324:	b580      	push	{r7, lr}
 8016326:	b082      	sub	sp, #8
 8016328:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801632a:	f009 fd99 	bl	801fe60 <sys_arch_protect>
 801632e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8016330:	4b0f      	ldr	r3, [pc, #60]	; (8016370 <pbuf_pool_is_empty+0x4c>)
 8016332:	781b      	ldrb	r3, [r3, #0]
 8016334:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8016336:	4b0e      	ldr	r3, [pc, #56]	; (8016370 <pbuf_pool_is_empty+0x4c>)
 8016338:	2201      	movs	r2, #1
 801633a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 801633c:	6878      	ldr	r0, [r7, #4]
 801633e:	f009 fd9d 	bl	801fe7c <sys_arch_unprotect>

  if (!queued) {
 8016342:	78fb      	ldrb	r3, [r7, #3]
 8016344:	2b00      	cmp	r3, #0
 8016346:	d10f      	bne.n	8016368 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8016348:	2100      	movs	r1, #0
 801634a:	480a      	ldr	r0, [pc, #40]	; (8016374 <pbuf_pool_is_empty+0x50>)
 801634c:	f7fd f98e 	bl	801366c <tcpip_try_callback>
 8016350:	4603      	mov	r3, r0
 8016352:	2b00      	cmp	r3, #0
 8016354:	d008      	beq.n	8016368 <pbuf_pool_is_empty+0x44>
 8016356:	f009 fd83 	bl	801fe60 <sys_arch_protect>
 801635a:	6078      	str	r0, [r7, #4]
 801635c:	4b04      	ldr	r3, [pc, #16]	; (8016370 <pbuf_pool_is_empty+0x4c>)
 801635e:	2200      	movs	r2, #0
 8016360:	701a      	strb	r2, [r3, #0]
 8016362:	6878      	ldr	r0, [r7, #4]
 8016364:	f009 fd8a 	bl	801fe7c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8016368:	bf00      	nop
 801636a:	3708      	adds	r7, #8
 801636c:	46bd      	mov	sp, r7
 801636e:	bd80      	pop	{r7, pc}
 8016370:	20018899 	.word	0x20018899
 8016374:	08016311 	.word	0x08016311

08016378 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8016378:	b480      	push	{r7}
 801637a:	b085      	sub	sp, #20
 801637c:	af00      	add	r7, sp, #0
 801637e:	60f8      	str	r0, [r7, #12]
 8016380:	60b9      	str	r1, [r7, #8]
 8016382:	4611      	mov	r1, r2
 8016384:	461a      	mov	r2, r3
 8016386:	460b      	mov	r3, r1
 8016388:	80fb      	strh	r3, [r7, #6]
 801638a:	4613      	mov	r3, r2
 801638c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801638e:	68fb      	ldr	r3, [r7, #12]
 8016390:	2200      	movs	r2, #0
 8016392:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8016394:	68fb      	ldr	r3, [r7, #12]
 8016396:	68ba      	ldr	r2, [r7, #8]
 8016398:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801639a:	68fb      	ldr	r3, [r7, #12]
 801639c:	88fa      	ldrh	r2, [r7, #6]
 801639e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80163a0:	68fb      	ldr	r3, [r7, #12]
 80163a2:	88ba      	ldrh	r2, [r7, #4]
 80163a4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80163a6:	8b3b      	ldrh	r3, [r7, #24]
 80163a8:	b2da      	uxtb	r2, r3
 80163aa:	68fb      	ldr	r3, [r7, #12]
 80163ac:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80163ae:	68fb      	ldr	r3, [r7, #12]
 80163b0:	7f3a      	ldrb	r2, [r7, #28]
 80163b2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80163b4:	68fb      	ldr	r3, [r7, #12]
 80163b6:	2201      	movs	r2, #1
 80163b8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80163ba:	68fb      	ldr	r3, [r7, #12]
 80163bc:	2200      	movs	r2, #0
 80163be:	73da      	strb	r2, [r3, #15]
}
 80163c0:	bf00      	nop
 80163c2:	3714      	adds	r7, #20
 80163c4:	46bd      	mov	sp, r7
 80163c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163ca:	4770      	bx	lr

080163cc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80163cc:	b580      	push	{r7, lr}
 80163ce:	b08c      	sub	sp, #48	; 0x30
 80163d0:	af02      	add	r7, sp, #8
 80163d2:	4603      	mov	r3, r0
 80163d4:	71fb      	strb	r3, [r7, #7]
 80163d6:	460b      	mov	r3, r1
 80163d8:	80bb      	strh	r3, [r7, #4]
 80163da:	4613      	mov	r3, r2
 80163dc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80163de:	79fb      	ldrb	r3, [r7, #7]
 80163e0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80163e2:	887b      	ldrh	r3, [r7, #2]
 80163e4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80163e8:	d07f      	beq.n	80164ea <pbuf_alloc+0x11e>
 80163ea:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80163ee:	f300 80c8 	bgt.w	8016582 <pbuf_alloc+0x1b6>
 80163f2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80163f6:	d010      	beq.n	801641a <pbuf_alloc+0x4e>
 80163f8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80163fc:	f300 80c1 	bgt.w	8016582 <pbuf_alloc+0x1b6>
 8016400:	2b01      	cmp	r3, #1
 8016402:	d002      	beq.n	801640a <pbuf_alloc+0x3e>
 8016404:	2b41      	cmp	r3, #65	; 0x41
 8016406:	f040 80bc 	bne.w	8016582 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801640a:	887a      	ldrh	r2, [r7, #2]
 801640c:	88bb      	ldrh	r3, [r7, #4]
 801640e:	4619      	mov	r1, r3
 8016410:	2000      	movs	r0, #0
 8016412:	f000 f8d1 	bl	80165b8 <pbuf_alloc_reference>
 8016416:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8016418:	e0bd      	b.n	8016596 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801641a:	2300      	movs	r3, #0
 801641c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 801641e:	2300      	movs	r3, #0
 8016420:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8016422:	88bb      	ldrh	r3, [r7, #4]
 8016424:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8016426:	200c      	movs	r0, #12
 8016428:	f7ff fba2 	bl	8015b70 <memp_malloc>
 801642c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801642e:	693b      	ldr	r3, [r7, #16]
 8016430:	2b00      	cmp	r3, #0
 8016432:	d109      	bne.n	8016448 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8016434:	f7ff ff76 	bl	8016324 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8016438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801643a:	2b00      	cmp	r3, #0
 801643c:	d002      	beq.n	8016444 <pbuf_alloc+0x78>
            pbuf_free(p);
 801643e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016440:	f000 faa8 	bl	8016994 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8016444:	2300      	movs	r3, #0
 8016446:	e0a7      	b.n	8016598 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8016448:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801644a:	3303      	adds	r3, #3
 801644c:	b29b      	uxth	r3, r3
 801644e:	f023 0303 	bic.w	r3, r3, #3
 8016452:	b29b      	uxth	r3, r3
 8016454:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8016458:	b29b      	uxth	r3, r3
 801645a:	8b7a      	ldrh	r2, [r7, #26]
 801645c:	4293      	cmp	r3, r2
 801645e:	bf28      	it	cs
 8016460:	4613      	movcs	r3, r2
 8016462:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8016464:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016466:	3310      	adds	r3, #16
 8016468:	693a      	ldr	r2, [r7, #16]
 801646a:	4413      	add	r3, r2
 801646c:	3303      	adds	r3, #3
 801646e:	f023 0303 	bic.w	r3, r3, #3
 8016472:	4618      	mov	r0, r3
 8016474:	89f9      	ldrh	r1, [r7, #14]
 8016476:	8b7a      	ldrh	r2, [r7, #26]
 8016478:	2300      	movs	r3, #0
 801647a:	9301      	str	r3, [sp, #4]
 801647c:	887b      	ldrh	r3, [r7, #2]
 801647e:	9300      	str	r3, [sp, #0]
 8016480:	460b      	mov	r3, r1
 8016482:	4601      	mov	r1, r0
 8016484:	6938      	ldr	r0, [r7, #16]
 8016486:	f7ff ff77 	bl	8016378 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801648a:	693b      	ldr	r3, [r7, #16]
 801648c:	685b      	ldr	r3, [r3, #4]
 801648e:	f003 0303 	and.w	r3, r3, #3
 8016492:	2b00      	cmp	r3, #0
 8016494:	d006      	beq.n	80164a4 <pbuf_alloc+0xd8>
 8016496:	4b42      	ldr	r3, [pc, #264]	; (80165a0 <pbuf_alloc+0x1d4>)
 8016498:	f44f 7280 	mov.w	r2, #256	; 0x100
 801649c:	4941      	ldr	r1, [pc, #260]	; (80165a4 <pbuf_alloc+0x1d8>)
 801649e:	4842      	ldr	r0, [pc, #264]	; (80165a8 <pbuf_alloc+0x1dc>)
 80164a0:	f009 fd60 	bl	801ff64 <printf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80164a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80164a6:	3303      	adds	r3, #3
 80164a8:	f023 0303 	bic.w	r3, r3, #3
 80164ac:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80164b0:	d106      	bne.n	80164c0 <pbuf_alloc+0xf4>
 80164b2:	4b3b      	ldr	r3, [pc, #236]	; (80165a0 <pbuf_alloc+0x1d4>)
 80164b4:	f44f 7281 	mov.w	r2, #258	; 0x102
 80164b8:	493c      	ldr	r1, [pc, #240]	; (80165ac <pbuf_alloc+0x1e0>)
 80164ba:	483b      	ldr	r0, [pc, #236]	; (80165a8 <pbuf_alloc+0x1dc>)
 80164bc:	f009 fd52 	bl	801ff64 <printf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80164c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d102      	bne.n	80164cc <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80164c6:	693b      	ldr	r3, [r7, #16]
 80164c8:	627b      	str	r3, [r7, #36]	; 0x24
 80164ca:	e002      	b.n	80164d2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80164cc:	69fb      	ldr	r3, [r7, #28]
 80164ce:	693a      	ldr	r2, [r7, #16]
 80164d0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80164d2:	693b      	ldr	r3, [r7, #16]
 80164d4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80164d6:	8b7a      	ldrh	r2, [r7, #26]
 80164d8:	89fb      	ldrh	r3, [r7, #14]
 80164da:	1ad3      	subs	r3, r2, r3
 80164dc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80164de:	2300      	movs	r3, #0
 80164e0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80164e2:	8b7b      	ldrh	r3, [r7, #26]
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d19e      	bne.n	8016426 <pbuf_alloc+0x5a>
      break;
 80164e8:	e055      	b.n	8016596 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80164ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80164ec:	3303      	adds	r3, #3
 80164ee:	b29b      	uxth	r3, r3
 80164f0:	f023 0303 	bic.w	r3, r3, #3
 80164f4:	b29a      	uxth	r2, r3
 80164f6:	88bb      	ldrh	r3, [r7, #4]
 80164f8:	3303      	adds	r3, #3
 80164fa:	b29b      	uxth	r3, r3
 80164fc:	f023 0303 	bic.w	r3, r3, #3
 8016500:	b29b      	uxth	r3, r3
 8016502:	4413      	add	r3, r2
 8016504:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8016506:	8b3b      	ldrh	r3, [r7, #24]
 8016508:	3310      	adds	r3, #16
 801650a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801650c:	8b3a      	ldrh	r2, [r7, #24]
 801650e:	88bb      	ldrh	r3, [r7, #4]
 8016510:	3303      	adds	r3, #3
 8016512:	f023 0303 	bic.w	r3, r3, #3
 8016516:	429a      	cmp	r2, r3
 8016518:	d306      	bcc.n	8016528 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801651a:	8afa      	ldrh	r2, [r7, #22]
 801651c:	88bb      	ldrh	r3, [r7, #4]
 801651e:	3303      	adds	r3, #3
 8016520:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8016524:	429a      	cmp	r2, r3
 8016526:	d201      	bcs.n	801652c <pbuf_alloc+0x160>
        return NULL;
 8016528:	2300      	movs	r3, #0
 801652a:	e035      	b.n	8016598 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801652c:	8afb      	ldrh	r3, [r7, #22]
 801652e:	4618      	mov	r0, r3
 8016530:	f7ff f974 	bl	801581c <mem_malloc>
 8016534:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8016536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016538:	2b00      	cmp	r3, #0
 801653a:	d101      	bne.n	8016540 <pbuf_alloc+0x174>
        return NULL;
 801653c:	2300      	movs	r3, #0
 801653e:	e02b      	b.n	8016598 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8016540:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016542:	3310      	adds	r3, #16
 8016544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016546:	4413      	add	r3, r2
 8016548:	3303      	adds	r3, #3
 801654a:	f023 0303 	bic.w	r3, r3, #3
 801654e:	4618      	mov	r0, r3
 8016550:	88b9      	ldrh	r1, [r7, #4]
 8016552:	88ba      	ldrh	r2, [r7, #4]
 8016554:	2300      	movs	r3, #0
 8016556:	9301      	str	r3, [sp, #4]
 8016558:	887b      	ldrh	r3, [r7, #2]
 801655a:	9300      	str	r3, [sp, #0]
 801655c:	460b      	mov	r3, r1
 801655e:	4601      	mov	r1, r0
 8016560:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016562:	f7ff ff09 	bl	8016378 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8016566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016568:	685b      	ldr	r3, [r3, #4]
 801656a:	f003 0303 	and.w	r3, r3, #3
 801656e:	2b00      	cmp	r3, #0
 8016570:	d010      	beq.n	8016594 <pbuf_alloc+0x1c8>
 8016572:	4b0b      	ldr	r3, [pc, #44]	; (80165a0 <pbuf_alloc+0x1d4>)
 8016574:	f44f 7291 	mov.w	r2, #290	; 0x122
 8016578:	490d      	ldr	r1, [pc, #52]	; (80165b0 <pbuf_alloc+0x1e4>)
 801657a:	480b      	ldr	r0, [pc, #44]	; (80165a8 <pbuf_alloc+0x1dc>)
 801657c:	f009 fcf2 	bl	801ff64 <printf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8016580:	e008      	b.n	8016594 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8016582:	4b07      	ldr	r3, [pc, #28]	; (80165a0 <pbuf_alloc+0x1d4>)
 8016584:	f240 1227 	movw	r2, #295	; 0x127
 8016588:	490a      	ldr	r1, [pc, #40]	; (80165b4 <pbuf_alloc+0x1e8>)
 801658a:	4807      	ldr	r0, [pc, #28]	; (80165a8 <pbuf_alloc+0x1dc>)
 801658c:	f009 fcea 	bl	801ff64 <printf>
      return NULL;
 8016590:	2300      	movs	r3, #0
 8016592:	e001      	b.n	8016598 <pbuf_alloc+0x1cc>
      break;
 8016594:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8016596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8016598:	4618      	mov	r0, r3
 801659a:	3728      	adds	r7, #40	; 0x28
 801659c:	46bd      	mov	sp, r7
 801659e:	bd80      	pop	{r7, pc}
 80165a0:	08027210 	.word	0x08027210
 80165a4:	08027240 	.word	0x08027240
 80165a8:	08027270 	.word	0x08027270
 80165ac:	08027298 	.word	0x08027298
 80165b0:	080272cc 	.word	0x080272cc
 80165b4:	080272f8 	.word	0x080272f8

080165b8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80165b8:	b580      	push	{r7, lr}
 80165ba:	b086      	sub	sp, #24
 80165bc:	af02      	add	r7, sp, #8
 80165be:	6078      	str	r0, [r7, #4]
 80165c0:	460b      	mov	r3, r1
 80165c2:	807b      	strh	r3, [r7, #2]
 80165c4:	4613      	mov	r3, r2
 80165c6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80165c8:	883b      	ldrh	r3, [r7, #0]
 80165ca:	2b41      	cmp	r3, #65	; 0x41
 80165cc:	d009      	beq.n	80165e2 <pbuf_alloc_reference+0x2a>
 80165ce:	883b      	ldrh	r3, [r7, #0]
 80165d0:	2b01      	cmp	r3, #1
 80165d2:	d006      	beq.n	80165e2 <pbuf_alloc_reference+0x2a>
 80165d4:	4b0f      	ldr	r3, [pc, #60]	; (8016614 <pbuf_alloc_reference+0x5c>)
 80165d6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80165da:	490f      	ldr	r1, [pc, #60]	; (8016618 <pbuf_alloc_reference+0x60>)
 80165dc:	480f      	ldr	r0, [pc, #60]	; (801661c <pbuf_alloc_reference+0x64>)
 80165de:	f009 fcc1 	bl	801ff64 <printf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80165e2:	200b      	movs	r0, #11
 80165e4:	f7ff fac4 	bl	8015b70 <memp_malloc>
 80165e8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80165ea:	68fb      	ldr	r3, [r7, #12]
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d101      	bne.n	80165f4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80165f0:	2300      	movs	r3, #0
 80165f2:	e00b      	b.n	801660c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80165f4:	8879      	ldrh	r1, [r7, #2]
 80165f6:	887a      	ldrh	r2, [r7, #2]
 80165f8:	2300      	movs	r3, #0
 80165fa:	9301      	str	r3, [sp, #4]
 80165fc:	883b      	ldrh	r3, [r7, #0]
 80165fe:	9300      	str	r3, [sp, #0]
 8016600:	460b      	mov	r3, r1
 8016602:	6879      	ldr	r1, [r7, #4]
 8016604:	68f8      	ldr	r0, [r7, #12]
 8016606:	f7ff feb7 	bl	8016378 <pbuf_init_alloced_pbuf>
  return p;
 801660a:	68fb      	ldr	r3, [r7, #12]
}
 801660c:	4618      	mov	r0, r3
 801660e:	3710      	adds	r7, #16
 8016610:	46bd      	mov	sp, r7
 8016612:	bd80      	pop	{r7, pc}
 8016614:	08027210 	.word	0x08027210
 8016618:	08027314 	.word	0x08027314
 801661c:	08027270 	.word	0x08027270

08016620 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8016620:	b580      	push	{r7, lr}
 8016622:	b088      	sub	sp, #32
 8016624:	af02      	add	r7, sp, #8
 8016626:	607b      	str	r3, [r7, #4]
 8016628:	4603      	mov	r3, r0
 801662a:	73fb      	strb	r3, [r7, #15]
 801662c:	460b      	mov	r3, r1
 801662e:	81bb      	strh	r3, [r7, #12]
 8016630:	4613      	mov	r3, r2
 8016632:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8016634:	7bfb      	ldrb	r3, [r7, #15]
 8016636:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8016638:	8a7b      	ldrh	r3, [r7, #18]
 801663a:	3303      	adds	r3, #3
 801663c:	f023 0203 	bic.w	r2, r3, #3
 8016640:	89bb      	ldrh	r3, [r7, #12]
 8016642:	441a      	add	r2, r3
 8016644:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016646:	429a      	cmp	r2, r3
 8016648:	d901      	bls.n	801664e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801664a:	2300      	movs	r3, #0
 801664c:	e018      	b.n	8016680 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801664e:	6a3b      	ldr	r3, [r7, #32]
 8016650:	2b00      	cmp	r3, #0
 8016652:	d007      	beq.n	8016664 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8016654:	8a7b      	ldrh	r3, [r7, #18]
 8016656:	3303      	adds	r3, #3
 8016658:	f023 0303 	bic.w	r3, r3, #3
 801665c:	6a3a      	ldr	r2, [r7, #32]
 801665e:	4413      	add	r3, r2
 8016660:	617b      	str	r3, [r7, #20]
 8016662:	e001      	b.n	8016668 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8016664:	2300      	movs	r3, #0
 8016666:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8016668:	6878      	ldr	r0, [r7, #4]
 801666a:	89b9      	ldrh	r1, [r7, #12]
 801666c:	89ba      	ldrh	r2, [r7, #12]
 801666e:	2302      	movs	r3, #2
 8016670:	9301      	str	r3, [sp, #4]
 8016672:	897b      	ldrh	r3, [r7, #10]
 8016674:	9300      	str	r3, [sp, #0]
 8016676:	460b      	mov	r3, r1
 8016678:	6979      	ldr	r1, [r7, #20]
 801667a:	f7ff fe7d 	bl	8016378 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801667e:	687b      	ldr	r3, [r7, #4]
}
 8016680:	4618      	mov	r0, r3
 8016682:	3718      	adds	r7, #24
 8016684:	46bd      	mov	sp, r7
 8016686:	bd80      	pop	{r7, pc}

08016688 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8016688:	b580      	push	{r7, lr}
 801668a:	b084      	sub	sp, #16
 801668c:	af00      	add	r7, sp, #0
 801668e:	6078      	str	r0, [r7, #4]
 8016690:	460b      	mov	r3, r1
 8016692:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	2b00      	cmp	r3, #0
 8016698:	d106      	bne.n	80166a8 <pbuf_realloc+0x20>
 801669a:	4b3a      	ldr	r3, [pc, #232]	; (8016784 <pbuf_realloc+0xfc>)
 801669c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80166a0:	4939      	ldr	r1, [pc, #228]	; (8016788 <pbuf_realloc+0x100>)
 80166a2:	483a      	ldr	r0, [pc, #232]	; (801678c <pbuf_realloc+0x104>)
 80166a4:	f009 fc5e 	bl	801ff64 <printf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	891b      	ldrh	r3, [r3, #8]
 80166ac:	887a      	ldrh	r2, [r7, #2]
 80166ae:	429a      	cmp	r2, r3
 80166b0:	d263      	bcs.n	801677a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	891a      	ldrh	r2, [r3, #8]
 80166b6:	887b      	ldrh	r3, [r7, #2]
 80166b8:	1ad3      	subs	r3, r2, r3
 80166ba:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80166bc:	887b      	ldrh	r3, [r7, #2]
 80166be:	817b      	strh	r3, [r7, #10]
  q = p;
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80166c4:	e018      	b.n	80166f8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80166c6:	68fb      	ldr	r3, [r7, #12]
 80166c8:	895b      	ldrh	r3, [r3, #10]
 80166ca:	897a      	ldrh	r2, [r7, #10]
 80166cc:	1ad3      	subs	r3, r2, r3
 80166ce:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	891a      	ldrh	r2, [r3, #8]
 80166d4:	893b      	ldrh	r3, [r7, #8]
 80166d6:	1ad3      	subs	r3, r2, r3
 80166d8:	b29a      	uxth	r2, r3
 80166da:	68fb      	ldr	r3, [r7, #12]
 80166dc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80166de:	68fb      	ldr	r3, [r7, #12]
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80166e4:	68fb      	ldr	r3, [r7, #12]
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d106      	bne.n	80166f8 <pbuf_realloc+0x70>
 80166ea:	4b26      	ldr	r3, [pc, #152]	; (8016784 <pbuf_realloc+0xfc>)
 80166ec:	f240 12af 	movw	r2, #431	; 0x1af
 80166f0:	4927      	ldr	r1, [pc, #156]	; (8016790 <pbuf_realloc+0x108>)
 80166f2:	4826      	ldr	r0, [pc, #152]	; (801678c <pbuf_realloc+0x104>)
 80166f4:	f009 fc36 	bl	801ff64 <printf>
  while (rem_len > q->len) {
 80166f8:	68fb      	ldr	r3, [r7, #12]
 80166fa:	895b      	ldrh	r3, [r3, #10]
 80166fc:	897a      	ldrh	r2, [r7, #10]
 80166fe:	429a      	cmp	r2, r3
 8016700:	d8e1      	bhi.n	80166c6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8016702:	68fb      	ldr	r3, [r7, #12]
 8016704:	7b1b      	ldrb	r3, [r3, #12]
 8016706:	f003 030f 	and.w	r3, r3, #15
 801670a:	2b00      	cmp	r3, #0
 801670c:	d121      	bne.n	8016752 <pbuf_realloc+0xca>
 801670e:	68fb      	ldr	r3, [r7, #12]
 8016710:	895b      	ldrh	r3, [r3, #10]
 8016712:	897a      	ldrh	r2, [r7, #10]
 8016714:	429a      	cmp	r2, r3
 8016716:	d01c      	beq.n	8016752 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8016718:	68fb      	ldr	r3, [r7, #12]
 801671a:	7b5b      	ldrb	r3, [r3, #13]
 801671c:	f003 0302 	and.w	r3, r3, #2
 8016720:	2b00      	cmp	r3, #0
 8016722:	d116      	bne.n	8016752 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8016724:	68fb      	ldr	r3, [r7, #12]
 8016726:	685a      	ldr	r2, [r3, #4]
 8016728:	68fb      	ldr	r3, [r7, #12]
 801672a:	1ad3      	subs	r3, r2, r3
 801672c:	b29a      	uxth	r2, r3
 801672e:	897b      	ldrh	r3, [r7, #10]
 8016730:	4413      	add	r3, r2
 8016732:	b29b      	uxth	r3, r3
 8016734:	4619      	mov	r1, r3
 8016736:	68f8      	ldr	r0, [r7, #12]
 8016738:	f7fe ff66 	bl	8015608 <mem_trim>
 801673c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801673e:	68fb      	ldr	r3, [r7, #12]
 8016740:	2b00      	cmp	r3, #0
 8016742:	d106      	bne.n	8016752 <pbuf_realloc+0xca>
 8016744:	4b0f      	ldr	r3, [pc, #60]	; (8016784 <pbuf_realloc+0xfc>)
 8016746:	f240 12bd 	movw	r2, #445	; 0x1bd
 801674a:	4912      	ldr	r1, [pc, #72]	; (8016794 <pbuf_realloc+0x10c>)
 801674c:	480f      	ldr	r0, [pc, #60]	; (801678c <pbuf_realloc+0x104>)
 801674e:	f009 fc09 	bl	801ff64 <printf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8016752:	68fb      	ldr	r3, [r7, #12]
 8016754:	897a      	ldrh	r2, [r7, #10]
 8016756:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8016758:	68fb      	ldr	r3, [r7, #12]
 801675a:	895a      	ldrh	r2, [r3, #10]
 801675c:	68fb      	ldr	r3, [r7, #12]
 801675e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8016760:	68fb      	ldr	r3, [r7, #12]
 8016762:	681b      	ldr	r3, [r3, #0]
 8016764:	2b00      	cmp	r3, #0
 8016766:	d004      	beq.n	8016772 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8016768:	68fb      	ldr	r3, [r7, #12]
 801676a:	681b      	ldr	r3, [r3, #0]
 801676c:	4618      	mov	r0, r3
 801676e:	f000 f911 	bl	8016994 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8016772:	68fb      	ldr	r3, [r7, #12]
 8016774:	2200      	movs	r2, #0
 8016776:	601a      	str	r2, [r3, #0]
 8016778:	e000      	b.n	801677c <pbuf_realloc+0xf4>
    return;
 801677a:	bf00      	nop

}
 801677c:	3710      	adds	r7, #16
 801677e:	46bd      	mov	sp, r7
 8016780:	bd80      	pop	{r7, pc}
 8016782:	bf00      	nop
 8016784:	08027210 	.word	0x08027210
 8016788:	08027328 	.word	0x08027328
 801678c:	08027270 	.word	0x08027270
 8016790:	08027340 	.word	0x08027340
 8016794:	08027358 	.word	0x08027358

08016798 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8016798:	b580      	push	{r7, lr}
 801679a:	b086      	sub	sp, #24
 801679c:	af00      	add	r7, sp, #0
 801679e:	60f8      	str	r0, [r7, #12]
 80167a0:	60b9      	str	r1, [r7, #8]
 80167a2:	4613      	mov	r3, r2
 80167a4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80167a6:	68fb      	ldr	r3, [r7, #12]
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d106      	bne.n	80167ba <pbuf_add_header_impl+0x22>
 80167ac:	4b2b      	ldr	r3, [pc, #172]	; (801685c <pbuf_add_header_impl+0xc4>)
 80167ae:	f240 12df 	movw	r2, #479	; 0x1df
 80167b2:	492b      	ldr	r1, [pc, #172]	; (8016860 <pbuf_add_header_impl+0xc8>)
 80167b4:	482b      	ldr	r0, [pc, #172]	; (8016864 <pbuf_add_header_impl+0xcc>)
 80167b6:	f009 fbd5 	bl	801ff64 <printf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	2b00      	cmp	r3, #0
 80167be:	d003      	beq.n	80167c8 <pbuf_add_header_impl+0x30>
 80167c0:	68bb      	ldr	r3, [r7, #8]
 80167c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80167c6:	d301      	bcc.n	80167cc <pbuf_add_header_impl+0x34>
    return 1;
 80167c8:	2301      	movs	r3, #1
 80167ca:	e043      	b.n	8016854 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80167cc:	68bb      	ldr	r3, [r7, #8]
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d101      	bne.n	80167d6 <pbuf_add_header_impl+0x3e>
    return 0;
 80167d2:	2300      	movs	r3, #0
 80167d4:	e03e      	b.n	8016854 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80167d6:	68bb      	ldr	r3, [r7, #8]
 80167d8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80167da:	68fb      	ldr	r3, [r7, #12]
 80167dc:	891a      	ldrh	r2, [r3, #8]
 80167de:	8a7b      	ldrh	r3, [r7, #18]
 80167e0:	4413      	add	r3, r2
 80167e2:	b29b      	uxth	r3, r3
 80167e4:	8a7a      	ldrh	r2, [r7, #18]
 80167e6:	429a      	cmp	r2, r3
 80167e8:	d901      	bls.n	80167ee <pbuf_add_header_impl+0x56>
    return 1;
 80167ea:	2301      	movs	r3, #1
 80167ec:	e032      	b.n	8016854 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80167ee:	68fb      	ldr	r3, [r7, #12]
 80167f0:	7b1b      	ldrb	r3, [r3, #12]
 80167f2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80167f4:	8a3b      	ldrh	r3, [r7, #16]
 80167f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d00c      	beq.n	8016818 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80167fe:	68fb      	ldr	r3, [r7, #12]
 8016800:	685a      	ldr	r2, [r3, #4]
 8016802:	68bb      	ldr	r3, [r7, #8]
 8016804:	425b      	negs	r3, r3
 8016806:	4413      	add	r3, r2
 8016808:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801680a:	68fb      	ldr	r3, [r7, #12]
 801680c:	3310      	adds	r3, #16
 801680e:	697a      	ldr	r2, [r7, #20]
 8016810:	429a      	cmp	r2, r3
 8016812:	d20d      	bcs.n	8016830 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8016814:	2301      	movs	r3, #1
 8016816:	e01d      	b.n	8016854 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8016818:	79fb      	ldrb	r3, [r7, #7]
 801681a:	2b00      	cmp	r3, #0
 801681c:	d006      	beq.n	801682c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801681e:	68fb      	ldr	r3, [r7, #12]
 8016820:	685a      	ldr	r2, [r3, #4]
 8016822:	68bb      	ldr	r3, [r7, #8]
 8016824:	425b      	negs	r3, r3
 8016826:	4413      	add	r3, r2
 8016828:	617b      	str	r3, [r7, #20]
 801682a:	e001      	b.n	8016830 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801682c:	2301      	movs	r3, #1
 801682e:	e011      	b.n	8016854 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8016830:	68fb      	ldr	r3, [r7, #12]
 8016832:	697a      	ldr	r2, [r7, #20]
 8016834:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8016836:	68fb      	ldr	r3, [r7, #12]
 8016838:	895a      	ldrh	r2, [r3, #10]
 801683a:	8a7b      	ldrh	r3, [r7, #18]
 801683c:	4413      	add	r3, r2
 801683e:	b29a      	uxth	r2, r3
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8016844:	68fb      	ldr	r3, [r7, #12]
 8016846:	891a      	ldrh	r2, [r3, #8]
 8016848:	8a7b      	ldrh	r3, [r7, #18]
 801684a:	4413      	add	r3, r2
 801684c:	b29a      	uxth	r2, r3
 801684e:	68fb      	ldr	r3, [r7, #12]
 8016850:	811a      	strh	r2, [r3, #8]


  return 0;
 8016852:	2300      	movs	r3, #0
}
 8016854:	4618      	mov	r0, r3
 8016856:	3718      	adds	r7, #24
 8016858:	46bd      	mov	sp, r7
 801685a:	bd80      	pop	{r7, pc}
 801685c:	08027210 	.word	0x08027210
 8016860:	08027374 	.word	0x08027374
 8016864:	08027270 	.word	0x08027270

08016868 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8016868:	b580      	push	{r7, lr}
 801686a:	b082      	sub	sp, #8
 801686c:	af00      	add	r7, sp, #0
 801686e:	6078      	str	r0, [r7, #4]
 8016870:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8016872:	2200      	movs	r2, #0
 8016874:	6839      	ldr	r1, [r7, #0]
 8016876:	6878      	ldr	r0, [r7, #4]
 8016878:	f7ff ff8e 	bl	8016798 <pbuf_add_header_impl>
 801687c:	4603      	mov	r3, r0
}
 801687e:	4618      	mov	r0, r3
 8016880:	3708      	adds	r7, #8
 8016882:	46bd      	mov	sp, r7
 8016884:	bd80      	pop	{r7, pc}
	...

08016888 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8016888:	b580      	push	{r7, lr}
 801688a:	b084      	sub	sp, #16
 801688c:	af00      	add	r7, sp, #0
 801688e:	6078      	str	r0, [r7, #4]
 8016890:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	2b00      	cmp	r3, #0
 8016896:	d106      	bne.n	80168a6 <pbuf_remove_header+0x1e>
 8016898:	4b20      	ldr	r3, [pc, #128]	; (801691c <pbuf_remove_header+0x94>)
 801689a:	f240 224b 	movw	r2, #587	; 0x24b
 801689e:	4920      	ldr	r1, [pc, #128]	; (8016920 <pbuf_remove_header+0x98>)
 80168a0:	4820      	ldr	r0, [pc, #128]	; (8016924 <pbuf_remove_header+0x9c>)
 80168a2:	f009 fb5f 	bl	801ff64 <printf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	d003      	beq.n	80168b4 <pbuf_remove_header+0x2c>
 80168ac:	683b      	ldr	r3, [r7, #0]
 80168ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80168b2:	d301      	bcc.n	80168b8 <pbuf_remove_header+0x30>
    return 1;
 80168b4:	2301      	movs	r3, #1
 80168b6:	e02c      	b.n	8016912 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80168b8:	683b      	ldr	r3, [r7, #0]
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d101      	bne.n	80168c2 <pbuf_remove_header+0x3a>
    return 0;
 80168be:	2300      	movs	r3, #0
 80168c0:	e027      	b.n	8016912 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80168c2:	683b      	ldr	r3, [r7, #0]
 80168c4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	895b      	ldrh	r3, [r3, #10]
 80168ca:	89fa      	ldrh	r2, [r7, #14]
 80168cc:	429a      	cmp	r2, r3
 80168ce:	d908      	bls.n	80168e2 <pbuf_remove_header+0x5a>
 80168d0:	4b12      	ldr	r3, [pc, #72]	; (801691c <pbuf_remove_header+0x94>)
 80168d2:	f240 2255 	movw	r2, #597	; 0x255
 80168d6:	4914      	ldr	r1, [pc, #80]	; (8016928 <pbuf_remove_header+0xa0>)
 80168d8:	4812      	ldr	r0, [pc, #72]	; (8016924 <pbuf_remove_header+0x9c>)
 80168da:	f009 fb43 	bl	801ff64 <printf>
 80168de:	2301      	movs	r3, #1
 80168e0:	e017      	b.n	8016912 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	685b      	ldr	r3, [r3, #4]
 80168e6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	685a      	ldr	r2, [r3, #4]
 80168ec:	683b      	ldr	r3, [r7, #0]
 80168ee:	441a      	add	r2, r3
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	895a      	ldrh	r2, [r3, #10]
 80168f8:	89fb      	ldrh	r3, [r7, #14]
 80168fa:	1ad3      	subs	r3, r2, r3
 80168fc:	b29a      	uxth	r2, r3
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	891a      	ldrh	r2, [r3, #8]
 8016906:	89fb      	ldrh	r3, [r7, #14]
 8016908:	1ad3      	subs	r3, r2, r3
 801690a:	b29a      	uxth	r2, r3
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8016910:	2300      	movs	r3, #0
}
 8016912:	4618      	mov	r0, r3
 8016914:	3710      	adds	r7, #16
 8016916:	46bd      	mov	sp, r7
 8016918:	bd80      	pop	{r7, pc}
 801691a:	bf00      	nop
 801691c:	08027210 	.word	0x08027210
 8016920:	08027374 	.word	0x08027374
 8016924:	08027270 	.word	0x08027270
 8016928:	08027380 	.word	0x08027380

0801692c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801692c:	b580      	push	{r7, lr}
 801692e:	b082      	sub	sp, #8
 8016930:	af00      	add	r7, sp, #0
 8016932:	6078      	str	r0, [r7, #4]
 8016934:	460b      	mov	r3, r1
 8016936:	807b      	strh	r3, [r7, #2]
 8016938:	4613      	mov	r3, r2
 801693a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801693c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016940:	2b00      	cmp	r3, #0
 8016942:	da08      	bge.n	8016956 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8016944:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016948:	425b      	negs	r3, r3
 801694a:	4619      	mov	r1, r3
 801694c:	6878      	ldr	r0, [r7, #4]
 801694e:	f7ff ff9b 	bl	8016888 <pbuf_remove_header>
 8016952:	4603      	mov	r3, r0
 8016954:	e007      	b.n	8016966 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8016956:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801695a:	787a      	ldrb	r2, [r7, #1]
 801695c:	4619      	mov	r1, r3
 801695e:	6878      	ldr	r0, [r7, #4]
 8016960:	f7ff ff1a 	bl	8016798 <pbuf_add_header_impl>
 8016964:	4603      	mov	r3, r0
  }
}
 8016966:	4618      	mov	r0, r3
 8016968:	3708      	adds	r7, #8
 801696a:	46bd      	mov	sp, r7
 801696c:	bd80      	pop	{r7, pc}

0801696e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801696e:	b580      	push	{r7, lr}
 8016970:	b082      	sub	sp, #8
 8016972:	af00      	add	r7, sp, #0
 8016974:	6078      	str	r0, [r7, #4]
 8016976:	460b      	mov	r3, r1
 8016978:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801697a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801697e:	2201      	movs	r2, #1
 8016980:	4619      	mov	r1, r3
 8016982:	6878      	ldr	r0, [r7, #4]
 8016984:	f7ff ffd2 	bl	801692c <pbuf_header_impl>
 8016988:	4603      	mov	r3, r0
}
 801698a:	4618      	mov	r0, r3
 801698c:	3708      	adds	r7, #8
 801698e:	46bd      	mov	sp, r7
 8016990:	bd80      	pop	{r7, pc}
	...

08016994 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8016994:	b580      	push	{r7, lr}
 8016996:	b088      	sub	sp, #32
 8016998:	af00      	add	r7, sp, #0
 801699a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d10b      	bne.n	80169ba <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d106      	bne.n	80169b6 <pbuf_free+0x22>
 80169a8:	4b3b      	ldr	r3, [pc, #236]	; (8016a98 <pbuf_free+0x104>)
 80169aa:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80169ae:	493b      	ldr	r1, [pc, #236]	; (8016a9c <pbuf_free+0x108>)
 80169b0:	483b      	ldr	r0, [pc, #236]	; (8016aa0 <pbuf_free+0x10c>)
 80169b2:	f009 fad7 	bl	801ff64 <printf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80169b6:	2300      	movs	r3, #0
 80169b8:	e069      	b.n	8016a8e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80169ba:	2300      	movs	r3, #0
 80169bc:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80169be:	e062      	b.n	8016a86 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80169c0:	f009 fa4e 	bl	801fe60 <sys_arch_protect>
 80169c4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	7b9b      	ldrb	r3, [r3, #14]
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d106      	bne.n	80169dc <pbuf_free+0x48>
 80169ce:	4b32      	ldr	r3, [pc, #200]	; (8016a98 <pbuf_free+0x104>)
 80169d0:	f240 22f1 	movw	r2, #753	; 0x2f1
 80169d4:	4933      	ldr	r1, [pc, #204]	; (8016aa4 <pbuf_free+0x110>)
 80169d6:	4832      	ldr	r0, [pc, #200]	; (8016aa0 <pbuf_free+0x10c>)
 80169d8:	f009 fac4 	bl	801ff64 <printf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	7b9b      	ldrb	r3, [r3, #14]
 80169e0:	3b01      	subs	r3, #1
 80169e2:	b2da      	uxtb	r2, r3
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	739a      	strb	r2, [r3, #14]
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	7b9b      	ldrb	r3, [r3, #14]
 80169ec:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80169ee:	69b8      	ldr	r0, [r7, #24]
 80169f0:	f009 fa44 	bl	801fe7c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80169f4:	7dfb      	ldrb	r3, [r7, #23]
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d143      	bne.n	8016a82 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	7b1b      	ldrb	r3, [r3, #12]
 8016a04:	f003 030f 	and.w	r3, r3, #15
 8016a08:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	7b5b      	ldrb	r3, [r3, #13]
 8016a0e:	f003 0302 	and.w	r3, r3, #2
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d011      	beq.n	8016a3a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8016a1a:	68bb      	ldr	r3, [r7, #8]
 8016a1c:	691b      	ldr	r3, [r3, #16]
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d106      	bne.n	8016a30 <pbuf_free+0x9c>
 8016a22:	4b1d      	ldr	r3, [pc, #116]	; (8016a98 <pbuf_free+0x104>)
 8016a24:	f240 22ff 	movw	r2, #767	; 0x2ff
 8016a28:	491f      	ldr	r1, [pc, #124]	; (8016aa8 <pbuf_free+0x114>)
 8016a2a:	481d      	ldr	r0, [pc, #116]	; (8016aa0 <pbuf_free+0x10c>)
 8016a2c:	f009 fa9a 	bl	801ff64 <printf>
        pc->custom_free_function(p);
 8016a30:	68bb      	ldr	r3, [r7, #8]
 8016a32:	691b      	ldr	r3, [r3, #16]
 8016a34:	6878      	ldr	r0, [r7, #4]
 8016a36:	4798      	blx	r3
 8016a38:	e01d      	b.n	8016a76 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8016a3a:	7bfb      	ldrb	r3, [r7, #15]
 8016a3c:	2b02      	cmp	r3, #2
 8016a3e:	d104      	bne.n	8016a4a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8016a40:	6879      	ldr	r1, [r7, #4]
 8016a42:	200c      	movs	r0, #12
 8016a44:	f7ff f8e6 	bl	8015c14 <memp_free>
 8016a48:	e015      	b.n	8016a76 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8016a4a:	7bfb      	ldrb	r3, [r7, #15]
 8016a4c:	2b01      	cmp	r3, #1
 8016a4e:	d104      	bne.n	8016a5a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8016a50:	6879      	ldr	r1, [r7, #4]
 8016a52:	200b      	movs	r0, #11
 8016a54:	f7ff f8de 	bl	8015c14 <memp_free>
 8016a58:	e00d      	b.n	8016a76 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8016a5a:	7bfb      	ldrb	r3, [r7, #15]
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d103      	bne.n	8016a68 <pbuf_free+0xd4>
          mem_free(p);
 8016a60:	6878      	ldr	r0, [r7, #4]
 8016a62:	f7fe fd41 	bl	80154e8 <mem_free>
 8016a66:	e006      	b.n	8016a76 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8016a68:	4b0b      	ldr	r3, [pc, #44]	; (8016a98 <pbuf_free+0x104>)
 8016a6a:	f240 320f 	movw	r2, #783	; 0x30f
 8016a6e:	490f      	ldr	r1, [pc, #60]	; (8016aac <pbuf_free+0x118>)
 8016a70:	480b      	ldr	r0, [pc, #44]	; (8016aa0 <pbuf_free+0x10c>)
 8016a72:	f009 fa77 	bl	801ff64 <printf>
        }
      }
      count++;
 8016a76:	7ffb      	ldrb	r3, [r7, #31]
 8016a78:	3301      	adds	r3, #1
 8016a7a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8016a7c:	693b      	ldr	r3, [r7, #16]
 8016a7e:	607b      	str	r3, [r7, #4]
 8016a80:	e001      	b.n	8016a86 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8016a82:	2300      	movs	r3, #0
 8016a84:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d199      	bne.n	80169c0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8016a8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8016a8e:	4618      	mov	r0, r3
 8016a90:	3720      	adds	r7, #32
 8016a92:	46bd      	mov	sp, r7
 8016a94:	bd80      	pop	{r7, pc}
 8016a96:	bf00      	nop
 8016a98:	08027210 	.word	0x08027210
 8016a9c:	08027374 	.word	0x08027374
 8016aa0:	08027270 	.word	0x08027270
 8016aa4:	080273a0 	.word	0x080273a0
 8016aa8:	080273b8 	.word	0x080273b8
 8016aac:	080273dc 	.word	0x080273dc

08016ab0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8016ab0:	b480      	push	{r7}
 8016ab2:	b085      	sub	sp, #20
 8016ab4:	af00      	add	r7, sp, #0
 8016ab6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8016ab8:	2300      	movs	r3, #0
 8016aba:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8016abc:	e005      	b.n	8016aca <pbuf_clen+0x1a>
    ++len;
 8016abe:	89fb      	ldrh	r3, [r7, #14]
 8016ac0:	3301      	adds	r3, #1
 8016ac2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	681b      	ldr	r3, [r3, #0]
 8016ac8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d1f6      	bne.n	8016abe <pbuf_clen+0xe>
  }
  return len;
 8016ad0:	89fb      	ldrh	r3, [r7, #14]
}
 8016ad2:	4618      	mov	r0, r3
 8016ad4:	3714      	adds	r7, #20
 8016ad6:	46bd      	mov	sp, r7
 8016ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016adc:	4770      	bx	lr
	...

08016ae0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8016ae0:	b580      	push	{r7, lr}
 8016ae2:	b084      	sub	sp, #16
 8016ae4:	af00      	add	r7, sp, #0
 8016ae6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d016      	beq.n	8016b1c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8016aee:	f009 f9b7 	bl	801fe60 <sys_arch_protect>
 8016af2:	60f8      	str	r0, [r7, #12]
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	7b9b      	ldrb	r3, [r3, #14]
 8016af8:	3301      	adds	r3, #1
 8016afa:	b2da      	uxtb	r2, r3
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	739a      	strb	r2, [r3, #14]
 8016b00:	68f8      	ldr	r0, [r7, #12]
 8016b02:	f009 f9bb 	bl	801fe7c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	7b9b      	ldrb	r3, [r3, #14]
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d106      	bne.n	8016b1c <pbuf_ref+0x3c>
 8016b0e:	4b05      	ldr	r3, [pc, #20]	; (8016b24 <pbuf_ref+0x44>)
 8016b10:	f240 3242 	movw	r2, #834	; 0x342
 8016b14:	4904      	ldr	r1, [pc, #16]	; (8016b28 <pbuf_ref+0x48>)
 8016b16:	4805      	ldr	r0, [pc, #20]	; (8016b2c <pbuf_ref+0x4c>)
 8016b18:	f009 fa24 	bl	801ff64 <printf>
  }
}
 8016b1c:	bf00      	nop
 8016b1e:	3710      	adds	r7, #16
 8016b20:	46bd      	mov	sp, r7
 8016b22:	bd80      	pop	{r7, pc}
 8016b24:	08027210 	.word	0x08027210
 8016b28:	080273f0 	.word	0x080273f0
 8016b2c:	08027270 	.word	0x08027270

08016b30 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8016b30:	b580      	push	{r7, lr}
 8016b32:	b084      	sub	sp, #16
 8016b34:	af00      	add	r7, sp, #0
 8016b36:	6078      	str	r0, [r7, #4]
 8016b38:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d002      	beq.n	8016b46 <pbuf_cat+0x16>
 8016b40:	683b      	ldr	r3, [r7, #0]
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d107      	bne.n	8016b56 <pbuf_cat+0x26>
 8016b46:	4b20      	ldr	r3, [pc, #128]	; (8016bc8 <pbuf_cat+0x98>)
 8016b48:	f240 3259 	movw	r2, #857	; 0x359
 8016b4c:	491f      	ldr	r1, [pc, #124]	; (8016bcc <pbuf_cat+0x9c>)
 8016b4e:	4820      	ldr	r0, [pc, #128]	; (8016bd0 <pbuf_cat+0xa0>)
 8016b50:	f009 fa08 	bl	801ff64 <printf>
 8016b54:	e034      	b.n	8016bc0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	60fb      	str	r3, [r7, #12]
 8016b5a:	e00a      	b.n	8016b72 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8016b5c:	68fb      	ldr	r3, [r7, #12]
 8016b5e:	891a      	ldrh	r2, [r3, #8]
 8016b60:	683b      	ldr	r3, [r7, #0]
 8016b62:	891b      	ldrh	r3, [r3, #8]
 8016b64:	4413      	add	r3, r2
 8016b66:	b29a      	uxth	r2, r3
 8016b68:	68fb      	ldr	r3, [r7, #12]
 8016b6a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8016b6c:	68fb      	ldr	r3, [r7, #12]
 8016b6e:	681b      	ldr	r3, [r3, #0]
 8016b70:	60fb      	str	r3, [r7, #12]
 8016b72:	68fb      	ldr	r3, [r7, #12]
 8016b74:	681b      	ldr	r3, [r3, #0]
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	d1f0      	bne.n	8016b5c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8016b7a:	68fb      	ldr	r3, [r7, #12]
 8016b7c:	891a      	ldrh	r2, [r3, #8]
 8016b7e:	68fb      	ldr	r3, [r7, #12]
 8016b80:	895b      	ldrh	r3, [r3, #10]
 8016b82:	429a      	cmp	r2, r3
 8016b84:	d006      	beq.n	8016b94 <pbuf_cat+0x64>
 8016b86:	4b10      	ldr	r3, [pc, #64]	; (8016bc8 <pbuf_cat+0x98>)
 8016b88:	f240 3262 	movw	r2, #866	; 0x362
 8016b8c:	4911      	ldr	r1, [pc, #68]	; (8016bd4 <pbuf_cat+0xa4>)
 8016b8e:	4810      	ldr	r0, [pc, #64]	; (8016bd0 <pbuf_cat+0xa0>)
 8016b90:	f009 f9e8 	bl	801ff64 <printf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	681b      	ldr	r3, [r3, #0]
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	d006      	beq.n	8016baa <pbuf_cat+0x7a>
 8016b9c:	4b0a      	ldr	r3, [pc, #40]	; (8016bc8 <pbuf_cat+0x98>)
 8016b9e:	f240 3263 	movw	r2, #867	; 0x363
 8016ba2:	490d      	ldr	r1, [pc, #52]	; (8016bd8 <pbuf_cat+0xa8>)
 8016ba4:	480a      	ldr	r0, [pc, #40]	; (8016bd0 <pbuf_cat+0xa0>)
 8016ba6:	f009 f9dd 	bl	801ff64 <printf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8016baa:	68fb      	ldr	r3, [r7, #12]
 8016bac:	891a      	ldrh	r2, [r3, #8]
 8016bae:	683b      	ldr	r3, [r7, #0]
 8016bb0:	891b      	ldrh	r3, [r3, #8]
 8016bb2:	4413      	add	r3, r2
 8016bb4:	b29a      	uxth	r2, r3
 8016bb6:	68fb      	ldr	r3, [r7, #12]
 8016bb8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8016bba:	68fb      	ldr	r3, [r7, #12]
 8016bbc:	683a      	ldr	r2, [r7, #0]
 8016bbe:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8016bc0:	3710      	adds	r7, #16
 8016bc2:	46bd      	mov	sp, r7
 8016bc4:	bd80      	pop	{r7, pc}
 8016bc6:	bf00      	nop
 8016bc8:	08027210 	.word	0x08027210
 8016bcc:	08027404 	.word	0x08027404
 8016bd0:	08027270 	.word	0x08027270
 8016bd4:	0802743c 	.word	0x0802743c
 8016bd8:	0802746c 	.word	0x0802746c

08016bdc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8016bdc:	b580      	push	{r7, lr}
 8016bde:	b086      	sub	sp, #24
 8016be0:	af00      	add	r7, sp, #0
 8016be2:	6078      	str	r0, [r7, #4]
 8016be4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8016be6:	2300      	movs	r3, #0
 8016be8:	617b      	str	r3, [r7, #20]
 8016bea:	2300      	movs	r3, #0
 8016bec:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d008      	beq.n	8016c06 <pbuf_copy+0x2a>
 8016bf4:	683b      	ldr	r3, [r7, #0]
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d005      	beq.n	8016c06 <pbuf_copy+0x2a>
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	891a      	ldrh	r2, [r3, #8]
 8016bfe:	683b      	ldr	r3, [r7, #0]
 8016c00:	891b      	ldrh	r3, [r3, #8]
 8016c02:	429a      	cmp	r2, r3
 8016c04:	d209      	bcs.n	8016c1a <pbuf_copy+0x3e>
 8016c06:	4b57      	ldr	r3, [pc, #348]	; (8016d64 <pbuf_copy+0x188>)
 8016c08:	f240 32c9 	movw	r2, #969	; 0x3c9
 8016c0c:	4956      	ldr	r1, [pc, #344]	; (8016d68 <pbuf_copy+0x18c>)
 8016c0e:	4857      	ldr	r0, [pc, #348]	; (8016d6c <pbuf_copy+0x190>)
 8016c10:	f009 f9a8 	bl	801ff64 <printf>
 8016c14:	f06f 030f 	mvn.w	r3, #15
 8016c18:	e09f      	b.n	8016d5a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	895b      	ldrh	r3, [r3, #10]
 8016c1e:	461a      	mov	r2, r3
 8016c20:	697b      	ldr	r3, [r7, #20]
 8016c22:	1ad2      	subs	r2, r2, r3
 8016c24:	683b      	ldr	r3, [r7, #0]
 8016c26:	895b      	ldrh	r3, [r3, #10]
 8016c28:	4619      	mov	r1, r3
 8016c2a:	693b      	ldr	r3, [r7, #16]
 8016c2c:	1acb      	subs	r3, r1, r3
 8016c2e:	429a      	cmp	r2, r3
 8016c30:	d306      	bcc.n	8016c40 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8016c32:	683b      	ldr	r3, [r7, #0]
 8016c34:	895b      	ldrh	r3, [r3, #10]
 8016c36:	461a      	mov	r2, r3
 8016c38:	693b      	ldr	r3, [r7, #16]
 8016c3a:	1ad3      	subs	r3, r2, r3
 8016c3c:	60fb      	str	r3, [r7, #12]
 8016c3e:	e005      	b.n	8016c4c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	895b      	ldrh	r3, [r3, #10]
 8016c44:	461a      	mov	r2, r3
 8016c46:	697b      	ldr	r3, [r7, #20]
 8016c48:	1ad3      	subs	r3, r2, r3
 8016c4a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	685a      	ldr	r2, [r3, #4]
 8016c50:	697b      	ldr	r3, [r7, #20]
 8016c52:	18d0      	adds	r0, r2, r3
 8016c54:	683b      	ldr	r3, [r7, #0]
 8016c56:	685a      	ldr	r2, [r3, #4]
 8016c58:	693b      	ldr	r3, [r7, #16]
 8016c5a:	4413      	add	r3, r2
 8016c5c:	68fa      	ldr	r2, [r7, #12]
 8016c5e:	4619      	mov	r1, r3
 8016c60:	f009 f950 	bl	801ff04 <memcpy>
    offset_to += len;
 8016c64:	697a      	ldr	r2, [r7, #20]
 8016c66:	68fb      	ldr	r3, [r7, #12]
 8016c68:	4413      	add	r3, r2
 8016c6a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8016c6c:	693a      	ldr	r2, [r7, #16]
 8016c6e:	68fb      	ldr	r3, [r7, #12]
 8016c70:	4413      	add	r3, r2
 8016c72:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	895b      	ldrh	r3, [r3, #10]
 8016c78:	461a      	mov	r2, r3
 8016c7a:	697b      	ldr	r3, [r7, #20]
 8016c7c:	4293      	cmp	r3, r2
 8016c7e:	d906      	bls.n	8016c8e <pbuf_copy+0xb2>
 8016c80:	4b38      	ldr	r3, [pc, #224]	; (8016d64 <pbuf_copy+0x188>)
 8016c82:	f240 32d9 	movw	r2, #985	; 0x3d9
 8016c86:	493a      	ldr	r1, [pc, #232]	; (8016d70 <pbuf_copy+0x194>)
 8016c88:	4838      	ldr	r0, [pc, #224]	; (8016d6c <pbuf_copy+0x190>)
 8016c8a:	f009 f96b 	bl	801ff64 <printf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8016c8e:	683b      	ldr	r3, [r7, #0]
 8016c90:	895b      	ldrh	r3, [r3, #10]
 8016c92:	461a      	mov	r2, r3
 8016c94:	693b      	ldr	r3, [r7, #16]
 8016c96:	4293      	cmp	r3, r2
 8016c98:	d906      	bls.n	8016ca8 <pbuf_copy+0xcc>
 8016c9a:	4b32      	ldr	r3, [pc, #200]	; (8016d64 <pbuf_copy+0x188>)
 8016c9c:	f240 32da 	movw	r2, #986	; 0x3da
 8016ca0:	4934      	ldr	r1, [pc, #208]	; (8016d74 <pbuf_copy+0x198>)
 8016ca2:	4832      	ldr	r0, [pc, #200]	; (8016d6c <pbuf_copy+0x190>)
 8016ca4:	f009 f95e 	bl	801ff64 <printf>
    if (offset_from >= p_from->len) {
 8016ca8:	683b      	ldr	r3, [r7, #0]
 8016caa:	895b      	ldrh	r3, [r3, #10]
 8016cac:	461a      	mov	r2, r3
 8016cae:	693b      	ldr	r3, [r7, #16]
 8016cb0:	4293      	cmp	r3, r2
 8016cb2:	d304      	bcc.n	8016cbe <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8016cb4:	2300      	movs	r3, #0
 8016cb6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8016cb8:	683b      	ldr	r3, [r7, #0]
 8016cba:	681b      	ldr	r3, [r3, #0]
 8016cbc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	895b      	ldrh	r3, [r3, #10]
 8016cc2:	461a      	mov	r2, r3
 8016cc4:	697b      	ldr	r3, [r7, #20]
 8016cc6:	4293      	cmp	r3, r2
 8016cc8:	d114      	bne.n	8016cf4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8016cca:	2300      	movs	r3, #0
 8016ccc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8016cce:	687b      	ldr	r3, [r7, #4]
 8016cd0:	681b      	ldr	r3, [r3, #0]
 8016cd2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d10c      	bne.n	8016cf4 <pbuf_copy+0x118>
 8016cda:	683b      	ldr	r3, [r7, #0]
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d009      	beq.n	8016cf4 <pbuf_copy+0x118>
 8016ce0:	4b20      	ldr	r3, [pc, #128]	; (8016d64 <pbuf_copy+0x188>)
 8016ce2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8016ce6:	4924      	ldr	r1, [pc, #144]	; (8016d78 <pbuf_copy+0x19c>)
 8016ce8:	4820      	ldr	r0, [pc, #128]	; (8016d6c <pbuf_copy+0x190>)
 8016cea:	f009 f93b 	bl	801ff64 <printf>
 8016cee:	f06f 030f 	mvn.w	r3, #15
 8016cf2:	e032      	b.n	8016d5a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8016cf4:	683b      	ldr	r3, [r7, #0]
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d013      	beq.n	8016d22 <pbuf_copy+0x146>
 8016cfa:	683b      	ldr	r3, [r7, #0]
 8016cfc:	895a      	ldrh	r2, [r3, #10]
 8016cfe:	683b      	ldr	r3, [r7, #0]
 8016d00:	891b      	ldrh	r3, [r3, #8]
 8016d02:	429a      	cmp	r2, r3
 8016d04:	d10d      	bne.n	8016d22 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8016d06:	683b      	ldr	r3, [r7, #0]
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d009      	beq.n	8016d22 <pbuf_copy+0x146>
 8016d0e:	4b15      	ldr	r3, [pc, #84]	; (8016d64 <pbuf_copy+0x188>)
 8016d10:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8016d14:	4919      	ldr	r1, [pc, #100]	; (8016d7c <pbuf_copy+0x1a0>)
 8016d16:	4815      	ldr	r0, [pc, #84]	; (8016d6c <pbuf_copy+0x190>)
 8016d18:	f009 f924 	bl	801ff64 <printf>
 8016d1c:	f06f 0305 	mvn.w	r3, #5
 8016d20:	e01b      	b.n	8016d5a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d013      	beq.n	8016d50 <pbuf_copy+0x174>
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	895a      	ldrh	r2, [r3, #10]
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	891b      	ldrh	r3, [r3, #8]
 8016d30:	429a      	cmp	r2, r3
 8016d32:	d10d      	bne.n	8016d50 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d009      	beq.n	8016d50 <pbuf_copy+0x174>
 8016d3c:	4b09      	ldr	r3, [pc, #36]	; (8016d64 <pbuf_copy+0x188>)
 8016d3e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8016d42:	490e      	ldr	r1, [pc, #56]	; (8016d7c <pbuf_copy+0x1a0>)
 8016d44:	4809      	ldr	r0, [pc, #36]	; (8016d6c <pbuf_copy+0x190>)
 8016d46:	f009 f90d 	bl	801ff64 <printf>
 8016d4a:	f06f 0305 	mvn.w	r3, #5
 8016d4e:	e004      	b.n	8016d5a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8016d50:	683b      	ldr	r3, [r7, #0]
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	f47f af61 	bne.w	8016c1a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8016d58:	2300      	movs	r3, #0
}
 8016d5a:	4618      	mov	r0, r3
 8016d5c:	3718      	adds	r7, #24
 8016d5e:	46bd      	mov	sp, r7
 8016d60:	bd80      	pop	{r7, pc}
 8016d62:	bf00      	nop
 8016d64:	08027210 	.word	0x08027210
 8016d68:	080274b8 	.word	0x080274b8
 8016d6c:	08027270 	.word	0x08027270
 8016d70:	080274e8 	.word	0x080274e8
 8016d74:	08027500 	.word	0x08027500
 8016d78:	0802751c 	.word	0x0802751c
 8016d7c:	0802752c 	.word	0x0802752c

08016d80 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8016d80:	b580      	push	{r7, lr}
 8016d82:	b088      	sub	sp, #32
 8016d84:	af00      	add	r7, sp, #0
 8016d86:	60f8      	str	r0, [r7, #12]
 8016d88:	60b9      	str	r1, [r7, #8]
 8016d8a:	4611      	mov	r1, r2
 8016d8c:	461a      	mov	r2, r3
 8016d8e:	460b      	mov	r3, r1
 8016d90:	80fb      	strh	r3, [r7, #6]
 8016d92:	4613      	mov	r3, r2
 8016d94:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8016d96:	2300      	movs	r3, #0
 8016d98:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8016d9a:	2300      	movs	r3, #0
 8016d9c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8016d9e:	68fb      	ldr	r3, [r7, #12]
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d108      	bne.n	8016db6 <pbuf_copy_partial+0x36>
 8016da4:	4b2b      	ldr	r3, [pc, #172]	; (8016e54 <pbuf_copy_partial+0xd4>)
 8016da6:	f240 420a 	movw	r2, #1034	; 0x40a
 8016daa:	492b      	ldr	r1, [pc, #172]	; (8016e58 <pbuf_copy_partial+0xd8>)
 8016dac:	482b      	ldr	r0, [pc, #172]	; (8016e5c <pbuf_copy_partial+0xdc>)
 8016dae:	f009 f8d9 	bl	801ff64 <printf>
 8016db2:	2300      	movs	r3, #0
 8016db4:	e04a      	b.n	8016e4c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8016db6:	68bb      	ldr	r3, [r7, #8]
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d108      	bne.n	8016dce <pbuf_copy_partial+0x4e>
 8016dbc:	4b25      	ldr	r3, [pc, #148]	; (8016e54 <pbuf_copy_partial+0xd4>)
 8016dbe:	f240 420b 	movw	r2, #1035	; 0x40b
 8016dc2:	4927      	ldr	r1, [pc, #156]	; (8016e60 <pbuf_copy_partial+0xe0>)
 8016dc4:	4825      	ldr	r0, [pc, #148]	; (8016e5c <pbuf_copy_partial+0xdc>)
 8016dc6:	f009 f8cd 	bl	801ff64 <printf>
 8016dca:	2300      	movs	r3, #0
 8016dcc:	e03e      	b.n	8016e4c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8016dce:	68fb      	ldr	r3, [r7, #12]
 8016dd0:	61fb      	str	r3, [r7, #28]
 8016dd2:	e034      	b.n	8016e3e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8016dd4:	88bb      	ldrh	r3, [r7, #4]
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d00a      	beq.n	8016df0 <pbuf_copy_partial+0x70>
 8016dda:	69fb      	ldr	r3, [r7, #28]
 8016ddc:	895b      	ldrh	r3, [r3, #10]
 8016dde:	88ba      	ldrh	r2, [r7, #4]
 8016de0:	429a      	cmp	r2, r3
 8016de2:	d305      	bcc.n	8016df0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8016de4:	69fb      	ldr	r3, [r7, #28]
 8016de6:	895b      	ldrh	r3, [r3, #10]
 8016de8:	88ba      	ldrh	r2, [r7, #4]
 8016dea:	1ad3      	subs	r3, r2, r3
 8016dec:	80bb      	strh	r3, [r7, #4]
 8016dee:	e023      	b.n	8016e38 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8016df0:	69fb      	ldr	r3, [r7, #28]
 8016df2:	895a      	ldrh	r2, [r3, #10]
 8016df4:	88bb      	ldrh	r3, [r7, #4]
 8016df6:	1ad3      	subs	r3, r2, r3
 8016df8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8016dfa:	8b3a      	ldrh	r2, [r7, #24]
 8016dfc:	88fb      	ldrh	r3, [r7, #6]
 8016dfe:	429a      	cmp	r2, r3
 8016e00:	d901      	bls.n	8016e06 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8016e02:	88fb      	ldrh	r3, [r7, #6]
 8016e04:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8016e06:	8b7b      	ldrh	r3, [r7, #26]
 8016e08:	68ba      	ldr	r2, [r7, #8]
 8016e0a:	18d0      	adds	r0, r2, r3
 8016e0c:	69fb      	ldr	r3, [r7, #28]
 8016e0e:	685a      	ldr	r2, [r3, #4]
 8016e10:	88bb      	ldrh	r3, [r7, #4]
 8016e12:	4413      	add	r3, r2
 8016e14:	8b3a      	ldrh	r2, [r7, #24]
 8016e16:	4619      	mov	r1, r3
 8016e18:	f009 f874 	bl	801ff04 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8016e1c:	8afa      	ldrh	r2, [r7, #22]
 8016e1e:	8b3b      	ldrh	r3, [r7, #24]
 8016e20:	4413      	add	r3, r2
 8016e22:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8016e24:	8b7a      	ldrh	r2, [r7, #26]
 8016e26:	8b3b      	ldrh	r3, [r7, #24]
 8016e28:	4413      	add	r3, r2
 8016e2a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8016e2c:	88fa      	ldrh	r2, [r7, #6]
 8016e2e:	8b3b      	ldrh	r3, [r7, #24]
 8016e30:	1ad3      	subs	r3, r2, r3
 8016e32:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8016e34:	2300      	movs	r3, #0
 8016e36:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8016e38:	69fb      	ldr	r3, [r7, #28]
 8016e3a:	681b      	ldr	r3, [r3, #0]
 8016e3c:	61fb      	str	r3, [r7, #28]
 8016e3e:	88fb      	ldrh	r3, [r7, #6]
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d002      	beq.n	8016e4a <pbuf_copy_partial+0xca>
 8016e44:	69fb      	ldr	r3, [r7, #28]
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d1c4      	bne.n	8016dd4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8016e4a:	8afb      	ldrh	r3, [r7, #22]
}
 8016e4c:	4618      	mov	r0, r3
 8016e4e:	3720      	adds	r7, #32
 8016e50:	46bd      	mov	sp, r7
 8016e52:	bd80      	pop	{r7, pc}
 8016e54:	08027210 	.word	0x08027210
 8016e58:	08027558 	.word	0x08027558
 8016e5c:	08027270 	.word	0x08027270
 8016e60:	08027578 	.word	0x08027578

08016e64 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8016e64:	b480      	push	{r7}
 8016e66:	b087      	sub	sp, #28
 8016e68:	af00      	add	r7, sp, #0
 8016e6a:	60f8      	str	r0, [r7, #12]
 8016e6c:	460b      	mov	r3, r1
 8016e6e:	607a      	str	r2, [r7, #4]
 8016e70:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8016e72:	897b      	ldrh	r3, [r7, #10]
 8016e74:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 8016e76:	68fb      	ldr	r3, [r7, #12]
 8016e78:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8016e7a:	e007      	b.n	8016e8c <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8016e7c:	693b      	ldr	r3, [r7, #16]
 8016e7e:	895b      	ldrh	r3, [r3, #10]
 8016e80:	8afa      	ldrh	r2, [r7, #22]
 8016e82:	1ad3      	subs	r3, r2, r3
 8016e84:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8016e86:	693b      	ldr	r3, [r7, #16]
 8016e88:	681b      	ldr	r3, [r3, #0]
 8016e8a:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8016e8c:	693b      	ldr	r3, [r7, #16]
 8016e8e:	2b00      	cmp	r3, #0
 8016e90:	d004      	beq.n	8016e9c <pbuf_skip_const+0x38>
 8016e92:	693b      	ldr	r3, [r7, #16]
 8016e94:	895b      	ldrh	r3, [r3, #10]
 8016e96:	8afa      	ldrh	r2, [r7, #22]
 8016e98:	429a      	cmp	r2, r3
 8016e9a:	d2ef      	bcs.n	8016e7c <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	d002      	beq.n	8016ea8 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	8afa      	ldrh	r2, [r7, #22]
 8016ea6:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8016ea8:	693b      	ldr	r3, [r7, #16]
}
 8016eaa:	4618      	mov	r0, r3
 8016eac:	371c      	adds	r7, #28
 8016eae:	46bd      	mov	sp, r7
 8016eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eb4:	4770      	bx	lr
	...

08016eb8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8016eb8:	b580      	push	{r7, lr}
 8016eba:	b084      	sub	sp, #16
 8016ebc:	af00      	add	r7, sp, #0
 8016ebe:	4603      	mov	r3, r0
 8016ec0:	603a      	str	r2, [r7, #0]
 8016ec2:	71fb      	strb	r3, [r7, #7]
 8016ec4:	460b      	mov	r3, r1
 8016ec6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8016ec8:	683b      	ldr	r3, [r7, #0]
 8016eca:	8919      	ldrh	r1, [r3, #8]
 8016ecc:	88ba      	ldrh	r2, [r7, #4]
 8016ece:	79fb      	ldrb	r3, [r7, #7]
 8016ed0:	4618      	mov	r0, r3
 8016ed2:	f7ff fa7b 	bl	80163cc <pbuf_alloc>
 8016ed6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8016ed8:	68fb      	ldr	r3, [r7, #12]
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d101      	bne.n	8016ee2 <pbuf_clone+0x2a>
    return NULL;
 8016ede:	2300      	movs	r3, #0
 8016ee0:	e011      	b.n	8016f06 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8016ee2:	6839      	ldr	r1, [r7, #0]
 8016ee4:	68f8      	ldr	r0, [r7, #12]
 8016ee6:	f7ff fe79 	bl	8016bdc <pbuf_copy>
 8016eea:	4603      	mov	r3, r0
 8016eec:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8016eee:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	d006      	beq.n	8016f04 <pbuf_clone+0x4c>
 8016ef6:	4b06      	ldr	r3, [pc, #24]	; (8016f10 <pbuf_clone+0x58>)
 8016ef8:	f240 5224 	movw	r2, #1316	; 0x524
 8016efc:	4905      	ldr	r1, [pc, #20]	; (8016f14 <pbuf_clone+0x5c>)
 8016efe:	4806      	ldr	r0, [pc, #24]	; (8016f18 <pbuf_clone+0x60>)
 8016f00:	f009 f830 	bl	801ff64 <printf>
  return q;
 8016f04:	68fb      	ldr	r3, [r7, #12]
}
 8016f06:	4618      	mov	r0, r3
 8016f08:	3710      	adds	r7, #16
 8016f0a:	46bd      	mov	sp, r7
 8016f0c:	bd80      	pop	{r7, pc}
 8016f0e:	bf00      	nop
 8016f10:	08027210 	.word	0x08027210
 8016f14:	08027684 	.word	0x08027684
 8016f18:	08027270 	.word	0x08027270

08016f1c <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 8016f1c:	b580      	push	{r7, lr}
 8016f1e:	b084      	sub	sp, #16
 8016f20:	af00      	add	r7, sp, #0
 8016f22:	6078      	str	r0, [r7, #4]
 8016f24:	460b      	mov	r3, r1
 8016f26:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 8016f28:	887b      	ldrh	r3, [r7, #2]
 8016f2a:	4619      	mov	r1, r3
 8016f2c:	6878      	ldr	r0, [r7, #4]
 8016f2e:	f000 f80c 	bl	8016f4a <pbuf_try_get_at>
 8016f32:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 8016f34:	68fb      	ldr	r3, [r7, #12]
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	db02      	blt.n	8016f40 <pbuf_get_at+0x24>
    return (u8_t)ret;
 8016f3a:	68fb      	ldr	r3, [r7, #12]
 8016f3c:	b2db      	uxtb	r3, r3
 8016f3e:	e000      	b.n	8016f42 <pbuf_get_at+0x26>
  }
  return 0;
 8016f40:	2300      	movs	r3, #0
}
 8016f42:	4618      	mov	r0, r3
 8016f44:	3710      	adds	r7, #16
 8016f46:	46bd      	mov	sp, r7
 8016f48:	bd80      	pop	{r7, pc}

08016f4a <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 8016f4a:	b580      	push	{r7, lr}
 8016f4c:	b084      	sub	sp, #16
 8016f4e:	af00      	add	r7, sp, #0
 8016f50:	6078      	str	r0, [r7, #4]
 8016f52:	460b      	mov	r3, r1
 8016f54:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 8016f56:	f107 020a 	add.w	r2, r7, #10
 8016f5a:	887b      	ldrh	r3, [r7, #2]
 8016f5c:	4619      	mov	r1, r3
 8016f5e:	6878      	ldr	r0, [r7, #4]
 8016f60:	f7ff ff80 	bl	8016e64 <pbuf_skip_const>
 8016f64:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8016f66:	68fb      	ldr	r3, [r7, #12]
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	d00a      	beq.n	8016f82 <pbuf_try_get_at+0x38>
 8016f6c:	68fb      	ldr	r3, [r7, #12]
 8016f6e:	895a      	ldrh	r2, [r3, #10]
 8016f70:	897b      	ldrh	r3, [r7, #10]
 8016f72:	429a      	cmp	r2, r3
 8016f74:	d905      	bls.n	8016f82 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 8016f76:	68fb      	ldr	r3, [r7, #12]
 8016f78:	685b      	ldr	r3, [r3, #4]
 8016f7a:	897a      	ldrh	r2, [r7, #10]
 8016f7c:	4413      	add	r3, r2
 8016f7e:	781b      	ldrb	r3, [r3, #0]
 8016f80:	e001      	b.n	8016f86 <pbuf_try_get_at+0x3c>
  }
  return -1;
 8016f82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016f86:	4618      	mov	r0, r3
 8016f88:	3710      	adds	r7, #16
 8016f8a:	46bd      	mov	sp, r7
 8016f8c:	bd80      	pop	{r7, pc}
	...

08016f90 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8016f90:	b580      	push	{r7, lr}
 8016f92:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8016f94:	f009 f846 	bl	8020024 <rand>
 8016f98:	4603      	mov	r3, r0
 8016f9a:	b29b      	uxth	r3, r3
 8016f9c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8016fa0:	b29b      	uxth	r3, r3
 8016fa2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8016fa6:	b29a      	uxth	r2, r3
 8016fa8:	4b01      	ldr	r3, [pc, #4]	; (8016fb0 <tcp_init+0x20>)
 8016faa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8016fac:	bf00      	nop
 8016fae:	bd80      	pop	{r7, pc}
 8016fb0:	20000010 	.word	0x20000010

08016fb4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8016fb4:	b580      	push	{r7, lr}
 8016fb6:	b082      	sub	sp, #8
 8016fb8:	af00      	add	r7, sp, #0
 8016fba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	7d1b      	ldrb	r3, [r3, #20]
 8016fc0:	2b01      	cmp	r3, #1
 8016fc2:	d105      	bne.n	8016fd0 <tcp_free+0x1c>
 8016fc4:	4b06      	ldr	r3, [pc, #24]	; (8016fe0 <tcp_free+0x2c>)
 8016fc6:	22d4      	movs	r2, #212	; 0xd4
 8016fc8:	4906      	ldr	r1, [pc, #24]	; (8016fe4 <tcp_free+0x30>)
 8016fca:	4807      	ldr	r0, [pc, #28]	; (8016fe8 <tcp_free+0x34>)
 8016fcc:	f008 ffca 	bl	801ff64 <printf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8016fd0:	6879      	ldr	r1, [r7, #4]
 8016fd2:	2001      	movs	r0, #1
 8016fd4:	f7fe fe1e 	bl	8015c14 <memp_free>
}
 8016fd8:	bf00      	nop
 8016fda:	3708      	adds	r7, #8
 8016fdc:	46bd      	mov	sp, r7
 8016fde:	bd80      	pop	{r7, pc}
 8016fe0:	08027710 	.word	0x08027710
 8016fe4:	08027740 	.word	0x08027740
 8016fe8:	08027754 	.word	0x08027754

08016fec <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8016fec:	b580      	push	{r7, lr}
 8016fee:	b082      	sub	sp, #8
 8016ff0:	af00      	add	r7, sp, #0
 8016ff2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	7d1b      	ldrb	r3, [r3, #20]
 8016ff8:	2b01      	cmp	r3, #1
 8016ffa:	d105      	bne.n	8017008 <tcp_free_listen+0x1c>
 8016ffc:	4b06      	ldr	r3, [pc, #24]	; (8017018 <tcp_free_listen+0x2c>)
 8016ffe:	22df      	movs	r2, #223	; 0xdf
 8017000:	4906      	ldr	r1, [pc, #24]	; (801701c <tcp_free_listen+0x30>)
 8017002:	4807      	ldr	r0, [pc, #28]	; (8017020 <tcp_free_listen+0x34>)
 8017004:	f008 ffae 	bl	801ff64 <printf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8017008:	6879      	ldr	r1, [r7, #4]
 801700a:	2002      	movs	r0, #2
 801700c:	f7fe fe02 	bl	8015c14 <memp_free>
}
 8017010:	bf00      	nop
 8017012:	3708      	adds	r7, #8
 8017014:	46bd      	mov	sp, r7
 8017016:	bd80      	pop	{r7, pc}
 8017018:	08027710 	.word	0x08027710
 801701c:	0802777c 	.word	0x0802777c
 8017020:	08027754 	.word	0x08027754

08017024 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8017024:	b580      	push	{r7, lr}
 8017026:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8017028:	f001 f898 	bl	801815c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801702c:	4b07      	ldr	r3, [pc, #28]	; (801704c <tcp_tmr+0x28>)
 801702e:	781b      	ldrb	r3, [r3, #0]
 8017030:	3301      	adds	r3, #1
 8017032:	b2da      	uxtb	r2, r3
 8017034:	4b05      	ldr	r3, [pc, #20]	; (801704c <tcp_tmr+0x28>)
 8017036:	701a      	strb	r2, [r3, #0]
 8017038:	4b04      	ldr	r3, [pc, #16]	; (801704c <tcp_tmr+0x28>)
 801703a:	781b      	ldrb	r3, [r3, #0]
 801703c:	f003 0301 	and.w	r3, r3, #1
 8017040:	2b00      	cmp	r3, #0
 8017042:	d001      	beq.n	8017048 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8017044:	f000 fd4a 	bl	8017adc <tcp_slowtmr>
  }
}
 8017048:	bf00      	nop
 801704a:	bd80      	pop	{r7, pc}
 801704c:	200188b1 	.word	0x200188b1

08017050 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8017050:	b580      	push	{r7, lr}
 8017052:	b084      	sub	sp, #16
 8017054:	af00      	add	r7, sp, #0
 8017056:	6078      	str	r0, [r7, #4]
 8017058:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801705a:	683b      	ldr	r3, [r7, #0]
 801705c:	2b00      	cmp	r3, #0
 801705e:	d105      	bne.n	801706c <tcp_remove_listener+0x1c>
 8017060:	4b0d      	ldr	r3, [pc, #52]	; (8017098 <tcp_remove_listener+0x48>)
 8017062:	22ff      	movs	r2, #255	; 0xff
 8017064:	490d      	ldr	r1, [pc, #52]	; (801709c <tcp_remove_listener+0x4c>)
 8017066:	480e      	ldr	r0, [pc, #56]	; (80170a0 <tcp_remove_listener+0x50>)
 8017068:	f008 ff7c 	bl	801ff64 <printf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	60fb      	str	r3, [r7, #12]
 8017070:	e00a      	b.n	8017088 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8017072:	68fb      	ldr	r3, [r7, #12]
 8017074:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017076:	683a      	ldr	r2, [r7, #0]
 8017078:	429a      	cmp	r2, r3
 801707a:	d102      	bne.n	8017082 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801707c:	68fb      	ldr	r3, [r7, #12]
 801707e:	2200      	movs	r2, #0
 8017080:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8017082:	68fb      	ldr	r3, [r7, #12]
 8017084:	68db      	ldr	r3, [r3, #12]
 8017086:	60fb      	str	r3, [r7, #12]
 8017088:	68fb      	ldr	r3, [r7, #12]
 801708a:	2b00      	cmp	r3, #0
 801708c:	d1f1      	bne.n	8017072 <tcp_remove_listener+0x22>
    }
  }
}
 801708e:	bf00      	nop
 8017090:	bf00      	nop
 8017092:	3710      	adds	r7, #16
 8017094:	46bd      	mov	sp, r7
 8017096:	bd80      	pop	{r7, pc}
 8017098:	08027710 	.word	0x08027710
 801709c:	08027798 	.word	0x08027798
 80170a0:	08027754 	.word	0x08027754

080170a4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80170a4:	b580      	push	{r7, lr}
 80170a6:	b084      	sub	sp, #16
 80170a8:	af00      	add	r7, sp, #0
 80170aa:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	d106      	bne.n	80170c0 <tcp_listen_closed+0x1c>
 80170b2:	4b14      	ldr	r3, [pc, #80]	; (8017104 <tcp_listen_closed+0x60>)
 80170b4:	f240 1211 	movw	r2, #273	; 0x111
 80170b8:	4913      	ldr	r1, [pc, #76]	; (8017108 <tcp_listen_closed+0x64>)
 80170ba:	4814      	ldr	r0, [pc, #80]	; (801710c <tcp_listen_closed+0x68>)
 80170bc:	f008 ff52 	bl	801ff64 <printf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	7d1b      	ldrb	r3, [r3, #20]
 80170c4:	2b01      	cmp	r3, #1
 80170c6:	d006      	beq.n	80170d6 <tcp_listen_closed+0x32>
 80170c8:	4b0e      	ldr	r3, [pc, #56]	; (8017104 <tcp_listen_closed+0x60>)
 80170ca:	f44f 7289 	mov.w	r2, #274	; 0x112
 80170ce:	4910      	ldr	r1, [pc, #64]	; (8017110 <tcp_listen_closed+0x6c>)
 80170d0:	480e      	ldr	r0, [pc, #56]	; (801710c <tcp_listen_closed+0x68>)
 80170d2:	f008 ff47 	bl	801ff64 <printf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80170d6:	2301      	movs	r3, #1
 80170d8:	60fb      	str	r3, [r7, #12]
 80170da:	e00b      	b.n	80170f4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80170dc:	4a0d      	ldr	r2, [pc, #52]	; (8017114 <tcp_listen_closed+0x70>)
 80170de:	68fb      	ldr	r3, [r7, #12]
 80170e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80170e4:	681b      	ldr	r3, [r3, #0]
 80170e6:	6879      	ldr	r1, [r7, #4]
 80170e8:	4618      	mov	r0, r3
 80170ea:	f7ff ffb1 	bl	8017050 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80170ee:	68fb      	ldr	r3, [r7, #12]
 80170f0:	3301      	adds	r3, #1
 80170f2:	60fb      	str	r3, [r7, #12]
 80170f4:	68fb      	ldr	r3, [r7, #12]
 80170f6:	2b03      	cmp	r3, #3
 80170f8:	d9f0      	bls.n	80170dc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80170fa:	bf00      	nop
 80170fc:	bf00      	nop
 80170fe:	3710      	adds	r7, #16
 8017100:	46bd      	mov	sp, r7
 8017102:	bd80      	pop	{r7, pc}
 8017104:	08027710 	.word	0x08027710
 8017108:	080277c0 	.word	0x080277c0
 801710c:	08027754 	.word	0x08027754
 8017110:	080277cc 	.word	0x080277cc
 8017114:	080718c0 	.word	0x080718c0

08017118 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8017118:	b5b0      	push	{r4, r5, r7, lr}
 801711a:	b088      	sub	sp, #32
 801711c:	af04      	add	r7, sp, #16
 801711e:	6078      	str	r0, [r7, #4]
 8017120:	460b      	mov	r3, r1
 8017122:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	2b00      	cmp	r3, #0
 8017128:	d106      	bne.n	8017138 <tcp_close_shutdown+0x20>
 801712a:	4b63      	ldr	r3, [pc, #396]	; (80172b8 <tcp_close_shutdown+0x1a0>)
 801712c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8017130:	4962      	ldr	r1, [pc, #392]	; (80172bc <tcp_close_shutdown+0x1a4>)
 8017132:	4863      	ldr	r0, [pc, #396]	; (80172c0 <tcp_close_shutdown+0x1a8>)
 8017134:	f008 ff16 	bl	801ff64 <printf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8017138:	78fb      	ldrb	r3, [r7, #3]
 801713a:	2b00      	cmp	r3, #0
 801713c:	d066      	beq.n	801720c <tcp_close_shutdown+0xf4>
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	7d1b      	ldrb	r3, [r3, #20]
 8017142:	2b04      	cmp	r3, #4
 8017144:	d003      	beq.n	801714e <tcp_close_shutdown+0x36>
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	7d1b      	ldrb	r3, [r3, #20]
 801714a:	2b07      	cmp	r3, #7
 801714c:	d15e      	bne.n	801720c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017152:	2b00      	cmp	r3, #0
 8017154:	d104      	bne.n	8017160 <tcp_close_shutdown+0x48>
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801715a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801715e:	d055      	beq.n	801720c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	8b5b      	ldrh	r3, [r3, #26]
 8017164:	f003 0310 	and.w	r3, r3, #16
 8017168:	2b00      	cmp	r3, #0
 801716a:	d106      	bne.n	801717a <tcp_close_shutdown+0x62>
 801716c:	4b52      	ldr	r3, [pc, #328]	; (80172b8 <tcp_close_shutdown+0x1a0>)
 801716e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8017172:	4954      	ldr	r1, [pc, #336]	; (80172c4 <tcp_close_shutdown+0x1ac>)
 8017174:	4852      	ldr	r0, [pc, #328]	; (80172c0 <tcp_close_shutdown+0x1a8>)
 8017176:	f008 fef5 	bl	801ff64 <printf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8017182:	687d      	ldr	r5, [r7, #4]
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	3304      	adds	r3, #4
 8017188:	687a      	ldr	r2, [r7, #4]
 801718a:	8ad2      	ldrh	r2, [r2, #22]
 801718c:	6879      	ldr	r1, [r7, #4]
 801718e:	8b09      	ldrh	r1, [r1, #24]
 8017190:	9102      	str	r1, [sp, #8]
 8017192:	9201      	str	r2, [sp, #4]
 8017194:	9300      	str	r3, [sp, #0]
 8017196:	462b      	mov	r3, r5
 8017198:	4622      	mov	r2, r4
 801719a:	4601      	mov	r1, r0
 801719c:	6878      	ldr	r0, [r7, #4]
 801719e:	f005 fd95 	bl	801cccc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80171a2:	6878      	ldr	r0, [r7, #4]
 80171a4:	f001 fb72 	bl	801888c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80171a8:	4b47      	ldr	r3, [pc, #284]	; (80172c8 <tcp_close_shutdown+0x1b0>)
 80171aa:	681b      	ldr	r3, [r3, #0]
 80171ac:	687a      	ldr	r2, [r7, #4]
 80171ae:	429a      	cmp	r2, r3
 80171b0:	d105      	bne.n	80171be <tcp_close_shutdown+0xa6>
 80171b2:	4b45      	ldr	r3, [pc, #276]	; (80172c8 <tcp_close_shutdown+0x1b0>)
 80171b4:	681b      	ldr	r3, [r3, #0]
 80171b6:	68db      	ldr	r3, [r3, #12]
 80171b8:	4a43      	ldr	r2, [pc, #268]	; (80172c8 <tcp_close_shutdown+0x1b0>)
 80171ba:	6013      	str	r3, [r2, #0]
 80171bc:	e013      	b.n	80171e6 <tcp_close_shutdown+0xce>
 80171be:	4b42      	ldr	r3, [pc, #264]	; (80172c8 <tcp_close_shutdown+0x1b0>)
 80171c0:	681b      	ldr	r3, [r3, #0]
 80171c2:	60fb      	str	r3, [r7, #12]
 80171c4:	e00c      	b.n	80171e0 <tcp_close_shutdown+0xc8>
 80171c6:	68fb      	ldr	r3, [r7, #12]
 80171c8:	68db      	ldr	r3, [r3, #12]
 80171ca:	687a      	ldr	r2, [r7, #4]
 80171cc:	429a      	cmp	r2, r3
 80171ce:	d104      	bne.n	80171da <tcp_close_shutdown+0xc2>
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	68da      	ldr	r2, [r3, #12]
 80171d4:	68fb      	ldr	r3, [r7, #12]
 80171d6:	60da      	str	r2, [r3, #12]
 80171d8:	e005      	b.n	80171e6 <tcp_close_shutdown+0xce>
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	68db      	ldr	r3, [r3, #12]
 80171de:	60fb      	str	r3, [r7, #12]
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	d1ef      	bne.n	80171c6 <tcp_close_shutdown+0xae>
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	2200      	movs	r2, #0
 80171ea:	60da      	str	r2, [r3, #12]
 80171ec:	4b37      	ldr	r3, [pc, #220]	; (80172cc <tcp_close_shutdown+0x1b4>)
 80171ee:	2201      	movs	r2, #1
 80171f0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80171f2:	4b37      	ldr	r3, [pc, #220]	; (80172d0 <tcp_close_shutdown+0x1b8>)
 80171f4:	681b      	ldr	r3, [r3, #0]
 80171f6:	687a      	ldr	r2, [r7, #4]
 80171f8:	429a      	cmp	r2, r3
 80171fa:	d102      	bne.n	8017202 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80171fc:	f004 f80a 	bl	801b214 <tcp_trigger_input_pcb_close>
 8017200:	e002      	b.n	8017208 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8017202:	6878      	ldr	r0, [r7, #4]
 8017204:	f7ff fed6 	bl	8016fb4 <tcp_free>
      }
      return ERR_OK;
 8017208:	2300      	movs	r3, #0
 801720a:	e050      	b.n	80172ae <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	7d1b      	ldrb	r3, [r3, #20]
 8017210:	2b02      	cmp	r3, #2
 8017212:	d03b      	beq.n	801728c <tcp_close_shutdown+0x174>
 8017214:	2b02      	cmp	r3, #2
 8017216:	dc44      	bgt.n	80172a2 <tcp_close_shutdown+0x18a>
 8017218:	2b00      	cmp	r3, #0
 801721a:	d002      	beq.n	8017222 <tcp_close_shutdown+0x10a>
 801721c:	2b01      	cmp	r3, #1
 801721e:	d02a      	beq.n	8017276 <tcp_close_shutdown+0x15e>
 8017220:	e03f      	b.n	80172a2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	8adb      	ldrh	r3, [r3, #22]
 8017226:	2b00      	cmp	r3, #0
 8017228:	d021      	beq.n	801726e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801722a:	4b2a      	ldr	r3, [pc, #168]	; (80172d4 <tcp_close_shutdown+0x1bc>)
 801722c:	681b      	ldr	r3, [r3, #0]
 801722e:	687a      	ldr	r2, [r7, #4]
 8017230:	429a      	cmp	r2, r3
 8017232:	d105      	bne.n	8017240 <tcp_close_shutdown+0x128>
 8017234:	4b27      	ldr	r3, [pc, #156]	; (80172d4 <tcp_close_shutdown+0x1bc>)
 8017236:	681b      	ldr	r3, [r3, #0]
 8017238:	68db      	ldr	r3, [r3, #12]
 801723a:	4a26      	ldr	r2, [pc, #152]	; (80172d4 <tcp_close_shutdown+0x1bc>)
 801723c:	6013      	str	r3, [r2, #0]
 801723e:	e013      	b.n	8017268 <tcp_close_shutdown+0x150>
 8017240:	4b24      	ldr	r3, [pc, #144]	; (80172d4 <tcp_close_shutdown+0x1bc>)
 8017242:	681b      	ldr	r3, [r3, #0]
 8017244:	60bb      	str	r3, [r7, #8]
 8017246:	e00c      	b.n	8017262 <tcp_close_shutdown+0x14a>
 8017248:	68bb      	ldr	r3, [r7, #8]
 801724a:	68db      	ldr	r3, [r3, #12]
 801724c:	687a      	ldr	r2, [r7, #4]
 801724e:	429a      	cmp	r2, r3
 8017250:	d104      	bne.n	801725c <tcp_close_shutdown+0x144>
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	68da      	ldr	r2, [r3, #12]
 8017256:	68bb      	ldr	r3, [r7, #8]
 8017258:	60da      	str	r2, [r3, #12]
 801725a:	e005      	b.n	8017268 <tcp_close_shutdown+0x150>
 801725c:	68bb      	ldr	r3, [r7, #8]
 801725e:	68db      	ldr	r3, [r3, #12]
 8017260:	60bb      	str	r3, [r7, #8]
 8017262:	68bb      	ldr	r3, [r7, #8]
 8017264:	2b00      	cmp	r3, #0
 8017266:	d1ef      	bne.n	8017248 <tcp_close_shutdown+0x130>
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	2200      	movs	r2, #0
 801726c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801726e:	6878      	ldr	r0, [r7, #4]
 8017270:	f7ff fea0 	bl	8016fb4 <tcp_free>
      break;
 8017274:	e01a      	b.n	80172ac <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8017276:	6878      	ldr	r0, [r7, #4]
 8017278:	f7ff ff14 	bl	80170a4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801727c:	6879      	ldr	r1, [r7, #4]
 801727e:	4816      	ldr	r0, [pc, #88]	; (80172d8 <tcp_close_shutdown+0x1c0>)
 8017280:	f001 fb54 	bl	801892c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8017284:	6878      	ldr	r0, [r7, #4]
 8017286:	f7ff feb1 	bl	8016fec <tcp_free_listen>
      break;
 801728a:	e00f      	b.n	80172ac <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801728c:	6879      	ldr	r1, [r7, #4]
 801728e:	480e      	ldr	r0, [pc, #56]	; (80172c8 <tcp_close_shutdown+0x1b0>)
 8017290:	f001 fb4c 	bl	801892c <tcp_pcb_remove>
 8017294:	4b0d      	ldr	r3, [pc, #52]	; (80172cc <tcp_close_shutdown+0x1b4>)
 8017296:	2201      	movs	r2, #1
 8017298:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801729a:	6878      	ldr	r0, [r7, #4]
 801729c:	f7ff fe8a 	bl	8016fb4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80172a0:	e004      	b.n	80172ac <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80172a2:	6878      	ldr	r0, [r7, #4]
 80172a4:	f000 f81a 	bl	80172dc <tcp_close_shutdown_fin>
 80172a8:	4603      	mov	r3, r0
 80172aa:	e000      	b.n	80172ae <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80172ac:	2300      	movs	r3, #0
}
 80172ae:	4618      	mov	r0, r3
 80172b0:	3710      	adds	r7, #16
 80172b2:	46bd      	mov	sp, r7
 80172b4:	bdb0      	pop	{r4, r5, r7, pc}
 80172b6:	bf00      	nop
 80172b8:	08027710 	.word	0x08027710
 80172bc:	080277e4 	.word	0x080277e4
 80172c0:	08027754 	.word	0x08027754
 80172c4:	08027804 	.word	0x08027804
 80172c8:	200188a8 	.word	0x200188a8
 80172cc:	200188b0 	.word	0x200188b0
 80172d0:	200188e8 	.word	0x200188e8
 80172d4:	200188a0 	.word	0x200188a0
 80172d8:	200188a4 	.word	0x200188a4

080172dc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80172dc:	b580      	push	{r7, lr}
 80172de:	b084      	sub	sp, #16
 80172e0:	af00      	add	r7, sp, #0
 80172e2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d106      	bne.n	80172f8 <tcp_close_shutdown_fin+0x1c>
 80172ea:	4b2e      	ldr	r3, [pc, #184]	; (80173a4 <tcp_close_shutdown_fin+0xc8>)
 80172ec:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80172f0:	492d      	ldr	r1, [pc, #180]	; (80173a8 <tcp_close_shutdown_fin+0xcc>)
 80172f2:	482e      	ldr	r0, [pc, #184]	; (80173ac <tcp_close_shutdown_fin+0xd0>)
 80172f4:	f008 fe36 	bl	801ff64 <printf>

  switch (pcb->state) {
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	7d1b      	ldrb	r3, [r3, #20]
 80172fc:	2b07      	cmp	r3, #7
 80172fe:	d020      	beq.n	8017342 <tcp_close_shutdown_fin+0x66>
 8017300:	2b07      	cmp	r3, #7
 8017302:	dc2b      	bgt.n	801735c <tcp_close_shutdown_fin+0x80>
 8017304:	2b03      	cmp	r3, #3
 8017306:	d002      	beq.n	801730e <tcp_close_shutdown_fin+0x32>
 8017308:	2b04      	cmp	r3, #4
 801730a:	d00d      	beq.n	8017328 <tcp_close_shutdown_fin+0x4c>
 801730c:	e026      	b.n	801735c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801730e:	6878      	ldr	r0, [r7, #4]
 8017310:	f004 fdea 	bl	801bee8 <tcp_send_fin>
 8017314:	4603      	mov	r3, r0
 8017316:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8017318:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801731c:	2b00      	cmp	r3, #0
 801731e:	d11f      	bne.n	8017360 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	2205      	movs	r2, #5
 8017324:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017326:	e01b      	b.n	8017360 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8017328:	6878      	ldr	r0, [r7, #4]
 801732a:	f004 fddd 	bl	801bee8 <tcp_send_fin>
 801732e:	4603      	mov	r3, r0
 8017330:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8017332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017336:	2b00      	cmp	r3, #0
 8017338:	d114      	bne.n	8017364 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	2205      	movs	r2, #5
 801733e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017340:	e010      	b.n	8017364 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8017342:	6878      	ldr	r0, [r7, #4]
 8017344:	f004 fdd0 	bl	801bee8 <tcp_send_fin>
 8017348:	4603      	mov	r3, r0
 801734a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801734c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017350:	2b00      	cmp	r3, #0
 8017352:	d109      	bne.n	8017368 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	2209      	movs	r2, #9
 8017358:	751a      	strb	r2, [r3, #20]
      }
      break;
 801735a:	e005      	b.n	8017368 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801735c:	2300      	movs	r3, #0
 801735e:	e01c      	b.n	801739a <tcp_close_shutdown_fin+0xbe>
      break;
 8017360:	bf00      	nop
 8017362:	e002      	b.n	801736a <tcp_close_shutdown_fin+0x8e>
      break;
 8017364:	bf00      	nop
 8017366:	e000      	b.n	801736a <tcp_close_shutdown_fin+0x8e>
      break;
 8017368:	bf00      	nop
  }

  if (err == ERR_OK) {
 801736a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801736e:	2b00      	cmp	r3, #0
 8017370:	d103      	bne.n	801737a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8017372:	6878      	ldr	r0, [r7, #4]
 8017374:	f004 fef6 	bl	801c164 <tcp_output>
 8017378:	e00d      	b.n	8017396 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801737a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801737e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017382:	d108      	bne.n	8017396 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	8b5b      	ldrh	r3, [r3, #26]
 8017388:	f043 0308 	orr.w	r3, r3, #8
 801738c:	b29a      	uxth	r2, r3
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8017392:	2300      	movs	r3, #0
 8017394:	e001      	b.n	801739a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8017396:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801739a:	4618      	mov	r0, r3
 801739c:	3710      	adds	r7, #16
 801739e:	46bd      	mov	sp, r7
 80173a0:	bd80      	pop	{r7, pc}
 80173a2:	bf00      	nop
 80173a4:	08027710 	.word	0x08027710
 80173a8:	080277c0 	.word	0x080277c0
 80173ac:	08027754 	.word	0x08027754

080173b0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80173b0:	b580      	push	{r7, lr}
 80173b2:	b082      	sub	sp, #8
 80173b4:	af00      	add	r7, sp, #0
 80173b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d109      	bne.n	80173d2 <tcp_close+0x22>
 80173be:	4b0f      	ldr	r3, [pc, #60]	; (80173fc <tcp_close+0x4c>)
 80173c0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80173c4:	490e      	ldr	r1, [pc, #56]	; (8017400 <tcp_close+0x50>)
 80173c6:	480f      	ldr	r0, [pc, #60]	; (8017404 <tcp_close+0x54>)
 80173c8:	f008 fdcc 	bl	801ff64 <printf>
 80173cc:	f06f 030f 	mvn.w	r3, #15
 80173d0:	e00f      	b.n	80173f2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	7d1b      	ldrb	r3, [r3, #20]
 80173d6:	2b01      	cmp	r3, #1
 80173d8:	d006      	beq.n	80173e8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	8b5b      	ldrh	r3, [r3, #26]
 80173de:	f043 0310 	orr.w	r3, r3, #16
 80173e2:	b29a      	uxth	r2, r3
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80173e8:	2101      	movs	r1, #1
 80173ea:	6878      	ldr	r0, [r7, #4]
 80173ec:	f7ff fe94 	bl	8017118 <tcp_close_shutdown>
 80173f0:	4603      	mov	r3, r0
}
 80173f2:	4618      	mov	r0, r3
 80173f4:	3708      	adds	r7, #8
 80173f6:	46bd      	mov	sp, r7
 80173f8:	bd80      	pop	{r7, pc}
 80173fa:	bf00      	nop
 80173fc:	08027710 	.word	0x08027710
 8017400:	08027820 	.word	0x08027820
 8017404:	08027754 	.word	0x08027754

08017408 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8017408:	b580      	push	{r7, lr}
 801740a:	b08e      	sub	sp, #56	; 0x38
 801740c:	af04      	add	r7, sp, #16
 801740e:	6078      	str	r0, [r7, #4]
 8017410:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	2b00      	cmp	r3, #0
 8017416:	d107      	bne.n	8017428 <tcp_abandon+0x20>
 8017418:	4b52      	ldr	r3, [pc, #328]	; (8017564 <tcp_abandon+0x15c>)
 801741a:	f240 223d 	movw	r2, #573	; 0x23d
 801741e:	4952      	ldr	r1, [pc, #328]	; (8017568 <tcp_abandon+0x160>)
 8017420:	4852      	ldr	r0, [pc, #328]	; (801756c <tcp_abandon+0x164>)
 8017422:	f008 fd9f 	bl	801ff64 <printf>
 8017426:	e099      	b.n	801755c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	7d1b      	ldrb	r3, [r3, #20]
 801742c:	2b01      	cmp	r3, #1
 801742e:	d106      	bne.n	801743e <tcp_abandon+0x36>
 8017430:	4b4c      	ldr	r3, [pc, #304]	; (8017564 <tcp_abandon+0x15c>)
 8017432:	f44f 7210 	mov.w	r2, #576	; 0x240
 8017436:	494e      	ldr	r1, [pc, #312]	; (8017570 <tcp_abandon+0x168>)
 8017438:	484c      	ldr	r0, [pc, #304]	; (801756c <tcp_abandon+0x164>)
 801743a:	f008 fd93 	bl	801ff64 <printf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801743e:	687b      	ldr	r3, [r7, #4]
 8017440:	7d1b      	ldrb	r3, [r3, #20]
 8017442:	2b0a      	cmp	r3, #10
 8017444:	d107      	bne.n	8017456 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8017446:	6879      	ldr	r1, [r7, #4]
 8017448:	484a      	ldr	r0, [pc, #296]	; (8017574 <tcp_abandon+0x16c>)
 801744a:	f001 fa6f 	bl	801892c <tcp_pcb_remove>
    tcp_free(pcb);
 801744e:	6878      	ldr	r0, [r7, #4]
 8017450:	f7ff fdb0 	bl	8016fb4 <tcp_free>
 8017454:	e082      	b.n	801755c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8017456:	2300      	movs	r3, #0
 8017458:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801745a:	2300      	movs	r3, #0
 801745c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801745e:	687b      	ldr	r3, [r7, #4]
 8017460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017462:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017468:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017470:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	691b      	ldr	r3, [r3, #16]
 8017476:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	7d1b      	ldrb	r3, [r3, #20]
 801747c:	2b00      	cmp	r3, #0
 801747e:	d126      	bne.n	80174ce <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	8adb      	ldrh	r3, [r3, #22]
 8017484:	2b00      	cmp	r3, #0
 8017486:	d02e      	beq.n	80174e6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8017488:	4b3b      	ldr	r3, [pc, #236]	; (8017578 <tcp_abandon+0x170>)
 801748a:	681b      	ldr	r3, [r3, #0]
 801748c:	687a      	ldr	r2, [r7, #4]
 801748e:	429a      	cmp	r2, r3
 8017490:	d105      	bne.n	801749e <tcp_abandon+0x96>
 8017492:	4b39      	ldr	r3, [pc, #228]	; (8017578 <tcp_abandon+0x170>)
 8017494:	681b      	ldr	r3, [r3, #0]
 8017496:	68db      	ldr	r3, [r3, #12]
 8017498:	4a37      	ldr	r2, [pc, #220]	; (8017578 <tcp_abandon+0x170>)
 801749a:	6013      	str	r3, [r2, #0]
 801749c:	e013      	b.n	80174c6 <tcp_abandon+0xbe>
 801749e:	4b36      	ldr	r3, [pc, #216]	; (8017578 <tcp_abandon+0x170>)
 80174a0:	681b      	ldr	r3, [r3, #0]
 80174a2:	61fb      	str	r3, [r7, #28]
 80174a4:	e00c      	b.n	80174c0 <tcp_abandon+0xb8>
 80174a6:	69fb      	ldr	r3, [r7, #28]
 80174a8:	68db      	ldr	r3, [r3, #12]
 80174aa:	687a      	ldr	r2, [r7, #4]
 80174ac:	429a      	cmp	r2, r3
 80174ae:	d104      	bne.n	80174ba <tcp_abandon+0xb2>
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	68da      	ldr	r2, [r3, #12]
 80174b4:	69fb      	ldr	r3, [r7, #28]
 80174b6:	60da      	str	r2, [r3, #12]
 80174b8:	e005      	b.n	80174c6 <tcp_abandon+0xbe>
 80174ba:	69fb      	ldr	r3, [r7, #28]
 80174bc:	68db      	ldr	r3, [r3, #12]
 80174be:	61fb      	str	r3, [r7, #28]
 80174c0:	69fb      	ldr	r3, [r7, #28]
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d1ef      	bne.n	80174a6 <tcp_abandon+0x9e>
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	2200      	movs	r2, #0
 80174ca:	60da      	str	r2, [r3, #12]
 80174cc:	e00b      	b.n	80174e6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80174ce:	683b      	ldr	r3, [r7, #0]
 80174d0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	8adb      	ldrh	r3, [r3, #22]
 80174d6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80174d8:	6879      	ldr	r1, [r7, #4]
 80174da:	4828      	ldr	r0, [pc, #160]	; (801757c <tcp_abandon+0x174>)
 80174dc:	f001 fa26 	bl	801892c <tcp_pcb_remove>
 80174e0:	4b27      	ldr	r3, [pc, #156]	; (8017580 <tcp_abandon+0x178>)
 80174e2:	2201      	movs	r2, #1
 80174e4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d004      	beq.n	80174f8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80174f2:	4618      	mov	r0, r3
 80174f4:	f000 ff12 	bl	801831c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d004      	beq.n	801750a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017504:	4618      	mov	r0, r3
 8017506:	f000 ff09 	bl	801831c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801750e:	2b00      	cmp	r3, #0
 8017510:	d004      	beq.n	801751c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017516:	4618      	mov	r0, r3
 8017518:	f000 ff00 	bl	801831c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801751c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801751e:	2b00      	cmp	r3, #0
 8017520:	d00e      	beq.n	8017540 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8017522:	6879      	ldr	r1, [r7, #4]
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	3304      	adds	r3, #4
 8017528:	687a      	ldr	r2, [r7, #4]
 801752a:	8b12      	ldrh	r2, [r2, #24]
 801752c:	9202      	str	r2, [sp, #8]
 801752e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017530:	9201      	str	r2, [sp, #4]
 8017532:	9300      	str	r3, [sp, #0]
 8017534:	460b      	mov	r3, r1
 8017536:	697a      	ldr	r2, [r7, #20]
 8017538:	69b9      	ldr	r1, [r7, #24]
 801753a:	6878      	ldr	r0, [r7, #4]
 801753c:	f005 fbc6 	bl	801cccc <tcp_rst>
    }
    last_state = pcb->state;
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	7d1b      	ldrb	r3, [r3, #20]
 8017544:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8017546:	6878      	ldr	r0, [r7, #4]
 8017548:	f7ff fd34 	bl	8016fb4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801754c:	693b      	ldr	r3, [r7, #16]
 801754e:	2b00      	cmp	r3, #0
 8017550:	d004      	beq.n	801755c <tcp_abandon+0x154>
 8017552:	693b      	ldr	r3, [r7, #16]
 8017554:	f06f 010c 	mvn.w	r1, #12
 8017558:	68f8      	ldr	r0, [r7, #12]
 801755a:	4798      	blx	r3
  }
}
 801755c:	3728      	adds	r7, #40	; 0x28
 801755e:	46bd      	mov	sp, r7
 8017560:	bd80      	pop	{r7, pc}
 8017562:	bf00      	nop
 8017564:	08027710 	.word	0x08027710
 8017568:	08027854 	.word	0x08027854
 801756c:	08027754 	.word	0x08027754
 8017570:	08027870 	.word	0x08027870
 8017574:	200188ac 	.word	0x200188ac
 8017578:	200188a0 	.word	0x200188a0
 801757c:	200188a8 	.word	0x200188a8
 8017580:	200188b0 	.word	0x200188b0

08017584 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8017584:	b580      	push	{r7, lr}
 8017586:	b082      	sub	sp, #8
 8017588:	af00      	add	r7, sp, #0
 801758a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801758c:	2101      	movs	r1, #1
 801758e:	6878      	ldr	r0, [r7, #4]
 8017590:	f7ff ff3a 	bl	8017408 <tcp_abandon>
}
 8017594:	bf00      	nop
 8017596:	3708      	adds	r7, #8
 8017598:	46bd      	mov	sp, r7
 801759a:	bd80      	pop	{r7, pc}

0801759c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801759c:	b580      	push	{r7, lr}
 801759e:	b088      	sub	sp, #32
 80175a0:	af00      	add	r7, sp, #0
 80175a2:	60f8      	str	r0, [r7, #12]
 80175a4:	60b9      	str	r1, [r7, #8]
 80175a6:	4613      	mov	r3, r2
 80175a8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80175aa:	2304      	movs	r3, #4
 80175ac:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80175ae:	68bb      	ldr	r3, [r7, #8]
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d101      	bne.n	80175b8 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80175b4:	4b3e      	ldr	r3, [pc, #248]	; (80176b0 <tcp_bind+0x114>)
 80175b6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80175b8:	68fb      	ldr	r3, [r7, #12]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d109      	bne.n	80175d2 <tcp_bind+0x36>
 80175be:	4b3d      	ldr	r3, [pc, #244]	; (80176b4 <tcp_bind+0x118>)
 80175c0:	f240 22a9 	movw	r2, #681	; 0x2a9
 80175c4:	493c      	ldr	r1, [pc, #240]	; (80176b8 <tcp_bind+0x11c>)
 80175c6:	483d      	ldr	r0, [pc, #244]	; (80176bc <tcp_bind+0x120>)
 80175c8:	f008 fccc 	bl	801ff64 <printf>
 80175cc:	f06f 030f 	mvn.w	r3, #15
 80175d0:	e06a      	b.n	80176a8 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80175d2:	68fb      	ldr	r3, [r7, #12]
 80175d4:	7d1b      	ldrb	r3, [r3, #20]
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	d009      	beq.n	80175ee <tcp_bind+0x52>
 80175da:	4b36      	ldr	r3, [pc, #216]	; (80176b4 <tcp_bind+0x118>)
 80175dc:	f240 22ab 	movw	r2, #683	; 0x2ab
 80175e0:	4937      	ldr	r1, [pc, #220]	; (80176c0 <tcp_bind+0x124>)
 80175e2:	4836      	ldr	r0, [pc, #216]	; (80176bc <tcp_bind+0x120>)
 80175e4:	f008 fcbe 	bl	801ff64 <printf>
 80175e8:	f06f 0305 	mvn.w	r3, #5
 80175ec:	e05c      	b.n	80176a8 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80175ee:	88fb      	ldrh	r3, [r7, #6]
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d109      	bne.n	8017608 <tcp_bind+0x6c>
    port = tcp_new_port();
 80175f4:	f000 f914 	bl	8017820 <tcp_new_port>
 80175f8:	4603      	mov	r3, r0
 80175fa:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80175fc:	88fb      	ldrh	r3, [r7, #6]
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d135      	bne.n	801766e <tcp_bind+0xd2>
      return ERR_BUF;
 8017602:	f06f 0301 	mvn.w	r3, #1
 8017606:	e04f      	b.n	80176a8 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8017608:	2300      	movs	r3, #0
 801760a:	61fb      	str	r3, [r7, #28]
 801760c:	e02b      	b.n	8017666 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801760e:	4a2d      	ldr	r2, [pc, #180]	; (80176c4 <tcp_bind+0x128>)
 8017610:	69fb      	ldr	r3, [r7, #28]
 8017612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017616:	681b      	ldr	r3, [r3, #0]
 8017618:	61bb      	str	r3, [r7, #24]
 801761a:	e01e      	b.n	801765a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 801761c:	69bb      	ldr	r3, [r7, #24]
 801761e:	8adb      	ldrh	r3, [r3, #22]
 8017620:	88fa      	ldrh	r2, [r7, #6]
 8017622:	429a      	cmp	r2, r3
 8017624:	d116      	bne.n	8017654 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8017626:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8017628:	2b00      	cmp	r3, #0
 801762a:	d010      	beq.n	801764e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 801762c:	69bb      	ldr	r3, [r7, #24]
 801762e:	681b      	ldr	r3, [r3, #0]
 8017630:	2b00      	cmp	r3, #0
 8017632:	d00c      	beq.n	801764e <tcp_bind+0xb2>
 8017634:	68bb      	ldr	r3, [r7, #8]
 8017636:	2b00      	cmp	r3, #0
 8017638:	d009      	beq.n	801764e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 801763a:	68bb      	ldr	r3, [r7, #8]
 801763c:	681b      	ldr	r3, [r3, #0]
 801763e:	2b00      	cmp	r3, #0
 8017640:	d005      	beq.n	801764e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8017642:	69bb      	ldr	r3, [r7, #24]
 8017644:	681a      	ldr	r2, [r3, #0]
 8017646:	68bb      	ldr	r3, [r7, #8]
 8017648:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801764a:	429a      	cmp	r2, r3
 801764c:	d102      	bne.n	8017654 <tcp_bind+0xb8>
              return ERR_USE;
 801764e:	f06f 0307 	mvn.w	r3, #7
 8017652:	e029      	b.n	80176a8 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8017654:	69bb      	ldr	r3, [r7, #24]
 8017656:	68db      	ldr	r3, [r3, #12]
 8017658:	61bb      	str	r3, [r7, #24]
 801765a:	69bb      	ldr	r3, [r7, #24]
 801765c:	2b00      	cmp	r3, #0
 801765e:	d1dd      	bne.n	801761c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8017660:	69fb      	ldr	r3, [r7, #28]
 8017662:	3301      	adds	r3, #1
 8017664:	61fb      	str	r3, [r7, #28]
 8017666:	69fa      	ldr	r2, [r7, #28]
 8017668:	697b      	ldr	r3, [r7, #20]
 801766a:	429a      	cmp	r2, r3
 801766c:	dbcf      	blt.n	801760e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801766e:	68bb      	ldr	r3, [r7, #8]
 8017670:	2b00      	cmp	r3, #0
 8017672:	d00c      	beq.n	801768e <tcp_bind+0xf2>
 8017674:	68bb      	ldr	r3, [r7, #8]
 8017676:	681b      	ldr	r3, [r3, #0]
 8017678:	2b00      	cmp	r3, #0
 801767a:	d008      	beq.n	801768e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 801767c:	68bb      	ldr	r3, [r7, #8]
 801767e:	2b00      	cmp	r3, #0
 8017680:	d002      	beq.n	8017688 <tcp_bind+0xec>
 8017682:	68bb      	ldr	r3, [r7, #8]
 8017684:	681b      	ldr	r3, [r3, #0]
 8017686:	e000      	b.n	801768a <tcp_bind+0xee>
 8017688:	2300      	movs	r3, #0
 801768a:	68fa      	ldr	r2, [r7, #12]
 801768c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801768e:	68fb      	ldr	r3, [r7, #12]
 8017690:	88fa      	ldrh	r2, [r7, #6]
 8017692:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8017694:	4b0c      	ldr	r3, [pc, #48]	; (80176c8 <tcp_bind+0x12c>)
 8017696:	681a      	ldr	r2, [r3, #0]
 8017698:	68fb      	ldr	r3, [r7, #12]
 801769a:	60da      	str	r2, [r3, #12]
 801769c:	4a0a      	ldr	r2, [pc, #40]	; (80176c8 <tcp_bind+0x12c>)
 801769e:	68fb      	ldr	r3, [r7, #12]
 80176a0:	6013      	str	r3, [r2, #0]
 80176a2:	f005 fcd5 	bl	801d050 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80176a6:	2300      	movs	r3, #0
}
 80176a8:	4618      	mov	r0, r3
 80176aa:	3720      	adds	r7, #32
 80176ac:	46bd      	mov	sp, r7
 80176ae:	bd80      	pop	{r7, pc}
 80176b0:	080718e8 	.word	0x080718e8
 80176b4:	08027710 	.word	0x08027710
 80176b8:	080278a4 	.word	0x080278a4
 80176bc:	08027754 	.word	0x08027754
 80176c0:	080278bc 	.word	0x080278bc
 80176c4:	080718c0 	.word	0x080718c0
 80176c8:	200188a0 	.word	0x200188a0

080176cc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80176cc:	b580      	push	{r7, lr}
 80176ce:	b084      	sub	sp, #16
 80176d0:	af00      	add	r7, sp, #0
 80176d2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	d106      	bne.n	80176e8 <tcp_update_rcv_ann_wnd+0x1c>
 80176da:	4b25      	ldr	r3, [pc, #148]	; (8017770 <tcp_update_rcv_ann_wnd+0xa4>)
 80176dc:	f240 32a6 	movw	r2, #934	; 0x3a6
 80176e0:	4924      	ldr	r1, [pc, #144]	; (8017774 <tcp_update_rcv_ann_wnd+0xa8>)
 80176e2:	4825      	ldr	r0, [pc, #148]	; (8017778 <tcp_update_rcv_ann_wnd+0xac>)
 80176e4:	f008 fc3e 	bl	801ff64 <printf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80176ec:	687a      	ldr	r2, [r7, #4]
 80176ee:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80176f0:	4413      	add	r3, r2
 80176f2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176f8:	687a      	ldr	r2, [r7, #4]
 80176fa:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80176fc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8017700:	bf28      	it	cs
 8017702:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8017706:	b292      	uxth	r2, r2
 8017708:	4413      	add	r3, r2
 801770a:	68fa      	ldr	r2, [r7, #12]
 801770c:	1ad3      	subs	r3, r2, r3
 801770e:	2b00      	cmp	r3, #0
 8017710:	db08      	blt.n	8017724 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801771e:	68fa      	ldr	r2, [r7, #12]
 8017720:	1ad3      	subs	r3, r2, r3
 8017722:	e020      	b.n	8017766 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801772c:	1ad3      	subs	r3, r2, r3
 801772e:	2b00      	cmp	r3, #0
 8017730:	dd03      	ble.n	801773a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	2200      	movs	r2, #0
 8017736:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017738:	e014      	b.n	8017764 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801773e:	687b      	ldr	r3, [r7, #4]
 8017740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017742:	1ad3      	subs	r3, r2, r3
 8017744:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8017746:	68bb      	ldr	r3, [r7, #8]
 8017748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801774c:	d306      	bcc.n	801775c <tcp_update_rcv_ann_wnd+0x90>
 801774e:	4b08      	ldr	r3, [pc, #32]	; (8017770 <tcp_update_rcv_ann_wnd+0xa4>)
 8017750:	f240 32b6 	movw	r2, #950	; 0x3b6
 8017754:	4909      	ldr	r1, [pc, #36]	; (801777c <tcp_update_rcv_ann_wnd+0xb0>)
 8017756:	4808      	ldr	r0, [pc, #32]	; (8017778 <tcp_update_rcv_ann_wnd+0xac>)
 8017758:	f008 fc04 	bl	801ff64 <printf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801775c:	68bb      	ldr	r3, [r7, #8]
 801775e:	b29a      	uxth	r2, r3
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8017764:	2300      	movs	r3, #0
  }
}
 8017766:	4618      	mov	r0, r3
 8017768:	3710      	adds	r7, #16
 801776a:	46bd      	mov	sp, r7
 801776c:	bd80      	pop	{r7, pc}
 801776e:	bf00      	nop
 8017770:	08027710 	.word	0x08027710
 8017774:	0802796c 	.word	0x0802796c
 8017778:	08027754 	.word	0x08027754
 801777c:	08027990 	.word	0x08027990

08017780 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8017780:	b580      	push	{r7, lr}
 8017782:	b084      	sub	sp, #16
 8017784:	af00      	add	r7, sp, #0
 8017786:	6078      	str	r0, [r7, #4]
 8017788:	460b      	mov	r3, r1
 801778a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	2b00      	cmp	r3, #0
 8017790:	d107      	bne.n	80177a2 <tcp_recved+0x22>
 8017792:	4b1f      	ldr	r3, [pc, #124]	; (8017810 <tcp_recved+0x90>)
 8017794:	f240 32cf 	movw	r2, #975	; 0x3cf
 8017798:	491e      	ldr	r1, [pc, #120]	; (8017814 <tcp_recved+0x94>)
 801779a:	481f      	ldr	r0, [pc, #124]	; (8017818 <tcp_recved+0x98>)
 801779c:	f008 fbe2 	bl	801ff64 <printf>
 80177a0:	e032      	b.n	8017808 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	7d1b      	ldrb	r3, [r3, #20]
 80177a6:	2b01      	cmp	r3, #1
 80177a8:	d106      	bne.n	80177b8 <tcp_recved+0x38>
 80177aa:	4b19      	ldr	r3, [pc, #100]	; (8017810 <tcp_recved+0x90>)
 80177ac:	f240 32d2 	movw	r2, #978	; 0x3d2
 80177b0:	491a      	ldr	r1, [pc, #104]	; (801781c <tcp_recved+0x9c>)
 80177b2:	4819      	ldr	r0, [pc, #100]	; (8017818 <tcp_recved+0x98>)
 80177b4:	f008 fbd6 	bl	801ff64 <printf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80177bc:	887b      	ldrh	r3, [r7, #2]
 80177be:	4413      	add	r3, r2
 80177c0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80177c2:	89fb      	ldrh	r3, [r7, #14]
 80177c4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80177c8:	d804      	bhi.n	80177d4 <tcp_recved+0x54>
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80177ce:	89fa      	ldrh	r2, [r7, #14]
 80177d0:	429a      	cmp	r2, r3
 80177d2:	d204      	bcs.n	80177de <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80177da:	851a      	strh	r2, [r3, #40]	; 0x28
 80177dc:	e002      	b.n	80177e4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	89fa      	ldrh	r2, [r7, #14]
 80177e2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80177e4:	6878      	ldr	r0, [r7, #4]
 80177e6:	f7ff ff71 	bl	80176cc <tcp_update_rcv_ann_wnd>
 80177ea:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80177ec:	68bb      	ldr	r3, [r7, #8]
 80177ee:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80177f2:	d309      	bcc.n	8017808 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	8b5b      	ldrh	r3, [r3, #26]
 80177f8:	f043 0302 	orr.w	r3, r3, #2
 80177fc:	b29a      	uxth	r2, r3
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8017802:	6878      	ldr	r0, [r7, #4]
 8017804:	f004 fcae 	bl	801c164 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8017808:	3710      	adds	r7, #16
 801780a:	46bd      	mov	sp, r7
 801780c:	bd80      	pop	{r7, pc}
 801780e:	bf00      	nop
 8017810:	08027710 	.word	0x08027710
 8017814:	080279ac 	.word	0x080279ac
 8017818:	08027754 	.word	0x08027754
 801781c:	080279c4 	.word	0x080279c4

08017820 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8017820:	b480      	push	{r7}
 8017822:	b083      	sub	sp, #12
 8017824:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8017826:	2300      	movs	r3, #0
 8017828:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801782a:	4b1e      	ldr	r3, [pc, #120]	; (80178a4 <tcp_new_port+0x84>)
 801782c:	881b      	ldrh	r3, [r3, #0]
 801782e:	3301      	adds	r3, #1
 8017830:	b29a      	uxth	r2, r3
 8017832:	4b1c      	ldr	r3, [pc, #112]	; (80178a4 <tcp_new_port+0x84>)
 8017834:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8017836:	4b1b      	ldr	r3, [pc, #108]	; (80178a4 <tcp_new_port+0x84>)
 8017838:	881b      	ldrh	r3, [r3, #0]
 801783a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801783e:	4293      	cmp	r3, r2
 8017840:	d103      	bne.n	801784a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8017842:	4b18      	ldr	r3, [pc, #96]	; (80178a4 <tcp_new_port+0x84>)
 8017844:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8017848:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801784a:	2300      	movs	r3, #0
 801784c:	71fb      	strb	r3, [r7, #7]
 801784e:	e01e      	b.n	801788e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8017850:	79fb      	ldrb	r3, [r7, #7]
 8017852:	4a15      	ldr	r2, [pc, #84]	; (80178a8 <tcp_new_port+0x88>)
 8017854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017858:	681b      	ldr	r3, [r3, #0]
 801785a:	603b      	str	r3, [r7, #0]
 801785c:	e011      	b.n	8017882 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801785e:	683b      	ldr	r3, [r7, #0]
 8017860:	8ada      	ldrh	r2, [r3, #22]
 8017862:	4b10      	ldr	r3, [pc, #64]	; (80178a4 <tcp_new_port+0x84>)
 8017864:	881b      	ldrh	r3, [r3, #0]
 8017866:	429a      	cmp	r2, r3
 8017868:	d108      	bne.n	801787c <tcp_new_port+0x5c>
        n++;
 801786a:	88bb      	ldrh	r3, [r7, #4]
 801786c:	3301      	adds	r3, #1
 801786e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8017870:	88bb      	ldrh	r3, [r7, #4]
 8017872:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017876:	d3d8      	bcc.n	801782a <tcp_new_port+0xa>
          return 0;
 8017878:	2300      	movs	r3, #0
 801787a:	e00d      	b.n	8017898 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801787c:	683b      	ldr	r3, [r7, #0]
 801787e:	68db      	ldr	r3, [r3, #12]
 8017880:	603b      	str	r3, [r7, #0]
 8017882:	683b      	ldr	r3, [r7, #0]
 8017884:	2b00      	cmp	r3, #0
 8017886:	d1ea      	bne.n	801785e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8017888:	79fb      	ldrb	r3, [r7, #7]
 801788a:	3301      	adds	r3, #1
 801788c:	71fb      	strb	r3, [r7, #7]
 801788e:	79fb      	ldrb	r3, [r7, #7]
 8017890:	2b03      	cmp	r3, #3
 8017892:	d9dd      	bls.n	8017850 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8017894:	4b03      	ldr	r3, [pc, #12]	; (80178a4 <tcp_new_port+0x84>)
 8017896:	881b      	ldrh	r3, [r3, #0]
}
 8017898:	4618      	mov	r0, r3
 801789a:	370c      	adds	r7, #12
 801789c:	46bd      	mov	sp, r7
 801789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178a2:	4770      	bx	lr
 80178a4:	20000010 	.word	0x20000010
 80178a8:	080718c0 	.word	0x080718c0

080178ac <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 80178ac:	b580      	push	{r7, lr}
 80178ae:	b08a      	sub	sp, #40	; 0x28
 80178b0:	af00      	add	r7, sp, #0
 80178b2:	60f8      	str	r0, [r7, #12]
 80178b4:	60b9      	str	r1, [r7, #8]
 80178b6:	603b      	str	r3, [r7, #0]
 80178b8:	4613      	mov	r3, r2
 80178ba:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 80178bc:	2300      	movs	r3, #0
 80178be:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80178c0:	68fb      	ldr	r3, [r7, #12]
 80178c2:	2b00      	cmp	r3, #0
 80178c4:	d109      	bne.n	80178da <tcp_connect+0x2e>
 80178c6:	4b7d      	ldr	r3, [pc, #500]	; (8017abc <tcp_connect+0x210>)
 80178c8:	f240 4235 	movw	r2, #1077	; 0x435
 80178cc:	497c      	ldr	r1, [pc, #496]	; (8017ac0 <tcp_connect+0x214>)
 80178ce:	487d      	ldr	r0, [pc, #500]	; (8017ac4 <tcp_connect+0x218>)
 80178d0:	f008 fb48 	bl	801ff64 <printf>
 80178d4:	f06f 030f 	mvn.w	r3, #15
 80178d8:	e0ec      	b.n	8017ab4 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80178da:	68bb      	ldr	r3, [r7, #8]
 80178dc:	2b00      	cmp	r3, #0
 80178de:	d109      	bne.n	80178f4 <tcp_connect+0x48>
 80178e0:	4b76      	ldr	r3, [pc, #472]	; (8017abc <tcp_connect+0x210>)
 80178e2:	f240 4236 	movw	r2, #1078	; 0x436
 80178e6:	4978      	ldr	r1, [pc, #480]	; (8017ac8 <tcp_connect+0x21c>)
 80178e8:	4876      	ldr	r0, [pc, #472]	; (8017ac4 <tcp_connect+0x218>)
 80178ea:	f008 fb3b 	bl	801ff64 <printf>
 80178ee:	f06f 030f 	mvn.w	r3, #15
 80178f2:	e0df      	b.n	8017ab4 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 80178f4:	68fb      	ldr	r3, [r7, #12]
 80178f6:	7d1b      	ldrb	r3, [r3, #20]
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	d009      	beq.n	8017910 <tcp_connect+0x64>
 80178fc:	4b6f      	ldr	r3, [pc, #444]	; (8017abc <tcp_connect+0x210>)
 80178fe:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8017902:	4972      	ldr	r1, [pc, #456]	; (8017acc <tcp_connect+0x220>)
 8017904:	486f      	ldr	r0, [pc, #444]	; (8017ac4 <tcp_connect+0x218>)
 8017906:	f008 fb2d 	bl	801ff64 <printf>
 801790a:	f06f 0309 	mvn.w	r3, #9
 801790e:	e0d1      	b.n	8017ab4 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8017910:	68bb      	ldr	r3, [r7, #8]
 8017912:	2b00      	cmp	r3, #0
 8017914:	d002      	beq.n	801791c <tcp_connect+0x70>
 8017916:	68bb      	ldr	r3, [r7, #8]
 8017918:	681b      	ldr	r3, [r3, #0]
 801791a:	e000      	b.n	801791e <tcp_connect+0x72>
 801791c:	2300      	movs	r3, #0
 801791e:	68fa      	ldr	r2, [r7, #12]
 8017920:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8017922:	68fb      	ldr	r3, [r7, #12]
 8017924:	88fa      	ldrh	r2, [r7, #6]
 8017926:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8017928:	68fb      	ldr	r3, [r7, #12]
 801792a:	7a1b      	ldrb	r3, [r3, #8]
 801792c:	2b00      	cmp	r3, #0
 801792e:	d006      	beq.n	801793e <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8017930:	68fb      	ldr	r3, [r7, #12]
 8017932:	7a1b      	ldrb	r3, [r3, #8]
 8017934:	4618      	mov	r0, r3
 8017936:	f7fe fc9f 	bl	8016278 <netif_get_by_index>
 801793a:	6278      	str	r0, [r7, #36]	; 0x24
 801793c:	e005      	b.n	801794a <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801793e:	68fb      	ldr	r3, [r7, #12]
 8017940:	3304      	adds	r3, #4
 8017942:	4618      	mov	r0, r3
 8017944:	f006 ffcc 	bl	801e8e0 <ip4_route>
 8017948:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 801794a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801794c:	2b00      	cmp	r3, #0
 801794e:	d102      	bne.n	8017956 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8017950:	f06f 0303 	mvn.w	r3, #3
 8017954:	e0ae      	b.n	8017ab4 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8017956:	68fb      	ldr	r3, [r7, #12]
 8017958:	2b00      	cmp	r3, #0
 801795a:	d003      	beq.n	8017964 <tcp_connect+0xb8>
 801795c:	68fb      	ldr	r3, [r7, #12]
 801795e:	681b      	ldr	r3, [r3, #0]
 8017960:	2b00      	cmp	r3, #0
 8017962:	d111      	bne.n	8017988 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8017964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017966:	2b00      	cmp	r3, #0
 8017968:	d002      	beq.n	8017970 <tcp_connect+0xc4>
 801796a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801796c:	3304      	adds	r3, #4
 801796e:	e000      	b.n	8017972 <tcp_connect+0xc6>
 8017970:	2300      	movs	r3, #0
 8017972:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8017974:	69fb      	ldr	r3, [r7, #28]
 8017976:	2b00      	cmp	r3, #0
 8017978:	d102      	bne.n	8017980 <tcp_connect+0xd4>
      return ERR_RTE;
 801797a:	f06f 0303 	mvn.w	r3, #3
 801797e:	e099      	b.n	8017ab4 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8017980:	69fb      	ldr	r3, [r7, #28]
 8017982:	681a      	ldr	r2, [r3, #0]
 8017984:	68fb      	ldr	r3, [r7, #12]
 8017986:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8017988:	68fb      	ldr	r3, [r7, #12]
 801798a:	8adb      	ldrh	r3, [r3, #22]
 801798c:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 801798e:	68fb      	ldr	r3, [r7, #12]
 8017990:	8adb      	ldrh	r3, [r3, #22]
 8017992:	2b00      	cmp	r3, #0
 8017994:	d10c      	bne.n	80179b0 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8017996:	f7ff ff43 	bl	8017820 <tcp_new_port>
 801799a:	4603      	mov	r3, r0
 801799c:	461a      	mov	r2, r3
 801799e:	68fb      	ldr	r3, [r7, #12]
 80179a0:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 80179a2:	68fb      	ldr	r3, [r7, #12]
 80179a4:	8adb      	ldrh	r3, [r3, #22]
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d102      	bne.n	80179b0 <tcp_connect+0x104>
      return ERR_BUF;
 80179aa:	f06f 0301 	mvn.w	r3, #1
 80179ae:	e081      	b.n	8017ab4 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 80179b0:	68f8      	ldr	r0, [r7, #12]
 80179b2:	f001 f84f 	bl	8018a54 <tcp_next_iss>
 80179b6:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 80179b8:	68fb      	ldr	r3, [r7, #12]
 80179ba:	2200      	movs	r2, #0
 80179bc:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 80179be:	68fb      	ldr	r3, [r7, #12]
 80179c0:	697a      	ldr	r2, [r7, #20]
 80179c2:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 80179c4:	697b      	ldr	r3, [r7, #20]
 80179c6:	1e5a      	subs	r2, r3, #1
 80179c8:	68fb      	ldr	r3, [r7, #12]
 80179ca:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 80179cc:	697b      	ldr	r3, [r7, #20]
 80179ce:	1e5a      	subs	r2, r3, #1
 80179d0:	68fb      	ldr	r3, [r7, #12]
 80179d2:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 80179d4:	697b      	ldr	r3, [r7, #20]
 80179d6:	1e5a      	subs	r2, r3, #1
 80179d8:	68fb      	ldr	r3, [r7, #12]
 80179da:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80179dc:	68fb      	ldr	r3, [r7, #12]
 80179de:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80179e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80179e4:	68fb      	ldr	r3, [r7, #12]
 80179e6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80179e8:	68fb      	ldr	r3, [r7, #12]
 80179ea:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80179ec:	68fb      	ldr	r3, [r7, #12]
 80179ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80179f0:	68fb      	ldr	r3, [r7, #12]
 80179f2:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 80179f4:	68fb      	ldr	r3, [r7, #12]
 80179f6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80179fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 80179fe:	68fb      	ldr	r3, [r7, #12]
 8017a00:	f44f 7206 	mov.w	r2, #536	; 0x218
 8017a04:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8017a06:	68fb      	ldr	r3, [r7, #12]
 8017a08:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8017a0a:	68fb      	ldr	r3, [r7, #12]
 8017a0c:	3304      	adds	r3, #4
 8017a0e:	461a      	mov	r2, r3
 8017a10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017a12:	f001 f845 	bl	8018aa0 <tcp_eff_send_mss_netif>
 8017a16:	4603      	mov	r3, r0
 8017a18:	461a      	mov	r2, r3
 8017a1a:	68fb      	ldr	r3, [r7, #12]
 8017a1c:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8017a1e:	68fb      	ldr	r3, [r7, #12]
 8017a20:	2201      	movs	r2, #1
 8017a22:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8017a26:	68fb      	ldr	r3, [r7, #12]
 8017a28:	683a      	ldr	r2, [r7, #0]
 8017a2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8017a2e:	2102      	movs	r1, #2
 8017a30:	68f8      	ldr	r0, [r7, #12]
 8017a32:	f004 faa9 	bl	801bf88 <tcp_enqueue_flags>
 8017a36:	4603      	mov	r3, r0
 8017a38:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8017a3a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	d136      	bne.n	8017ab0 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8017a42:	68fb      	ldr	r3, [r7, #12]
 8017a44:	2202      	movs	r2, #2
 8017a46:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8017a48:	8b7b      	ldrh	r3, [r7, #26]
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	d021      	beq.n	8017a92 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8017a4e:	4b20      	ldr	r3, [pc, #128]	; (8017ad0 <tcp_connect+0x224>)
 8017a50:	681b      	ldr	r3, [r3, #0]
 8017a52:	68fa      	ldr	r2, [r7, #12]
 8017a54:	429a      	cmp	r2, r3
 8017a56:	d105      	bne.n	8017a64 <tcp_connect+0x1b8>
 8017a58:	4b1d      	ldr	r3, [pc, #116]	; (8017ad0 <tcp_connect+0x224>)
 8017a5a:	681b      	ldr	r3, [r3, #0]
 8017a5c:	68db      	ldr	r3, [r3, #12]
 8017a5e:	4a1c      	ldr	r2, [pc, #112]	; (8017ad0 <tcp_connect+0x224>)
 8017a60:	6013      	str	r3, [r2, #0]
 8017a62:	e013      	b.n	8017a8c <tcp_connect+0x1e0>
 8017a64:	4b1a      	ldr	r3, [pc, #104]	; (8017ad0 <tcp_connect+0x224>)
 8017a66:	681b      	ldr	r3, [r3, #0]
 8017a68:	623b      	str	r3, [r7, #32]
 8017a6a:	e00c      	b.n	8017a86 <tcp_connect+0x1da>
 8017a6c:	6a3b      	ldr	r3, [r7, #32]
 8017a6e:	68db      	ldr	r3, [r3, #12]
 8017a70:	68fa      	ldr	r2, [r7, #12]
 8017a72:	429a      	cmp	r2, r3
 8017a74:	d104      	bne.n	8017a80 <tcp_connect+0x1d4>
 8017a76:	68fb      	ldr	r3, [r7, #12]
 8017a78:	68da      	ldr	r2, [r3, #12]
 8017a7a:	6a3b      	ldr	r3, [r7, #32]
 8017a7c:	60da      	str	r2, [r3, #12]
 8017a7e:	e005      	b.n	8017a8c <tcp_connect+0x1e0>
 8017a80:	6a3b      	ldr	r3, [r7, #32]
 8017a82:	68db      	ldr	r3, [r3, #12]
 8017a84:	623b      	str	r3, [r7, #32]
 8017a86:	6a3b      	ldr	r3, [r7, #32]
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	d1ef      	bne.n	8017a6c <tcp_connect+0x1c0>
 8017a8c:	68fb      	ldr	r3, [r7, #12]
 8017a8e:	2200      	movs	r2, #0
 8017a90:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8017a92:	4b10      	ldr	r3, [pc, #64]	; (8017ad4 <tcp_connect+0x228>)
 8017a94:	681a      	ldr	r2, [r3, #0]
 8017a96:	68fb      	ldr	r3, [r7, #12]
 8017a98:	60da      	str	r2, [r3, #12]
 8017a9a:	4a0e      	ldr	r2, [pc, #56]	; (8017ad4 <tcp_connect+0x228>)
 8017a9c:	68fb      	ldr	r3, [r7, #12]
 8017a9e:	6013      	str	r3, [r2, #0]
 8017aa0:	f005 fad6 	bl	801d050 <tcp_timer_needed>
 8017aa4:	4b0c      	ldr	r3, [pc, #48]	; (8017ad8 <tcp_connect+0x22c>)
 8017aa6:	2201      	movs	r2, #1
 8017aa8:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8017aaa:	68f8      	ldr	r0, [r7, #12]
 8017aac:	f004 fb5a 	bl	801c164 <tcp_output>
  }
  return ret;
 8017ab0:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8017ab4:	4618      	mov	r0, r3
 8017ab6:	3728      	adds	r7, #40	; 0x28
 8017ab8:	46bd      	mov	sp, r7
 8017aba:	bd80      	pop	{r7, pc}
 8017abc:	08027710 	.word	0x08027710
 8017ac0:	080279ec 	.word	0x080279ec
 8017ac4:	08027754 	.word	0x08027754
 8017ac8:	08027a08 	.word	0x08027a08
 8017acc:	08027a24 	.word	0x08027a24
 8017ad0:	200188a0 	.word	0x200188a0
 8017ad4:	200188a8 	.word	0x200188a8
 8017ad8:	200188b0 	.word	0x200188b0

08017adc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8017adc:	b5b0      	push	{r4, r5, r7, lr}
 8017ade:	b090      	sub	sp, #64	; 0x40
 8017ae0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8017ae2:	2300      	movs	r3, #0
 8017ae4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8017ae8:	4b94      	ldr	r3, [pc, #592]	; (8017d3c <tcp_slowtmr+0x260>)
 8017aea:	681b      	ldr	r3, [r3, #0]
 8017aec:	3301      	adds	r3, #1
 8017aee:	4a93      	ldr	r2, [pc, #588]	; (8017d3c <tcp_slowtmr+0x260>)
 8017af0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8017af2:	4b93      	ldr	r3, [pc, #588]	; (8017d40 <tcp_slowtmr+0x264>)
 8017af4:	781b      	ldrb	r3, [r3, #0]
 8017af6:	3301      	adds	r3, #1
 8017af8:	b2da      	uxtb	r2, r3
 8017afa:	4b91      	ldr	r3, [pc, #580]	; (8017d40 <tcp_slowtmr+0x264>)
 8017afc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8017afe:	2300      	movs	r3, #0
 8017b00:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8017b02:	4b90      	ldr	r3, [pc, #576]	; (8017d44 <tcp_slowtmr+0x268>)
 8017b04:	681b      	ldr	r3, [r3, #0]
 8017b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8017b08:	e29f      	b.n	801804a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8017b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b0c:	7d1b      	ldrb	r3, [r3, #20]
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	d106      	bne.n	8017b20 <tcp_slowtmr+0x44>
 8017b12:	4b8d      	ldr	r3, [pc, #564]	; (8017d48 <tcp_slowtmr+0x26c>)
 8017b14:	f240 42be 	movw	r2, #1214	; 0x4be
 8017b18:	498c      	ldr	r1, [pc, #560]	; (8017d4c <tcp_slowtmr+0x270>)
 8017b1a:	488d      	ldr	r0, [pc, #564]	; (8017d50 <tcp_slowtmr+0x274>)
 8017b1c:	f008 fa22 	bl	801ff64 <printf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8017b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b22:	7d1b      	ldrb	r3, [r3, #20]
 8017b24:	2b01      	cmp	r3, #1
 8017b26:	d106      	bne.n	8017b36 <tcp_slowtmr+0x5a>
 8017b28:	4b87      	ldr	r3, [pc, #540]	; (8017d48 <tcp_slowtmr+0x26c>)
 8017b2a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8017b2e:	4989      	ldr	r1, [pc, #548]	; (8017d54 <tcp_slowtmr+0x278>)
 8017b30:	4887      	ldr	r0, [pc, #540]	; (8017d50 <tcp_slowtmr+0x274>)
 8017b32:	f008 fa17 	bl	801ff64 <printf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8017b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b38:	7d1b      	ldrb	r3, [r3, #20]
 8017b3a:	2b0a      	cmp	r3, #10
 8017b3c:	d106      	bne.n	8017b4c <tcp_slowtmr+0x70>
 8017b3e:	4b82      	ldr	r3, [pc, #520]	; (8017d48 <tcp_slowtmr+0x26c>)
 8017b40:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8017b44:	4984      	ldr	r1, [pc, #528]	; (8017d58 <tcp_slowtmr+0x27c>)
 8017b46:	4882      	ldr	r0, [pc, #520]	; (8017d50 <tcp_slowtmr+0x274>)
 8017b48:	f008 fa0c 	bl	801ff64 <printf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8017b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b4e:	7f9a      	ldrb	r2, [r3, #30]
 8017b50:	4b7b      	ldr	r3, [pc, #492]	; (8017d40 <tcp_slowtmr+0x264>)
 8017b52:	781b      	ldrb	r3, [r3, #0]
 8017b54:	429a      	cmp	r2, r3
 8017b56:	d105      	bne.n	8017b64 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8017b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b5a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8017b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b5e:	68db      	ldr	r3, [r3, #12]
 8017b60:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8017b62:	e272      	b.n	801804a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8017b64:	4b76      	ldr	r3, [pc, #472]	; (8017d40 <tcp_slowtmr+0x264>)
 8017b66:	781a      	ldrb	r2, [r3, #0]
 8017b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b6a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8017b6c:	2300      	movs	r3, #0
 8017b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8017b72:	2300      	movs	r3, #0
 8017b74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8017b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b7a:	7d1b      	ldrb	r3, [r3, #20]
 8017b7c:	2b02      	cmp	r3, #2
 8017b7e:	d10a      	bne.n	8017b96 <tcp_slowtmr+0xba>
 8017b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017b86:	2b05      	cmp	r3, #5
 8017b88:	d905      	bls.n	8017b96 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8017b8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017b8e:	3301      	adds	r3, #1
 8017b90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017b94:	e11e      	b.n	8017dd4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8017b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017b9c:	2b0b      	cmp	r3, #11
 8017b9e:	d905      	bls.n	8017bac <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8017ba0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017ba4:	3301      	adds	r3, #1
 8017ba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017baa:	e113      	b.n	8017dd4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8017bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bae:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	d075      	beq.n	8017ca2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8017bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d006      	beq.n	8017bcc <tcp_slowtmr+0xf0>
 8017bbe:	4b62      	ldr	r3, [pc, #392]	; (8017d48 <tcp_slowtmr+0x26c>)
 8017bc0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8017bc4:	4965      	ldr	r1, [pc, #404]	; (8017d5c <tcp_slowtmr+0x280>)
 8017bc6:	4862      	ldr	r0, [pc, #392]	; (8017d50 <tcp_slowtmr+0x274>)
 8017bc8:	f008 f9cc 	bl	801ff64 <printf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8017bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	d106      	bne.n	8017be2 <tcp_slowtmr+0x106>
 8017bd4:	4b5c      	ldr	r3, [pc, #368]	; (8017d48 <tcp_slowtmr+0x26c>)
 8017bd6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8017bda:	4961      	ldr	r1, [pc, #388]	; (8017d60 <tcp_slowtmr+0x284>)
 8017bdc:	485c      	ldr	r0, [pc, #368]	; (8017d50 <tcp_slowtmr+0x274>)
 8017bde:	f008 f9c1 	bl	801ff64 <printf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8017be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017be4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8017be8:	2b0b      	cmp	r3, #11
 8017bea:	d905      	bls.n	8017bf8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8017bec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017bf0:	3301      	adds	r3, #1
 8017bf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017bf6:	e0ed      	b.n	8017dd4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8017bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bfa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8017bfe:	3b01      	subs	r3, #1
 8017c00:	4a58      	ldr	r2, [pc, #352]	; (8017d64 <tcp_slowtmr+0x288>)
 8017c02:	5cd3      	ldrb	r3, [r2, r3]
 8017c04:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8017c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c08:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8017c0c:	7c7a      	ldrb	r2, [r7, #17]
 8017c0e:	429a      	cmp	r2, r3
 8017c10:	d907      	bls.n	8017c22 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8017c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c14:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8017c18:	3301      	adds	r3, #1
 8017c1a:	b2da      	uxtb	r2, r3
 8017c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c1e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8017c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c24:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8017c28:	7c7a      	ldrb	r2, [r7, #17]
 8017c2a:	429a      	cmp	r2, r3
 8017c2c:	f200 80d2 	bhi.w	8017dd4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8017c30:	2301      	movs	r3, #1
 8017c32:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8017c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	d108      	bne.n	8017c50 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8017c3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017c40:	f005 f938 	bl	801ceb4 <tcp_zero_window_probe>
 8017c44:	4603      	mov	r3, r0
 8017c46:	2b00      	cmp	r3, #0
 8017c48:	d014      	beq.n	8017c74 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8017c4a:	2300      	movs	r3, #0
 8017c4c:	623b      	str	r3, [r7, #32]
 8017c4e:	e011      	b.n	8017c74 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8017c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017c56:	4619      	mov	r1, r3
 8017c58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017c5a:	f003 fffd 	bl	801bc58 <tcp_split_unsent_seg>
 8017c5e:	4603      	mov	r3, r0
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	d107      	bne.n	8017c74 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8017c64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017c66:	f004 fa7d 	bl	801c164 <tcp_output>
 8017c6a:	4603      	mov	r3, r0
 8017c6c:	2b00      	cmp	r3, #0
 8017c6e:	d101      	bne.n	8017c74 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8017c70:	2300      	movs	r3, #0
 8017c72:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8017c74:	6a3b      	ldr	r3, [r7, #32]
 8017c76:	2b00      	cmp	r3, #0
 8017c78:	f000 80ac 	beq.w	8017dd4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8017c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c7e:	2200      	movs	r2, #0
 8017c80:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8017c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c86:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8017c8a:	2b06      	cmp	r3, #6
 8017c8c:	f200 80a2 	bhi.w	8017dd4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8017c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c92:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8017c96:	3301      	adds	r3, #1
 8017c98:	b2da      	uxtb	r2, r3
 8017c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c9c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8017ca0:	e098      	b.n	8017dd4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8017ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ca4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	db0f      	blt.n	8017ccc <tcp_slowtmr+0x1f0>
 8017cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cae:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017cb2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017cb6:	4293      	cmp	r3, r2
 8017cb8:	d008      	beq.n	8017ccc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8017cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cbc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017cc0:	b29b      	uxth	r3, r3
 8017cc2:	3301      	adds	r3, #1
 8017cc4:	b29b      	uxth	r3, r3
 8017cc6:	b21a      	sxth	r2, r3
 8017cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cca:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8017ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cce:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8017cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cd4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8017cd8:	429a      	cmp	r2, r3
 8017cda:	db7b      	blt.n	8017dd4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8017cdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017cde:	f004 fd33 	bl	801c748 <tcp_rexmit_rto_prepare>
 8017ce2:	4603      	mov	r3, r0
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	d007      	beq.n	8017cf8 <tcp_slowtmr+0x21c>
 8017ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	d171      	bne.n	8017dd4 <tcp_slowtmr+0x2f8>
 8017cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d06d      	beq.n	8017dd4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8017cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cfa:	7d1b      	ldrb	r3, [r3, #20]
 8017cfc:	2b02      	cmp	r3, #2
 8017cfe:	d03a      	beq.n	8017d76 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8017d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017d06:	2b0c      	cmp	r3, #12
 8017d08:	bf28      	it	cs
 8017d0a:	230c      	movcs	r3, #12
 8017d0c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8017d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d10:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8017d14:	10db      	asrs	r3, r3, #3
 8017d16:	b21b      	sxth	r3, r3
 8017d18:	461a      	mov	r2, r3
 8017d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d1c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8017d20:	4413      	add	r3, r2
 8017d22:	7efa      	ldrb	r2, [r7, #27]
 8017d24:	4910      	ldr	r1, [pc, #64]	; (8017d68 <tcp_slowtmr+0x28c>)
 8017d26:	5c8a      	ldrb	r2, [r1, r2]
 8017d28:	4093      	lsls	r3, r2
 8017d2a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8017d2c:	697b      	ldr	r3, [r7, #20]
 8017d2e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8017d32:	4293      	cmp	r3, r2
 8017d34:	dc1a      	bgt.n	8017d6c <tcp_slowtmr+0x290>
 8017d36:	697b      	ldr	r3, [r7, #20]
 8017d38:	b21a      	sxth	r2, r3
 8017d3a:	e019      	b.n	8017d70 <tcp_slowtmr+0x294>
 8017d3c:	2001889c 	.word	0x2001889c
 8017d40:	200188b2 	.word	0x200188b2
 8017d44:	200188a8 	.word	0x200188a8
 8017d48:	08027710 	.word	0x08027710
 8017d4c:	08027a54 	.word	0x08027a54
 8017d50:	08027754 	.word	0x08027754
 8017d54:	08027a80 	.word	0x08027a80
 8017d58:	08027aac 	.word	0x08027aac
 8017d5c:	08027adc 	.word	0x08027adc
 8017d60:	08027b10 	.word	0x08027b10
 8017d64:	080718b8 	.word	0x080718b8
 8017d68:	080718a8 	.word	0x080718a8
 8017d6c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8017d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d78:	2200      	movs	r2, #0
 8017d7a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8017d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d7e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d84:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017d88:	4293      	cmp	r3, r2
 8017d8a:	bf28      	it	cs
 8017d8c:	4613      	movcs	r3, r2
 8017d8e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8017d90:	8a7b      	ldrh	r3, [r7, #18]
 8017d92:	085b      	lsrs	r3, r3, #1
 8017d94:	b29a      	uxth	r2, r3
 8017d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d98:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8017d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d9e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8017da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017da4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017da6:	005b      	lsls	r3, r3, #1
 8017da8:	b29b      	uxth	r3, r3
 8017daa:	429a      	cmp	r2, r3
 8017dac:	d206      	bcs.n	8017dbc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8017dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017db0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017db2:	005b      	lsls	r3, r3, #1
 8017db4:	b29a      	uxth	r2, r3
 8017db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017db8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8017dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dbe:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8017dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dc2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8017dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dc8:	2200      	movs	r2, #0
 8017dca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8017dce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017dd0:	f004 fd2a 	bl	801c828 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8017dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dd6:	7d1b      	ldrb	r3, [r3, #20]
 8017dd8:	2b06      	cmp	r3, #6
 8017dda:	d111      	bne.n	8017e00 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8017ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dde:	8b5b      	ldrh	r3, [r3, #26]
 8017de0:	f003 0310 	and.w	r3, r3, #16
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	d00b      	beq.n	8017e00 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017de8:	4b9d      	ldr	r3, [pc, #628]	; (8018060 <tcp_slowtmr+0x584>)
 8017dea:	681a      	ldr	r2, [r3, #0]
 8017dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dee:	6a1b      	ldr	r3, [r3, #32]
 8017df0:	1ad3      	subs	r3, r2, r3
 8017df2:	2b28      	cmp	r3, #40	; 0x28
 8017df4:	d904      	bls.n	8017e00 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8017df6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017dfa:	3301      	adds	r3, #1
 8017dfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8017e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e02:	7a5b      	ldrb	r3, [r3, #9]
 8017e04:	f003 0308 	and.w	r3, r3, #8
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	d04c      	beq.n	8017ea6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8017e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e0e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8017e10:	2b04      	cmp	r3, #4
 8017e12:	d003      	beq.n	8017e1c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8017e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e16:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8017e18:	2b07      	cmp	r3, #7
 8017e1a:	d144      	bne.n	8017ea6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017e1c:	4b90      	ldr	r3, [pc, #576]	; (8018060 <tcp_slowtmr+0x584>)
 8017e1e:	681a      	ldr	r2, [r3, #0]
 8017e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e22:	6a1b      	ldr	r3, [r3, #32]
 8017e24:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8017e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017e2c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8017e30:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8017e34:	498b      	ldr	r1, [pc, #556]	; (8018064 <tcp_slowtmr+0x588>)
 8017e36:	fba1 1303 	umull	r1, r3, r1, r3
 8017e3a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017e3c:	429a      	cmp	r2, r3
 8017e3e:	d90a      	bls.n	8017e56 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8017e40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017e44:	3301      	adds	r3, #1
 8017e46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8017e4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017e4e:	3301      	adds	r3, #1
 8017e50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017e54:	e027      	b.n	8017ea6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017e56:	4b82      	ldr	r3, [pc, #520]	; (8018060 <tcp_slowtmr+0x584>)
 8017e58:	681a      	ldr	r2, [r3, #0]
 8017e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e5c:	6a1b      	ldr	r3, [r3, #32]
 8017e5e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8017e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e62:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8017e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e68:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8017e6c:	4618      	mov	r0, r3
 8017e6e:	4b7e      	ldr	r3, [pc, #504]	; (8018068 <tcp_slowtmr+0x58c>)
 8017e70:	fb00 f303 	mul.w	r3, r0, r3
 8017e74:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8017e76:	497b      	ldr	r1, [pc, #492]	; (8018064 <tcp_slowtmr+0x588>)
 8017e78:	fba1 1303 	umull	r1, r3, r1, r3
 8017e7c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017e7e:	429a      	cmp	r2, r3
 8017e80:	d911      	bls.n	8017ea6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8017e82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017e84:	f004 ffd6 	bl	801ce34 <tcp_keepalive>
 8017e88:	4603      	mov	r3, r0
 8017e8a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8017e8e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	d107      	bne.n	8017ea6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8017e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e98:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8017e9c:	3301      	adds	r3, #1
 8017e9e:	b2da      	uxtb	r2, r3
 8017ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ea2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8017ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	d011      	beq.n	8017ed2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8017eae:	4b6c      	ldr	r3, [pc, #432]	; (8018060 <tcp_slowtmr+0x584>)
 8017eb0:	681a      	ldr	r2, [r3, #0]
 8017eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eb4:	6a1b      	ldr	r3, [r3, #32]
 8017eb6:	1ad2      	subs	r2, r2, r3
 8017eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eba:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8017ebe:	4619      	mov	r1, r3
 8017ec0:	460b      	mov	r3, r1
 8017ec2:	005b      	lsls	r3, r3, #1
 8017ec4:	440b      	add	r3, r1
 8017ec6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8017ec8:	429a      	cmp	r2, r3
 8017eca:	d302      	bcc.n	8017ed2 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8017ecc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017ece:	f000 fe91 	bl	8018bf4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8017ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ed4:	7d1b      	ldrb	r3, [r3, #20]
 8017ed6:	2b03      	cmp	r3, #3
 8017ed8:	d10b      	bne.n	8017ef2 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017eda:	4b61      	ldr	r3, [pc, #388]	; (8018060 <tcp_slowtmr+0x584>)
 8017edc:	681a      	ldr	r2, [r3, #0]
 8017ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ee0:	6a1b      	ldr	r3, [r3, #32]
 8017ee2:	1ad3      	subs	r3, r2, r3
 8017ee4:	2b28      	cmp	r3, #40	; 0x28
 8017ee6:	d904      	bls.n	8017ef2 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8017ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017eec:	3301      	adds	r3, #1
 8017eee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8017ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ef4:	7d1b      	ldrb	r3, [r3, #20]
 8017ef6:	2b09      	cmp	r3, #9
 8017ef8:	d10b      	bne.n	8017f12 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8017efa:	4b59      	ldr	r3, [pc, #356]	; (8018060 <tcp_slowtmr+0x584>)
 8017efc:	681a      	ldr	r2, [r3, #0]
 8017efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f00:	6a1b      	ldr	r3, [r3, #32]
 8017f02:	1ad3      	subs	r3, r2, r3
 8017f04:	2bf0      	cmp	r3, #240	; 0xf0
 8017f06:	d904      	bls.n	8017f12 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8017f08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017f0c:	3301      	adds	r3, #1
 8017f0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8017f12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017f16:	2b00      	cmp	r3, #0
 8017f18:	d060      	beq.n	8017fdc <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8017f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017f20:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8017f22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017f24:	f000 fcb2 	bl	801888c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8017f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	d010      	beq.n	8017f50 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8017f2e:	4b4f      	ldr	r3, [pc, #316]	; (801806c <tcp_slowtmr+0x590>)
 8017f30:	681b      	ldr	r3, [r3, #0]
 8017f32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f34:	429a      	cmp	r2, r3
 8017f36:	d106      	bne.n	8017f46 <tcp_slowtmr+0x46a>
 8017f38:	4b4d      	ldr	r3, [pc, #308]	; (8018070 <tcp_slowtmr+0x594>)
 8017f3a:	f240 526d 	movw	r2, #1389	; 0x56d
 8017f3e:	494d      	ldr	r1, [pc, #308]	; (8018074 <tcp_slowtmr+0x598>)
 8017f40:	484d      	ldr	r0, [pc, #308]	; (8018078 <tcp_slowtmr+0x59c>)
 8017f42:	f008 f80f 	bl	801ff64 <printf>
        prev->next = pcb->next;
 8017f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f48:	68da      	ldr	r2, [r3, #12]
 8017f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f4c:	60da      	str	r2, [r3, #12]
 8017f4e:	e00f      	b.n	8017f70 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8017f50:	4b46      	ldr	r3, [pc, #280]	; (801806c <tcp_slowtmr+0x590>)
 8017f52:	681b      	ldr	r3, [r3, #0]
 8017f54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f56:	429a      	cmp	r2, r3
 8017f58:	d006      	beq.n	8017f68 <tcp_slowtmr+0x48c>
 8017f5a:	4b45      	ldr	r3, [pc, #276]	; (8018070 <tcp_slowtmr+0x594>)
 8017f5c:	f240 5271 	movw	r2, #1393	; 0x571
 8017f60:	4946      	ldr	r1, [pc, #280]	; (801807c <tcp_slowtmr+0x5a0>)
 8017f62:	4845      	ldr	r0, [pc, #276]	; (8018078 <tcp_slowtmr+0x59c>)
 8017f64:	f007 fffe 	bl	801ff64 <printf>
        tcp_active_pcbs = pcb->next;
 8017f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f6a:	68db      	ldr	r3, [r3, #12]
 8017f6c:	4a3f      	ldr	r2, [pc, #252]	; (801806c <tcp_slowtmr+0x590>)
 8017f6e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8017f70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017f74:	2b00      	cmp	r3, #0
 8017f76:	d013      	beq.n	8017fa0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8017f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f7a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8017f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f7e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8017f80:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8017f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f84:	3304      	adds	r3, #4
 8017f86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f88:	8ad2      	ldrh	r2, [r2, #22]
 8017f8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017f8c:	8b09      	ldrh	r1, [r1, #24]
 8017f8e:	9102      	str	r1, [sp, #8]
 8017f90:	9201      	str	r2, [sp, #4]
 8017f92:	9300      	str	r3, [sp, #0]
 8017f94:	462b      	mov	r3, r5
 8017f96:	4622      	mov	r2, r4
 8017f98:	4601      	mov	r1, r0
 8017f9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017f9c:	f004 fe96 	bl	801cccc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8017fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fa2:	691b      	ldr	r3, [r3, #16]
 8017fa4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8017fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fa8:	7d1b      	ldrb	r3, [r3, #20]
 8017faa:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8017fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fae:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8017fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fb2:	68db      	ldr	r3, [r3, #12]
 8017fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8017fb6:	6838      	ldr	r0, [r7, #0]
 8017fb8:	f7fe fffc 	bl	8016fb4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8017fbc:	4b30      	ldr	r3, [pc, #192]	; (8018080 <tcp_slowtmr+0x5a4>)
 8017fbe:	2200      	movs	r2, #0
 8017fc0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8017fc2:	68fb      	ldr	r3, [r7, #12]
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d004      	beq.n	8017fd2 <tcp_slowtmr+0x4f6>
 8017fc8:	68fb      	ldr	r3, [r7, #12]
 8017fca:	f06f 010c 	mvn.w	r1, #12
 8017fce:	68b8      	ldr	r0, [r7, #8]
 8017fd0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8017fd2:	4b2b      	ldr	r3, [pc, #172]	; (8018080 <tcp_slowtmr+0x5a4>)
 8017fd4:	781b      	ldrb	r3, [r3, #0]
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	d037      	beq.n	801804a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8017fda:	e590      	b.n	8017afe <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8017fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fde:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8017fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fe2:	68db      	ldr	r3, [r3, #12]
 8017fe4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8017fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fe8:	7f1b      	ldrb	r3, [r3, #28]
 8017fea:	3301      	adds	r3, #1
 8017fec:	b2da      	uxtb	r2, r3
 8017fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ff0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8017ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ff4:	7f1a      	ldrb	r2, [r3, #28]
 8017ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ff8:	7f5b      	ldrb	r3, [r3, #29]
 8017ffa:	429a      	cmp	r2, r3
 8017ffc:	d325      	bcc.n	801804a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8017ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018000:	2200      	movs	r2, #0
 8018002:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8018004:	4b1e      	ldr	r3, [pc, #120]	; (8018080 <tcp_slowtmr+0x5a4>)
 8018006:	2200      	movs	r2, #0
 8018008:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801800a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801800c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018010:	2b00      	cmp	r3, #0
 8018012:	d00b      	beq.n	801802c <tcp_slowtmr+0x550>
 8018014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018016:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801801a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801801c:	6912      	ldr	r2, [r2, #16]
 801801e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018020:	4610      	mov	r0, r2
 8018022:	4798      	blx	r3
 8018024:	4603      	mov	r3, r0
 8018026:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801802a:	e002      	b.n	8018032 <tcp_slowtmr+0x556>
 801802c:	2300      	movs	r3, #0
 801802e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8018032:	4b13      	ldr	r3, [pc, #76]	; (8018080 <tcp_slowtmr+0x5a4>)
 8018034:	781b      	ldrb	r3, [r3, #0]
 8018036:	2b00      	cmp	r3, #0
 8018038:	d000      	beq.n	801803c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 801803a:	e560      	b.n	8017afe <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801803c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8018040:	2b00      	cmp	r3, #0
 8018042:	d102      	bne.n	801804a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8018044:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018046:	f004 f88d 	bl	801c164 <tcp_output>
  while (pcb != NULL) {
 801804a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801804c:	2b00      	cmp	r3, #0
 801804e:	f47f ad5c 	bne.w	8017b0a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8018052:	2300      	movs	r3, #0
 8018054:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8018056:	4b0b      	ldr	r3, [pc, #44]	; (8018084 <tcp_slowtmr+0x5a8>)
 8018058:	681b      	ldr	r3, [r3, #0]
 801805a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801805c:	e067      	b.n	801812e <tcp_slowtmr+0x652>
 801805e:	bf00      	nop
 8018060:	2001889c 	.word	0x2001889c
 8018064:	10624dd3 	.word	0x10624dd3
 8018068:	000124f8 	.word	0x000124f8
 801806c:	200188a8 	.word	0x200188a8
 8018070:	08027710 	.word	0x08027710
 8018074:	08027b48 	.word	0x08027b48
 8018078:	08027754 	.word	0x08027754
 801807c:	08027b74 	.word	0x08027b74
 8018080:	200188b0 	.word	0x200188b0
 8018084:	200188ac 	.word	0x200188ac
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8018088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801808a:	7d1b      	ldrb	r3, [r3, #20]
 801808c:	2b0a      	cmp	r3, #10
 801808e:	d006      	beq.n	801809e <tcp_slowtmr+0x5c2>
 8018090:	4b2b      	ldr	r3, [pc, #172]	; (8018140 <tcp_slowtmr+0x664>)
 8018092:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8018096:	492b      	ldr	r1, [pc, #172]	; (8018144 <tcp_slowtmr+0x668>)
 8018098:	482b      	ldr	r0, [pc, #172]	; (8018148 <tcp_slowtmr+0x66c>)
 801809a:	f007 ff63 	bl	801ff64 <printf>
    pcb_remove = 0;
 801809e:	2300      	movs	r3, #0
 80180a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80180a4:	4b29      	ldr	r3, [pc, #164]	; (801814c <tcp_slowtmr+0x670>)
 80180a6:	681a      	ldr	r2, [r3, #0]
 80180a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180aa:	6a1b      	ldr	r3, [r3, #32]
 80180ac:	1ad3      	subs	r3, r2, r3
 80180ae:	2bf0      	cmp	r3, #240	; 0xf0
 80180b0:	d904      	bls.n	80180bc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80180b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80180b6:	3301      	adds	r3, #1
 80180b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80180bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d02f      	beq.n	8018124 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80180c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80180c6:	f000 fbe1 	bl	801888c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80180ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	d010      	beq.n	80180f2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80180d0:	4b1f      	ldr	r3, [pc, #124]	; (8018150 <tcp_slowtmr+0x674>)
 80180d2:	681b      	ldr	r3, [r3, #0]
 80180d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80180d6:	429a      	cmp	r2, r3
 80180d8:	d106      	bne.n	80180e8 <tcp_slowtmr+0x60c>
 80180da:	4b19      	ldr	r3, [pc, #100]	; (8018140 <tcp_slowtmr+0x664>)
 80180dc:	f240 52af 	movw	r2, #1455	; 0x5af
 80180e0:	491c      	ldr	r1, [pc, #112]	; (8018154 <tcp_slowtmr+0x678>)
 80180e2:	4819      	ldr	r0, [pc, #100]	; (8018148 <tcp_slowtmr+0x66c>)
 80180e4:	f007 ff3e 	bl	801ff64 <printf>
        prev->next = pcb->next;
 80180e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180ea:	68da      	ldr	r2, [r3, #12]
 80180ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180ee:	60da      	str	r2, [r3, #12]
 80180f0:	e00f      	b.n	8018112 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80180f2:	4b17      	ldr	r3, [pc, #92]	; (8018150 <tcp_slowtmr+0x674>)
 80180f4:	681b      	ldr	r3, [r3, #0]
 80180f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80180f8:	429a      	cmp	r2, r3
 80180fa:	d006      	beq.n	801810a <tcp_slowtmr+0x62e>
 80180fc:	4b10      	ldr	r3, [pc, #64]	; (8018140 <tcp_slowtmr+0x664>)
 80180fe:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8018102:	4915      	ldr	r1, [pc, #84]	; (8018158 <tcp_slowtmr+0x67c>)
 8018104:	4810      	ldr	r0, [pc, #64]	; (8018148 <tcp_slowtmr+0x66c>)
 8018106:	f007 ff2d 	bl	801ff64 <printf>
        tcp_tw_pcbs = pcb->next;
 801810a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801810c:	68db      	ldr	r3, [r3, #12]
 801810e:	4a10      	ldr	r2, [pc, #64]	; (8018150 <tcp_slowtmr+0x674>)
 8018110:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8018112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018114:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8018116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018118:	68db      	ldr	r3, [r3, #12]
 801811a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801811c:	69f8      	ldr	r0, [r7, #28]
 801811e:	f7fe ff49 	bl	8016fb4 <tcp_free>
 8018122:	e004      	b.n	801812e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8018124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018126:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8018128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801812a:	68db      	ldr	r3, [r3, #12]
 801812c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801812e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018130:	2b00      	cmp	r3, #0
 8018132:	d1a9      	bne.n	8018088 <tcp_slowtmr+0x5ac>
    }
  }
}
 8018134:	bf00      	nop
 8018136:	bf00      	nop
 8018138:	3730      	adds	r7, #48	; 0x30
 801813a:	46bd      	mov	sp, r7
 801813c:	bdb0      	pop	{r4, r5, r7, pc}
 801813e:	bf00      	nop
 8018140:	08027710 	.word	0x08027710
 8018144:	08027ba0 	.word	0x08027ba0
 8018148:	08027754 	.word	0x08027754
 801814c:	2001889c 	.word	0x2001889c
 8018150:	200188ac 	.word	0x200188ac
 8018154:	08027bd0 	.word	0x08027bd0
 8018158:	08027bf8 	.word	0x08027bf8

0801815c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801815c:	b580      	push	{r7, lr}
 801815e:	b082      	sub	sp, #8
 8018160:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8018162:	4b2d      	ldr	r3, [pc, #180]	; (8018218 <tcp_fasttmr+0xbc>)
 8018164:	781b      	ldrb	r3, [r3, #0]
 8018166:	3301      	adds	r3, #1
 8018168:	b2da      	uxtb	r2, r3
 801816a:	4b2b      	ldr	r3, [pc, #172]	; (8018218 <tcp_fasttmr+0xbc>)
 801816c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801816e:	4b2b      	ldr	r3, [pc, #172]	; (801821c <tcp_fasttmr+0xc0>)
 8018170:	681b      	ldr	r3, [r3, #0]
 8018172:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8018174:	e048      	b.n	8018208 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	7f9a      	ldrb	r2, [r3, #30]
 801817a:	4b27      	ldr	r3, [pc, #156]	; (8018218 <tcp_fasttmr+0xbc>)
 801817c:	781b      	ldrb	r3, [r3, #0]
 801817e:	429a      	cmp	r2, r3
 8018180:	d03f      	beq.n	8018202 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8018182:	4b25      	ldr	r3, [pc, #148]	; (8018218 <tcp_fasttmr+0xbc>)
 8018184:	781a      	ldrb	r2, [r3, #0]
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	8b5b      	ldrh	r3, [r3, #26]
 801818e:	f003 0301 	and.w	r3, r3, #1
 8018192:	2b00      	cmp	r3, #0
 8018194:	d010      	beq.n	80181b8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	8b5b      	ldrh	r3, [r3, #26]
 801819a:	f043 0302 	orr.w	r3, r3, #2
 801819e:	b29a      	uxth	r2, r3
 80181a0:	687b      	ldr	r3, [r7, #4]
 80181a2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80181a4:	6878      	ldr	r0, [r7, #4]
 80181a6:	f003 ffdd 	bl	801c164 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	8b5b      	ldrh	r3, [r3, #26]
 80181ae:	f023 0303 	bic.w	r3, r3, #3
 80181b2:	b29a      	uxth	r2, r3
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	8b5b      	ldrh	r3, [r3, #26]
 80181bc:	f003 0308 	and.w	r3, r3, #8
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d009      	beq.n	80181d8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80181c4:	687b      	ldr	r3, [r7, #4]
 80181c6:	8b5b      	ldrh	r3, [r3, #26]
 80181c8:	f023 0308 	bic.w	r3, r3, #8
 80181cc:	b29a      	uxth	r2, r3
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80181d2:	6878      	ldr	r0, [r7, #4]
 80181d4:	f7ff f882 	bl	80172dc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	68db      	ldr	r3, [r3, #12]
 80181dc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80181e2:	2b00      	cmp	r3, #0
 80181e4:	d00a      	beq.n	80181fc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80181e6:	4b0e      	ldr	r3, [pc, #56]	; (8018220 <tcp_fasttmr+0xc4>)
 80181e8:	2200      	movs	r2, #0
 80181ea:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80181ec:	6878      	ldr	r0, [r7, #4]
 80181ee:	f000 f819 	bl	8018224 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80181f2:	4b0b      	ldr	r3, [pc, #44]	; (8018220 <tcp_fasttmr+0xc4>)
 80181f4:	781b      	ldrb	r3, [r3, #0]
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d000      	beq.n	80181fc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80181fa:	e7b8      	b.n	801816e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80181fc:	683b      	ldr	r3, [r7, #0]
 80181fe:	607b      	str	r3, [r7, #4]
 8018200:	e002      	b.n	8018208 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	68db      	ldr	r3, [r3, #12]
 8018206:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8018208:	687b      	ldr	r3, [r7, #4]
 801820a:	2b00      	cmp	r3, #0
 801820c:	d1b3      	bne.n	8018176 <tcp_fasttmr+0x1a>
    }
  }
}
 801820e:	bf00      	nop
 8018210:	bf00      	nop
 8018212:	3708      	adds	r7, #8
 8018214:	46bd      	mov	sp, r7
 8018216:	bd80      	pop	{r7, pc}
 8018218:	200188b2 	.word	0x200188b2
 801821c:	200188a8 	.word	0x200188a8
 8018220:	200188b0 	.word	0x200188b0

08018224 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8018224:	b590      	push	{r4, r7, lr}
 8018226:	b085      	sub	sp, #20
 8018228:	af00      	add	r7, sp, #0
 801822a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801822c:	687b      	ldr	r3, [r7, #4]
 801822e:	2b00      	cmp	r3, #0
 8018230:	d109      	bne.n	8018246 <tcp_process_refused_data+0x22>
 8018232:	4b37      	ldr	r3, [pc, #220]	; (8018310 <tcp_process_refused_data+0xec>)
 8018234:	f240 6209 	movw	r2, #1545	; 0x609
 8018238:	4936      	ldr	r1, [pc, #216]	; (8018314 <tcp_process_refused_data+0xf0>)
 801823a:	4837      	ldr	r0, [pc, #220]	; (8018318 <tcp_process_refused_data+0xf4>)
 801823c:	f007 fe92 	bl	801ff64 <printf>
 8018240:	f06f 030f 	mvn.w	r3, #15
 8018244:	e060      	b.n	8018308 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801824a:	7b5b      	ldrb	r3, [r3, #13]
 801824c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018252:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	2200      	movs	r2, #0
 8018258:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018260:	2b00      	cmp	r3, #0
 8018262:	d00b      	beq.n	801827c <tcp_process_refused_data+0x58>
 8018264:	687b      	ldr	r3, [r7, #4]
 8018266:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	6918      	ldr	r0, [r3, #16]
 801826e:	2300      	movs	r3, #0
 8018270:	68ba      	ldr	r2, [r7, #8]
 8018272:	6879      	ldr	r1, [r7, #4]
 8018274:	47a0      	blx	r4
 8018276:	4603      	mov	r3, r0
 8018278:	73fb      	strb	r3, [r7, #15]
 801827a:	e007      	b.n	801828c <tcp_process_refused_data+0x68>
 801827c:	2300      	movs	r3, #0
 801827e:	68ba      	ldr	r2, [r7, #8]
 8018280:	6879      	ldr	r1, [r7, #4]
 8018282:	2000      	movs	r0, #0
 8018284:	f000 f8a4 	bl	80183d0 <tcp_recv_null>
 8018288:	4603      	mov	r3, r0
 801828a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801828c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018290:	2b00      	cmp	r3, #0
 8018292:	d12a      	bne.n	80182ea <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8018294:	7bbb      	ldrb	r3, [r7, #14]
 8018296:	f003 0320 	and.w	r3, r3, #32
 801829a:	2b00      	cmp	r3, #0
 801829c:	d033      	beq.n	8018306 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801829e:	687b      	ldr	r3, [r7, #4]
 80182a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80182a2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80182a6:	d005      	beq.n	80182b4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80182ac:	3301      	adds	r3, #1
 80182ae:	b29a      	uxth	r2, r3
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80182b4:	687b      	ldr	r3, [r7, #4]
 80182b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80182ba:	2b00      	cmp	r3, #0
 80182bc:	d00b      	beq.n	80182d6 <tcp_process_refused_data+0xb2>
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	6918      	ldr	r0, [r3, #16]
 80182c8:	2300      	movs	r3, #0
 80182ca:	2200      	movs	r2, #0
 80182cc:	6879      	ldr	r1, [r7, #4]
 80182ce:	47a0      	blx	r4
 80182d0:	4603      	mov	r3, r0
 80182d2:	73fb      	strb	r3, [r7, #15]
 80182d4:	e001      	b.n	80182da <tcp_process_refused_data+0xb6>
 80182d6:	2300      	movs	r3, #0
 80182d8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80182da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80182de:	f113 0f0d 	cmn.w	r3, #13
 80182e2:	d110      	bne.n	8018306 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80182e4:	f06f 030c 	mvn.w	r3, #12
 80182e8:	e00e      	b.n	8018308 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80182ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80182ee:	f113 0f0d 	cmn.w	r3, #13
 80182f2:	d102      	bne.n	80182fa <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80182f4:	f06f 030c 	mvn.w	r3, #12
 80182f8:	e006      	b.n	8018308 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	68ba      	ldr	r2, [r7, #8]
 80182fe:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8018300:	f06f 0304 	mvn.w	r3, #4
 8018304:	e000      	b.n	8018308 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8018306:	2300      	movs	r3, #0
}
 8018308:	4618      	mov	r0, r3
 801830a:	3714      	adds	r7, #20
 801830c:	46bd      	mov	sp, r7
 801830e:	bd90      	pop	{r4, r7, pc}
 8018310:	08027710 	.word	0x08027710
 8018314:	08027c20 	.word	0x08027c20
 8018318:	08027754 	.word	0x08027754

0801831c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801831c:	b580      	push	{r7, lr}
 801831e:	b084      	sub	sp, #16
 8018320:	af00      	add	r7, sp, #0
 8018322:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8018324:	e007      	b.n	8018336 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	681b      	ldr	r3, [r3, #0]
 801832a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801832c:	6878      	ldr	r0, [r7, #4]
 801832e:	f000 f80a 	bl	8018346 <tcp_seg_free>
    seg = next;
 8018332:	68fb      	ldr	r3, [r7, #12]
 8018334:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	2b00      	cmp	r3, #0
 801833a:	d1f4      	bne.n	8018326 <tcp_segs_free+0xa>
  }
}
 801833c:	bf00      	nop
 801833e:	bf00      	nop
 8018340:	3710      	adds	r7, #16
 8018342:	46bd      	mov	sp, r7
 8018344:	bd80      	pop	{r7, pc}

08018346 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8018346:	b580      	push	{r7, lr}
 8018348:	b082      	sub	sp, #8
 801834a:	af00      	add	r7, sp, #0
 801834c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	2b00      	cmp	r3, #0
 8018352:	d00c      	beq.n	801836e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	685b      	ldr	r3, [r3, #4]
 8018358:	2b00      	cmp	r3, #0
 801835a:	d004      	beq.n	8018366 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	685b      	ldr	r3, [r3, #4]
 8018360:	4618      	mov	r0, r3
 8018362:	f7fe fb17 	bl	8016994 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8018366:	6879      	ldr	r1, [r7, #4]
 8018368:	2003      	movs	r0, #3
 801836a:	f7fd fc53 	bl	8015c14 <memp_free>
  }
}
 801836e:	bf00      	nop
 8018370:	3708      	adds	r7, #8
 8018372:	46bd      	mov	sp, r7
 8018374:	bd80      	pop	{r7, pc}
	...

08018378 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8018378:	b580      	push	{r7, lr}
 801837a:	b084      	sub	sp, #16
 801837c:	af00      	add	r7, sp, #0
 801837e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	2b00      	cmp	r3, #0
 8018384:	d106      	bne.n	8018394 <tcp_seg_copy+0x1c>
 8018386:	4b0f      	ldr	r3, [pc, #60]	; (80183c4 <tcp_seg_copy+0x4c>)
 8018388:	f240 6282 	movw	r2, #1666	; 0x682
 801838c:	490e      	ldr	r1, [pc, #56]	; (80183c8 <tcp_seg_copy+0x50>)
 801838e:	480f      	ldr	r0, [pc, #60]	; (80183cc <tcp_seg_copy+0x54>)
 8018390:	f007 fde8 	bl	801ff64 <printf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8018394:	2003      	movs	r0, #3
 8018396:	f7fd fbeb 	bl	8015b70 <memp_malloc>
 801839a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801839c:	68fb      	ldr	r3, [r7, #12]
 801839e:	2b00      	cmp	r3, #0
 80183a0:	d101      	bne.n	80183a6 <tcp_seg_copy+0x2e>
    return NULL;
 80183a2:	2300      	movs	r3, #0
 80183a4:	e00a      	b.n	80183bc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80183a6:	2210      	movs	r2, #16
 80183a8:	6879      	ldr	r1, [r7, #4]
 80183aa:	68f8      	ldr	r0, [r7, #12]
 80183ac:	f007 fdaa 	bl	801ff04 <memcpy>
  pbuf_ref(cseg->p);
 80183b0:	68fb      	ldr	r3, [r7, #12]
 80183b2:	685b      	ldr	r3, [r3, #4]
 80183b4:	4618      	mov	r0, r3
 80183b6:	f7fe fb93 	bl	8016ae0 <pbuf_ref>
  return cseg;
 80183ba:	68fb      	ldr	r3, [r7, #12]
}
 80183bc:	4618      	mov	r0, r3
 80183be:	3710      	adds	r7, #16
 80183c0:	46bd      	mov	sp, r7
 80183c2:	bd80      	pop	{r7, pc}
 80183c4:	08027710 	.word	0x08027710
 80183c8:	08027c64 	.word	0x08027c64
 80183cc:	08027754 	.word	0x08027754

080183d0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80183d0:	b580      	push	{r7, lr}
 80183d2:	b084      	sub	sp, #16
 80183d4:	af00      	add	r7, sp, #0
 80183d6:	60f8      	str	r0, [r7, #12]
 80183d8:	60b9      	str	r1, [r7, #8]
 80183da:	607a      	str	r2, [r7, #4]
 80183dc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80183de:	68bb      	ldr	r3, [r7, #8]
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	d109      	bne.n	80183f8 <tcp_recv_null+0x28>
 80183e4:	4b12      	ldr	r3, [pc, #72]	; (8018430 <tcp_recv_null+0x60>)
 80183e6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80183ea:	4912      	ldr	r1, [pc, #72]	; (8018434 <tcp_recv_null+0x64>)
 80183ec:	4812      	ldr	r0, [pc, #72]	; (8018438 <tcp_recv_null+0x68>)
 80183ee:	f007 fdb9 	bl	801ff64 <printf>
 80183f2:	f06f 030f 	mvn.w	r3, #15
 80183f6:	e016      	b.n	8018426 <tcp_recv_null+0x56>

  if (p != NULL) {
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	2b00      	cmp	r3, #0
 80183fc:	d009      	beq.n	8018412 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	891b      	ldrh	r3, [r3, #8]
 8018402:	4619      	mov	r1, r3
 8018404:	68b8      	ldr	r0, [r7, #8]
 8018406:	f7ff f9bb 	bl	8017780 <tcp_recved>
    pbuf_free(p);
 801840a:	6878      	ldr	r0, [r7, #4]
 801840c:	f7fe fac2 	bl	8016994 <pbuf_free>
 8018410:	e008      	b.n	8018424 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8018412:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018416:	2b00      	cmp	r3, #0
 8018418:	d104      	bne.n	8018424 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801841a:	68b8      	ldr	r0, [r7, #8]
 801841c:	f7fe ffc8 	bl	80173b0 <tcp_close>
 8018420:	4603      	mov	r3, r0
 8018422:	e000      	b.n	8018426 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8018424:	2300      	movs	r3, #0
}
 8018426:	4618      	mov	r0, r3
 8018428:	3710      	adds	r7, #16
 801842a:	46bd      	mov	sp, r7
 801842c:	bd80      	pop	{r7, pc}
 801842e:	bf00      	nop
 8018430:	08027710 	.word	0x08027710
 8018434:	08027c80 	.word	0x08027c80
 8018438:	08027754 	.word	0x08027754

0801843c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801843c:	b580      	push	{r7, lr}
 801843e:	b086      	sub	sp, #24
 8018440:	af00      	add	r7, sp, #0
 8018442:	4603      	mov	r3, r0
 8018444:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8018446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801844a:	2b00      	cmp	r3, #0
 801844c:	db01      	blt.n	8018452 <tcp_kill_prio+0x16>
 801844e:	79fb      	ldrb	r3, [r7, #7]
 8018450:	e000      	b.n	8018454 <tcp_kill_prio+0x18>
 8018452:	237f      	movs	r3, #127	; 0x7f
 8018454:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8018456:	7afb      	ldrb	r3, [r7, #11]
 8018458:	2b00      	cmp	r3, #0
 801845a:	d034      	beq.n	80184c6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801845c:	7afb      	ldrb	r3, [r7, #11]
 801845e:	3b01      	subs	r3, #1
 8018460:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8018462:	2300      	movs	r3, #0
 8018464:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8018466:	2300      	movs	r3, #0
 8018468:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801846a:	4b19      	ldr	r3, [pc, #100]	; (80184d0 <tcp_kill_prio+0x94>)
 801846c:	681b      	ldr	r3, [r3, #0]
 801846e:	617b      	str	r3, [r7, #20]
 8018470:	e01f      	b.n	80184b2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8018472:	697b      	ldr	r3, [r7, #20]
 8018474:	7d5b      	ldrb	r3, [r3, #21]
 8018476:	7afa      	ldrb	r2, [r7, #11]
 8018478:	429a      	cmp	r2, r3
 801847a:	d80c      	bhi.n	8018496 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801847c:	697b      	ldr	r3, [r7, #20]
 801847e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8018480:	7afa      	ldrb	r2, [r7, #11]
 8018482:	429a      	cmp	r2, r3
 8018484:	d112      	bne.n	80184ac <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8018486:	4b13      	ldr	r3, [pc, #76]	; (80184d4 <tcp_kill_prio+0x98>)
 8018488:	681a      	ldr	r2, [r3, #0]
 801848a:	697b      	ldr	r3, [r7, #20]
 801848c:	6a1b      	ldr	r3, [r3, #32]
 801848e:	1ad3      	subs	r3, r2, r3
 8018490:	68fa      	ldr	r2, [r7, #12]
 8018492:	429a      	cmp	r2, r3
 8018494:	d80a      	bhi.n	80184ac <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8018496:	4b0f      	ldr	r3, [pc, #60]	; (80184d4 <tcp_kill_prio+0x98>)
 8018498:	681a      	ldr	r2, [r3, #0]
 801849a:	697b      	ldr	r3, [r7, #20]
 801849c:	6a1b      	ldr	r3, [r3, #32]
 801849e:	1ad3      	subs	r3, r2, r3
 80184a0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80184a2:	697b      	ldr	r3, [r7, #20]
 80184a4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80184a6:	697b      	ldr	r3, [r7, #20]
 80184a8:	7d5b      	ldrb	r3, [r3, #21]
 80184aa:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80184ac:	697b      	ldr	r3, [r7, #20]
 80184ae:	68db      	ldr	r3, [r3, #12]
 80184b0:	617b      	str	r3, [r7, #20]
 80184b2:	697b      	ldr	r3, [r7, #20]
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d1dc      	bne.n	8018472 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80184b8:	693b      	ldr	r3, [r7, #16]
 80184ba:	2b00      	cmp	r3, #0
 80184bc:	d004      	beq.n	80184c8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80184be:	6938      	ldr	r0, [r7, #16]
 80184c0:	f7ff f860 	bl	8017584 <tcp_abort>
 80184c4:	e000      	b.n	80184c8 <tcp_kill_prio+0x8c>
    return;
 80184c6:	bf00      	nop
  }
}
 80184c8:	3718      	adds	r7, #24
 80184ca:	46bd      	mov	sp, r7
 80184cc:	bd80      	pop	{r7, pc}
 80184ce:	bf00      	nop
 80184d0:	200188a8 	.word	0x200188a8
 80184d4:	2001889c 	.word	0x2001889c

080184d8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80184d8:	b580      	push	{r7, lr}
 80184da:	b086      	sub	sp, #24
 80184dc:	af00      	add	r7, sp, #0
 80184de:	4603      	mov	r3, r0
 80184e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80184e2:	79fb      	ldrb	r3, [r7, #7]
 80184e4:	2b08      	cmp	r3, #8
 80184e6:	d009      	beq.n	80184fc <tcp_kill_state+0x24>
 80184e8:	79fb      	ldrb	r3, [r7, #7]
 80184ea:	2b09      	cmp	r3, #9
 80184ec:	d006      	beq.n	80184fc <tcp_kill_state+0x24>
 80184ee:	4b1a      	ldr	r3, [pc, #104]	; (8018558 <tcp_kill_state+0x80>)
 80184f0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80184f4:	4919      	ldr	r1, [pc, #100]	; (801855c <tcp_kill_state+0x84>)
 80184f6:	481a      	ldr	r0, [pc, #104]	; (8018560 <tcp_kill_state+0x88>)
 80184f8:	f007 fd34 	bl	801ff64 <printf>

  inactivity = 0;
 80184fc:	2300      	movs	r3, #0
 80184fe:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8018500:	2300      	movs	r3, #0
 8018502:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018504:	4b17      	ldr	r3, [pc, #92]	; (8018564 <tcp_kill_state+0x8c>)
 8018506:	681b      	ldr	r3, [r3, #0]
 8018508:	617b      	str	r3, [r7, #20]
 801850a:	e017      	b.n	801853c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801850c:	697b      	ldr	r3, [r7, #20]
 801850e:	7d1b      	ldrb	r3, [r3, #20]
 8018510:	79fa      	ldrb	r2, [r7, #7]
 8018512:	429a      	cmp	r2, r3
 8018514:	d10f      	bne.n	8018536 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8018516:	4b14      	ldr	r3, [pc, #80]	; (8018568 <tcp_kill_state+0x90>)
 8018518:	681a      	ldr	r2, [r3, #0]
 801851a:	697b      	ldr	r3, [r7, #20]
 801851c:	6a1b      	ldr	r3, [r3, #32]
 801851e:	1ad3      	subs	r3, r2, r3
 8018520:	68fa      	ldr	r2, [r7, #12]
 8018522:	429a      	cmp	r2, r3
 8018524:	d807      	bhi.n	8018536 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8018526:	4b10      	ldr	r3, [pc, #64]	; (8018568 <tcp_kill_state+0x90>)
 8018528:	681a      	ldr	r2, [r3, #0]
 801852a:	697b      	ldr	r3, [r7, #20]
 801852c:	6a1b      	ldr	r3, [r3, #32]
 801852e:	1ad3      	subs	r3, r2, r3
 8018530:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8018532:	697b      	ldr	r3, [r7, #20]
 8018534:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018536:	697b      	ldr	r3, [r7, #20]
 8018538:	68db      	ldr	r3, [r3, #12]
 801853a:	617b      	str	r3, [r7, #20]
 801853c:	697b      	ldr	r3, [r7, #20]
 801853e:	2b00      	cmp	r3, #0
 8018540:	d1e4      	bne.n	801850c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8018542:	693b      	ldr	r3, [r7, #16]
 8018544:	2b00      	cmp	r3, #0
 8018546:	d003      	beq.n	8018550 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8018548:	2100      	movs	r1, #0
 801854a:	6938      	ldr	r0, [r7, #16]
 801854c:	f7fe ff5c 	bl	8017408 <tcp_abandon>
  }
}
 8018550:	bf00      	nop
 8018552:	3718      	adds	r7, #24
 8018554:	46bd      	mov	sp, r7
 8018556:	bd80      	pop	{r7, pc}
 8018558:	08027710 	.word	0x08027710
 801855c:	08027c9c 	.word	0x08027c9c
 8018560:	08027754 	.word	0x08027754
 8018564:	200188a8 	.word	0x200188a8
 8018568:	2001889c 	.word	0x2001889c

0801856c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801856c:	b580      	push	{r7, lr}
 801856e:	b084      	sub	sp, #16
 8018570:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8018572:	2300      	movs	r3, #0
 8018574:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8018576:	2300      	movs	r3, #0
 8018578:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801857a:	4b12      	ldr	r3, [pc, #72]	; (80185c4 <tcp_kill_timewait+0x58>)
 801857c:	681b      	ldr	r3, [r3, #0]
 801857e:	60fb      	str	r3, [r7, #12]
 8018580:	e012      	b.n	80185a8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8018582:	4b11      	ldr	r3, [pc, #68]	; (80185c8 <tcp_kill_timewait+0x5c>)
 8018584:	681a      	ldr	r2, [r3, #0]
 8018586:	68fb      	ldr	r3, [r7, #12]
 8018588:	6a1b      	ldr	r3, [r3, #32]
 801858a:	1ad3      	subs	r3, r2, r3
 801858c:	687a      	ldr	r2, [r7, #4]
 801858e:	429a      	cmp	r2, r3
 8018590:	d807      	bhi.n	80185a2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8018592:	4b0d      	ldr	r3, [pc, #52]	; (80185c8 <tcp_kill_timewait+0x5c>)
 8018594:	681a      	ldr	r2, [r3, #0]
 8018596:	68fb      	ldr	r3, [r7, #12]
 8018598:	6a1b      	ldr	r3, [r3, #32]
 801859a:	1ad3      	subs	r3, r2, r3
 801859c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801859e:	68fb      	ldr	r3, [r7, #12]
 80185a0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80185a2:	68fb      	ldr	r3, [r7, #12]
 80185a4:	68db      	ldr	r3, [r3, #12]
 80185a6:	60fb      	str	r3, [r7, #12]
 80185a8:	68fb      	ldr	r3, [r7, #12]
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	d1e9      	bne.n	8018582 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80185ae:	68bb      	ldr	r3, [r7, #8]
 80185b0:	2b00      	cmp	r3, #0
 80185b2:	d002      	beq.n	80185ba <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80185b4:	68b8      	ldr	r0, [r7, #8]
 80185b6:	f7fe ffe5 	bl	8017584 <tcp_abort>
  }
}
 80185ba:	bf00      	nop
 80185bc:	3710      	adds	r7, #16
 80185be:	46bd      	mov	sp, r7
 80185c0:	bd80      	pop	{r7, pc}
 80185c2:	bf00      	nop
 80185c4:	200188ac 	.word	0x200188ac
 80185c8:	2001889c 	.word	0x2001889c

080185cc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80185cc:	b580      	push	{r7, lr}
 80185ce:	b082      	sub	sp, #8
 80185d0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80185d2:	4b10      	ldr	r3, [pc, #64]	; (8018614 <tcp_handle_closepend+0x48>)
 80185d4:	681b      	ldr	r3, [r3, #0]
 80185d6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80185d8:	e014      	b.n	8018604 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	68db      	ldr	r3, [r3, #12]
 80185de:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	8b5b      	ldrh	r3, [r3, #26]
 80185e4:	f003 0308 	and.w	r3, r3, #8
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	d009      	beq.n	8018600 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	8b5b      	ldrh	r3, [r3, #26]
 80185f0:	f023 0308 	bic.w	r3, r3, #8
 80185f4:	b29a      	uxth	r2, r3
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80185fa:	6878      	ldr	r0, [r7, #4]
 80185fc:	f7fe fe6e 	bl	80172dc <tcp_close_shutdown_fin>
    }
    pcb = next;
 8018600:	683b      	ldr	r3, [r7, #0]
 8018602:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	2b00      	cmp	r3, #0
 8018608:	d1e7      	bne.n	80185da <tcp_handle_closepend+0xe>
  }
}
 801860a:	bf00      	nop
 801860c:	bf00      	nop
 801860e:	3708      	adds	r7, #8
 8018610:	46bd      	mov	sp, r7
 8018612:	bd80      	pop	{r7, pc}
 8018614:	200188a8 	.word	0x200188a8

08018618 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8018618:	b580      	push	{r7, lr}
 801861a:	b084      	sub	sp, #16
 801861c:	af00      	add	r7, sp, #0
 801861e:	4603      	mov	r3, r0
 8018620:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8018622:	2001      	movs	r0, #1
 8018624:	f7fd faa4 	bl	8015b70 <memp_malloc>
 8018628:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801862a:	68fb      	ldr	r3, [r7, #12]
 801862c:	2b00      	cmp	r3, #0
 801862e:	d126      	bne.n	801867e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8018630:	f7ff ffcc 	bl	80185cc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8018634:	f7ff ff9a 	bl	801856c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8018638:	2001      	movs	r0, #1
 801863a:	f7fd fa99 	bl	8015b70 <memp_malloc>
 801863e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8018640:	68fb      	ldr	r3, [r7, #12]
 8018642:	2b00      	cmp	r3, #0
 8018644:	d11b      	bne.n	801867e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8018646:	2009      	movs	r0, #9
 8018648:	f7ff ff46 	bl	80184d8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801864c:	2001      	movs	r0, #1
 801864e:	f7fd fa8f 	bl	8015b70 <memp_malloc>
 8018652:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8018654:	68fb      	ldr	r3, [r7, #12]
 8018656:	2b00      	cmp	r3, #0
 8018658:	d111      	bne.n	801867e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801865a:	2008      	movs	r0, #8
 801865c:	f7ff ff3c 	bl	80184d8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8018660:	2001      	movs	r0, #1
 8018662:	f7fd fa85 	bl	8015b70 <memp_malloc>
 8018666:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8018668:	68fb      	ldr	r3, [r7, #12]
 801866a:	2b00      	cmp	r3, #0
 801866c:	d107      	bne.n	801867e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801866e:	79fb      	ldrb	r3, [r7, #7]
 8018670:	4618      	mov	r0, r3
 8018672:	f7ff fee3 	bl	801843c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8018676:	2001      	movs	r0, #1
 8018678:	f7fd fa7a 	bl	8015b70 <memp_malloc>
 801867c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801867e:	68fb      	ldr	r3, [r7, #12]
 8018680:	2b00      	cmp	r3, #0
 8018682:	d03f      	beq.n	8018704 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8018684:	229c      	movs	r2, #156	; 0x9c
 8018686:	2100      	movs	r1, #0
 8018688:	68f8      	ldr	r0, [r7, #12]
 801868a:	f007 fc63 	bl	801ff54 <memset>
    pcb->prio = prio;
 801868e:	68fb      	ldr	r3, [r7, #12]
 8018690:	79fa      	ldrb	r2, [r7, #7]
 8018692:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8018694:	68fb      	ldr	r3, [r7, #12]
 8018696:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801869a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801869e:	68fb      	ldr	r3, [r7, #12]
 80186a0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80186a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80186a6:	68fb      	ldr	r3, [r7, #12]
 80186a8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80186aa:	68fb      	ldr	r3, [r7, #12]
 80186ac:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80186ae:	68fb      	ldr	r3, [r7, #12]
 80186b0:	22ff      	movs	r2, #255	; 0xff
 80186b2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80186b4:	68fb      	ldr	r3, [r7, #12]
 80186b6:	f44f 7206 	mov.w	r2, #536	; 0x218
 80186ba:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80186bc:	68fb      	ldr	r3, [r7, #12]
 80186be:	2206      	movs	r2, #6
 80186c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80186c4:	68fb      	ldr	r3, [r7, #12]
 80186c6:	2206      	movs	r2, #6
 80186c8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80186ca:	68fb      	ldr	r3, [r7, #12]
 80186cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80186d0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80186d2:	68fb      	ldr	r3, [r7, #12]
 80186d4:	2201      	movs	r2, #1
 80186d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80186da:	4b0d      	ldr	r3, [pc, #52]	; (8018710 <tcp_alloc+0xf8>)
 80186dc:	681a      	ldr	r2, [r3, #0]
 80186de:	68fb      	ldr	r3, [r7, #12]
 80186e0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80186e2:	4b0c      	ldr	r3, [pc, #48]	; (8018714 <tcp_alloc+0xfc>)
 80186e4:	781a      	ldrb	r2, [r3, #0]
 80186e6:	68fb      	ldr	r3, [r7, #12]
 80186e8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80186ea:	68fb      	ldr	r3, [r7, #12]
 80186ec:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80186f0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80186f4:	68fb      	ldr	r3, [r7, #12]
 80186f6:	4a08      	ldr	r2, [pc, #32]	; (8018718 <tcp_alloc+0x100>)
 80186f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80186fc:	68fb      	ldr	r3, [r7, #12]
 80186fe:	4a07      	ldr	r2, [pc, #28]	; (801871c <tcp_alloc+0x104>)
 8018700:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8018704:	68fb      	ldr	r3, [r7, #12]
}
 8018706:	4618      	mov	r0, r3
 8018708:	3710      	adds	r7, #16
 801870a:	46bd      	mov	sp, r7
 801870c:	bd80      	pop	{r7, pc}
 801870e:	bf00      	nop
 8018710:	2001889c 	.word	0x2001889c
 8018714:	200188b2 	.word	0x200188b2
 8018718:	080183d1 	.word	0x080183d1
 801871c:	006ddd00 	.word	0x006ddd00

08018720 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8018720:	b580      	push	{r7, lr}
 8018722:	b084      	sub	sp, #16
 8018724:	af00      	add	r7, sp, #0
 8018726:	4603      	mov	r3, r0
 8018728:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801872a:	2040      	movs	r0, #64	; 0x40
 801872c:	f7ff ff74 	bl	8018618 <tcp_alloc>
 8018730:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8018732:	68fb      	ldr	r3, [r7, #12]
}
 8018734:	4618      	mov	r0, r3
 8018736:	3710      	adds	r7, #16
 8018738:	46bd      	mov	sp, r7
 801873a:	bd80      	pop	{r7, pc}

0801873c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801873c:	b480      	push	{r7}
 801873e:	b083      	sub	sp, #12
 8018740:	af00      	add	r7, sp, #0
 8018742:	6078      	str	r0, [r7, #4]
 8018744:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8018746:	687b      	ldr	r3, [r7, #4]
 8018748:	2b00      	cmp	r3, #0
 801874a:	d002      	beq.n	8018752 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	683a      	ldr	r2, [r7, #0]
 8018750:	611a      	str	r2, [r3, #16]
  }
}
 8018752:	bf00      	nop
 8018754:	370c      	adds	r7, #12
 8018756:	46bd      	mov	sp, r7
 8018758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801875c:	4770      	bx	lr
	...

08018760 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8018760:	b580      	push	{r7, lr}
 8018762:	b082      	sub	sp, #8
 8018764:	af00      	add	r7, sp, #0
 8018766:	6078      	str	r0, [r7, #4]
 8018768:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	2b00      	cmp	r3, #0
 801876e:	d00e      	beq.n	801878e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	7d1b      	ldrb	r3, [r3, #20]
 8018774:	2b01      	cmp	r3, #1
 8018776:	d106      	bne.n	8018786 <tcp_recv+0x26>
 8018778:	4b07      	ldr	r3, [pc, #28]	; (8018798 <tcp_recv+0x38>)
 801877a:	f240 72df 	movw	r2, #2015	; 0x7df
 801877e:	4907      	ldr	r1, [pc, #28]	; (801879c <tcp_recv+0x3c>)
 8018780:	4807      	ldr	r0, [pc, #28]	; (80187a0 <tcp_recv+0x40>)
 8018782:	f007 fbef 	bl	801ff64 <printf>
    pcb->recv = recv;
 8018786:	687b      	ldr	r3, [r7, #4]
 8018788:	683a      	ldr	r2, [r7, #0]
 801878a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801878e:	bf00      	nop
 8018790:	3708      	adds	r7, #8
 8018792:	46bd      	mov	sp, r7
 8018794:	bd80      	pop	{r7, pc}
 8018796:	bf00      	nop
 8018798:	08027710 	.word	0x08027710
 801879c:	08027cac 	.word	0x08027cac
 80187a0:	08027754 	.word	0x08027754

080187a4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80187a4:	b580      	push	{r7, lr}
 80187a6:	b082      	sub	sp, #8
 80187a8:	af00      	add	r7, sp, #0
 80187aa:	6078      	str	r0, [r7, #4]
 80187ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	d00e      	beq.n	80187d2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	7d1b      	ldrb	r3, [r3, #20]
 80187b8:	2b01      	cmp	r3, #1
 80187ba:	d106      	bne.n	80187ca <tcp_sent+0x26>
 80187bc:	4b07      	ldr	r3, [pc, #28]	; (80187dc <tcp_sent+0x38>)
 80187be:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80187c2:	4907      	ldr	r1, [pc, #28]	; (80187e0 <tcp_sent+0x3c>)
 80187c4:	4807      	ldr	r0, [pc, #28]	; (80187e4 <tcp_sent+0x40>)
 80187c6:	f007 fbcd 	bl	801ff64 <printf>
    pcb->sent = sent;
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	683a      	ldr	r2, [r7, #0]
 80187ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80187d2:	bf00      	nop
 80187d4:	3708      	adds	r7, #8
 80187d6:	46bd      	mov	sp, r7
 80187d8:	bd80      	pop	{r7, pc}
 80187da:	bf00      	nop
 80187dc:	08027710 	.word	0x08027710
 80187e0:	08027cd4 	.word	0x08027cd4
 80187e4:	08027754 	.word	0x08027754

080187e8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80187e8:	b580      	push	{r7, lr}
 80187ea:	b082      	sub	sp, #8
 80187ec:	af00      	add	r7, sp, #0
 80187ee:	6078      	str	r0, [r7, #4]
 80187f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80187f2:	687b      	ldr	r3, [r7, #4]
 80187f4:	2b00      	cmp	r3, #0
 80187f6:	d00e      	beq.n	8018816 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	7d1b      	ldrb	r3, [r3, #20]
 80187fc:	2b01      	cmp	r3, #1
 80187fe:	d106      	bne.n	801880e <tcp_err+0x26>
 8018800:	4b07      	ldr	r3, [pc, #28]	; (8018820 <tcp_err+0x38>)
 8018802:	f640 020d 	movw	r2, #2061	; 0x80d
 8018806:	4907      	ldr	r1, [pc, #28]	; (8018824 <tcp_err+0x3c>)
 8018808:	4807      	ldr	r0, [pc, #28]	; (8018828 <tcp_err+0x40>)
 801880a:	f007 fbab 	bl	801ff64 <printf>
    pcb->errf = err;
 801880e:	687b      	ldr	r3, [r7, #4]
 8018810:	683a      	ldr	r2, [r7, #0]
 8018812:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8018816:	bf00      	nop
 8018818:	3708      	adds	r7, #8
 801881a:	46bd      	mov	sp, r7
 801881c:	bd80      	pop	{r7, pc}
 801881e:	bf00      	nop
 8018820:	08027710 	.word	0x08027710
 8018824:	08027cfc 	.word	0x08027cfc
 8018828:	08027754 	.word	0x08027754

0801882c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801882c:	b580      	push	{r7, lr}
 801882e:	b084      	sub	sp, #16
 8018830:	af00      	add	r7, sp, #0
 8018832:	60f8      	str	r0, [r7, #12]
 8018834:	60b9      	str	r1, [r7, #8]
 8018836:	4613      	mov	r3, r2
 8018838:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801883a:	68fb      	ldr	r3, [r7, #12]
 801883c:	2b00      	cmp	r3, #0
 801883e:	d107      	bne.n	8018850 <tcp_poll+0x24>
 8018840:	4b0e      	ldr	r3, [pc, #56]	; (801887c <tcp_poll+0x50>)
 8018842:	f640 023d 	movw	r2, #2109	; 0x83d
 8018846:	490e      	ldr	r1, [pc, #56]	; (8018880 <tcp_poll+0x54>)
 8018848:	480e      	ldr	r0, [pc, #56]	; (8018884 <tcp_poll+0x58>)
 801884a:	f007 fb8b 	bl	801ff64 <printf>
 801884e:	e011      	b.n	8018874 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8018850:	68fb      	ldr	r3, [r7, #12]
 8018852:	7d1b      	ldrb	r3, [r3, #20]
 8018854:	2b01      	cmp	r3, #1
 8018856:	d106      	bne.n	8018866 <tcp_poll+0x3a>
 8018858:	4b08      	ldr	r3, [pc, #32]	; (801887c <tcp_poll+0x50>)
 801885a:	f640 023e 	movw	r2, #2110	; 0x83e
 801885e:	490a      	ldr	r1, [pc, #40]	; (8018888 <tcp_poll+0x5c>)
 8018860:	4808      	ldr	r0, [pc, #32]	; (8018884 <tcp_poll+0x58>)
 8018862:	f007 fb7f 	bl	801ff64 <printf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8018866:	68fb      	ldr	r3, [r7, #12]
 8018868:	68ba      	ldr	r2, [r7, #8]
 801886a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801886e:	68fb      	ldr	r3, [r7, #12]
 8018870:	79fa      	ldrb	r2, [r7, #7]
 8018872:	775a      	strb	r2, [r3, #29]
}
 8018874:	3710      	adds	r7, #16
 8018876:	46bd      	mov	sp, r7
 8018878:	bd80      	pop	{r7, pc}
 801887a:	bf00      	nop
 801887c:	08027710 	.word	0x08027710
 8018880:	08027d24 	.word	0x08027d24
 8018884:	08027754 	.word	0x08027754
 8018888:	08027d3c 	.word	0x08027d3c

0801888c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801888c:	b580      	push	{r7, lr}
 801888e:	b082      	sub	sp, #8
 8018890:	af00      	add	r7, sp, #0
 8018892:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	2b00      	cmp	r3, #0
 8018898:	d107      	bne.n	80188aa <tcp_pcb_purge+0x1e>
 801889a:	4b21      	ldr	r3, [pc, #132]	; (8018920 <tcp_pcb_purge+0x94>)
 801889c:	f640 0251 	movw	r2, #2129	; 0x851
 80188a0:	4920      	ldr	r1, [pc, #128]	; (8018924 <tcp_pcb_purge+0x98>)
 80188a2:	4821      	ldr	r0, [pc, #132]	; (8018928 <tcp_pcb_purge+0x9c>)
 80188a4:	f007 fb5e 	bl	801ff64 <printf>
 80188a8:	e037      	b.n	801891a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	7d1b      	ldrb	r3, [r3, #20]
 80188ae:	2b00      	cmp	r3, #0
 80188b0:	d033      	beq.n	801891a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80188b6:	2b0a      	cmp	r3, #10
 80188b8:	d02f      	beq.n	801891a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80188ba:	687b      	ldr	r3, [r7, #4]
 80188bc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80188be:	2b01      	cmp	r3, #1
 80188c0:	d02b      	beq.n	801891a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80188c2:	687b      	ldr	r3, [r7, #4]
 80188c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	d007      	beq.n	80188da <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80188ce:	4618      	mov	r0, r3
 80188d0:	f7fe f860 	bl	8016994 <pbuf_free>
      pcb->refused_data = NULL;
 80188d4:	687b      	ldr	r3, [r7, #4]
 80188d6:	2200      	movs	r2, #0
 80188d8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80188de:	2b00      	cmp	r3, #0
 80188e0:	d002      	beq.n	80188e8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80188e2:	6878      	ldr	r0, [r7, #4]
 80188e4:	f000 f986 	bl	8018bf4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80188ee:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80188f4:	4618      	mov	r0, r3
 80188f6:	f7ff fd11 	bl	801831c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80188fe:	4618      	mov	r0, r3
 8018900:	f7ff fd0c 	bl	801831c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	2200      	movs	r2, #0
 8018908:	66da      	str	r2, [r3, #108]	; 0x6c
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	2200      	movs	r2, #0
 8018916:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801891a:	3708      	adds	r7, #8
 801891c:	46bd      	mov	sp, r7
 801891e:	bd80      	pop	{r7, pc}
 8018920:	08027710 	.word	0x08027710
 8018924:	08027d5c 	.word	0x08027d5c
 8018928:	08027754 	.word	0x08027754

0801892c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801892c:	b580      	push	{r7, lr}
 801892e:	b084      	sub	sp, #16
 8018930:	af00      	add	r7, sp, #0
 8018932:	6078      	str	r0, [r7, #4]
 8018934:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8018936:	683b      	ldr	r3, [r7, #0]
 8018938:	2b00      	cmp	r3, #0
 801893a:	d106      	bne.n	801894a <tcp_pcb_remove+0x1e>
 801893c:	4b3e      	ldr	r3, [pc, #248]	; (8018a38 <tcp_pcb_remove+0x10c>)
 801893e:	f640 0283 	movw	r2, #2179	; 0x883
 8018942:	493e      	ldr	r1, [pc, #248]	; (8018a3c <tcp_pcb_remove+0x110>)
 8018944:	483e      	ldr	r0, [pc, #248]	; (8018a40 <tcp_pcb_remove+0x114>)
 8018946:	f007 fb0d 	bl	801ff64 <printf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801894a:	687b      	ldr	r3, [r7, #4]
 801894c:	2b00      	cmp	r3, #0
 801894e:	d106      	bne.n	801895e <tcp_pcb_remove+0x32>
 8018950:	4b39      	ldr	r3, [pc, #228]	; (8018a38 <tcp_pcb_remove+0x10c>)
 8018952:	f640 0284 	movw	r2, #2180	; 0x884
 8018956:	493b      	ldr	r1, [pc, #236]	; (8018a44 <tcp_pcb_remove+0x118>)
 8018958:	4839      	ldr	r0, [pc, #228]	; (8018a40 <tcp_pcb_remove+0x114>)
 801895a:	f007 fb03 	bl	801ff64 <printf>

  TCP_RMV(pcblist, pcb);
 801895e:	687b      	ldr	r3, [r7, #4]
 8018960:	681b      	ldr	r3, [r3, #0]
 8018962:	683a      	ldr	r2, [r7, #0]
 8018964:	429a      	cmp	r2, r3
 8018966:	d105      	bne.n	8018974 <tcp_pcb_remove+0x48>
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	681b      	ldr	r3, [r3, #0]
 801896c:	68da      	ldr	r2, [r3, #12]
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	601a      	str	r2, [r3, #0]
 8018972:	e013      	b.n	801899c <tcp_pcb_remove+0x70>
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	681b      	ldr	r3, [r3, #0]
 8018978:	60fb      	str	r3, [r7, #12]
 801897a:	e00c      	b.n	8018996 <tcp_pcb_remove+0x6a>
 801897c:	68fb      	ldr	r3, [r7, #12]
 801897e:	68db      	ldr	r3, [r3, #12]
 8018980:	683a      	ldr	r2, [r7, #0]
 8018982:	429a      	cmp	r2, r3
 8018984:	d104      	bne.n	8018990 <tcp_pcb_remove+0x64>
 8018986:	683b      	ldr	r3, [r7, #0]
 8018988:	68da      	ldr	r2, [r3, #12]
 801898a:	68fb      	ldr	r3, [r7, #12]
 801898c:	60da      	str	r2, [r3, #12]
 801898e:	e005      	b.n	801899c <tcp_pcb_remove+0x70>
 8018990:	68fb      	ldr	r3, [r7, #12]
 8018992:	68db      	ldr	r3, [r3, #12]
 8018994:	60fb      	str	r3, [r7, #12]
 8018996:	68fb      	ldr	r3, [r7, #12]
 8018998:	2b00      	cmp	r3, #0
 801899a:	d1ef      	bne.n	801897c <tcp_pcb_remove+0x50>
 801899c:	683b      	ldr	r3, [r7, #0]
 801899e:	2200      	movs	r2, #0
 80189a0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80189a2:	6838      	ldr	r0, [r7, #0]
 80189a4:	f7ff ff72 	bl	801888c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80189a8:	683b      	ldr	r3, [r7, #0]
 80189aa:	7d1b      	ldrb	r3, [r3, #20]
 80189ac:	2b0a      	cmp	r3, #10
 80189ae:	d013      	beq.n	80189d8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80189b0:	683b      	ldr	r3, [r7, #0]
 80189b2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80189b4:	2b01      	cmp	r3, #1
 80189b6:	d00f      	beq.n	80189d8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80189b8:	683b      	ldr	r3, [r7, #0]
 80189ba:	8b5b      	ldrh	r3, [r3, #26]
 80189bc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	d009      	beq.n	80189d8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80189c4:	683b      	ldr	r3, [r7, #0]
 80189c6:	8b5b      	ldrh	r3, [r3, #26]
 80189c8:	f043 0302 	orr.w	r3, r3, #2
 80189cc:	b29a      	uxth	r2, r3
 80189ce:	683b      	ldr	r3, [r7, #0]
 80189d0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80189d2:	6838      	ldr	r0, [r7, #0]
 80189d4:	f003 fbc6 	bl	801c164 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80189d8:	683b      	ldr	r3, [r7, #0]
 80189da:	7d1b      	ldrb	r3, [r3, #20]
 80189dc:	2b01      	cmp	r3, #1
 80189de:	d020      	beq.n	8018a22 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80189e0:	683b      	ldr	r3, [r7, #0]
 80189e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80189e4:	2b00      	cmp	r3, #0
 80189e6:	d006      	beq.n	80189f6 <tcp_pcb_remove+0xca>
 80189e8:	4b13      	ldr	r3, [pc, #76]	; (8018a38 <tcp_pcb_remove+0x10c>)
 80189ea:	f640 0293 	movw	r2, #2195	; 0x893
 80189ee:	4916      	ldr	r1, [pc, #88]	; (8018a48 <tcp_pcb_remove+0x11c>)
 80189f0:	4813      	ldr	r0, [pc, #76]	; (8018a40 <tcp_pcb_remove+0x114>)
 80189f2:	f007 fab7 	bl	801ff64 <printf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80189f6:	683b      	ldr	r3, [r7, #0]
 80189f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80189fa:	2b00      	cmp	r3, #0
 80189fc:	d006      	beq.n	8018a0c <tcp_pcb_remove+0xe0>
 80189fe:	4b0e      	ldr	r3, [pc, #56]	; (8018a38 <tcp_pcb_remove+0x10c>)
 8018a00:	f640 0294 	movw	r2, #2196	; 0x894
 8018a04:	4911      	ldr	r1, [pc, #68]	; (8018a4c <tcp_pcb_remove+0x120>)
 8018a06:	480e      	ldr	r0, [pc, #56]	; (8018a40 <tcp_pcb_remove+0x114>)
 8018a08:	f007 faac 	bl	801ff64 <printf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8018a0c:	683b      	ldr	r3, [r7, #0]
 8018a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d006      	beq.n	8018a22 <tcp_pcb_remove+0xf6>
 8018a14:	4b08      	ldr	r3, [pc, #32]	; (8018a38 <tcp_pcb_remove+0x10c>)
 8018a16:	f640 0296 	movw	r2, #2198	; 0x896
 8018a1a:	490d      	ldr	r1, [pc, #52]	; (8018a50 <tcp_pcb_remove+0x124>)
 8018a1c:	4808      	ldr	r0, [pc, #32]	; (8018a40 <tcp_pcb_remove+0x114>)
 8018a1e:	f007 faa1 	bl	801ff64 <printf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8018a22:	683b      	ldr	r3, [r7, #0]
 8018a24:	2200      	movs	r2, #0
 8018a26:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8018a28:	683b      	ldr	r3, [r7, #0]
 8018a2a:	2200      	movs	r2, #0
 8018a2c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8018a2e:	bf00      	nop
 8018a30:	3710      	adds	r7, #16
 8018a32:	46bd      	mov	sp, r7
 8018a34:	bd80      	pop	{r7, pc}
 8018a36:	bf00      	nop
 8018a38:	08027710 	.word	0x08027710
 8018a3c:	08027d78 	.word	0x08027d78
 8018a40:	08027754 	.word	0x08027754
 8018a44:	08027d94 	.word	0x08027d94
 8018a48:	08027db4 	.word	0x08027db4
 8018a4c:	08027dcc 	.word	0x08027dcc
 8018a50:	08027de8 	.word	0x08027de8

08018a54 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8018a54:	b580      	push	{r7, lr}
 8018a56:	b082      	sub	sp, #8
 8018a58:	af00      	add	r7, sp, #0
 8018a5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8018a5c:	687b      	ldr	r3, [r7, #4]
 8018a5e:	2b00      	cmp	r3, #0
 8018a60:	d106      	bne.n	8018a70 <tcp_next_iss+0x1c>
 8018a62:	4b0a      	ldr	r3, [pc, #40]	; (8018a8c <tcp_next_iss+0x38>)
 8018a64:	f640 02af 	movw	r2, #2223	; 0x8af
 8018a68:	4909      	ldr	r1, [pc, #36]	; (8018a90 <tcp_next_iss+0x3c>)
 8018a6a:	480a      	ldr	r0, [pc, #40]	; (8018a94 <tcp_next_iss+0x40>)
 8018a6c:	f007 fa7a 	bl	801ff64 <printf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8018a70:	4b09      	ldr	r3, [pc, #36]	; (8018a98 <tcp_next_iss+0x44>)
 8018a72:	681a      	ldr	r2, [r3, #0]
 8018a74:	4b09      	ldr	r3, [pc, #36]	; (8018a9c <tcp_next_iss+0x48>)
 8018a76:	681b      	ldr	r3, [r3, #0]
 8018a78:	4413      	add	r3, r2
 8018a7a:	4a07      	ldr	r2, [pc, #28]	; (8018a98 <tcp_next_iss+0x44>)
 8018a7c:	6013      	str	r3, [r2, #0]
  return iss;
 8018a7e:	4b06      	ldr	r3, [pc, #24]	; (8018a98 <tcp_next_iss+0x44>)
 8018a80:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8018a82:	4618      	mov	r0, r3
 8018a84:	3708      	adds	r7, #8
 8018a86:	46bd      	mov	sp, r7
 8018a88:	bd80      	pop	{r7, pc}
 8018a8a:	bf00      	nop
 8018a8c:	08027710 	.word	0x08027710
 8018a90:	08027e00 	.word	0x08027e00
 8018a94:	08027754 	.word	0x08027754
 8018a98:	20000014 	.word	0x20000014
 8018a9c:	2001889c 	.word	0x2001889c

08018aa0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8018aa0:	b580      	push	{r7, lr}
 8018aa2:	b086      	sub	sp, #24
 8018aa4:	af00      	add	r7, sp, #0
 8018aa6:	4603      	mov	r3, r0
 8018aa8:	60b9      	str	r1, [r7, #8]
 8018aaa:	607a      	str	r2, [r7, #4]
 8018aac:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	d106      	bne.n	8018ac2 <tcp_eff_send_mss_netif+0x22>
 8018ab4:	4b14      	ldr	r3, [pc, #80]	; (8018b08 <tcp_eff_send_mss_netif+0x68>)
 8018ab6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8018aba:	4914      	ldr	r1, [pc, #80]	; (8018b0c <tcp_eff_send_mss_netif+0x6c>)
 8018abc:	4814      	ldr	r0, [pc, #80]	; (8018b10 <tcp_eff_send_mss_netif+0x70>)
 8018abe:	f007 fa51 	bl	801ff64 <printf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8018ac2:	68bb      	ldr	r3, [r7, #8]
 8018ac4:	2b00      	cmp	r3, #0
 8018ac6:	d101      	bne.n	8018acc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8018ac8:	89fb      	ldrh	r3, [r7, #14]
 8018aca:	e019      	b.n	8018b00 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8018acc:	68bb      	ldr	r3, [r7, #8]
 8018ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018ad0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8018ad2:	8afb      	ldrh	r3, [r7, #22]
 8018ad4:	2b00      	cmp	r3, #0
 8018ad6:	d012      	beq.n	8018afe <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8018ad8:	2328      	movs	r3, #40	; 0x28
 8018ada:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8018adc:	8afa      	ldrh	r2, [r7, #22]
 8018ade:	8abb      	ldrh	r3, [r7, #20]
 8018ae0:	429a      	cmp	r2, r3
 8018ae2:	d904      	bls.n	8018aee <tcp_eff_send_mss_netif+0x4e>
 8018ae4:	8afa      	ldrh	r2, [r7, #22]
 8018ae6:	8abb      	ldrh	r3, [r7, #20]
 8018ae8:	1ad3      	subs	r3, r2, r3
 8018aea:	b29b      	uxth	r3, r3
 8018aec:	e000      	b.n	8018af0 <tcp_eff_send_mss_netif+0x50>
 8018aee:	2300      	movs	r3, #0
 8018af0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8018af2:	8a7a      	ldrh	r2, [r7, #18]
 8018af4:	89fb      	ldrh	r3, [r7, #14]
 8018af6:	4293      	cmp	r3, r2
 8018af8:	bf28      	it	cs
 8018afa:	4613      	movcs	r3, r2
 8018afc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8018afe:	89fb      	ldrh	r3, [r7, #14]
}
 8018b00:	4618      	mov	r0, r3
 8018b02:	3718      	adds	r7, #24
 8018b04:	46bd      	mov	sp, r7
 8018b06:	bd80      	pop	{r7, pc}
 8018b08:	08027710 	.word	0x08027710
 8018b0c:	08027e1c 	.word	0x08027e1c
 8018b10:	08027754 	.word	0x08027754

08018b14 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8018b14:	b580      	push	{r7, lr}
 8018b16:	b084      	sub	sp, #16
 8018b18:	af00      	add	r7, sp, #0
 8018b1a:	6078      	str	r0, [r7, #4]
 8018b1c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8018b1e:	683b      	ldr	r3, [r7, #0]
 8018b20:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	2b00      	cmp	r3, #0
 8018b26:	d119      	bne.n	8018b5c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8018b28:	4b10      	ldr	r3, [pc, #64]	; (8018b6c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8018b2a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8018b2e:	4910      	ldr	r1, [pc, #64]	; (8018b70 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8018b30:	4810      	ldr	r0, [pc, #64]	; (8018b74 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8018b32:	f007 fa17 	bl	801ff64 <printf>

  while (pcb != NULL) {
 8018b36:	e011      	b.n	8018b5c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8018b38:	68fb      	ldr	r3, [r7, #12]
 8018b3a:	681a      	ldr	r2, [r3, #0]
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	681b      	ldr	r3, [r3, #0]
 8018b40:	429a      	cmp	r2, r3
 8018b42:	d108      	bne.n	8018b56 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8018b44:	68fb      	ldr	r3, [r7, #12]
 8018b46:	68db      	ldr	r3, [r3, #12]
 8018b48:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8018b4a:	68f8      	ldr	r0, [r7, #12]
 8018b4c:	f7fe fd1a 	bl	8017584 <tcp_abort>
      pcb = next;
 8018b50:	68bb      	ldr	r3, [r7, #8]
 8018b52:	60fb      	str	r3, [r7, #12]
 8018b54:	e002      	b.n	8018b5c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8018b56:	68fb      	ldr	r3, [r7, #12]
 8018b58:	68db      	ldr	r3, [r3, #12]
 8018b5a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8018b5c:	68fb      	ldr	r3, [r7, #12]
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	d1ea      	bne.n	8018b38 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8018b62:	bf00      	nop
 8018b64:	bf00      	nop
 8018b66:	3710      	adds	r7, #16
 8018b68:	46bd      	mov	sp, r7
 8018b6a:	bd80      	pop	{r7, pc}
 8018b6c:	08027710 	.word	0x08027710
 8018b70:	08027e44 	.word	0x08027e44
 8018b74:	08027754 	.word	0x08027754

08018b78 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018b78:	b580      	push	{r7, lr}
 8018b7a:	b084      	sub	sp, #16
 8018b7c:	af00      	add	r7, sp, #0
 8018b7e:	6078      	str	r0, [r7, #4]
 8018b80:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	2b00      	cmp	r3, #0
 8018b86:	d02a      	beq.n	8018bde <tcp_netif_ip_addr_changed+0x66>
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	681b      	ldr	r3, [r3, #0]
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	d026      	beq.n	8018bde <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8018b90:	4b15      	ldr	r3, [pc, #84]	; (8018be8 <tcp_netif_ip_addr_changed+0x70>)
 8018b92:	681b      	ldr	r3, [r3, #0]
 8018b94:	4619      	mov	r1, r3
 8018b96:	6878      	ldr	r0, [r7, #4]
 8018b98:	f7ff ffbc 	bl	8018b14 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8018b9c:	4b13      	ldr	r3, [pc, #76]	; (8018bec <tcp_netif_ip_addr_changed+0x74>)
 8018b9e:	681b      	ldr	r3, [r3, #0]
 8018ba0:	4619      	mov	r1, r3
 8018ba2:	6878      	ldr	r0, [r7, #4]
 8018ba4:	f7ff ffb6 	bl	8018b14 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8018ba8:	683b      	ldr	r3, [r7, #0]
 8018baa:	2b00      	cmp	r3, #0
 8018bac:	d017      	beq.n	8018bde <tcp_netif_ip_addr_changed+0x66>
 8018bae:	683b      	ldr	r3, [r7, #0]
 8018bb0:	681b      	ldr	r3, [r3, #0]
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	d013      	beq.n	8018bde <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8018bb6:	4b0e      	ldr	r3, [pc, #56]	; (8018bf0 <tcp_netif_ip_addr_changed+0x78>)
 8018bb8:	681b      	ldr	r3, [r3, #0]
 8018bba:	60fb      	str	r3, [r7, #12]
 8018bbc:	e00c      	b.n	8018bd8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8018bbe:	68fb      	ldr	r3, [r7, #12]
 8018bc0:	681a      	ldr	r2, [r3, #0]
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	681b      	ldr	r3, [r3, #0]
 8018bc6:	429a      	cmp	r2, r3
 8018bc8:	d103      	bne.n	8018bd2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8018bca:	683b      	ldr	r3, [r7, #0]
 8018bcc:	681a      	ldr	r2, [r3, #0]
 8018bce:	68fb      	ldr	r3, [r7, #12]
 8018bd0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8018bd2:	68fb      	ldr	r3, [r7, #12]
 8018bd4:	68db      	ldr	r3, [r3, #12]
 8018bd6:	60fb      	str	r3, [r7, #12]
 8018bd8:	68fb      	ldr	r3, [r7, #12]
 8018bda:	2b00      	cmp	r3, #0
 8018bdc:	d1ef      	bne.n	8018bbe <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8018bde:	bf00      	nop
 8018be0:	3710      	adds	r7, #16
 8018be2:	46bd      	mov	sp, r7
 8018be4:	bd80      	pop	{r7, pc}
 8018be6:	bf00      	nop
 8018be8:	200188a8 	.word	0x200188a8
 8018bec:	200188a0 	.word	0x200188a0
 8018bf0:	200188a4 	.word	0x200188a4

08018bf4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8018bf4:	b580      	push	{r7, lr}
 8018bf6:	b082      	sub	sp, #8
 8018bf8:	af00      	add	r7, sp, #0
 8018bfa:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018c00:	2b00      	cmp	r3, #0
 8018c02:	d007      	beq.n	8018c14 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018c08:	4618      	mov	r0, r3
 8018c0a:	f7ff fb87 	bl	801831c <tcp_segs_free>
    pcb->ooseq = NULL;
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	2200      	movs	r2, #0
 8018c12:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8018c14:	bf00      	nop
 8018c16:	3708      	adds	r7, #8
 8018c18:	46bd      	mov	sp, r7
 8018c1a:	bd80      	pop	{r7, pc}

08018c1c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8018c1c:	b590      	push	{r4, r7, lr}
 8018c1e:	b08d      	sub	sp, #52	; 0x34
 8018c20:	af04      	add	r7, sp, #16
 8018c22:	6078      	str	r0, [r7, #4]
 8018c24:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	2b00      	cmp	r3, #0
 8018c2a:	d105      	bne.n	8018c38 <tcp_input+0x1c>
 8018c2c:	4b9b      	ldr	r3, [pc, #620]	; (8018e9c <tcp_input+0x280>)
 8018c2e:	2283      	movs	r2, #131	; 0x83
 8018c30:	499b      	ldr	r1, [pc, #620]	; (8018ea0 <tcp_input+0x284>)
 8018c32:	489c      	ldr	r0, [pc, #624]	; (8018ea4 <tcp_input+0x288>)
 8018c34:	f007 f996 	bl	801ff64 <printf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	685b      	ldr	r3, [r3, #4]
 8018c3c:	4a9a      	ldr	r2, [pc, #616]	; (8018ea8 <tcp_input+0x28c>)
 8018c3e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8018c40:	687b      	ldr	r3, [r7, #4]
 8018c42:	895b      	ldrh	r3, [r3, #10]
 8018c44:	2b13      	cmp	r3, #19
 8018c46:	f240 83d1 	bls.w	80193ec <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8018c4a:	4b98      	ldr	r3, [pc, #608]	; (8018eac <tcp_input+0x290>)
 8018c4c:	695b      	ldr	r3, [r3, #20]
 8018c4e:	4a97      	ldr	r2, [pc, #604]	; (8018eac <tcp_input+0x290>)
 8018c50:	6812      	ldr	r2, [r2, #0]
 8018c52:	4611      	mov	r1, r2
 8018c54:	4618      	mov	r0, r3
 8018c56:	f006 f8d9 	bl	801ee0c <ip4_addr_isbroadcast_u32>
 8018c5a:	4603      	mov	r3, r0
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	f040 83c7 	bne.w	80193f0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8018c62:	4b92      	ldr	r3, [pc, #584]	; (8018eac <tcp_input+0x290>)
 8018c64:	695b      	ldr	r3, [r3, #20]
 8018c66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8018c6a:	2be0      	cmp	r3, #224	; 0xe0
 8018c6c:	f000 83c0 	beq.w	80193f0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8018c70:	4b8d      	ldr	r3, [pc, #564]	; (8018ea8 <tcp_input+0x28c>)
 8018c72:	681b      	ldr	r3, [r3, #0]
 8018c74:	899b      	ldrh	r3, [r3, #12]
 8018c76:	b29b      	uxth	r3, r3
 8018c78:	4618      	mov	r0, r3
 8018c7a:	f7fc fa9b 	bl	80151b4 <lwip_htons>
 8018c7e:	4603      	mov	r3, r0
 8018c80:	0b1b      	lsrs	r3, r3, #12
 8018c82:	b29b      	uxth	r3, r3
 8018c84:	b2db      	uxtb	r3, r3
 8018c86:	009b      	lsls	r3, r3, #2
 8018c88:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8018c8a:	7cbb      	ldrb	r3, [r7, #18]
 8018c8c:	2b13      	cmp	r3, #19
 8018c8e:	f240 83b1 	bls.w	80193f4 <tcp_input+0x7d8>
 8018c92:	7cbb      	ldrb	r3, [r7, #18]
 8018c94:	b29a      	uxth	r2, r3
 8018c96:	687b      	ldr	r3, [r7, #4]
 8018c98:	891b      	ldrh	r3, [r3, #8]
 8018c9a:	429a      	cmp	r2, r3
 8018c9c:	f200 83aa 	bhi.w	80193f4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8018ca0:	7cbb      	ldrb	r3, [r7, #18]
 8018ca2:	b29b      	uxth	r3, r3
 8018ca4:	3b14      	subs	r3, #20
 8018ca6:	b29a      	uxth	r2, r3
 8018ca8:	4b81      	ldr	r3, [pc, #516]	; (8018eb0 <tcp_input+0x294>)
 8018caa:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8018cac:	4b81      	ldr	r3, [pc, #516]	; (8018eb4 <tcp_input+0x298>)
 8018cae:	2200      	movs	r2, #0
 8018cb0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8018cb2:	687b      	ldr	r3, [r7, #4]
 8018cb4:	895a      	ldrh	r2, [r3, #10]
 8018cb6:	7cbb      	ldrb	r3, [r7, #18]
 8018cb8:	b29b      	uxth	r3, r3
 8018cba:	429a      	cmp	r2, r3
 8018cbc:	d309      	bcc.n	8018cd2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8018cbe:	4b7c      	ldr	r3, [pc, #496]	; (8018eb0 <tcp_input+0x294>)
 8018cc0:	881a      	ldrh	r2, [r3, #0]
 8018cc2:	4b7d      	ldr	r3, [pc, #500]	; (8018eb8 <tcp_input+0x29c>)
 8018cc4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8018cc6:	7cbb      	ldrb	r3, [r7, #18]
 8018cc8:	4619      	mov	r1, r3
 8018cca:	6878      	ldr	r0, [r7, #4]
 8018ccc:	f7fd fddc 	bl	8016888 <pbuf_remove_header>
 8018cd0:	e04e      	b.n	8018d70 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8018cd2:	687b      	ldr	r3, [r7, #4]
 8018cd4:	681b      	ldr	r3, [r3, #0]
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	d105      	bne.n	8018ce6 <tcp_input+0xca>
 8018cda:	4b70      	ldr	r3, [pc, #448]	; (8018e9c <tcp_input+0x280>)
 8018cdc:	22c2      	movs	r2, #194	; 0xc2
 8018cde:	4977      	ldr	r1, [pc, #476]	; (8018ebc <tcp_input+0x2a0>)
 8018ce0:	4870      	ldr	r0, [pc, #448]	; (8018ea4 <tcp_input+0x288>)
 8018ce2:	f007 f93f 	bl	801ff64 <printf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8018ce6:	2114      	movs	r1, #20
 8018ce8:	6878      	ldr	r0, [r7, #4]
 8018cea:	f7fd fdcd 	bl	8016888 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	895a      	ldrh	r2, [r3, #10]
 8018cf2:	4b71      	ldr	r3, [pc, #452]	; (8018eb8 <tcp_input+0x29c>)
 8018cf4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8018cf6:	4b6e      	ldr	r3, [pc, #440]	; (8018eb0 <tcp_input+0x294>)
 8018cf8:	881a      	ldrh	r2, [r3, #0]
 8018cfa:	4b6f      	ldr	r3, [pc, #444]	; (8018eb8 <tcp_input+0x29c>)
 8018cfc:	881b      	ldrh	r3, [r3, #0]
 8018cfe:	1ad3      	subs	r3, r2, r3
 8018d00:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8018d02:	4b6d      	ldr	r3, [pc, #436]	; (8018eb8 <tcp_input+0x29c>)
 8018d04:	881b      	ldrh	r3, [r3, #0]
 8018d06:	4619      	mov	r1, r3
 8018d08:	6878      	ldr	r0, [r7, #4]
 8018d0a:	f7fd fdbd 	bl	8016888 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	681b      	ldr	r3, [r3, #0]
 8018d12:	895b      	ldrh	r3, [r3, #10]
 8018d14:	8a3a      	ldrh	r2, [r7, #16]
 8018d16:	429a      	cmp	r2, r3
 8018d18:	f200 836e 	bhi.w	80193f8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	681b      	ldr	r3, [r3, #0]
 8018d20:	685b      	ldr	r3, [r3, #4]
 8018d22:	4a64      	ldr	r2, [pc, #400]	; (8018eb4 <tcp_input+0x298>)
 8018d24:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	681b      	ldr	r3, [r3, #0]
 8018d2a:	8a3a      	ldrh	r2, [r7, #16]
 8018d2c:	4611      	mov	r1, r2
 8018d2e:	4618      	mov	r0, r3
 8018d30:	f7fd fdaa 	bl	8016888 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	891a      	ldrh	r2, [r3, #8]
 8018d38:	8a3b      	ldrh	r3, [r7, #16]
 8018d3a:	1ad3      	subs	r3, r2, r3
 8018d3c:	b29a      	uxth	r2, r3
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8018d42:	687b      	ldr	r3, [r7, #4]
 8018d44:	895b      	ldrh	r3, [r3, #10]
 8018d46:	2b00      	cmp	r3, #0
 8018d48:	d005      	beq.n	8018d56 <tcp_input+0x13a>
 8018d4a:	4b54      	ldr	r3, [pc, #336]	; (8018e9c <tcp_input+0x280>)
 8018d4c:	22df      	movs	r2, #223	; 0xdf
 8018d4e:	495c      	ldr	r1, [pc, #368]	; (8018ec0 <tcp_input+0x2a4>)
 8018d50:	4854      	ldr	r0, [pc, #336]	; (8018ea4 <tcp_input+0x288>)
 8018d52:	f007 f907 	bl	801ff64 <printf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	891a      	ldrh	r2, [r3, #8]
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	681b      	ldr	r3, [r3, #0]
 8018d5e:	891b      	ldrh	r3, [r3, #8]
 8018d60:	429a      	cmp	r2, r3
 8018d62:	d005      	beq.n	8018d70 <tcp_input+0x154>
 8018d64:	4b4d      	ldr	r3, [pc, #308]	; (8018e9c <tcp_input+0x280>)
 8018d66:	22e0      	movs	r2, #224	; 0xe0
 8018d68:	4956      	ldr	r1, [pc, #344]	; (8018ec4 <tcp_input+0x2a8>)
 8018d6a:	484e      	ldr	r0, [pc, #312]	; (8018ea4 <tcp_input+0x288>)
 8018d6c:	f007 f8fa 	bl	801ff64 <printf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8018d70:	4b4d      	ldr	r3, [pc, #308]	; (8018ea8 <tcp_input+0x28c>)
 8018d72:	681b      	ldr	r3, [r3, #0]
 8018d74:	881b      	ldrh	r3, [r3, #0]
 8018d76:	b29b      	uxth	r3, r3
 8018d78:	4a4b      	ldr	r2, [pc, #300]	; (8018ea8 <tcp_input+0x28c>)
 8018d7a:	6814      	ldr	r4, [r2, #0]
 8018d7c:	4618      	mov	r0, r3
 8018d7e:	f7fc fa19 	bl	80151b4 <lwip_htons>
 8018d82:	4603      	mov	r3, r0
 8018d84:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8018d86:	4b48      	ldr	r3, [pc, #288]	; (8018ea8 <tcp_input+0x28c>)
 8018d88:	681b      	ldr	r3, [r3, #0]
 8018d8a:	885b      	ldrh	r3, [r3, #2]
 8018d8c:	b29b      	uxth	r3, r3
 8018d8e:	4a46      	ldr	r2, [pc, #280]	; (8018ea8 <tcp_input+0x28c>)
 8018d90:	6814      	ldr	r4, [r2, #0]
 8018d92:	4618      	mov	r0, r3
 8018d94:	f7fc fa0e 	bl	80151b4 <lwip_htons>
 8018d98:	4603      	mov	r3, r0
 8018d9a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8018d9c:	4b42      	ldr	r3, [pc, #264]	; (8018ea8 <tcp_input+0x28c>)
 8018d9e:	681b      	ldr	r3, [r3, #0]
 8018da0:	685b      	ldr	r3, [r3, #4]
 8018da2:	4a41      	ldr	r2, [pc, #260]	; (8018ea8 <tcp_input+0x28c>)
 8018da4:	6814      	ldr	r4, [r2, #0]
 8018da6:	4618      	mov	r0, r3
 8018da8:	f7fc fa19 	bl	80151de <lwip_htonl>
 8018dac:	4603      	mov	r3, r0
 8018dae:	6063      	str	r3, [r4, #4]
 8018db0:	6863      	ldr	r3, [r4, #4]
 8018db2:	4a45      	ldr	r2, [pc, #276]	; (8018ec8 <tcp_input+0x2ac>)
 8018db4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8018db6:	4b3c      	ldr	r3, [pc, #240]	; (8018ea8 <tcp_input+0x28c>)
 8018db8:	681b      	ldr	r3, [r3, #0]
 8018dba:	689b      	ldr	r3, [r3, #8]
 8018dbc:	4a3a      	ldr	r2, [pc, #232]	; (8018ea8 <tcp_input+0x28c>)
 8018dbe:	6814      	ldr	r4, [r2, #0]
 8018dc0:	4618      	mov	r0, r3
 8018dc2:	f7fc fa0c 	bl	80151de <lwip_htonl>
 8018dc6:	4603      	mov	r3, r0
 8018dc8:	60a3      	str	r3, [r4, #8]
 8018dca:	68a3      	ldr	r3, [r4, #8]
 8018dcc:	4a3f      	ldr	r2, [pc, #252]	; (8018ecc <tcp_input+0x2b0>)
 8018dce:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8018dd0:	4b35      	ldr	r3, [pc, #212]	; (8018ea8 <tcp_input+0x28c>)
 8018dd2:	681b      	ldr	r3, [r3, #0]
 8018dd4:	89db      	ldrh	r3, [r3, #14]
 8018dd6:	b29b      	uxth	r3, r3
 8018dd8:	4a33      	ldr	r2, [pc, #204]	; (8018ea8 <tcp_input+0x28c>)
 8018dda:	6814      	ldr	r4, [r2, #0]
 8018ddc:	4618      	mov	r0, r3
 8018dde:	f7fc f9e9 	bl	80151b4 <lwip_htons>
 8018de2:	4603      	mov	r3, r0
 8018de4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8018de6:	4b30      	ldr	r3, [pc, #192]	; (8018ea8 <tcp_input+0x28c>)
 8018de8:	681b      	ldr	r3, [r3, #0]
 8018dea:	899b      	ldrh	r3, [r3, #12]
 8018dec:	b29b      	uxth	r3, r3
 8018dee:	4618      	mov	r0, r3
 8018df0:	f7fc f9e0 	bl	80151b4 <lwip_htons>
 8018df4:	4603      	mov	r3, r0
 8018df6:	b2db      	uxtb	r3, r3
 8018df8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018dfc:	b2da      	uxtb	r2, r3
 8018dfe:	4b34      	ldr	r3, [pc, #208]	; (8018ed0 <tcp_input+0x2b4>)
 8018e00:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	891a      	ldrh	r2, [r3, #8]
 8018e06:	4b33      	ldr	r3, [pc, #204]	; (8018ed4 <tcp_input+0x2b8>)
 8018e08:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8018e0a:	4b31      	ldr	r3, [pc, #196]	; (8018ed0 <tcp_input+0x2b4>)
 8018e0c:	781b      	ldrb	r3, [r3, #0]
 8018e0e:	f003 0303 	and.w	r3, r3, #3
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	d00c      	beq.n	8018e30 <tcp_input+0x214>
    tcplen++;
 8018e16:	4b2f      	ldr	r3, [pc, #188]	; (8018ed4 <tcp_input+0x2b8>)
 8018e18:	881b      	ldrh	r3, [r3, #0]
 8018e1a:	3301      	adds	r3, #1
 8018e1c:	b29a      	uxth	r2, r3
 8018e1e:	4b2d      	ldr	r3, [pc, #180]	; (8018ed4 <tcp_input+0x2b8>)
 8018e20:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	891a      	ldrh	r2, [r3, #8]
 8018e26:	4b2b      	ldr	r3, [pc, #172]	; (8018ed4 <tcp_input+0x2b8>)
 8018e28:	881b      	ldrh	r3, [r3, #0]
 8018e2a:	429a      	cmp	r2, r3
 8018e2c:	f200 82e6 	bhi.w	80193fc <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8018e30:	2300      	movs	r3, #0
 8018e32:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018e34:	4b28      	ldr	r3, [pc, #160]	; (8018ed8 <tcp_input+0x2bc>)
 8018e36:	681b      	ldr	r3, [r3, #0]
 8018e38:	61fb      	str	r3, [r7, #28]
 8018e3a:	e09d      	b.n	8018f78 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8018e3c:	69fb      	ldr	r3, [r7, #28]
 8018e3e:	7d1b      	ldrb	r3, [r3, #20]
 8018e40:	2b00      	cmp	r3, #0
 8018e42:	d105      	bne.n	8018e50 <tcp_input+0x234>
 8018e44:	4b15      	ldr	r3, [pc, #84]	; (8018e9c <tcp_input+0x280>)
 8018e46:	22fb      	movs	r2, #251	; 0xfb
 8018e48:	4924      	ldr	r1, [pc, #144]	; (8018edc <tcp_input+0x2c0>)
 8018e4a:	4816      	ldr	r0, [pc, #88]	; (8018ea4 <tcp_input+0x288>)
 8018e4c:	f007 f88a 	bl	801ff64 <printf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8018e50:	69fb      	ldr	r3, [r7, #28]
 8018e52:	7d1b      	ldrb	r3, [r3, #20]
 8018e54:	2b0a      	cmp	r3, #10
 8018e56:	d105      	bne.n	8018e64 <tcp_input+0x248>
 8018e58:	4b10      	ldr	r3, [pc, #64]	; (8018e9c <tcp_input+0x280>)
 8018e5a:	22fc      	movs	r2, #252	; 0xfc
 8018e5c:	4920      	ldr	r1, [pc, #128]	; (8018ee0 <tcp_input+0x2c4>)
 8018e5e:	4811      	ldr	r0, [pc, #68]	; (8018ea4 <tcp_input+0x288>)
 8018e60:	f007 f880 	bl	801ff64 <printf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8018e64:	69fb      	ldr	r3, [r7, #28]
 8018e66:	7d1b      	ldrb	r3, [r3, #20]
 8018e68:	2b01      	cmp	r3, #1
 8018e6a:	d105      	bne.n	8018e78 <tcp_input+0x25c>
 8018e6c:	4b0b      	ldr	r3, [pc, #44]	; (8018e9c <tcp_input+0x280>)
 8018e6e:	22fd      	movs	r2, #253	; 0xfd
 8018e70:	491c      	ldr	r1, [pc, #112]	; (8018ee4 <tcp_input+0x2c8>)
 8018e72:	480c      	ldr	r0, [pc, #48]	; (8018ea4 <tcp_input+0x288>)
 8018e74:	f007 f876 	bl	801ff64 <printf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018e78:	69fb      	ldr	r3, [r7, #28]
 8018e7a:	7a1b      	ldrb	r3, [r3, #8]
 8018e7c:	2b00      	cmp	r3, #0
 8018e7e:	d033      	beq.n	8018ee8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8018e80:	69fb      	ldr	r3, [r7, #28]
 8018e82:	7a1a      	ldrb	r2, [r3, #8]
 8018e84:	4b09      	ldr	r3, [pc, #36]	; (8018eac <tcp_input+0x290>)
 8018e86:	685b      	ldr	r3, [r3, #4]
 8018e88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018e8c:	3301      	adds	r3, #1
 8018e8e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018e90:	429a      	cmp	r2, r3
 8018e92:	d029      	beq.n	8018ee8 <tcp_input+0x2cc>
      prev = pcb;
 8018e94:	69fb      	ldr	r3, [r7, #28]
 8018e96:	61bb      	str	r3, [r7, #24]
      continue;
 8018e98:	e06b      	b.n	8018f72 <tcp_input+0x356>
 8018e9a:	bf00      	nop
 8018e9c:	08027e78 	.word	0x08027e78
 8018ea0:	08027eac 	.word	0x08027eac
 8018ea4:	08027ec4 	.word	0x08027ec4
 8018ea8:	200188c4 	.word	0x200188c4
 8018eac:	20011748 	.word	0x20011748
 8018eb0:	200188c8 	.word	0x200188c8
 8018eb4:	200188cc 	.word	0x200188cc
 8018eb8:	200188ca 	.word	0x200188ca
 8018ebc:	08027eec 	.word	0x08027eec
 8018ec0:	08027efc 	.word	0x08027efc
 8018ec4:	08027f08 	.word	0x08027f08
 8018ec8:	200188d4 	.word	0x200188d4
 8018ecc:	200188d8 	.word	0x200188d8
 8018ed0:	200188e0 	.word	0x200188e0
 8018ed4:	200188de 	.word	0x200188de
 8018ed8:	200188a8 	.word	0x200188a8
 8018edc:	08027f28 	.word	0x08027f28
 8018ee0:	08027f50 	.word	0x08027f50
 8018ee4:	08027f7c 	.word	0x08027f7c
    }

    if (pcb->remote_port == tcphdr->src &&
 8018ee8:	69fb      	ldr	r3, [r7, #28]
 8018eea:	8b1a      	ldrh	r2, [r3, #24]
 8018eec:	4b72      	ldr	r3, [pc, #456]	; (80190b8 <tcp_input+0x49c>)
 8018eee:	681b      	ldr	r3, [r3, #0]
 8018ef0:	881b      	ldrh	r3, [r3, #0]
 8018ef2:	b29b      	uxth	r3, r3
 8018ef4:	429a      	cmp	r2, r3
 8018ef6:	d13a      	bne.n	8018f6e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8018ef8:	69fb      	ldr	r3, [r7, #28]
 8018efa:	8ada      	ldrh	r2, [r3, #22]
 8018efc:	4b6e      	ldr	r3, [pc, #440]	; (80190b8 <tcp_input+0x49c>)
 8018efe:	681b      	ldr	r3, [r3, #0]
 8018f00:	885b      	ldrh	r3, [r3, #2]
 8018f02:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8018f04:	429a      	cmp	r2, r3
 8018f06:	d132      	bne.n	8018f6e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8018f08:	69fb      	ldr	r3, [r7, #28]
 8018f0a:	685a      	ldr	r2, [r3, #4]
 8018f0c:	4b6b      	ldr	r3, [pc, #428]	; (80190bc <tcp_input+0x4a0>)
 8018f0e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8018f10:	429a      	cmp	r2, r3
 8018f12:	d12c      	bne.n	8018f6e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8018f14:	69fb      	ldr	r3, [r7, #28]
 8018f16:	681a      	ldr	r2, [r3, #0]
 8018f18:	4b68      	ldr	r3, [pc, #416]	; (80190bc <tcp_input+0x4a0>)
 8018f1a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8018f1c:	429a      	cmp	r2, r3
 8018f1e:	d126      	bne.n	8018f6e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8018f20:	69fb      	ldr	r3, [r7, #28]
 8018f22:	68db      	ldr	r3, [r3, #12]
 8018f24:	69fa      	ldr	r2, [r7, #28]
 8018f26:	429a      	cmp	r2, r3
 8018f28:	d106      	bne.n	8018f38 <tcp_input+0x31c>
 8018f2a:	4b65      	ldr	r3, [pc, #404]	; (80190c0 <tcp_input+0x4a4>)
 8018f2c:	f240 120d 	movw	r2, #269	; 0x10d
 8018f30:	4964      	ldr	r1, [pc, #400]	; (80190c4 <tcp_input+0x4a8>)
 8018f32:	4865      	ldr	r0, [pc, #404]	; (80190c8 <tcp_input+0x4ac>)
 8018f34:	f007 f816 	bl	801ff64 <printf>
      if (prev != NULL) {
 8018f38:	69bb      	ldr	r3, [r7, #24]
 8018f3a:	2b00      	cmp	r3, #0
 8018f3c:	d00a      	beq.n	8018f54 <tcp_input+0x338>
        prev->next = pcb->next;
 8018f3e:	69fb      	ldr	r3, [r7, #28]
 8018f40:	68da      	ldr	r2, [r3, #12]
 8018f42:	69bb      	ldr	r3, [r7, #24]
 8018f44:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8018f46:	4b61      	ldr	r3, [pc, #388]	; (80190cc <tcp_input+0x4b0>)
 8018f48:	681a      	ldr	r2, [r3, #0]
 8018f4a:	69fb      	ldr	r3, [r7, #28]
 8018f4c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8018f4e:	4a5f      	ldr	r2, [pc, #380]	; (80190cc <tcp_input+0x4b0>)
 8018f50:	69fb      	ldr	r3, [r7, #28]
 8018f52:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8018f54:	69fb      	ldr	r3, [r7, #28]
 8018f56:	68db      	ldr	r3, [r3, #12]
 8018f58:	69fa      	ldr	r2, [r7, #28]
 8018f5a:	429a      	cmp	r2, r3
 8018f5c:	d111      	bne.n	8018f82 <tcp_input+0x366>
 8018f5e:	4b58      	ldr	r3, [pc, #352]	; (80190c0 <tcp_input+0x4a4>)
 8018f60:	f240 1215 	movw	r2, #277	; 0x115
 8018f64:	495a      	ldr	r1, [pc, #360]	; (80190d0 <tcp_input+0x4b4>)
 8018f66:	4858      	ldr	r0, [pc, #352]	; (80190c8 <tcp_input+0x4ac>)
 8018f68:	f006 fffc 	bl	801ff64 <printf>
      break;
 8018f6c:	e009      	b.n	8018f82 <tcp_input+0x366>
    }
    prev = pcb;
 8018f6e:	69fb      	ldr	r3, [r7, #28]
 8018f70:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018f72:	69fb      	ldr	r3, [r7, #28]
 8018f74:	68db      	ldr	r3, [r3, #12]
 8018f76:	61fb      	str	r3, [r7, #28]
 8018f78:	69fb      	ldr	r3, [r7, #28]
 8018f7a:	2b00      	cmp	r3, #0
 8018f7c:	f47f af5e 	bne.w	8018e3c <tcp_input+0x220>
 8018f80:	e000      	b.n	8018f84 <tcp_input+0x368>
      break;
 8018f82:	bf00      	nop
  }

  if (pcb == NULL) {
 8018f84:	69fb      	ldr	r3, [r7, #28]
 8018f86:	2b00      	cmp	r3, #0
 8018f88:	f040 80aa 	bne.w	80190e0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8018f8c:	4b51      	ldr	r3, [pc, #324]	; (80190d4 <tcp_input+0x4b8>)
 8018f8e:	681b      	ldr	r3, [r3, #0]
 8018f90:	61fb      	str	r3, [r7, #28]
 8018f92:	e03f      	b.n	8019014 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8018f94:	69fb      	ldr	r3, [r7, #28]
 8018f96:	7d1b      	ldrb	r3, [r3, #20]
 8018f98:	2b0a      	cmp	r3, #10
 8018f9a:	d006      	beq.n	8018faa <tcp_input+0x38e>
 8018f9c:	4b48      	ldr	r3, [pc, #288]	; (80190c0 <tcp_input+0x4a4>)
 8018f9e:	f240 121f 	movw	r2, #287	; 0x11f
 8018fa2:	494d      	ldr	r1, [pc, #308]	; (80190d8 <tcp_input+0x4bc>)
 8018fa4:	4848      	ldr	r0, [pc, #288]	; (80190c8 <tcp_input+0x4ac>)
 8018fa6:	f006 ffdd 	bl	801ff64 <printf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018faa:	69fb      	ldr	r3, [r7, #28]
 8018fac:	7a1b      	ldrb	r3, [r3, #8]
 8018fae:	2b00      	cmp	r3, #0
 8018fb0:	d009      	beq.n	8018fc6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8018fb2:	69fb      	ldr	r3, [r7, #28]
 8018fb4:	7a1a      	ldrb	r2, [r3, #8]
 8018fb6:	4b41      	ldr	r3, [pc, #260]	; (80190bc <tcp_input+0x4a0>)
 8018fb8:	685b      	ldr	r3, [r3, #4]
 8018fba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018fbe:	3301      	adds	r3, #1
 8018fc0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018fc2:	429a      	cmp	r2, r3
 8018fc4:	d122      	bne.n	801900c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8018fc6:	69fb      	ldr	r3, [r7, #28]
 8018fc8:	8b1a      	ldrh	r2, [r3, #24]
 8018fca:	4b3b      	ldr	r3, [pc, #236]	; (80190b8 <tcp_input+0x49c>)
 8018fcc:	681b      	ldr	r3, [r3, #0]
 8018fce:	881b      	ldrh	r3, [r3, #0]
 8018fd0:	b29b      	uxth	r3, r3
 8018fd2:	429a      	cmp	r2, r3
 8018fd4:	d11b      	bne.n	801900e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8018fd6:	69fb      	ldr	r3, [r7, #28]
 8018fd8:	8ada      	ldrh	r2, [r3, #22]
 8018fda:	4b37      	ldr	r3, [pc, #220]	; (80190b8 <tcp_input+0x49c>)
 8018fdc:	681b      	ldr	r3, [r3, #0]
 8018fde:	885b      	ldrh	r3, [r3, #2]
 8018fe0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8018fe2:	429a      	cmp	r2, r3
 8018fe4:	d113      	bne.n	801900e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8018fe6:	69fb      	ldr	r3, [r7, #28]
 8018fe8:	685a      	ldr	r2, [r3, #4]
 8018fea:	4b34      	ldr	r3, [pc, #208]	; (80190bc <tcp_input+0x4a0>)
 8018fec:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8018fee:	429a      	cmp	r2, r3
 8018ff0:	d10d      	bne.n	801900e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8018ff2:	69fb      	ldr	r3, [r7, #28]
 8018ff4:	681a      	ldr	r2, [r3, #0]
 8018ff6:	4b31      	ldr	r3, [pc, #196]	; (80190bc <tcp_input+0x4a0>)
 8018ff8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8018ffa:	429a      	cmp	r2, r3
 8018ffc:	d107      	bne.n	801900e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8018ffe:	69f8      	ldr	r0, [r7, #28]
 8019000:	f000 fb56 	bl	80196b0 <tcp_timewait_input>
        }
        pbuf_free(p);
 8019004:	6878      	ldr	r0, [r7, #4]
 8019006:	f7fd fcc5 	bl	8016994 <pbuf_free>
        return;
 801900a:	e1fd      	b.n	8019408 <tcp_input+0x7ec>
        continue;
 801900c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801900e:	69fb      	ldr	r3, [r7, #28]
 8019010:	68db      	ldr	r3, [r3, #12]
 8019012:	61fb      	str	r3, [r7, #28]
 8019014:	69fb      	ldr	r3, [r7, #28]
 8019016:	2b00      	cmp	r3, #0
 8019018:	d1bc      	bne.n	8018f94 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801901a:	2300      	movs	r3, #0
 801901c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801901e:	4b2f      	ldr	r3, [pc, #188]	; (80190dc <tcp_input+0x4c0>)
 8019020:	681b      	ldr	r3, [r3, #0]
 8019022:	617b      	str	r3, [r7, #20]
 8019024:	e02a      	b.n	801907c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8019026:	697b      	ldr	r3, [r7, #20]
 8019028:	7a1b      	ldrb	r3, [r3, #8]
 801902a:	2b00      	cmp	r3, #0
 801902c:	d00c      	beq.n	8019048 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801902e:	697b      	ldr	r3, [r7, #20]
 8019030:	7a1a      	ldrb	r2, [r3, #8]
 8019032:	4b22      	ldr	r3, [pc, #136]	; (80190bc <tcp_input+0x4a0>)
 8019034:	685b      	ldr	r3, [r3, #4]
 8019036:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801903a:	3301      	adds	r3, #1
 801903c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801903e:	429a      	cmp	r2, r3
 8019040:	d002      	beq.n	8019048 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8019042:	697b      	ldr	r3, [r7, #20]
 8019044:	61bb      	str	r3, [r7, #24]
        continue;
 8019046:	e016      	b.n	8019076 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8019048:	697b      	ldr	r3, [r7, #20]
 801904a:	8ada      	ldrh	r2, [r3, #22]
 801904c:	4b1a      	ldr	r3, [pc, #104]	; (80190b8 <tcp_input+0x49c>)
 801904e:	681b      	ldr	r3, [r3, #0]
 8019050:	885b      	ldrh	r3, [r3, #2]
 8019052:	b29b      	uxth	r3, r3
 8019054:	429a      	cmp	r2, r3
 8019056:	d10c      	bne.n	8019072 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8019058:	697b      	ldr	r3, [r7, #20]
 801905a:	681a      	ldr	r2, [r3, #0]
 801905c:	4b17      	ldr	r3, [pc, #92]	; (80190bc <tcp_input+0x4a0>)
 801905e:	695b      	ldr	r3, [r3, #20]
 8019060:	429a      	cmp	r2, r3
 8019062:	d00f      	beq.n	8019084 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8019064:	697b      	ldr	r3, [r7, #20]
 8019066:	2b00      	cmp	r3, #0
 8019068:	d00d      	beq.n	8019086 <tcp_input+0x46a>
 801906a:	697b      	ldr	r3, [r7, #20]
 801906c:	681b      	ldr	r3, [r3, #0]
 801906e:	2b00      	cmp	r3, #0
 8019070:	d009      	beq.n	8019086 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8019072:	697b      	ldr	r3, [r7, #20]
 8019074:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8019076:	697b      	ldr	r3, [r7, #20]
 8019078:	68db      	ldr	r3, [r3, #12]
 801907a:	617b      	str	r3, [r7, #20]
 801907c:	697b      	ldr	r3, [r7, #20]
 801907e:	2b00      	cmp	r3, #0
 8019080:	d1d1      	bne.n	8019026 <tcp_input+0x40a>
 8019082:	e000      	b.n	8019086 <tcp_input+0x46a>
            break;
 8019084:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8019086:	697b      	ldr	r3, [r7, #20]
 8019088:	2b00      	cmp	r3, #0
 801908a:	d029      	beq.n	80190e0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801908c:	69bb      	ldr	r3, [r7, #24]
 801908e:	2b00      	cmp	r3, #0
 8019090:	d00a      	beq.n	80190a8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8019092:	697b      	ldr	r3, [r7, #20]
 8019094:	68da      	ldr	r2, [r3, #12]
 8019096:	69bb      	ldr	r3, [r7, #24]
 8019098:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801909a:	4b10      	ldr	r3, [pc, #64]	; (80190dc <tcp_input+0x4c0>)
 801909c:	681a      	ldr	r2, [r3, #0]
 801909e:	697b      	ldr	r3, [r7, #20]
 80190a0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80190a2:	4a0e      	ldr	r2, [pc, #56]	; (80190dc <tcp_input+0x4c0>)
 80190a4:	697b      	ldr	r3, [r7, #20]
 80190a6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80190a8:	6978      	ldr	r0, [r7, #20]
 80190aa:	f000 fa03 	bl	80194b4 <tcp_listen_input>
      }
      pbuf_free(p);
 80190ae:	6878      	ldr	r0, [r7, #4]
 80190b0:	f7fd fc70 	bl	8016994 <pbuf_free>
      return;
 80190b4:	e1a8      	b.n	8019408 <tcp_input+0x7ec>
 80190b6:	bf00      	nop
 80190b8:	200188c4 	.word	0x200188c4
 80190bc:	20011748 	.word	0x20011748
 80190c0:	08027e78 	.word	0x08027e78
 80190c4:	08027fa4 	.word	0x08027fa4
 80190c8:	08027ec4 	.word	0x08027ec4
 80190cc:	200188a8 	.word	0x200188a8
 80190d0:	08027fd0 	.word	0x08027fd0
 80190d4:	200188ac 	.word	0x200188ac
 80190d8:	08027ffc 	.word	0x08027ffc
 80190dc:	200188a4 	.word	0x200188a4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80190e0:	69fb      	ldr	r3, [r7, #28]
 80190e2:	2b00      	cmp	r3, #0
 80190e4:	f000 8158 	beq.w	8019398 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80190e8:	4b95      	ldr	r3, [pc, #596]	; (8019340 <tcp_input+0x724>)
 80190ea:	2200      	movs	r2, #0
 80190ec:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	891a      	ldrh	r2, [r3, #8]
 80190f2:	4b93      	ldr	r3, [pc, #588]	; (8019340 <tcp_input+0x724>)
 80190f4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80190f6:	4a92      	ldr	r2, [pc, #584]	; (8019340 <tcp_input+0x724>)
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80190fc:	4b91      	ldr	r3, [pc, #580]	; (8019344 <tcp_input+0x728>)
 80190fe:	681b      	ldr	r3, [r3, #0]
 8019100:	4a8f      	ldr	r2, [pc, #572]	; (8019340 <tcp_input+0x724>)
 8019102:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8019104:	4b90      	ldr	r3, [pc, #576]	; (8019348 <tcp_input+0x72c>)
 8019106:	2200      	movs	r2, #0
 8019108:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801910a:	4b90      	ldr	r3, [pc, #576]	; (801934c <tcp_input+0x730>)
 801910c:	2200      	movs	r2, #0
 801910e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8019110:	4b8f      	ldr	r3, [pc, #572]	; (8019350 <tcp_input+0x734>)
 8019112:	2200      	movs	r2, #0
 8019114:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8019116:	4b8f      	ldr	r3, [pc, #572]	; (8019354 <tcp_input+0x738>)
 8019118:	781b      	ldrb	r3, [r3, #0]
 801911a:	f003 0308 	and.w	r3, r3, #8
 801911e:	2b00      	cmp	r3, #0
 8019120:	d006      	beq.n	8019130 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8019122:	687b      	ldr	r3, [r7, #4]
 8019124:	7b5b      	ldrb	r3, [r3, #13]
 8019126:	f043 0301 	orr.w	r3, r3, #1
 801912a:	b2da      	uxtb	r2, r3
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8019130:	69fb      	ldr	r3, [r7, #28]
 8019132:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019134:	2b00      	cmp	r3, #0
 8019136:	d017      	beq.n	8019168 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8019138:	69f8      	ldr	r0, [r7, #28]
 801913a:	f7ff f873 	bl	8018224 <tcp_process_refused_data>
 801913e:	4603      	mov	r3, r0
 8019140:	f113 0f0d 	cmn.w	r3, #13
 8019144:	d007      	beq.n	8019156 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8019146:	69fb      	ldr	r3, [r7, #28]
 8019148:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801914a:	2b00      	cmp	r3, #0
 801914c:	d00c      	beq.n	8019168 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801914e:	4b82      	ldr	r3, [pc, #520]	; (8019358 <tcp_input+0x73c>)
 8019150:	881b      	ldrh	r3, [r3, #0]
 8019152:	2b00      	cmp	r3, #0
 8019154:	d008      	beq.n	8019168 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8019156:	69fb      	ldr	r3, [r7, #28]
 8019158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801915a:	2b00      	cmp	r3, #0
 801915c:	f040 80e3 	bne.w	8019326 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8019160:	69f8      	ldr	r0, [r7, #28]
 8019162:	f003 fe05 	bl	801cd70 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8019166:	e0de      	b.n	8019326 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8019168:	4a7c      	ldr	r2, [pc, #496]	; (801935c <tcp_input+0x740>)
 801916a:	69fb      	ldr	r3, [r7, #28]
 801916c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801916e:	69f8      	ldr	r0, [r7, #28]
 8019170:	f000 fb18 	bl	80197a4 <tcp_process>
 8019174:	4603      	mov	r3, r0
 8019176:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8019178:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801917c:	f113 0f0d 	cmn.w	r3, #13
 8019180:	f000 80d3 	beq.w	801932a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8019184:	4b71      	ldr	r3, [pc, #452]	; (801934c <tcp_input+0x730>)
 8019186:	781b      	ldrb	r3, [r3, #0]
 8019188:	f003 0308 	and.w	r3, r3, #8
 801918c:	2b00      	cmp	r3, #0
 801918e:	d015      	beq.n	80191bc <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8019190:	69fb      	ldr	r3, [r7, #28]
 8019192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019196:	2b00      	cmp	r3, #0
 8019198:	d008      	beq.n	80191ac <tcp_input+0x590>
 801919a:	69fb      	ldr	r3, [r7, #28]
 801919c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80191a0:	69fa      	ldr	r2, [r7, #28]
 80191a2:	6912      	ldr	r2, [r2, #16]
 80191a4:	f06f 010d 	mvn.w	r1, #13
 80191a8:	4610      	mov	r0, r2
 80191aa:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80191ac:	69f9      	ldr	r1, [r7, #28]
 80191ae:	486c      	ldr	r0, [pc, #432]	; (8019360 <tcp_input+0x744>)
 80191b0:	f7ff fbbc 	bl	801892c <tcp_pcb_remove>
        tcp_free(pcb);
 80191b4:	69f8      	ldr	r0, [r7, #28]
 80191b6:	f7fd fefd 	bl	8016fb4 <tcp_free>
 80191ba:	e0da      	b.n	8019372 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80191bc:	2300      	movs	r3, #0
 80191be:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80191c0:	4b63      	ldr	r3, [pc, #396]	; (8019350 <tcp_input+0x734>)
 80191c2:	881b      	ldrh	r3, [r3, #0]
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	d01d      	beq.n	8019204 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80191c8:	4b61      	ldr	r3, [pc, #388]	; (8019350 <tcp_input+0x734>)
 80191ca:	881b      	ldrh	r3, [r3, #0]
 80191cc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80191ce:	69fb      	ldr	r3, [r7, #28]
 80191d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80191d4:	2b00      	cmp	r3, #0
 80191d6:	d00a      	beq.n	80191ee <tcp_input+0x5d2>
 80191d8:	69fb      	ldr	r3, [r7, #28]
 80191da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80191de:	69fa      	ldr	r2, [r7, #28]
 80191e0:	6910      	ldr	r0, [r2, #16]
 80191e2:	89fa      	ldrh	r2, [r7, #14]
 80191e4:	69f9      	ldr	r1, [r7, #28]
 80191e6:	4798      	blx	r3
 80191e8:	4603      	mov	r3, r0
 80191ea:	74fb      	strb	r3, [r7, #19]
 80191ec:	e001      	b.n	80191f2 <tcp_input+0x5d6>
 80191ee:	2300      	movs	r3, #0
 80191f0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80191f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80191f6:	f113 0f0d 	cmn.w	r3, #13
 80191fa:	f000 8098 	beq.w	801932e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80191fe:	4b54      	ldr	r3, [pc, #336]	; (8019350 <tcp_input+0x734>)
 8019200:	2200      	movs	r2, #0
 8019202:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8019204:	69f8      	ldr	r0, [r7, #28]
 8019206:	f000 f915 	bl	8019434 <tcp_input_delayed_close>
 801920a:	4603      	mov	r3, r0
 801920c:	2b00      	cmp	r3, #0
 801920e:	f040 8090 	bne.w	8019332 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8019212:	4b4d      	ldr	r3, [pc, #308]	; (8019348 <tcp_input+0x72c>)
 8019214:	681b      	ldr	r3, [r3, #0]
 8019216:	2b00      	cmp	r3, #0
 8019218:	d041      	beq.n	801929e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801921a:	69fb      	ldr	r3, [r7, #28]
 801921c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801921e:	2b00      	cmp	r3, #0
 8019220:	d006      	beq.n	8019230 <tcp_input+0x614>
 8019222:	4b50      	ldr	r3, [pc, #320]	; (8019364 <tcp_input+0x748>)
 8019224:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8019228:	494f      	ldr	r1, [pc, #316]	; (8019368 <tcp_input+0x74c>)
 801922a:	4850      	ldr	r0, [pc, #320]	; (801936c <tcp_input+0x750>)
 801922c:	f006 fe9a 	bl	801ff64 <printf>
          if (pcb->flags & TF_RXCLOSED) {
 8019230:	69fb      	ldr	r3, [r7, #28]
 8019232:	8b5b      	ldrh	r3, [r3, #26]
 8019234:	f003 0310 	and.w	r3, r3, #16
 8019238:	2b00      	cmp	r3, #0
 801923a:	d008      	beq.n	801924e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801923c:	4b42      	ldr	r3, [pc, #264]	; (8019348 <tcp_input+0x72c>)
 801923e:	681b      	ldr	r3, [r3, #0]
 8019240:	4618      	mov	r0, r3
 8019242:	f7fd fba7 	bl	8016994 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8019246:	69f8      	ldr	r0, [r7, #28]
 8019248:	f7fe f99c 	bl	8017584 <tcp_abort>
            goto aborted;
 801924c:	e091      	b.n	8019372 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801924e:	69fb      	ldr	r3, [r7, #28]
 8019250:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019254:	2b00      	cmp	r3, #0
 8019256:	d00c      	beq.n	8019272 <tcp_input+0x656>
 8019258:	69fb      	ldr	r3, [r7, #28]
 801925a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801925e:	69fb      	ldr	r3, [r7, #28]
 8019260:	6918      	ldr	r0, [r3, #16]
 8019262:	4b39      	ldr	r3, [pc, #228]	; (8019348 <tcp_input+0x72c>)
 8019264:	681a      	ldr	r2, [r3, #0]
 8019266:	2300      	movs	r3, #0
 8019268:	69f9      	ldr	r1, [r7, #28]
 801926a:	47a0      	blx	r4
 801926c:	4603      	mov	r3, r0
 801926e:	74fb      	strb	r3, [r7, #19]
 8019270:	e008      	b.n	8019284 <tcp_input+0x668>
 8019272:	4b35      	ldr	r3, [pc, #212]	; (8019348 <tcp_input+0x72c>)
 8019274:	681a      	ldr	r2, [r3, #0]
 8019276:	2300      	movs	r3, #0
 8019278:	69f9      	ldr	r1, [r7, #28]
 801927a:	2000      	movs	r0, #0
 801927c:	f7ff f8a8 	bl	80183d0 <tcp_recv_null>
 8019280:	4603      	mov	r3, r0
 8019282:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8019284:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019288:	f113 0f0d 	cmn.w	r3, #13
 801928c:	d053      	beq.n	8019336 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801928e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019292:	2b00      	cmp	r3, #0
 8019294:	d003      	beq.n	801929e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8019296:	4b2c      	ldr	r3, [pc, #176]	; (8019348 <tcp_input+0x72c>)
 8019298:	681a      	ldr	r2, [r3, #0]
 801929a:	69fb      	ldr	r3, [r7, #28]
 801929c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801929e:	4b2b      	ldr	r3, [pc, #172]	; (801934c <tcp_input+0x730>)
 80192a0:	781b      	ldrb	r3, [r3, #0]
 80192a2:	f003 0320 	and.w	r3, r3, #32
 80192a6:	2b00      	cmp	r3, #0
 80192a8:	d030      	beq.n	801930c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80192aa:	69fb      	ldr	r3, [r7, #28]
 80192ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80192ae:	2b00      	cmp	r3, #0
 80192b0:	d009      	beq.n	80192c6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80192b2:	69fb      	ldr	r3, [r7, #28]
 80192b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80192b6:	7b5a      	ldrb	r2, [r3, #13]
 80192b8:	69fb      	ldr	r3, [r7, #28]
 80192ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80192bc:	f042 0220 	orr.w	r2, r2, #32
 80192c0:	b2d2      	uxtb	r2, r2
 80192c2:	735a      	strb	r2, [r3, #13]
 80192c4:	e022      	b.n	801930c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80192c6:	69fb      	ldr	r3, [r7, #28]
 80192c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80192ca:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80192ce:	d005      	beq.n	80192dc <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80192d0:	69fb      	ldr	r3, [r7, #28]
 80192d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80192d4:	3301      	adds	r3, #1
 80192d6:	b29a      	uxth	r2, r3
 80192d8:	69fb      	ldr	r3, [r7, #28]
 80192da:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80192dc:	69fb      	ldr	r3, [r7, #28]
 80192de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80192e2:	2b00      	cmp	r3, #0
 80192e4:	d00b      	beq.n	80192fe <tcp_input+0x6e2>
 80192e6:	69fb      	ldr	r3, [r7, #28]
 80192e8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80192ec:	69fb      	ldr	r3, [r7, #28]
 80192ee:	6918      	ldr	r0, [r3, #16]
 80192f0:	2300      	movs	r3, #0
 80192f2:	2200      	movs	r2, #0
 80192f4:	69f9      	ldr	r1, [r7, #28]
 80192f6:	47a0      	blx	r4
 80192f8:	4603      	mov	r3, r0
 80192fa:	74fb      	strb	r3, [r7, #19]
 80192fc:	e001      	b.n	8019302 <tcp_input+0x6e6>
 80192fe:	2300      	movs	r3, #0
 8019300:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8019302:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019306:	f113 0f0d 	cmn.w	r3, #13
 801930a:	d016      	beq.n	801933a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801930c:	4b13      	ldr	r3, [pc, #76]	; (801935c <tcp_input+0x740>)
 801930e:	2200      	movs	r2, #0
 8019310:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8019312:	69f8      	ldr	r0, [r7, #28]
 8019314:	f000 f88e 	bl	8019434 <tcp_input_delayed_close>
 8019318:	4603      	mov	r3, r0
 801931a:	2b00      	cmp	r3, #0
 801931c:	d128      	bne.n	8019370 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801931e:	69f8      	ldr	r0, [r7, #28]
 8019320:	f002 ff20 	bl	801c164 <tcp_output>
 8019324:	e025      	b.n	8019372 <tcp_input+0x756>
        goto aborted;
 8019326:	bf00      	nop
 8019328:	e023      	b.n	8019372 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801932a:	bf00      	nop
 801932c:	e021      	b.n	8019372 <tcp_input+0x756>
              goto aborted;
 801932e:	bf00      	nop
 8019330:	e01f      	b.n	8019372 <tcp_input+0x756>
          goto aborted;
 8019332:	bf00      	nop
 8019334:	e01d      	b.n	8019372 <tcp_input+0x756>
            goto aborted;
 8019336:	bf00      	nop
 8019338:	e01b      	b.n	8019372 <tcp_input+0x756>
              goto aborted;
 801933a:	bf00      	nop
 801933c:	e019      	b.n	8019372 <tcp_input+0x756>
 801933e:	bf00      	nop
 8019340:	200188b4 	.word	0x200188b4
 8019344:	200188c4 	.word	0x200188c4
 8019348:	200188e4 	.word	0x200188e4
 801934c:	200188e1 	.word	0x200188e1
 8019350:	200188dc 	.word	0x200188dc
 8019354:	200188e0 	.word	0x200188e0
 8019358:	200188de 	.word	0x200188de
 801935c:	200188e8 	.word	0x200188e8
 8019360:	200188a8 	.word	0x200188a8
 8019364:	08027e78 	.word	0x08027e78
 8019368:	0802802c 	.word	0x0802802c
 801936c:	08027ec4 	.word	0x08027ec4
          goto aborted;
 8019370:	bf00      	nop
    tcp_input_pcb = NULL;
 8019372:	4b27      	ldr	r3, [pc, #156]	; (8019410 <tcp_input+0x7f4>)
 8019374:	2200      	movs	r2, #0
 8019376:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8019378:	4b26      	ldr	r3, [pc, #152]	; (8019414 <tcp_input+0x7f8>)
 801937a:	2200      	movs	r2, #0
 801937c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801937e:	4b26      	ldr	r3, [pc, #152]	; (8019418 <tcp_input+0x7fc>)
 8019380:	685b      	ldr	r3, [r3, #4]
 8019382:	2b00      	cmp	r3, #0
 8019384:	d03f      	beq.n	8019406 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8019386:	4b24      	ldr	r3, [pc, #144]	; (8019418 <tcp_input+0x7fc>)
 8019388:	685b      	ldr	r3, [r3, #4]
 801938a:	4618      	mov	r0, r3
 801938c:	f7fd fb02 	bl	8016994 <pbuf_free>
      inseg.p = NULL;
 8019390:	4b21      	ldr	r3, [pc, #132]	; (8019418 <tcp_input+0x7fc>)
 8019392:	2200      	movs	r2, #0
 8019394:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8019396:	e036      	b.n	8019406 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8019398:	4b20      	ldr	r3, [pc, #128]	; (801941c <tcp_input+0x800>)
 801939a:	681b      	ldr	r3, [r3, #0]
 801939c:	899b      	ldrh	r3, [r3, #12]
 801939e:	b29b      	uxth	r3, r3
 80193a0:	4618      	mov	r0, r3
 80193a2:	f7fb ff07 	bl	80151b4 <lwip_htons>
 80193a6:	4603      	mov	r3, r0
 80193a8:	b2db      	uxtb	r3, r3
 80193aa:	f003 0304 	and.w	r3, r3, #4
 80193ae:	2b00      	cmp	r3, #0
 80193b0:	d118      	bne.n	80193e4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80193b2:	4b1b      	ldr	r3, [pc, #108]	; (8019420 <tcp_input+0x804>)
 80193b4:	6819      	ldr	r1, [r3, #0]
 80193b6:	4b1b      	ldr	r3, [pc, #108]	; (8019424 <tcp_input+0x808>)
 80193b8:	881b      	ldrh	r3, [r3, #0]
 80193ba:	461a      	mov	r2, r3
 80193bc:	4b1a      	ldr	r3, [pc, #104]	; (8019428 <tcp_input+0x80c>)
 80193be:	681b      	ldr	r3, [r3, #0]
 80193c0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80193c2:	4b16      	ldr	r3, [pc, #88]	; (801941c <tcp_input+0x800>)
 80193c4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80193c6:	885b      	ldrh	r3, [r3, #2]
 80193c8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80193ca:	4a14      	ldr	r2, [pc, #80]	; (801941c <tcp_input+0x800>)
 80193cc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80193ce:	8812      	ldrh	r2, [r2, #0]
 80193d0:	b292      	uxth	r2, r2
 80193d2:	9202      	str	r2, [sp, #8]
 80193d4:	9301      	str	r3, [sp, #4]
 80193d6:	4b15      	ldr	r3, [pc, #84]	; (801942c <tcp_input+0x810>)
 80193d8:	9300      	str	r3, [sp, #0]
 80193da:	4b15      	ldr	r3, [pc, #84]	; (8019430 <tcp_input+0x814>)
 80193dc:	4602      	mov	r2, r0
 80193de:	2000      	movs	r0, #0
 80193e0:	f003 fc74 	bl	801cccc <tcp_rst>
    pbuf_free(p);
 80193e4:	6878      	ldr	r0, [r7, #4]
 80193e6:	f7fd fad5 	bl	8016994 <pbuf_free>
  return;
 80193ea:	e00c      	b.n	8019406 <tcp_input+0x7ea>
    goto dropped;
 80193ec:	bf00      	nop
 80193ee:	e006      	b.n	80193fe <tcp_input+0x7e2>
    goto dropped;
 80193f0:	bf00      	nop
 80193f2:	e004      	b.n	80193fe <tcp_input+0x7e2>
    goto dropped;
 80193f4:	bf00      	nop
 80193f6:	e002      	b.n	80193fe <tcp_input+0x7e2>
      goto dropped;
 80193f8:	bf00      	nop
 80193fa:	e000      	b.n	80193fe <tcp_input+0x7e2>
      goto dropped;
 80193fc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80193fe:	6878      	ldr	r0, [r7, #4]
 8019400:	f7fd fac8 	bl	8016994 <pbuf_free>
 8019404:	e000      	b.n	8019408 <tcp_input+0x7ec>
  return;
 8019406:	bf00      	nop
}
 8019408:	3724      	adds	r7, #36	; 0x24
 801940a:	46bd      	mov	sp, r7
 801940c:	bd90      	pop	{r4, r7, pc}
 801940e:	bf00      	nop
 8019410:	200188e8 	.word	0x200188e8
 8019414:	200188e4 	.word	0x200188e4
 8019418:	200188b4 	.word	0x200188b4
 801941c:	200188c4 	.word	0x200188c4
 8019420:	200188d8 	.word	0x200188d8
 8019424:	200188de 	.word	0x200188de
 8019428:	200188d4 	.word	0x200188d4
 801942c:	20011758 	.word	0x20011758
 8019430:	2001175c 	.word	0x2001175c

08019434 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8019434:	b580      	push	{r7, lr}
 8019436:	b082      	sub	sp, #8
 8019438:	af00      	add	r7, sp, #0
 801943a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	2b00      	cmp	r3, #0
 8019440:	d106      	bne.n	8019450 <tcp_input_delayed_close+0x1c>
 8019442:	4b17      	ldr	r3, [pc, #92]	; (80194a0 <tcp_input_delayed_close+0x6c>)
 8019444:	f240 225a 	movw	r2, #602	; 0x25a
 8019448:	4916      	ldr	r1, [pc, #88]	; (80194a4 <tcp_input_delayed_close+0x70>)
 801944a:	4817      	ldr	r0, [pc, #92]	; (80194a8 <tcp_input_delayed_close+0x74>)
 801944c:	f006 fd8a 	bl	801ff64 <printf>

  if (recv_flags & TF_CLOSED) {
 8019450:	4b16      	ldr	r3, [pc, #88]	; (80194ac <tcp_input_delayed_close+0x78>)
 8019452:	781b      	ldrb	r3, [r3, #0]
 8019454:	f003 0310 	and.w	r3, r3, #16
 8019458:	2b00      	cmp	r3, #0
 801945a:	d01c      	beq.n	8019496 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801945c:	687b      	ldr	r3, [r7, #4]
 801945e:	8b5b      	ldrh	r3, [r3, #26]
 8019460:	f003 0310 	and.w	r3, r3, #16
 8019464:	2b00      	cmp	r3, #0
 8019466:	d10d      	bne.n	8019484 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8019468:	687b      	ldr	r3, [r7, #4]
 801946a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801946e:	2b00      	cmp	r3, #0
 8019470:	d008      	beq.n	8019484 <tcp_input_delayed_close+0x50>
 8019472:	687b      	ldr	r3, [r7, #4]
 8019474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019478:	687a      	ldr	r2, [r7, #4]
 801947a:	6912      	ldr	r2, [r2, #16]
 801947c:	f06f 010e 	mvn.w	r1, #14
 8019480:	4610      	mov	r0, r2
 8019482:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8019484:	6879      	ldr	r1, [r7, #4]
 8019486:	480a      	ldr	r0, [pc, #40]	; (80194b0 <tcp_input_delayed_close+0x7c>)
 8019488:	f7ff fa50 	bl	801892c <tcp_pcb_remove>
    tcp_free(pcb);
 801948c:	6878      	ldr	r0, [r7, #4]
 801948e:	f7fd fd91 	bl	8016fb4 <tcp_free>
    return 1;
 8019492:	2301      	movs	r3, #1
 8019494:	e000      	b.n	8019498 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8019496:	2300      	movs	r3, #0
}
 8019498:	4618      	mov	r0, r3
 801949a:	3708      	adds	r7, #8
 801949c:	46bd      	mov	sp, r7
 801949e:	bd80      	pop	{r7, pc}
 80194a0:	08027e78 	.word	0x08027e78
 80194a4:	08028048 	.word	0x08028048
 80194a8:	08027ec4 	.word	0x08027ec4
 80194ac:	200188e1 	.word	0x200188e1
 80194b0:	200188a8 	.word	0x200188a8

080194b4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80194b4:	b590      	push	{r4, r7, lr}
 80194b6:	b08b      	sub	sp, #44	; 0x2c
 80194b8:	af04      	add	r7, sp, #16
 80194ba:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80194bc:	4b6f      	ldr	r3, [pc, #444]	; (801967c <tcp_listen_input+0x1c8>)
 80194be:	781b      	ldrb	r3, [r3, #0]
 80194c0:	f003 0304 	and.w	r3, r3, #4
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	f040 80d2 	bne.w	801966e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80194ca:	687b      	ldr	r3, [r7, #4]
 80194cc:	2b00      	cmp	r3, #0
 80194ce:	d106      	bne.n	80194de <tcp_listen_input+0x2a>
 80194d0:	4b6b      	ldr	r3, [pc, #428]	; (8019680 <tcp_listen_input+0x1cc>)
 80194d2:	f240 2281 	movw	r2, #641	; 0x281
 80194d6:	496b      	ldr	r1, [pc, #428]	; (8019684 <tcp_listen_input+0x1d0>)
 80194d8:	486b      	ldr	r0, [pc, #428]	; (8019688 <tcp_listen_input+0x1d4>)
 80194da:	f006 fd43 	bl	801ff64 <printf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80194de:	4b67      	ldr	r3, [pc, #412]	; (801967c <tcp_listen_input+0x1c8>)
 80194e0:	781b      	ldrb	r3, [r3, #0]
 80194e2:	f003 0310 	and.w	r3, r3, #16
 80194e6:	2b00      	cmp	r3, #0
 80194e8:	d019      	beq.n	801951e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80194ea:	4b68      	ldr	r3, [pc, #416]	; (801968c <tcp_listen_input+0x1d8>)
 80194ec:	6819      	ldr	r1, [r3, #0]
 80194ee:	4b68      	ldr	r3, [pc, #416]	; (8019690 <tcp_listen_input+0x1dc>)
 80194f0:	881b      	ldrh	r3, [r3, #0]
 80194f2:	461a      	mov	r2, r3
 80194f4:	4b67      	ldr	r3, [pc, #412]	; (8019694 <tcp_listen_input+0x1e0>)
 80194f6:	681b      	ldr	r3, [r3, #0]
 80194f8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80194fa:	4b67      	ldr	r3, [pc, #412]	; (8019698 <tcp_listen_input+0x1e4>)
 80194fc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80194fe:	885b      	ldrh	r3, [r3, #2]
 8019500:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019502:	4a65      	ldr	r2, [pc, #404]	; (8019698 <tcp_listen_input+0x1e4>)
 8019504:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019506:	8812      	ldrh	r2, [r2, #0]
 8019508:	b292      	uxth	r2, r2
 801950a:	9202      	str	r2, [sp, #8]
 801950c:	9301      	str	r3, [sp, #4]
 801950e:	4b63      	ldr	r3, [pc, #396]	; (801969c <tcp_listen_input+0x1e8>)
 8019510:	9300      	str	r3, [sp, #0]
 8019512:	4b63      	ldr	r3, [pc, #396]	; (80196a0 <tcp_listen_input+0x1ec>)
 8019514:	4602      	mov	r2, r0
 8019516:	6878      	ldr	r0, [r7, #4]
 8019518:	f003 fbd8 	bl	801cccc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801951c:	e0a9      	b.n	8019672 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801951e:	4b57      	ldr	r3, [pc, #348]	; (801967c <tcp_listen_input+0x1c8>)
 8019520:	781b      	ldrb	r3, [r3, #0]
 8019522:	f003 0302 	and.w	r3, r3, #2
 8019526:	2b00      	cmp	r3, #0
 8019528:	f000 80a3 	beq.w	8019672 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801952c:	687b      	ldr	r3, [r7, #4]
 801952e:	7d5b      	ldrb	r3, [r3, #21]
 8019530:	4618      	mov	r0, r3
 8019532:	f7ff f871 	bl	8018618 <tcp_alloc>
 8019536:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8019538:	697b      	ldr	r3, [r7, #20]
 801953a:	2b00      	cmp	r3, #0
 801953c:	d111      	bne.n	8019562 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801953e:	687b      	ldr	r3, [r7, #4]
 8019540:	699b      	ldr	r3, [r3, #24]
 8019542:	2b00      	cmp	r3, #0
 8019544:	d00a      	beq.n	801955c <tcp_listen_input+0xa8>
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	699b      	ldr	r3, [r3, #24]
 801954a:	687a      	ldr	r2, [r7, #4]
 801954c:	6910      	ldr	r0, [r2, #16]
 801954e:	f04f 32ff 	mov.w	r2, #4294967295
 8019552:	2100      	movs	r1, #0
 8019554:	4798      	blx	r3
 8019556:	4603      	mov	r3, r0
 8019558:	73bb      	strb	r3, [r7, #14]
      return;
 801955a:	e08b      	b.n	8019674 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801955c:	23f0      	movs	r3, #240	; 0xf0
 801955e:	73bb      	strb	r3, [r7, #14]
      return;
 8019560:	e088      	b.n	8019674 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8019562:	4b50      	ldr	r3, [pc, #320]	; (80196a4 <tcp_listen_input+0x1f0>)
 8019564:	695a      	ldr	r2, [r3, #20]
 8019566:	697b      	ldr	r3, [r7, #20]
 8019568:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801956a:	4b4e      	ldr	r3, [pc, #312]	; (80196a4 <tcp_listen_input+0x1f0>)
 801956c:	691a      	ldr	r2, [r3, #16]
 801956e:	697b      	ldr	r3, [r7, #20]
 8019570:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8019572:	687b      	ldr	r3, [r7, #4]
 8019574:	8ada      	ldrh	r2, [r3, #22]
 8019576:	697b      	ldr	r3, [r7, #20]
 8019578:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801957a:	4b47      	ldr	r3, [pc, #284]	; (8019698 <tcp_listen_input+0x1e4>)
 801957c:	681b      	ldr	r3, [r3, #0]
 801957e:	881b      	ldrh	r3, [r3, #0]
 8019580:	b29a      	uxth	r2, r3
 8019582:	697b      	ldr	r3, [r7, #20]
 8019584:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8019586:	697b      	ldr	r3, [r7, #20]
 8019588:	2203      	movs	r2, #3
 801958a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801958c:	4b41      	ldr	r3, [pc, #260]	; (8019694 <tcp_listen_input+0x1e0>)
 801958e:	681b      	ldr	r3, [r3, #0]
 8019590:	1c5a      	adds	r2, r3, #1
 8019592:	697b      	ldr	r3, [r7, #20]
 8019594:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8019596:	697b      	ldr	r3, [r7, #20]
 8019598:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801959a:	697b      	ldr	r3, [r7, #20]
 801959c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801959e:	6978      	ldr	r0, [r7, #20]
 80195a0:	f7ff fa58 	bl	8018a54 <tcp_next_iss>
 80195a4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80195a6:	697b      	ldr	r3, [r7, #20]
 80195a8:	693a      	ldr	r2, [r7, #16]
 80195aa:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80195ac:	697b      	ldr	r3, [r7, #20]
 80195ae:	693a      	ldr	r2, [r7, #16]
 80195b0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80195b2:	697b      	ldr	r3, [r7, #20]
 80195b4:	693a      	ldr	r2, [r7, #16]
 80195b6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80195b8:	697b      	ldr	r3, [r7, #20]
 80195ba:	693a      	ldr	r2, [r7, #16]
 80195bc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80195be:	4b35      	ldr	r3, [pc, #212]	; (8019694 <tcp_listen_input+0x1e0>)
 80195c0:	681b      	ldr	r3, [r3, #0]
 80195c2:	1e5a      	subs	r2, r3, #1
 80195c4:	697b      	ldr	r3, [r7, #20]
 80195c6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	691a      	ldr	r2, [r3, #16]
 80195cc:	697b      	ldr	r3, [r7, #20]
 80195ce:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80195d0:	697b      	ldr	r3, [r7, #20]
 80195d2:	687a      	ldr	r2, [r7, #4]
 80195d4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80195d6:	687b      	ldr	r3, [r7, #4]
 80195d8:	7a5b      	ldrb	r3, [r3, #9]
 80195da:	f003 030c 	and.w	r3, r3, #12
 80195de:	b2da      	uxtb	r2, r3
 80195e0:	697b      	ldr	r3, [r7, #20]
 80195e2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	7a1a      	ldrb	r2, [r3, #8]
 80195e8:	697b      	ldr	r3, [r7, #20]
 80195ea:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80195ec:	4b2e      	ldr	r3, [pc, #184]	; (80196a8 <tcp_listen_input+0x1f4>)
 80195ee:	681a      	ldr	r2, [r3, #0]
 80195f0:	697b      	ldr	r3, [r7, #20]
 80195f2:	60da      	str	r2, [r3, #12]
 80195f4:	4a2c      	ldr	r2, [pc, #176]	; (80196a8 <tcp_listen_input+0x1f4>)
 80195f6:	697b      	ldr	r3, [r7, #20]
 80195f8:	6013      	str	r3, [r2, #0]
 80195fa:	f003 fd29 	bl	801d050 <tcp_timer_needed>
 80195fe:	4b2b      	ldr	r3, [pc, #172]	; (80196ac <tcp_listen_input+0x1f8>)
 8019600:	2201      	movs	r2, #1
 8019602:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8019604:	6978      	ldr	r0, [r7, #20]
 8019606:	f001 fd8f 	bl	801b128 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801960a:	4b23      	ldr	r3, [pc, #140]	; (8019698 <tcp_listen_input+0x1e4>)
 801960c:	681b      	ldr	r3, [r3, #0]
 801960e:	89db      	ldrh	r3, [r3, #14]
 8019610:	b29a      	uxth	r2, r3
 8019612:	697b      	ldr	r3, [r7, #20]
 8019614:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8019618:	697b      	ldr	r3, [r7, #20]
 801961a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801961e:	697b      	ldr	r3, [r7, #20]
 8019620:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8019624:	697b      	ldr	r3, [r7, #20]
 8019626:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8019628:	697b      	ldr	r3, [r7, #20]
 801962a:	3304      	adds	r3, #4
 801962c:	4618      	mov	r0, r3
 801962e:	f005 f957 	bl	801e8e0 <ip4_route>
 8019632:	4601      	mov	r1, r0
 8019634:	697b      	ldr	r3, [r7, #20]
 8019636:	3304      	adds	r3, #4
 8019638:	461a      	mov	r2, r3
 801963a:	4620      	mov	r0, r4
 801963c:	f7ff fa30 	bl	8018aa0 <tcp_eff_send_mss_netif>
 8019640:	4603      	mov	r3, r0
 8019642:	461a      	mov	r2, r3
 8019644:	697b      	ldr	r3, [r7, #20]
 8019646:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8019648:	2112      	movs	r1, #18
 801964a:	6978      	ldr	r0, [r7, #20]
 801964c:	f002 fc9c 	bl	801bf88 <tcp_enqueue_flags>
 8019650:	4603      	mov	r3, r0
 8019652:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8019654:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019658:	2b00      	cmp	r3, #0
 801965a:	d004      	beq.n	8019666 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801965c:	2100      	movs	r1, #0
 801965e:	6978      	ldr	r0, [r7, #20]
 8019660:	f7fd fed2 	bl	8017408 <tcp_abandon>
      return;
 8019664:	e006      	b.n	8019674 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8019666:	6978      	ldr	r0, [r7, #20]
 8019668:	f002 fd7c 	bl	801c164 <tcp_output>
  return;
 801966c:	e001      	b.n	8019672 <tcp_listen_input+0x1be>
    return;
 801966e:	bf00      	nop
 8019670:	e000      	b.n	8019674 <tcp_listen_input+0x1c0>
  return;
 8019672:	bf00      	nop
}
 8019674:	371c      	adds	r7, #28
 8019676:	46bd      	mov	sp, r7
 8019678:	bd90      	pop	{r4, r7, pc}
 801967a:	bf00      	nop
 801967c:	200188e0 	.word	0x200188e0
 8019680:	08027e78 	.word	0x08027e78
 8019684:	08028070 	.word	0x08028070
 8019688:	08027ec4 	.word	0x08027ec4
 801968c:	200188d8 	.word	0x200188d8
 8019690:	200188de 	.word	0x200188de
 8019694:	200188d4 	.word	0x200188d4
 8019698:	200188c4 	.word	0x200188c4
 801969c:	20011758 	.word	0x20011758
 80196a0:	2001175c 	.word	0x2001175c
 80196a4:	20011748 	.word	0x20011748
 80196a8:	200188a8 	.word	0x200188a8
 80196ac:	200188b0 	.word	0x200188b0

080196b0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80196b0:	b580      	push	{r7, lr}
 80196b2:	b086      	sub	sp, #24
 80196b4:	af04      	add	r7, sp, #16
 80196b6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80196b8:	4b2f      	ldr	r3, [pc, #188]	; (8019778 <tcp_timewait_input+0xc8>)
 80196ba:	781b      	ldrb	r3, [r3, #0]
 80196bc:	f003 0304 	and.w	r3, r3, #4
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d153      	bne.n	801976c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80196c4:	687b      	ldr	r3, [r7, #4]
 80196c6:	2b00      	cmp	r3, #0
 80196c8:	d106      	bne.n	80196d8 <tcp_timewait_input+0x28>
 80196ca:	4b2c      	ldr	r3, [pc, #176]	; (801977c <tcp_timewait_input+0xcc>)
 80196cc:	f240 22ee 	movw	r2, #750	; 0x2ee
 80196d0:	492b      	ldr	r1, [pc, #172]	; (8019780 <tcp_timewait_input+0xd0>)
 80196d2:	482c      	ldr	r0, [pc, #176]	; (8019784 <tcp_timewait_input+0xd4>)
 80196d4:	f006 fc46 	bl	801ff64 <printf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80196d8:	4b27      	ldr	r3, [pc, #156]	; (8019778 <tcp_timewait_input+0xc8>)
 80196da:	781b      	ldrb	r3, [r3, #0]
 80196dc:	f003 0302 	and.w	r3, r3, #2
 80196e0:	2b00      	cmp	r3, #0
 80196e2:	d02a      	beq.n	801973a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80196e4:	4b28      	ldr	r3, [pc, #160]	; (8019788 <tcp_timewait_input+0xd8>)
 80196e6:	681a      	ldr	r2, [r3, #0]
 80196e8:	687b      	ldr	r3, [r7, #4]
 80196ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196ec:	1ad3      	subs	r3, r2, r3
 80196ee:	2b00      	cmp	r3, #0
 80196f0:	db2d      	blt.n	801974e <tcp_timewait_input+0x9e>
 80196f2:	4b25      	ldr	r3, [pc, #148]	; (8019788 <tcp_timewait_input+0xd8>)
 80196f4:	681a      	ldr	r2, [r3, #0]
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196fa:	6879      	ldr	r1, [r7, #4]
 80196fc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80196fe:	440b      	add	r3, r1
 8019700:	1ad3      	subs	r3, r2, r3
 8019702:	2b00      	cmp	r3, #0
 8019704:	dc23      	bgt.n	801974e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019706:	4b21      	ldr	r3, [pc, #132]	; (801978c <tcp_timewait_input+0xdc>)
 8019708:	6819      	ldr	r1, [r3, #0]
 801970a:	4b21      	ldr	r3, [pc, #132]	; (8019790 <tcp_timewait_input+0xe0>)
 801970c:	881b      	ldrh	r3, [r3, #0]
 801970e:	461a      	mov	r2, r3
 8019710:	4b1d      	ldr	r3, [pc, #116]	; (8019788 <tcp_timewait_input+0xd8>)
 8019712:	681b      	ldr	r3, [r3, #0]
 8019714:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019716:	4b1f      	ldr	r3, [pc, #124]	; (8019794 <tcp_timewait_input+0xe4>)
 8019718:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801971a:	885b      	ldrh	r3, [r3, #2]
 801971c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801971e:	4a1d      	ldr	r2, [pc, #116]	; (8019794 <tcp_timewait_input+0xe4>)
 8019720:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019722:	8812      	ldrh	r2, [r2, #0]
 8019724:	b292      	uxth	r2, r2
 8019726:	9202      	str	r2, [sp, #8]
 8019728:	9301      	str	r3, [sp, #4]
 801972a:	4b1b      	ldr	r3, [pc, #108]	; (8019798 <tcp_timewait_input+0xe8>)
 801972c:	9300      	str	r3, [sp, #0]
 801972e:	4b1b      	ldr	r3, [pc, #108]	; (801979c <tcp_timewait_input+0xec>)
 8019730:	4602      	mov	r2, r0
 8019732:	6878      	ldr	r0, [r7, #4]
 8019734:	f003 faca 	bl	801cccc <tcp_rst>
      return;
 8019738:	e01b      	b.n	8019772 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801973a:	4b0f      	ldr	r3, [pc, #60]	; (8019778 <tcp_timewait_input+0xc8>)
 801973c:	781b      	ldrb	r3, [r3, #0]
 801973e:	f003 0301 	and.w	r3, r3, #1
 8019742:	2b00      	cmp	r3, #0
 8019744:	d003      	beq.n	801974e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8019746:	4b16      	ldr	r3, [pc, #88]	; (80197a0 <tcp_timewait_input+0xf0>)
 8019748:	681a      	ldr	r2, [r3, #0]
 801974a:	687b      	ldr	r3, [r7, #4]
 801974c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801974e:	4b10      	ldr	r3, [pc, #64]	; (8019790 <tcp_timewait_input+0xe0>)
 8019750:	881b      	ldrh	r3, [r3, #0]
 8019752:	2b00      	cmp	r3, #0
 8019754:	d00c      	beq.n	8019770 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8019756:	687b      	ldr	r3, [r7, #4]
 8019758:	8b5b      	ldrh	r3, [r3, #26]
 801975a:	f043 0302 	orr.w	r3, r3, #2
 801975e:	b29a      	uxth	r2, r3
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8019764:	6878      	ldr	r0, [r7, #4]
 8019766:	f002 fcfd 	bl	801c164 <tcp_output>
  }
  return;
 801976a:	e001      	b.n	8019770 <tcp_timewait_input+0xc0>
    return;
 801976c:	bf00      	nop
 801976e:	e000      	b.n	8019772 <tcp_timewait_input+0xc2>
  return;
 8019770:	bf00      	nop
}
 8019772:	3708      	adds	r7, #8
 8019774:	46bd      	mov	sp, r7
 8019776:	bd80      	pop	{r7, pc}
 8019778:	200188e0 	.word	0x200188e0
 801977c:	08027e78 	.word	0x08027e78
 8019780:	08028090 	.word	0x08028090
 8019784:	08027ec4 	.word	0x08027ec4
 8019788:	200188d4 	.word	0x200188d4
 801978c:	200188d8 	.word	0x200188d8
 8019790:	200188de 	.word	0x200188de
 8019794:	200188c4 	.word	0x200188c4
 8019798:	20011758 	.word	0x20011758
 801979c:	2001175c 	.word	0x2001175c
 80197a0:	2001889c 	.word	0x2001889c

080197a4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80197a4:	b590      	push	{r4, r7, lr}
 80197a6:	b08d      	sub	sp, #52	; 0x34
 80197a8:	af04      	add	r7, sp, #16
 80197aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80197ac:	2300      	movs	r3, #0
 80197ae:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80197b0:	2300      	movs	r3, #0
 80197b2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	2b00      	cmp	r3, #0
 80197b8:	d106      	bne.n	80197c8 <tcp_process+0x24>
 80197ba:	4b9d      	ldr	r3, [pc, #628]	; (8019a30 <tcp_process+0x28c>)
 80197bc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80197c0:	499c      	ldr	r1, [pc, #624]	; (8019a34 <tcp_process+0x290>)
 80197c2:	489d      	ldr	r0, [pc, #628]	; (8019a38 <tcp_process+0x294>)
 80197c4:	f006 fbce 	bl	801ff64 <printf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80197c8:	4b9c      	ldr	r3, [pc, #624]	; (8019a3c <tcp_process+0x298>)
 80197ca:	781b      	ldrb	r3, [r3, #0]
 80197cc:	f003 0304 	and.w	r3, r3, #4
 80197d0:	2b00      	cmp	r3, #0
 80197d2:	d04e      	beq.n	8019872 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80197d4:	687b      	ldr	r3, [r7, #4]
 80197d6:	7d1b      	ldrb	r3, [r3, #20]
 80197d8:	2b02      	cmp	r3, #2
 80197da:	d108      	bne.n	80197ee <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80197e0:	4b97      	ldr	r3, [pc, #604]	; (8019a40 <tcp_process+0x29c>)
 80197e2:	681b      	ldr	r3, [r3, #0]
 80197e4:	429a      	cmp	r2, r3
 80197e6:	d123      	bne.n	8019830 <tcp_process+0x8c>
        acceptable = 1;
 80197e8:	2301      	movs	r3, #1
 80197ea:	76fb      	strb	r3, [r7, #27]
 80197ec:	e020      	b.n	8019830 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80197f2:	4b94      	ldr	r3, [pc, #592]	; (8019a44 <tcp_process+0x2a0>)
 80197f4:	681b      	ldr	r3, [r3, #0]
 80197f6:	429a      	cmp	r2, r3
 80197f8:	d102      	bne.n	8019800 <tcp_process+0x5c>
        acceptable = 1;
 80197fa:	2301      	movs	r3, #1
 80197fc:	76fb      	strb	r3, [r7, #27]
 80197fe:	e017      	b.n	8019830 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019800:	4b90      	ldr	r3, [pc, #576]	; (8019a44 <tcp_process+0x2a0>)
 8019802:	681a      	ldr	r2, [r3, #0]
 8019804:	687b      	ldr	r3, [r7, #4]
 8019806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019808:	1ad3      	subs	r3, r2, r3
 801980a:	2b00      	cmp	r3, #0
 801980c:	db10      	blt.n	8019830 <tcp_process+0x8c>
 801980e:	4b8d      	ldr	r3, [pc, #564]	; (8019a44 <tcp_process+0x2a0>)
 8019810:	681a      	ldr	r2, [r3, #0]
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019816:	6879      	ldr	r1, [r7, #4]
 8019818:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801981a:	440b      	add	r3, r1
 801981c:	1ad3      	subs	r3, r2, r3
 801981e:	2b00      	cmp	r3, #0
 8019820:	dc06      	bgt.n	8019830 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8019822:	687b      	ldr	r3, [r7, #4]
 8019824:	8b5b      	ldrh	r3, [r3, #26]
 8019826:	f043 0302 	orr.w	r3, r3, #2
 801982a:	b29a      	uxth	r2, r3
 801982c:	687b      	ldr	r3, [r7, #4]
 801982e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8019830:	7efb      	ldrb	r3, [r7, #27]
 8019832:	2b00      	cmp	r3, #0
 8019834:	d01b      	beq.n	801986e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8019836:	687b      	ldr	r3, [r7, #4]
 8019838:	7d1b      	ldrb	r3, [r3, #20]
 801983a:	2b00      	cmp	r3, #0
 801983c:	d106      	bne.n	801984c <tcp_process+0xa8>
 801983e:	4b7c      	ldr	r3, [pc, #496]	; (8019a30 <tcp_process+0x28c>)
 8019840:	f44f 724e 	mov.w	r2, #824	; 0x338
 8019844:	4980      	ldr	r1, [pc, #512]	; (8019a48 <tcp_process+0x2a4>)
 8019846:	487c      	ldr	r0, [pc, #496]	; (8019a38 <tcp_process+0x294>)
 8019848:	f006 fb8c 	bl	801ff64 <printf>
      recv_flags |= TF_RESET;
 801984c:	4b7f      	ldr	r3, [pc, #508]	; (8019a4c <tcp_process+0x2a8>)
 801984e:	781b      	ldrb	r3, [r3, #0]
 8019850:	f043 0308 	orr.w	r3, r3, #8
 8019854:	b2da      	uxtb	r2, r3
 8019856:	4b7d      	ldr	r3, [pc, #500]	; (8019a4c <tcp_process+0x2a8>)
 8019858:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	8b5b      	ldrh	r3, [r3, #26]
 801985e:	f023 0301 	bic.w	r3, r3, #1
 8019862:	b29a      	uxth	r2, r3
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8019868:	f06f 030d 	mvn.w	r3, #13
 801986c:	e37a      	b.n	8019f64 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801986e:	2300      	movs	r3, #0
 8019870:	e378      	b.n	8019f64 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8019872:	4b72      	ldr	r3, [pc, #456]	; (8019a3c <tcp_process+0x298>)
 8019874:	781b      	ldrb	r3, [r3, #0]
 8019876:	f003 0302 	and.w	r3, r3, #2
 801987a:	2b00      	cmp	r3, #0
 801987c:	d010      	beq.n	80198a0 <tcp_process+0xfc>
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	7d1b      	ldrb	r3, [r3, #20]
 8019882:	2b02      	cmp	r3, #2
 8019884:	d00c      	beq.n	80198a0 <tcp_process+0xfc>
 8019886:	687b      	ldr	r3, [r7, #4]
 8019888:	7d1b      	ldrb	r3, [r3, #20]
 801988a:	2b03      	cmp	r3, #3
 801988c:	d008      	beq.n	80198a0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	8b5b      	ldrh	r3, [r3, #26]
 8019892:	f043 0302 	orr.w	r3, r3, #2
 8019896:	b29a      	uxth	r2, r3
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801989c:	2300      	movs	r3, #0
 801989e:	e361      	b.n	8019f64 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	8b5b      	ldrh	r3, [r3, #26]
 80198a4:	f003 0310 	and.w	r3, r3, #16
 80198a8:	2b00      	cmp	r3, #0
 80198aa:	d103      	bne.n	80198b4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80198ac:	4b68      	ldr	r3, [pc, #416]	; (8019a50 <tcp_process+0x2ac>)
 80198ae:	681a      	ldr	r2, [r3, #0]
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	2200      	movs	r2, #0
 80198b8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	2200      	movs	r2, #0
 80198c0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80198c4:	6878      	ldr	r0, [r7, #4]
 80198c6:	f001 fc2f 	bl	801b128 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80198ca:	687b      	ldr	r3, [r7, #4]
 80198cc:	7d1b      	ldrb	r3, [r3, #20]
 80198ce:	3b02      	subs	r3, #2
 80198d0:	2b07      	cmp	r3, #7
 80198d2:	f200 8337 	bhi.w	8019f44 <tcp_process+0x7a0>
 80198d6:	a201      	add	r2, pc, #4	; (adr r2, 80198dc <tcp_process+0x138>)
 80198d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80198dc:	080198fd 	.word	0x080198fd
 80198e0:	08019b2d 	.word	0x08019b2d
 80198e4:	08019ca5 	.word	0x08019ca5
 80198e8:	08019ccf 	.word	0x08019ccf
 80198ec:	08019df3 	.word	0x08019df3
 80198f0:	08019ca5 	.word	0x08019ca5
 80198f4:	08019e7f 	.word	0x08019e7f
 80198f8:	08019f0f 	.word	0x08019f0f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80198fc:	4b4f      	ldr	r3, [pc, #316]	; (8019a3c <tcp_process+0x298>)
 80198fe:	781b      	ldrb	r3, [r3, #0]
 8019900:	f003 0310 	and.w	r3, r3, #16
 8019904:	2b00      	cmp	r3, #0
 8019906:	f000 80e4 	beq.w	8019ad2 <tcp_process+0x32e>
 801990a:	4b4c      	ldr	r3, [pc, #304]	; (8019a3c <tcp_process+0x298>)
 801990c:	781b      	ldrb	r3, [r3, #0]
 801990e:	f003 0302 	and.w	r3, r3, #2
 8019912:	2b00      	cmp	r3, #0
 8019914:	f000 80dd 	beq.w	8019ad2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801991c:	1c5a      	adds	r2, r3, #1
 801991e:	4b48      	ldr	r3, [pc, #288]	; (8019a40 <tcp_process+0x29c>)
 8019920:	681b      	ldr	r3, [r3, #0]
 8019922:	429a      	cmp	r2, r3
 8019924:	f040 80d5 	bne.w	8019ad2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8019928:	4b46      	ldr	r3, [pc, #280]	; (8019a44 <tcp_process+0x2a0>)
 801992a:	681b      	ldr	r3, [r3, #0]
 801992c:	1c5a      	adds	r2, r3, #1
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801993a:	4b41      	ldr	r3, [pc, #260]	; (8019a40 <tcp_process+0x29c>)
 801993c:	681a      	ldr	r2, [r3, #0]
 801993e:	687b      	ldr	r3, [r7, #4]
 8019940:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8019942:	4b44      	ldr	r3, [pc, #272]	; (8019a54 <tcp_process+0x2b0>)
 8019944:	681b      	ldr	r3, [r3, #0]
 8019946:	89db      	ldrh	r3, [r3, #14]
 8019948:	b29a      	uxth	r2, r3
 801994a:	687b      	ldr	r3, [r7, #4]
 801994c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8019950:	687b      	ldr	r3, [r7, #4]
 8019952:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8019956:	687b      	ldr	r3, [r7, #4]
 8019958:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801995c:	4b39      	ldr	r3, [pc, #228]	; (8019a44 <tcp_process+0x2a0>)
 801995e:	681b      	ldr	r3, [r3, #0]
 8019960:	1e5a      	subs	r2, r3, #1
 8019962:	687b      	ldr	r3, [r7, #4]
 8019964:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8019966:	687b      	ldr	r3, [r7, #4]
 8019968:	2204      	movs	r2, #4
 801996a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801996c:	687b      	ldr	r3, [r7, #4]
 801996e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8019970:	687b      	ldr	r3, [r7, #4]
 8019972:	3304      	adds	r3, #4
 8019974:	4618      	mov	r0, r3
 8019976:	f004 ffb3 	bl	801e8e0 <ip4_route>
 801997a:	4601      	mov	r1, r0
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	3304      	adds	r3, #4
 8019980:	461a      	mov	r2, r3
 8019982:	4620      	mov	r0, r4
 8019984:	f7ff f88c 	bl	8018aa0 <tcp_eff_send_mss_netif>
 8019988:	4603      	mov	r3, r0
 801998a:	461a      	mov	r2, r3
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8019990:	687b      	ldr	r3, [r7, #4]
 8019992:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019994:	009a      	lsls	r2, r3, #2
 8019996:	687b      	ldr	r3, [r7, #4]
 8019998:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801999a:	005b      	lsls	r3, r3, #1
 801999c:	f241 111c 	movw	r1, #4380	; 0x111c
 80199a0:	428b      	cmp	r3, r1
 80199a2:	bf38      	it	cc
 80199a4:	460b      	movcc	r3, r1
 80199a6:	429a      	cmp	r2, r3
 80199a8:	d204      	bcs.n	80199b4 <tcp_process+0x210>
 80199aa:	687b      	ldr	r3, [r7, #4]
 80199ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80199ae:	009b      	lsls	r3, r3, #2
 80199b0:	b29b      	uxth	r3, r3
 80199b2:	e00d      	b.n	80199d0 <tcp_process+0x22c>
 80199b4:	687b      	ldr	r3, [r7, #4]
 80199b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80199b8:	005b      	lsls	r3, r3, #1
 80199ba:	f241 121c 	movw	r2, #4380	; 0x111c
 80199be:	4293      	cmp	r3, r2
 80199c0:	d904      	bls.n	80199cc <tcp_process+0x228>
 80199c2:	687b      	ldr	r3, [r7, #4]
 80199c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80199c6:	005b      	lsls	r3, r3, #1
 80199c8:	b29b      	uxth	r3, r3
 80199ca:	e001      	b.n	80199d0 <tcp_process+0x22c>
 80199cc:	f241 131c 	movw	r3, #4380	; 0x111c
 80199d0:	687a      	ldr	r2, [r7, #4]
 80199d2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80199d6:	687b      	ldr	r3, [r7, #4]
 80199d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80199dc:	2b00      	cmp	r3, #0
 80199de:	d106      	bne.n	80199ee <tcp_process+0x24a>
 80199e0:	4b13      	ldr	r3, [pc, #76]	; (8019a30 <tcp_process+0x28c>)
 80199e2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80199e6:	491c      	ldr	r1, [pc, #112]	; (8019a58 <tcp_process+0x2b4>)
 80199e8:	4813      	ldr	r0, [pc, #76]	; (8019a38 <tcp_process+0x294>)
 80199ea:	f006 fabb 	bl	801ff64 <printf>
        --pcb->snd_queuelen;
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80199f4:	3b01      	subs	r3, #1
 80199f6:	b29a      	uxth	r2, r3
 80199f8:	687b      	ldr	r3, [r7, #4]
 80199fa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80199fe:	687b      	ldr	r3, [r7, #4]
 8019a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019a02:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8019a04:	69fb      	ldr	r3, [r7, #28]
 8019a06:	2b00      	cmp	r3, #0
 8019a08:	d12a      	bne.n	8019a60 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019a0e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8019a10:	69fb      	ldr	r3, [r7, #28]
 8019a12:	2b00      	cmp	r3, #0
 8019a14:	d106      	bne.n	8019a24 <tcp_process+0x280>
 8019a16:	4b06      	ldr	r3, [pc, #24]	; (8019a30 <tcp_process+0x28c>)
 8019a18:	f44f 725d 	mov.w	r2, #884	; 0x374
 8019a1c:	490f      	ldr	r1, [pc, #60]	; (8019a5c <tcp_process+0x2b8>)
 8019a1e:	4806      	ldr	r0, [pc, #24]	; (8019a38 <tcp_process+0x294>)
 8019a20:	f006 faa0 	bl	801ff64 <printf>
          pcb->unsent = rseg->next;
 8019a24:	69fb      	ldr	r3, [r7, #28]
 8019a26:	681a      	ldr	r2, [r3, #0]
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	66da      	str	r2, [r3, #108]	; 0x6c
 8019a2c:	e01c      	b.n	8019a68 <tcp_process+0x2c4>
 8019a2e:	bf00      	nop
 8019a30:	08027e78 	.word	0x08027e78
 8019a34:	080280b0 	.word	0x080280b0
 8019a38:	08027ec4 	.word	0x08027ec4
 8019a3c:	200188e0 	.word	0x200188e0
 8019a40:	200188d8 	.word	0x200188d8
 8019a44:	200188d4 	.word	0x200188d4
 8019a48:	080280cc 	.word	0x080280cc
 8019a4c:	200188e1 	.word	0x200188e1
 8019a50:	2001889c 	.word	0x2001889c
 8019a54:	200188c4 	.word	0x200188c4
 8019a58:	080280ec 	.word	0x080280ec
 8019a5c:	08028104 	.word	0x08028104
        } else {
          pcb->unacked = rseg->next;
 8019a60:	69fb      	ldr	r3, [r7, #28]
 8019a62:	681a      	ldr	r2, [r3, #0]
 8019a64:	687b      	ldr	r3, [r7, #4]
 8019a66:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8019a68:	69f8      	ldr	r0, [r7, #28]
 8019a6a:	f7fe fc6c 	bl	8018346 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8019a6e:	687b      	ldr	r3, [r7, #4]
 8019a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	d104      	bne.n	8019a80 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8019a76:	687b      	ldr	r3, [r7, #4]
 8019a78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019a7c:	861a      	strh	r2, [r3, #48]	; 0x30
 8019a7e:	e006      	b.n	8019a8e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	2200      	movs	r2, #0
 8019a84:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	2200      	movs	r2, #0
 8019a8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8019a8e:	687b      	ldr	r3, [r7, #4]
 8019a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019a94:	2b00      	cmp	r3, #0
 8019a96:	d00a      	beq.n	8019aae <tcp_process+0x30a>
 8019a98:	687b      	ldr	r3, [r7, #4]
 8019a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019a9e:	687a      	ldr	r2, [r7, #4]
 8019aa0:	6910      	ldr	r0, [r2, #16]
 8019aa2:	2200      	movs	r2, #0
 8019aa4:	6879      	ldr	r1, [r7, #4]
 8019aa6:	4798      	blx	r3
 8019aa8:	4603      	mov	r3, r0
 8019aaa:	76bb      	strb	r3, [r7, #26]
 8019aac:	e001      	b.n	8019ab2 <tcp_process+0x30e>
 8019aae:	2300      	movs	r3, #0
 8019ab0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8019ab2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8019ab6:	f113 0f0d 	cmn.w	r3, #13
 8019aba:	d102      	bne.n	8019ac2 <tcp_process+0x31e>
          return ERR_ABRT;
 8019abc:	f06f 030c 	mvn.w	r3, #12
 8019ac0:	e250      	b.n	8019f64 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8019ac2:	687b      	ldr	r3, [r7, #4]
 8019ac4:	8b5b      	ldrh	r3, [r3, #26]
 8019ac6:	f043 0302 	orr.w	r3, r3, #2
 8019aca:	b29a      	uxth	r2, r3
 8019acc:	687b      	ldr	r3, [r7, #4]
 8019ace:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8019ad0:	e23a      	b.n	8019f48 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8019ad2:	4b98      	ldr	r3, [pc, #608]	; (8019d34 <tcp_process+0x590>)
 8019ad4:	781b      	ldrb	r3, [r3, #0]
 8019ad6:	f003 0310 	and.w	r3, r3, #16
 8019ada:	2b00      	cmp	r3, #0
 8019adc:	f000 8234 	beq.w	8019f48 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019ae0:	4b95      	ldr	r3, [pc, #596]	; (8019d38 <tcp_process+0x594>)
 8019ae2:	6819      	ldr	r1, [r3, #0]
 8019ae4:	4b95      	ldr	r3, [pc, #596]	; (8019d3c <tcp_process+0x598>)
 8019ae6:	881b      	ldrh	r3, [r3, #0]
 8019ae8:	461a      	mov	r2, r3
 8019aea:	4b95      	ldr	r3, [pc, #596]	; (8019d40 <tcp_process+0x59c>)
 8019aec:	681b      	ldr	r3, [r3, #0]
 8019aee:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019af0:	4b94      	ldr	r3, [pc, #592]	; (8019d44 <tcp_process+0x5a0>)
 8019af2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019af4:	885b      	ldrh	r3, [r3, #2]
 8019af6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019af8:	4a92      	ldr	r2, [pc, #584]	; (8019d44 <tcp_process+0x5a0>)
 8019afa:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019afc:	8812      	ldrh	r2, [r2, #0]
 8019afe:	b292      	uxth	r2, r2
 8019b00:	9202      	str	r2, [sp, #8]
 8019b02:	9301      	str	r3, [sp, #4]
 8019b04:	4b90      	ldr	r3, [pc, #576]	; (8019d48 <tcp_process+0x5a4>)
 8019b06:	9300      	str	r3, [sp, #0]
 8019b08:	4b90      	ldr	r3, [pc, #576]	; (8019d4c <tcp_process+0x5a8>)
 8019b0a:	4602      	mov	r2, r0
 8019b0c:	6878      	ldr	r0, [r7, #4]
 8019b0e:	f003 f8dd 	bl	801cccc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8019b12:	687b      	ldr	r3, [r7, #4]
 8019b14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019b18:	2b05      	cmp	r3, #5
 8019b1a:	f200 8215 	bhi.w	8019f48 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8019b1e:	687b      	ldr	r3, [r7, #4]
 8019b20:	2200      	movs	r2, #0
 8019b22:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8019b24:	6878      	ldr	r0, [r7, #4]
 8019b26:	f002 fea7 	bl	801c878 <tcp_rexmit_rto>
      break;
 8019b2a:	e20d      	b.n	8019f48 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8019b2c:	4b81      	ldr	r3, [pc, #516]	; (8019d34 <tcp_process+0x590>)
 8019b2e:	781b      	ldrb	r3, [r3, #0]
 8019b30:	f003 0310 	and.w	r3, r3, #16
 8019b34:	2b00      	cmp	r3, #0
 8019b36:	f000 80a1 	beq.w	8019c7c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019b3a:	4b7f      	ldr	r3, [pc, #508]	; (8019d38 <tcp_process+0x594>)
 8019b3c:	681a      	ldr	r2, [r3, #0]
 8019b3e:	687b      	ldr	r3, [r7, #4]
 8019b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019b42:	1ad3      	subs	r3, r2, r3
 8019b44:	3b01      	subs	r3, #1
 8019b46:	2b00      	cmp	r3, #0
 8019b48:	db7e      	blt.n	8019c48 <tcp_process+0x4a4>
 8019b4a:	4b7b      	ldr	r3, [pc, #492]	; (8019d38 <tcp_process+0x594>)
 8019b4c:	681a      	ldr	r2, [r3, #0]
 8019b4e:	687b      	ldr	r3, [r7, #4]
 8019b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019b52:	1ad3      	subs	r3, r2, r3
 8019b54:	2b00      	cmp	r3, #0
 8019b56:	dc77      	bgt.n	8019c48 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8019b58:	687b      	ldr	r3, [r7, #4]
 8019b5a:	2204      	movs	r2, #4
 8019b5c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8019b5e:	687b      	ldr	r3, [r7, #4]
 8019b60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019b62:	2b00      	cmp	r3, #0
 8019b64:	d102      	bne.n	8019b6c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8019b66:	23fa      	movs	r3, #250	; 0xfa
 8019b68:	76bb      	strb	r3, [r7, #26]
 8019b6a:	e01d      	b.n	8019ba8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019b70:	699b      	ldr	r3, [r3, #24]
 8019b72:	2b00      	cmp	r3, #0
 8019b74:	d106      	bne.n	8019b84 <tcp_process+0x3e0>
 8019b76:	4b76      	ldr	r3, [pc, #472]	; (8019d50 <tcp_process+0x5ac>)
 8019b78:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8019b7c:	4975      	ldr	r1, [pc, #468]	; (8019d54 <tcp_process+0x5b0>)
 8019b7e:	4876      	ldr	r0, [pc, #472]	; (8019d58 <tcp_process+0x5b4>)
 8019b80:	f006 f9f0 	bl	801ff64 <printf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019b88:	699b      	ldr	r3, [r3, #24]
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	d00a      	beq.n	8019ba4 <tcp_process+0x400>
 8019b8e:	687b      	ldr	r3, [r7, #4]
 8019b90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019b92:	699b      	ldr	r3, [r3, #24]
 8019b94:	687a      	ldr	r2, [r7, #4]
 8019b96:	6910      	ldr	r0, [r2, #16]
 8019b98:	2200      	movs	r2, #0
 8019b9a:	6879      	ldr	r1, [r7, #4]
 8019b9c:	4798      	blx	r3
 8019b9e:	4603      	mov	r3, r0
 8019ba0:	76bb      	strb	r3, [r7, #26]
 8019ba2:	e001      	b.n	8019ba8 <tcp_process+0x404>
 8019ba4:	23f0      	movs	r3, #240	; 0xf0
 8019ba6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8019ba8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8019bac:	2b00      	cmp	r3, #0
 8019bae:	d00a      	beq.n	8019bc6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8019bb0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8019bb4:	f113 0f0d 	cmn.w	r3, #13
 8019bb8:	d002      	beq.n	8019bc0 <tcp_process+0x41c>
              tcp_abort(pcb);
 8019bba:	6878      	ldr	r0, [r7, #4]
 8019bbc:	f7fd fce2 	bl	8017584 <tcp_abort>
            }
            return ERR_ABRT;
 8019bc0:	f06f 030c 	mvn.w	r3, #12
 8019bc4:	e1ce      	b.n	8019f64 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8019bc6:	6878      	ldr	r0, [r7, #4]
 8019bc8:	f000 fae0 	bl	801a18c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8019bcc:	4b63      	ldr	r3, [pc, #396]	; (8019d5c <tcp_process+0x5b8>)
 8019bce:	881b      	ldrh	r3, [r3, #0]
 8019bd0:	2b00      	cmp	r3, #0
 8019bd2:	d005      	beq.n	8019be0 <tcp_process+0x43c>
            recv_acked--;
 8019bd4:	4b61      	ldr	r3, [pc, #388]	; (8019d5c <tcp_process+0x5b8>)
 8019bd6:	881b      	ldrh	r3, [r3, #0]
 8019bd8:	3b01      	subs	r3, #1
 8019bda:	b29a      	uxth	r2, r3
 8019bdc:	4b5f      	ldr	r3, [pc, #380]	; (8019d5c <tcp_process+0x5b8>)
 8019bde:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8019be0:	687b      	ldr	r3, [r7, #4]
 8019be2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019be4:	009a      	lsls	r2, r3, #2
 8019be6:	687b      	ldr	r3, [r7, #4]
 8019be8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019bea:	005b      	lsls	r3, r3, #1
 8019bec:	f241 111c 	movw	r1, #4380	; 0x111c
 8019bf0:	428b      	cmp	r3, r1
 8019bf2:	bf38      	it	cc
 8019bf4:	460b      	movcc	r3, r1
 8019bf6:	429a      	cmp	r2, r3
 8019bf8:	d204      	bcs.n	8019c04 <tcp_process+0x460>
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019bfe:	009b      	lsls	r3, r3, #2
 8019c00:	b29b      	uxth	r3, r3
 8019c02:	e00d      	b.n	8019c20 <tcp_process+0x47c>
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019c08:	005b      	lsls	r3, r3, #1
 8019c0a:	f241 121c 	movw	r2, #4380	; 0x111c
 8019c0e:	4293      	cmp	r3, r2
 8019c10:	d904      	bls.n	8019c1c <tcp_process+0x478>
 8019c12:	687b      	ldr	r3, [r7, #4]
 8019c14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019c16:	005b      	lsls	r3, r3, #1
 8019c18:	b29b      	uxth	r3, r3
 8019c1a:	e001      	b.n	8019c20 <tcp_process+0x47c>
 8019c1c:	f241 131c 	movw	r3, #4380	; 0x111c
 8019c20:	687a      	ldr	r2, [r7, #4]
 8019c22:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8019c26:	4b4e      	ldr	r3, [pc, #312]	; (8019d60 <tcp_process+0x5bc>)
 8019c28:	781b      	ldrb	r3, [r3, #0]
 8019c2a:	f003 0320 	and.w	r3, r3, #32
 8019c2e:	2b00      	cmp	r3, #0
 8019c30:	d037      	beq.n	8019ca2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8019c32:	687b      	ldr	r3, [r7, #4]
 8019c34:	8b5b      	ldrh	r3, [r3, #26]
 8019c36:	f043 0302 	orr.w	r3, r3, #2
 8019c3a:	b29a      	uxth	r2, r3
 8019c3c:	687b      	ldr	r3, [r7, #4]
 8019c3e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8019c40:	687b      	ldr	r3, [r7, #4]
 8019c42:	2207      	movs	r2, #7
 8019c44:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8019c46:	e02c      	b.n	8019ca2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019c48:	4b3b      	ldr	r3, [pc, #236]	; (8019d38 <tcp_process+0x594>)
 8019c4a:	6819      	ldr	r1, [r3, #0]
 8019c4c:	4b3b      	ldr	r3, [pc, #236]	; (8019d3c <tcp_process+0x598>)
 8019c4e:	881b      	ldrh	r3, [r3, #0]
 8019c50:	461a      	mov	r2, r3
 8019c52:	4b3b      	ldr	r3, [pc, #236]	; (8019d40 <tcp_process+0x59c>)
 8019c54:	681b      	ldr	r3, [r3, #0]
 8019c56:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019c58:	4b3a      	ldr	r3, [pc, #232]	; (8019d44 <tcp_process+0x5a0>)
 8019c5a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019c5c:	885b      	ldrh	r3, [r3, #2]
 8019c5e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019c60:	4a38      	ldr	r2, [pc, #224]	; (8019d44 <tcp_process+0x5a0>)
 8019c62:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019c64:	8812      	ldrh	r2, [r2, #0]
 8019c66:	b292      	uxth	r2, r2
 8019c68:	9202      	str	r2, [sp, #8]
 8019c6a:	9301      	str	r3, [sp, #4]
 8019c6c:	4b36      	ldr	r3, [pc, #216]	; (8019d48 <tcp_process+0x5a4>)
 8019c6e:	9300      	str	r3, [sp, #0]
 8019c70:	4b36      	ldr	r3, [pc, #216]	; (8019d4c <tcp_process+0x5a8>)
 8019c72:	4602      	mov	r2, r0
 8019c74:	6878      	ldr	r0, [r7, #4]
 8019c76:	f003 f829 	bl	801cccc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8019c7a:	e167      	b.n	8019f4c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8019c7c:	4b2d      	ldr	r3, [pc, #180]	; (8019d34 <tcp_process+0x590>)
 8019c7e:	781b      	ldrb	r3, [r3, #0]
 8019c80:	f003 0302 	and.w	r3, r3, #2
 8019c84:	2b00      	cmp	r3, #0
 8019c86:	f000 8161 	beq.w	8019f4c <tcp_process+0x7a8>
 8019c8a:	687b      	ldr	r3, [r7, #4]
 8019c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c8e:	1e5a      	subs	r2, r3, #1
 8019c90:	4b2b      	ldr	r3, [pc, #172]	; (8019d40 <tcp_process+0x59c>)
 8019c92:	681b      	ldr	r3, [r3, #0]
 8019c94:	429a      	cmp	r2, r3
 8019c96:	f040 8159 	bne.w	8019f4c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8019c9a:	6878      	ldr	r0, [r7, #4]
 8019c9c:	f002 fe0e 	bl	801c8bc <tcp_rexmit>
      break;
 8019ca0:	e154      	b.n	8019f4c <tcp_process+0x7a8>
 8019ca2:	e153      	b.n	8019f4c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8019ca4:	6878      	ldr	r0, [r7, #4]
 8019ca6:	f000 fa71 	bl	801a18c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8019caa:	4b2d      	ldr	r3, [pc, #180]	; (8019d60 <tcp_process+0x5bc>)
 8019cac:	781b      	ldrb	r3, [r3, #0]
 8019cae:	f003 0320 	and.w	r3, r3, #32
 8019cb2:	2b00      	cmp	r3, #0
 8019cb4:	f000 814c 	beq.w	8019f50 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8019cb8:	687b      	ldr	r3, [r7, #4]
 8019cba:	8b5b      	ldrh	r3, [r3, #26]
 8019cbc:	f043 0302 	orr.w	r3, r3, #2
 8019cc0:	b29a      	uxth	r2, r3
 8019cc2:	687b      	ldr	r3, [r7, #4]
 8019cc4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8019cc6:	687b      	ldr	r3, [r7, #4]
 8019cc8:	2207      	movs	r2, #7
 8019cca:	751a      	strb	r2, [r3, #20]
      }
      break;
 8019ccc:	e140      	b.n	8019f50 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8019cce:	6878      	ldr	r0, [r7, #4]
 8019cd0:	f000 fa5c 	bl	801a18c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8019cd4:	4b22      	ldr	r3, [pc, #136]	; (8019d60 <tcp_process+0x5bc>)
 8019cd6:	781b      	ldrb	r3, [r3, #0]
 8019cd8:	f003 0320 	and.w	r3, r3, #32
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	d071      	beq.n	8019dc4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019ce0:	4b14      	ldr	r3, [pc, #80]	; (8019d34 <tcp_process+0x590>)
 8019ce2:	781b      	ldrb	r3, [r3, #0]
 8019ce4:	f003 0310 	and.w	r3, r3, #16
 8019ce8:	2b00      	cmp	r3, #0
 8019cea:	d060      	beq.n	8019dae <tcp_process+0x60a>
 8019cec:	687b      	ldr	r3, [r7, #4]
 8019cee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019cf0:	4b11      	ldr	r3, [pc, #68]	; (8019d38 <tcp_process+0x594>)
 8019cf2:	681b      	ldr	r3, [r3, #0]
 8019cf4:	429a      	cmp	r2, r3
 8019cf6:	d15a      	bne.n	8019dae <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8019cf8:	687b      	ldr	r3, [r7, #4]
 8019cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019cfc:	2b00      	cmp	r3, #0
 8019cfe:	d156      	bne.n	8019dae <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8019d00:	687b      	ldr	r3, [r7, #4]
 8019d02:	8b5b      	ldrh	r3, [r3, #26]
 8019d04:	f043 0302 	orr.w	r3, r3, #2
 8019d08:	b29a      	uxth	r2, r3
 8019d0a:	687b      	ldr	r3, [r7, #4]
 8019d0c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8019d0e:	6878      	ldr	r0, [r7, #4]
 8019d10:	f7fe fdbc 	bl	801888c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8019d14:	4b13      	ldr	r3, [pc, #76]	; (8019d64 <tcp_process+0x5c0>)
 8019d16:	681b      	ldr	r3, [r3, #0]
 8019d18:	687a      	ldr	r2, [r7, #4]
 8019d1a:	429a      	cmp	r2, r3
 8019d1c:	d105      	bne.n	8019d2a <tcp_process+0x586>
 8019d1e:	4b11      	ldr	r3, [pc, #68]	; (8019d64 <tcp_process+0x5c0>)
 8019d20:	681b      	ldr	r3, [r3, #0]
 8019d22:	68db      	ldr	r3, [r3, #12]
 8019d24:	4a0f      	ldr	r2, [pc, #60]	; (8019d64 <tcp_process+0x5c0>)
 8019d26:	6013      	str	r3, [r2, #0]
 8019d28:	e02e      	b.n	8019d88 <tcp_process+0x5e4>
 8019d2a:	4b0e      	ldr	r3, [pc, #56]	; (8019d64 <tcp_process+0x5c0>)
 8019d2c:	681b      	ldr	r3, [r3, #0]
 8019d2e:	617b      	str	r3, [r7, #20]
 8019d30:	e027      	b.n	8019d82 <tcp_process+0x5de>
 8019d32:	bf00      	nop
 8019d34:	200188e0 	.word	0x200188e0
 8019d38:	200188d8 	.word	0x200188d8
 8019d3c:	200188de 	.word	0x200188de
 8019d40:	200188d4 	.word	0x200188d4
 8019d44:	200188c4 	.word	0x200188c4
 8019d48:	20011758 	.word	0x20011758
 8019d4c:	2001175c 	.word	0x2001175c
 8019d50:	08027e78 	.word	0x08027e78
 8019d54:	08028118 	.word	0x08028118
 8019d58:	08027ec4 	.word	0x08027ec4
 8019d5c:	200188dc 	.word	0x200188dc
 8019d60:	200188e1 	.word	0x200188e1
 8019d64:	200188a8 	.word	0x200188a8
 8019d68:	697b      	ldr	r3, [r7, #20]
 8019d6a:	68db      	ldr	r3, [r3, #12]
 8019d6c:	687a      	ldr	r2, [r7, #4]
 8019d6e:	429a      	cmp	r2, r3
 8019d70:	d104      	bne.n	8019d7c <tcp_process+0x5d8>
 8019d72:	687b      	ldr	r3, [r7, #4]
 8019d74:	68da      	ldr	r2, [r3, #12]
 8019d76:	697b      	ldr	r3, [r7, #20]
 8019d78:	60da      	str	r2, [r3, #12]
 8019d7a:	e005      	b.n	8019d88 <tcp_process+0x5e4>
 8019d7c:	697b      	ldr	r3, [r7, #20]
 8019d7e:	68db      	ldr	r3, [r3, #12]
 8019d80:	617b      	str	r3, [r7, #20]
 8019d82:	697b      	ldr	r3, [r7, #20]
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	d1ef      	bne.n	8019d68 <tcp_process+0x5c4>
 8019d88:	687b      	ldr	r3, [r7, #4]
 8019d8a:	2200      	movs	r2, #0
 8019d8c:	60da      	str	r2, [r3, #12]
 8019d8e:	4b77      	ldr	r3, [pc, #476]	; (8019f6c <tcp_process+0x7c8>)
 8019d90:	2201      	movs	r2, #1
 8019d92:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	220a      	movs	r2, #10
 8019d98:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8019d9a:	4b75      	ldr	r3, [pc, #468]	; (8019f70 <tcp_process+0x7cc>)
 8019d9c:	681a      	ldr	r2, [r3, #0]
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	60da      	str	r2, [r3, #12]
 8019da2:	4a73      	ldr	r2, [pc, #460]	; (8019f70 <tcp_process+0x7cc>)
 8019da4:	687b      	ldr	r3, [r7, #4]
 8019da6:	6013      	str	r3, [r2, #0]
 8019da8:	f003 f952 	bl	801d050 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8019dac:	e0d2      	b.n	8019f54 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	8b5b      	ldrh	r3, [r3, #26]
 8019db2:	f043 0302 	orr.w	r3, r3, #2
 8019db6:	b29a      	uxth	r2, r3
 8019db8:	687b      	ldr	r3, [r7, #4]
 8019dba:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	2208      	movs	r2, #8
 8019dc0:	751a      	strb	r2, [r3, #20]
      break;
 8019dc2:	e0c7      	b.n	8019f54 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019dc4:	4b6b      	ldr	r3, [pc, #428]	; (8019f74 <tcp_process+0x7d0>)
 8019dc6:	781b      	ldrb	r3, [r3, #0]
 8019dc8:	f003 0310 	and.w	r3, r3, #16
 8019dcc:	2b00      	cmp	r3, #0
 8019dce:	f000 80c1 	beq.w	8019f54 <tcp_process+0x7b0>
 8019dd2:	687b      	ldr	r3, [r7, #4]
 8019dd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019dd6:	4b68      	ldr	r3, [pc, #416]	; (8019f78 <tcp_process+0x7d4>)
 8019dd8:	681b      	ldr	r3, [r3, #0]
 8019dda:	429a      	cmp	r2, r3
 8019ddc:	f040 80ba 	bne.w	8019f54 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019de4:	2b00      	cmp	r3, #0
 8019de6:	f040 80b5 	bne.w	8019f54 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8019dea:	687b      	ldr	r3, [r7, #4]
 8019dec:	2206      	movs	r2, #6
 8019dee:	751a      	strb	r2, [r3, #20]
      break;
 8019df0:	e0b0      	b.n	8019f54 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8019df2:	6878      	ldr	r0, [r7, #4]
 8019df4:	f000 f9ca 	bl	801a18c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8019df8:	4b60      	ldr	r3, [pc, #384]	; (8019f7c <tcp_process+0x7d8>)
 8019dfa:	781b      	ldrb	r3, [r3, #0]
 8019dfc:	f003 0320 	and.w	r3, r3, #32
 8019e00:	2b00      	cmp	r3, #0
 8019e02:	f000 80a9 	beq.w	8019f58 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	8b5b      	ldrh	r3, [r3, #26]
 8019e0a:	f043 0302 	orr.w	r3, r3, #2
 8019e0e:	b29a      	uxth	r2, r3
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8019e14:	6878      	ldr	r0, [r7, #4]
 8019e16:	f7fe fd39 	bl	801888c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8019e1a:	4b59      	ldr	r3, [pc, #356]	; (8019f80 <tcp_process+0x7dc>)
 8019e1c:	681b      	ldr	r3, [r3, #0]
 8019e1e:	687a      	ldr	r2, [r7, #4]
 8019e20:	429a      	cmp	r2, r3
 8019e22:	d105      	bne.n	8019e30 <tcp_process+0x68c>
 8019e24:	4b56      	ldr	r3, [pc, #344]	; (8019f80 <tcp_process+0x7dc>)
 8019e26:	681b      	ldr	r3, [r3, #0]
 8019e28:	68db      	ldr	r3, [r3, #12]
 8019e2a:	4a55      	ldr	r2, [pc, #340]	; (8019f80 <tcp_process+0x7dc>)
 8019e2c:	6013      	str	r3, [r2, #0]
 8019e2e:	e013      	b.n	8019e58 <tcp_process+0x6b4>
 8019e30:	4b53      	ldr	r3, [pc, #332]	; (8019f80 <tcp_process+0x7dc>)
 8019e32:	681b      	ldr	r3, [r3, #0]
 8019e34:	613b      	str	r3, [r7, #16]
 8019e36:	e00c      	b.n	8019e52 <tcp_process+0x6ae>
 8019e38:	693b      	ldr	r3, [r7, #16]
 8019e3a:	68db      	ldr	r3, [r3, #12]
 8019e3c:	687a      	ldr	r2, [r7, #4]
 8019e3e:	429a      	cmp	r2, r3
 8019e40:	d104      	bne.n	8019e4c <tcp_process+0x6a8>
 8019e42:	687b      	ldr	r3, [r7, #4]
 8019e44:	68da      	ldr	r2, [r3, #12]
 8019e46:	693b      	ldr	r3, [r7, #16]
 8019e48:	60da      	str	r2, [r3, #12]
 8019e4a:	e005      	b.n	8019e58 <tcp_process+0x6b4>
 8019e4c:	693b      	ldr	r3, [r7, #16]
 8019e4e:	68db      	ldr	r3, [r3, #12]
 8019e50:	613b      	str	r3, [r7, #16]
 8019e52:	693b      	ldr	r3, [r7, #16]
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	d1ef      	bne.n	8019e38 <tcp_process+0x694>
 8019e58:	687b      	ldr	r3, [r7, #4]
 8019e5a:	2200      	movs	r2, #0
 8019e5c:	60da      	str	r2, [r3, #12]
 8019e5e:	4b43      	ldr	r3, [pc, #268]	; (8019f6c <tcp_process+0x7c8>)
 8019e60:	2201      	movs	r2, #1
 8019e62:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8019e64:	687b      	ldr	r3, [r7, #4]
 8019e66:	220a      	movs	r2, #10
 8019e68:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8019e6a:	4b41      	ldr	r3, [pc, #260]	; (8019f70 <tcp_process+0x7cc>)
 8019e6c:	681a      	ldr	r2, [r3, #0]
 8019e6e:	687b      	ldr	r3, [r7, #4]
 8019e70:	60da      	str	r2, [r3, #12]
 8019e72:	4a3f      	ldr	r2, [pc, #252]	; (8019f70 <tcp_process+0x7cc>)
 8019e74:	687b      	ldr	r3, [r7, #4]
 8019e76:	6013      	str	r3, [r2, #0]
 8019e78:	f003 f8ea 	bl	801d050 <tcp_timer_needed>
      }
      break;
 8019e7c:	e06c      	b.n	8019f58 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8019e7e:	6878      	ldr	r0, [r7, #4]
 8019e80:	f000 f984 	bl	801a18c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8019e84:	4b3b      	ldr	r3, [pc, #236]	; (8019f74 <tcp_process+0x7d0>)
 8019e86:	781b      	ldrb	r3, [r3, #0]
 8019e88:	f003 0310 	and.w	r3, r3, #16
 8019e8c:	2b00      	cmp	r3, #0
 8019e8e:	d065      	beq.n	8019f5c <tcp_process+0x7b8>
 8019e90:	687b      	ldr	r3, [r7, #4]
 8019e92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019e94:	4b38      	ldr	r3, [pc, #224]	; (8019f78 <tcp_process+0x7d4>)
 8019e96:	681b      	ldr	r3, [r3, #0]
 8019e98:	429a      	cmp	r2, r3
 8019e9a:	d15f      	bne.n	8019f5c <tcp_process+0x7b8>
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019ea0:	2b00      	cmp	r3, #0
 8019ea2:	d15b      	bne.n	8019f5c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8019ea4:	6878      	ldr	r0, [r7, #4]
 8019ea6:	f7fe fcf1 	bl	801888c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8019eaa:	4b35      	ldr	r3, [pc, #212]	; (8019f80 <tcp_process+0x7dc>)
 8019eac:	681b      	ldr	r3, [r3, #0]
 8019eae:	687a      	ldr	r2, [r7, #4]
 8019eb0:	429a      	cmp	r2, r3
 8019eb2:	d105      	bne.n	8019ec0 <tcp_process+0x71c>
 8019eb4:	4b32      	ldr	r3, [pc, #200]	; (8019f80 <tcp_process+0x7dc>)
 8019eb6:	681b      	ldr	r3, [r3, #0]
 8019eb8:	68db      	ldr	r3, [r3, #12]
 8019eba:	4a31      	ldr	r2, [pc, #196]	; (8019f80 <tcp_process+0x7dc>)
 8019ebc:	6013      	str	r3, [r2, #0]
 8019ebe:	e013      	b.n	8019ee8 <tcp_process+0x744>
 8019ec0:	4b2f      	ldr	r3, [pc, #188]	; (8019f80 <tcp_process+0x7dc>)
 8019ec2:	681b      	ldr	r3, [r3, #0]
 8019ec4:	60fb      	str	r3, [r7, #12]
 8019ec6:	e00c      	b.n	8019ee2 <tcp_process+0x73e>
 8019ec8:	68fb      	ldr	r3, [r7, #12]
 8019eca:	68db      	ldr	r3, [r3, #12]
 8019ecc:	687a      	ldr	r2, [r7, #4]
 8019ece:	429a      	cmp	r2, r3
 8019ed0:	d104      	bne.n	8019edc <tcp_process+0x738>
 8019ed2:	687b      	ldr	r3, [r7, #4]
 8019ed4:	68da      	ldr	r2, [r3, #12]
 8019ed6:	68fb      	ldr	r3, [r7, #12]
 8019ed8:	60da      	str	r2, [r3, #12]
 8019eda:	e005      	b.n	8019ee8 <tcp_process+0x744>
 8019edc:	68fb      	ldr	r3, [r7, #12]
 8019ede:	68db      	ldr	r3, [r3, #12]
 8019ee0:	60fb      	str	r3, [r7, #12]
 8019ee2:	68fb      	ldr	r3, [r7, #12]
 8019ee4:	2b00      	cmp	r3, #0
 8019ee6:	d1ef      	bne.n	8019ec8 <tcp_process+0x724>
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	2200      	movs	r2, #0
 8019eec:	60da      	str	r2, [r3, #12]
 8019eee:	4b1f      	ldr	r3, [pc, #124]	; (8019f6c <tcp_process+0x7c8>)
 8019ef0:	2201      	movs	r2, #1
 8019ef2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8019ef4:	687b      	ldr	r3, [r7, #4]
 8019ef6:	220a      	movs	r2, #10
 8019ef8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8019efa:	4b1d      	ldr	r3, [pc, #116]	; (8019f70 <tcp_process+0x7cc>)
 8019efc:	681a      	ldr	r2, [r3, #0]
 8019efe:	687b      	ldr	r3, [r7, #4]
 8019f00:	60da      	str	r2, [r3, #12]
 8019f02:	4a1b      	ldr	r2, [pc, #108]	; (8019f70 <tcp_process+0x7cc>)
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	6013      	str	r3, [r2, #0]
 8019f08:	f003 f8a2 	bl	801d050 <tcp_timer_needed>
      }
      break;
 8019f0c:	e026      	b.n	8019f5c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8019f0e:	6878      	ldr	r0, [r7, #4]
 8019f10:	f000 f93c 	bl	801a18c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8019f14:	4b17      	ldr	r3, [pc, #92]	; (8019f74 <tcp_process+0x7d0>)
 8019f16:	781b      	ldrb	r3, [r3, #0]
 8019f18:	f003 0310 	and.w	r3, r3, #16
 8019f1c:	2b00      	cmp	r3, #0
 8019f1e:	d01f      	beq.n	8019f60 <tcp_process+0x7bc>
 8019f20:	687b      	ldr	r3, [r7, #4]
 8019f22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019f24:	4b14      	ldr	r3, [pc, #80]	; (8019f78 <tcp_process+0x7d4>)
 8019f26:	681b      	ldr	r3, [r3, #0]
 8019f28:	429a      	cmp	r2, r3
 8019f2a:	d119      	bne.n	8019f60 <tcp_process+0x7bc>
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019f30:	2b00      	cmp	r3, #0
 8019f32:	d115      	bne.n	8019f60 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8019f34:	4b11      	ldr	r3, [pc, #68]	; (8019f7c <tcp_process+0x7d8>)
 8019f36:	781b      	ldrb	r3, [r3, #0]
 8019f38:	f043 0310 	orr.w	r3, r3, #16
 8019f3c:	b2da      	uxtb	r2, r3
 8019f3e:	4b0f      	ldr	r3, [pc, #60]	; (8019f7c <tcp_process+0x7d8>)
 8019f40:	701a      	strb	r2, [r3, #0]
      }
      break;
 8019f42:	e00d      	b.n	8019f60 <tcp_process+0x7bc>
    default:
      break;
 8019f44:	bf00      	nop
 8019f46:	e00c      	b.n	8019f62 <tcp_process+0x7be>
      break;
 8019f48:	bf00      	nop
 8019f4a:	e00a      	b.n	8019f62 <tcp_process+0x7be>
      break;
 8019f4c:	bf00      	nop
 8019f4e:	e008      	b.n	8019f62 <tcp_process+0x7be>
      break;
 8019f50:	bf00      	nop
 8019f52:	e006      	b.n	8019f62 <tcp_process+0x7be>
      break;
 8019f54:	bf00      	nop
 8019f56:	e004      	b.n	8019f62 <tcp_process+0x7be>
      break;
 8019f58:	bf00      	nop
 8019f5a:	e002      	b.n	8019f62 <tcp_process+0x7be>
      break;
 8019f5c:	bf00      	nop
 8019f5e:	e000      	b.n	8019f62 <tcp_process+0x7be>
      break;
 8019f60:	bf00      	nop
  }
  return ERR_OK;
 8019f62:	2300      	movs	r3, #0
}
 8019f64:	4618      	mov	r0, r3
 8019f66:	3724      	adds	r7, #36	; 0x24
 8019f68:	46bd      	mov	sp, r7
 8019f6a:	bd90      	pop	{r4, r7, pc}
 8019f6c:	200188b0 	.word	0x200188b0
 8019f70:	200188ac 	.word	0x200188ac
 8019f74:	200188e0 	.word	0x200188e0
 8019f78:	200188d8 	.word	0x200188d8
 8019f7c:	200188e1 	.word	0x200188e1
 8019f80:	200188a8 	.word	0x200188a8

08019f84 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8019f84:	b590      	push	{r4, r7, lr}
 8019f86:	b085      	sub	sp, #20
 8019f88:	af00      	add	r7, sp, #0
 8019f8a:	6078      	str	r0, [r7, #4]
 8019f8c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8019f8e:	687b      	ldr	r3, [r7, #4]
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	d106      	bne.n	8019fa2 <tcp_oos_insert_segment+0x1e>
 8019f94:	4b3b      	ldr	r3, [pc, #236]	; (801a084 <tcp_oos_insert_segment+0x100>)
 8019f96:	f240 421f 	movw	r2, #1055	; 0x41f
 8019f9a:	493b      	ldr	r1, [pc, #236]	; (801a088 <tcp_oos_insert_segment+0x104>)
 8019f9c:	483b      	ldr	r0, [pc, #236]	; (801a08c <tcp_oos_insert_segment+0x108>)
 8019f9e:	f005 ffe1 	bl	801ff64 <printf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8019fa2:	687b      	ldr	r3, [r7, #4]
 8019fa4:	68db      	ldr	r3, [r3, #12]
 8019fa6:	899b      	ldrh	r3, [r3, #12]
 8019fa8:	b29b      	uxth	r3, r3
 8019faa:	4618      	mov	r0, r3
 8019fac:	f7fb f902 	bl	80151b4 <lwip_htons>
 8019fb0:	4603      	mov	r3, r0
 8019fb2:	b2db      	uxtb	r3, r3
 8019fb4:	f003 0301 	and.w	r3, r3, #1
 8019fb8:	2b00      	cmp	r3, #0
 8019fba:	d028      	beq.n	801a00e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8019fbc:	6838      	ldr	r0, [r7, #0]
 8019fbe:	f7fe f9ad 	bl	801831c <tcp_segs_free>
    next = NULL;
 8019fc2:	2300      	movs	r3, #0
 8019fc4:	603b      	str	r3, [r7, #0]
 8019fc6:	e056      	b.n	801a076 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8019fc8:	683b      	ldr	r3, [r7, #0]
 8019fca:	68db      	ldr	r3, [r3, #12]
 8019fcc:	899b      	ldrh	r3, [r3, #12]
 8019fce:	b29b      	uxth	r3, r3
 8019fd0:	4618      	mov	r0, r3
 8019fd2:	f7fb f8ef 	bl	80151b4 <lwip_htons>
 8019fd6:	4603      	mov	r3, r0
 8019fd8:	b2db      	uxtb	r3, r3
 8019fda:	f003 0301 	and.w	r3, r3, #1
 8019fde:	2b00      	cmp	r3, #0
 8019fe0:	d00d      	beq.n	8019ffe <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	68db      	ldr	r3, [r3, #12]
 8019fe6:	899b      	ldrh	r3, [r3, #12]
 8019fe8:	b29c      	uxth	r4, r3
 8019fea:	2001      	movs	r0, #1
 8019fec:	f7fb f8e2 	bl	80151b4 <lwip_htons>
 8019ff0:	4603      	mov	r3, r0
 8019ff2:	461a      	mov	r2, r3
 8019ff4:	687b      	ldr	r3, [r7, #4]
 8019ff6:	68db      	ldr	r3, [r3, #12]
 8019ff8:	4322      	orrs	r2, r4
 8019ffa:	b292      	uxth	r2, r2
 8019ffc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8019ffe:	683b      	ldr	r3, [r7, #0]
 801a000:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801a002:	683b      	ldr	r3, [r7, #0]
 801a004:	681b      	ldr	r3, [r3, #0]
 801a006:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801a008:	68f8      	ldr	r0, [r7, #12]
 801a00a:	f7fe f99c 	bl	8018346 <tcp_seg_free>
    while (next &&
 801a00e:	683b      	ldr	r3, [r7, #0]
 801a010:	2b00      	cmp	r3, #0
 801a012:	d00e      	beq.n	801a032 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801a014:	687b      	ldr	r3, [r7, #4]
 801a016:	891b      	ldrh	r3, [r3, #8]
 801a018:	461a      	mov	r2, r3
 801a01a:	4b1d      	ldr	r3, [pc, #116]	; (801a090 <tcp_oos_insert_segment+0x10c>)
 801a01c:	681b      	ldr	r3, [r3, #0]
 801a01e:	441a      	add	r2, r3
 801a020:	683b      	ldr	r3, [r7, #0]
 801a022:	68db      	ldr	r3, [r3, #12]
 801a024:	685b      	ldr	r3, [r3, #4]
 801a026:	6839      	ldr	r1, [r7, #0]
 801a028:	8909      	ldrh	r1, [r1, #8]
 801a02a:	440b      	add	r3, r1
 801a02c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801a02e:	2b00      	cmp	r3, #0
 801a030:	daca      	bge.n	8019fc8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801a032:	683b      	ldr	r3, [r7, #0]
 801a034:	2b00      	cmp	r3, #0
 801a036:	d01e      	beq.n	801a076 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801a038:	687b      	ldr	r3, [r7, #4]
 801a03a:	891b      	ldrh	r3, [r3, #8]
 801a03c:	461a      	mov	r2, r3
 801a03e:	4b14      	ldr	r3, [pc, #80]	; (801a090 <tcp_oos_insert_segment+0x10c>)
 801a040:	681b      	ldr	r3, [r3, #0]
 801a042:	441a      	add	r2, r3
 801a044:	683b      	ldr	r3, [r7, #0]
 801a046:	68db      	ldr	r3, [r3, #12]
 801a048:	685b      	ldr	r3, [r3, #4]
 801a04a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801a04c:	2b00      	cmp	r3, #0
 801a04e:	dd12      	ble.n	801a076 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801a050:	683b      	ldr	r3, [r7, #0]
 801a052:	68db      	ldr	r3, [r3, #12]
 801a054:	685b      	ldr	r3, [r3, #4]
 801a056:	b29a      	uxth	r2, r3
 801a058:	4b0d      	ldr	r3, [pc, #52]	; (801a090 <tcp_oos_insert_segment+0x10c>)
 801a05a:	681b      	ldr	r3, [r3, #0]
 801a05c:	b29b      	uxth	r3, r3
 801a05e:	1ad3      	subs	r3, r2, r3
 801a060:	b29a      	uxth	r2, r3
 801a062:	687b      	ldr	r3, [r7, #4]
 801a064:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801a066:	687b      	ldr	r3, [r7, #4]
 801a068:	685a      	ldr	r2, [r3, #4]
 801a06a:	687b      	ldr	r3, [r7, #4]
 801a06c:	891b      	ldrh	r3, [r3, #8]
 801a06e:	4619      	mov	r1, r3
 801a070:	4610      	mov	r0, r2
 801a072:	f7fc fb09 	bl	8016688 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801a076:	687b      	ldr	r3, [r7, #4]
 801a078:	683a      	ldr	r2, [r7, #0]
 801a07a:	601a      	str	r2, [r3, #0]
}
 801a07c:	bf00      	nop
 801a07e:	3714      	adds	r7, #20
 801a080:	46bd      	mov	sp, r7
 801a082:	bd90      	pop	{r4, r7, pc}
 801a084:	08027e78 	.word	0x08027e78
 801a088:	08028138 	.word	0x08028138
 801a08c:	08027ec4 	.word	0x08027ec4
 801a090:	200188d4 	.word	0x200188d4

0801a094 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801a094:	b5b0      	push	{r4, r5, r7, lr}
 801a096:	b086      	sub	sp, #24
 801a098:	af00      	add	r7, sp, #0
 801a09a:	60f8      	str	r0, [r7, #12]
 801a09c:	60b9      	str	r1, [r7, #8]
 801a09e:	607a      	str	r2, [r7, #4]
 801a0a0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801a0a2:	e03e      	b.n	801a122 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801a0a4:	68bb      	ldr	r3, [r7, #8]
 801a0a6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801a0a8:	68bb      	ldr	r3, [r7, #8]
 801a0aa:	681b      	ldr	r3, [r3, #0]
 801a0ac:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801a0ae:	697b      	ldr	r3, [r7, #20]
 801a0b0:	685b      	ldr	r3, [r3, #4]
 801a0b2:	4618      	mov	r0, r3
 801a0b4:	f7fc fcfc 	bl	8016ab0 <pbuf_clen>
 801a0b8:	4603      	mov	r3, r0
 801a0ba:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801a0bc:	68fb      	ldr	r3, [r7, #12]
 801a0be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a0c2:	8a7a      	ldrh	r2, [r7, #18]
 801a0c4:	429a      	cmp	r2, r3
 801a0c6:	d906      	bls.n	801a0d6 <tcp_free_acked_segments+0x42>
 801a0c8:	4b2a      	ldr	r3, [pc, #168]	; (801a174 <tcp_free_acked_segments+0xe0>)
 801a0ca:	f240 4257 	movw	r2, #1111	; 0x457
 801a0ce:	492a      	ldr	r1, [pc, #168]	; (801a178 <tcp_free_acked_segments+0xe4>)
 801a0d0:	482a      	ldr	r0, [pc, #168]	; (801a17c <tcp_free_acked_segments+0xe8>)
 801a0d2:	f005 ff47 	bl	801ff64 <printf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801a0d6:	68fb      	ldr	r3, [r7, #12]
 801a0d8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801a0dc:	8a7b      	ldrh	r3, [r7, #18]
 801a0de:	1ad3      	subs	r3, r2, r3
 801a0e0:	b29a      	uxth	r2, r3
 801a0e2:	68fb      	ldr	r3, [r7, #12]
 801a0e4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801a0e8:	697b      	ldr	r3, [r7, #20]
 801a0ea:	891a      	ldrh	r2, [r3, #8]
 801a0ec:	4b24      	ldr	r3, [pc, #144]	; (801a180 <tcp_free_acked_segments+0xec>)
 801a0ee:	881b      	ldrh	r3, [r3, #0]
 801a0f0:	4413      	add	r3, r2
 801a0f2:	b29a      	uxth	r2, r3
 801a0f4:	4b22      	ldr	r3, [pc, #136]	; (801a180 <tcp_free_acked_segments+0xec>)
 801a0f6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801a0f8:	6978      	ldr	r0, [r7, #20]
 801a0fa:	f7fe f924 	bl	8018346 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801a0fe:	68fb      	ldr	r3, [r7, #12]
 801a100:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a104:	2b00      	cmp	r3, #0
 801a106:	d00c      	beq.n	801a122 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801a108:	68bb      	ldr	r3, [r7, #8]
 801a10a:	2b00      	cmp	r3, #0
 801a10c:	d109      	bne.n	801a122 <tcp_free_acked_segments+0x8e>
 801a10e:	683b      	ldr	r3, [r7, #0]
 801a110:	2b00      	cmp	r3, #0
 801a112:	d106      	bne.n	801a122 <tcp_free_acked_segments+0x8e>
 801a114:	4b17      	ldr	r3, [pc, #92]	; (801a174 <tcp_free_acked_segments+0xe0>)
 801a116:	f240 4261 	movw	r2, #1121	; 0x461
 801a11a:	491a      	ldr	r1, [pc, #104]	; (801a184 <tcp_free_acked_segments+0xf0>)
 801a11c:	4817      	ldr	r0, [pc, #92]	; (801a17c <tcp_free_acked_segments+0xe8>)
 801a11e:	f005 ff21 	bl	801ff64 <printf>
  while (seg_list != NULL &&
 801a122:	68bb      	ldr	r3, [r7, #8]
 801a124:	2b00      	cmp	r3, #0
 801a126:	d020      	beq.n	801a16a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801a128:	68bb      	ldr	r3, [r7, #8]
 801a12a:	68db      	ldr	r3, [r3, #12]
 801a12c:	685b      	ldr	r3, [r3, #4]
 801a12e:	4618      	mov	r0, r3
 801a130:	f7fb f855 	bl	80151de <lwip_htonl>
 801a134:	4604      	mov	r4, r0
 801a136:	68bb      	ldr	r3, [r7, #8]
 801a138:	891b      	ldrh	r3, [r3, #8]
 801a13a:	461d      	mov	r5, r3
 801a13c:	68bb      	ldr	r3, [r7, #8]
 801a13e:	68db      	ldr	r3, [r3, #12]
 801a140:	899b      	ldrh	r3, [r3, #12]
 801a142:	b29b      	uxth	r3, r3
 801a144:	4618      	mov	r0, r3
 801a146:	f7fb f835 	bl	80151b4 <lwip_htons>
 801a14a:	4603      	mov	r3, r0
 801a14c:	b2db      	uxtb	r3, r3
 801a14e:	f003 0303 	and.w	r3, r3, #3
 801a152:	2b00      	cmp	r3, #0
 801a154:	d001      	beq.n	801a15a <tcp_free_acked_segments+0xc6>
 801a156:	2301      	movs	r3, #1
 801a158:	e000      	b.n	801a15c <tcp_free_acked_segments+0xc8>
 801a15a:	2300      	movs	r3, #0
 801a15c:	442b      	add	r3, r5
 801a15e:	18e2      	adds	r2, r4, r3
 801a160:	4b09      	ldr	r3, [pc, #36]	; (801a188 <tcp_free_acked_segments+0xf4>)
 801a162:	681b      	ldr	r3, [r3, #0]
 801a164:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801a166:	2b00      	cmp	r3, #0
 801a168:	dd9c      	ble.n	801a0a4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801a16a:	68bb      	ldr	r3, [r7, #8]
}
 801a16c:	4618      	mov	r0, r3
 801a16e:	3718      	adds	r7, #24
 801a170:	46bd      	mov	sp, r7
 801a172:	bdb0      	pop	{r4, r5, r7, pc}
 801a174:	08027e78 	.word	0x08027e78
 801a178:	08028160 	.word	0x08028160
 801a17c:	08027ec4 	.word	0x08027ec4
 801a180:	200188dc 	.word	0x200188dc
 801a184:	08028188 	.word	0x08028188
 801a188:	200188d8 	.word	0x200188d8

0801a18c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801a18c:	b5b0      	push	{r4, r5, r7, lr}
 801a18e:	b094      	sub	sp, #80	; 0x50
 801a190:	af00      	add	r7, sp, #0
 801a192:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801a194:	2300      	movs	r3, #0
 801a196:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801a198:	687b      	ldr	r3, [r7, #4]
 801a19a:	2b00      	cmp	r3, #0
 801a19c:	d106      	bne.n	801a1ac <tcp_receive+0x20>
 801a19e:	4b91      	ldr	r3, [pc, #580]	; (801a3e4 <tcp_receive+0x258>)
 801a1a0:	f240 427b 	movw	r2, #1147	; 0x47b
 801a1a4:	4990      	ldr	r1, [pc, #576]	; (801a3e8 <tcp_receive+0x25c>)
 801a1a6:	4891      	ldr	r0, [pc, #580]	; (801a3ec <tcp_receive+0x260>)
 801a1a8:	f005 fedc 	bl	801ff64 <printf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801a1ac:	687b      	ldr	r3, [r7, #4]
 801a1ae:	7d1b      	ldrb	r3, [r3, #20]
 801a1b0:	2b03      	cmp	r3, #3
 801a1b2:	d806      	bhi.n	801a1c2 <tcp_receive+0x36>
 801a1b4:	4b8b      	ldr	r3, [pc, #556]	; (801a3e4 <tcp_receive+0x258>)
 801a1b6:	f240 427c 	movw	r2, #1148	; 0x47c
 801a1ba:	498d      	ldr	r1, [pc, #564]	; (801a3f0 <tcp_receive+0x264>)
 801a1bc:	488b      	ldr	r0, [pc, #556]	; (801a3ec <tcp_receive+0x260>)
 801a1be:	f005 fed1 	bl	801ff64 <printf>

  if (flags & TCP_ACK) {
 801a1c2:	4b8c      	ldr	r3, [pc, #560]	; (801a3f4 <tcp_receive+0x268>)
 801a1c4:	781b      	ldrb	r3, [r3, #0]
 801a1c6:	f003 0310 	and.w	r3, r3, #16
 801a1ca:	2b00      	cmp	r3, #0
 801a1cc:	f000 8264 	beq.w	801a698 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a1d6:	461a      	mov	r2, r3
 801a1d8:	687b      	ldr	r3, [r7, #4]
 801a1da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a1dc:	4413      	add	r3, r2
 801a1de:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801a1e0:	687b      	ldr	r3, [r7, #4]
 801a1e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801a1e4:	4b84      	ldr	r3, [pc, #528]	; (801a3f8 <tcp_receive+0x26c>)
 801a1e6:	681b      	ldr	r3, [r3, #0]
 801a1e8:	1ad3      	subs	r3, r2, r3
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	db1b      	blt.n	801a226 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801a1ee:	687b      	ldr	r3, [r7, #4]
 801a1f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801a1f2:	4b81      	ldr	r3, [pc, #516]	; (801a3f8 <tcp_receive+0x26c>)
 801a1f4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801a1f6:	429a      	cmp	r2, r3
 801a1f8:	d106      	bne.n	801a208 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801a1fa:	687b      	ldr	r3, [r7, #4]
 801a1fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801a1fe:	4b7f      	ldr	r3, [pc, #508]	; (801a3fc <tcp_receive+0x270>)
 801a200:	681b      	ldr	r3, [r3, #0]
 801a202:	1ad3      	subs	r3, r2, r3
 801a204:	2b00      	cmp	r3, #0
 801a206:	db0e      	blt.n	801a226 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801a208:	687b      	ldr	r3, [r7, #4]
 801a20a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801a20c:	4b7b      	ldr	r3, [pc, #492]	; (801a3fc <tcp_receive+0x270>)
 801a20e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801a210:	429a      	cmp	r2, r3
 801a212:	d125      	bne.n	801a260 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801a214:	4b7a      	ldr	r3, [pc, #488]	; (801a400 <tcp_receive+0x274>)
 801a216:	681b      	ldr	r3, [r3, #0]
 801a218:	89db      	ldrh	r3, [r3, #14]
 801a21a:	b29a      	uxth	r2, r3
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a222:	429a      	cmp	r2, r3
 801a224:	d91c      	bls.n	801a260 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801a226:	4b76      	ldr	r3, [pc, #472]	; (801a400 <tcp_receive+0x274>)
 801a228:	681b      	ldr	r3, [r3, #0]
 801a22a:	89db      	ldrh	r3, [r3, #14]
 801a22c:	b29a      	uxth	r2, r3
 801a22e:	687b      	ldr	r3, [r7, #4]
 801a230:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801a234:	687b      	ldr	r3, [r7, #4]
 801a236:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a240:	429a      	cmp	r2, r3
 801a242:	d205      	bcs.n	801a250 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801a244:	687b      	ldr	r3, [r7, #4]
 801a246:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801a24a:	687b      	ldr	r3, [r7, #4]
 801a24c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801a250:	4b69      	ldr	r3, [pc, #420]	; (801a3f8 <tcp_receive+0x26c>)
 801a252:	681a      	ldr	r2, [r3, #0]
 801a254:	687b      	ldr	r3, [r7, #4]
 801a256:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801a258:	4b68      	ldr	r3, [pc, #416]	; (801a3fc <tcp_receive+0x270>)
 801a25a:	681a      	ldr	r2, [r3, #0]
 801a25c:	687b      	ldr	r3, [r7, #4]
 801a25e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801a260:	4b66      	ldr	r3, [pc, #408]	; (801a3fc <tcp_receive+0x270>)
 801a262:	681a      	ldr	r2, [r3, #0]
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a268:	1ad3      	subs	r3, r2, r3
 801a26a:	2b00      	cmp	r3, #0
 801a26c:	dc58      	bgt.n	801a320 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801a26e:	4b65      	ldr	r3, [pc, #404]	; (801a404 <tcp_receive+0x278>)
 801a270:	881b      	ldrh	r3, [r3, #0]
 801a272:	2b00      	cmp	r3, #0
 801a274:	d14b      	bne.n	801a30e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801a276:	687b      	ldr	r3, [r7, #4]
 801a278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a27a:	687a      	ldr	r2, [r7, #4]
 801a27c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801a280:	4413      	add	r3, r2
 801a282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a284:	429a      	cmp	r2, r3
 801a286:	d142      	bne.n	801a30e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801a288:	687b      	ldr	r3, [r7, #4]
 801a28a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801a28e:	2b00      	cmp	r3, #0
 801a290:	db3d      	blt.n	801a30e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801a292:	687b      	ldr	r3, [r7, #4]
 801a294:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a296:	4b59      	ldr	r3, [pc, #356]	; (801a3fc <tcp_receive+0x270>)
 801a298:	681b      	ldr	r3, [r3, #0]
 801a29a:	429a      	cmp	r2, r3
 801a29c:	d137      	bne.n	801a30e <tcp_receive+0x182>
              found_dupack = 1;
 801a29e:	2301      	movs	r3, #1
 801a2a0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801a2a2:	687b      	ldr	r3, [r7, #4]
 801a2a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801a2a8:	2bff      	cmp	r3, #255	; 0xff
 801a2aa:	d007      	beq.n	801a2bc <tcp_receive+0x130>
                ++pcb->dupacks;
 801a2ac:	687b      	ldr	r3, [r7, #4]
 801a2ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801a2b2:	3301      	adds	r3, #1
 801a2b4:	b2da      	uxtb	r2, r3
 801a2b6:	687b      	ldr	r3, [r7, #4]
 801a2b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801a2bc:	687b      	ldr	r3, [r7, #4]
 801a2be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801a2c2:	2b03      	cmp	r3, #3
 801a2c4:	d91b      	bls.n	801a2fe <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801a2c6:	687b      	ldr	r3, [r7, #4]
 801a2c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801a2cc:	687b      	ldr	r3, [r7, #4]
 801a2ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a2d0:	4413      	add	r3, r2
 801a2d2:	b29a      	uxth	r2, r3
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a2da:	429a      	cmp	r2, r3
 801a2dc:	d30a      	bcc.n	801a2f4 <tcp_receive+0x168>
 801a2de:	687b      	ldr	r3, [r7, #4]
 801a2e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801a2e4:	687b      	ldr	r3, [r7, #4]
 801a2e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a2e8:	4413      	add	r3, r2
 801a2ea:	b29a      	uxth	r2, r3
 801a2ec:	687b      	ldr	r3, [r7, #4]
 801a2ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801a2f2:	e004      	b.n	801a2fe <tcp_receive+0x172>
 801a2f4:	687b      	ldr	r3, [r7, #4]
 801a2f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a2fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801a304:	2b02      	cmp	r3, #2
 801a306:	d902      	bls.n	801a30e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801a308:	6878      	ldr	r0, [r7, #4]
 801a30a:	f002 fb43 	bl	801c994 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801a30e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a310:	2b00      	cmp	r3, #0
 801a312:	f040 8161 	bne.w	801a5d8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801a316:	687b      	ldr	r3, [r7, #4]
 801a318:	2200      	movs	r2, #0
 801a31a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801a31e:	e15b      	b.n	801a5d8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801a320:	4b36      	ldr	r3, [pc, #216]	; (801a3fc <tcp_receive+0x270>)
 801a322:	681a      	ldr	r2, [r3, #0]
 801a324:	687b      	ldr	r3, [r7, #4]
 801a326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a328:	1ad3      	subs	r3, r2, r3
 801a32a:	3b01      	subs	r3, #1
 801a32c:	2b00      	cmp	r3, #0
 801a32e:	f2c0 814e 	blt.w	801a5ce <tcp_receive+0x442>
 801a332:	4b32      	ldr	r3, [pc, #200]	; (801a3fc <tcp_receive+0x270>)
 801a334:	681a      	ldr	r2, [r3, #0]
 801a336:	687b      	ldr	r3, [r7, #4]
 801a338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a33a:	1ad3      	subs	r3, r2, r3
 801a33c:	2b00      	cmp	r3, #0
 801a33e:	f300 8146 	bgt.w	801a5ce <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801a342:	687b      	ldr	r3, [r7, #4]
 801a344:	8b5b      	ldrh	r3, [r3, #26]
 801a346:	f003 0304 	and.w	r3, r3, #4
 801a34a:	2b00      	cmp	r3, #0
 801a34c:	d010      	beq.n	801a370 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	8b5b      	ldrh	r3, [r3, #26]
 801a352:	f023 0304 	bic.w	r3, r3, #4
 801a356:	b29a      	uxth	r2, r3
 801a358:	687b      	ldr	r3, [r7, #4]
 801a35a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801a35c:	687b      	ldr	r3, [r7, #4]
 801a35e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801a368:	687b      	ldr	r3, [r7, #4]
 801a36a:	2200      	movs	r2, #0
 801a36c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801a370:	687b      	ldr	r3, [r7, #4]
 801a372:	2200      	movs	r2, #0
 801a374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801a378:	687b      	ldr	r3, [r7, #4]
 801a37a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801a37e:	10db      	asrs	r3, r3, #3
 801a380:	b21b      	sxth	r3, r3
 801a382:	b29a      	uxth	r2, r3
 801a384:	687b      	ldr	r3, [r7, #4]
 801a386:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801a38a:	b29b      	uxth	r3, r3
 801a38c:	4413      	add	r3, r2
 801a38e:	b29b      	uxth	r3, r3
 801a390:	b21a      	sxth	r2, r3
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801a398:	4b18      	ldr	r3, [pc, #96]	; (801a3fc <tcp_receive+0x270>)
 801a39a:	681b      	ldr	r3, [r3, #0]
 801a39c:	b29a      	uxth	r2, r3
 801a39e:	687b      	ldr	r3, [r7, #4]
 801a3a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a3a2:	b29b      	uxth	r3, r3
 801a3a4:	1ad3      	subs	r3, r2, r3
 801a3a6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801a3a8:	687b      	ldr	r3, [r7, #4]
 801a3aa:	2200      	movs	r2, #0
 801a3ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801a3b0:	4b12      	ldr	r3, [pc, #72]	; (801a3fc <tcp_receive+0x270>)
 801a3b2:	681a      	ldr	r2, [r3, #0]
 801a3b4:	687b      	ldr	r3, [r7, #4]
 801a3b6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801a3b8:	687b      	ldr	r3, [r7, #4]
 801a3ba:	7d1b      	ldrb	r3, [r3, #20]
 801a3bc:	2b03      	cmp	r3, #3
 801a3be:	f240 8097 	bls.w	801a4f0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801a3c2:	687b      	ldr	r3, [r7, #4]
 801a3c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801a3ce:	429a      	cmp	r2, r3
 801a3d0:	d245      	bcs.n	801a45e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801a3d2:	687b      	ldr	r3, [r7, #4]
 801a3d4:	8b5b      	ldrh	r3, [r3, #26]
 801a3d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801a3da:	2b00      	cmp	r3, #0
 801a3dc:	d014      	beq.n	801a408 <tcp_receive+0x27c>
 801a3de:	2301      	movs	r3, #1
 801a3e0:	e013      	b.n	801a40a <tcp_receive+0x27e>
 801a3e2:	bf00      	nop
 801a3e4:	08027e78 	.word	0x08027e78
 801a3e8:	080281a8 	.word	0x080281a8
 801a3ec:	08027ec4 	.word	0x08027ec4
 801a3f0:	080281c4 	.word	0x080281c4
 801a3f4:	200188e0 	.word	0x200188e0
 801a3f8:	200188d4 	.word	0x200188d4
 801a3fc:	200188d8 	.word	0x200188d8
 801a400:	200188c4 	.word	0x200188c4
 801a404:	200188de 	.word	0x200188de
 801a408:	2302      	movs	r3, #2
 801a40a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801a40e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801a412:	b29a      	uxth	r2, r3
 801a414:	687b      	ldr	r3, [r7, #4]
 801a416:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a418:	fb12 f303 	smulbb	r3, r2, r3
 801a41c:	b29b      	uxth	r3, r3
 801a41e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801a420:	4293      	cmp	r3, r2
 801a422:	bf28      	it	cs
 801a424:	4613      	movcs	r3, r2
 801a426:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801a428:	687b      	ldr	r3, [r7, #4]
 801a42a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801a42e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a430:	4413      	add	r3, r2
 801a432:	b29a      	uxth	r2, r3
 801a434:	687b      	ldr	r3, [r7, #4]
 801a436:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a43a:	429a      	cmp	r2, r3
 801a43c:	d309      	bcc.n	801a452 <tcp_receive+0x2c6>
 801a43e:	687b      	ldr	r3, [r7, #4]
 801a440:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801a444:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a446:	4413      	add	r3, r2
 801a448:	b29a      	uxth	r2, r3
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801a450:	e04e      	b.n	801a4f0 <tcp_receive+0x364>
 801a452:	687b      	ldr	r3, [r7, #4]
 801a454:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a458:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801a45c:	e048      	b.n	801a4f0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801a45e:	687b      	ldr	r3, [r7, #4]
 801a460:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801a464:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801a466:	4413      	add	r3, r2
 801a468:	b29a      	uxth	r2, r3
 801a46a:	687b      	ldr	r3, [r7, #4]
 801a46c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801a470:	429a      	cmp	r2, r3
 801a472:	d309      	bcc.n	801a488 <tcp_receive+0x2fc>
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801a47a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801a47c:	4413      	add	r3, r2
 801a47e:	b29a      	uxth	r2, r3
 801a480:	687b      	ldr	r3, [r7, #4]
 801a482:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801a486:	e004      	b.n	801a492 <tcp_receive+0x306>
 801a488:	687b      	ldr	r3, [r7, #4]
 801a48a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a48e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801a492:	687b      	ldr	r3, [r7, #4]
 801a494:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801a498:	687b      	ldr	r3, [r7, #4]
 801a49a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a49e:	429a      	cmp	r2, r3
 801a4a0:	d326      	bcc.n	801a4f0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801a4a2:	687b      	ldr	r3, [r7, #4]
 801a4a4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801a4a8:	687b      	ldr	r3, [r7, #4]
 801a4aa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a4ae:	1ad3      	subs	r3, r2, r3
 801a4b0:	b29a      	uxth	r2, r3
 801a4b2:	687b      	ldr	r3, [r7, #4]
 801a4b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801a4b8:	687b      	ldr	r3, [r7, #4]
 801a4ba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801a4be:	687b      	ldr	r3, [r7, #4]
 801a4c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a4c2:	4413      	add	r3, r2
 801a4c4:	b29a      	uxth	r2, r3
 801a4c6:	687b      	ldr	r3, [r7, #4]
 801a4c8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a4cc:	429a      	cmp	r2, r3
 801a4ce:	d30a      	bcc.n	801a4e6 <tcp_receive+0x35a>
 801a4d0:	687b      	ldr	r3, [r7, #4]
 801a4d2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801a4d6:	687b      	ldr	r3, [r7, #4]
 801a4d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a4da:	4413      	add	r3, r2
 801a4dc:	b29a      	uxth	r2, r3
 801a4de:	687b      	ldr	r3, [r7, #4]
 801a4e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801a4e4:	e004      	b.n	801a4f0 <tcp_receive+0x364>
 801a4e6:	687b      	ldr	r3, [r7, #4]
 801a4e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a4ec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801a4f0:	687b      	ldr	r3, [r7, #4]
 801a4f2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801a4f4:	687b      	ldr	r3, [r7, #4]
 801a4f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a4f8:	4a98      	ldr	r2, [pc, #608]	; (801a75c <tcp_receive+0x5d0>)
 801a4fa:	6878      	ldr	r0, [r7, #4]
 801a4fc:	f7ff fdca 	bl	801a094 <tcp_free_acked_segments>
 801a500:	4602      	mov	r2, r0
 801a502:	687b      	ldr	r3, [r7, #4]
 801a504:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801a506:	687b      	ldr	r3, [r7, #4]
 801a508:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801a50a:	687b      	ldr	r3, [r7, #4]
 801a50c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a50e:	4a94      	ldr	r2, [pc, #592]	; (801a760 <tcp_receive+0x5d4>)
 801a510:	6878      	ldr	r0, [r7, #4]
 801a512:	f7ff fdbf 	bl	801a094 <tcp_free_acked_segments>
 801a516:	4602      	mov	r2, r0
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801a51c:	687b      	ldr	r3, [r7, #4]
 801a51e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a520:	2b00      	cmp	r3, #0
 801a522:	d104      	bne.n	801a52e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801a524:	687b      	ldr	r3, [r7, #4]
 801a526:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a52a:	861a      	strh	r2, [r3, #48]	; 0x30
 801a52c:	e002      	b.n	801a534 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801a52e:	687b      	ldr	r3, [r7, #4]
 801a530:	2200      	movs	r2, #0
 801a532:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801a534:	687b      	ldr	r3, [r7, #4]
 801a536:	2200      	movs	r2, #0
 801a538:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801a53a:	687b      	ldr	r3, [r7, #4]
 801a53c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a53e:	2b00      	cmp	r3, #0
 801a540:	d103      	bne.n	801a54a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801a542:	687b      	ldr	r3, [r7, #4]
 801a544:	2200      	movs	r2, #0
 801a546:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801a54a:	687b      	ldr	r3, [r7, #4]
 801a54c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801a550:	4b84      	ldr	r3, [pc, #528]	; (801a764 <tcp_receive+0x5d8>)
 801a552:	881b      	ldrh	r3, [r3, #0]
 801a554:	4413      	add	r3, r2
 801a556:	b29a      	uxth	r2, r3
 801a558:	687b      	ldr	r3, [r7, #4]
 801a55a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801a55e:	687b      	ldr	r3, [r7, #4]
 801a560:	8b5b      	ldrh	r3, [r3, #26]
 801a562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801a566:	2b00      	cmp	r3, #0
 801a568:	d035      	beq.n	801a5d6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a56e:	2b00      	cmp	r3, #0
 801a570:	d118      	bne.n	801a5a4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801a572:	687b      	ldr	r3, [r7, #4]
 801a574:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a576:	2b00      	cmp	r3, #0
 801a578:	d00c      	beq.n	801a594 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801a57a:	687b      	ldr	r3, [r7, #4]
 801a57c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801a57e:	687b      	ldr	r3, [r7, #4]
 801a580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a582:	68db      	ldr	r3, [r3, #12]
 801a584:	685b      	ldr	r3, [r3, #4]
 801a586:	4618      	mov	r0, r3
 801a588:	f7fa fe29 	bl	80151de <lwip_htonl>
 801a58c:	4603      	mov	r3, r0
 801a58e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801a590:	2b00      	cmp	r3, #0
 801a592:	dc20      	bgt.n	801a5d6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801a594:	687b      	ldr	r3, [r7, #4]
 801a596:	8b5b      	ldrh	r3, [r3, #26]
 801a598:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801a59c:	b29a      	uxth	r2, r3
 801a59e:	687b      	ldr	r3, [r7, #4]
 801a5a0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801a5a2:	e018      	b.n	801a5d6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801a5a4:	687b      	ldr	r3, [r7, #4]
 801a5a6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a5ac:	68db      	ldr	r3, [r3, #12]
 801a5ae:	685b      	ldr	r3, [r3, #4]
 801a5b0:	4618      	mov	r0, r3
 801a5b2:	f7fa fe14 	bl	80151de <lwip_htonl>
 801a5b6:	4603      	mov	r3, r0
 801a5b8:	1ae3      	subs	r3, r4, r3
 801a5ba:	2b00      	cmp	r3, #0
 801a5bc:	dc0b      	bgt.n	801a5d6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801a5be:	687b      	ldr	r3, [r7, #4]
 801a5c0:	8b5b      	ldrh	r3, [r3, #26]
 801a5c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801a5c6:	b29a      	uxth	r2, r3
 801a5c8:	687b      	ldr	r3, [r7, #4]
 801a5ca:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801a5cc:	e003      	b.n	801a5d6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801a5ce:	6878      	ldr	r0, [r7, #4]
 801a5d0:	f002 fbce 	bl	801cd70 <tcp_send_empty_ack>
 801a5d4:	e000      	b.n	801a5d8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801a5d6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a5dc:	2b00      	cmp	r3, #0
 801a5de:	d05b      	beq.n	801a698 <tcp_receive+0x50c>
 801a5e0:	687b      	ldr	r3, [r7, #4]
 801a5e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a5e4:	4b60      	ldr	r3, [pc, #384]	; (801a768 <tcp_receive+0x5dc>)
 801a5e6:	681b      	ldr	r3, [r3, #0]
 801a5e8:	1ad3      	subs	r3, r2, r3
 801a5ea:	2b00      	cmp	r3, #0
 801a5ec:	da54      	bge.n	801a698 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801a5ee:	4b5f      	ldr	r3, [pc, #380]	; (801a76c <tcp_receive+0x5e0>)
 801a5f0:	681b      	ldr	r3, [r3, #0]
 801a5f2:	b29a      	uxth	r2, r3
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a5f8:	b29b      	uxth	r3, r3
 801a5fa:	1ad3      	subs	r3, r2, r3
 801a5fc:	b29b      	uxth	r3, r3
 801a5fe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801a602:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801a60c:	10db      	asrs	r3, r3, #3
 801a60e:	b21b      	sxth	r3, r3
 801a610:	b29b      	uxth	r3, r3
 801a612:	1ad3      	subs	r3, r2, r3
 801a614:	b29b      	uxth	r3, r3
 801a616:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801a61a:	687b      	ldr	r3, [r7, #4]
 801a61c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801a620:	b29a      	uxth	r2, r3
 801a622:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801a626:	4413      	add	r3, r2
 801a628:	b29b      	uxth	r3, r3
 801a62a:	b21a      	sxth	r2, r3
 801a62c:	687b      	ldr	r3, [r7, #4]
 801a62e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801a630:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801a634:	2b00      	cmp	r3, #0
 801a636:	da05      	bge.n	801a644 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801a638:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801a63c:	425b      	negs	r3, r3
 801a63e:	b29b      	uxth	r3, r3
 801a640:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801a644:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801a648:	687b      	ldr	r3, [r7, #4]
 801a64a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801a64e:	109b      	asrs	r3, r3, #2
 801a650:	b21b      	sxth	r3, r3
 801a652:	b29b      	uxth	r3, r3
 801a654:	1ad3      	subs	r3, r2, r3
 801a656:	b29b      	uxth	r3, r3
 801a658:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801a65c:	687b      	ldr	r3, [r7, #4]
 801a65e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801a662:	b29a      	uxth	r2, r3
 801a664:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801a668:	4413      	add	r3, r2
 801a66a:	b29b      	uxth	r3, r3
 801a66c:	b21a      	sxth	r2, r3
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801a672:	687b      	ldr	r3, [r7, #4]
 801a674:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801a678:	10db      	asrs	r3, r3, #3
 801a67a:	b21b      	sxth	r3, r3
 801a67c:	b29a      	uxth	r2, r3
 801a67e:	687b      	ldr	r3, [r7, #4]
 801a680:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801a684:	b29b      	uxth	r3, r3
 801a686:	4413      	add	r3, r2
 801a688:	b29b      	uxth	r3, r3
 801a68a:	b21a      	sxth	r2, r3
 801a68c:	687b      	ldr	r3, [r7, #4]
 801a68e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801a692:	687b      	ldr	r3, [r7, #4]
 801a694:	2200      	movs	r2, #0
 801a696:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801a698:	4b35      	ldr	r3, [pc, #212]	; (801a770 <tcp_receive+0x5e4>)
 801a69a:	881b      	ldrh	r3, [r3, #0]
 801a69c:	2b00      	cmp	r3, #0
 801a69e:	f000 84e2 	beq.w	801b066 <tcp_receive+0xeda>
 801a6a2:	687b      	ldr	r3, [r7, #4]
 801a6a4:	7d1b      	ldrb	r3, [r3, #20]
 801a6a6:	2b06      	cmp	r3, #6
 801a6a8:	f200 84dd 	bhi.w	801b066 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801a6ac:	687b      	ldr	r3, [r7, #4]
 801a6ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a6b0:	4b30      	ldr	r3, [pc, #192]	; (801a774 <tcp_receive+0x5e8>)
 801a6b2:	681b      	ldr	r3, [r3, #0]
 801a6b4:	1ad3      	subs	r3, r2, r3
 801a6b6:	3b01      	subs	r3, #1
 801a6b8:	2b00      	cmp	r3, #0
 801a6ba:	f2c0 808f 	blt.w	801a7dc <tcp_receive+0x650>
 801a6be:	687b      	ldr	r3, [r7, #4]
 801a6c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a6c2:	4b2b      	ldr	r3, [pc, #172]	; (801a770 <tcp_receive+0x5e4>)
 801a6c4:	881b      	ldrh	r3, [r3, #0]
 801a6c6:	4619      	mov	r1, r3
 801a6c8:	4b2a      	ldr	r3, [pc, #168]	; (801a774 <tcp_receive+0x5e8>)
 801a6ca:	681b      	ldr	r3, [r3, #0]
 801a6cc:	440b      	add	r3, r1
 801a6ce:	1ad3      	subs	r3, r2, r3
 801a6d0:	3301      	adds	r3, #1
 801a6d2:	2b00      	cmp	r3, #0
 801a6d4:	f300 8082 	bgt.w	801a7dc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801a6d8:	4b27      	ldr	r3, [pc, #156]	; (801a778 <tcp_receive+0x5ec>)
 801a6da:	685b      	ldr	r3, [r3, #4]
 801a6dc:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801a6de:	687b      	ldr	r3, [r7, #4]
 801a6e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a6e2:	4b24      	ldr	r3, [pc, #144]	; (801a774 <tcp_receive+0x5e8>)
 801a6e4:	681b      	ldr	r3, [r3, #0]
 801a6e6:	1ad3      	subs	r3, r2, r3
 801a6e8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801a6ea:	4b23      	ldr	r3, [pc, #140]	; (801a778 <tcp_receive+0x5ec>)
 801a6ec:	685b      	ldr	r3, [r3, #4]
 801a6ee:	2b00      	cmp	r3, #0
 801a6f0:	d106      	bne.n	801a700 <tcp_receive+0x574>
 801a6f2:	4b22      	ldr	r3, [pc, #136]	; (801a77c <tcp_receive+0x5f0>)
 801a6f4:	f240 5294 	movw	r2, #1428	; 0x594
 801a6f8:	4921      	ldr	r1, [pc, #132]	; (801a780 <tcp_receive+0x5f4>)
 801a6fa:	4822      	ldr	r0, [pc, #136]	; (801a784 <tcp_receive+0x5f8>)
 801a6fc:	f005 fc32 	bl	801ff64 <printf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801a700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a702:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a706:	4293      	cmp	r3, r2
 801a708:	d906      	bls.n	801a718 <tcp_receive+0x58c>
 801a70a:	4b1c      	ldr	r3, [pc, #112]	; (801a77c <tcp_receive+0x5f0>)
 801a70c:	f240 5295 	movw	r2, #1429	; 0x595
 801a710:	491d      	ldr	r1, [pc, #116]	; (801a788 <tcp_receive+0x5fc>)
 801a712:	481c      	ldr	r0, [pc, #112]	; (801a784 <tcp_receive+0x5f8>)
 801a714:	f005 fc26 	bl	801ff64 <printf>
      off = (u16_t)off32;
 801a718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a71a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801a71e:	4b16      	ldr	r3, [pc, #88]	; (801a778 <tcp_receive+0x5ec>)
 801a720:	685b      	ldr	r3, [r3, #4]
 801a722:	891b      	ldrh	r3, [r3, #8]
 801a724:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a728:	429a      	cmp	r2, r3
 801a72a:	d906      	bls.n	801a73a <tcp_receive+0x5ae>
 801a72c:	4b13      	ldr	r3, [pc, #76]	; (801a77c <tcp_receive+0x5f0>)
 801a72e:	f240 5297 	movw	r2, #1431	; 0x597
 801a732:	4916      	ldr	r1, [pc, #88]	; (801a78c <tcp_receive+0x600>)
 801a734:	4813      	ldr	r0, [pc, #76]	; (801a784 <tcp_receive+0x5f8>)
 801a736:	f005 fc15 	bl	801ff64 <printf>
      inseg.len -= off;
 801a73a:	4b0f      	ldr	r3, [pc, #60]	; (801a778 <tcp_receive+0x5ec>)
 801a73c:	891a      	ldrh	r2, [r3, #8]
 801a73e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a742:	1ad3      	subs	r3, r2, r3
 801a744:	b29a      	uxth	r2, r3
 801a746:	4b0c      	ldr	r3, [pc, #48]	; (801a778 <tcp_receive+0x5ec>)
 801a748:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801a74a:	4b0b      	ldr	r3, [pc, #44]	; (801a778 <tcp_receive+0x5ec>)
 801a74c:	685b      	ldr	r3, [r3, #4]
 801a74e:	891a      	ldrh	r2, [r3, #8]
 801a750:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a754:	1ad3      	subs	r3, r2, r3
 801a756:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801a758:	e02a      	b.n	801a7b0 <tcp_receive+0x624>
 801a75a:	bf00      	nop
 801a75c:	080281e0 	.word	0x080281e0
 801a760:	080281e8 	.word	0x080281e8
 801a764:	200188dc 	.word	0x200188dc
 801a768:	200188d8 	.word	0x200188d8
 801a76c:	2001889c 	.word	0x2001889c
 801a770:	200188de 	.word	0x200188de
 801a774:	200188d4 	.word	0x200188d4
 801a778:	200188b4 	.word	0x200188b4
 801a77c:	08027e78 	.word	0x08027e78
 801a780:	080281f0 	.word	0x080281f0
 801a784:	08027ec4 	.word	0x08027ec4
 801a788:	08028200 	.word	0x08028200
 801a78c:	08028210 	.word	0x08028210
        off -= p->len;
 801a790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a792:	895b      	ldrh	r3, [r3, #10]
 801a794:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a798:	1ad3      	subs	r3, r2, r3
 801a79a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801a79e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a7a0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801a7a2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801a7a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a7a6:	2200      	movs	r2, #0
 801a7a8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801a7aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a7ac:	681b      	ldr	r3, [r3, #0]
 801a7ae:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801a7b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a7b2:	895b      	ldrh	r3, [r3, #10]
 801a7b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a7b8:	429a      	cmp	r2, r3
 801a7ba:	d8e9      	bhi.n	801a790 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801a7bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a7c0:	4619      	mov	r1, r3
 801a7c2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801a7c4:	f7fc f860 	bl	8016888 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801a7c8:	687b      	ldr	r3, [r7, #4]
 801a7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a7cc:	4a91      	ldr	r2, [pc, #580]	; (801aa14 <tcp_receive+0x888>)
 801a7ce:	6013      	str	r3, [r2, #0]
 801a7d0:	4b91      	ldr	r3, [pc, #580]	; (801aa18 <tcp_receive+0x88c>)
 801a7d2:	68db      	ldr	r3, [r3, #12]
 801a7d4:	4a8f      	ldr	r2, [pc, #572]	; (801aa14 <tcp_receive+0x888>)
 801a7d6:	6812      	ldr	r2, [r2, #0]
 801a7d8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801a7da:	e00d      	b.n	801a7f8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801a7dc:	4b8d      	ldr	r3, [pc, #564]	; (801aa14 <tcp_receive+0x888>)
 801a7de:	681a      	ldr	r2, [r3, #0]
 801a7e0:	687b      	ldr	r3, [r7, #4]
 801a7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a7e4:	1ad3      	subs	r3, r2, r3
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	da06      	bge.n	801a7f8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801a7ea:	687b      	ldr	r3, [r7, #4]
 801a7ec:	8b5b      	ldrh	r3, [r3, #26]
 801a7ee:	f043 0302 	orr.w	r3, r3, #2
 801a7f2:	b29a      	uxth	r2, r3
 801a7f4:	687b      	ldr	r3, [r7, #4]
 801a7f6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801a7f8:	4b86      	ldr	r3, [pc, #536]	; (801aa14 <tcp_receive+0x888>)
 801a7fa:	681a      	ldr	r2, [r3, #0]
 801a7fc:	687b      	ldr	r3, [r7, #4]
 801a7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a800:	1ad3      	subs	r3, r2, r3
 801a802:	2b00      	cmp	r3, #0
 801a804:	f2c0 842a 	blt.w	801b05c <tcp_receive+0xed0>
 801a808:	4b82      	ldr	r3, [pc, #520]	; (801aa14 <tcp_receive+0x888>)
 801a80a:	681a      	ldr	r2, [r3, #0]
 801a80c:	687b      	ldr	r3, [r7, #4]
 801a80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a810:	6879      	ldr	r1, [r7, #4]
 801a812:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a814:	440b      	add	r3, r1
 801a816:	1ad3      	subs	r3, r2, r3
 801a818:	3301      	adds	r3, #1
 801a81a:	2b00      	cmp	r3, #0
 801a81c:	f300 841e 	bgt.w	801b05c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801a820:	687b      	ldr	r3, [r7, #4]
 801a822:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a824:	4b7b      	ldr	r3, [pc, #492]	; (801aa14 <tcp_receive+0x888>)
 801a826:	681b      	ldr	r3, [r3, #0]
 801a828:	429a      	cmp	r2, r3
 801a82a:	f040 829a 	bne.w	801ad62 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801a82e:	4b7a      	ldr	r3, [pc, #488]	; (801aa18 <tcp_receive+0x88c>)
 801a830:	891c      	ldrh	r4, [r3, #8]
 801a832:	4b79      	ldr	r3, [pc, #484]	; (801aa18 <tcp_receive+0x88c>)
 801a834:	68db      	ldr	r3, [r3, #12]
 801a836:	899b      	ldrh	r3, [r3, #12]
 801a838:	b29b      	uxth	r3, r3
 801a83a:	4618      	mov	r0, r3
 801a83c:	f7fa fcba 	bl	80151b4 <lwip_htons>
 801a840:	4603      	mov	r3, r0
 801a842:	b2db      	uxtb	r3, r3
 801a844:	f003 0303 	and.w	r3, r3, #3
 801a848:	2b00      	cmp	r3, #0
 801a84a:	d001      	beq.n	801a850 <tcp_receive+0x6c4>
 801a84c:	2301      	movs	r3, #1
 801a84e:	e000      	b.n	801a852 <tcp_receive+0x6c6>
 801a850:	2300      	movs	r3, #0
 801a852:	4423      	add	r3, r4
 801a854:	b29a      	uxth	r2, r3
 801a856:	4b71      	ldr	r3, [pc, #452]	; (801aa1c <tcp_receive+0x890>)
 801a858:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801a85a:	687b      	ldr	r3, [r7, #4]
 801a85c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a85e:	4b6f      	ldr	r3, [pc, #444]	; (801aa1c <tcp_receive+0x890>)
 801a860:	881b      	ldrh	r3, [r3, #0]
 801a862:	429a      	cmp	r2, r3
 801a864:	d275      	bcs.n	801a952 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801a866:	4b6c      	ldr	r3, [pc, #432]	; (801aa18 <tcp_receive+0x88c>)
 801a868:	68db      	ldr	r3, [r3, #12]
 801a86a:	899b      	ldrh	r3, [r3, #12]
 801a86c:	b29b      	uxth	r3, r3
 801a86e:	4618      	mov	r0, r3
 801a870:	f7fa fca0 	bl	80151b4 <lwip_htons>
 801a874:	4603      	mov	r3, r0
 801a876:	b2db      	uxtb	r3, r3
 801a878:	f003 0301 	and.w	r3, r3, #1
 801a87c:	2b00      	cmp	r3, #0
 801a87e:	d01f      	beq.n	801a8c0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801a880:	4b65      	ldr	r3, [pc, #404]	; (801aa18 <tcp_receive+0x88c>)
 801a882:	68db      	ldr	r3, [r3, #12]
 801a884:	899b      	ldrh	r3, [r3, #12]
 801a886:	b29b      	uxth	r3, r3
 801a888:	b21b      	sxth	r3, r3
 801a88a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801a88e:	b21c      	sxth	r4, r3
 801a890:	4b61      	ldr	r3, [pc, #388]	; (801aa18 <tcp_receive+0x88c>)
 801a892:	68db      	ldr	r3, [r3, #12]
 801a894:	899b      	ldrh	r3, [r3, #12]
 801a896:	b29b      	uxth	r3, r3
 801a898:	4618      	mov	r0, r3
 801a89a:	f7fa fc8b 	bl	80151b4 <lwip_htons>
 801a89e:	4603      	mov	r3, r0
 801a8a0:	b2db      	uxtb	r3, r3
 801a8a2:	b29b      	uxth	r3, r3
 801a8a4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801a8a8:	b29b      	uxth	r3, r3
 801a8aa:	4618      	mov	r0, r3
 801a8ac:	f7fa fc82 	bl	80151b4 <lwip_htons>
 801a8b0:	4603      	mov	r3, r0
 801a8b2:	b21b      	sxth	r3, r3
 801a8b4:	4323      	orrs	r3, r4
 801a8b6:	b21a      	sxth	r2, r3
 801a8b8:	4b57      	ldr	r3, [pc, #348]	; (801aa18 <tcp_receive+0x88c>)
 801a8ba:	68db      	ldr	r3, [r3, #12]
 801a8bc:	b292      	uxth	r2, r2
 801a8be:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801a8c0:	687b      	ldr	r3, [r7, #4]
 801a8c2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a8c4:	4b54      	ldr	r3, [pc, #336]	; (801aa18 <tcp_receive+0x88c>)
 801a8c6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801a8c8:	4b53      	ldr	r3, [pc, #332]	; (801aa18 <tcp_receive+0x88c>)
 801a8ca:	68db      	ldr	r3, [r3, #12]
 801a8cc:	899b      	ldrh	r3, [r3, #12]
 801a8ce:	b29b      	uxth	r3, r3
 801a8d0:	4618      	mov	r0, r3
 801a8d2:	f7fa fc6f 	bl	80151b4 <lwip_htons>
 801a8d6:	4603      	mov	r3, r0
 801a8d8:	b2db      	uxtb	r3, r3
 801a8da:	f003 0302 	and.w	r3, r3, #2
 801a8de:	2b00      	cmp	r3, #0
 801a8e0:	d005      	beq.n	801a8ee <tcp_receive+0x762>
            inseg.len -= 1;
 801a8e2:	4b4d      	ldr	r3, [pc, #308]	; (801aa18 <tcp_receive+0x88c>)
 801a8e4:	891b      	ldrh	r3, [r3, #8]
 801a8e6:	3b01      	subs	r3, #1
 801a8e8:	b29a      	uxth	r2, r3
 801a8ea:	4b4b      	ldr	r3, [pc, #300]	; (801aa18 <tcp_receive+0x88c>)
 801a8ec:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801a8ee:	4b4a      	ldr	r3, [pc, #296]	; (801aa18 <tcp_receive+0x88c>)
 801a8f0:	685b      	ldr	r3, [r3, #4]
 801a8f2:	4a49      	ldr	r2, [pc, #292]	; (801aa18 <tcp_receive+0x88c>)
 801a8f4:	8912      	ldrh	r2, [r2, #8]
 801a8f6:	4611      	mov	r1, r2
 801a8f8:	4618      	mov	r0, r3
 801a8fa:	f7fb fec5 	bl	8016688 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801a8fe:	4b46      	ldr	r3, [pc, #280]	; (801aa18 <tcp_receive+0x88c>)
 801a900:	891c      	ldrh	r4, [r3, #8]
 801a902:	4b45      	ldr	r3, [pc, #276]	; (801aa18 <tcp_receive+0x88c>)
 801a904:	68db      	ldr	r3, [r3, #12]
 801a906:	899b      	ldrh	r3, [r3, #12]
 801a908:	b29b      	uxth	r3, r3
 801a90a:	4618      	mov	r0, r3
 801a90c:	f7fa fc52 	bl	80151b4 <lwip_htons>
 801a910:	4603      	mov	r3, r0
 801a912:	b2db      	uxtb	r3, r3
 801a914:	f003 0303 	and.w	r3, r3, #3
 801a918:	2b00      	cmp	r3, #0
 801a91a:	d001      	beq.n	801a920 <tcp_receive+0x794>
 801a91c:	2301      	movs	r3, #1
 801a91e:	e000      	b.n	801a922 <tcp_receive+0x796>
 801a920:	2300      	movs	r3, #0
 801a922:	4423      	add	r3, r4
 801a924:	b29a      	uxth	r2, r3
 801a926:	4b3d      	ldr	r3, [pc, #244]	; (801aa1c <tcp_receive+0x890>)
 801a928:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801a92a:	4b3c      	ldr	r3, [pc, #240]	; (801aa1c <tcp_receive+0x890>)
 801a92c:	881b      	ldrh	r3, [r3, #0]
 801a92e:	461a      	mov	r2, r3
 801a930:	4b38      	ldr	r3, [pc, #224]	; (801aa14 <tcp_receive+0x888>)
 801a932:	681b      	ldr	r3, [r3, #0]
 801a934:	441a      	add	r2, r3
 801a936:	687b      	ldr	r3, [r7, #4]
 801a938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a93a:	6879      	ldr	r1, [r7, #4]
 801a93c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a93e:	440b      	add	r3, r1
 801a940:	429a      	cmp	r2, r3
 801a942:	d006      	beq.n	801a952 <tcp_receive+0x7c6>
 801a944:	4b36      	ldr	r3, [pc, #216]	; (801aa20 <tcp_receive+0x894>)
 801a946:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801a94a:	4936      	ldr	r1, [pc, #216]	; (801aa24 <tcp_receive+0x898>)
 801a94c:	4836      	ldr	r0, [pc, #216]	; (801aa28 <tcp_receive+0x89c>)
 801a94e:	f005 fb09 	bl	801ff64 <printf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801a952:	687b      	ldr	r3, [r7, #4]
 801a954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a956:	2b00      	cmp	r3, #0
 801a958:	f000 80e7 	beq.w	801ab2a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801a95c:	4b2e      	ldr	r3, [pc, #184]	; (801aa18 <tcp_receive+0x88c>)
 801a95e:	68db      	ldr	r3, [r3, #12]
 801a960:	899b      	ldrh	r3, [r3, #12]
 801a962:	b29b      	uxth	r3, r3
 801a964:	4618      	mov	r0, r3
 801a966:	f7fa fc25 	bl	80151b4 <lwip_htons>
 801a96a:	4603      	mov	r3, r0
 801a96c:	b2db      	uxtb	r3, r3
 801a96e:	f003 0301 	and.w	r3, r3, #1
 801a972:	2b00      	cmp	r3, #0
 801a974:	d010      	beq.n	801a998 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801a976:	e00a      	b.n	801a98e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a97c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a982:	681a      	ldr	r2, [r3, #0]
 801a984:	687b      	ldr	r3, [r7, #4]
 801a986:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801a988:	68f8      	ldr	r0, [r7, #12]
 801a98a:	f7fd fcdc 	bl	8018346 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801a98e:	687b      	ldr	r3, [r7, #4]
 801a990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a992:	2b00      	cmp	r3, #0
 801a994:	d1f0      	bne.n	801a978 <tcp_receive+0x7ec>
 801a996:	e0c8      	b.n	801ab2a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a99c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801a99e:	e052      	b.n	801aa46 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801a9a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a9a2:	68db      	ldr	r3, [r3, #12]
 801a9a4:	899b      	ldrh	r3, [r3, #12]
 801a9a6:	b29b      	uxth	r3, r3
 801a9a8:	4618      	mov	r0, r3
 801a9aa:	f7fa fc03 	bl	80151b4 <lwip_htons>
 801a9ae:	4603      	mov	r3, r0
 801a9b0:	b2db      	uxtb	r3, r3
 801a9b2:	f003 0301 	and.w	r3, r3, #1
 801a9b6:	2b00      	cmp	r3, #0
 801a9b8:	d03d      	beq.n	801aa36 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801a9ba:	4b17      	ldr	r3, [pc, #92]	; (801aa18 <tcp_receive+0x88c>)
 801a9bc:	68db      	ldr	r3, [r3, #12]
 801a9be:	899b      	ldrh	r3, [r3, #12]
 801a9c0:	b29b      	uxth	r3, r3
 801a9c2:	4618      	mov	r0, r3
 801a9c4:	f7fa fbf6 	bl	80151b4 <lwip_htons>
 801a9c8:	4603      	mov	r3, r0
 801a9ca:	b2db      	uxtb	r3, r3
 801a9cc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801a9d0:	2b00      	cmp	r3, #0
 801a9d2:	d130      	bne.n	801aa36 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801a9d4:	4b10      	ldr	r3, [pc, #64]	; (801aa18 <tcp_receive+0x88c>)
 801a9d6:	68db      	ldr	r3, [r3, #12]
 801a9d8:	899b      	ldrh	r3, [r3, #12]
 801a9da:	b29c      	uxth	r4, r3
 801a9dc:	2001      	movs	r0, #1
 801a9de:	f7fa fbe9 	bl	80151b4 <lwip_htons>
 801a9e2:	4603      	mov	r3, r0
 801a9e4:	461a      	mov	r2, r3
 801a9e6:	4b0c      	ldr	r3, [pc, #48]	; (801aa18 <tcp_receive+0x88c>)
 801a9e8:	68db      	ldr	r3, [r3, #12]
 801a9ea:	4322      	orrs	r2, r4
 801a9ec:	b292      	uxth	r2, r2
 801a9ee:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801a9f0:	4b09      	ldr	r3, [pc, #36]	; (801aa18 <tcp_receive+0x88c>)
 801a9f2:	891c      	ldrh	r4, [r3, #8]
 801a9f4:	4b08      	ldr	r3, [pc, #32]	; (801aa18 <tcp_receive+0x88c>)
 801a9f6:	68db      	ldr	r3, [r3, #12]
 801a9f8:	899b      	ldrh	r3, [r3, #12]
 801a9fa:	b29b      	uxth	r3, r3
 801a9fc:	4618      	mov	r0, r3
 801a9fe:	f7fa fbd9 	bl	80151b4 <lwip_htons>
 801aa02:	4603      	mov	r3, r0
 801aa04:	b2db      	uxtb	r3, r3
 801aa06:	f003 0303 	and.w	r3, r3, #3
 801aa0a:	2b00      	cmp	r3, #0
 801aa0c:	d00e      	beq.n	801aa2c <tcp_receive+0x8a0>
 801aa0e:	2301      	movs	r3, #1
 801aa10:	e00d      	b.n	801aa2e <tcp_receive+0x8a2>
 801aa12:	bf00      	nop
 801aa14:	200188d4 	.word	0x200188d4
 801aa18:	200188b4 	.word	0x200188b4
 801aa1c:	200188de 	.word	0x200188de
 801aa20:	08027e78 	.word	0x08027e78
 801aa24:	08028220 	.word	0x08028220
 801aa28:	08027ec4 	.word	0x08027ec4
 801aa2c:	2300      	movs	r3, #0
 801aa2e:	4423      	add	r3, r4
 801aa30:	b29a      	uxth	r2, r3
 801aa32:	4b98      	ldr	r3, [pc, #608]	; (801ac94 <tcp_receive+0xb08>)
 801aa34:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801aa36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801aa38:	613b      	str	r3, [r7, #16]
              next = next->next;
 801aa3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801aa3c:	681b      	ldr	r3, [r3, #0]
 801aa3e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801aa40:	6938      	ldr	r0, [r7, #16]
 801aa42:	f7fd fc80 	bl	8018346 <tcp_seg_free>
            while (next &&
 801aa46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801aa48:	2b00      	cmp	r3, #0
 801aa4a:	d00e      	beq.n	801aa6a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801aa4c:	4b91      	ldr	r3, [pc, #580]	; (801ac94 <tcp_receive+0xb08>)
 801aa4e:	881b      	ldrh	r3, [r3, #0]
 801aa50:	461a      	mov	r2, r3
 801aa52:	4b91      	ldr	r3, [pc, #580]	; (801ac98 <tcp_receive+0xb0c>)
 801aa54:	681b      	ldr	r3, [r3, #0]
 801aa56:	441a      	add	r2, r3
 801aa58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801aa5a:	68db      	ldr	r3, [r3, #12]
 801aa5c:	685b      	ldr	r3, [r3, #4]
 801aa5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801aa60:	8909      	ldrh	r1, [r1, #8]
 801aa62:	440b      	add	r3, r1
 801aa64:	1ad3      	subs	r3, r2, r3
            while (next &&
 801aa66:	2b00      	cmp	r3, #0
 801aa68:	da9a      	bge.n	801a9a0 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801aa6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801aa6c:	2b00      	cmp	r3, #0
 801aa6e:	d059      	beq.n	801ab24 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 801aa70:	4b88      	ldr	r3, [pc, #544]	; (801ac94 <tcp_receive+0xb08>)
 801aa72:	881b      	ldrh	r3, [r3, #0]
 801aa74:	461a      	mov	r2, r3
 801aa76:	4b88      	ldr	r3, [pc, #544]	; (801ac98 <tcp_receive+0xb0c>)
 801aa78:	681b      	ldr	r3, [r3, #0]
 801aa7a:	441a      	add	r2, r3
 801aa7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801aa7e:	68db      	ldr	r3, [r3, #12]
 801aa80:	685b      	ldr	r3, [r3, #4]
 801aa82:	1ad3      	subs	r3, r2, r3
            if (next &&
 801aa84:	2b00      	cmp	r3, #0
 801aa86:	dd4d      	ble.n	801ab24 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801aa88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801aa8a:	68db      	ldr	r3, [r3, #12]
 801aa8c:	685b      	ldr	r3, [r3, #4]
 801aa8e:	b29a      	uxth	r2, r3
 801aa90:	4b81      	ldr	r3, [pc, #516]	; (801ac98 <tcp_receive+0xb0c>)
 801aa92:	681b      	ldr	r3, [r3, #0]
 801aa94:	b29b      	uxth	r3, r3
 801aa96:	1ad3      	subs	r3, r2, r3
 801aa98:	b29a      	uxth	r2, r3
 801aa9a:	4b80      	ldr	r3, [pc, #512]	; (801ac9c <tcp_receive+0xb10>)
 801aa9c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801aa9e:	4b7f      	ldr	r3, [pc, #508]	; (801ac9c <tcp_receive+0xb10>)
 801aaa0:	68db      	ldr	r3, [r3, #12]
 801aaa2:	899b      	ldrh	r3, [r3, #12]
 801aaa4:	b29b      	uxth	r3, r3
 801aaa6:	4618      	mov	r0, r3
 801aaa8:	f7fa fb84 	bl	80151b4 <lwip_htons>
 801aaac:	4603      	mov	r3, r0
 801aaae:	b2db      	uxtb	r3, r3
 801aab0:	f003 0302 	and.w	r3, r3, #2
 801aab4:	2b00      	cmp	r3, #0
 801aab6:	d005      	beq.n	801aac4 <tcp_receive+0x938>
                inseg.len -= 1;
 801aab8:	4b78      	ldr	r3, [pc, #480]	; (801ac9c <tcp_receive+0xb10>)
 801aaba:	891b      	ldrh	r3, [r3, #8]
 801aabc:	3b01      	subs	r3, #1
 801aabe:	b29a      	uxth	r2, r3
 801aac0:	4b76      	ldr	r3, [pc, #472]	; (801ac9c <tcp_receive+0xb10>)
 801aac2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801aac4:	4b75      	ldr	r3, [pc, #468]	; (801ac9c <tcp_receive+0xb10>)
 801aac6:	685b      	ldr	r3, [r3, #4]
 801aac8:	4a74      	ldr	r2, [pc, #464]	; (801ac9c <tcp_receive+0xb10>)
 801aaca:	8912      	ldrh	r2, [r2, #8]
 801aacc:	4611      	mov	r1, r2
 801aace:	4618      	mov	r0, r3
 801aad0:	f7fb fdda 	bl	8016688 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801aad4:	4b71      	ldr	r3, [pc, #452]	; (801ac9c <tcp_receive+0xb10>)
 801aad6:	891c      	ldrh	r4, [r3, #8]
 801aad8:	4b70      	ldr	r3, [pc, #448]	; (801ac9c <tcp_receive+0xb10>)
 801aada:	68db      	ldr	r3, [r3, #12]
 801aadc:	899b      	ldrh	r3, [r3, #12]
 801aade:	b29b      	uxth	r3, r3
 801aae0:	4618      	mov	r0, r3
 801aae2:	f7fa fb67 	bl	80151b4 <lwip_htons>
 801aae6:	4603      	mov	r3, r0
 801aae8:	b2db      	uxtb	r3, r3
 801aaea:	f003 0303 	and.w	r3, r3, #3
 801aaee:	2b00      	cmp	r3, #0
 801aaf0:	d001      	beq.n	801aaf6 <tcp_receive+0x96a>
 801aaf2:	2301      	movs	r3, #1
 801aaf4:	e000      	b.n	801aaf8 <tcp_receive+0x96c>
 801aaf6:	2300      	movs	r3, #0
 801aaf8:	4423      	add	r3, r4
 801aafa:	b29a      	uxth	r2, r3
 801aafc:	4b65      	ldr	r3, [pc, #404]	; (801ac94 <tcp_receive+0xb08>)
 801aafe:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801ab00:	4b64      	ldr	r3, [pc, #400]	; (801ac94 <tcp_receive+0xb08>)
 801ab02:	881b      	ldrh	r3, [r3, #0]
 801ab04:	461a      	mov	r2, r3
 801ab06:	4b64      	ldr	r3, [pc, #400]	; (801ac98 <tcp_receive+0xb0c>)
 801ab08:	681b      	ldr	r3, [r3, #0]
 801ab0a:	441a      	add	r2, r3
 801ab0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ab0e:	68db      	ldr	r3, [r3, #12]
 801ab10:	685b      	ldr	r3, [r3, #4]
 801ab12:	429a      	cmp	r2, r3
 801ab14:	d006      	beq.n	801ab24 <tcp_receive+0x998>
 801ab16:	4b62      	ldr	r3, [pc, #392]	; (801aca0 <tcp_receive+0xb14>)
 801ab18:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801ab1c:	4961      	ldr	r1, [pc, #388]	; (801aca4 <tcp_receive+0xb18>)
 801ab1e:	4862      	ldr	r0, [pc, #392]	; (801aca8 <tcp_receive+0xb1c>)
 801ab20:	f005 fa20 	bl	801ff64 <printf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801ab24:	687b      	ldr	r3, [r7, #4]
 801ab26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ab28:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801ab2a:	4b5a      	ldr	r3, [pc, #360]	; (801ac94 <tcp_receive+0xb08>)
 801ab2c:	881b      	ldrh	r3, [r3, #0]
 801ab2e:	461a      	mov	r2, r3
 801ab30:	4b59      	ldr	r3, [pc, #356]	; (801ac98 <tcp_receive+0xb0c>)
 801ab32:	681b      	ldr	r3, [r3, #0]
 801ab34:	441a      	add	r2, r3
 801ab36:	687b      	ldr	r3, [r7, #4]
 801ab38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801ab3e:	4b55      	ldr	r3, [pc, #340]	; (801ac94 <tcp_receive+0xb08>)
 801ab40:	881b      	ldrh	r3, [r3, #0]
 801ab42:	429a      	cmp	r2, r3
 801ab44:	d206      	bcs.n	801ab54 <tcp_receive+0x9c8>
 801ab46:	4b56      	ldr	r3, [pc, #344]	; (801aca0 <tcp_receive+0xb14>)
 801ab48:	f240 6207 	movw	r2, #1543	; 0x607
 801ab4c:	4957      	ldr	r1, [pc, #348]	; (801acac <tcp_receive+0xb20>)
 801ab4e:	4856      	ldr	r0, [pc, #344]	; (801aca8 <tcp_receive+0xb1c>)
 801ab50:	f005 fa08 	bl	801ff64 <printf>
        pcb->rcv_wnd -= tcplen;
 801ab54:	687b      	ldr	r3, [r7, #4]
 801ab56:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801ab58:	4b4e      	ldr	r3, [pc, #312]	; (801ac94 <tcp_receive+0xb08>)
 801ab5a:	881b      	ldrh	r3, [r3, #0]
 801ab5c:	1ad3      	subs	r3, r2, r3
 801ab5e:	b29a      	uxth	r2, r3
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801ab64:	6878      	ldr	r0, [r7, #4]
 801ab66:	f7fc fdb1 	bl	80176cc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801ab6a:	4b4c      	ldr	r3, [pc, #304]	; (801ac9c <tcp_receive+0xb10>)
 801ab6c:	685b      	ldr	r3, [r3, #4]
 801ab6e:	891b      	ldrh	r3, [r3, #8]
 801ab70:	2b00      	cmp	r3, #0
 801ab72:	d006      	beq.n	801ab82 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801ab74:	4b49      	ldr	r3, [pc, #292]	; (801ac9c <tcp_receive+0xb10>)
 801ab76:	685b      	ldr	r3, [r3, #4]
 801ab78:	4a4d      	ldr	r2, [pc, #308]	; (801acb0 <tcp_receive+0xb24>)
 801ab7a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801ab7c:	4b47      	ldr	r3, [pc, #284]	; (801ac9c <tcp_receive+0xb10>)
 801ab7e:	2200      	movs	r2, #0
 801ab80:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801ab82:	4b46      	ldr	r3, [pc, #280]	; (801ac9c <tcp_receive+0xb10>)
 801ab84:	68db      	ldr	r3, [r3, #12]
 801ab86:	899b      	ldrh	r3, [r3, #12]
 801ab88:	b29b      	uxth	r3, r3
 801ab8a:	4618      	mov	r0, r3
 801ab8c:	f7fa fb12 	bl	80151b4 <lwip_htons>
 801ab90:	4603      	mov	r3, r0
 801ab92:	b2db      	uxtb	r3, r3
 801ab94:	f003 0301 	and.w	r3, r3, #1
 801ab98:	2b00      	cmp	r3, #0
 801ab9a:	f000 80b8 	beq.w	801ad0e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801ab9e:	4b45      	ldr	r3, [pc, #276]	; (801acb4 <tcp_receive+0xb28>)
 801aba0:	781b      	ldrb	r3, [r3, #0]
 801aba2:	f043 0320 	orr.w	r3, r3, #32
 801aba6:	b2da      	uxtb	r2, r3
 801aba8:	4b42      	ldr	r3, [pc, #264]	; (801acb4 <tcp_receive+0xb28>)
 801abaa:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801abac:	e0af      	b.n	801ad0e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801abae:	687b      	ldr	r3, [r7, #4]
 801abb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801abb2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801abb4:	687b      	ldr	r3, [r7, #4]
 801abb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801abb8:	68db      	ldr	r3, [r3, #12]
 801abba:	685b      	ldr	r3, [r3, #4]
 801abbc:	4a36      	ldr	r2, [pc, #216]	; (801ac98 <tcp_receive+0xb0c>)
 801abbe:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801abc0:	68bb      	ldr	r3, [r7, #8]
 801abc2:	891b      	ldrh	r3, [r3, #8]
 801abc4:	461c      	mov	r4, r3
 801abc6:	68bb      	ldr	r3, [r7, #8]
 801abc8:	68db      	ldr	r3, [r3, #12]
 801abca:	899b      	ldrh	r3, [r3, #12]
 801abcc:	b29b      	uxth	r3, r3
 801abce:	4618      	mov	r0, r3
 801abd0:	f7fa faf0 	bl	80151b4 <lwip_htons>
 801abd4:	4603      	mov	r3, r0
 801abd6:	b2db      	uxtb	r3, r3
 801abd8:	f003 0303 	and.w	r3, r3, #3
 801abdc:	2b00      	cmp	r3, #0
 801abde:	d001      	beq.n	801abe4 <tcp_receive+0xa58>
 801abe0:	2301      	movs	r3, #1
 801abe2:	e000      	b.n	801abe6 <tcp_receive+0xa5a>
 801abe4:	2300      	movs	r3, #0
 801abe6:	191a      	adds	r2, r3, r4
 801abe8:	687b      	ldr	r3, [r7, #4]
 801abea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801abec:	441a      	add	r2, r3
 801abee:	687b      	ldr	r3, [r7, #4]
 801abf0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801abf2:	687b      	ldr	r3, [r7, #4]
 801abf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801abf6:	461c      	mov	r4, r3
 801abf8:	68bb      	ldr	r3, [r7, #8]
 801abfa:	891b      	ldrh	r3, [r3, #8]
 801abfc:	461d      	mov	r5, r3
 801abfe:	68bb      	ldr	r3, [r7, #8]
 801ac00:	68db      	ldr	r3, [r3, #12]
 801ac02:	899b      	ldrh	r3, [r3, #12]
 801ac04:	b29b      	uxth	r3, r3
 801ac06:	4618      	mov	r0, r3
 801ac08:	f7fa fad4 	bl	80151b4 <lwip_htons>
 801ac0c:	4603      	mov	r3, r0
 801ac0e:	b2db      	uxtb	r3, r3
 801ac10:	f003 0303 	and.w	r3, r3, #3
 801ac14:	2b00      	cmp	r3, #0
 801ac16:	d001      	beq.n	801ac1c <tcp_receive+0xa90>
 801ac18:	2301      	movs	r3, #1
 801ac1a:	e000      	b.n	801ac1e <tcp_receive+0xa92>
 801ac1c:	2300      	movs	r3, #0
 801ac1e:	442b      	add	r3, r5
 801ac20:	429c      	cmp	r4, r3
 801ac22:	d206      	bcs.n	801ac32 <tcp_receive+0xaa6>
 801ac24:	4b1e      	ldr	r3, [pc, #120]	; (801aca0 <tcp_receive+0xb14>)
 801ac26:	f240 622b 	movw	r2, #1579	; 0x62b
 801ac2a:	4923      	ldr	r1, [pc, #140]	; (801acb8 <tcp_receive+0xb2c>)
 801ac2c:	481e      	ldr	r0, [pc, #120]	; (801aca8 <tcp_receive+0xb1c>)
 801ac2e:	f005 f999 	bl	801ff64 <printf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801ac32:	68bb      	ldr	r3, [r7, #8]
 801ac34:	891b      	ldrh	r3, [r3, #8]
 801ac36:	461c      	mov	r4, r3
 801ac38:	68bb      	ldr	r3, [r7, #8]
 801ac3a:	68db      	ldr	r3, [r3, #12]
 801ac3c:	899b      	ldrh	r3, [r3, #12]
 801ac3e:	b29b      	uxth	r3, r3
 801ac40:	4618      	mov	r0, r3
 801ac42:	f7fa fab7 	bl	80151b4 <lwip_htons>
 801ac46:	4603      	mov	r3, r0
 801ac48:	b2db      	uxtb	r3, r3
 801ac4a:	f003 0303 	and.w	r3, r3, #3
 801ac4e:	2b00      	cmp	r3, #0
 801ac50:	d001      	beq.n	801ac56 <tcp_receive+0xaca>
 801ac52:	2301      	movs	r3, #1
 801ac54:	e000      	b.n	801ac58 <tcp_receive+0xacc>
 801ac56:	2300      	movs	r3, #0
 801ac58:	1919      	adds	r1, r3, r4
 801ac5a:	687b      	ldr	r3, [r7, #4]
 801ac5c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801ac5e:	b28b      	uxth	r3, r1
 801ac60:	1ad3      	subs	r3, r2, r3
 801ac62:	b29a      	uxth	r2, r3
 801ac64:	687b      	ldr	r3, [r7, #4]
 801ac66:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801ac68:	6878      	ldr	r0, [r7, #4]
 801ac6a:	f7fc fd2f 	bl	80176cc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801ac6e:	68bb      	ldr	r3, [r7, #8]
 801ac70:	685b      	ldr	r3, [r3, #4]
 801ac72:	891b      	ldrh	r3, [r3, #8]
 801ac74:	2b00      	cmp	r3, #0
 801ac76:	d028      	beq.n	801acca <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801ac78:	4b0d      	ldr	r3, [pc, #52]	; (801acb0 <tcp_receive+0xb24>)
 801ac7a:	681b      	ldr	r3, [r3, #0]
 801ac7c:	2b00      	cmp	r3, #0
 801ac7e:	d01d      	beq.n	801acbc <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 801ac80:	4b0b      	ldr	r3, [pc, #44]	; (801acb0 <tcp_receive+0xb24>)
 801ac82:	681a      	ldr	r2, [r3, #0]
 801ac84:	68bb      	ldr	r3, [r7, #8]
 801ac86:	685b      	ldr	r3, [r3, #4]
 801ac88:	4619      	mov	r1, r3
 801ac8a:	4610      	mov	r0, r2
 801ac8c:	f7fb ff50 	bl	8016b30 <pbuf_cat>
 801ac90:	e018      	b.n	801acc4 <tcp_receive+0xb38>
 801ac92:	bf00      	nop
 801ac94:	200188de 	.word	0x200188de
 801ac98:	200188d4 	.word	0x200188d4
 801ac9c:	200188b4 	.word	0x200188b4
 801aca0:	08027e78 	.word	0x08027e78
 801aca4:	08028258 	.word	0x08028258
 801aca8:	08027ec4 	.word	0x08027ec4
 801acac:	08028294 	.word	0x08028294
 801acb0:	200188e4 	.word	0x200188e4
 801acb4:	200188e1 	.word	0x200188e1
 801acb8:	080282b4 	.word	0x080282b4
            } else {
              recv_data = cseg->p;
 801acbc:	68bb      	ldr	r3, [r7, #8]
 801acbe:	685b      	ldr	r3, [r3, #4]
 801acc0:	4a70      	ldr	r2, [pc, #448]	; (801ae84 <tcp_receive+0xcf8>)
 801acc2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801acc4:	68bb      	ldr	r3, [r7, #8]
 801acc6:	2200      	movs	r2, #0
 801acc8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801acca:	68bb      	ldr	r3, [r7, #8]
 801accc:	68db      	ldr	r3, [r3, #12]
 801acce:	899b      	ldrh	r3, [r3, #12]
 801acd0:	b29b      	uxth	r3, r3
 801acd2:	4618      	mov	r0, r3
 801acd4:	f7fa fa6e 	bl	80151b4 <lwip_htons>
 801acd8:	4603      	mov	r3, r0
 801acda:	b2db      	uxtb	r3, r3
 801acdc:	f003 0301 	and.w	r3, r3, #1
 801ace0:	2b00      	cmp	r3, #0
 801ace2:	d00d      	beq.n	801ad00 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801ace4:	4b68      	ldr	r3, [pc, #416]	; (801ae88 <tcp_receive+0xcfc>)
 801ace6:	781b      	ldrb	r3, [r3, #0]
 801ace8:	f043 0320 	orr.w	r3, r3, #32
 801acec:	b2da      	uxtb	r2, r3
 801acee:	4b66      	ldr	r3, [pc, #408]	; (801ae88 <tcp_receive+0xcfc>)
 801acf0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801acf2:	687b      	ldr	r3, [r7, #4]
 801acf4:	7d1b      	ldrb	r3, [r3, #20]
 801acf6:	2b04      	cmp	r3, #4
 801acf8:	d102      	bne.n	801ad00 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801acfa:	687b      	ldr	r3, [r7, #4]
 801acfc:	2207      	movs	r2, #7
 801acfe:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801ad00:	68bb      	ldr	r3, [r7, #8]
 801ad02:	681a      	ldr	r2, [r3, #0]
 801ad04:	687b      	ldr	r3, [r7, #4]
 801ad06:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801ad08:	68b8      	ldr	r0, [r7, #8]
 801ad0a:	f7fd fb1c 	bl	8018346 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801ad0e:	687b      	ldr	r3, [r7, #4]
 801ad10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ad12:	2b00      	cmp	r3, #0
 801ad14:	d008      	beq.n	801ad28 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801ad16:	687b      	ldr	r3, [r7, #4]
 801ad18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ad1a:	68db      	ldr	r3, [r3, #12]
 801ad1c:	685a      	ldr	r2, [r3, #4]
 801ad1e:	687b      	ldr	r3, [r7, #4]
 801ad20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801ad22:	429a      	cmp	r2, r3
 801ad24:	f43f af43 	beq.w	801abae <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801ad28:	687b      	ldr	r3, [r7, #4]
 801ad2a:	8b5b      	ldrh	r3, [r3, #26]
 801ad2c:	f003 0301 	and.w	r3, r3, #1
 801ad30:	2b00      	cmp	r3, #0
 801ad32:	d00e      	beq.n	801ad52 <tcp_receive+0xbc6>
 801ad34:	687b      	ldr	r3, [r7, #4]
 801ad36:	8b5b      	ldrh	r3, [r3, #26]
 801ad38:	f023 0301 	bic.w	r3, r3, #1
 801ad3c:	b29a      	uxth	r2, r3
 801ad3e:	687b      	ldr	r3, [r7, #4]
 801ad40:	835a      	strh	r2, [r3, #26]
 801ad42:	687b      	ldr	r3, [r7, #4]
 801ad44:	8b5b      	ldrh	r3, [r3, #26]
 801ad46:	f043 0302 	orr.w	r3, r3, #2
 801ad4a:	b29a      	uxth	r2, r3
 801ad4c:	687b      	ldr	r3, [r7, #4]
 801ad4e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801ad50:	e188      	b.n	801b064 <tcp_receive+0xed8>
        tcp_ack(pcb);
 801ad52:	687b      	ldr	r3, [r7, #4]
 801ad54:	8b5b      	ldrh	r3, [r3, #26]
 801ad56:	f043 0301 	orr.w	r3, r3, #1
 801ad5a:	b29a      	uxth	r2, r3
 801ad5c:	687b      	ldr	r3, [r7, #4]
 801ad5e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801ad60:	e180      	b.n	801b064 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801ad62:	687b      	ldr	r3, [r7, #4]
 801ad64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ad66:	2b00      	cmp	r3, #0
 801ad68:	d106      	bne.n	801ad78 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801ad6a:	4848      	ldr	r0, [pc, #288]	; (801ae8c <tcp_receive+0xd00>)
 801ad6c:	f7fd fb04 	bl	8018378 <tcp_seg_copy>
 801ad70:	4602      	mov	r2, r0
 801ad72:	687b      	ldr	r3, [r7, #4]
 801ad74:	675a      	str	r2, [r3, #116]	; 0x74
 801ad76:	e16d      	b.n	801b054 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801ad78:	2300      	movs	r3, #0
 801ad7a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801ad7c:	687b      	ldr	r3, [r7, #4]
 801ad7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ad80:	63bb      	str	r3, [r7, #56]	; 0x38
 801ad82:	e157      	b.n	801b034 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 801ad84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad86:	68db      	ldr	r3, [r3, #12]
 801ad88:	685a      	ldr	r2, [r3, #4]
 801ad8a:	4b41      	ldr	r3, [pc, #260]	; (801ae90 <tcp_receive+0xd04>)
 801ad8c:	681b      	ldr	r3, [r3, #0]
 801ad8e:	429a      	cmp	r2, r3
 801ad90:	d11d      	bne.n	801adce <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801ad92:	4b3e      	ldr	r3, [pc, #248]	; (801ae8c <tcp_receive+0xd00>)
 801ad94:	891a      	ldrh	r2, [r3, #8]
 801ad96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad98:	891b      	ldrh	r3, [r3, #8]
 801ad9a:	429a      	cmp	r2, r3
 801ad9c:	f240 814f 	bls.w	801b03e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801ada0:	483a      	ldr	r0, [pc, #232]	; (801ae8c <tcp_receive+0xd00>)
 801ada2:	f7fd fae9 	bl	8018378 <tcp_seg_copy>
 801ada6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801ada8:	697b      	ldr	r3, [r7, #20]
 801adaa:	2b00      	cmp	r3, #0
 801adac:	f000 8149 	beq.w	801b042 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 801adb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801adb2:	2b00      	cmp	r3, #0
 801adb4:	d003      	beq.n	801adbe <tcp_receive+0xc32>
                    prev->next = cseg;
 801adb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801adb8:	697a      	ldr	r2, [r7, #20]
 801adba:	601a      	str	r2, [r3, #0]
 801adbc:	e002      	b.n	801adc4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801adbe:	687b      	ldr	r3, [r7, #4]
 801adc0:	697a      	ldr	r2, [r7, #20]
 801adc2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801adc4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801adc6:	6978      	ldr	r0, [r7, #20]
 801adc8:	f7ff f8dc 	bl	8019f84 <tcp_oos_insert_segment>
                }
                break;
 801adcc:	e139      	b.n	801b042 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801adce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801add0:	2b00      	cmp	r3, #0
 801add2:	d117      	bne.n	801ae04 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801add4:	4b2e      	ldr	r3, [pc, #184]	; (801ae90 <tcp_receive+0xd04>)
 801add6:	681a      	ldr	r2, [r3, #0]
 801add8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801adda:	68db      	ldr	r3, [r3, #12]
 801addc:	685b      	ldr	r3, [r3, #4]
 801adde:	1ad3      	subs	r3, r2, r3
 801ade0:	2b00      	cmp	r3, #0
 801ade2:	da57      	bge.n	801ae94 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801ade4:	4829      	ldr	r0, [pc, #164]	; (801ae8c <tcp_receive+0xd00>)
 801ade6:	f7fd fac7 	bl	8018378 <tcp_seg_copy>
 801adea:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801adec:	69bb      	ldr	r3, [r7, #24]
 801adee:	2b00      	cmp	r3, #0
 801adf0:	f000 8129 	beq.w	801b046 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 801adf4:	687b      	ldr	r3, [r7, #4]
 801adf6:	69ba      	ldr	r2, [r7, #24]
 801adf8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801adfa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801adfc:	69b8      	ldr	r0, [r7, #24]
 801adfe:	f7ff f8c1 	bl	8019f84 <tcp_oos_insert_segment>
                  }
                  break;
 801ae02:	e120      	b.n	801b046 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801ae04:	4b22      	ldr	r3, [pc, #136]	; (801ae90 <tcp_receive+0xd04>)
 801ae06:	681a      	ldr	r2, [r3, #0]
 801ae08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ae0a:	68db      	ldr	r3, [r3, #12]
 801ae0c:	685b      	ldr	r3, [r3, #4]
 801ae0e:	1ad3      	subs	r3, r2, r3
 801ae10:	3b01      	subs	r3, #1
 801ae12:	2b00      	cmp	r3, #0
 801ae14:	db3e      	blt.n	801ae94 <tcp_receive+0xd08>
 801ae16:	4b1e      	ldr	r3, [pc, #120]	; (801ae90 <tcp_receive+0xd04>)
 801ae18:	681a      	ldr	r2, [r3, #0]
 801ae1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ae1c:	68db      	ldr	r3, [r3, #12]
 801ae1e:	685b      	ldr	r3, [r3, #4]
 801ae20:	1ad3      	subs	r3, r2, r3
 801ae22:	3301      	adds	r3, #1
 801ae24:	2b00      	cmp	r3, #0
 801ae26:	dc35      	bgt.n	801ae94 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801ae28:	4818      	ldr	r0, [pc, #96]	; (801ae8c <tcp_receive+0xd00>)
 801ae2a:	f7fd faa5 	bl	8018378 <tcp_seg_copy>
 801ae2e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801ae30:	69fb      	ldr	r3, [r7, #28]
 801ae32:	2b00      	cmp	r3, #0
 801ae34:	f000 8109 	beq.w	801b04a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801ae38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ae3a:	68db      	ldr	r3, [r3, #12]
 801ae3c:	685b      	ldr	r3, [r3, #4]
 801ae3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ae40:	8912      	ldrh	r2, [r2, #8]
 801ae42:	441a      	add	r2, r3
 801ae44:	4b12      	ldr	r3, [pc, #72]	; (801ae90 <tcp_receive+0xd04>)
 801ae46:	681b      	ldr	r3, [r3, #0]
 801ae48:	1ad3      	subs	r3, r2, r3
 801ae4a:	2b00      	cmp	r3, #0
 801ae4c:	dd12      	ble.n	801ae74 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801ae4e:	4b10      	ldr	r3, [pc, #64]	; (801ae90 <tcp_receive+0xd04>)
 801ae50:	681b      	ldr	r3, [r3, #0]
 801ae52:	b29a      	uxth	r2, r3
 801ae54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ae56:	68db      	ldr	r3, [r3, #12]
 801ae58:	685b      	ldr	r3, [r3, #4]
 801ae5a:	b29b      	uxth	r3, r3
 801ae5c:	1ad3      	subs	r3, r2, r3
 801ae5e:	b29a      	uxth	r2, r3
 801ae60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ae62:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801ae64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ae66:	685a      	ldr	r2, [r3, #4]
 801ae68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ae6a:	891b      	ldrh	r3, [r3, #8]
 801ae6c:	4619      	mov	r1, r3
 801ae6e:	4610      	mov	r0, r2
 801ae70:	f7fb fc0a 	bl	8016688 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801ae74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ae76:	69fa      	ldr	r2, [r7, #28]
 801ae78:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801ae7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801ae7c:	69f8      	ldr	r0, [r7, #28]
 801ae7e:	f7ff f881 	bl	8019f84 <tcp_oos_insert_segment>
                  }
                  break;
 801ae82:	e0e2      	b.n	801b04a <tcp_receive+0xebe>
 801ae84:	200188e4 	.word	0x200188e4
 801ae88:	200188e1 	.word	0x200188e1
 801ae8c:	200188b4 	.word	0x200188b4
 801ae90:	200188d4 	.word	0x200188d4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801ae94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ae96:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801ae98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ae9a:	681b      	ldr	r3, [r3, #0]
 801ae9c:	2b00      	cmp	r3, #0
 801ae9e:	f040 80c6 	bne.w	801b02e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801aea2:	4b80      	ldr	r3, [pc, #512]	; (801b0a4 <tcp_receive+0xf18>)
 801aea4:	681a      	ldr	r2, [r3, #0]
 801aea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aea8:	68db      	ldr	r3, [r3, #12]
 801aeaa:	685b      	ldr	r3, [r3, #4]
 801aeac:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801aeae:	2b00      	cmp	r3, #0
 801aeb0:	f340 80bd 	ble.w	801b02e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801aeb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aeb6:	68db      	ldr	r3, [r3, #12]
 801aeb8:	899b      	ldrh	r3, [r3, #12]
 801aeba:	b29b      	uxth	r3, r3
 801aebc:	4618      	mov	r0, r3
 801aebe:	f7fa f979 	bl	80151b4 <lwip_htons>
 801aec2:	4603      	mov	r3, r0
 801aec4:	b2db      	uxtb	r3, r3
 801aec6:	f003 0301 	and.w	r3, r3, #1
 801aeca:	2b00      	cmp	r3, #0
 801aecc:	f040 80bf 	bne.w	801b04e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801aed0:	4875      	ldr	r0, [pc, #468]	; (801b0a8 <tcp_receive+0xf1c>)
 801aed2:	f7fd fa51 	bl	8018378 <tcp_seg_copy>
 801aed6:	4602      	mov	r2, r0
 801aed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aeda:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801aedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aede:	681b      	ldr	r3, [r3, #0]
 801aee0:	2b00      	cmp	r3, #0
 801aee2:	f000 80b6 	beq.w	801b052 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801aee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aee8:	68db      	ldr	r3, [r3, #12]
 801aeea:	685b      	ldr	r3, [r3, #4]
 801aeec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801aeee:	8912      	ldrh	r2, [r2, #8]
 801aef0:	441a      	add	r2, r3
 801aef2:	4b6c      	ldr	r3, [pc, #432]	; (801b0a4 <tcp_receive+0xf18>)
 801aef4:	681b      	ldr	r3, [r3, #0]
 801aef6:	1ad3      	subs	r3, r2, r3
 801aef8:	2b00      	cmp	r3, #0
 801aefa:	dd12      	ble.n	801af22 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801aefc:	4b69      	ldr	r3, [pc, #420]	; (801b0a4 <tcp_receive+0xf18>)
 801aefe:	681b      	ldr	r3, [r3, #0]
 801af00:	b29a      	uxth	r2, r3
 801af02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801af04:	68db      	ldr	r3, [r3, #12]
 801af06:	685b      	ldr	r3, [r3, #4]
 801af08:	b29b      	uxth	r3, r3
 801af0a:	1ad3      	subs	r3, r2, r3
 801af0c:	b29a      	uxth	r2, r3
 801af0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801af10:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801af12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801af14:	685a      	ldr	r2, [r3, #4]
 801af16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801af18:	891b      	ldrh	r3, [r3, #8]
 801af1a:	4619      	mov	r1, r3
 801af1c:	4610      	mov	r0, r2
 801af1e:	f7fb fbb3 	bl	8016688 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801af22:	4b62      	ldr	r3, [pc, #392]	; (801b0ac <tcp_receive+0xf20>)
 801af24:	881b      	ldrh	r3, [r3, #0]
 801af26:	461a      	mov	r2, r3
 801af28:	4b5e      	ldr	r3, [pc, #376]	; (801b0a4 <tcp_receive+0xf18>)
 801af2a:	681b      	ldr	r3, [r3, #0]
 801af2c:	441a      	add	r2, r3
 801af2e:	687b      	ldr	r3, [r7, #4]
 801af30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801af32:	6879      	ldr	r1, [r7, #4]
 801af34:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801af36:	440b      	add	r3, r1
 801af38:	1ad3      	subs	r3, r2, r3
 801af3a:	2b00      	cmp	r3, #0
 801af3c:	f340 8089 	ble.w	801b052 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801af40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801af42:	681b      	ldr	r3, [r3, #0]
 801af44:	68db      	ldr	r3, [r3, #12]
 801af46:	899b      	ldrh	r3, [r3, #12]
 801af48:	b29b      	uxth	r3, r3
 801af4a:	4618      	mov	r0, r3
 801af4c:	f7fa f932 	bl	80151b4 <lwip_htons>
 801af50:	4603      	mov	r3, r0
 801af52:	b2db      	uxtb	r3, r3
 801af54:	f003 0301 	and.w	r3, r3, #1
 801af58:	2b00      	cmp	r3, #0
 801af5a:	d022      	beq.n	801afa2 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801af5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801af5e:	681b      	ldr	r3, [r3, #0]
 801af60:	68db      	ldr	r3, [r3, #12]
 801af62:	899b      	ldrh	r3, [r3, #12]
 801af64:	b29b      	uxth	r3, r3
 801af66:	b21b      	sxth	r3, r3
 801af68:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801af6c:	b21c      	sxth	r4, r3
 801af6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801af70:	681b      	ldr	r3, [r3, #0]
 801af72:	68db      	ldr	r3, [r3, #12]
 801af74:	899b      	ldrh	r3, [r3, #12]
 801af76:	b29b      	uxth	r3, r3
 801af78:	4618      	mov	r0, r3
 801af7a:	f7fa f91b 	bl	80151b4 <lwip_htons>
 801af7e:	4603      	mov	r3, r0
 801af80:	b2db      	uxtb	r3, r3
 801af82:	b29b      	uxth	r3, r3
 801af84:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801af88:	b29b      	uxth	r3, r3
 801af8a:	4618      	mov	r0, r3
 801af8c:	f7fa f912 	bl	80151b4 <lwip_htons>
 801af90:	4603      	mov	r3, r0
 801af92:	b21b      	sxth	r3, r3
 801af94:	4323      	orrs	r3, r4
 801af96:	b21a      	sxth	r2, r3
 801af98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801af9a:	681b      	ldr	r3, [r3, #0]
 801af9c:	68db      	ldr	r3, [r3, #12]
 801af9e:	b292      	uxth	r2, r2
 801afa0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801afa2:	687b      	ldr	r3, [r7, #4]
 801afa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801afa6:	b29a      	uxth	r2, r3
 801afa8:	687b      	ldr	r3, [r7, #4]
 801afaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801afac:	4413      	add	r3, r2
 801afae:	b299      	uxth	r1, r3
 801afb0:	4b3c      	ldr	r3, [pc, #240]	; (801b0a4 <tcp_receive+0xf18>)
 801afb2:	681b      	ldr	r3, [r3, #0]
 801afb4:	b29a      	uxth	r2, r3
 801afb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801afb8:	681b      	ldr	r3, [r3, #0]
 801afba:	1a8a      	subs	r2, r1, r2
 801afbc:	b292      	uxth	r2, r2
 801afbe:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801afc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801afc2:	681b      	ldr	r3, [r3, #0]
 801afc4:	685a      	ldr	r2, [r3, #4]
 801afc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801afc8:	681b      	ldr	r3, [r3, #0]
 801afca:	891b      	ldrh	r3, [r3, #8]
 801afcc:	4619      	mov	r1, r3
 801afce:	4610      	mov	r0, r2
 801afd0:	f7fb fb5a 	bl	8016688 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801afd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801afd6:	681b      	ldr	r3, [r3, #0]
 801afd8:	891c      	ldrh	r4, [r3, #8]
 801afda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801afdc:	681b      	ldr	r3, [r3, #0]
 801afde:	68db      	ldr	r3, [r3, #12]
 801afe0:	899b      	ldrh	r3, [r3, #12]
 801afe2:	b29b      	uxth	r3, r3
 801afe4:	4618      	mov	r0, r3
 801afe6:	f7fa f8e5 	bl	80151b4 <lwip_htons>
 801afea:	4603      	mov	r3, r0
 801afec:	b2db      	uxtb	r3, r3
 801afee:	f003 0303 	and.w	r3, r3, #3
 801aff2:	2b00      	cmp	r3, #0
 801aff4:	d001      	beq.n	801affa <tcp_receive+0xe6e>
 801aff6:	2301      	movs	r3, #1
 801aff8:	e000      	b.n	801affc <tcp_receive+0xe70>
 801affa:	2300      	movs	r3, #0
 801affc:	4423      	add	r3, r4
 801affe:	b29a      	uxth	r2, r3
 801b000:	4b2a      	ldr	r3, [pc, #168]	; (801b0ac <tcp_receive+0xf20>)
 801b002:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801b004:	4b29      	ldr	r3, [pc, #164]	; (801b0ac <tcp_receive+0xf20>)
 801b006:	881b      	ldrh	r3, [r3, #0]
 801b008:	461a      	mov	r2, r3
 801b00a:	4b26      	ldr	r3, [pc, #152]	; (801b0a4 <tcp_receive+0xf18>)
 801b00c:	681b      	ldr	r3, [r3, #0]
 801b00e:	441a      	add	r2, r3
 801b010:	687b      	ldr	r3, [r7, #4]
 801b012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b014:	6879      	ldr	r1, [r7, #4]
 801b016:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801b018:	440b      	add	r3, r1
 801b01a:	429a      	cmp	r2, r3
 801b01c:	d019      	beq.n	801b052 <tcp_receive+0xec6>
 801b01e:	4b24      	ldr	r3, [pc, #144]	; (801b0b0 <tcp_receive+0xf24>)
 801b020:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801b024:	4923      	ldr	r1, [pc, #140]	; (801b0b4 <tcp_receive+0xf28>)
 801b026:	4824      	ldr	r0, [pc, #144]	; (801b0b8 <tcp_receive+0xf2c>)
 801b028:	f004 ff9c 	bl	801ff64 <printf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801b02c:	e011      	b.n	801b052 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801b02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b030:	681b      	ldr	r3, [r3, #0]
 801b032:	63bb      	str	r3, [r7, #56]	; 0x38
 801b034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b036:	2b00      	cmp	r3, #0
 801b038:	f47f aea4 	bne.w	801ad84 <tcp_receive+0xbf8>
 801b03c:	e00a      	b.n	801b054 <tcp_receive+0xec8>
                break;
 801b03e:	bf00      	nop
 801b040:	e008      	b.n	801b054 <tcp_receive+0xec8>
                break;
 801b042:	bf00      	nop
 801b044:	e006      	b.n	801b054 <tcp_receive+0xec8>
                  break;
 801b046:	bf00      	nop
 801b048:	e004      	b.n	801b054 <tcp_receive+0xec8>
                  break;
 801b04a:	bf00      	nop
 801b04c:	e002      	b.n	801b054 <tcp_receive+0xec8>
                  break;
 801b04e:	bf00      	nop
 801b050:	e000      	b.n	801b054 <tcp_receive+0xec8>
                break;
 801b052:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801b054:	6878      	ldr	r0, [r7, #4]
 801b056:	f001 fe8b 	bl	801cd70 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801b05a:	e003      	b.n	801b064 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801b05c:	6878      	ldr	r0, [r7, #4]
 801b05e:	f001 fe87 	bl	801cd70 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801b062:	e01a      	b.n	801b09a <tcp_receive+0xf0e>
 801b064:	e019      	b.n	801b09a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801b066:	4b0f      	ldr	r3, [pc, #60]	; (801b0a4 <tcp_receive+0xf18>)
 801b068:	681a      	ldr	r2, [r3, #0]
 801b06a:	687b      	ldr	r3, [r7, #4]
 801b06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b06e:	1ad3      	subs	r3, r2, r3
 801b070:	2b00      	cmp	r3, #0
 801b072:	db0a      	blt.n	801b08a <tcp_receive+0xefe>
 801b074:	4b0b      	ldr	r3, [pc, #44]	; (801b0a4 <tcp_receive+0xf18>)
 801b076:	681a      	ldr	r2, [r3, #0]
 801b078:	687b      	ldr	r3, [r7, #4]
 801b07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b07c:	6879      	ldr	r1, [r7, #4]
 801b07e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801b080:	440b      	add	r3, r1
 801b082:	1ad3      	subs	r3, r2, r3
 801b084:	3301      	adds	r3, #1
 801b086:	2b00      	cmp	r3, #0
 801b088:	dd07      	ble.n	801b09a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801b08a:	687b      	ldr	r3, [r7, #4]
 801b08c:	8b5b      	ldrh	r3, [r3, #26]
 801b08e:	f043 0302 	orr.w	r3, r3, #2
 801b092:	b29a      	uxth	r2, r3
 801b094:	687b      	ldr	r3, [r7, #4]
 801b096:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801b098:	e7ff      	b.n	801b09a <tcp_receive+0xf0e>
 801b09a:	bf00      	nop
 801b09c:	3750      	adds	r7, #80	; 0x50
 801b09e:	46bd      	mov	sp, r7
 801b0a0:	bdb0      	pop	{r4, r5, r7, pc}
 801b0a2:	bf00      	nop
 801b0a4:	200188d4 	.word	0x200188d4
 801b0a8:	200188b4 	.word	0x200188b4
 801b0ac:	200188de 	.word	0x200188de
 801b0b0:	08027e78 	.word	0x08027e78
 801b0b4:	08028220 	.word	0x08028220
 801b0b8:	08027ec4 	.word	0x08027ec4

0801b0bc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801b0bc:	b480      	push	{r7}
 801b0be:	b083      	sub	sp, #12
 801b0c0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801b0c2:	4b15      	ldr	r3, [pc, #84]	; (801b118 <tcp_get_next_optbyte+0x5c>)
 801b0c4:	881b      	ldrh	r3, [r3, #0]
 801b0c6:	1c5a      	adds	r2, r3, #1
 801b0c8:	b291      	uxth	r1, r2
 801b0ca:	4a13      	ldr	r2, [pc, #76]	; (801b118 <tcp_get_next_optbyte+0x5c>)
 801b0cc:	8011      	strh	r1, [r2, #0]
 801b0ce:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801b0d0:	4b12      	ldr	r3, [pc, #72]	; (801b11c <tcp_get_next_optbyte+0x60>)
 801b0d2:	681b      	ldr	r3, [r3, #0]
 801b0d4:	2b00      	cmp	r3, #0
 801b0d6:	d004      	beq.n	801b0e2 <tcp_get_next_optbyte+0x26>
 801b0d8:	4b11      	ldr	r3, [pc, #68]	; (801b120 <tcp_get_next_optbyte+0x64>)
 801b0da:	881b      	ldrh	r3, [r3, #0]
 801b0dc:	88fa      	ldrh	r2, [r7, #6]
 801b0de:	429a      	cmp	r2, r3
 801b0e0:	d208      	bcs.n	801b0f4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801b0e2:	4b10      	ldr	r3, [pc, #64]	; (801b124 <tcp_get_next_optbyte+0x68>)
 801b0e4:	681b      	ldr	r3, [r3, #0]
 801b0e6:	3314      	adds	r3, #20
 801b0e8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801b0ea:	88fb      	ldrh	r3, [r7, #6]
 801b0ec:	683a      	ldr	r2, [r7, #0]
 801b0ee:	4413      	add	r3, r2
 801b0f0:	781b      	ldrb	r3, [r3, #0]
 801b0f2:	e00b      	b.n	801b10c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801b0f4:	88fb      	ldrh	r3, [r7, #6]
 801b0f6:	b2da      	uxtb	r2, r3
 801b0f8:	4b09      	ldr	r3, [pc, #36]	; (801b120 <tcp_get_next_optbyte+0x64>)
 801b0fa:	881b      	ldrh	r3, [r3, #0]
 801b0fc:	b2db      	uxtb	r3, r3
 801b0fe:	1ad3      	subs	r3, r2, r3
 801b100:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801b102:	4b06      	ldr	r3, [pc, #24]	; (801b11c <tcp_get_next_optbyte+0x60>)
 801b104:	681a      	ldr	r2, [r3, #0]
 801b106:	797b      	ldrb	r3, [r7, #5]
 801b108:	4413      	add	r3, r2
 801b10a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801b10c:	4618      	mov	r0, r3
 801b10e:	370c      	adds	r7, #12
 801b110:	46bd      	mov	sp, r7
 801b112:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b116:	4770      	bx	lr
 801b118:	200188d0 	.word	0x200188d0
 801b11c:	200188cc 	.word	0x200188cc
 801b120:	200188ca 	.word	0x200188ca
 801b124:	200188c4 	.word	0x200188c4

0801b128 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801b128:	b580      	push	{r7, lr}
 801b12a:	b084      	sub	sp, #16
 801b12c:	af00      	add	r7, sp, #0
 801b12e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801b130:	687b      	ldr	r3, [r7, #4]
 801b132:	2b00      	cmp	r3, #0
 801b134:	d106      	bne.n	801b144 <tcp_parseopt+0x1c>
 801b136:	4b32      	ldr	r3, [pc, #200]	; (801b200 <tcp_parseopt+0xd8>)
 801b138:	f240 727d 	movw	r2, #1917	; 0x77d
 801b13c:	4931      	ldr	r1, [pc, #196]	; (801b204 <tcp_parseopt+0xdc>)
 801b13e:	4832      	ldr	r0, [pc, #200]	; (801b208 <tcp_parseopt+0xe0>)
 801b140:	f004 ff10 	bl	801ff64 <printf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801b144:	4b31      	ldr	r3, [pc, #196]	; (801b20c <tcp_parseopt+0xe4>)
 801b146:	881b      	ldrh	r3, [r3, #0]
 801b148:	2b00      	cmp	r3, #0
 801b14a:	d055      	beq.n	801b1f8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801b14c:	4b30      	ldr	r3, [pc, #192]	; (801b210 <tcp_parseopt+0xe8>)
 801b14e:	2200      	movs	r2, #0
 801b150:	801a      	strh	r2, [r3, #0]
 801b152:	e045      	b.n	801b1e0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801b154:	f7ff ffb2 	bl	801b0bc <tcp_get_next_optbyte>
 801b158:	4603      	mov	r3, r0
 801b15a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801b15c:	7bfb      	ldrb	r3, [r7, #15]
 801b15e:	2b02      	cmp	r3, #2
 801b160:	d006      	beq.n	801b170 <tcp_parseopt+0x48>
 801b162:	2b02      	cmp	r3, #2
 801b164:	dc2b      	bgt.n	801b1be <tcp_parseopt+0x96>
 801b166:	2b00      	cmp	r3, #0
 801b168:	d041      	beq.n	801b1ee <tcp_parseopt+0xc6>
 801b16a:	2b01      	cmp	r3, #1
 801b16c:	d127      	bne.n	801b1be <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801b16e:	e037      	b.n	801b1e0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801b170:	f7ff ffa4 	bl	801b0bc <tcp_get_next_optbyte>
 801b174:	4603      	mov	r3, r0
 801b176:	2b04      	cmp	r3, #4
 801b178:	d13b      	bne.n	801b1f2 <tcp_parseopt+0xca>
 801b17a:	4b25      	ldr	r3, [pc, #148]	; (801b210 <tcp_parseopt+0xe8>)
 801b17c:	881b      	ldrh	r3, [r3, #0]
 801b17e:	3301      	adds	r3, #1
 801b180:	4a22      	ldr	r2, [pc, #136]	; (801b20c <tcp_parseopt+0xe4>)
 801b182:	8812      	ldrh	r2, [r2, #0]
 801b184:	4293      	cmp	r3, r2
 801b186:	da34      	bge.n	801b1f2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801b188:	f7ff ff98 	bl	801b0bc <tcp_get_next_optbyte>
 801b18c:	4603      	mov	r3, r0
 801b18e:	b29b      	uxth	r3, r3
 801b190:	021b      	lsls	r3, r3, #8
 801b192:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801b194:	f7ff ff92 	bl	801b0bc <tcp_get_next_optbyte>
 801b198:	4603      	mov	r3, r0
 801b19a:	b29a      	uxth	r2, r3
 801b19c:	89bb      	ldrh	r3, [r7, #12]
 801b19e:	4313      	orrs	r3, r2
 801b1a0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801b1a2:	89bb      	ldrh	r3, [r7, #12]
 801b1a4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801b1a8:	d804      	bhi.n	801b1b4 <tcp_parseopt+0x8c>
 801b1aa:	89bb      	ldrh	r3, [r7, #12]
 801b1ac:	2b00      	cmp	r3, #0
 801b1ae:	d001      	beq.n	801b1b4 <tcp_parseopt+0x8c>
 801b1b0:	89ba      	ldrh	r2, [r7, #12]
 801b1b2:	e001      	b.n	801b1b8 <tcp_parseopt+0x90>
 801b1b4:	f44f 7206 	mov.w	r2, #536	; 0x218
 801b1b8:	687b      	ldr	r3, [r7, #4]
 801b1ba:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801b1bc:	e010      	b.n	801b1e0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801b1be:	f7ff ff7d 	bl	801b0bc <tcp_get_next_optbyte>
 801b1c2:	4603      	mov	r3, r0
 801b1c4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801b1c6:	7afb      	ldrb	r3, [r7, #11]
 801b1c8:	2b01      	cmp	r3, #1
 801b1ca:	d914      	bls.n	801b1f6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801b1cc:	7afb      	ldrb	r3, [r7, #11]
 801b1ce:	b29a      	uxth	r2, r3
 801b1d0:	4b0f      	ldr	r3, [pc, #60]	; (801b210 <tcp_parseopt+0xe8>)
 801b1d2:	881b      	ldrh	r3, [r3, #0]
 801b1d4:	4413      	add	r3, r2
 801b1d6:	b29b      	uxth	r3, r3
 801b1d8:	3b02      	subs	r3, #2
 801b1da:	b29a      	uxth	r2, r3
 801b1dc:	4b0c      	ldr	r3, [pc, #48]	; (801b210 <tcp_parseopt+0xe8>)
 801b1de:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801b1e0:	4b0b      	ldr	r3, [pc, #44]	; (801b210 <tcp_parseopt+0xe8>)
 801b1e2:	881a      	ldrh	r2, [r3, #0]
 801b1e4:	4b09      	ldr	r3, [pc, #36]	; (801b20c <tcp_parseopt+0xe4>)
 801b1e6:	881b      	ldrh	r3, [r3, #0]
 801b1e8:	429a      	cmp	r2, r3
 801b1ea:	d3b3      	bcc.n	801b154 <tcp_parseopt+0x2c>
 801b1ec:	e004      	b.n	801b1f8 <tcp_parseopt+0xd0>
          return;
 801b1ee:	bf00      	nop
 801b1f0:	e002      	b.n	801b1f8 <tcp_parseopt+0xd0>
            return;
 801b1f2:	bf00      	nop
 801b1f4:	e000      	b.n	801b1f8 <tcp_parseopt+0xd0>
            return;
 801b1f6:	bf00      	nop
      }
    }
  }
}
 801b1f8:	3710      	adds	r7, #16
 801b1fa:	46bd      	mov	sp, r7
 801b1fc:	bd80      	pop	{r7, pc}
 801b1fe:	bf00      	nop
 801b200:	08027e78 	.word	0x08027e78
 801b204:	080282dc 	.word	0x080282dc
 801b208:	08027ec4 	.word	0x08027ec4
 801b20c:	200188c8 	.word	0x200188c8
 801b210:	200188d0 	.word	0x200188d0

0801b214 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801b214:	b480      	push	{r7}
 801b216:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801b218:	4b05      	ldr	r3, [pc, #20]	; (801b230 <tcp_trigger_input_pcb_close+0x1c>)
 801b21a:	781b      	ldrb	r3, [r3, #0]
 801b21c:	f043 0310 	orr.w	r3, r3, #16
 801b220:	b2da      	uxtb	r2, r3
 801b222:	4b03      	ldr	r3, [pc, #12]	; (801b230 <tcp_trigger_input_pcb_close+0x1c>)
 801b224:	701a      	strb	r2, [r3, #0]
}
 801b226:	bf00      	nop
 801b228:	46bd      	mov	sp, r7
 801b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b22e:	4770      	bx	lr
 801b230:	200188e1 	.word	0x200188e1

0801b234 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801b234:	b580      	push	{r7, lr}
 801b236:	b084      	sub	sp, #16
 801b238:	af00      	add	r7, sp, #0
 801b23a:	60f8      	str	r0, [r7, #12]
 801b23c:	60b9      	str	r1, [r7, #8]
 801b23e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801b240:	68fb      	ldr	r3, [r7, #12]
 801b242:	2b00      	cmp	r3, #0
 801b244:	d00a      	beq.n	801b25c <tcp_route+0x28>
 801b246:	68fb      	ldr	r3, [r7, #12]
 801b248:	7a1b      	ldrb	r3, [r3, #8]
 801b24a:	2b00      	cmp	r3, #0
 801b24c:	d006      	beq.n	801b25c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801b24e:	68fb      	ldr	r3, [r7, #12]
 801b250:	7a1b      	ldrb	r3, [r3, #8]
 801b252:	4618      	mov	r0, r3
 801b254:	f7fb f810 	bl	8016278 <netif_get_by_index>
 801b258:	4603      	mov	r3, r0
 801b25a:	e003      	b.n	801b264 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801b25c:	6878      	ldr	r0, [r7, #4]
 801b25e:	f003 fb3f 	bl	801e8e0 <ip4_route>
 801b262:	4603      	mov	r3, r0
  }
}
 801b264:	4618      	mov	r0, r3
 801b266:	3710      	adds	r7, #16
 801b268:	46bd      	mov	sp, r7
 801b26a:	bd80      	pop	{r7, pc}

0801b26c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801b26c:	b590      	push	{r4, r7, lr}
 801b26e:	b087      	sub	sp, #28
 801b270:	af00      	add	r7, sp, #0
 801b272:	60f8      	str	r0, [r7, #12]
 801b274:	60b9      	str	r1, [r7, #8]
 801b276:	603b      	str	r3, [r7, #0]
 801b278:	4613      	mov	r3, r2
 801b27a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801b27c:	68fb      	ldr	r3, [r7, #12]
 801b27e:	2b00      	cmp	r3, #0
 801b280:	d105      	bne.n	801b28e <tcp_create_segment+0x22>
 801b282:	4b44      	ldr	r3, [pc, #272]	; (801b394 <tcp_create_segment+0x128>)
 801b284:	22a3      	movs	r2, #163	; 0xa3
 801b286:	4944      	ldr	r1, [pc, #272]	; (801b398 <tcp_create_segment+0x12c>)
 801b288:	4844      	ldr	r0, [pc, #272]	; (801b39c <tcp_create_segment+0x130>)
 801b28a:	f004 fe6b 	bl	801ff64 <printf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801b28e:	68bb      	ldr	r3, [r7, #8]
 801b290:	2b00      	cmp	r3, #0
 801b292:	d105      	bne.n	801b2a0 <tcp_create_segment+0x34>
 801b294:	4b3f      	ldr	r3, [pc, #252]	; (801b394 <tcp_create_segment+0x128>)
 801b296:	22a4      	movs	r2, #164	; 0xa4
 801b298:	4941      	ldr	r1, [pc, #260]	; (801b3a0 <tcp_create_segment+0x134>)
 801b29a:	4840      	ldr	r0, [pc, #256]	; (801b39c <tcp_create_segment+0x130>)
 801b29c:	f004 fe62 	bl	801ff64 <printf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801b2a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801b2a4:	009b      	lsls	r3, r3, #2
 801b2a6:	b2db      	uxtb	r3, r3
 801b2a8:	f003 0304 	and.w	r3, r3, #4
 801b2ac:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801b2ae:	2003      	movs	r0, #3
 801b2b0:	f7fa fc5e 	bl	8015b70 <memp_malloc>
 801b2b4:	6138      	str	r0, [r7, #16]
 801b2b6:	693b      	ldr	r3, [r7, #16]
 801b2b8:	2b00      	cmp	r3, #0
 801b2ba:	d104      	bne.n	801b2c6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801b2bc:	68b8      	ldr	r0, [r7, #8]
 801b2be:	f7fb fb69 	bl	8016994 <pbuf_free>
    return NULL;
 801b2c2:	2300      	movs	r3, #0
 801b2c4:	e061      	b.n	801b38a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801b2c6:	693b      	ldr	r3, [r7, #16]
 801b2c8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801b2cc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801b2ce:	693b      	ldr	r3, [r7, #16]
 801b2d0:	2200      	movs	r2, #0
 801b2d2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801b2d4:	693b      	ldr	r3, [r7, #16]
 801b2d6:	68ba      	ldr	r2, [r7, #8]
 801b2d8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801b2da:	68bb      	ldr	r3, [r7, #8]
 801b2dc:	891a      	ldrh	r2, [r3, #8]
 801b2de:	7dfb      	ldrb	r3, [r7, #23]
 801b2e0:	b29b      	uxth	r3, r3
 801b2e2:	429a      	cmp	r2, r3
 801b2e4:	d205      	bcs.n	801b2f2 <tcp_create_segment+0x86>
 801b2e6:	4b2b      	ldr	r3, [pc, #172]	; (801b394 <tcp_create_segment+0x128>)
 801b2e8:	22b0      	movs	r2, #176	; 0xb0
 801b2ea:	492e      	ldr	r1, [pc, #184]	; (801b3a4 <tcp_create_segment+0x138>)
 801b2ec:	482b      	ldr	r0, [pc, #172]	; (801b39c <tcp_create_segment+0x130>)
 801b2ee:	f004 fe39 	bl	801ff64 <printf>
  seg->len = p->tot_len - optlen;
 801b2f2:	68bb      	ldr	r3, [r7, #8]
 801b2f4:	891a      	ldrh	r2, [r3, #8]
 801b2f6:	7dfb      	ldrb	r3, [r7, #23]
 801b2f8:	b29b      	uxth	r3, r3
 801b2fa:	1ad3      	subs	r3, r2, r3
 801b2fc:	b29a      	uxth	r2, r3
 801b2fe:	693b      	ldr	r3, [r7, #16]
 801b300:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801b302:	2114      	movs	r1, #20
 801b304:	68b8      	ldr	r0, [r7, #8]
 801b306:	f7fb faaf 	bl	8016868 <pbuf_add_header>
 801b30a:	4603      	mov	r3, r0
 801b30c:	2b00      	cmp	r3, #0
 801b30e:	d004      	beq.n	801b31a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801b310:	6938      	ldr	r0, [r7, #16]
 801b312:	f7fd f818 	bl	8018346 <tcp_seg_free>
    return NULL;
 801b316:	2300      	movs	r3, #0
 801b318:	e037      	b.n	801b38a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801b31a:	693b      	ldr	r3, [r7, #16]
 801b31c:	685b      	ldr	r3, [r3, #4]
 801b31e:	685a      	ldr	r2, [r3, #4]
 801b320:	693b      	ldr	r3, [r7, #16]
 801b322:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801b324:	68fb      	ldr	r3, [r7, #12]
 801b326:	8ada      	ldrh	r2, [r3, #22]
 801b328:	693b      	ldr	r3, [r7, #16]
 801b32a:	68dc      	ldr	r4, [r3, #12]
 801b32c:	4610      	mov	r0, r2
 801b32e:	f7f9 ff41 	bl	80151b4 <lwip_htons>
 801b332:	4603      	mov	r3, r0
 801b334:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801b336:	68fb      	ldr	r3, [r7, #12]
 801b338:	8b1a      	ldrh	r2, [r3, #24]
 801b33a:	693b      	ldr	r3, [r7, #16]
 801b33c:	68dc      	ldr	r4, [r3, #12]
 801b33e:	4610      	mov	r0, r2
 801b340:	f7f9 ff38 	bl	80151b4 <lwip_htons>
 801b344:	4603      	mov	r3, r0
 801b346:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801b348:	693b      	ldr	r3, [r7, #16]
 801b34a:	68dc      	ldr	r4, [r3, #12]
 801b34c:	6838      	ldr	r0, [r7, #0]
 801b34e:	f7f9 ff46 	bl	80151de <lwip_htonl>
 801b352:	4603      	mov	r3, r0
 801b354:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801b356:	7dfb      	ldrb	r3, [r7, #23]
 801b358:	089b      	lsrs	r3, r3, #2
 801b35a:	b2db      	uxtb	r3, r3
 801b35c:	b29b      	uxth	r3, r3
 801b35e:	3305      	adds	r3, #5
 801b360:	b29b      	uxth	r3, r3
 801b362:	031b      	lsls	r3, r3, #12
 801b364:	b29a      	uxth	r2, r3
 801b366:	79fb      	ldrb	r3, [r7, #7]
 801b368:	b29b      	uxth	r3, r3
 801b36a:	4313      	orrs	r3, r2
 801b36c:	b29a      	uxth	r2, r3
 801b36e:	693b      	ldr	r3, [r7, #16]
 801b370:	68dc      	ldr	r4, [r3, #12]
 801b372:	4610      	mov	r0, r2
 801b374:	f7f9 ff1e 	bl	80151b4 <lwip_htons>
 801b378:	4603      	mov	r3, r0
 801b37a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801b37c:	693b      	ldr	r3, [r7, #16]
 801b37e:	68db      	ldr	r3, [r3, #12]
 801b380:	2200      	movs	r2, #0
 801b382:	749a      	strb	r2, [r3, #18]
 801b384:	2200      	movs	r2, #0
 801b386:	74da      	strb	r2, [r3, #19]
  return seg;
 801b388:	693b      	ldr	r3, [r7, #16]
}
 801b38a:	4618      	mov	r0, r3
 801b38c:	371c      	adds	r7, #28
 801b38e:	46bd      	mov	sp, r7
 801b390:	bd90      	pop	{r4, r7, pc}
 801b392:	bf00      	nop
 801b394:	080282f8 	.word	0x080282f8
 801b398:	0802832c 	.word	0x0802832c
 801b39c:	0802834c 	.word	0x0802834c
 801b3a0:	08028374 	.word	0x08028374
 801b3a4:	08028398 	.word	0x08028398

0801b3a8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801b3a8:	b580      	push	{r7, lr}
 801b3aa:	b086      	sub	sp, #24
 801b3ac:	af00      	add	r7, sp, #0
 801b3ae:	607b      	str	r3, [r7, #4]
 801b3b0:	4603      	mov	r3, r0
 801b3b2:	73fb      	strb	r3, [r7, #15]
 801b3b4:	460b      	mov	r3, r1
 801b3b6:	81bb      	strh	r3, [r7, #12]
 801b3b8:	4613      	mov	r3, r2
 801b3ba:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801b3bc:	89bb      	ldrh	r3, [r7, #12]
 801b3be:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801b3c0:	687b      	ldr	r3, [r7, #4]
 801b3c2:	2b00      	cmp	r3, #0
 801b3c4:	d105      	bne.n	801b3d2 <tcp_pbuf_prealloc+0x2a>
 801b3c6:	4b30      	ldr	r3, [pc, #192]	; (801b488 <tcp_pbuf_prealloc+0xe0>)
 801b3c8:	22e8      	movs	r2, #232	; 0xe8
 801b3ca:	4930      	ldr	r1, [pc, #192]	; (801b48c <tcp_pbuf_prealloc+0xe4>)
 801b3cc:	4830      	ldr	r0, [pc, #192]	; (801b490 <tcp_pbuf_prealloc+0xe8>)
 801b3ce:	f004 fdc9 	bl	801ff64 <printf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801b3d2:	6a3b      	ldr	r3, [r7, #32]
 801b3d4:	2b00      	cmp	r3, #0
 801b3d6:	d105      	bne.n	801b3e4 <tcp_pbuf_prealloc+0x3c>
 801b3d8:	4b2b      	ldr	r3, [pc, #172]	; (801b488 <tcp_pbuf_prealloc+0xe0>)
 801b3da:	22e9      	movs	r2, #233	; 0xe9
 801b3dc:	492d      	ldr	r1, [pc, #180]	; (801b494 <tcp_pbuf_prealloc+0xec>)
 801b3de:	482c      	ldr	r0, [pc, #176]	; (801b490 <tcp_pbuf_prealloc+0xe8>)
 801b3e0:	f004 fdc0 	bl	801ff64 <printf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801b3e4:	89ba      	ldrh	r2, [r7, #12]
 801b3e6:	897b      	ldrh	r3, [r7, #10]
 801b3e8:	429a      	cmp	r2, r3
 801b3ea:	d221      	bcs.n	801b430 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801b3ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801b3f0:	f003 0302 	and.w	r3, r3, #2
 801b3f4:	2b00      	cmp	r3, #0
 801b3f6:	d111      	bne.n	801b41c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801b3f8:	6a3b      	ldr	r3, [r7, #32]
 801b3fa:	8b5b      	ldrh	r3, [r3, #26]
 801b3fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801b400:	2b00      	cmp	r3, #0
 801b402:	d115      	bne.n	801b430 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801b404:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801b408:	2b00      	cmp	r3, #0
 801b40a:	d007      	beq.n	801b41c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801b40c:	6a3b      	ldr	r3, [r7, #32]
 801b40e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801b410:	2b00      	cmp	r3, #0
 801b412:	d103      	bne.n	801b41c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801b414:	6a3b      	ldr	r3, [r7, #32]
 801b416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801b418:	2b00      	cmp	r3, #0
 801b41a:	d009      	beq.n	801b430 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801b41c:	89bb      	ldrh	r3, [r7, #12]
 801b41e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801b422:	f023 0203 	bic.w	r2, r3, #3
 801b426:	897b      	ldrh	r3, [r7, #10]
 801b428:	4293      	cmp	r3, r2
 801b42a:	bf28      	it	cs
 801b42c:	4613      	movcs	r3, r2
 801b42e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801b430:	8af9      	ldrh	r1, [r7, #22]
 801b432:	7bfb      	ldrb	r3, [r7, #15]
 801b434:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b438:	4618      	mov	r0, r3
 801b43a:	f7fa ffc7 	bl	80163cc <pbuf_alloc>
 801b43e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b440:	693b      	ldr	r3, [r7, #16]
 801b442:	2b00      	cmp	r3, #0
 801b444:	d101      	bne.n	801b44a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801b446:	2300      	movs	r3, #0
 801b448:	e019      	b.n	801b47e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801b44a:	693b      	ldr	r3, [r7, #16]
 801b44c:	681b      	ldr	r3, [r3, #0]
 801b44e:	2b00      	cmp	r3, #0
 801b450:	d006      	beq.n	801b460 <tcp_pbuf_prealloc+0xb8>
 801b452:	4b0d      	ldr	r3, [pc, #52]	; (801b488 <tcp_pbuf_prealloc+0xe0>)
 801b454:	f240 120b 	movw	r2, #267	; 0x10b
 801b458:	490f      	ldr	r1, [pc, #60]	; (801b498 <tcp_pbuf_prealloc+0xf0>)
 801b45a:	480d      	ldr	r0, [pc, #52]	; (801b490 <tcp_pbuf_prealloc+0xe8>)
 801b45c:	f004 fd82 	bl	801ff64 <printf>
  *oversize = p->len - length;
 801b460:	693b      	ldr	r3, [r7, #16]
 801b462:	895a      	ldrh	r2, [r3, #10]
 801b464:	89bb      	ldrh	r3, [r7, #12]
 801b466:	1ad3      	subs	r3, r2, r3
 801b468:	b29a      	uxth	r2, r3
 801b46a:	687b      	ldr	r3, [r7, #4]
 801b46c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801b46e:	693b      	ldr	r3, [r7, #16]
 801b470:	89ba      	ldrh	r2, [r7, #12]
 801b472:	811a      	strh	r2, [r3, #8]
 801b474:	693b      	ldr	r3, [r7, #16]
 801b476:	891a      	ldrh	r2, [r3, #8]
 801b478:	693b      	ldr	r3, [r7, #16]
 801b47a:	815a      	strh	r2, [r3, #10]
  return p;
 801b47c:	693b      	ldr	r3, [r7, #16]
}
 801b47e:	4618      	mov	r0, r3
 801b480:	3718      	adds	r7, #24
 801b482:	46bd      	mov	sp, r7
 801b484:	bd80      	pop	{r7, pc}
 801b486:	bf00      	nop
 801b488:	080282f8 	.word	0x080282f8
 801b48c:	080283b0 	.word	0x080283b0
 801b490:	0802834c 	.word	0x0802834c
 801b494:	080283d4 	.word	0x080283d4
 801b498:	080283f4 	.word	0x080283f4

0801b49c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801b49c:	b580      	push	{r7, lr}
 801b49e:	b082      	sub	sp, #8
 801b4a0:	af00      	add	r7, sp, #0
 801b4a2:	6078      	str	r0, [r7, #4]
 801b4a4:	460b      	mov	r3, r1
 801b4a6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801b4a8:	687b      	ldr	r3, [r7, #4]
 801b4aa:	2b00      	cmp	r3, #0
 801b4ac:	d106      	bne.n	801b4bc <tcp_write_checks+0x20>
 801b4ae:	4b33      	ldr	r3, [pc, #204]	; (801b57c <tcp_write_checks+0xe0>)
 801b4b0:	f240 1233 	movw	r2, #307	; 0x133
 801b4b4:	4932      	ldr	r1, [pc, #200]	; (801b580 <tcp_write_checks+0xe4>)
 801b4b6:	4833      	ldr	r0, [pc, #204]	; (801b584 <tcp_write_checks+0xe8>)
 801b4b8:	f004 fd54 	bl	801ff64 <printf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801b4bc:	687b      	ldr	r3, [r7, #4]
 801b4be:	7d1b      	ldrb	r3, [r3, #20]
 801b4c0:	2b04      	cmp	r3, #4
 801b4c2:	d00e      	beq.n	801b4e2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801b4c4:	687b      	ldr	r3, [r7, #4]
 801b4c6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801b4c8:	2b07      	cmp	r3, #7
 801b4ca:	d00a      	beq.n	801b4e2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801b4cc:	687b      	ldr	r3, [r7, #4]
 801b4ce:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801b4d0:	2b02      	cmp	r3, #2
 801b4d2:	d006      	beq.n	801b4e2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801b4d4:	687b      	ldr	r3, [r7, #4]
 801b4d6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801b4d8:	2b03      	cmp	r3, #3
 801b4da:	d002      	beq.n	801b4e2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801b4dc:	f06f 030a 	mvn.w	r3, #10
 801b4e0:	e048      	b.n	801b574 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801b4e2:	887b      	ldrh	r3, [r7, #2]
 801b4e4:	2b00      	cmp	r3, #0
 801b4e6:	d101      	bne.n	801b4ec <tcp_write_checks+0x50>
    return ERR_OK;
 801b4e8:	2300      	movs	r3, #0
 801b4ea:	e043      	b.n	801b574 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801b4ec:	687b      	ldr	r3, [r7, #4]
 801b4ee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801b4f2:	887a      	ldrh	r2, [r7, #2]
 801b4f4:	429a      	cmp	r2, r3
 801b4f6:	d909      	bls.n	801b50c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b4f8:	687b      	ldr	r3, [r7, #4]
 801b4fa:	8b5b      	ldrh	r3, [r3, #26]
 801b4fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b500:	b29a      	uxth	r2, r3
 801b502:	687b      	ldr	r3, [r7, #4]
 801b504:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801b506:	f04f 33ff 	mov.w	r3, #4294967295
 801b50a:	e033      	b.n	801b574 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801b50c:	687b      	ldr	r3, [r7, #4]
 801b50e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b512:	2b08      	cmp	r3, #8
 801b514:	d909      	bls.n	801b52a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b516:	687b      	ldr	r3, [r7, #4]
 801b518:	8b5b      	ldrh	r3, [r3, #26]
 801b51a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b51e:	b29a      	uxth	r2, r3
 801b520:	687b      	ldr	r3, [r7, #4]
 801b522:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801b524:	f04f 33ff 	mov.w	r3, #4294967295
 801b528:	e024      	b.n	801b574 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801b52a:	687b      	ldr	r3, [r7, #4]
 801b52c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b530:	2b00      	cmp	r3, #0
 801b532:	d00f      	beq.n	801b554 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801b534:	687b      	ldr	r3, [r7, #4]
 801b536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b538:	2b00      	cmp	r3, #0
 801b53a:	d11a      	bne.n	801b572 <tcp_write_checks+0xd6>
 801b53c:	687b      	ldr	r3, [r7, #4]
 801b53e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b540:	2b00      	cmp	r3, #0
 801b542:	d116      	bne.n	801b572 <tcp_write_checks+0xd6>
 801b544:	4b0d      	ldr	r3, [pc, #52]	; (801b57c <tcp_write_checks+0xe0>)
 801b546:	f240 1255 	movw	r2, #341	; 0x155
 801b54a:	490f      	ldr	r1, [pc, #60]	; (801b588 <tcp_write_checks+0xec>)
 801b54c:	480d      	ldr	r0, [pc, #52]	; (801b584 <tcp_write_checks+0xe8>)
 801b54e:	f004 fd09 	bl	801ff64 <printf>
 801b552:	e00e      	b.n	801b572 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801b554:	687b      	ldr	r3, [r7, #4]
 801b556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b558:	2b00      	cmp	r3, #0
 801b55a:	d103      	bne.n	801b564 <tcp_write_checks+0xc8>
 801b55c:	687b      	ldr	r3, [r7, #4]
 801b55e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b560:	2b00      	cmp	r3, #0
 801b562:	d006      	beq.n	801b572 <tcp_write_checks+0xd6>
 801b564:	4b05      	ldr	r3, [pc, #20]	; (801b57c <tcp_write_checks+0xe0>)
 801b566:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801b56a:	4908      	ldr	r1, [pc, #32]	; (801b58c <tcp_write_checks+0xf0>)
 801b56c:	4805      	ldr	r0, [pc, #20]	; (801b584 <tcp_write_checks+0xe8>)
 801b56e:	f004 fcf9 	bl	801ff64 <printf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801b572:	2300      	movs	r3, #0
}
 801b574:	4618      	mov	r0, r3
 801b576:	3708      	adds	r7, #8
 801b578:	46bd      	mov	sp, r7
 801b57a:	bd80      	pop	{r7, pc}
 801b57c:	080282f8 	.word	0x080282f8
 801b580:	08028408 	.word	0x08028408
 801b584:	0802834c 	.word	0x0802834c
 801b588:	08028428 	.word	0x08028428
 801b58c:	08028464 	.word	0x08028464

0801b590 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801b590:	b590      	push	{r4, r7, lr}
 801b592:	b09b      	sub	sp, #108	; 0x6c
 801b594:	af04      	add	r7, sp, #16
 801b596:	60f8      	str	r0, [r7, #12]
 801b598:	60b9      	str	r1, [r7, #8]
 801b59a:	4611      	mov	r1, r2
 801b59c:	461a      	mov	r2, r3
 801b59e:	460b      	mov	r3, r1
 801b5a0:	80fb      	strh	r3, [r7, #6]
 801b5a2:	4613      	mov	r3, r2
 801b5a4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801b5a6:	2300      	movs	r3, #0
 801b5a8:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801b5aa:	2300      	movs	r3, #0
 801b5ac:	653b      	str	r3, [r7, #80]	; 0x50
 801b5ae:	2300      	movs	r3, #0
 801b5b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 801b5b2:	2300      	movs	r3, #0
 801b5b4:	64bb      	str	r3, [r7, #72]	; 0x48
 801b5b6:	2300      	movs	r3, #0
 801b5b8:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801b5ba:	2300      	movs	r3, #0
 801b5bc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801b5c0:	2300      	movs	r3, #0
 801b5c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801b5c6:	2300      	movs	r3, #0
 801b5c8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801b5ca:	2300      	movs	r3, #0
 801b5cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801b5ce:	2300      	movs	r3, #0
 801b5d0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801b5d2:	68fb      	ldr	r3, [r7, #12]
 801b5d4:	2b00      	cmp	r3, #0
 801b5d6:	d109      	bne.n	801b5ec <tcp_write+0x5c>
 801b5d8:	4ba4      	ldr	r3, [pc, #656]	; (801b86c <tcp_write+0x2dc>)
 801b5da:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801b5de:	49a4      	ldr	r1, [pc, #656]	; (801b870 <tcp_write+0x2e0>)
 801b5e0:	48a4      	ldr	r0, [pc, #656]	; (801b874 <tcp_write+0x2e4>)
 801b5e2:	f004 fcbf 	bl	801ff64 <printf>
 801b5e6:	f06f 030f 	mvn.w	r3, #15
 801b5ea:	e32a      	b.n	801bc42 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801b5ec:	68fb      	ldr	r3, [r7, #12]
 801b5ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801b5f2:	085b      	lsrs	r3, r3, #1
 801b5f4:	b29a      	uxth	r2, r3
 801b5f6:	68fb      	ldr	r3, [r7, #12]
 801b5f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b5fa:	4293      	cmp	r3, r2
 801b5fc:	bf28      	it	cs
 801b5fe:	4613      	movcs	r3, r2
 801b600:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801b602:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b604:	2b00      	cmp	r3, #0
 801b606:	d102      	bne.n	801b60e <tcp_write+0x7e>
 801b608:	68fb      	ldr	r3, [r7, #12]
 801b60a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b60c:	e000      	b.n	801b610 <tcp_write+0x80>
 801b60e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b610:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801b612:	68bb      	ldr	r3, [r7, #8]
 801b614:	2b00      	cmp	r3, #0
 801b616:	d109      	bne.n	801b62c <tcp_write+0x9c>
 801b618:	4b94      	ldr	r3, [pc, #592]	; (801b86c <tcp_write+0x2dc>)
 801b61a:	f240 12ad 	movw	r2, #429	; 0x1ad
 801b61e:	4996      	ldr	r1, [pc, #600]	; (801b878 <tcp_write+0x2e8>)
 801b620:	4894      	ldr	r0, [pc, #592]	; (801b874 <tcp_write+0x2e4>)
 801b622:	f004 fc9f 	bl	801ff64 <printf>
 801b626:	f06f 030f 	mvn.w	r3, #15
 801b62a:	e30a      	b.n	801bc42 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801b62c:	88fb      	ldrh	r3, [r7, #6]
 801b62e:	4619      	mov	r1, r3
 801b630:	68f8      	ldr	r0, [r7, #12]
 801b632:	f7ff ff33 	bl	801b49c <tcp_write_checks>
 801b636:	4603      	mov	r3, r0
 801b638:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801b63c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801b640:	2b00      	cmp	r3, #0
 801b642:	d002      	beq.n	801b64a <tcp_write+0xba>
    return err;
 801b644:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801b648:	e2fb      	b.n	801bc42 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801b64a:	68fb      	ldr	r3, [r7, #12]
 801b64c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b650:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b654:	2300      	movs	r3, #0
 801b656:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801b65a:	68fb      	ldr	r3, [r7, #12]
 801b65c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b65e:	2b00      	cmp	r3, #0
 801b660:	f000 80f6 	beq.w	801b850 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801b664:	68fb      	ldr	r3, [r7, #12]
 801b666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b668:	653b      	str	r3, [r7, #80]	; 0x50
 801b66a:	e002      	b.n	801b672 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801b66c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b66e:	681b      	ldr	r3, [r3, #0]
 801b670:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801b672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b674:	681b      	ldr	r3, [r3, #0]
 801b676:	2b00      	cmp	r3, #0
 801b678:	d1f8      	bne.n	801b66c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801b67a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b67c:	7a9b      	ldrb	r3, [r3, #10]
 801b67e:	009b      	lsls	r3, r3, #2
 801b680:	b29b      	uxth	r3, r3
 801b682:	f003 0304 	and.w	r3, r3, #4
 801b686:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801b688:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801b68a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b68c:	891b      	ldrh	r3, [r3, #8]
 801b68e:	4619      	mov	r1, r3
 801b690:	8c3b      	ldrh	r3, [r7, #32]
 801b692:	440b      	add	r3, r1
 801b694:	429a      	cmp	r2, r3
 801b696:	da06      	bge.n	801b6a6 <tcp_write+0x116>
 801b698:	4b74      	ldr	r3, [pc, #464]	; (801b86c <tcp_write+0x2dc>)
 801b69a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801b69e:	4977      	ldr	r1, [pc, #476]	; (801b87c <tcp_write+0x2ec>)
 801b6a0:	4874      	ldr	r0, [pc, #464]	; (801b874 <tcp_write+0x2e4>)
 801b6a2:	f004 fc5f 	bl	801ff64 <printf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801b6a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b6a8:	891a      	ldrh	r2, [r3, #8]
 801b6aa:	8c3b      	ldrh	r3, [r7, #32]
 801b6ac:	4413      	add	r3, r2
 801b6ae:	b29b      	uxth	r3, r3
 801b6b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801b6b2:	1ad3      	subs	r3, r2, r3
 801b6b4:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801b6b6:	68fb      	ldr	r3, [r7, #12]
 801b6b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801b6bc:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801b6be:	8a7b      	ldrh	r3, [r7, #18]
 801b6c0:	2b00      	cmp	r3, #0
 801b6c2:	d026      	beq.n	801b712 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801b6c4:	8a7b      	ldrh	r3, [r7, #18]
 801b6c6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b6c8:	429a      	cmp	r2, r3
 801b6ca:	d206      	bcs.n	801b6da <tcp_write+0x14a>
 801b6cc:	4b67      	ldr	r3, [pc, #412]	; (801b86c <tcp_write+0x2dc>)
 801b6ce:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801b6d2:	496b      	ldr	r1, [pc, #428]	; (801b880 <tcp_write+0x2f0>)
 801b6d4:	4867      	ldr	r0, [pc, #412]	; (801b874 <tcp_write+0x2e4>)
 801b6d6:	f004 fc45 	bl	801ff64 <printf>
      seg = last_unsent;
 801b6da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b6dc:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801b6de:	8a7b      	ldrh	r3, [r7, #18]
 801b6e0:	88fa      	ldrh	r2, [r7, #6]
 801b6e2:	4293      	cmp	r3, r2
 801b6e4:	bf28      	it	cs
 801b6e6:	4613      	movcs	r3, r2
 801b6e8:	b29b      	uxth	r3, r3
 801b6ea:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b6ec:	4293      	cmp	r3, r2
 801b6ee:	bf28      	it	cs
 801b6f0:	4613      	movcs	r3, r2
 801b6f2:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801b6f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b6f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b6fa:	4413      	add	r3, r2
 801b6fc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801b700:	8a7a      	ldrh	r2, [r7, #18]
 801b702:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b704:	1ad3      	subs	r3, r2, r3
 801b706:	b29b      	uxth	r3, r3
 801b708:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801b70a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b70c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b70e:	1ad3      	subs	r3, r2, r3
 801b710:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801b712:	8a7b      	ldrh	r3, [r7, #18]
 801b714:	2b00      	cmp	r3, #0
 801b716:	d00b      	beq.n	801b730 <tcp_write+0x1a0>
 801b718:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b71c:	88fb      	ldrh	r3, [r7, #6]
 801b71e:	429a      	cmp	r2, r3
 801b720:	d006      	beq.n	801b730 <tcp_write+0x1a0>
 801b722:	4b52      	ldr	r3, [pc, #328]	; (801b86c <tcp_write+0x2dc>)
 801b724:	f44f 7200 	mov.w	r2, #512	; 0x200
 801b728:	4956      	ldr	r1, [pc, #344]	; (801b884 <tcp_write+0x2f4>)
 801b72a:	4852      	ldr	r0, [pc, #328]	; (801b874 <tcp_write+0x2e4>)
 801b72c:	f004 fc1a 	bl	801ff64 <printf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801b730:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b734:	88fb      	ldrh	r3, [r7, #6]
 801b736:	429a      	cmp	r2, r3
 801b738:	f080 8167 	bcs.w	801ba0a <tcp_write+0x47a>
 801b73c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b73e:	2b00      	cmp	r3, #0
 801b740:	f000 8163 	beq.w	801ba0a <tcp_write+0x47a>
 801b744:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b746:	891b      	ldrh	r3, [r3, #8]
 801b748:	2b00      	cmp	r3, #0
 801b74a:	f000 815e 	beq.w	801ba0a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801b74e:	88fa      	ldrh	r2, [r7, #6]
 801b750:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b754:	1ad2      	subs	r2, r2, r3
 801b756:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b758:	4293      	cmp	r3, r2
 801b75a:	bfa8      	it	ge
 801b75c:	4613      	movge	r3, r2
 801b75e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801b760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b762:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801b764:	797b      	ldrb	r3, [r7, #5]
 801b766:	f003 0301 	and.w	r3, r3, #1
 801b76a:	2b00      	cmp	r3, #0
 801b76c:	d027      	beq.n	801b7be <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801b76e:	f107 0012 	add.w	r0, r7, #18
 801b772:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b774:	8bf9      	ldrh	r1, [r7, #30]
 801b776:	2301      	movs	r3, #1
 801b778:	9302      	str	r3, [sp, #8]
 801b77a:	797b      	ldrb	r3, [r7, #5]
 801b77c:	9301      	str	r3, [sp, #4]
 801b77e:	68fb      	ldr	r3, [r7, #12]
 801b780:	9300      	str	r3, [sp, #0]
 801b782:	4603      	mov	r3, r0
 801b784:	2000      	movs	r0, #0
 801b786:	f7ff fe0f 	bl	801b3a8 <tcp_pbuf_prealloc>
 801b78a:	6578      	str	r0, [r7, #84]	; 0x54
 801b78c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b78e:	2b00      	cmp	r3, #0
 801b790:	f000 8225 	beq.w	801bbde <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801b794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b796:	6858      	ldr	r0, [r3, #4]
 801b798:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b79c:	68ba      	ldr	r2, [r7, #8]
 801b79e:	4413      	add	r3, r2
 801b7a0:	8bfa      	ldrh	r2, [r7, #30]
 801b7a2:	4619      	mov	r1, r3
 801b7a4:	f004 fbae 	bl	801ff04 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801b7a8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801b7aa:	f7fb f981 	bl	8016ab0 <pbuf_clen>
 801b7ae:	4603      	mov	r3, r0
 801b7b0:	461a      	mov	r2, r3
 801b7b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801b7b6:	4413      	add	r3, r2
 801b7b8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801b7bc:	e041      	b.n	801b842 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801b7be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b7c0:	685b      	ldr	r3, [r3, #4]
 801b7c2:	637b      	str	r3, [r7, #52]	; 0x34
 801b7c4:	e002      	b.n	801b7cc <tcp_write+0x23c>
 801b7c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b7c8:	681b      	ldr	r3, [r3, #0]
 801b7ca:	637b      	str	r3, [r7, #52]	; 0x34
 801b7cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b7ce:	681b      	ldr	r3, [r3, #0]
 801b7d0:	2b00      	cmp	r3, #0
 801b7d2:	d1f8      	bne.n	801b7c6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801b7d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b7d6:	7b1b      	ldrb	r3, [r3, #12]
 801b7d8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801b7dc:	2b00      	cmp	r3, #0
 801b7de:	d115      	bne.n	801b80c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801b7e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b7e2:	685b      	ldr	r3, [r3, #4]
 801b7e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b7e6:	8952      	ldrh	r2, [r2, #10]
 801b7e8:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801b7ea:	68ba      	ldr	r2, [r7, #8]
 801b7ec:	429a      	cmp	r2, r3
 801b7ee:	d10d      	bne.n	801b80c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801b7f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b7f4:	2b00      	cmp	r3, #0
 801b7f6:	d006      	beq.n	801b806 <tcp_write+0x276>
 801b7f8:	4b1c      	ldr	r3, [pc, #112]	; (801b86c <tcp_write+0x2dc>)
 801b7fa:	f240 2231 	movw	r2, #561	; 0x231
 801b7fe:	4922      	ldr	r1, [pc, #136]	; (801b888 <tcp_write+0x2f8>)
 801b800:	481c      	ldr	r0, [pc, #112]	; (801b874 <tcp_write+0x2e4>)
 801b802:	f004 fbaf 	bl	801ff64 <printf>
          extendlen = seglen;
 801b806:	8bfb      	ldrh	r3, [r7, #30]
 801b808:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801b80a:	e01a      	b.n	801b842 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801b80c:	8bfb      	ldrh	r3, [r7, #30]
 801b80e:	2201      	movs	r2, #1
 801b810:	4619      	mov	r1, r3
 801b812:	2000      	movs	r0, #0
 801b814:	f7fa fdda 	bl	80163cc <pbuf_alloc>
 801b818:	6578      	str	r0, [r7, #84]	; 0x54
 801b81a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b81c:	2b00      	cmp	r3, #0
 801b81e:	f000 81e0 	beq.w	801bbe2 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801b822:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b826:	68ba      	ldr	r2, [r7, #8]
 801b828:	441a      	add	r2, r3
 801b82a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b82c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801b82e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801b830:	f7fb f93e 	bl	8016ab0 <pbuf_clen>
 801b834:	4603      	mov	r3, r0
 801b836:	461a      	mov	r2, r3
 801b838:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801b83c:	4413      	add	r3, r2
 801b83e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801b842:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b846:	8bfb      	ldrh	r3, [r7, #30]
 801b848:	4413      	add	r3, r2
 801b84a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801b84e:	e0dc      	b.n	801ba0a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801b850:	68fb      	ldr	r3, [r7, #12]
 801b852:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801b856:	2b00      	cmp	r3, #0
 801b858:	f000 80d7 	beq.w	801ba0a <tcp_write+0x47a>
 801b85c:	4b03      	ldr	r3, [pc, #12]	; (801b86c <tcp_write+0x2dc>)
 801b85e:	f240 224a 	movw	r2, #586	; 0x24a
 801b862:	490a      	ldr	r1, [pc, #40]	; (801b88c <tcp_write+0x2fc>)
 801b864:	4803      	ldr	r0, [pc, #12]	; (801b874 <tcp_write+0x2e4>)
 801b866:	f004 fb7d 	bl	801ff64 <printf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801b86a:	e0ce      	b.n	801ba0a <tcp_write+0x47a>
 801b86c:	080282f8 	.word	0x080282f8
 801b870:	08028498 	.word	0x08028498
 801b874:	0802834c 	.word	0x0802834c
 801b878:	080284b0 	.word	0x080284b0
 801b87c:	080284e4 	.word	0x080284e4
 801b880:	080284fc 	.word	0x080284fc
 801b884:	0802851c 	.word	0x0802851c
 801b888:	0802853c 	.word	0x0802853c
 801b88c:	08028568 	.word	0x08028568
    struct pbuf *p;
    u16_t left = len - pos;
 801b890:	88fa      	ldrh	r2, [r7, #6]
 801b892:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b896:	1ad3      	subs	r3, r2, r3
 801b898:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801b89a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801b89e:	b29b      	uxth	r3, r3
 801b8a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801b8a2:	1ad3      	subs	r3, r2, r3
 801b8a4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801b8a6:	8b7a      	ldrh	r2, [r7, #26]
 801b8a8:	8bbb      	ldrh	r3, [r7, #28]
 801b8aa:	4293      	cmp	r3, r2
 801b8ac:	bf28      	it	cs
 801b8ae:	4613      	movcs	r3, r2
 801b8b0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801b8b2:	797b      	ldrb	r3, [r7, #5]
 801b8b4:	f003 0301 	and.w	r3, r3, #1
 801b8b8:	2b00      	cmp	r3, #0
 801b8ba:	d036      	beq.n	801b92a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801b8bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801b8c0:	b29a      	uxth	r2, r3
 801b8c2:	8b3b      	ldrh	r3, [r7, #24]
 801b8c4:	4413      	add	r3, r2
 801b8c6:	b299      	uxth	r1, r3
 801b8c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b8ca:	2b00      	cmp	r3, #0
 801b8cc:	bf0c      	ite	eq
 801b8ce:	2301      	moveq	r3, #1
 801b8d0:	2300      	movne	r3, #0
 801b8d2:	b2db      	uxtb	r3, r3
 801b8d4:	f107 0012 	add.w	r0, r7, #18
 801b8d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801b8da:	9302      	str	r3, [sp, #8]
 801b8dc:	797b      	ldrb	r3, [r7, #5]
 801b8de:	9301      	str	r3, [sp, #4]
 801b8e0:	68fb      	ldr	r3, [r7, #12]
 801b8e2:	9300      	str	r3, [sp, #0]
 801b8e4:	4603      	mov	r3, r0
 801b8e6:	2036      	movs	r0, #54	; 0x36
 801b8e8:	f7ff fd5e 	bl	801b3a8 <tcp_pbuf_prealloc>
 801b8ec:	6338      	str	r0, [r7, #48]	; 0x30
 801b8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b8f0:	2b00      	cmp	r3, #0
 801b8f2:	f000 8178 	beq.w	801bbe6 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801b8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b8f8:	895b      	ldrh	r3, [r3, #10]
 801b8fa:	8b3a      	ldrh	r2, [r7, #24]
 801b8fc:	429a      	cmp	r2, r3
 801b8fe:	d906      	bls.n	801b90e <tcp_write+0x37e>
 801b900:	4b8c      	ldr	r3, [pc, #560]	; (801bb34 <tcp_write+0x5a4>)
 801b902:	f240 2266 	movw	r2, #614	; 0x266
 801b906:	498c      	ldr	r1, [pc, #560]	; (801bb38 <tcp_write+0x5a8>)
 801b908:	488c      	ldr	r0, [pc, #560]	; (801bb3c <tcp_write+0x5ac>)
 801b90a:	f004 fb2b 	bl	801ff64 <printf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801b90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b910:	685a      	ldr	r2, [r3, #4]
 801b912:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801b916:	18d0      	adds	r0, r2, r3
 801b918:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b91c:	68ba      	ldr	r2, [r7, #8]
 801b91e:	4413      	add	r3, r2
 801b920:	8b3a      	ldrh	r2, [r7, #24]
 801b922:	4619      	mov	r1, r3
 801b924:	f004 faee 	bl	801ff04 <memcpy>
 801b928:	e02f      	b.n	801b98a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801b92a:	8a7b      	ldrh	r3, [r7, #18]
 801b92c:	2b00      	cmp	r3, #0
 801b92e:	d006      	beq.n	801b93e <tcp_write+0x3ae>
 801b930:	4b80      	ldr	r3, [pc, #512]	; (801bb34 <tcp_write+0x5a4>)
 801b932:	f240 2271 	movw	r2, #625	; 0x271
 801b936:	4982      	ldr	r1, [pc, #520]	; (801bb40 <tcp_write+0x5b0>)
 801b938:	4880      	ldr	r0, [pc, #512]	; (801bb3c <tcp_write+0x5ac>)
 801b93a:	f004 fb13 	bl	801ff64 <printf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801b93e:	8b3b      	ldrh	r3, [r7, #24]
 801b940:	2201      	movs	r2, #1
 801b942:	4619      	mov	r1, r3
 801b944:	2036      	movs	r0, #54	; 0x36
 801b946:	f7fa fd41 	bl	80163cc <pbuf_alloc>
 801b94a:	6178      	str	r0, [r7, #20]
 801b94c:	697b      	ldr	r3, [r7, #20]
 801b94e:	2b00      	cmp	r3, #0
 801b950:	f000 814b 	beq.w	801bbea <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801b954:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b958:	68ba      	ldr	r2, [r7, #8]
 801b95a:	441a      	add	r2, r3
 801b95c:	697b      	ldr	r3, [r7, #20]
 801b95e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801b960:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801b964:	b29b      	uxth	r3, r3
 801b966:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b96a:	4619      	mov	r1, r3
 801b96c:	2036      	movs	r0, #54	; 0x36
 801b96e:	f7fa fd2d 	bl	80163cc <pbuf_alloc>
 801b972:	6338      	str	r0, [r7, #48]	; 0x30
 801b974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b976:	2b00      	cmp	r3, #0
 801b978:	d103      	bne.n	801b982 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801b97a:	6978      	ldr	r0, [r7, #20]
 801b97c:	f7fb f80a 	bl	8016994 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801b980:	e136      	b.n	801bbf0 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801b982:	6979      	ldr	r1, [r7, #20]
 801b984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b986:	f7fb f8d3 	bl	8016b30 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801b98a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b98c:	f7fb f890 	bl	8016ab0 <pbuf_clen>
 801b990:	4603      	mov	r3, r0
 801b992:	461a      	mov	r2, r3
 801b994:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801b998:	4413      	add	r3, r2
 801b99a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801b99e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801b9a2:	2b09      	cmp	r3, #9
 801b9a4:	d903      	bls.n	801b9ae <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801b9a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b9a8:	f7fa fff4 	bl	8016994 <pbuf_free>
      goto memerr;
 801b9ac:	e120      	b.n	801bbf0 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801b9ae:	68fb      	ldr	r3, [r7, #12]
 801b9b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801b9b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b9b6:	441a      	add	r2, r3
 801b9b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b9bc:	9300      	str	r3, [sp, #0]
 801b9be:	4613      	mov	r3, r2
 801b9c0:	2200      	movs	r2, #0
 801b9c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b9c4:	68f8      	ldr	r0, [r7, #12]
 801b9c6:	f7ff fc51 	bl	801b26c <tcp_create_segment>
 801b9ca:	64f8      	str	r0, [r7, #76]	; 0x4c
 801b9cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b9ce:	2b00      	cmp	r3, #0
 801b9d0:	f000 810d 	beq.w	801bbee <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801b9d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b9d6:	2b00      	cmp	r3, #0
 801b9d8:	d102      	bne.n	801b9e0 <tcp_write+0x450>
      queue = seg;
 801b9da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b9dc:	647b      	str	r3, [r7, #68]	; 0x44
 801b9de:	e00c      	b.n	801b9fa <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801b9e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b9e2:	2b00      	cmp	r3, #0
 801b9e4:	d106      	bne.n	801b9f4 <tcp_write+0x464>
 801b9e6:	4b53      	ldr	r3, [pc, #332]	; (801bb34 <tcp_write+0x5a4>)
 801b9e8:	f240 22ab 	movw	r2, #683	; 0x2ab
 801b9ec:	4955      	ldr	r1, [pc, #340]	; (801bb44 <tcp_write+0x5b4>)
 801b9ee:	4853      	ldr	r0, [pc, #332]	; (801bb3c <tcp_write+0x5ac>)
 801b9f0:	f004 fab8 	bl	801ff64 <printf>
      prev_seg->next = seg;
 801b9f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b9f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801b9f8:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801b9fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b9fc:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801b9fe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ba02:	8b3b      	ldrh	r3, [r7, #24]
 801ba04:	4413      	add	r3, r2
 801ba06:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801ba0a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ba0e:	88fb      	ldrh	r3, [r7, #6]
 801ba10:	429a      	cmp	r2, r3
 801ba12:	f4ff af3d 	bcc.w	801b890 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801ba16:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ba18:	2b00      	cmp	r3, #0
 801ba1a:	d02c      	beq.n	801ba76 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801ba1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ba1e:	685b      	ldr	r3, [r3, #4]
 801ba20:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ba22:	e01e      	b.n	801ba62 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801ba24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ba26:	891a      	ldrh	r2, [r3, #8]
 801ba28:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ba2a:	4413      	add	r3, r2
 801ba2c:	b29a      	uxth	r2, r3
 801ba2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ba30:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801ba32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ba34:	681b      	ldr	r3, [r3, #0]
 801ba36:	2b00      	cmp	r3, #0
 801ba38:	d110      	bne.n	801ba5c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801ba3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ba3c:	685b      	ldr	r3, [r3, #4]
 801ba3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ba40:	8952      	ldrh	r2, [r2, #10]
 801ba42:	4413      	add	r3, r2
 801ba44:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801ba46:	68b9      	ldr	r1, [r7, #8]
 801ba48:	4618      	mov	r0, r3
 801ba4a:	f004 fa5b 	bl	801ff04 <memcpy>
        p->len += oversize_used;
 801ba4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ba50:	895a      	ldrh	r2, [r3, #10]
 801ba52:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ba54:	4413      	add	r3, r2
 801ba56:	b29a      	uxth	r2, r3
 801ba58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ba5a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801ba5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ba5e:	681b      	ldr	r3, [r3, #0]
 801ba60:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ba62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ba64:	2b00      	cmp	r3, #0
 801ba66:	d1dd      	bne.n	801ba24 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801ba68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ba6a:	891a      	ldrh	r2, [r3, #8]
 801ba6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ba6e:	4413      	add	r3, r2
 801ba70:	b29a      	uxth	r2, r3
 801ba72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ba74:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801ba76:	8a7a      	ldrh	r2, [r7, #18]
 801ba78:	68fb      	ldr	r3, [r7, #12]
 801ba7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801ba7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ba80:	2b00      	cmp	r3, #0
 801ba82:	d018      	beq.n	801bab6 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801ba84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ba86:	2b00      	cmp	r3, #0
 801ba88:	d106      	bne.n	801ba98 <tcp_write+0x508>
 801ba8a:	4b2a      	ldr	r3, [pc, #168]	; (801bb34 <tcp_write+0x5a4>)
 801ba8c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801ba90:	492d      	ldr	r1, [pc, #180]	; (801bb48 <tcp_write+0x5b8>)
 801ba92:	482a      	ldr	r0, [pc, #168]	; (801bb3c <tcp_write+0x5ac>)
 801ba94:	f004 fa66 	bl	801ff64 <printf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801ba98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ba9a:	685b      	ldr	r3, [r3, #4]
 801ba9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801ba9e:	4618      	mov	r0, r3
 801baa0:	f7fb f846 	bl	8016b30 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801baa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801baa6:	891a      	ldrh	r2, [r3, #8]
 801baa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801baaa:	891b      	ldrh	r3, [r3, #8]
 801baac:	4413      	add	r3, r2
 801baae:	b29a      	uxth	r2, r3
 801bab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bab2:	811a      	strh	r2, [r3, #8]
 801bab4:	e037      	b.n	801bb26 <tcp_write+0x596>
  } else if (extendlen > 0) {
 801bab6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801bab8:	2b00      	cmp	r3, #0
 801baba:	d034      	beq.n	801bb26 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801babc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801babe:	2b00      	cmp	r3, #0
 801bac0:	d003      	beq.n	801baca <tcp_write+0x53a>
 801bac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bac4:	685b      	ldr	r3, [r3, #4]
 801bac6:	2b00      	cmp	r3, #0
 801bac8:	d106      	bne.n	801bad8 <tcp_write+0x548>
 801baca:	4b1a      	ldr	r3, [pc, #104]	; (801bb34 <tcp_write+0x5a4>)
 801bacc:	f240 22e6 	movw	r2, #742	; 0x2e6
 801bad0:	491e      	ldr	r1, [pc, #120]	; (801bb4c <tcp_write+0x5bc>)
 801bad2:	481a      	ldr	r0, [pc, #104]	; (801bb3c <tcp_write+0x5ac>)
 801bad4:	f004 fa46 	bl	801ff64 <printf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801bad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bada:	685b      	ldr	r3, [r3, #4]
 801badc:	62bb      	str	r3, [r7, #40]	; 0x28
 801bade:	e009      	b.n	801baf4 <tcp_write+0x564>
      p->tot_len += extendlen;
 801bae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bae2:	891a      	ldrh	r2, [r3, #8]
 801bae4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801bae6:	4413      	add	r3, r2
 801bae8:	b29a      	uxth	r2, r3
 801baea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801baec:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801baee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801baf0:	681b      	ldr	r3, [r3, #0]
 801baf2:	62bb      	str	r3, [r7, #40]	; 0x28
 801baf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801baf6:	681b      	ldr	r3, [r3, #0]
 801baf8:	2b00      	cmp	r3, #0
 801bafa:	d1f1      	bne.n	801bae0 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801bafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bafe:	891a      	ldrh	r2, [r3, #8]
 801bb00:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801bb02:	4413      	add	r3, r2
 801bb04:	b29a      	uxth	r2, r3
 801bb06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bb08:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801bb0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bb0c:	895a      	ldrh	r2, [r3, #10]
 801bb0e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801bb10:	4413      	add	r3, r2
 801bb12:	b29a      	uxth	r2, r3
 801bb14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bb16:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801bb18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bb1a:	891a      	ldrh	r2, [r3, #8]
 801bb1c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801bb1e:	4413      	add	r3, r2
 801bb20:	b29a      	uxth	r2, r3
 801bb22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bb24:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801bb26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bb28:	2b00      	cmp	r3, #0
 801bb2a:	d111      	bne.n	801bb50 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801bb2c:	68fb      	ldr	r3, [r7, #12]
 801bb2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801bb30:	66da      	str	r2, [r3, #108]	; 0x6c
 801bb32:	e010      	b.n	801bb56 <tcp_write+0x5c6>
 801bb34:	080282f8 	.word	0x080282f8
 801bb38:	08028598 	.word	0x08028598
 801bb3c:	0802834c 	.word	0x0802834c
 801bb40:	080285d8 	.word	0x080285d8
 801bb44:	080285e8 	.word	0x080285e8
 801bb48:	080285fc 	.word	0x080285fc
 801bb4c:	08028634 	.word	0x08028634
  } else {
    last_unsent->next = queue;
 801bb50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bb52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801bb54:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801bb56:	68fb      	ldr	r3, [r7, #12]
 801bb58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801bb5a:	88fb      	ldrh	r3, [r7, #6]
 801bb5c:	441a      	add	r2, r3
 801bb5e:	68fb      	ldr	r3, [r7, #12]
 801bb60:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801bb62:	68fb      	ldr	r3, [r7, #12]
 801bb64:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801bb68:	88fb      	ldrh	r3, [r7, #6]
 801bb6a:	1ad3      	subs	r3, r2, r3
 801bb6c:	b29a      	uxth	r2, r3
 801bb6e:	68fb      	ldr	r3, [r7, #12]
 801bb70:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801bb74:	68fb      	ldr	r3, [r7, #12]
 801bb76:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801bb7a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801bb7e:	68fb      	ldr	r3, [r7, #12]
 801bb80:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801bb84:	2b00      	cmp	r3, #0
 801bb86:	d00e      	beq.n	801bba6 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801bb88:	68fb      	ldr	r3, [r7, #12]
 801bb8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bb8c:	2b00      	cmp	r3, #0
 801bb8e:	d10a      	bne.n	801bba6 <tcp_write+0x616>
 801bb90:	68fb      	ldr	r3, [r7, #12]
 801bb92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bb94:	2b00      	cmp	r3, #0
 801bb96:	d106      	bne.n	801bba6 <tcp_write+0x616>
 801bb98:	4b2c      	ldr	r3, [pc, #176]	; (801bc4c <tcp_write+0x6bc>)
 801bb9a:	f240 3212 	movw	r2, #786	; 0x312
 801bb9e:	492c      	ldr	r1, [pc, #176]	; (801bc50 <tcp_write+0x6c0>)
 801bba0:	482c      	ldr	r0, [pc, #176]	; (801bc54 <tcp_write+0x6c4>)
 801bba2:	f004 f9df 	bl	801ff64 <printf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801bba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bba8:	2b00      	cmp	r3, #0
 801bbaa:	d016      	beq.n	801bbda <tcp_write+0x64a>
 801bbac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bbae:	68db      	ldr	r3, [r3, #12]
 801bbb0:	2b00      	cmp	r3, #0
 801bbb2:	d012      	beq.n	801bbda <tcp_write+0x64a>
 801bbb4:	797b      	ldrb	r3, [r7, #5]
 801bbb6:	f003 0302 	and.w	r3, r3, #2
 801bbba:	2b00      	cmp	r3, #0
 801bbbc:	d10d      	bne.n	801bbda <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801bbbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bbc0:	68db      	ldr	r3, [r3, #12]
 801bbc2:	899b      	ldrh	r3, [r3, #12]
 801bbc4:	b29c      	uxth	r4, r3
 801bbc6:	2008      	movs	r0, #8
 801bbc8:	f7f9 faf4 	bl	80151b4 <lwip_htons>
 801bbcc:	4603      	mov	r3, r0
 801bbce:	461a      	mov	r2, r3
 801bbd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bbd2:	68db      	ldr	r3, [r3, #12]
 801bbd4:	4322      	orrs	r2, r4
 801bbd6:	b292      	uxth	r2, r2
 801bbd8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801bbda:	2300      	movs	r3, #0
 801bbdc:	e031      	b.n	801bc42 <tcp_write+0x6b2>
          goto memerr;
 801bbde:	bf00      	nop
 801bbe0:	e006      	b.n	801bbf0 <tcp_write+0x660>
            goto memerr;
 801bbe2:	bf00      	nop
 801bbe4:	e004      	b.n	801bbf0 <tcp_write+0x660>
        goto memerr;
 801bbe6:	bf00      	nop
 801bbe8:	e002      	b.n	801bbf0 <tcp_write+0x660>
        goto memerr;
 801bbea:	bf00      	nop
 801bbec:	e000      	b.n	801bbf0 <tcp_write+0x660>
      goto memerr;
 801bbee:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801bbf0:	68fb      	ldr	r3, [r7, #12]
 801bbf2:	8b5b      	ldrh	r3, [r3, #26]
 801bbf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bbf8:	b29a      	uxth	r2, r3
 801bbfa:	68fb      	ldr	r3, [r7, #12]
 801bbfc:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801bbfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bc00:	2b00      	cmp	r3, #0
 801bc02:	d002      	beq.n	801bc0a <tcp_write+0x67a>
    pbuf_free(concat_p);
 801bc04:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801bc06:	f7fa fec5 	bl	8016994 <pbuf_free>
  }
  if (queue != NULL) {
 801bc0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bc0c:	2b00      	cmp	r3, #0
 801bc0e:	d002      	beq.n	801bc16 <tcp_write+0x686>
    tcp_segs_free(queue);
 801bc10:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801bc12:	f7fc fb83 	bl	801831c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801bc16:	68fb      	ldr	r3, [r7, #12]
 801bc18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801bc1c:	2b00      	cmp	r3, #0
 801bc1e:	d00e      	beq.n	801bc3e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801bc20:	68fb      	ldr	r3, [r7, #12]
 801bc22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bc24:	2b00      	cmp	r3, #0
 801bc26:	d10a      	bne.n	801bc3e <tcp_write+0x6ae>
 801bc28:	68fb      	ldr	r3, [r7, #12]
 801bc2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bc2c:	2b00      	cmp	r3, #0
 801bc2e:	d106      	bne.n	801bc3e <tcp_write+0x6ae>
 801bc30:	4b06      	ldr	r3, [pc, #24]	; (801bc4c <tcp_write+0x6bc>)
 801bc32:	f240 3227 	movw	r2, #807	; 0x327
 801bc36:	4906      	ldr	r1, [pc, #24]	; (801bc50 <tcp_write+0x6c0>)
 801bc38:	4806      	ldr	r0, [pc, #24]	; (801bc54 <tcp_write+0x6c4>)
 801bc3a:	f004 f993 	bl	801ff64 <printf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801bc3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801bc42:	4618      	mov	r0, r3
 801bc44:	375c      	adds	r7, #92	; 0x5c
 801bc46:	46bd      	mov	sp, r7
 801bc48:	bd90      	pop	{r4, r7, pc}
 801bc4a:	bf00      	nop
 801bc4c:	080282f8 	.word	0x080282f8
 801bc50:	0802866c 	.word	0x0802866c
 801bc54:	0802834c 	.word	0x0802834c

0801bc58 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801bc58:	b590      	push	{r4, r7, lr}
 801bc5a:	b08b      	sub	sp, #44	; 0x2c
 801bc5c:	af02      	add	r7, sp, #8
 801bc5e:	6078      	str	r0, [r7, #4]
 801bc60:	460b      	mov	r3, r1
 801bc62:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801bc64:	2300      	movs	r3, #0
 801bc66:	61fb      	str	r3, [r7, #28]
 801bc68:	2300      	movs	r3, #0
 801bc6a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801bc6c:	2300      	movs	r3, #0
 801bc6e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801bc70:	687b      	ldr	r3, [r7, #4]
 801bc72:	2b00      	cmp	r3, #0
 801bc74:	d106      	bne.n	801bc84 <tcp_split_unsent_seg+0x2c>
 801bc76:	4b95      	ldr	r3, [pc, #596]	; (801becc <tcp_split_unsent_seg+0x274>)
 801bc78:	f240 324b 	movw	r2, #843	; 0x34b
 801bc7c:	4994      	ldr	r1, [pc, #592]	; (801bed0 <tcp_split_unsent_seg+0x278>)
 801bc7e:	4895      	ldr	r0, [pc, #596]	; (801bed4 <tcp_split_unsent_seg+0x27c>)
 801bc80:	f004 f970 	bl	801ff64 <printf>

  useg = pcb->unsent;
 801bc84:	687b      	ldr	r3, [r7, #4]
 801bc86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bc88:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801bc8a:	697b      	ldr	r3, [r7, #20]
 801bc8c:	2b00      	cmp	r3, #0
 801bc8e:	d102      	bne.n	801bc96 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801bc90:	f04f 33ff 	mov.w	r3, #4294967295
 801bc94:	e116      	b.n	801bec4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801bc96:	887b      	ldrh	r3, [r7, #2]
 801bc98:	2b00      	cmp	r3, #0
 801bc9a:	d109      	bne.n	801bcb0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801bc9c:	4b8b      	ldr	r3, [pc, #556]	; (801becc <tcp_split_unsent_seg+0x274>)
 801bc9e:	f240 3253 	movw	r2, #851	; 0x353
 801bca2:	498d      	ldr	r1, [pc, #564]	; (801bed8 <tcp_split_unsent_seg+0x280>)
 801bca4:	488b      	ldr	r0, [pc, #556]	; (801bed4 <tcp_split_unsent_seg+0x27c>)
 801bca6:	f004 f95d 	bl	801ff64 <printf>
    return ERR_VAL;
 801bcaa:	f06f 0305 	mvn.w	r3, #5
 801bcae:	e109      	b.n	801bec4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801bcb0:	697b      	ldr	r3, [r7, #20]
 801bcb2:	891b      	ldrh	r3, [r3, #8]
 801bcb4:	887a      	ldrh	r2, [r7, #2]
 801bcb6:	429a      	cmp	r2, r3
 801bcb8:	d301      	bcc.n	801bcbe <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801bcba:	2300      	movs	r3, #0
 801bcbc:	e102      	b.n	801bec4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801bcbe:	687b      	ldr	r3, [r7, #4]
 801bcc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bcc2:	887a      	ldrh	r2, [r7, #2]
 801bcc4:	429a      	cmp	r2, r3
 801bcc6:	d906      	bls.n	801bcd6 <tcp_split_unsent_seg+0x7e>
 801bcc8:	4b80      	ldr	r3, [pc, #512]	; (801becc <tcp_split_unsent_seg+0x274>)
 801bcca:	f240 325b 	movw	r2, #859	; 0x35b
 801bcce:	4983      	ldr	r1, [pc, #524]	; (801bedc <tcp_split_unsent_seg+0x284>)
 801bcd0:	4880      	ldr	r0, [pc, #512]	; (801bed4 <tcp_split_unsent_seg+0x27c>)
 801bcd2:	f004 f947 	bl	801ff64 <printf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801bcd6:	697b      	ldr	r3, [r7, #20]
 801bcd8:	891b      	ldrh	r3, [r3, #8]
 801bcda:	2b00      	cmp	r3, #0
 801bcdc:	d106      	bne.n	801bcec <tcp_split_unsent_seg+0x94>
 801bcde:	4b7b      	ldr	r3, [pc, #492]	; (801becc <tcp_split_unsent_seg+0x274>)
 801bce0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801bce4:	497e      	ldr	r1, [pc, #504]	; (801bee0 <tcp_split_unsent_seg+0x288>)
 801bce6:	487b      	ldr	r0, [pc, #492]	; (801bed4 <tcp_split_unsent_seg+0x27c>)
 801bce8:	f004 f93c 	bl	801ff64 <printf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801bcec:	697b      	ldr	r3, [r7, #20]
 801bcee:	7a9b      	ldrb	r3, [r3, #10]
 801bcf0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801bcf2:	7bfb      	ldrb	r3, [r7, #15]
 801bcf4:	009b      	lsls	r3, r3, #2
 801bcf6:	b2db      	uxtb	r3, r3
 801bcf8:	f003 0304 	and.w	r3, r3, #4
 801bcfc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801bcfe:	697b      	ldr	r3, [r7, #20]
 801bd00:	891a      	ldrh	r2, [r3, #8]
 801bd02:	887b      	ldrh	r3, [r7, #2]
 801bd04:	1ad3      	subs	r3, r2, r3
 801bd06:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801bd08:	7bbb      	ldrb	r3, [r7, #14]
 801bd0a:	b29a      	uxth	r2, r3
 801bd0c:	89bb      	ldrh	r3, [r7, #12]
 801bd0e:	4413      	add	r3, r2
 801bd10:	b29b      	uxth	r3, r3
 801bd12:	f44f 7220 	mov.w	r2, #640	; 0x280
 801bd16:	4619      	mov	r1, r3
 801bd18:	2036      	movs	r0, #54	; 0x36
 801bd1a:	f7fa fb57 	bl	80163cc <pbuf_alloc>
 801bd1e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801bd20:	693b      	ldr	r3, [r7, #16]
 801bd22:	2b00      	cmp	r3, #0
 801bd24:	f000 80b7 	beq.w	801be96 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801bd28:	697b      	ldr	r3, [r7, #20]
 801bd2a:	685b      	ldr	r3, [r3, #4]
 801bd2c:	891a      	ldrh	r2, [r3, #8]
 801bd2e:	697b      	ldr	r3, [r7, #20]
 801bd30:	891b      	ldrh	r3, [r3, #8]
 801bd32:	1ad3      	subs	r3, r2, r3
 801bd34:	b29a      	uxth	r2, r3
 801bd36:	887b      	ldrh	r3, [r7, #2]
 801bd38:	4413      	add	r3, r2
 801bd3a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801bd3c:	697b      	ldr	r3, [r7, #20]
 801bd3e:	6858      	ldr	r0, [r3, #4]
 801bd40:	693b      	ldr	r3, [r7, #16]
 801bd42:	685a      	ldr	r2, [r3, #4]
 801bd44:	7bbb      	ldrb	r3, [r7, #14]
 801bd46:	18d1      	adds	r1, r2, r3
 801bd48:	897b      	ldrh	r3, [r7, #10]
 801bd4a:	89ba      	ldrh	r2, [r7, #12]
 801bd4c:	f7fb f818 	bl	8016d80 <pbuf_copy_partial>
 801bd50:	4603      	mov	r3, r0
 801bd52:	461a      	mov	r2, r3
 801bd54:	89bb      	ldrh	r3, [r7, #12]
 801bd56:	4293      	cmp	r3, r2
 801bd58:	f040 809f 	bne.w	801be9a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801bd5c:	697b      	ldr	r3, [r7, #20]
 801bd5e:	68db      	ldr	r3, [r3, #12]
 801bd60:	899b      	ldrh	r3, [r3, #12]
 801bd62:	b29b      	uxth	r3, r3
 801bd64:	4618      	mov	r0, r3
 801bd66:	f7f9 fa25 	bl	80151b4 <lwip_htons>
 801bd6a:	4603      	mov	r3, r0
 801bd6c:	b2db      	uxtb	r3, r3
 801bd6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801bd72:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801bd74:	2300      	movs	r3, #0
 801bd76:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801bd78:	7efb      	ldrb	r3, [r7, #27]
 801bd7a:	f003 0308 	and.w	r3, r3, #8
 801bd7e:	2b00      	cmp	r3, #0
 801bd80:	d007      	beq.n	801bd92 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801bd82:	7efb      	ldrb	r3, [r7, #27]
 801bd84:	f023 0308 	bic.w	r3, r3, #8
 801bd88:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801bd8a:	7ebb      	ldrb	r3, [r7, #26]
 801bd8c:	f043 0308 	orr.w	r3, r3, #8
 801bd90:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801bd92:	7efb      	ldrb	r3, [r7, #27]
 801bd94:	f003 0301 	and.w	r3, r3, #1
 801bd98:	2b00      	cmp	r3, #0
 801bd9a:	d007      	beq.n	801bdac <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801bd9c:	7efb      	ldrb	r3, [r7, #27]
 801bd9e:	f023 0301 	bic.w	r3, r3, #1
 801bda2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801bda4:	7ebb      	ldrb	r3, [r7, #26]
 801bda6:	f043 0301 	orr.w	r3, r3, #1
 801bdaa:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801bdac:	697b      	ldr	r3, [r7, #20]
 801bdae:	68db      	ldr	r3, [r3, #12]
 801bdb0:	685b      	ldr	r3, [r3, #4]
 801bdb2:	4618      	mov	r0, r3
 801bdb4:	f7f9 fa13 	bl	80151de <lwip_htonl>
 801bdb8:	4602      	mov	r2, r0
 801bdba:	887b      	ldrh	r3, [r7, #2]
 801bdbc:	18d1      	adds	r1, r2, r3
 801bdbe:	7eba      	ldrb	r2, [r7, #26]
 801bdc0:	7bfb      	ldrb	r3, [r7, #15]
 801bdc2:	9300      	str	r3, [sp, #0]
 801bdc4:	460b      	mov	r3, r1
 801bdc6:	6939      	ldr	r1, [r7, #16]
 801bdc8:	6878      	ldr	r0, [r7, #4]
 801bdca:	f7ff fa4f 	bl	801b26c <tcp_create_segment>
 801bdce:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801bdd0:	69fb      	ldr	r3, [r7, #28]
 801bdd2:	2b00      	cmp	r3, #0
 801bdd4:	d063      	beq.n	801be9e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801bdd6:	697b      	ldr	r3, [r7, #20]
 801bdd8:	685b      	ldr	r3, [r3, #4]
 801bdda:	4618      	mov	r0, r3
 801bddc:	f7fa fe68 	bl	8016ab0 <pbuf_clen>
 801bde0:	4603      	mov	r3, r0
 801bde2:	461a      	mov	r2, r3
 801bde4:	687b      	ldr	r3, [r7, #4]
 801bde6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801bdea:	1a9b      	subs	r3, r3, r2
 801bdec:	b29a      	uxth	r2, r3
 801bdee:	687b      	ldr	r3, [r7, #4]
 801bdf0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801bdf4:	697b      	ldr	r3, [r7, #20]
 801bdf6:	6858      	ldr	r0, [r3, #4]
 801bdf8:	697b      	ldr	r3, [r7, #20]
 801bdfa:	685b      	ldr	r3, [r3, #4]
 801bdfc:	891a      	ldrh	r2, [r3, #8]
 801bdfe:	89bb      	ldrh	r3, [r7, #12]
 801be00:	1ad3      	subs	r3, r2, r3
 801be02:	b29b      	uxth	r3, r3
 801be04:	4619      	mov	r1, r3
 801be06:	f7fa fc3f 	bl	8016688 <pbuf_realloc>
  useg->len -= remainder;
 801be0a:	697b      	ldr	r3, [r7, #20]
 801be0c:	891a      	ldrh	r2, [r3, #8]
 801be0e:	89bb      	ldrh	r3, [r7, #12]
 801be10:	1ad3      	subs	r3, r2, r3
 801be12:	b29a      	uxth	r2, r3
 801be14:	697b      	ldr	r3, [r7, #20]
 801be16:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801be18:	697b      	ldr	r3, [r7, #20]
 801be1a:	68db      	ldr	r3, [r3, #12]
 801be1c:	899b      	ldrh	r3, [r3, #12]
 801be1e:	b29c      	uxth	r4, r3
 801be20:	7efb      	ldrb	r3, [r7, #27]
 801be22:	b29b      	uxth	r3, r3
 801be24:	4618      	mov	r0, r3
 801be26:	f7f9 f9c5 	bl	80151b4 <lwip_htons>
 801be2a:	4603      	mov	r3, r0
 801be2c:	461a      	mov	r2, r3
 801be2e:	697b      	ldr	r3, [r7, #20]
 801be30:	68db      	ldr	r3, [r3, #12]
 801be32:	4322      	orrs	r2, r4
 801be34:	b292      	uxth	r2, r2
 801be36:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801be38:	697b      	ldr	r3, [r7, #20]
 801be3a:	685b      	ldr	r3, [r3, #4]
 801be3c:	4618      	mov	r0, r3
 801be3e:	f7fa fe37 	bl	8016ab0 <pbuf_clen>
 801be42:	4603      	mov	r3, r0
 801be44:	461a      	mov	r2, r3
 801be46:	687b      	ldr	r3, [r7, #4]
 801be48:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801be4c:	4413      	add	r3, r2
 801be4e:	b29a      	uxth	r2, r3
 801be50:	687b      	ldr	r3, [r7, #4]
 801be52:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801be56:	69fb      	ldr	r3, [r7, #28]
 801be58:	685b      	ldr	r3, [r3, #4]
 801be5a:	4618      	mov	r0, r3
 801be5c:	f7fa fe28 	bl	8016ab0 <pbuf_clen>
 801be60:	4603      	mov	r3, r0
 801be62:	461a      	mov	r2, r3
 801be64:	687b      	ldr	r3, [r7, #4]
 801be66:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801be6a:	4413      	add	r3, r2
 801be6c:	b29a      	uxth	r2, r3
 801be6e:	687b      	ldr	r3, [r7, #4]
 801be70:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801be74:	697b      	ldr	r3, [r7, #20]
 801be76:	681a      	ldr	r2, [r3, #0]
 801be78:	69fb      	ldr	r3, [r7, #28]
 801be7a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801be7c:	697b      	ldr	r3, [r7, #20]
 801be7e:	69fa      	ldr	r2, [r7, #28]
 801be80:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801be82:	69fb      	ldr	r3, [r7, #28]
 801be84:	681b      	ldr	r3, [r3, #0]
 801be86:	2b00      	cmp	r3, #0
 801be88:	d103      	bne.n	801be92 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801be8a:	687b      	ldr	r3, [r7, #4]
 801be8c:	2200      	movs	r2, #0
 801be8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801be92:	2300      	movs	r3, #0
 801be94:	e016      	b.n	801bec4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801be96:	bf00      	nop
 801be98:	e002      	b.n	801bea0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801be9a:	bf00      	nop
 801be9c:	e000      	b.n	801bea0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801be9e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801bea0:	69fb      	ldr	r3, [r7, #28]
 801bea2:	2b00      	cmp	r3, #0
 801bea4:	d006      	beq.n	801beb4 <tcp_split_unsent_seg+0x25c>
 801bea6:	4b09      	ldr	r3, [pc, #36]	; (801becc <tcp_split_unsent_seg+0x274>)
 801bea8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801beac:	490d      	ldr	r1, [pc, #52]	; (801bee4 <tcp_split_unsent_seg+0x28c>)
 801beae:	4809      	ldr	r0, [pc, #36]	; (801bed4 <tcp_split_unsent_seg+0x27c>)
 801beb0:	f004 f858 	bl	801ff64 <printf>
  if (p != NULL) {
 801beb4:	693b      	ldr	r3, [r7, #16]
 801beb6:	2b00      	cmp	r3, #0
 801beb8:	d002      	beq.n	801bec0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801beba:	6938      	ldr	r0, [r7, #16]
 801bebc:	f7fa fd6a 	bl	8016994 <pbuf_free>
  }

  return ERR_MEM;
 801bec0:	f04f 33ff 	mov.w	r3, #4294967295
}
 801bec4:	4618      	mov	r0, r3
 801bec6:	3724      	adds	r7, #36	; 0x24
 801bec8:	46bd      	mov	sp, r7
 801beca:	bd90      	pop	{r4, r7, pc}
 801becc:	080282f8 	.word	0x080282f8
 801bed0:	0802868c 	.word	0x0802868c
 801bed4:	0802834c 	.word	0x0802834c
 801bed8:	080286b0 	.word	0x080286b0
 801bedc:	080286d4 	.word	0x080286d4
 801bee0:	080286e4 	.word	0x080286e4
 801bee4:	080286f4 	.word	0x080286f4

0801bee8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801bee8:	b590      	push	{r4, r7, lr}
 801beea:	b085      	sub	sp, #20
 801beec:	af00      	add	r7, sp, #0
 801beee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801bef0:	687b      	ldr	r3, [r7, #4]
 801bef2:	2b00      	cmp	r3, #0
 801bef4:	d106      	bne.n	801bf04 <tcp_send_fin+0x1c>
 801bef6:	4b21      	ldr	r3, [pc, #132]	; (801bf7c <tcp_send_fin+0x94>)
 801bef8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801befc:	4920      	ldr	r1, [pc, #128]	; (801bf80 <tcp_send_fin+0x98>)
 801befe:	4821      	ldr	r0, [pc, #132]	; (801bf84 <tcp_send_fin+0x9c>)
 801bf00:	f004 f830 	bl	801ff64 <printf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801bf04:	687b      	ldr	r3, [r7, #4]
 801bf06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bf08:	2b00      	cmp	r3, #0
 801bf0a:	d02e      	beq.n	801bf6a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801bf0c:	687b      	ldr	r3, [r7, #4]
 801bf0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bf10:	60fb      	str	r3, [r7, #12]
 801bf12:	e002      	b.n	801bf1a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801bf14:	68fb      	ldr	r3, [r7, #12]
 801bf16:	681b      	ldr	r3, [r3, #0]
 801bf18:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801bf1a:	68fb      	ldr	r3, [r7, #12]
 801bf1c:	681b      	ldr	r3, [r3, #0]
 801bf1e:	2b00      	cmp	r3, #0
 801bf20:	d1f8      	bne.n	801bf14 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801bf22:	68fb      	ldr	r3, [r7, #12]
 801bf24:	68db      	ldr	r3, [r3, #12]
 801bf26:	899b      	ldrh	r3, [r3, #12]
 801bf28:	b29b      	uxth	r3, r3
 801bf2a:	4618      	mov	r0, r3
 801bf2c:	f7f9 f942 	bl	80151b4 <lwip_htons>
 801bf30:	4603      	mov	r3, r0
 801bf32:	b2db      	uxtb	r3, r3
 801bf34:	f003 0307 	and.w	r3, r3, #7
 801bf38:	2b00      	cmp	r3, #0
 801bf3a:	d116      	bne.n	801bf6a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801bf3c:	68fb      	ldr	r3, [r7, #12]
 801bf3e:	68db      	ldr	r3, [r3, #12]
 801bf40:	899b      	ldrh	r3, [r3, #12]
 801bf42:	b29c      	uxth	r4, r3
 801bf44:	2001      	movs	r0, #1
 801bf46:	f7f9 f935 	bl	80151b4 <lwip_htons>
 801bf4a:	4603      	mov	r3, r0
 801bf4c:	461a      	mov	r2, r3
 801bf4e:	68fb      	ldr	r3, [r7, #12]
 801bf50:	68db      	ldr	r3, [r3, #12]
 801bf52:	4322      	orrs	r2, r4
 801bf54:	b292      	uxth	r2, r2
 801bf56:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801bf58:	687b      	ldr	r3, [r7, #4]
 801bf5a:	8b5b      	ldrh	r3, [r3, #26]
 801bf5c:	f043 0320 	orr.w	r3, r3, #32
 801bf60:	b29a      	uxth	r2, r3
 801bf62:	687b      	ldr	r3, [r7, #4]
 801bf64:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801bf66:	2300      	movs	r3, #0
 801bf68:	e004      	b.n	801bf74 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801bf6a:	2101      	movs	r1, #1
 801bf6c:	6878      	ldr	r0, [r7, #4]
 801bf6e:	f000 f80b 	bl	801bf88 <tcp_enqueue_flags>
 801bf72:	4603      	mov	r3, r0
}
 801bf74:	4618      	mov	r0, r3
 801bf76:	3714      	adds	r7, #20
 801bf78:	46bd      	mov	sp, r7
 801bf7a:	bd90      	pop	{r4, r7, pc}
 801bf7c:	080282f8 	.word	0x080282f8
 801bf80:	08028700 	.word	0x08028700
 801bf84:	0802834c 	.word	0x0802834c

0801bf88 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801bf88:	b580      	push	{r7, lr}
 801bf8a:	b08a      	sub	sp, #40	; 0x28
 801bf8c:	af02      	add	r7, sp, #8
 801bf8e:	6078      	str	r0, [r7, #4]
 801bf90:	460b      	mov	r3, r1
 801bf92:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801bf94:	2300      	movs	r3, #0
 801bf96:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801bf98:	2300      	movs	r3, #0
 801bf9a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801bf9c:	78fb      	ldrb	r3, [r7, #3]
 801bf9e:	f003 0303 	and.w	r3, r3, #3
 801bfa2:	2b00      	cmp	r3, #0
 801bfa4:	d106      	bne.n	801bfb4 <tcp_enqueue_flags+0x2c>
 801bfa6:	4b67      	ldr	r3, [pc, #412]	; (801c144 <tcp_enqueue_flags+0x1bc>)
 801bfa8:	f240 4211 	movw	r2, #1041	; 0x411
 801bfac:	4966      	ldr	r1, [pc, #408]	; (801c148 <tcp_enqueue_flags+0x1c0>)
 801bfae:	4867      	ldr	r0, [pc, #412]	; (801c14c <tcp_enqueue_flags+0x1c4>)
 801bfb0:	f003 ffd8 	bl	801ff64 <printf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801bfb4:	687b      	ldr	r3, [r7, #4]
 801bfb6:	2b00      	cmp	r3, #0
 801bfb8:	d106      	bne.n	801bfc8 <tcp_enqueue_flags+0x40>
 801bfba:	4b62      	ldr	r3, [pc, #392]	; (801c144 <tcp_enqueue_flags+0x1bc>)
 801bfbc:	f240 4213 	movw	r2, #1043	; 0x413
 801bfc0:	4963      	ldr	r1, [pc, #396]	; (801c150 <tcp_enqueue_flags+0x1c8>)
 801bfc2:	4862      	ldr	r0, [pc, #392]	; (801c14c <tcp_enqueue_flags+0x1c4>)
 801bfc4:	f003 ffce 	bl	801ff64 <printf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801bfc8:	78fb      	ldrb	r3, [r7, #3]
 801bfca:	f003 0302 	and.w	r3, r3, #2
 801bfce:	2b00      	cmp	r3, #0
 801bfd0:	d001      	beq.n	801bfd6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801bfd2:	2301      	movs	r3, #1
 801bfd4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801bfd6:	7ffb      	ldrb	r3, [r7, #31]
 801bfd8:	009b      	lsls	r3, r3, #2
 801bfda:	b2db      	uxtb	r3, r3
 801bfdc:	f003 0304 	and.w	r3, r3, #4
 801bfe0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801bfe2:	7dfb      	ldrb	r3, [r7, #23]
 801bfe4:	b29b      	uxth	r3, r3
 801bfe6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801bfea:	4619      	mov	r1, r3
 801bfec:	2036      	movs	r0, #54	; 0x36
 801bfee:	f7fa f9ed 	bl	80163cc <pbuf_alloc>
 801bff2:	6138      	str	r0, [r7, #16]
 801bff4:	693b      	ldr	r3, [r7, #16]
 801bff6:	2b00      	cmp	r3, #0
 801bff8:	d109      	bne.n	801c00e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801bffa:	687b      	ldr	r3, [r7, #4]
 801bffc:	8b5b      	ldrh	r3, [r3, #26]
 801bffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c002:	b29a      	uxth	r2, r3
 801c004:	687b      	ldr	r3, [r7, #4]
 801c006:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801c008:	f04f 33ff 	mov.w	r3, #4294967295
 801c00c:	e095      	b.n	801c13a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801c00e:	693b      	ldr	r3, [r7, #16]
 801c010:	895a      	ldrh	r2, [r3, #10]
 801c012:	7dfb      	ldrb	r3, [r7, #23]
 801c014:	b29b      	uxth	r3, r3
 801c016:	429a      	cmp	r2, r3
 801c018:	d206      	bcs.n	801c028 <tcp_enqueue_flags+0xa0>
 801c01a:	4b4a      	ldr	r3, [pc, #296]	; (801c144 <tcp_enqueue_flags+0x1bc>)
 801c01c:	f240 4239 	movw	r2, #1081	; 0x439
 801c020:	494c      	ldr	r1, [pc, #304]	; (801c154 <tcp_enqueue_flags+0x1cc>)
 801c022:	484a      	ldr	r0, [pc, #296]	; (801c14c <tcp_enqueue_flags+0x1c4>)
 801c024:	f003 ff9e 	bl	801ff64 <printf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801c028:	687b      	ldr	r3, [r7, #4]
 801c02a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801c02c:	78fa      	ldrb	r2, [r7, #3]
 801c02e:	7ffb      	ldrb	r3, [r7, #31]
 801c030:	9300      	str	r3, [sp, #0]
 801c032:	460b      	mov	r3, r1
 801c034:	6939      	ldr	r1, [r7, #16]
 801c036:	6878      	ldr	r0, [r7, #4]
 801c038:	f7ff f918 	bl	801b26c <tcp_create_segment>
 801c03c:	60f8      	str	r0, [r7, #12]
 801c03e:	68fb      	ldr	r3, [r7, #12]
 801c040:	2b00      	cmp	r3, #0
 801c042:	d109      	bne.n	801c058 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c044:	687b      	ldr	r3, [r7, #4]
 801c046:	8b5b      	ldrh	r3, [r3, #26]
 801c048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c04c:	b29a      	uxth	r2, r3
 801c04e:	687b      	ldr	r3, [r7, #4]
 801c050:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801c052:	f04f 33ff 	mov.w	r3, #4294967295
 801c056:	e070      	b.n	801c13a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801c058:	68fb      	ldr	r3, [r7, #12]
 801c05a:	68db      	ldr	r3, [r3, #12]
 801c05c:	f003 0303 	and.w	r3, r3, #3
 801c060:	2b00      	cmp	r3, #0
 801c062:	d006      	beq.n	801c072 <tcp_enqueue_flags+0xea>
 801c064:	4b37      	ldr	r3, [pc, #220]	; (801c144 <tcp_enqueue_flags+0x1bc>)
 801c066:	f240 4242 	movw	r2, #1090	; 0x442
 801c06a:	493b      	ldr	r1, [pc, #236]	; (801c158 <tcp_enqueue_flags+0x1d0>)
 801c06c:	4837      	ldr	r0, [pc, #220]	; (801c14c <tcp_enqueue_flags+0x1c4>)
 801c06e:	f003 ff79 	bl	801ff64 <printf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801c072:	68fb      	ldr	r3, [r7, #12]
 801c074:	891b      	ldrh	r3, [r3, #8]
 801c076:	2b00      	cmp	r3, #0
 801c078:	d006      	beq.n	801c088 <tcp_enqueue_flags+0x100>
 801c07a:	4b32      	ldr	r3, [pc, #200]	; (801c144 <tcp_enqueue_flags+0x1bc>)
 801c07c:	f240 4243 	movw	r2, #1091	; 0x443
 801c080:	4936      	ldr	r1, [pc, #216]	; (801c15c <tcp_enqueue_flags+0x1d4>)
 801c082:	4832      	ldr	r0, [pc, #200]	; (801c14c <tcp_enqueue_flags+0x1c4>)
 801c084:	f003 ff6e 	bl	801ff64 <printf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801c088:	687b      	ldr	r3, [r7, #4]
 801c08a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c08c:	2b00      	cmp	r3, #0
 801c08e:	d103      	bne.n	801c098 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801c090:	687b      	ldr	r3, [r7, #4]
 801c092:	68fa      	ldr	r2, [r7, #12]
 801c094:	66da      	str	r2, [r3, #108]	; 0x6c
 801c096:	e00d      	b.n	801c0b4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801c098:	687b      	ldr	r3, [r7, #4]
 801c09a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c09c:	61bb      	str	r3, [r7, #24]
 801c09e:	e002      	b.n	801c0a6 <tcp_enqueue_flags+0x11e>
 801c0a0:	69bb      	ldr	r3, [r7, #24]
 801c0a2:	681b      	ldr	r3, [r3, #0]
 801c0a4:	61bb      	str	r3, [r7, #24]
 801c0a6:	69bb      	ldr	r3, [r7, #24]
 801c0a8:	681b      	ldr	r3, [r3, #0]
 801c0aa:	2b00      	cmp	r3, #0
 801c0ac:	d1f8      	bne.n	801c0a0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801c0ae:	69bb      	ldr	r3, [r7, #24]
 801c0b0:	68fa      	ldr	r2, [r7, #12]
 801c0b2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801c0b4:	687b      	ldr	r3, [r7, #4]
 801c0b6:	2200      	movs	r2, #0
 801c0b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801c0bc:	78fb      	ldrb	r3, [r7, #3]
 801c0be:	f003 0302 	and.w	r3, r3, #2
 801c0c2:	2b00      	cmp	r3, #0
 801c0c4:	d104      	bne.n	801c0d0 <tcp_enqueue_flags+0x148>
 801c0c6:	78fb      	ldrb	r3, [r7, #3]
 801c0c8:	f003 0301 	and.w	r3, r3, #1
 801c0cc:	2b00      	cmp	r3, #0
 801c0ce:	d004      	beq.n	801c0da <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801c0d0:	687b      	ldr	r3, [r7, #4]
 801c0d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c0d4:	1c5a      	adds	r2, r3, #1
 801c0d6:	687b      	ldr	r3, [r7, #4]
 801c0d8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801c0da:	78fb      	ldrb	r3, [r7, #3]
 801c0dc:	f003 0301 	and.w	r3, r3, #1
 801c0e0:	2b00      	cmp	r3, #0
 801c0e2:	d006      	beq.n	801c0f2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801c0e4:	687b      	ldr	r3, [r7, #4]
 801c0e6:	8b5b      	ldrh	r3, [r3, #26]
 801c0e8:	f043 0320 	orr.w	r3, r3, #32
 801c0ec:	b29a      	uxth	r2, r3
 801c0ee:	687b      	ldr	r3, [r7, #4]
 801c0f0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801c0f2:	68fb      	ldr	r3, [r7, #12]
 801c0f4:	685b      	ldr	r3, [r3, #4]
 801c0f6:	4618      	mov	r0, r3
 801c0f8:	f7fa fcda 	bl	8016ab0 <pbuf_clen>
 801c0fc:	4603      	mov	r3, r0
 801c0fe:	461a      	mov	r2, r3
 801c100:	687b      	ldr	r3, [r7, #4]
 801c102:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c106:	4413      	add	r3, r2
 801c108:	b29a      	uxth	r2, r3
 801c10a:	687b      	ldr	r3, [r7, #4]
 801c10c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801c110:	687b      	ldr	r3, [r7, #4]
 801c112:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c116:	2b00      	cmp	r3, #0
 801c118:	d00e      	beq.n	801c138 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801c11a:	687b      	ldr	r3, [r7, #4]
 801c11c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c11e:	2b00      	cmp	r3, #0
 801c120:	d10a      	bne.n	801c138 <tcp_enqueue_flags+0x1b0>
 801c122:	687b      	ldr	r3, [r7, #4]
 801c124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c126:	2b00      	cmp	r3, #0
 801c128:	d106      	bne.n	801c138 <tcp_enqueue_flags+0x1b0>
 801c12a:	4b06      	ldr	r3, [pc, #24]	; (801c144 <tcp_enqueue_flags+0x1bc>)
 801c12c:	f240 4265 	movw	r2, #1125	; 0x465
 801c130:	490b      	ldr	r1, [pc, #44]	; (801c160 <tcp_enqueue_flags+0x1d8>)
 801c132:	4806      	ldr	r0, [pc, #24]	; (801c14c <tcp_enqueue_flags+0x1c4>)
 801c134:	f003 ff16 	bl	801ff64 <printf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801c138:	2300      	movs	r3, #0
}
 801c13a:	4618      	mov	r0, r3
 801c13c:	3720      	adds	r7, #32
 801c13e:	46bd      	mov	sp, r7
 801c140:	bd80      	pop	{r7, pc}
 801c142:	bf00      	nop
 801c144:	080282f8 	.word	0x080282f8
 801c148:	0802871c 	.word	0x0802871c
 801c14c:	0802834c 	.word	0x0802834c
 801c150:	08028774 	.word	0x08028774
 801c154:	08028794 	.word	0x08028794
 801c158:	080287d0 	.word	0x080287d0
 801c15c:	080287e8 	.word	0x080287e8
 801c160:	08028814 	.word	0x08028814

0801c164 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801c164:	b5b0      	push	{r4, r5, r7, lr}
 801c166:	b08a      	sub	sp, #40	; 0x28
 801c168:	af00      	add	r7, sp, #0
 801c16a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801c16c:	687b      	ldr	r3, [r7, #4]
 801c16e:	2b00      	cmp	r3, #0
 801c170:	d106      	bne.n	801c180 <tcp_output+0x1c>
 801c172:	4b8a      	ldr	r3, [pc, #552]	; (801c39c <tcp_output+0x238>)
 801c174:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801c178:	4989      	ldr	r1, [pc, #548]	; (801c3a0 <tcp_output+0x23c>)
 801c17a:	488a      	ldr	r0, [pc, #552]	; (801c3a4 <tcp_output+0x240>)
 801c17c:	f003 fef2 	bl	801ff64 <printf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801c180:	687b      	ldr	r3, [r7, #4]
 801c182:	7d1b      	ldrb	r3, [r3, #20]
 801c184:	2b01      	cmp	r3, #1
 801c186:	d106      	bne.n	801c196 <tcp_output+0x32>
 801c188:	4b84      	ldr	r3, [pc, #528]	; (801c39c <tcp_output+0x238>)
 801c18a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801c18e:	4986      	ldr	r1, [pc, #536]	; (801c3a8 <tcp_output+0x244>)
 801c190:	4884      	ldr	r0, [pc, #528]	; (801c3a4 <tcp_output+0x240>)
 801c192:	f003 fee7 	bl	801ff64 <printf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801c196:	4b85      	ldr	r3, [pc, #532]	; (801c3ac <tcp_output+0x248>)
 801c198:	681b      	ldr	r3, [r3, #0]
 801c19a:	687a      	ldr	r2, [r7, #4]
 801c19c:	429a      	cmp	r2, r3
 801c19e:	d101      	bne.n	801c1a4 <tcp_output+0x40>
    return ERR_OK;
 801c1a0:	2300      	movs	r3, #0
 801c1a2:	e1ce      	b.n	801c542 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801c1a4:	687b      	ldr	r3, [r7, #4]
 801c1a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c1aa:	687b      	ldr	r3, [r7, #4]
 801c1ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c1b0:	4293      	cmp	r3, r2
 801c1b2:	bf28      	it	cs
 801c1b4:	4613      	movcs	r3, r2
 801c1b6:	b29b      	uxth	r3, r3
 801c1b8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801c1ba:	687b      	ldr	r3, [r7, #4]
 801c1bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c1be:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801c1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1c2:	2b00      	cmp	r3, #0
 801c1c4:	d10b      	bne.n	801c1de <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801c1c6:	687b      	ldr	r3, [r7, #4]
 801c1c8:	8b5b      	ldrh	r3, [r3, #26]
 801c1ca:	f003 0302 	and.w	r3, r3, #2
 801c1ce:	2b00      	cmp	r3, #0
 801c1d0:	f000 81aa 	beq.w	801c528 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801c1d4:	6878      	ldr	r0, [r7, #4]
 801c1d6:	f000 fdcb 	bl	801cd70 <tcp_send_empty_ack>
 801c1da:	4603      	mov	r3, r0
 801c1dc:	e1b1      	b.n	801c542 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801c1de:	6879      	ldr	r1, [r7, #4]
 801c1e0:	687b      	ldr	r3, [r7, #4]
 801c1e2:	3304      	adds	r3, #4
 801c1e4:	461a      	mov	r2, r3
 801c1e6:	6878      	ldr	r0, [r7, #4]
 801c1e8:	f7ff f824 	bl	801b234 <tcp_route>
 801c1ec:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801c1ee:	697b      	ldr	r3, [r7, #20]
 801c1f0:	2b00      	cmp	r3, #0
 801c1f2:	d102      	bne.n	801c1fa <tcp_output+0x96>
    return ERR_RTE;
 801c1f4:	f06f 0303 	mvn.w	r3, #3
 801c1f8:	e1a3      	b.n	801c542 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801c1fa:	687b      	ldr	r3, [r7, #4]
 801c1fc:	2b00      	cmp	r3, #0
 801c1fe:	d003      	beq.n	801c208 <tcp_output+0xa4>
 801c200:	687b      	ldr	r3, [r7, #4]
 801c202:	681b      	ldr	r3, [r3, #0]
 801c204:	2b00      	cmp	r3, #0
 801c206:	d111      	bne.n	801c22c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801c208:	697b      	ldr	r3, [r7, #20]
 801c20a:	2b00      	cmp	r3, #0
 801c20c:	d002      	beq.n	801c214 <tcp_output+0xb0>
 801c20e:	697b      	ldr	r3, [r7, #20]
 801c210:	3304      	adds	r3, #4
 801c212:	e000      	b.n	801c216 <tcp_output+0xb2>
 801c214:	2300      	movs	r3, #0
 801c216:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801c218:	693b      	ldr	r3, [r7, #16]
 801c21a:	2b00      	cmp	r3, #0
 801c21c:	d102      	bne.n	801c224 <tcp_output+0xc0>
      return ERR_RTE;
 801c21e:	f06f 0303 	mvn.w	r3, #3
 801c222:	e18e      	b.n	801c542 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801c224:	693b      	ldr	r3, [r7, #16]
 801c226:	681a      	ldr	r2, [r3, #0]
 801c228:	687b      	ldr	r3, [r7, #4]
 801c22a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801c22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c22e:	68db      	ldr	r3, [r3, #12]
 801c230:	685b      	ldr	r3, [r3, #4]
 801c232:	4618      	mov	r0, r3
 801c234:	f7f8 ffd3 	bl	80151de <lwip_htonl>
 801c238:	4602      	mov	r2, r0
 801c23a:	687b      	ldr	r3, [r7, #4]
 801c23c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c23e:	1ad3      	subs	r3, r2, r3
 801c240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c242:	8912      	ldrh	r2, [r2, #8]
 801c244:	4413      	add	r3, r2
 801c246:	69ba      	ldr	r2, [r7, #24]
 801c248:	429a      	cmp	r2, r3
 801c24a:	d227      	bcs.n	801c29c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801c24c:	687b      	ldr	r3, [r7, #4]
 801c24e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c252:	461a      	mov	r2, r3
 801c254:	69bb      	ldr	r3, [r7, #24]
 801c256:	4293      	cmp	r3, r2
 801c258:	d114      	bne.n	801c284 <tcp_output+0x120>
 801c25a:	687b      	ldr	r3, [r7, #4]
 801c25c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c25e:	2b00      	cmp	r3, #0
 801c260:	d110      	bne.n	801c284 <tcp_output+0x120>
 801c262:	687b      	ldr	r3, [r7, #4]
 801c264:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801c268:	2b00      	cmp	r3, #0
 801c26a:	d10b      	bne.n	801c284 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801c26c:	687b      	ldr	r3, [r7, #4]
 801c26e:	2200      	movs	r2, #0
 801c270:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801c274:	687b      	ldr	r3, [r7, #4]
 801c276:	2201      	movs	r2, #1
 801c278:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801c27c:	687b      	ldr	r3, [r7, #4]
 801c27e:	2200      	movs	r2, #0
 801c280:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801c284:	687b      	ldr	r3, [r7, #4]
 801c286:	8b5b      	ldrh	r3, [r3, #26]
 801c288:	f003 0302 	and.w	r3, r3, #2
 801c28c:	2b00      	cmp	r3, #0
 801c28e:	f000 814d 	beq.w	801c52c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801c292:	6878      	ldr	r0, [r7, #4]
 801c294:	f000 fd6c 	bl	801cd70 <tcp_send_empty_ack>
 801c298:	4603      	mov	r3, r0
 801c29a:	e152      	b.n	801c542 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801c29c:	687b      	ldr	r3, [r7, #4]
 801c29e:	2200      	movs	r2, #0
 801c2a0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801c2a4:	687b      	ldr	r3, [r7, #4]
 801c2a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c2a8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801c2aa:	6a3b      	ldr	r3, [r7, #32]
 801c2ac:	2b00      	cmp	r3, #0
 801c2ae:	f000 811c 	beq.w	801c4ea <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801c2b2:	e002      	b.n	801c2ba <tcp_output+0x156>
 801c2b4:	6a3b      	ldr	r3, [r7, #32]
 801c2b6:	681b      	ldr	r3, [r3, #0]
 801c2b8:	623b      	str	r3, [r7, #32]
 801c2ba:	6a3b      	ldr	r3, [r7, #32]
 801c2bc:	681b      	ldr	r3, [r3, #0]
 801c2be:	2b00      	cmp	r3, #0
 801c2c0:	d1f8      	bne.n	801c2b4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801c2c2:	e112      	b.n	801c4ea <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801c2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2c6:	68db      	ldr	r3, [r3, #12]
 801c2c8:	899b      	ldrh	r3, [r3, #12]
 801c2ca:	b29b      	uxth	r3, r3
 801c2cc:	4618      	mov	r0, r3
 801c2ce:	f7f8 ff71 	bl	80151b4 <lwip_htons>
 801c2d2:	4603      	mov	r3, r0
 801c2d4:	b2db      	uxtb	r3, r3
 801c2d6:	f003 0304 	and.w	r3, r3, #4
 801c2da:	2b00      	cmp	r3, #0
 801c2dc:	d006      	beq.n	801c2ec <tcp_output+0x188>
 801c2de:	4b2f      	ldr	r3, [pc, #188]	; (801c39c <tcp_output+0x238>)
 801c2e0:	f240 5236 	movw	r2, #1334	; 0x536
 801c2e4:	4932      	ldr	r1, [pc, #200]	; (801c3b0 <tcp_output+0x24c>)
 801c2e6:	482f      	ldr	r0, [pc, #188]	; (801c3a4 <tcp_output+0x240>)
 801c2e8:	f003 fe3c 	bl	801ff64 <printf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801c2ec:	687b      	ldr	r3, [r7, #4]
 801c2ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c2f0:	2b00      	cmp	r3, #0
 801c2f2:	d01f      	beq.n	801c334 <tcp_output+0x1d0>
 801c2f4:	687b      	ldr	r3, [r7, #4]
 801c2f6:	8b5b      	ldrh	r3, [r3, #26]
 801c2f8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801c2fc:	2b00      	cmp	r3, #0
 801c2fe:	d119      	bne.n	801c334 <tcp_output+0x1d0>
 801c300:	687b      	ldr	r3, [r7, #4]
 801c302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c304:	2b00      	cmp	r3, #0
 801c306:	d00b      	beq.n	801c320 <tcp_output+0x1bc>
 801c308:	687b      	ldr	r3, [r7, #4]
 801c30a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c30c:	681b      	ldr	r3, [r3, #0]
 801c30e:	2b00      	cmp	r3, #0
 801c310:	d110      	bne.n	801c334 <tcp_output+0x1d0>
 801c312:	687b      	ldr	r3, [r7, #4]
 801c314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c316:	891a      	ldrh	r2, [r3, #8]
 801c318:	687b      	ldr	r3, [r7, #4]
 801c31a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c31c:	429a      	cmp	r2, r3
 801c31e:	d209      	bcs.n	801c334 <tcp_output+0x1d0>
 801c320:	687b      	ldr	r3, [r7, #4]
 801c322:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801c326:	2b00      	cmp	r3, #0
 801c328:	d004      	beq.n	801c334 <tcp_output+0x1d0>
 801c32a:	687b      	ldr	r3, [r7, #4]
 801c32c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c330:	2b08      	cmp	r3, #8
 801c332:	d901      	bls.n	801c338 <tcp_output+0x1d4>
 801c334:	2301      	movs	r3, #1
 801c336:	e000      	b.n	801c33a <tcp_output+0x1d6>
 801c338:	2300      	movs	r3, #0
 801c33a:	2b00      	cmp	r3, #0
 801c33c:	d106      	bne.n	801c34c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801c33e:	687b      	ldr	r3, [r7, #4]
 801c340:	8b5b      	ldrh	r3, [r3, #26]
 801c342:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801c346:	2b00      	cmp	r3, #0
 801c348:	f000 80e4 	beq.w	801c514 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801c34c:	687b      	ldr	r3, [r7, #4]
 801c34e:	7d1b      	ldrb	r3, [r3, #20]
 801c350:	2b02      	cmp	r3, #2
 801c352:	d00d      	beq.n	801c370 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801c354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c356:	68db      	ldr	r3, [r3, #12]
 801c358:	899b      	ldrh	r3, [r3, #12]
 801c35a:	b29c      	uxth	r4, r3
 801c35c:	2010      	movs	r0, #16
 801c35e:	f7f8 ff29 	bl	80151b4 <lwip_htons>
 801c362:	4603      	mov	r3, r0
 801c364:	461a      	mov	r2, r3
 801c366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c368:	68db      	ldr	r3, [r3, #12]
 801c36a:	4322      	orrs	r2, r4
 801c36c:	b292      	uxth	r2, r2
 801c36e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801c370:	697a      	ldr	r2, [r7, #20]
 801c372:	6879      	ldr	r1, [r7, #4]
 801c374:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c376:	f000 f909 	bl	801c58c <tcp_output_segment>
 801c37a:	4603      	mov	r3, r0
 801c37c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801c37e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c382:	2b00      	cmp	r3, #0
 801c384:	d016      	beq.n	801c3b4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c386:	687b      	ldr	r3, [r7, #4]
 801c388:	8b5b      	ldrh	r3, [r3, #26]
 801c38a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c38e:	b29a      	uxth	r2, r3
 801c390:	687b      	ldr	r3, [r7, #4]
 801c392:	835a      	strh	r2, [r3, #26]
      return err;
 801c394:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c398:	e0d3      	b.n	801c542 <tcp_output+0x3de>
 801c39a:	bf00      	nop
 801c39c:	080282f8 	.word	0x080282f8
 801c3a0:	0802883c 	.word	0x0802883c
 801c3a4:	0802834c 	.word	0x0802834c
 801c3a8:	08028854 	.word	0x08028854
 801c3ac:	200188e8 	.word	0x200188e8
 801c3b0:	0802887c 	.word	0x0802887c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801c3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3b6:	681a      	ldr	r2, [r3, #0]
 801c3b8:	687b      	ldr	r3, [r7, #4]
 801c3ba:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801c3bc:	687b      	ldr	r3, [r7, #4]
 801c3be:	7d1b      	ldrb	r3, [r3, #20]
 801c3c0:	2b02      	cmp	r3, #2
 801c3c2:	d006      	beq.n	801c3d2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c3c4:	687b      	ldr	r3, [r7, #4]
 801c3c6:	8b5b      	ldrh	r3, [r3, #26]
 801c3c8:	f023 0303 	bic.w	r3, r3, #3
 801c3cc:	b29a      	uxth	r2, r3
 801c3ce:	687b      	ldr	r3, [r7, #4]
 801c3d0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801c3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3d4:	68db      	ldr	r3, [r3, #12]
 801c3d6:	685b      	ldr	r3, [r3, #4]
 801c3d8:	4618      	mov	r0, r3
 801c3da:	f7f8 ff00 	bl	80151de <lwip_htonl>
 801c3de:	4604      	mov	r4, r0
 801c3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3e2:	891b      	ldrh	r3, [r3, #8]
 801c3e4:	461d      	mov	r5, r3
 801c3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3e8:	68db      	ldr	r3, [r3, #12]
 801c3ea:	899b      	ldrh	r3, [r3, #12]
 801c3ec:	b29b      	uxth	r3, r3
 801c3ee:	4618      	mov	r0, r3
 801c3f0:	f7f8 fee0 	bl	80151b4 <lwip_htons>
 801c3f4:	4603      	mov	r3, r0
 801c3f6:	b2db      	uxtb	r3, r3
 801c3f8:	f003 0303 	and.w	r3, r3, #3
 801c3fc:	2b00      	cmp	r3, #0
 801c3fe:	d001      	beq.n	801c404 <tcp_output+0x2a0>
 801c400:	2301      	movs	r3, #1
 801c402:	e000      	b.n	801c406 <tcp_output+0x2a2>
 801c404:	2300      	movs	r3, #0
 801c406:	442b      	add	r3, r5
 801c408:	4423      	add	r3, r4
 801c40a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801c40c:	687b      	ldr	r3, [r7, #4]
 801c40e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c410:	68bb      	ldr	r3, [r7, #8]
 801c412:	1ad3      	subs	r3, r2, r3
 801c414:	2b00      	cmp	r3, #0
 801c416:	da02      	bge.n	801c41e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801c418:	687b      	ldr	r3, [r7, #4]
 801c41a:	68ba      	ldr	r2, [r7, #8]
 801c41c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801c41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c420:	891b      	ldrh	r3, [r3, #8]
 801c422:	461c      	mov	r4, r3
 801c424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c426:	68db      	ldr	r3, [r3, #12]
 801c428:	899b      	ldrh	r3, [r3, #12]
 801c42a:	b29b      	uxth	r3, r3
 801c42c:	4618      	mov	r0, r3
 801c42e:	f7f8 fec1 	bl	80151b4 <lwip_htons>
 801c432:	4603      	mov	r3, r0
 801c434:	b2db      	uxtb	r3, r3
 801c436:	f003 0303 	and.w	r3, r3, #3
 801c43a:	2b00      	cmp	r3, #0
 801c43c:	d001      	beq.n	801c442 <tcp_output+0x2de>
 801c43e:	2301      	movs	r3, #1
 801c440:	e000      	b.n	801c444 <tcp_output+0x2e0>
 801c442:	2300      	movs	r3, #0
 801c444:	4423      	add	r3, r4
 801c446:	2b00      	cmp	r3, #0
 801c448:	d049      	beq.n	801c4de <tcp_output+0x37a>
      seg->next = NULL;
 801c44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c44c:	2200      	movs	r2, #0
 801c44e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801c450:	687b      	ldr	r3, [r7, #4]
 801c452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c454:	2b00      	cmp	r3, #0
 801c456:	d105      	bne.n	801c464 <tcp_output+0x300>
        pcb->unacked = seg;
 801c458:	687b      	ldr	r3, [r7, #4]
 801c45a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c45c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801c45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c460:	623b      	str	r3, [r7, #32]
 801c462:	e03f      	b.n	801c4e4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801c464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c466:	68db      	ldr	r3, [r3, #12]
 801c468:	685b      	ldr	r3, [r3, #4]
 801c46a:	4618      	mov	r0, r3
 801c46c:	f7f8 feb7 	bl	80151de <lwip_htonl>
 801c470:	4604      	mov	r4, r0
 801c472:	6a3b      	ldr	r3, [r7, #32]
 801c474:	68db      	ldr	r3, [r3, #12]
 801c476:	685b      	ldr	r3, [r3, #4]
 801c478:	4618      	mov	r0, r3
 801c47a:	f7f8 feb0 	bl	80151de <lwip_htonl>
 801c47e:	4603      	mov	r3, r0
 801c480:	1ae3      	subs	r3, r4, r3
 801c482:	2b00      	cmp	r3, #0
 801c484:	da24      	bge.n	801c4d0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801c486:	687b      	ldr	r3, [r7, #4]
 801c488:	3370      	adds	r3, #112	; 0x70
 801c48a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801c48c:	e002      	b.n	801c494 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801c48e:	69fb      	ldr	r3, [r7, #28]
 801c490:	681b      	ldr	r3, [r3, #0]
 801c492:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801c494:	69fb      	ldr	r3, [r7, #28]
 801c496:	681b      	ldr	r3, [r3, #0]
 801c498:	2b00      	cmp	r3, #0
 801c49a:	d011      	beq.n	801c4c0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801c49c:	69fb      	ldr	r3, [r7, #28]
 801c49e:	681b      	ldr	r3, [r3, #0]
 801c4a0:	68db      	ldr	r3, [r3, #12]
 801c4a2:	685b      	ldr	r3, [r3, #4]
 801c4a4:	4618      	mov	r0, r3
 801c4a6:	f7f8 fe9a 	bl	80151de <lwip_htonl>
 801c4aa:	4604      	mov	r4, r0
 801c4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4ae:	68db      	ldr	r3, [r3, #12]
 801c4b0:	685b      	ldr	r3, [r3, #4]
 801c4b2:	4618      	mov	r0, r3
 801c4b4:	f7f8 fe93 	bl	80151de <lwip_htonl>
 801c4b8:	4603      	mov	r3, r0
 801c4ba:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801c4bc:	2b00      	cmp	r3, #0
 801c4be:	dbe6      	blt.n	801c48e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801c4c0:	69fb      	ldr	r3, [r7, #28]
 801c4c2:	681a      	ldr	r2, [r3, #0]
 801c4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4c6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801c4c8:	69fb      	ldr	r3, [r7, #28]
 801c4ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c4cc:	601a      	str	r2, [r3, #0]
 801c4ce:	e009      	b.n	801c4e4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801c4d0:	6a3b      	ldr	r3, [r7, #32]
 801c4d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c4d4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801c4d6:	6a3b      	ldr	r3, [r7, #32]
 801c4d8:	681b      	ldr	r3, [r3, #0]
 801c4da:	623b      	str	r3, [r7, #32]
 801c4dc:	e002      	b.n	801c4e4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801c4de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c4e0:	f7fb ff31 	bl	8018346 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801c4e4:	687b      	ldr	r3, [r7, #4]
 801c4e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c4e8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801c4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4ec:	2b00      	cmp	r3, #0
 801c4ee:	d012      	beq.n	801c516 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801c4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4f2:	68db      	ldr	r3, [r3, #12]
 801c4f4:	685b      	ldr	r3, [r3, #4]
 801c4f6:	4618      	mov	r0, r3
 801c4f8:	f7f8 fe71 	bl	80151de <lwip_htonl>
 801c4fc:	4602      	mov	r2, r0
 801c4fe:	687b      	ldr	r3, [r7, #4]
 801c500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c502:	1ad3      	subs	r3, r2, r3
 801c504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c506:	8912      	ldrh	r2, [r2, #8]
 801c508:	4413      	add	r3, r2
  while (seg != NULL &&
 801c50a:	69ba      	ldr	r2, [r7, #24]
 801c50c:	429a      	cmp	r2, r3
 801c50e:	f4bf aed9 	bcs.w	801c2c4 <tcp_output+0x160>
 801c512:	e000      	b.n	801c516 <tcp_output+0x3b2>
      break;
 801c514:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801c516:	687b      	ldr	r3, [r7, #4]
 801c518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c51a:	2b00      	cmp	r3, #0
 801c51c:	d108      	bne.n	801c530 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801c51e:	687b      	ldr	r3, [r7, #4]
 801c520:	2200      	movs	r2, #0
 801c522:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801c526:	e004      	b.n	801c532 <tcp_output+0x3ce>
    goto output_done;
 801c528:	bf00      	nop
 801c52a:	e002      	b.n	801c532 <tcp_output+0x3ce>
    goto output_done;
 801c52c:	bf00      	nop
 801c52e:	e000      	b.n	801c532 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801c530:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801c532:	687b      	ldr	r3, [r7, #4]
 801c534:	8b5b      	ldrh	r3, [r3, #26]
 801c536:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801c53a:	b29a      	uxth	r2, r3
 801c53c:	687b      	ldr	r3, [r7, #4]
 801c53e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801c540:	2300      	movs	r3, #0
}
 801c542:	4618      	mov	r0, r3
 801c544:	3728      	adds	r7, #40	; 0x28
 801c546:	46bd      	mov	sp, r7
 801c548:	bdb0      	pop	{r4, r5, r7, pc}
 801c54a:	bf00      	nop

0801c54c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801c54c:	b580      	push	{r7, lr}
 801c54e:	b082      	sub	sp, #8
 801c550:	af00      	add	r7, sp, #0
 801c552:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801c554:	687b      	ldr	r3, [r7, #4]
 801c556:	2b00      	cmp	r3, #0
 801c558:	d106      	bne.n	801c568 <tcp_output_segment_busy+0x1c>
 801c55a:	4b09      	ldr	r3, [pc, #36]	; (801c580 <tcp_output_segment_busy+0x34>)
 801c55c:	f240 529a 	movw	r2, #1434	; 0x59a
 801c560:	4908      	ldr	r1, [pc, #32]	; (801c584 <tcp_output_segment_busy+0x38>)
 801c562:	4809      	ldr	r0, [pc, #36]	; (801c588 <tcp_output_segment_busy+0x3c>)
 801c564:	f003 fcfe 	bl	801ff64 <printf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801c568:	687b      	ldr	r3, [r7, #4]
 801c56a:	685b      	ldr	r3, [r3, #4]
 801c56c:	7b9b      	ldrb	r3, [r3, #14]
 801c56e:	2b01      	cmp	r3, #1
 801c570:	d001      	beq.n	801c576 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801c572:	2301      	movs	r3, #1
 801c574:	e000      	b.n	801c578 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801c576:	2300      	movs	r3, #0
}
 801c578:	4618      	mov	r0, r3
 801c57a:	3708      	adds	r7, #8
 801c57c:	46bd      	mov	sp, r7
 801c57e:	bd80      	pop	{r7, pc}
 801c580:	080282f8 	.word	0x080282f8
 801c584:	08028894 	.word	0x08028894
 801c588:	0802834c 	.word	0x0802834c

0801c58c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801c58c:	b5b0      	push	{r4, r5, r7, lr}
 801c58e:	b08c      	sub	sp, #48	; 0x30
 801c590:	af04      	add	r7, sp, #16
 801c592:	60f8      	str	r0, [r7, #12]
 801c594:	60b9      	str	r1, [r7, #8]
 801c596:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801c598:	68fb      	ldr	r3, [r7, #12]
 801c59a:	2b00      	cmp	r3, #0
 801c59c:	d106      	bne.n	801c5ac <tcp_output_segment+0x20>
 801c59e:	4b63      	ldr	r3, [pc, #396]	; (801c72c <tcp_output_segment+0x1a0>)
 801c5a0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801c5a4:	4962      	ldr	r1, [pc, #392]	; (801c730 <tcp_output_segment+0x1a4>)
 801c5a6:	4863      	ldr	r0, [pc, #396]	; (801c734 <tcp_output_segment+0x1a8>)
 801c5a8:	f003 fcdc 	bl	801ff64 <printf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801c5ac:	68bb      	ldr	r3, [r7, #8]
 801c5ae:	2b00      	cmp	r3, #0
 801c5b0:	d106      	bne.n	801c5c0 <tcp_output_segment+0x34>
 801c5b2:	4b5e      	ldr	r3, [pc, #376]	; (801c72c <tcp_output_segment+0x1a0>)
 801c5b4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801c5b8:	495f      	ldr	r1, [pc, #380]	; (801c738 <tcp_output_segment+0x1ac>)
 801c5ba:	485e      	ldr	r0, [pc, #376]	; (801c734 <tcp_output_segment+0x1a8>)
 801c5bc:	f003 fcd2 	bl	801ff64 <printf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801c5c0:	687b      	ldr	r3, [r7, #4]
 801c5c2:	2b00      	cmp	r3, #0
 801c5c4:	d106      	bne.n	801c5d4 <tcp_output_segment+0x48>
 801c5c6:	4b59      	ldr	r3, [pc, #356]	; (801c72c <tcp_output_segment+0x1a0>)
 801c5c8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801c5cc:	495b      	ldr	r1, [pc, #364]	; (801c73c <tcp_output_segment+0x1b0>)
 801c5ce:	4859      	ldr	r0, [pc, #356]	; (801c734 <tcp_output_segment+0x1a8>)
 801c5d0:	f003 fcc8 	bl	801ff64 <printf>

  if (tcp_output_segment_busy(seg)) {
 801c5d4:	68f8      	ldr	r0, [r7, #12]
 801c5d6:	f7ff ffb9 	bl	801c54c <tcp_output_segment_busy>
 801c5da:	4603      	mov	r3, r0
 801c5dc:	2b00      	cmp	r3, #0
 801c5de:	d001      	beq.n	801c5e4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801c5e0:	2300      	movs	r3, #0
 801c5e2:	e09f      	b.n	801c724 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801c5e4:	68bb      	ldr	r3, [r7, #8]
 801c5e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c5e8:	68fb      	ldr	r3, [r7, #12]
 801c5ea:	68dc      	ldr	r4, [r3, #12]
 801c5ec:	4610      	mov	r0, r2
 801c5ee:	f7f8 fdf6 	bl	80151de <lwip_htonl>
 801c5f2:	4603      	mov	r3, r0
 801c5f4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801c5f6:	68bb      	ldr	r3, [r7, #8]
 801c5f8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801c5fa:	68fb      	ldr	r3, [r7, #12]
 801c5fc:	68dc      	ldr	r4, [r3, #12]
 801c5fe:	4610      	mov	r0, r2
 801c600:	f7f8 fdd8 	bl	80151b4 <lwip_htons>
 801c604:	4603      	mov	r3, r0
 801c606:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801c608:	68bb      	ldr	r3, [r7, #8]
 801c60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c60c:	68ba      	ldr	r2, [r7, #8]
 801c60e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801c610:	441a      	add	r2, r3
 801c612:	68bb      	ldr	r3, [r7, #8]
 801c614:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801c616:	68fb      	ldr	r3, [r7, #12]
 801c618:	68db      	ldr	r3, [r3, #12]
 801c61a:	3314      	adds	r3, #20
 801c61c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801c61e:	68fb      	ldr	r3, [r7, #12]
 801c620:	7a9b      	ldrb	r3, [r3, #10]
 801c622:	f003 0301 	and.w	r3, r3, #1
 801c626:	2b00      	cmp	r3, #0
 801c628:	d015      	beq.n	801c656 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801c62a:	68bb      	ldr	r3, [r7, #8]
 801c62c:	3304      	adds	r3, #4
 801c62e:	461a      	mov	r2, r3
 801c630:	6879      	ldr	r1, [r7, #4]
 801c632:	f44f 7006 	mov.w	r0, #536	; 0x218
 801c636:	f7fc fa33 	bl	8018aa0 <tcp_eff_send_mss_netif>
 801c63a:	4603      	mov	r3, r0
 801c63c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801c63e:	8b7b      	ldrh	r3, [r7, #26]
 801c640:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801c644:	4618      	mov	r0, r3
 801c646:	f7f8 fdca 	bl	80151de <lwip_htonl>
 801c64a:	4602      	mov	r2, r0
 801c64c:	69fb      	ldr	r3, [r7, #28]
 801c64e:	601a      	str	r2, [r3, #0]
    opts += 1;
 801c650:	69fb      	ldr	r3, [r7, #28]
 801c652:	3304      	adds	r3, #4
 801c654:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801c656:	68bb      	ldr	r3, [r7, #8]
 801c658:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801c65c:	2b00      	cmp	r3, #0
 801c65e:	da02      	bge.n	801c666 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801c660:	68bb      	ldr	r3, [r7, #8]
 801c662:	2200      	movs	r2, #0
 801c664:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801c666:	68bb      	ldr	r3, [r7, #8]
 801c668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c66a:	2b00      	cmp	r3, #0
 801c66c:	d10c      	bne.n	801c688 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801c66e:	4b34      	ldr	r3, [pc, #208]	; (801c740 <tcp_output_segment+0x1b4>)
 801c670:	681a      	ldr	r2, [r3, #0]
 801c672:	68bb      	ldr	r3, [r7, #8]
 801c674:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801c676:	68fb      	ldr	r3, [r7, #12]
 801c678:	68db      	ldr	r3, [r3, #12]
 801c67a:	685b      	ldr	r3, [r3, #4]
 801c67c:	4618      	mov	r0, r3
 801c67e:	f7f8 fdae 	bl	80151de <lwip_htonl>
 801c682:	4602      	mov	r2, r0
 801c684:	68bb      	ldr	r3, [r7, #8]
 801c686:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801c688:	68fb      	ldr	r3, [r7, #12]
 801c68a:	68da      	ldr	r2, [r3, #12]
 801c68c:	68fb      	ldr	r3, [r7, #12]
 801c68e:	685b      	ldr	r3, [r3, #4]
 801c690:	685b      	ldr	r3, [r3, #4]
 801c692:	1ad3      	subs	r3, r2, r3
 801c694:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801c696:	68fb      	ldr	r3, [r7, #12]
 801c698:	685b      	ldr	r3, [r3, #4]
 801c69a:	8959      	ldrh	r1, [r3, #10]
 801c69c:	68fb      	ldr	r3, [r7, #12]
 801c69e:	685b      	ldr	r3, [r3, #4]
 801c6a0:	8b3a      	ldrh	r2, [r7, #24]
 801c6a2:	1a8a      	subs	r2, r1, r2
 801c6a4:	b292      	uxth	r2, r2
 801c6a6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801c6a8:	68fb      	ldr	r3, [r7, #12]
 801c6aa:	685b      	ldr	r3, [r3, #4]
 801c6ac:	8919      	ldrh	r1, [r3, #8]
 801c6ae:	68fb      	ldr	r3, [r7, #12]
 801c6b0:	685b      	ldr	r3, [r3, #4]
 801c6b2:	8b3a      	ldrh	r2, [r7, #24]
 801c6b4:	1a8a      	subs	r2, r1, r2
 801c6b6:	b292      	uxth	r2, r2
 801c6b8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801c6ba:	68fb      	ldr	r3, [r7, #12]
 801c6bc:	685b      	ldr	r3, [r3, #4]
 801c6be:	68fa      	ldr	r2, [r7, #12]
 801c6c0:	68d2      	ldr	r2, [r2, #12]
 801c6c2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801c6c4:	68fb      	ldr	r3, [r7, #12]
 801c6c6:	68db      	ldr	r3, [r3, #12]
 801c6c8:	2200      	movs	r2, #0
 801c6ca:	741a      	strb	r2, [r3, #16]
 801c6cc:	2200      	movs	r2, #0
 801c6ce:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801c6d0:	68fb      	ldr	r3, [r7, #12]
 801c6d2:	68db      	ldr	r3, [r3, #12]
 801c6d4:	f103 0214 	add.w	r2, r3, #20
 801c6d8:	68fb      	ldr	r3, [r7, #12]
 801c6da:	7a9b      	ldrb	r3, [r3, #10]
 801c6dc:	009b      	lsls	r3, r3, #2
 801c6de:	f003 0304 	and.w	r3, r3, #4
 801c6e2:	4413      	add	r3, r2
 801c6e4:	69fa      	ldr	r2, [r7, #28]
 801c6e6:	429a      	cmp	r2, r3
 801c6e8:	d006      	beq.n	801c6f8 <tcp_output_segment+0x16c>
 801c6ea:	4b10      	ldr	r3, [pc, #64]	; (801c72c <tcp_output_segment+0x1a0>)
 801c6ec:	f240 621c 	movw	r2, #1564	; 0x61c
 801c6f0:	4914      	ldr	r1, [pc, #80]	; (801c744 <tcp_output_segment+0x1b8>)
 801c6f2:	4810      	ldr	r0, [pc, #64]	; (801c734 <tcp_output_segment+0x1a8>)
 801c6f4:	f003 fc36 	bl	801ff64 <printf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801c6f8:	68fb      	ldr	r3, [r7, #12]
 801c6fa:	6858      	ldr	r0, [r3, #4]
 801c6fc:	68b9      	ldr	r1, [r7, #8]
 801c6fe:	68bb      	ldr	r3, [r7, #8]
 801c700:	1d1c      	adds	r4, r3, #4
 801c702:	68bb      	ldr	r3, [r7, #8]
 801c704:	7add      	ldrb	r5, [r3, #11]
 801c706:	68bb      	ldr	r3, [r7, #8]
 801c708:	7a9b      	ldrb	r3, [r3, #10]
 801c70a:	687a      	ldr	r2, [r7, #4]
 801c70c:	9202      	str	r2, [sp, #8]
 801c70e:	2206      	movs	r2, #6
 801c710:	9201      	str	r2, [sp, #4]
 801c712:	9300      	str	r3, [sp, #0]
 801c714:	462b      	mov	r3, r5
 801c716:	4622      	mov	r2, r4
 801c718:	f002 faa0 	bl	801ec5c <ip4_output_if>
 801c71c:	4603      	mov	r3, r0
 801c71e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801c720:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801c724:	4618      	mov	r0, r3
 801c726:	3720      	adds	r7, #32
 801c728:	46bd      	mov	sp, r7
 801c72a:	bdb0      	pop	{r4, r5, r7, pc}
 801c72c:	080282f8 	.word	0x080282f8
 801c730:	080288bc 	.word	0x080288bc
 801c734:	0802834c 	.word	0x0802834c
 801c738:	080288dc 	.word	0x080288dc
 801c73c:	080288fc 	.word	0x080288fc
 801c740:	2001889c 	.word	0x2001889c
 801c744:	08028920 	.word	0x08028920

0801c748 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801c748:	b5b0      	push	{r4, r5, r7, lr}
 801c74a:	b084      	sub	sp, #16
 801c74c:	af00      	add	r7, sp, #0
 801c74e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801c750:	687b      	ldr	r3, [r7, #4]
 801c752:	2b00      	cmp	r3, #0
 801c754:	d106      	bne.n	801c764 <tcp_rexmit_rto_prepare+0x1c>
 801c756:	4b31      	ldr	r3, [pc, #196]	; (801c81c <tcp_rexmit_rto_prepare+0xd4>)
 801c758:	f240 6263 	movw	r2, #1635	; 0x663
 801c75c:	4930      	ldr	r1, [pc, #192]	; (801c820 <tcp_rexmit_rto_prepare+0xd8>)
 801c75e:	4831      	ldr	r0, [pc, #196]	; (801c824 <tcp_rexmit_rto_prepare+0xdc>)
 801c760:	f003 fc00 	bl	801ff64 <printf>

  if (pcb->unacked == NULL) {
 801c764:	687b      	ldr	r3, [r7, #4]
 801c766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c768:	2b00      	cmp	r3, #0
 801c76a:	d102      	bne.n	801c772 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801c76c:	f06f 0305 	mvn.w	r3, #5
 801c770:	e050      	b.n	801c814 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801c772:	687b      	ldr	r3, [r7, #4]
 801c774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c776:	60fb      	str	r3, [r7, #12]
 801c778:	e00b      	b.n	801c792 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801c77a:	68f8      	ldr	r0, [r7, #12]
 801c77c:	f7ff fee6 	bl	801c54c <tcp_output_segment_busy>
 801c780:	4603      	mov	r3, r0
 801c782:	2b00      	cmp	r3, #0
 801c784:	d002      	beq.n	801c78c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801c786:	f06f 0305 	mvn.w	r3, #5
 801c78a:	e043      	b.n	801c814 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801c78c:	68fb      	ldr	r3, [r7, #12]
 801c78e:	681b      	ldr	r3, [r3, #0]
 801c790:	60fb      	str	r3, [r7, #12]
 801c792:	68fb      	ldr	r3, [r7, #12]
 801c794:	681b      	ldr	r3, [r3, #0]
 801c796:	2b00      	cmp	r3, #0
 801c798:	d1ef      	bne.n	801c77a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801c79a:	68f8      	ldr	r0, [r7, #12]
 801c79c:	f7ff fed6 	bl	801c54c <tcp_output_segment_busy>
 801c7a0:	4603      	mov	r3, r0
 801c7a2:	2b00      	cmp	r3, #0
 801c7a4:	d002      	beq.n	801c7ac <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801c7a6:	f06f 0305 	mvn.w	r3, #5
 801c7aa:	e033      	b.n	801c814 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801c7ac:	687b      	ldr	r3, [r7, #4]
 801c7ae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801c7b0:	68fb      	ldr	r3, [r7, #12]
 801c7b2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801c7b4:	687b      	ldr	r3, [r7, #4]
 801c7b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801c7b8:	687b      	ldr	r3, [r7, #4]
 801c7ba:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801c7bc:	687b      	ldr	r3, [r7, #4]
 801c7be:	2200      	movs	r2, #0
 801c7c0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801c7c2:	687b      	ldr	r3, [r7, #4]
 801c7c4:	8b5b      	ldrh	r3, [r3, #26]
 801c7c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801c7ca:	b29a      	uxth	r2, r3
 801c7cc:	687b      	ldr	r3, [r7, #4]
 801c7ce:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801c7d0:	68fb      	ldr	r3, [r7, #12]
 801c7d2:	68db      	ldr	r3, [r3, #12]
 801c7d4:	685b      	ldr	r3, [r3, #4]
 801c7d6:	4618      	mov	r0, r3
 801c7d8:	f7f8 fd01 	bl	80151de <lwip_htonl>
 801c7dc:	4604      	mov	r4, r0
 801c7de:	68fb      	ldr	r3, [r7, #12]
 801c7e0:	891b      	ldrh	r3, [r3, #8]
 801c7e2:	461d      	mov	r5, r3
 801c7e4:	68fb      	ldr	r3, [r7, #12]
 801c7e6:	68db      	ldr	r3, [r3, #12]
 801c7e8:	899b      	ldrh	r3, [r3, #12]
 801c7ea:	b29b      	uxth	r3, r3
 801c7ec:	4618      	mov	r0, r3
 801c7ee:	f7f8 fce1 	bl	80151b4 <lwip_htons>
 801c7f2:	4603      	mov	r3, r0
 801c7f4:	b2db      	uxtb	r3, r3
 801c7f6:	f003 0303 	and.w	r3, r3, #3
 801c7fa:	2b00      	cmp	r3, #0
 801c7fc:	d001      	beq.n	801c802 <tcp_rexmit_rto_prepare+0xba>
 801c7fe:	2301      	movs	r3, #1
 801c800:	e000      	b.n	801c804 <tcp_rexmit_rto_prepare+0xbc>
 801c802:	2300      	movs	r3, #0
 801c804:	442b      	add	r3, r5
 801c806:	18e2      	adds	r2, r4, r3
 801c808:	687b      	ldr	r3, [r7, #4]
 801c80a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801c80c:	687b      	ldr	r3, [r7, #4]
 801c80e:	2200      	movs	r2, #0
 801c810:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801c812:	2300      	movs	r3, #0
}
 801c814:	4618      	mov	r0, r3
 801c816:	3710      	adds	r7, #16
 801c818:	46bd      	mov	sp, r7
 801c81a:	bdb0      	pop	{r4, r5, r7, pc}
 801c81c:	080282f8 	.word	0x080282f8
 801c820:	08028934 	.word	0x08028934
 801c824:	0802834c 	.word	0x0802834c

0801c828 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801c828:	b580      	push	{r7, lr}
 801c82a:	b082      	sub	sp, #8
 801c82c:	af00      	add	r7, sp, #0
 801c82e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801c830:	687b      	ldr	r3, [r7, #4]
 801c832:	2b00      	cmp	r3, #0
 801c834:	d106      	bne.n	801c844 <tcp_rexmit_rto_commit+0x1c>
 801c836:	4b0d      	ldr	r3, [pc, #52]	; (801c86c <tcp_rexmit_rto_commit+0x44>)
 801c838:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801c83c:	490c      	ldr	r1, [pc, #48]	; (801c870 <tcp_rexmit_rto_commit+0x48>)
 801c83e:	480d      	ldr	r0, [pc, #52]	; (801c874 <tcp_rexmit_rto_commit+0x4c>)
 801c840:	f003 fb90 	bl	801ff64 <printf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801c844:	687b      	ldr	r3, [r7, #4]
 801c846:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801c84a:	2bff      	cmp	r3, #255	; 0xff
 801c84c:	d007      	beq.n	801c85e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801c84e:	687b      	ldr	r3, [r7, #4]
 801c850:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801c854:	3301      	adds	r3, #1
 801c856:	b2da      	uxtb	r2, r3
 801c858:	687b      	ldr	r3, [r7, #4]
 801c85a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801c85e:	6878      	ldr	r0, [r7, #4]
 801c860:	f7ff fc80 	bl	801c164 <tcp_output>
}
 801c864:	bf00      	nop
 801c866:	3708      	adds	r7, #8
 801c868:	46bd      	mov	sp, r7
 801c86a:	bd80      	pop	{r7, pc}
 801c86c:	080282f8 	.word	0x080282f8
 801c870:	08028958 	.word	0x08028958
 801c874:	0802834c 	.word	0x0802834c

0801c878 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801c878:	b580      	push	{r7, lr}
 801c87a:	b082      	sub	sp, #8
 801c87c:	af00      	add	r7, sp, #0
 801c87e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801c880:	687b      	ldr	r3, [r7, #4]
 801c882:	2b00      	cmp	r3, #0
 801c884:	d106      	bne.n	801c894 <tcp_rexmit_rto+0x1c>
 801c886:	4b0a      	ldr	r3, [pc, #40]	; (801c8b0 <tcp_rexmit_rto+0x38>)
 801c888:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801c88c:	4909      	ldr	r1, [pc, #36]	; (801c8b4 <tcp_rexmit_rto+0x3c>)
 801c88e:	480a      	ldr	r0, [pc, #40]	; (801c8b8 <tcp_rexmit_rto+0x40>)
 801c890:	f003 fb68 	bl	801ff64 <printf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801c894:	6878      	ldr	r0, [r7, #4]
 801c896:	f7ff ff57 	bl	801c748 <tcp_rexmit_rto_prepare>
 801c89a:	4603      	mov	r3, r0
 801c89c:	2b00      	cmp	r3, #0
 801c89e:	d102      	bne.n	801c8a6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801c8a0:	6878      	ldr	r0, [r7, #4]
 801c8a2:	f7ff ffc1 	bl	801c828 <tcp_rexmit_rto_commit>
  }
}
 801c8a6:	bf00      	nop
 801c8a8:	3708      	adds	r7, #8
 801c8aa:	46bd      	mov	sp, r7
 801c8ac:	bd80      	pop	{r7, pc}
 801c8ae:	bf00      	nop
 801c8b0:	080282f8 	.word	0x080282f8
 801c8b4:	0802897c 	.word	0x0802897c
 801c8b8:	0802834c 	.word	0x0802834c

0801c8bc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801c8bc:	b590      	push	{r4, r7, lr}
 801c8be:	b085      	sub	sp, #20
 801c8c0:	af00      	add	r7, sp, #0
 801c8c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801c8c4:	687b      	ldr	r3, [r7, #4]
 801c8c6:	2b00      	cmp	r3, #0
 801c8c8:	d106      	bne.n	801c8d8 <tcp_rexmit+0x1c>
 801c8ca:	4b2f      	ldr	r3, [pc, #188]	; (801c988 <tcp_rexmit+0xcc>)
 801c8cc:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801c8d0:	492e      	ldr	r1, [pc, #184]	; (801c98c <tcp_rexmit+0xd0>)
 801c8d2:	482f      	ldr	r0, [pc, #188]	; (801c990 <tcp_rexmit+0xd4>)
 801c8d4:	f003 fb46 	bl	801ff64 <printf>

  if (pcb->unacked == NULL) {
 801c8d8:	687b      	ldr	r3, [r7, #4]
 801c8da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c8dc:	2b00      	cmp	r3, #0
 801c8de:	d102      	bne.n	801c8e6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801c8e0:	f06f 0305 	mvn.w	r3, #5
 801c8e4:	e04c      	b.n	801c980 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801c8e6:	687b      	ldr	r3, [r7, #4]
 801c8e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c8ea:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801c8ec:	68b8      	ldr	r0, [r7, #8]
 801c8ee:	f7ff fe2d 	bl	801c54c <tcp_output_segment_busy>
 801c8f2:	4603      	mov	r3, r0
 801c8f4:	2b00      	cmp	r3, #0
 801c8f6:	d002      	beq.n	801c8fe <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801c8f8:	f06f 0305 	mvn.w	r3, #5
 801c8fc:	e040      	b.n	801c980 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801c8fe:	68bb      	ldr	r3, [r7, #8]
 801c900:	681a      	ldr	r2, [r3, #0]
 801c902:	687b      	ldr	r3, [r7, #4]
 801c904:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801c906:	687b      	ldr	r3, [r7, #4]
 801c908:	336c      	adds	r3, #108	; 0x6c
 801c90a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801c90c:	e002      	b.n	801c914 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801c90e:	68fb      	ldr	r3, [r7, #12]
 801c910:	681b      	ldr	r3, [r3, #0]
 801c912:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801c914:	68fb      	ldr	r3, [r7, #12]
 801c916:	681b      	ldr	r3, [r3, #0]
 801c918:	2b00      	cmp	r3, #0
 801c91a:	d011      	beq.n	801c940 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801c91c:	68fb      	ldr	r3, [r7, #12]
 801c91e:	681b      	ldr	r3, [r3, #0]
 801c920:	68db      	ldr	r3, [r3, #12]
 801c922:	685b      	ldr	r3, [r3, #4]
 801c924:	4618      	mov	r0, r3
 801c926:	f7f8 fc5a 	bl	80151de <lwip_htonl>
 801c92a:	4604      	mov	r4, r0
 801c92c:	68bb      	ldr	r3, [r7, #8]
 801c92e:	68db      	ldr	r3, [r3, #12]
 801c930:	685b      	ldr	r3, [r3, #4]
 801c932:	4618      	mov	r0, r3
 801c934:	f7f8 fc53 	bl	80151de <lwip_htonl>
 801c938:	4603      	mov	r3, r0
 801c93a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801c93c:	2b00      	cmp	r3, #0
 801c93e:	dbe6      	blt.n	801c90e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801c940:	68fb      	ldr	r3, [r7, #12]
 801c942:	681a      	ldr	r2, [r3, #0]
 801c944:	68bb      	ldr	r3, [r7, #8]
 801c946:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801c948:	68fb      	ldr	r3, [r7, #12]
 801c94a:	68ba      	ldr	r2, [r7, #8]
 801c94c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801c94e:	68bb      	ldr	r3, [r7, #8]
 801c950:	681b      	ldr	r3, [r3, #0]
 801c952:	2b00      	cmp	r3, #0
 801c954:	d103      	bne.n	801c95e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801c956:	687b      	ldr	r3, [r7, #4]
 801c958:	2200      	movs	r2, #0
 801c95a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801c95e:	687b      	ldr	r3, [r7, #4]
 801c960:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801c964:	2bff      	cmp	r3, #255	; 0xff
 801c966:	d007      	beq.n	801c978 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801c968:	687b      	ldr	r3, [r7, #4]
 801c96a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801c96e:	3301      	adds	r3, #1
 801c970:	b2da      	uxtb	r2, r3
 801c972:	687b      	ldr	r3, [r7, #4]
 801c974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801c978:	687b      	ldr	r3, [r7, #4]
 801c97a:	2200      	movs	r2, #0
 801c97c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801c97e:	2300      	movs	r3, #0
}
 801c980:	4618      	mov	r0, r3
 801c982:	3714      	adds	r7, #20
 801c984:	46bd      	mov	sp, r7
 801c986:	bd90      	pop	{r4, r7, pc}
 801c988:	080282f8 	.word	0x080282f8
 801c98c:	08028998 	.word	0x08028998
 801c990:	0802834c 	.word	0x0802834c

0801c994 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801c994:	b580      	push	{r7, lr}
 801c996:	b082      	sub	sp, #8
 801c998:	af00      	add	r7, sp, #0
 801c99a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801c99c:	687b      	ldr	r3, [r7, #4]
 801c99e:	2b00      	cmp	r3, #0
 801c9a0:	d106      	bne.n	801c9b0 <tcp_rexmit_fast+0x1c>
 801c9a2:	4b2a      	ldr	r3, [pc, #168]	; (801ca4c <tcp_rexmit_fast+0xb8>)
 801c9a4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801c9a8:	4929      	ldr	r1, [pc, #164]	; (801ca50 <tcp_rexmit_fast+0xbc>)
 801c9aa:	482a      	ldr	r0, [pc, #168]	; (801ca54 <tcp_rexmit_fast+0xc0>)
 801c9ac:	f003 fada 	bl	801ff64 <printf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801c9b0:	687b      	ldr	r3, [r7, #4]
 801c9b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c9b4:	2b00      	cmp	r3, #0
 801c9b6:	d044      	beq.n	801ca42 <tcp_rexmit_fast+0xae>
 801c9b8:	687b      	ldr	r3, [r7, #4]
 801c9ba:	8b5b      	ldrh	r3, [r3, #26]
 801c9bc:	f003 0304 	and.w	r3, r3, #4
 801c9c0:	2b00      	cmp	r3, #0
 801c9c2:	d13e      	bne.n	801ca42 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801c9c4:	6878      	ldr	r0, [r7, #4]
 801c9c6:	f7ff ff79 	bl	801c8bc <tcp_rexmit>
 801c9ca:	4603      	mov	r3, r0
 801c9cc:	2b00      	cmp	r3, #0
 801c9ce:	d138      	bne.n	801ca42 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801c9d0:	687b      	ldr	r3, [r7, #4]
 801c9d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801c9d6:	687b      	ldr	r3, [r7, #4]
 801c9d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801c9dc:	4293      	cmp	r3, r2
 801c9de:	bf28      	it	cs
 801c9e0:	4613      	movcs	r3, r2
 801c9e2:	b29b      	uxth	r3, r3
 801c9e4:	0fda      	lsrs	r2, r3, #31
 801c9e6:	4413      	add	r3, r2
 801c9e8:	105b      	asrs	r3, r3, #1
 801c9ea:	b29a      	uxth	r2, r3
 801c9ec:	687b      	ldr	r3, [r7, #4]
 801c9ee:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801c9f2:	687b      	ldr	r3, [r7, #4]
 801c9f4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801c9f8:	461a      	mov	r2, r3
 801c9fa:	687b      	ldr	r3, [r7, #4]
 801c9fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c9fe:	005b      	lsls	r3, r3, #1
 801ca00:	429a      	cmp	r2, r3
 801ca02:	d206      	bcs.n	801ca12 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801ca04:	687b      	ldr	r3, [r7, #4]
 801ca06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ca08:	005b      	lsls	r3, r3, #1
 801ca0a:	b29a      	uxth	r2, r3
 801ca0c:	687b      	ldr	r3, [r7, #4]
 801ca0e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801ca12:	687b      	ldr	r3, [r7, #4]
 801ca14:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801ca18:	687b      	ldr	r3, [r7, #4]
 801ca1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ca1c:	4619      	mov	r1, r3
 801ca1e:	0049      	lsls	r1, r1, #1
 801ca20:	440b      	add	r3, r1
 801ca22:	b29b      	uxth	r3, r3
 801ca24:	4413      	add	r3, r2
 801ca26:	b29a      	uxth	r2, r3
 801ca28:	687b      	ldr	r3, [r7, #4]
 801ca2a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801ca2e:	687b      	ldr	r3, [r7, #4]
 801ca30:	8b5b      	ldrh	r3, [r3, #26]
 801ca32:	f043 0304 	orr.w	r3, r3, #4
 801ca36:	b29a      	uxth	r2, r3
 801ca38:	687b      	ldr	r3, [r7, #4]
 801ca3a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801ca3c:	687b      	ldr	r3, [r7, #4]
 801ca3e:	2200      	movs	r2, #0
 801ca40:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801ca42:	bf00      	nop
 801ca44:	3708      	adds	r7, #8
 801ca46:	46bd      	mov	sp, r7
 801ca48:	bd80      	pop	{r7, pc}
 801ca4a:	bf00      	nop
 801ca4c:	080282f8 	.word	0x080282f8
 801ca50:	080289b0 	.word	0x080289b0
 801ca54:	0802834c 	.word	0x0802834c

0801ca58 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801ca58:	b580      	push	{r7, lr}
 801ca5a:	b086      	sub	sp, #24
 801ca5c:	af00      	add	r7, sp, #0
 801ca5e:	60f8      	str	r0, [r7, #12]
 801ca60:	607b      	str	r3, [r7, #4]
 801ca62:	460b      	mov	r3, r1
 801ca64:	817b      	strh	r3, [r7, #10]
 801ca66:	4613      	mov	r3, r2
 801ca68:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801ca6a:	897a      	ldrh	r2, [r7, #10]
 801ca6c:	893b      	ldrh	r3, [r7, #8]
 801ca6e:	4413      	add	r3, r2
 801ca70:	b29b      	uxth	r3, r3
 801ca72:	3314      	adds	r3, #20
 801ca74:	b29b      	uxth	r3, r3
 801ca76:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ca7a:	4619      	mov	r1, r3
 801ca7c:	2022      	movs	r0, #34	; 0x22
 801ca7e:	f7f9 fca5 	bl	80163cc <pbuf_alloc>
 801ca82:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801ca84:	697b      	ldr	r3, [r7, #20]
 801ca86:	2b00      	cmp	r3, #0
 801ca88:	d04d      	beq.n	801cb26 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801ca8a:	897b      	ldrh	r3, [r7, #10]
 801ca8c:	3313      	adds	r3, #19
 801ca8e:	697a      	ldr	r2, [r7, #20]
 801ca90:	8952      	ldrh	r2, [r2, #10]
 801ca92:	4293      	cmp	r3, r2
 801ca94:	db06      	blt.n	801caa4 <tcp_output_alloc_header_common+0x4c>
 801ca96:	4b26      	ldr	r3, [pc, #152]	; (801cb30 <tcp_output_alloc_header_common+0xd8>)
 801ca98:	f240 7223 	movw	r2, #1827	; 0x723
 801ca9c:	4925      	ldr	r1, [pc, #148]	; (801cb34 <tcp_output_alloc_header_common+0xdc>)
 801ca9e:	4826      	ldr	r0, [pc, #152]	; (801cb38 <tcp_output_alloc_header_common+0xe0>)
 801caa0:	f003 fa60 	bl	801ff64 <printf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801caa4:	697b      	ldr	r3, [r7, #20]
 801caa6:	685b      	ldr	r3, [r3, #4]
 801caa8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801caaa:	8c3b      	ldrh	r3, [r7, #32]
 801caac:	4618      	mov	r0, r3
 801caae:	f7f8 fb81 	bl	80151b4 <lwip_htons>
 801cab2:	4603      	mov	r3, r0
 801cab4:	461a      	mov	r2, r3
 801cab6:	693b      	ldr	r3, [r7, #16]
 801cab8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801caba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801cabc:	4618      	mov	r0, r3
 801cabe:	f7f8 fb79 	bl	80151b4 <lwip_htons>
 801cac2:	4603      	mov	r3, r0
 801cac4:	461a      	mov	r2, r3
 801cac6:	693b      	ldr	r3, [r7, #16]
 801cac8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801caca:	693b      	ldr	r3, [r7, #16]
 801cacc:	687a      	ldr	r2, [r7, #4]
 801cace:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801cad0:	68f8      	ldr	r0, [r7, #12]
 801cad2:	f7f8 fb84 	bl	80151de <lwip_htonl>
 801cad6:	4602      	mov	r2, r0
 801cad8:	693b      	ldr	r3, [r7, #16]
 801cada:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801cadc:	897b      	ldrh	r3, [r7, #10]
 801cade:	089b      	lsrs	r3, r3, #2
 801cae0:	b29b      	uxth	r3, r3
 801cae2:	3305      	adds	r3, #5
 801cae4:	b29b      	uxth	r3, r3
 801cae6:	031b      	lsls	r3, r3, #12
 801cae8:	b29a      	uxth	r2, r3
 801caea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801caee:	b29b      	uxth	r3, r3
 801caf0:	4313      	orrs	r3, r2
 801caf2:	b29b      	uxth	r3, r3
 801caf4:	4618      	mov	r0, r3
 801caf6:	f7f8 fb5d 	bl	80151b4 <lwip_htons>
 801cafa:	4603      	mov	r3, r0
 801cafc:	461a      	mov	r2, r3
 801cafe:	693b      	ldr	r3, [r7, #16]
 801cb00:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801cb02:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801cb04:	4618      	mov	r0, r3
 801cb06:	f7f8 fb55 	bl	80151b4 <lwip_htons>
 801cb0a:	4603      	mov	r3, r0
 801cb0c:	461a      	mov	r2, r3
 801cb0e:	693b      	ldr	r3, [r7, #16]
 801cb10:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801cb12:	693b      	ldr	r3, [r7, #16]
 801cb14:	2200      	movs	r2, #0
 801cb16:	741a      	strb	r2, [r3, #16]
 801cb18:	2200      	movs	r2, #0
 801cb1a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801cb1c:	693b      	ldr	r3, [r7, #16]
 801cb1e:	2200      	movs	r2, #0
 801cb20:	749a      	strb	r2, [r3, #18]
 801cb22:	2200      	movs	r2, #0
 801cb24:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801cb26:	697b      	ldr	r3, [r7, #20]
}
 801cb28:	4618      	mov	r0, r3
 801cb2a:	3718      	adds	r7, #24
 801cb2c:	46bd      	mov	sp, r7
 801cb2e:	bd80      	pop	{r7, pc}
 801cb30:	080282f8 	.word	0x080282f8
 801cb34:	080289d0 	.word	0x080289d0
 801cb38:	0802834c 	.word	0x0802834c

0801cb3c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801cb3c:	b5b0      	push	{r4, r5, r7, lr}
 801cb3e:	b08a      	sub	sp, #40	; 0x28
 801cb40:	af04      	add	r7, sp, #16
 801cb42:	60f8      	str	r0, [r7, #12]
 801cb44:	607b      	str	r3, [r7, #4]
 801cb46:	460b      	mov	r3, r1
 801cb48:	817b      	strh	r3, [r7, #10]
 801cb4a:	4613      	mov	r3, r2
 801cb4c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801cb4e:	68fb      	ldr	r3, [r7, #12]
 801cb50:	2b00      	cmp	r3, #0
 801cb52:	d106      	bne.n	801cb62 <tcp_output_alloc_header+0x26>
 801cb54:	4b15      	ldr	r3, [pc, #84]	; (801cbac <tcp_output_alloc_header+0x70>)
 801cb56:	f240 7242 	movw	r2, #1858	; 0x742
 801cb5a:	4915      	ldr	r1, [pc, #84]	; (801cbb0 <tcp_output_alloc_header+0x74>)
 801cb5c:	4815      	ldr	r0, [pc, #84]	; (801cbb4 <tcp_output_alloc_header+0x78>)
 801cb5e:	f003 fa01 	bl	801ff64 <printf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801cb62:	68fb      	ldr	r3, [r7, #12]
 801cb64:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801cb66:	68fb      	ldr	r3, [r7, #12]
 801cb68:	8adb      	ldrh	r3, [r3, #22]
 801cb6a:	68fa      	ldr	r2, [r7, #12]
 801cb6c:	8b12      	ldrh	r2, [r2, #24]
 801cb6e:	68f9      	ldr	r1, [r7, #12]
 801cb70:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801cb72:	893d      	ldrh	r5, [r7, #8]
 801cb74:	897c      	ldrh	r4, [r7, #10]
 801cb76:	9103      	str	r1, [sp, #12]
 801cb78:	2110      	movs	r1, #16
 801cb7a:	9102      	str	r1, [sp, #8]
 801cb7c:	9201      	str	r2, [sp, #4]
 801cb7e:	9300      	str	r3, [sp, #0]
 801cb80:	687b      	ldr	r3, [r7, #4]
 801cb82:	462a      	mov	r2, r5
 801cb84:	4621      	mov	r1, r4
 801cb86:	f7ff ff67 	bl	801ca58 <tcp_output_alloc_header_common>
 801cb8a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801cb8c:	697b      	ldr	r3, [r7, #20]
 801cb8e:	2b00      	cmp	r3, #0
 801cb90:	d006      	beq.n	801cba0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801cb92:	68fb      	ldr	r3, [r7, #12]
 801cb94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cb96:	68fa      	ldr	r2, [r7, #12]
 801cb98:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801cb9a:	441a      	add	r2, r3
 801cb9c:	68fb      	ldr	r3, [r7, #12]
 801cb9e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801cba0:	697b      	ldr	r3, [r7, #20]
}
 801cba2:	4618      	mov	r0, r3
 801cba4:	3718      	adds	r7, #24
 801cba6:	46bd      	mov	sp, r7
 801cba8:	bdb0      	pop	{r4, r5, r7, pc}
 801cbaa:	bf00      	nop
 801cbac:	080282f8 	.word	0x080282f8
 801cbb0:	08028a00 	.word	0x08028a00
 801cbb4:	0802834c 	.word	0x0802834c

0801cbb8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801cbb8:	b580      	push	{r7, lr}
 801cbba:	b088      	sub	sp, #32
 801cbbc:	af00      	add	r7, sp, #0
 801cbbe:	60f8      	str	r0, [r7, #12]
 801cbc0:	60b9      	str	r1, [r7, #8]
 801cbc2:	4611      	mov	r1, r2
 801cbc4:	461a      	mov	r2, r3
 801cbc6:	460b      	mov	r3, r1
 801cbc8:	71fb      	strb	r3, [r7, #7]
 801cbca:	4613      	mov	r3, r2
 801cbcc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801cbce:	2300      	movs	r3, #0
 801cbd0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801cbd2:	68bb      	ldr	r3, [r7, #8]
 801cbd4:	2b00      	cmp	r3, #0
 801cbd6:	d106      	bne.n	801cbe6 <tcp_output_fill_options+0x2e>
 801cbd8:	4b13      	ldr	r3, [pc, #76]	; (801cc28 <tcp_output_fill_options+0x70>)
 801cbda:	f240 7256 	movw	r2, #1878	; 0x756
 801cbde:	4913      	ldr	r1, [pc, #76]	; (801cc2c <tcp_output_fill_options+0x74>)
 801cbe0:	4813      	ldr	r0, [pc, #76]	; (801cc30 <tcp_output_fill_options+0x78>)
 801cbe2:	f003 f9bf 	bl	801ff64 <printf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801cbe6:	68bb      	ldr	r3, [r7, #8]
 801cbe8:	685b      	ldr	r3, [r3, #4]
 801cbea:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801cbec:	69bb      	ldr	r3, [r7, #24]
 801cbee:	3314      	adds	r3, #20
 801cbf0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801cbf2:	69bb      	ldr	r3, [r7, #24]
 801cbf4:	f103 0214 	add.w	r2, r3, #20
 801cbf8:	8bfb      	ldrh	r3, [r7, #30]
 801cbfa:	009b      	lsls	r3, r3, #2
 801cbfc:	4619      	mov	r1, r3
 801cbfe:	79fb      	ldrb	r3, [r7, #7]
 801cc00:	009b      	lsls	r3, r3, #2
 801cc02:	f003 0304 	and.w	r3, r3, #4
 801cc06:	440b      	add	r3, r1
 801cc08:	4413      	add	r3, r2
 801cc0a:	697a      	ldr	r2, [r7, #20]
 801cc0c:	429a      	cmp	r2, r3
 801cc0e:	d006      	beq.n	801cc1e <tcp_output_fill_options+0x66>
 801cc10:	4b05      	ldr	r3, [pc, #20]	; (801cc28 <tcp_output_fill_options+0x70>)
 801cc12:	f240 7275 	movw	r2, #1909	; 0x775
 801cc16:	4907      	ldr	r1, [pc, #28]	; (801cc34 <tcp_output_fill_options+0x7c>)
 801cc18:	4805      	ldr	r0, [pc, #20]	; (801cc30 <tcp_output_fill_options+0x78>)
 801cc1a:	f003 f9a3 	bl	801ff64 <printf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801cc1e:	bf00      	nop
 801cc20:	3720      	adds	r7, #32
 801cc22:	46bd      	mov	sp, r7
 801cc24:	bd80      	pop	{r7, pc}
 801cc26:	bf00      	nop
 801cc28:	080282f8 	.word	0x080282f8
 801cc2c:	08028a28 	.word	0x08028a28
 801cc30:	0802834c 	.word	0x0802834c
 801cc34:	08028920 	.word	0x08028920

0801cc38 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801cc38:	b580      	push	{r7, lr}
 801cc3a:	b08a      	sub	sp, #40	; 0x28
 801cc3c:	af04      	add	r7, sp, #16
 801cc3e:	60f8      	str	r0, [r7, #12]
 801cc40:	60b9      	str	r1, [r7, #8]
 801cc42:	607a      	str	r2, [r7, #4]
 801cc44:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801cc46:	68bb      	ldr	r3, [r7, #8]
 801cc48:	2b00      	cmp	r3, #0
 801cc4a:	d106      	bne.n	801cc5a <tcp_output_control_segment+0x22>
 801cc4c:	4b1c      	ldr	r3, [pc, #112]	; (801ccc0 <tcp_output_control_segment+0x88>)
 801cc4e:	f240 7287 	movw	r2, #1927	; 0x787
 801cc52:	491c      	ldr	r1, [pc, #112]	; (801ccc4 <tcp_output_control_segment+0x8c>)
 801cc54:	481c      	ldr	r0, [pc, #112]	; (801ccc8 <tcp_output_control_segment+0x90>)
 801cc56:	f003 f985 	bl	801ff64 <printf>

  netif = tcp_route(pcb, src, dst);
 801cc5a:	683a      	ldr	r2, [r7, #0]
 801cc5c:	6879      	ldr	r1, [r7, #4]
 801cc5e:	68f8      	ldr	r0, [r7, #12]
 801cc60:	f7fe fae8 	bl	801b234 <tcp_route>
 801cc64:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801cc66:	693b      	ldr	r3, [r7, #16]
 801cc68:	2b00      	cmp	r3, #0
 801cc6a:	d102      	bne.n	801cc72 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801cc6c:	23fc      	movs	r3, #252	; 0xfc
 801cc6e:	75fb      	strb	r3, [r7, #23]
 801cc70:	e01c      	b.n	801ccac <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801cc72:	68fb      	ldr	r3, [r7, #12]
 801cc74:	2b00      	cmp	r3, #0
 801cc76:	d006      	beq.n	801cc86 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801cc78:	68fb      	ldr	r3, [r7, #12]
 801cc7a:	7adb      	ldrb	r3, [r3, #11]
 801cc7c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801cc7e:	68fb      	ldr	r3, [r7, #12]
 801cc80:	7a9b      	ldrb	r3, [r3, #10]
 801cc82:	757b      	strb	r3, [r7, #21]
 801cc84:	e003      	b.n	801cc8e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801cc86:	23ff      	movs	r3, #255	; 0xff
 801cc88:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801cc8a:	2300      	movs	r3, #0
 801cc8c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801cc8e:	7dba      	ldrb	r2, [r7, #22]
 801cc90:	693b      	ldr	r3, [r7, #16]
 801cc92:	9302      	str	r3, [sp, #8]
 801cc94:	2306      	movs	r3, #6
 801cc96:	9301      	str	r3, [sp, #4]
 801cc98:	7d7b      	ldrb	r3, [r7, #21]
 801cc9a:	9300      	str	r3, [sp, #0]
 801cc9c:	4613      	mov	r3, r2
 801cc9e:	683a      	ldr	r2, [r7, #0]
 801cca0:	6879      	ldr	r1, [r7, #4]
 801cca2:	68b8      	ldr	r0, [r7, #8]
 801cca4:	f001 ffda 	bl	801ec5c <ip4_output_if>
 801cca8:	4603      	mov	r3, r0
 801ccaa:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801ccac:	68b8      	ldr	r0, [r7, #8]
 801ccae:	f7f9 fe71 	bl	8016994 <pbuf_free>
  return err;
 801ccb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801ccb6:	4618      	mov	r0, r3
 801ccb8:	3718      	adds	r7, #24
 801ccba:	46bd      	mov	sp, r7
 801ccbc:	bd80      	pop	{r7, pc}
 801ccbe:	bf00      	nop
 801ccc0:	080282f8 	.word	0x080282f8
 801ccc4:	08028a50 	.word	0x08028a50
 801ccc8:	0802834c 	.word	0x0802834c

0801cccc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801cccc:	b590      	push	{r4, r7, lr}
 801ccce:	b08b      	sub	sp, #44	; 0x2c
 801ccd0:	af04      	add	r7, sp, #16
 801ccd2:	60f8      	str	r0, [r7, #12]
 801ccd4:	60b9      	str	r1, [r7, #8]
 801ccd6:	607a      	str	r2, [r7, #4]
 801ccd8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801ccda:	683b      	ldr	r3, [r7, #0]
 801ccdc:	2b00      	cmp	r3, #0
 801ccde:	d106      	bne.n	801ccee <tcp_rst+0x22>
 801cce0:	4b1f      	ldr	r3, [pc, #124]	; (801cd60 <tcp_rst+0x94>)
 801cce2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801cce6:	491f      	ldr	r1, [pc, #124]	; (801cd64 <tcp_rst+0x98>)
 801cce8:	481f      	ldr	r0, [pc, #124]	; (801cd68 <tcp_rst+0x9c>)
 801ccea:	f003 f93b 	bl	801ff64 <printf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801ccee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ccf0:	2b00      	cmp	r3, #0
 801ccf2:	d106      	bne.n	801cd02 <tcp_rst+0x36>
 801ccf4:	4b1a      	ldr	r3, [pc, #104]	; (801cd60 <tcp_rst+0x94>)
 801ccf6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801ccfa:	491c      	ldr	r1, [pc, #112]	; (801cd6c <tcp_rst+0xa0>)
 801ccfc:	481a      	ldr	r0, [pc, #104]	; (801cd68 <tcp_rst+0x9c>)
 801ccfe:	f003 f931 	bl	801ff64 <printf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801cd02:	2300      	movs	r3, #0
 801cd04:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801cd06:	f246 0308 	movw	r3, #24584	; 0x6008
 801cd0a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801cd0c:	7dfb      	ldrb	r3, [r7, #23]
 801cd0e:	b29c      	uxth	r4, r3
 801cd10:	68b8      	ldr	r0, [r7, #8]
 801cd12:	f7f8 fa64 	bl	80151de <lwip_htonl>
 801cd16:	4602      	mov	r2, r0
 801cd18:	8abb      	ldrh	r3, [r7, #20]
 801cd1a:	9303      	str	r3, [sp, #12]
 801cd1c:	2314      	movs	r3, #20
 801cd1e:	9302      	str	r3, [sp, #8]
 801cd20:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801cd22:	9301      	str	r3, [sp, #4]
 801cd24:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801cd26:	9300      	str	r3, [sp, #0]
 801cd28:	4613      	mov	r3, r2
 801cd2a:	2200      	movs	r2, #0
 801cd2c:	4621      	mov	r1, r4
 801cd2e:	6878      	ldr	r0, [r7, #4]
 801cd30:	f7ff fe92 	bl	801ca58 <tcp_output_alloc_header_common>
 801cd34:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801cd36:	693b      	ldr	r3, [r7, #16]
 801cd38:	2b00      	cmp	r3, #0
 801cd3a:	d00c      	beq.n	801cd56 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801cd3c:	7dfb      	ldrb	r3, [r7, #23]
 801cd3e:	2200      	movs	r2, #0
 801cd40:	6939      	ldr	r1, [r7, #16]
 801cd42:	68f8      	ldr	r0, [r7, #12]
 801cd44:	f7ff ff38 	bl	801cbb8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801cd48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd4a:	683a      	ldr	r2, [r7, #0]
 801cd4c:	6939      	ldr	r1, [r7, #16]
 801cd4e:	68f8      	ldr	r0, [r7, #12]
 801cd50:	f7ff ff72 	bl	801cc38 <tcp_output_control_segment>
 801cd54:	e000      	b.n	801cd58 <tcp_rst+0x8c>
    return;
 801cd56:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801cd58:	371c      	adds	r7, #28
 801cd5a:	46bd      	mov	sp, r7
 801cd5c:	bd90      	pop	{r4, r7, pc}
 801cd5e:	bf00      	nop
 801cd60:	080282f8 	.word	0x080282f8
 801cd64:	08028a7c 	.word	0x08028a7c
 801cd68:	0802834c 	.word	0x0802834c
 801cd6c:	08028a98 	.word	0x08028a98

0801cd70 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801cd70:	b590      	push	{r4, r7, lr}
 801cd72:	b087      	sub	sp, #28
 801cd74:	af00      	add	r7, sp, #0
 801cd76:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801cd78:	2300      	movs	r3, #0
 801cd7a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801cd7c:	2300      	movs	r3, #0
 801cd7e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801cd80:	687b      	ldr	r3, [r7, #4]
 801cd82:	2b00      	cmp	r3, #0
 801cd84:	d106      	bne.n	801cd94 <tcp_send_empty_ack+0x24>
 801cd86:	4b28      	ldr	r3, [pc, #160]	; (801ce28 <tcp_send_empty_ack+0xb8>)
 801cd88:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801cd8c:	4927      	ldr	r1, [pc, #156]	; (801ce2c <tcp_send_empty_ack+0xbc>)
 801cd8e:	4828      	ldr	r0, [pc, #160]	; (801ce30 <tcp_send_empty_ack+0xc0>)
 801cd90:	f003 f8e8 	bl	801ff64 <printf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801cd94:	7dfb      	ldrb	r3, [r7, #23]
 801cd96:	009b      	lsls	r3, r3, #2
 801cd98:	b2db      	uxtb	r3, r3
 801cd9a:	f003 0304 	and.w	r3, r3, #4
 801cd9e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801cda0:	7d7b      	ldrb	r3, [r7, #21]
 801cda2:	b29c      	uxth	r4, r3
 801cda4:	687b      	ldr	r3, [r7, #4]
 801cda6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cda8:	4618      	mov	r0, r3
 801cdaa:	f7f8 fa18 	bl	80151de <lwip_htonl>
 801cdae:	4603      	mov	r3, r0
 801cdb0:	2200      	movs	r2, #0
 801cdb2:	4621      	mov	r1, r4
 801cdb4:	6878      	ldr	r0, [r7, #4]
 801cdb6:	f7ff fec1 	bl	801cb3c <tcp_output_alloc_header>
 801cdba:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801cdbc:	693b      	ldr	r3, [r7, #16]
 801cdbe:	2b00      	cmp	r3, #0
 801cdc0:	d109      	bne.n	801cdd6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801cdc2:	687b      	ldr	r3, [r7, #4]
 801cdc4:	8b5b      	ldrh	r3, [r3, #26]
 801cdc6:	f043 0303 	orr.w	r3, r3, #3
 801cdca:	b29a      	uxth	r2, r3
 801cdcc:	687b      	ldr	r3, [r7, #4]
 801cdce:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801cdd0:	f06f 0301 	mvn.w	r3, #1
 801cdd4:	e023      	b.n	801ce1e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801cdd6:	7dbb      	ldrb	r3, [r7, #22]
 801cdd8:	7dfa      	ldrb	r2, [r7, #23]
 801cdda:	6939      	ldr	r1, [r7, #16]
 801cddc:	6878      	ldr	r0, [r7, #4]
 801cdde:	f7ff feeb 	bl	801cbb8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801cde2:	687a      	ldr	r2, [r7, #4]
 801cde4:	687b      	ldr	r3, [r7, #4]
 801cde6:	3304      	adds	r3, #4
 801cde8:	6939      	ldr	r1, [r7, #16]
 801cdea:	6878      	ldr	r0, [r7, #4]
 801cdec:	f7ff ff24 	bl	801cc38 <tcp_output_control_segment>
 801cdf0:	4603      	mov	r3, r0
 801cdf2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801cdf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cdf8:	2b00      	cmp	r3, #0
 801cdfa:	d007      	beq.n	801ce0c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801cdfc:	687b      	ldr	r3, [r7, #4]
 801cdfe:	8b5b      	ldrh	r3, [r3, #26]
 801ce00:	f043 0303 	orr.w	r3, r3, #3
 801ce04:	b29a      	uxth	r2, r3
 801ce06:	687b      	ldr	r3, [r7, #4]
 801ce08:	835a      	strh	r2, [r3, #26]
 801ce0a:	e006      	b.n	801ce1a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801ce0c:	687b      	ldr	r3, [r7, #4]
 801ce0e:	8b5b      	ldrh	r3, [r3, #26]
 801ce10:	f023 0303 	bic.w	r3, r3, #3
 801ce14:	b29a      	uxth	r2, r3
 801ce16:	687b      	ldr	r3, [r7, #4]
 801ce18:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801ce1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ce1e:	4618      	mov	r0, r3
 801ce20:	371c      	adds	r7, #28
 801ce22:	46bd      	mov	sp, r7
 801ce24:	bd90      	pop	{r4, r7, pc}
 801ce26:	bf00      	nop
 801ce28:	080282f8 	.word	0x080282f8
 801ce2c:	08028ab4 	.word	0x08028ab4
 801ce30:	0802834c 	.word	0x0802834c

0801ce34 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801ce34:	b590      	push	{r4, r7, lr}
 801ce36:	b087      	sub	sp, #28
 801ce38:	af00      	add	r7, sp, #0
 801ce3a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801ce3c:	2300      	movs	r3, #0
 801ce3e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801ce40:	687b      	ldr	r3, [r7, #4]
 801ce42:	2b00      	cmp	r3, #0
 801ce44:	d106      	bne.n	801ce54 <tcp_keepalive+0x20>
 801ce46:	4b18      	ldr	r3, [pc, #96]	; (801cea8 <tcp_keepalive+0x74>)
 801ce48:	f640 0224 	movw	r2, #2084	; 0x824
 801ce4c:	4917      	ldr	r1, [pc, #92]	; (801ceac <tcp_keepalive+0x78>)
 801ce4e:	4818      	ldr	r0, [pc, #96]	; (801ceb0 <tcp_keepalive+0x7c>)
 801ce50:	f003 f888 	bl	801ff64 <printf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801ce54:	7dfb      	ldrb	r3, [r7, #23]
 801ce56:	b29c      	uxth	r4, r3
 801ce58:	687b      	ldr	r3, [r7, #4]
 801ce5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ce5c:	3b01      	subs	r3, #1
 801ce5e:	4618      	mov	r0, r3
 801ce60:	f7f8 f9bd 	bl	80151de <lwip_htonl>
 801ce64:	4603      	mov	r3, r0
 801ce66:	2200      	movs	r2, #0
 801ce68:	4621      	mov	r1, r4
 801ce6a:	6878      	ldr	r0, [r7, #4]
 801ce6c:	f7ff fe66 	bl	801cb3c <tcp_output_alloc_header>
 801ce70:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801ce72:	693b      	ldr	r3, [r7, #16]
 801ce74:	2b00      	cmp	r3, #0
 801ce76:	d102      	bne.n	801ce7e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801ce78:	f04f 33ff 	mov.w	r3, #4294967295
 801ce7c:	e010      	b.n	801cea0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801ce7e:	7dfb      	ldrb	r3, [r7, #23]
 801ce80:	2200      	movs	r2, #0
 801ce82:	6939      	ldr	r1, [r7, #16]
 801ce84:	6878      	ldr	r0, [r7, #4]
 801ce86:	f7ff fe97 	bl	801cbb8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801ce8a:	687a      	ldr	r2, [r7, #4]
 801ce8c:	687b      	ldr	r3, [r7, #4]
 801ce8e:	3304      	adds	r3, #4
 801ce90:	6939      	ldr	r1, [r7, #16]
 801ce92:	6878      	ldr	r0, [r7, #4]
 801ce94:	f7ff fed0 	bl	801cc38 <tcp_output_control_segment>
 801ce98:	4603      	mov	r3, r0
 801ce9a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801ce9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801cea0:	4618      	mov	r0, r3
 801cea2:	371c      	adds	r7, #28
 801cea4:	46bd      	mov	sp, r7
 801cea6:	bd90      	pop	{r4, r7, pc}
 801cea8:	080282f8 	.word	0x080282f8
 801ceac:	08028ad4 	.word	0x08028ad4
 801ceb0:	0802834c 	.word	0x0802834c

0801ceb4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801ceb4:	b590      	push	{r4, r7, lr}
 801ceb6:	b08b      	sub	sp, #44	; 0x2c
 801ceb8:	af00      	add	r7, sp, #0
 801ceba:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801cebc:	2300      	movs	r3, #0
 801cebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801cec2:	687b      	ldr	r3, [r7, #4]
 801cec4:	2b00      	cmp	r3, #0
 801cec6:	d106      	bne.n	801ced6 <tcp_zero_window_probe+0x22>
 801cec8:	4b4c      	ldr	r3, [pc, #304]	; (801cffc <tcp_zero_window_probe+0x148>)
 801ceca:	f640 024f 	movw	r2, #2127	; 0x84f
 801cece:	494c      	ldr	r1, [pc, #304]	; (801d000 <tcp_zero_window_probe+0x14c>)
 801ced0:	484c      	ldr	r0, [pc, #304]	; (801d004 <tcp_zero_window_probe+0x150>)
 801ced2:	f003 f847 	bl	801ff64 <printf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801ced6:	687b      	ldr	r3, [r7, #4]
 801ced8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ceda:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801cedc:	6a3b      	ldr	r3, [r7, #32]
 801cede:	2b00      	cmp	r3, #0
 801cee0:	d101      	bne.n	801cee6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801cee2:	2300      	movs	r3, #0
 801cee4:	e086      	b.n	801cff4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801cee6:	687b      	ldr	r3, [r7, #4]
 801cee8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801ceec:	2bff      	cmp	r3, #255	; 0xff
 801ceee:	d007      	beq.n	801cf00 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801cef0:	687b      	ldr	r3, [r7, #4]
 801cef2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801cef6:	3301      	adds	r3, #1
 801cef8:	b2da      	uxtb	r2, r3
 801cefa:	687b      	ldr	r3, [r7, #4]
 801cefc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801cf00:	6a3b      	ldr	r3, [r7, #32]
 801cf02:	68db      	ldr	r3, [r3, #12]
 801cf04:	899b      	ldrh	r3, [r3, #12]
 801cf06:	b29b      	uxth	r3, r3
 801cf08:	4618      	mov	r0, r3
 801cf0a:	f7f8 f953 	bl	80151b4 <lwip_htons>
 801cf0e:	4603      	mov	r3, r0
 801cf10:	b2db      	uxtb	r3, r3
 801cf12:	f003 0301 	and.w	r3, r3, #1
 801cf16:	2b00      	cmp	r3, #0
 801cf18:	d005      	beq.n	801cf26 <tcp_zero_window_probe+0x72>
 801cf1a:	6a3b      	ldr	r3, [r7, #32]
 801cf1c:	891b      	ldrh	r3, [r3, #8]
 801cf1e:	2b00      	cmp	r3, #0
 801cf20:	d101      	bne.n	801cf26 <tcp_zero_window_probe+0x72>
 801cf22:	2301      	movs	r3, #1
 801cf24:	e000      	b.n	801cf28 <tcp_zero_window_probe+0x74>
 801cf26:	2300      	movs	r3, #0
 801cf28:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801cf2a:	7ffb      	ldrb	r3, [r7, #31]
 801cf2c:	2b00      	cmp	r3, #0
 801cf2e:	bf0c      	ite	eq
 801cf30:	2301      	moveq	r3, #1
 801cf32:	2300      	movne	r3, #0
 801cf34:	b2db      	uxtb	r3, r3
 801cf36:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801cf38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cf3c:	b299      	uxth	r1, r3
 801cf3e:	6a3b      	ldr	r3, [r7, #32]
 801cf40:	68db      	ldr	r3, [r3, #12]
 801cf42:	685b      	ldr	r3, [r3, #4]
 801cf44:	8bba      	ldrh	r2, [r7, #28]
 801cf46:	6878      	ldr	r0, [r7, #4]
 801cf48:	f7ff fdf8 	bl	801cb3c <tcp_output_alloc_header>
 801cf4c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801cf4e:	69bb      	ldr	r3, [r7, #24]
 801cf50:	2b00      	cmp	r3, #0
 801cf52:	d102      	bne.n	801cf5a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801cf54:	f04f 33ff 	mov.w	r3, #4294967295
 801cf58:	e04c      	b.n	801cff4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801cf5a:	69bb      	ldr	r3, [r7, #24]
 801cf5c:	685b      	ldr	r3, [r3, #4]
 801cf5e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801cf60:	7ffb      	ldrb	r3, [r7, #31]
 801cf62:	2b00      	cmp	r3, #0
 801cf64:	d011      	beq.n	801cf8a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801cf66:	697b      	ldr	r3, [r7, #20]
 801cf68:	899b      	ldrh	r3, [r3, #12]
 801cf6a:	b29b      	uxth	r3, r3
 801cf6c:	b21b      	sxth	r3, r3
 801cf6e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801cf72:	b21c      	sxth	r4, r3
 801cf74:	2011      	movs	r0, #17
 801cf76:	f7f8 f91d 	bl	80151b4 <lwip_htons>
 801cf7a:	4603      	mov	r3, r0
 801cf7c:	b21b      	sxth	r3, r3
 801cf7e:	4323      	orrs	r3, r4
 801cf80:	b21b      	sxth	r3, r3
 801cf82:	b29a      	uxth	r2, r3
 801cf84:	697b      	ldr	r3, [r7, #20]
 801cf86:	819a      	strh	r2, [r3, #12]
 801cf88:	e010      	b.n	801cfac <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801cf8a:	69bb      	ldr	r3, [r7, #24]
 801cf8c:	685b      	ldr	r3, [r3, #4]
 801cf8e:	3314      	adds	r3, #20
 801cf90:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801cf92:	6a3b      	ldr	r3, [r7, #32]
 801cf94:	6858      	ldr	r0, [r3, #4]
 801cf96:	6a3b      	ldr	r3, [r7, #32]
 801cf98:	685b      	ldr	r3, [r3, #4]
 801cf9a:	891a      	ldrh	r2, [r3, #8]
 801cf9c:	6a3b      	ldr	r3, [r7, #32]
 801cf9e:	891b      	ldrh	r3, [r3, #8]
 801cfa0:	1ad3      	subs	r3, r2, r3
 801cfa2:	b29b      	uxth	r3, r3
 801cfa4:	2201      	movs	r2, #1
 801cfa6:	6939      	ldr	r1, [r7, #16]
 801cfa8:	f7f9 feea 	bl	8016d80 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801cfac:	6a3b      	ldr	r3, [r7, #32]
 801cfae:	68db      	ldr	r3, [r3, #12]
 801cfb0:	685b      	ldr	r3, [r3, #4]
 801cfb2:	4618      	mov	r0, r3
 801cfb4:	f7f8 f913 	bl	80151de <lwip_htonl>
 801cfb8:	4603      	mov	r3, r0
 801cfba:	3301      	adds	r3, #1
 801cfbc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801cfbe:	687b      	ldr	r3, [r7, #4]
 801cfc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801cfc2:	68fb      	ldr	r3, [r7, #12]
 801cfc4:	1ad3      	subs	r3, r2, r3
 801cfc6:	2b00      	cmp	r3, #0
 801cfc8:	da02      	bge.n	801cfd0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801cfca:	687b      	ldr	r3, [r7, #4]
 801cfcc:	68fa      	ldr	r2, [r7, #12]
 801cfce:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801cfd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cfd4:	2200      	movs	r2, #0
 801cfd6:	69b9      	ldr	r1, [r7, #24]
 801cfd8:	6878      	ldr	r0, [r7, #4]
 801cfda:	f7ff fded 	bl	801cbb8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801cfde:	687a      	ldr	r2, [r7, #4]
 801cfe0:	687b      	ldr	r3, [r7, #4]
 801cfe2:	3304      	adds	r3, #4
 801cfe4:	69b9      	ldr	r1, [r7, #24]
 801cfe6:	6878      	ldr	r0, [r7, #4]
 801cfe8:	f7ff fe26 	bl	801cc38 <tcp_output_control_segment>
 801cfec:	4603      	mov	r3, r0
 801cfee:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801cff0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801cff4:	4618      	mov	r0, r3
 801cff6:	372c      	adds	r7, #44	; 0x2c
 801cff8:	46bd      	mov	sp, r7
 801cffa:	bd90      	pop	{r4, r7, pc}
 801cffc:	080282f8 	.word	0x080282f8
 801d000:	08028af0 	.word	0x08028af0
 801d004:	0802834c 	.word	0x0802834c

0801d008 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801d008:	b580      	push	{r7, lr}
 801d00a:	b082      	sub	sp, #8
 801d00c:	af00      	add	r7, sp, #0
 801d00e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801d010:	f7fa f808 	bl	8017024 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801d014:	4b0a      	ldr	r3, [pc, #40]	; (801d040 <tcpip_tcp_timer+0x38>)
 801d016:	681b      	ldr	r3, [r3, #0]
 801d018:	2b00      	cmp	r3, #0
 801d01a:	d103      	bne.n	801d024 <tcpip_tcp_timer+0x1c>
 801d01c:	4b09      	ldr	r3, [pc, #36]	; (801d044 <tcpip_tcp_timer+0x3c>)
 801d01e:	681b      	ldr	r3, [r3, #0]
 801d020:	2b00      	cmp	r3, #0
 801d022:	d005      	beq.n	801d030 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801d024:	2200      	movs	r2, #0
 801d026:	4908      	ldr	r1, [pc, #32]	; (801d048 <tcpip_tcp_timer+0x40>)
 801d028:	20fa      	movs	r0, #250	; 0xfa
 801d02a:	f000 f8f3 	bl	801d214 <sys_timeout>
 801d02e:	e003      	b.n	801d038 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801d030:	4b06      	ldr	r3, [pc, #24]	; (801d04c <tcpip_tcp_timer+0x44>)
 801d032:	2200      	movs	r2, #0
 801d034:	601a      	str	r2, [r3, #0]
  }
}
 801d036:	bf00      	nop
 801d038:	bf00      	nop
 801d03a:	3708      	adds	r7, #8
 801d03c:	46bd      	mov	sp, r7
 801d03e:	bd80      	pop	{r7, pc}
 801d040:	200188a8 	.word	0x200188a8
 801d044:	200188ac 	.word	0x200188ac
 801d048:	0801d009 	.word	0x0801d009
 801d04c:	200188f4 	.word	0x200188f4

0801d050 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801d050:	b580      	push	{r7, lr}
 801d052:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801d054:	4b0a      	ldr	r3, [pc, #40]	; (801d080 <tcp_timer_needed+0x30>)
 801d056:	681b      	ldr	r3, [r3, #0]
 801d058:	2b00      	cmp	r3, #0
 801d05a:	d10f      	bne.n	801d07c <tcp_timer_needed+0x2c>
 801d05c:	4b09      	ldr	r3, [pc, #36]	; (801d084 <tcp_timer_needed+0x34>)
 801d05e:	681b      	ldr	r3, [r3, #0]
 801d060:	2b00      	cmp	r3, #0
 801d062:	d103      	bne.n	801d06c <tcp_timer_needed+0x1c>
 801d064:	4b08      	ldr	r3, [pc, #32]	; (801d088 <tcp_timer_needed+0x38>)
 801d066:	681b      	ldr	r3, [r3, #0]
 801d068:	2b00      	cmp	r3, #0
 801d06a:	d007      	beq.n	801d07c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801d06c:	4b04      	ldr	r3, [pc, #16]	; (801d080 <tcp_timer_needed+0x30>)
 801d06e:	2201      	movs	r2, #1
 801d070:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801d072:	2200      	movs	r2, #0
 801d074:	4905      	ldr	r1, [pc, #20]	; (801d08c <tcp_timer_needed+0x3c>)
 801d076:	20fa      	movs	r0, #250	; 0xfa
 801d078:	f000 f8cc 	bl	801d214 <sys_timeout>
  }
}
 801d07c:	bf00      	nop
 801d07e:	bd80      	pop	{r7, pc}
 801d080:	200188f4 	.word	0x200188f4
 801d084:	200188a8 	.word	0x200188a8
 801d088:	200188ac 	.word	0x200188ac
 801d08c:	0801d009 	.word	0x0801d009

0801d090 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801d090:	b580      	push	{r7, lr}
 801d092:	b086      	sub	sp, #24
 801d094:	af00      	add	r7, sp, #0
 801d096:	60f8      	str	r0, [r7, #12]
 801d098:	60b9      	str	r1, [r7, #8]
 801d09a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801d09c:	200a      	movs	r0, #10
 801d09e:	f7f8 fd67 	bl	8015b70 <memp_malloc>
 801d0a2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801d0a4:	693b      	ldr	r3, [r7, #16]
 801d0a6:	2b00      	cmp	r3, #0
 801d0a8:	d109      	bne.n	801d0be <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801d0aa:	693b      	ldr	r3, [r7, #16]
 801d0ac:	2b00      	cmp	r3, #0
 801d0ae:	d151      	bne.n	801d154 <sys_timeout_abs+0xc4>
 801d0b0:	4b2a      	ldr	r3, [pc, #168]	; (801d15c <sys_timeout_abs+0xcc>)
 801d0b2:	22be      	movs	r2, #190	; 0xbe
 801d0b4:	492a      	ldr	r1, [pc, #168]	; (801d160 <sys_timeout_abs+0xd0>)
 801d0b6:	482b      	ldr	r0, [pc, #172]	; (801d164 <sys_timeout_abs+0xd4>)
 801d0b8:	f002 ff54 	bl	801ff64 <printf>
    return;
 801d0bc:	e04a      	b.n	801d154 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801d0be:	693b      	ldr	r3, [r7, #16]
 801d0c0:	2200      	movs	r2, #0
 801d0c2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801d0c4:	693b      	ldr	r3, [r7, #16]
 801d0c6:	68ba      	ldr	r2, [r7, #8]
 801d0c8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801d0ca:	693b      	ldr	r3, [r7, #16]
 801d0cc:	687a      	ldr	r2, [r7, #4]
 801d0ce:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801d0d0:	693b      	ldr	r3, [r7, #16]
 801d0d2:	68fa      	ldr	r2, [r7, #12]
 801d0d4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801d0d6:	4b24      	ldr	r3, [pc, #144]	; (801d168 <sys_timeout_abs+0xd8>)
 801d0d8:	681b      	ldr	r3, [r3, #0]
 801d0da:	2b00      	cmp	r3, #0
 801d0dc:	d103      	bne.n	801d0e6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801d0de:	4a22      	ldr	r2, [pc, #136]	; (801d168 <sys_timeout_abs+0xd8>)
 801d0e0:	693b      	ldr	r3, [r7, #16]
 801d0e2:	6013      	str	r3, [r2, #0]
    return;
 801d0e4:	e037      	b.n	801d156 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801d0e6:	693b      	ldr	r3, [r7, #16]
 801d0e8:	685a      	ldr	r2, [r3, #4]
 801d0ea:	4b1f      	ldr	r3, [pc, #124]	; (801d168 <sys_timeout_abs+0xd8>)
 801d0ec:	681b      	ldr	r3, [r3, #0]
 801d0ee:	685b      	ldr	r3, [r3, #4]
 801d0f0:	1ad3      	subs	r3, r2, r3
 801d0f2:	0fdb      	lsrs	r3, r3, #31
 801d0f4:	f003 0301 	and.w	r3, r3, #1
 801d0f8:	b2db      	uxtb	r3, r3
 801d0fa:	2b00      	cmp	r3, #0
 801d0fc:	d007      	beq.n	801d10e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801d0fe:	4b1a      	ldr	r3, [pc, #104]	; (801d168 <sys_timeout_abs+0xd8>)
 801d100:	681a      	ldr	r2, [r3, #0]
 801d102:	693b      	ldr	r3, [r7, #16]
 801d104:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801d106:	4a18      	ldr	r2, [pc, #96]	; (801d168 <sys_timeout_abs+0xd8>)
 801d108:	693b      	ldr	r3, [r7, #16]
 801d10a:	6013      	str	r3, [r2, #0]
 801d10c:	e023      	b.n	801d156 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801d10e:	4b16      	ldr	r3, [pc, #88]	; (801d168 <sys_timeout_abs+0xd8>)
 801d110:	681b      	ldr	r3, [r3, #0]
 801d112:	617b      	str	r3, [r7, #20]
 801d114:	e01a      	b.n	801d14c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801d116:	697b      	ldr	r3, [r7, #20]
 801d118:	681b      	ldr	r3, [r3, #0]
 801d11a:	2b00      	cmp	r3, #0
 801d11c:	d00b      	beq.n	801d136 <sys_timeout_abs+0xa6>
 801d11e:	693b      	ldr	r3, [r7, #16]
 801d120:	685a      	ldr	r2, [r3, #4]
 801d122:	697b      	ldr	r3, [r7, #20]
 801d124:	681b      	ldr	r3, [r3, #0]
 801d126:	685b      	ldr	r3, [r3, #4]
 801d128:	1ad3      	subs	r3, r2, r3
 801d12a:	0fdb      	lsrs	r3, r3, #31
 801d12c:	f003 0301 	and.w	r3, r3, #1
 801d130:	b2db      	uxtb	r3, r3
 801d132:	2b00      	cmp	r3, #0
 801d134:	d007      	beq.n	801d146 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801d136:	697b      	ldr	r3, [r7, #20]
 801d138:	681a      	ldr	r2, [r3, #0]
 801d13a:	693b      	ldr	r3, [r7, #16]
 801d13c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801d13e:	697b      	ldr	r3, [r7, #20]
 801d140:	693a      	ldr	r2, [r7, #16]
 801d142:	601a      	str	r2, [r3, #0]
        break;
 801d144:	e007      	b.n	801d156 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801d146:	697b      	ldr	r3, [r7, #20]
 801d148:	681b      	ldr	r3, [r3, #0]
 801d14a:	617b      	str	r3, [r7, #20]
 801d14c:	697b      	ldr	r3, [r7, #20]
 801d14e:	2b00      	cmp	r3, #0
 801d150:	d1e1      	bne.n	801d116 <sys_timeout_abs+0x86>
 801d152:	e000      	b.n	801d156 <sys_timeout_abs+0xc6>
    return;
 801d154:	bf00      	nop
      }
    }
  }
}
 801d156:	3718      	adds	r7, #24
 801d158:	46bd      	mov	sp, r7
 801d15a:	bd80      	pop	{r7, pc}
 801d15c:	08028b14 	.word	0x08028b14
 801d160:	08028b48 	.word	0x08028b48
 801d164:	08028b88 	.word	0x08028b88
 801d168:	200188ec 	.word	0x200188ec

0801d16c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801d16c:	b580      	push	{r7, lr}
 801d16e:	b086      	sub	sp, #24
 801d170:	af00      	add	r7, sp, #0
 801d172:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801d174:	687b      	ldr	r3, [r7, #4]
 801d176:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801d178:	697b      	ldr	r3, [r7, #20]
 801d17a:	685b      	ldr	r3, [r3, #4]
 801d17c:	4798      	blx	r3

  now = sys_now();
 801d17e:	f7ee f9ef 	bl	800b560 <sys_now>
 801d182:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801d184:	697b      	ldr	r3, [r7, #20]
 801d186:	681a      	ldr	r2, [r3, #0]
 801d188:	4b0f      	ldr	r3, [pc, #60]	; (801d1c8 <lwip_cyclic_timer+0x5c>)
 801d18a:	681b      	ldr	r3, [r3, #0]
 801d18c:	4413      	add	r3, r2
 801d18e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801d190:	68fa      	ldr	r2, [r7, #12]
 801d192:	693b      	ldr	r3, [r7, #16]
 801d194:	1ad3      	subs	r3, r2, r3
 801d196:	0fdb      	lsrs	r3, r3, #31
 801d198:	f003 0301 	and.w	r3, r3, #1
 801d19c:	b2db      	uxtb	r3, r3
 801d19e:	2b00      	cmp	r3, #0
 801d1a0:	d009      	beq.n	801d1b6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801d1a2:	697b      	ldr	r3, [r7, #20]
 801d1a4:	681a      	ldr	r2, [r3, #0]
 801d1a6:	693b      	ldr	r3, [r7, #16]
 801d1a8:	4413      	add	r3, r2
 801d1aa:	687a      	ldr	r2, [r7, #4]
 801d1ac:	4907      	ldr	r1, [pc, #28]	; (801d1cc <lwip_cyclic_timer+0x60>)
 801d1ae:	4618      	mov	r0, r3
 801d1b0:	f7ff ff6e 	bl	801d090 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801d1b4:	e004      	b.n	801d1c0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801d1b6:	687a      	ldr	r2, [r7, #4]
 801d1b8:	4904      	ldr	r1, [pc, #16]	; (801d1cc <lwip_cyclic_timer+0x60>)
 801d1ba:	68f8      	ldr	r0, [r7, #12]
 801d1bc:	f7ff ff68 	bl	801d090 <sys_timeout_abs>
}
 801d1c0:	bf00      	nop
 801d1c2:	3718      	adds	r7, #24
 801d1c4:	46bd      	mov	sp, r7
 801d1c6:	bd80      	pop	{r7, pc}
 801d1c8:	200188f0 	.word	0x200188f0
 801d1cc:	0801d16d 	.word	0x0801d16d

0801d1d0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801d1d0:	b580      	push	{r7, lr}
 801d1d2:	b082      	sub	sp, #8
 801d1d4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801d1d6:	2301      	movs	r3, #1
 801d1d8:	607b      	str	r3, [r7, #4]
 801d1da:	e00e      	b.n	801d1fa <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801d1dc:	4a0b      	ldr	r2, [pc, #44]	; (801d20c <sys_timeouts_init+0x3c>)
 801d1de:	687b      	ldr	r3, [r7, #4]
 801d1e0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801d1e4:	687b      	ldr	r3, [r7, #4]
 801d1e6:	00db      	lsls	r3, r3, #3
 801d1e8:	4a08      	ldr	r2, [pc, #32]	; (801d20c <sys_timeouts_init+0x3c>)
 801d1ea:	4413      	add	r3, r2
 801d1ec:	461a      	mov	r2, r3
 801d1ee:	4908      	ldr	r1, [pc, #32]	; (801d210 <sys_timeouts_init+0x40>)
 801d1f0:	f000 f810 	bl	801d214 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801d1f4:	687b      	ldr	r3, [r7, #4]
 801d1f6:	3301      	adds	r3, #1
 801d1f8:	607b      	str	r3, [r7, #4]
 801d1fa:	687b      	ldr	r3, [r7, #4]
 801d1fc:	2b02      	cmp	r3, #2
 801d1fe:	d9ed      	bls.n	801d1dc <sys_timeouts_init+0xc>
  }
}
 801d200:	bf00      	nop
 801d202:	bf00      	nop
 801d204:	3708      	adds	r7, #8
 801d206:	46bd      	mov	sp, r7
 801d208:	bd80      	pop	{r7, pc}
 801d20a:	bf00      	nop
 801d20c:	080718d0 	.word	0x080718d0
 801d210:	0801d16d 	.word	0x0801d16d

0801d214 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801d214:	b580      	push	{r7, lr}
 801d216:	b086      	sub	sp, #24
 801d218:	af00      	add	r7, sp, #0
 801d21a:	60f8      	str	r0, [r7, #12]
 801d21c:	60b9      	str	r1, [r7, #8]
 801d21e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801d220:	68fb      	ldr	r3, [r7, #12]
 801d222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d226:	d306      	bcc.n	801d236 <sys_timeout+0x22>
 801d228:	4b0a      	ldr	r3, [pc, #40]	; (801d254 <sys_timeout+0x40>)
 801d22a:	f240 1229 	movw	r2, #297	; 0x129
 801d22e:	490a      	ldr	r1, [pc, #40]	; (801d258 <sys_timeout+0x44>)
 801d230:	480a      	ldr	r0, [pc, #40]	; (801d25c <sys_timeout+0x48>)
 801d232:	f002 fe97 	bl	801ff64 <printf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801d236:	f7ee f993 	bl	800b560 <sys_now>
 801d23a:	4602      	mov	r2, r0
 801d23c:	68fb      	ldr	r3, [r7, #12]
 801d23e:	4413      	add	r3, r2
 801d240:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801d242:	687a      	ldr	r2, [r7, #4]
 801d244:	68b9      	ldr	r1, [r7, #8]
 801d246:	6978      	ldr	r0, [r7, #20]
 801d248:	f7ff ff22 	bl	801d090 <sys_timeout_abs>
#endif
}
 801d24c:	bf00      	nop
 801d24e:	3718      	adds	r7, #24
 801d250:	46bd      	mov	sp, r7
 801d252:	bd80      	pop	{r7, pc}
 801d254:	08028b14 	.word	0x08028b14
 801d258:	08028bb0 	.word	0x08028bb0
 801d25c:	08028b88 	.word	0x08028b88

0801d260 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 801d260:	b580      	push	{r7, lr}
 801d262:	b084      	sub	sp, #16
 801d264:	af00      	add	r7, sp, #0
 801d266:	6078      	str	r0, [r7, #4]
 801d268:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801d26a:	4b19      	ldr	r3, [pc, #100]	; (801d2d0 <sys_untimeout+0x70>)
 801d26c:	681b      	ldr	r3, [r3, #0]
 801d26e:	2b00      	cmp	r3, #0
 801d270:	d029      	beq.n	801d2c6 <sys_untimeout+0x66>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 801d272:	4b17      	ldr	r3, [pc, #92]	; (801d2d0 <sys_untimeout+0x70>)
 801d274:	681b      	ldr	r3, [r3, #0]
 801d276:	60bb      	str	r3, [r7, #8]
 801d278:	2300      	movs	r3, #0
 801d27a:	60fb      	str	r3, [r7, #12]
 801d27c:	e01f      	b.n	801d2be <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 801d27e:	68bb      	ldr	r3, [r7, #8]
 801d280:	689b      	ldr	r3, [r3, #8]
 801d282:	687a      	ldr	r2, [r7, #4]
 801d284:	429a      	cmp	r2, r3
 801d286:	d115      	bne.n	801d2b4 <sys_untimeout+0x54>
 801d288:	68bb      	ldr	r3, [r7, #8]
 801d28a:	68db      	ldr	r3, [r3, #12]
 801d28c:	683a      	ldr	r2, [r7, #0]
 801d28e:	429a      	cmp	r2, r3
 801d290:	d110      	bne.n	801d2b4 <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 801d292:	68fb      	ldr	r3, [r7, #12]
 801d294:	2b00      	cmp	r3, #0
 801d296:	d104      	bne.n	801d2a2 <sys_untimeout+0x42>
        next_timeout = t->next;
 801d298:	68bb      	ldr	r3, [r7, #8]
 801d29a:	681b      	ldr	r3, [r3, #0]
 801d29c:	4a0c      	ldr	r2, [pc, #48]	; (801d2d0 <sys_untimeout+0x70>)
 801d29e:	6013      	str	r3, [r2, #0]
 801d2a0:	e003      	b.n	801d2aa <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 801d2a2:	68bb      	ldr	r3, [r7, #8]
 801d2a4:	681a      	ldr	r2, [r3, #0]
 801d2a6:	68fb      	ldr	r3, [r7, #12]
 801d2a8:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 801d2aa:	68b9      	ldr	r1, [r7, #8]
 801d2ac:	200a      	movs	r0, #10
 801d2ae:	f7f8 fcb1 	bl	8015c14 <memp_free>
      return;
 801d2b2:	e009      	b.n	801d2c8 <sys_untimeout+0x68>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 801d2b4:	68bb      	ldr	r3, [r7, #8]
 801d2b6:	60fb      	str	r3, [r7, #12]
 801d2b8:	68bb      	ldr	r3, [r7, #8]
 801d2ba:	681b      	ldr	r3, [r3, #0]
 801d2bc:	60bb      	str	r3, [r7, #8]
 801d2be:	68bb      	ldr	r3, [r7, #8]
 801d2c0:	2b00      	cmp	r3, #0
 801d2c2:	d1dc      	bne.n	801d27e <sys_untimeout+0x1e>
    }
  }
  return;
 801d2c4:	e000      	b.n	801d2c8 <sys_untimeout+0x68>
    return;
 801d2c6:	bf00      	nop
}
 801d2c8:	3710      	adds	r7, #16
 801d2ca:	46bd      	mov	sp, r7
 801d2cc:	bd80      	pop	{r7, pc}
 801d2ce:	bf00      	nop
 801d2d0:	200188ec 	.word	0x200188ec

0801d2d4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801d2d4:	b580      	push	{r7, lr}
 801d2d6:	b084      	sub	sp, #16
 801d2d8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801d2da:	f7ee f941 	bl	800b560 <sys_now>
 801d2de:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801d2e0:	4b17      	ldr	r3, [pc, #92]	; (801d340 <sys_check_timeouts+0x6c>)
 801d2e2:	681b      	ldr	r3, [r3, #0]
 801d2e4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801d2e6:	68bb      	ldr	r3, [r7, #8]
 801d2e8:	2b00      	cmp	r3, #0
 801d2ea:	d022      	beq.n	801d332 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801d2ec:	68bb      	ldr	r3, [r7, #8]
 801d2ee:	685b      	ldr	r3, [r3, #4]
 801d2f0:	68fa      	ldr	r2, [r7, #12]
 801d2f2:	1ad3      	subs	r3, r2, r3
 801d2f4:	0fdb      	lsrs	r3, r3, #31
 801d2f6:	f003 0301 	and.w	r3, r3, #1
 801d2fa:	b2db      	uxtb	r3, r3
 801d2fc:	2b00      	cmp	r3, #0
 801d2fe:	d11a      	bne.n	801d336 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801d300:	68bb      	ldr	r3, [r7, #8]
 801d302:	681b      	ldr	r3, [r3, #0]
 801d304:	4a0e      	ldr	r2, [pc, #56]	; (801d340 <sys_check_timeouts+0x6c>)
 801d306:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801d308:	68bb      	ldr	r3, [r7, #8]
 801d30a:	689b      	ldr	r3, [r3, #8]
 801d30c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801d30e:	68bb      	ldr	r3, [r7, #8]
 801d310:	68db      	ldr	r3, [r3, #12]
 801d312:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801d314:	68bb      	ldr	r3, [r7, #8]
 801d316:	685b      	ldr	r3, [r3, #4]
 801d318:	4a0a      	ldr	r2, [pc, #40]	; (801d344 <sys_check_timeouts+0x70>)
 801d31a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801d31c:	68b9      	ldr	r1, [r7, #8]
 801d31e:	200a      	movs	r0, #10
 801d320:	f7f8 fc78 	bl	8015c14 <memp_free>
    if (handler != NULL) {
 801d324:	687b      	ldr	r3, [r7, #4]
 801d326:	2b00      	cmp	r3, #0
 801d328:	d0da      	beq.n	801d2e0 <sys_check_timeouts+0xc>
      handler(arg);
 801d32a:	687b      	ldr	r3, [r7, #4]
 801d32c:	6838      	ldr	r0, [r7, #0]
 801d32e:	4798      	blx	r3
  do {
 801d330:	e7d6      	b.n	801d2e0 <sys_check_timeouts+0xc>
      return;
 801d332:	bf00      	nop
 801d334:	e000      	b.n	801d338 <sys_check_timeouts+0x64>
      return;
 801d336:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801d338:	3710      	adds	r7, #16
 801d33a:	46bd      	mov	sp, r7
 801d33c:	bd80      	pop	{r7, pc}
 801d33e:	bf00      	nop
 801d340:	200188ec 	.word	0x200188ec
 801d344:	200188f0 	.word	0x200188f0

0801d348 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801d348:	b580      	push	{r7, lr}
 801d34a:	b082      	sub	sp, #8
 801d34c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801d34e:	4b16      	ldr	r3, [pc, #88]	; (801d3a8 <sys_timeouts_sleeptime+0x60>)
 801d350:	681b      	ldr	r3, [r3, #0]
 801d352:	2b00      	cmp	r3, #0
 801d354:	d102      	bne.n	801d35c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801d356:	f04f 33ff 	mov.w	r3, #4294967295
 801d35a:	e020      	b.n	801d39e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801d35c:	f7ee f900 	bl	800b560 <sys_now>
 801d360:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801d362:	4b11      	ldr	r3, [pc, #68]	; (801d3a8 <sys_timeouts_sleeptime+0x60>)
 801d364:	681b      	ldr	r3, [r3, #0]
 801d366:	685a      	ldr	r2, [r3, #4]
 801d368:	687b      	ldr	r3, [r7, #4]
 801d36a:	1ad3      	subs	r3, r2, r3
 801d36c:	0fdb      	lsrs	r3, r3, #31
 801d36e:	f003 0301 	and.w	r3, r3, #1
 801d372:	b2db      	uxtb	r3, r3
 801d374:	2b00      	cmp	r3, #0
 801d376:	d001      	beq.n	801d37c <sys_timeouts_sleeptime+0x34>
    return 0;
 801d378:	2300      	movs	r3, #0
 801d37a:	e010      	b.n	801d39e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801d37c:	4b0a      	ldr	r3, [pc, #40]	; (801d3a8 <sys_timeouts_sleeptime+0x60>)
 801d37e:	681b      	ldr	r3, [r3, #0]
 801d380:	685a      	ldr	r2, [r3, #4]
 801d382:	687b      	ldr	r3, [r7, #4]
 801d384:	1ad3      	subs	r3, r2, r3
 801d386:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801d388:	683b      	ldr	r3, [r7, #0]
 801d38a:	2b00      	cmp	r3, #0
 801d38c:	da06      	bge.n	801d39c <sys_timeouts_sleeptime+0x54>
 801d38e:	4b07      	ldr	r3, [pc, #28]	; (801d3ac <sys_timeouts_sleeptime+0x64>)
 801d390:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801d394:	4906      	ldr	r1, [pc, #24]	; (801d3b0 <sys_timeouts_sleeptime+0x68>)
 801d396:	4807      	ldr	r0, [pc, #28]	; (801d3b4 <sys_timeouts_sleeptime+0x6c>)
 801d398:	f002 fde4 	bl	801ff64 <printf>
    return ret;
 801d39c:	683b      	ldr	r3, [r7, #0]
  }
}
 801d39e:	4618      	mov	r0, r3
 801d3a0:	3708      	adds	r7, #8
 801d3a2:	46bd      	mov	sp, r7
 801d3a4:	bd80      	pop	{r7, pc}
 801d3a6:	bf00      	nop
 801d3a8:	200188ec 	.word	0x200188ec
 801d3ac:	08028b14 	.word	0x08028b14
 801d3b0:	08028be8 	.word	0x08028be8
 801d3b4:	08028b88 	.word	0x08028b88

0801d3b8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801d3b8:	b580      	push	{r7, lr}
 801d3ba:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801d3bc:	f002 fe32 	bl	8020024 <rand>
 801d3c0:	4603      	mov	r3, r0
 801d3c2:	b29b      	uxth	r3, r3
 801d3c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801d3c8:	b29b      	uxth	r3, r3
 801d3ca:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801d3ce:	b29a      	uxth	r2, r3
 801d3d0:	4b01      	ldr	r3, [pc, #4]	; (801d3d8 <udp_init+0x20>)
 801d3d2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801d3d4:	bf00      	nop
 801d3d6:	bd80      	pop	{r7, pc}
 801d3d8:	20000018 	.word	0x20000018

0801d3dc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801d3dc:	b580      	push	{r7, lr}
 801d3de:	b084      	sub	sp, #16
 801d3e0:	af00      	add	r7, sp, #0
 801d3e2:	60f8      	str	r0, [r7, #12]
 801d3e4:	60b9      	str	r1, [r7, #8]
 801d3e6:	4613      	mov	r3, r2
 801d3e8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801d3ea:	68fb      	ldr	r3, [r7, #12]
 801d3ec:	2b00      	cmp	r3, #0
 801d3ee:	d105      	bne.n	801d3fc <udp_input_local_match+0x20>
 801d3f0:	4b27      	ldr	r3, [pc, #156]	; (801d490 <udp_input_local_match+0xb4>)
 801d3f2:	2287      	movs	r2, #135	; 0x87
 801d3f4:	4927      	ldr	r1, [pc, #156]	; (801d494 <udp_input_local_match+0xb8>)
 801d3f6:	4828      	ldr	r0, [pc, #160]	; (801d498 <udp_input_local_match+0xbc>)
 801d3f8:	f002 fdb4 	bl	801ff64 <printf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801d3fc:	68bb      	ldr	r3, [r7, #8]
 801d3fe:	2b00      	cmp	r3, #0
 801d400:	d105      	bne.n	801d40e <udp_input_local_match+0x32>
 801d402:	4b23      	ldr	r3, [pc, #140]	; (801d490 <udp_input_local_match+0xb4>)
 801d404:	2288      	movs	r2, #136	; 0x88
 801d406:	4925      	ldr	r1, [pc, #148]	; (801d49c <udp_input_local_match+0xc0>)
 801d408:	4823      	ldr	r0, [pc, #140]	; (801d498 <udp_input_local_match+0xbc>)
 801d40a:	f002 fdab 	bl	801ff64 <printf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d40e:	68fb      	ldr	r3, [r7, #12]
 801d410:	7a1b      	ldrb	r3, [r3, #8]
 801d412:	2b00      	cmp	r3, #0
 801d414:	d00b      	beq.n	801d42e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801d416:	68fb      	ldr	r3, [r7, #12]
 801d418:	7a1a      	ldrb	r2, [r3, #8]
 801d41a:	4b21      	ldr	r3, [pc, #132]	; (801d4a0 <udp_input_local_match+0xc4>)
 801d41c:	685b      	ldr	r3, [r3, #4]
 801d41e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801d422:	3301      	adds	r3, #1
 801d424:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d426:	429a      	cmp	r2, r3
 801d428:	d001      	beq.n	801d42e <udp_input_local_match+0x52>
    return 0;
 801d42a:	2300      	movs	r3, #0
 801d42c:	e02b      	b.n	801d486 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801d42e:	79fb      	ldrb	r3, [r7, #7]
 801d430:	2b00      	cmp	r3, #0
 801d432:	d018      	beq.n	801d466 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801d434:	68fb      	ldr	r3, [r7, #12]
 801d436:	2b00      	cmp	r3, #0
 801d438:	d013      	beq.n	801d462 <udp_input_local_match+0x86>
 801d43a:	68fb      	ldr	r3, [r7, #12]
 801d43c:	681b      	ldr	r3, [r3, #0]
 801d43e:	2b00      	cmp	r3, #0
 801d440:	d00f      	beq.n	801d462 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801d442:	4b17      	ldr	r3, [pc, #92]	; (801d4a0 <udp_input_local_match+0xc4>)
 801d444:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801d446:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d44a:	d00a      	beq.n	801d462 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801d44c:	68fb      	ldr	r3, [r7, #12]
 801d44e:	681a      	ldr	r2, [r3, #0]
 801d450:	4b13      	ldr	r3, [pc, #76]	; (801d4a0 <udp_input_local_match+0xc4>)
 801d452:	695b      	ldr	r3, [r3, #20]
 801d454:	405a      	eors	r2, r3
 801d456:	68bb      	ldr	r3, [r7, #8]
 801d458:	3308      	adds	r3, #8
 801d45a:	681b      	ldr	r3, [r3, #0]
 801d45c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801d45e:	2b00      	cmp	r3, #0
 801d460:	d110      	bne.n	801d484 <udp_input_local_match+0xa8>
          return 1;
 801d462:	2301      	movs	r3, #1
 801d464:	e00f      	b.n	801d486 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801d466:	68fb      	ldr	r3, [r7, #12]
 801d468:	2b00      	cmp	r3, #0
 801d46a:	d009      	beq.n	801d480 <udp_input_local_match+0xa4>
 801d46c:	68fb      	ldr	r3, [r7, #12]
 801d46e:	681b      	ldr	r3, [r3, #0]
 801d470:	2b00      	cmp	r3, #0
 801d472:	d005      	beq.n	801d480 <udp_input_local_match+0xa4>
 801d474:	68fb      	ldr	r3, [r7, #12]
 801d476:	681a      	ldr	r2, [r3, #0]
 801d478:	4b09      	ldr	r3, [pc, #36]	; (801d4a0 <udp_input_local_match+0xc4>)
 801d47a:	695b      	ldr	r3, [r3, #20]
 801d47c:	429a      	cmp	r2, r3
 801d47e:	d101      	bne.n	801d484 <udp_input_local_match+0xa8>
        return 1;
 801d480:	2301      	movs	r3, #1
 801d482:	e000      	b.n	801d486 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801d484:	2300      	movs	r3, #0
}
 801d486:	4618      	mov	r0, r3
 801d488:	3710      	adds	r7, #16
 801d48a:	46bd      	mov	sp, r7
 801d48c:	bd80      	pop	{r7, pc}
 801d48e:	bf00      	nop
 801d490:	08028bfc 	.word	0x08028bfc
 801d494:	08028c2c 	.word	0x08028c2c
 801d498:	08028c50 	.word	0x08028c50
 801d49c:	08028c78 	.word	0x08028c78
 801d4a0:	20011748 	.word	0x20011748

0801d4a4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801d4a4:	b590      	push	{r4, r7, lr}
 801d4a6:	b08d      	sub	sp, #52	; 0x34
 801d4a8:	af02      	add	r7, sp, #8
 801d4aa:	6078      	str	r0, [r7, #4]
 801d4ac:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801d4ae:	2300      	movs	r3, #0
 801d4b0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801d4b2:	687b      	ldr	r3, [r7, #4]
 801d4b4:	2b00      	cmp	r3, #0
 801d4b6:	d105      	bne.n	801d4c4 <udp_input+0x20>
 801d4b8:	4b7c      	ldr	r3, [pc, #496]	; (801d6ac <udp_input+0x208>)
 801d4ba:	22cf      	movs	r2, #207	; 0xcf
 801d4bc:	497c      	ldr	r1, [pc, #496]	; (801d6b0 <udp_input+0x20c>)
 801d4be:	487d      	ldr	r0, [pc, #500]	; (801d6b4 <udp_input+0x210>)
 801d4c0:	f002 fd50 	bl	801ff64 <printf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801d4c4:	683b      	ldr	r3, [r7, #0]
 801d4c6:	2b00      	cmp	r3, #0
 801d4c8:	d105      	bne.n	801d4d6 <udp_input+0x32>
 801d4ca:	4b78      	ldr	r3, [pc, #480]	; (801d6ac <udp_input+0x208>)
 801d4cc:	22d0      	movs	r2, #208	; 0xd0
 801d4ce:	497a      	ldr	r1, [pc, #488]	; (801d6b8 <udp_input+0x214>)
 801d4d0:	4878      	ldr	r0, [pc, #480]	; (801d6b4 <udp_input+0x210>)
 801d4d2:	f002 fd47 	bl	801ff64 <printf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801d4d6:	687b      	ldr	r3, [r7, #4]
 801d4d8:	895b      	ldrh	r3, [r3, #10]
 801d4da:	2b07      	cmp	r3, #7
 801d4dc:	d803      	bhi.n	801d4e6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801d4de:	6878      	ldr	r0, [r7, #4]
 801d4e0:	f7f9 fa58 	bl	8016994 <pbuf_free>
    goto end;
 801d4e4:	e0de      	b.n	801d6a4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801d4e6:	687b      	ldr	r3, [r7, #4]
 801d4e8:	685b      	ldr	r3, [r3, #4]
 801d4ea:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801d4ec:	4b73      	ldr	r3, [pc, #460]	; (801d6bc <udp_input+0x218>)
 801d4ee:	695b      	ldr	r3, [r3, #20]
 801d4f0:	4a72      	ldr	r2, [pc, #456]	; (801d6bc <udp_input+0x218>)
 801d4f2:	6812      	ldr	r2, [r2, #0]
 801d4f4:	4611      	mov	r1, r2
 801d4f6:	4618      	mov	r0, r3
 801d4f8:	f001 fc88 	bl	801ee0c <ip4_addr_isbroadcast_u32>
 801d4fc:	4603      	mov	r3, r0
 801d4fe:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801d500:	697b      	ldr	r3, [r7, #20]
 801d502:	881b      	ldrh	r3, [r3, #0]
 801d504:	b29b      	uxth	r3, r3
 801d506:	4618      	mov	r0, r3
 801d508:	f7f7 fe54 	bl	80151b4 <lwip_htons>
 801d50c:	4603      	mov	r3, r0
 801d50e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801d510:	697b      	ldr	r3, [r7, #20]
 801d512:	885b      	ldrh	r3, [r3, #2]
 801d514:	b29b      	uxth	r3, r3
 801d516:	4618      	mov	r0, r3
 801d518:	f7f7 fe4c 	bl	80151b4 <lwip_htons>
 801d51c:	4603      	mov	r3, r0
 801d51e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801d520:	2300      	movs	r3, #0
 801d522:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801d524:	2300      	movs	r3, #0
 801d526:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801d528:	2300      	movs	r3, #0
 801d52a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801d52c:	4b64      	ldr	r3, [pc, #400]	; (801d6c0 <udp_input+0x21c>)
 801d52e:	681b      	ldr	r3, [r3, #0]
 801d530:	627b      	str	r3, [r7, #36]	; 0x24
 801d532:	e054      	b.n	801d5de <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801d534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d536:	8a5b      	ldrh	r3, [r3, #18]
 801d538:	89fa      	ldrh	r2, [r7, #14]
 801d53a:	429a      	cmp	r2, r3
 801d53c:	d14a      	bne.n	801d5d4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801d53e:	7cfb      	ldrb	r3, [r7, #19]
 801d540:	461a      	mov	r2, r3
 801d542:	6839      	ldr	r1, [r7, #0]
 801d544:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d546:	f7ff ff49 	bl	801d3dc <udp_input_local_match>
 801d54a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801d54c:	2b00      	cmp	r3, #0
 801d54e:	d041      	beq.n	801d5d4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801d550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d552:	7c1b      	ldrb	r3, [r3, #16]
 801d554:	f003 0304 	and.w	r3, r3, #4
 801d558:	2b00      	cmp	r3, #0
 801d55a:	d11d      	bne.n	801d598 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801d55c:	69fb      	ldr	r3, [r7, #28]
 801d55e:	2b00      	cmp	r3, #0
 801d560:	d102      	bne.n	801d568 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801d562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d564:	61fb      	str	r3, [r7, #28]
 801d566:	e017      	b.n	801d598 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801d568:	7cfb      	ldrb	r3, [r7, #19]
 801d56a:	2b00      	cmp	r3, #0
 801d56c:	d014      	beq.n	801d598 <udp_input+0xf4>
 801d56e:	4b53      	ldr	r3, [pc, #332]	; (801d6bc <udp_input+0x218>)
 801d570:	695b      	ldr	r3, [r3, #20]
 801d572:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d576:	d10f      	bne.n	801d598 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801d578:	69fb      	ldr	r3, [r7, #28]
 801d57a:	681a      	ldr	r2, [r3, #0]
 801d57c:	683b      	ldr	r3, [r7, #0]
 801d57e:	3304      	adds	r3, #4
 801d580:	681b      	ldr	r3, [r3, #0]
 801d582:	429a      	cmp	r2, r3
 801d584:	d008      	beq.n	801d598 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801d586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d588:	681a      	ldr	r2, [r3, #0]
 801d58a:	683b      	ldr	r3, [r7, #0]
 801d58c:	3304      	adds	r3, #4
 801d58e:	681b      	ldr	r3, [r3, #0]
 801d590:	429a      	cmp	r2, r3
 801d592:	d101      	bne.n	801d598 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801d594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d596:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801d598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d59a:	8a9b      	ldrh	r3, [r3, #20]
 801d59c:	8a3a      	ldrh	r2, [r7, #16]
 801d59e:	429a      	cmp	r2, r3
 801d5a0:	d118      	bne.n	801d5d4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801d5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5a4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801d5a6:	2b00      	cmp	r3, #0
 801d5a8:	d005      	beq.n	801d5b6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801d5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5ac:	685a      	ldr	r2, [r3, #4]
 801d5ae:	4b43      	ldr	r3, [pc, #268]	; (801d6bc <udp_input+0x218>)
 801d5b0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801d5b2:	429a      	cmp	r2, r3
 801d5b4:	d10e      	bne.n	801d5d4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801d5b6:	6a3b      	ldr	r3, [r7, #32]
 801d5b8:	2b00      	cmp	r3, #0
 801d5ba:	d014      	beq.n	801d5e6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801d5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5be:	68da      	ldr	r2, [r3, #12]
 801d5c0:	6a3b      	ldr	r3, [r7, #32]
 801d5c2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801d5c4:	4b3e      	ldr	r3, [pc, #248]	; (801d6c0 <udp_input+0x21c>)
 801d5c6:	681a      	ldr	r2, [r3, #0]
 801d5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5ca:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801d5cc:	4a3c      	ldr	r2, [pc, #240]	; (801d6c0 <udp_input+0x21c>)
 801d5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5d0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801d5d2:	e008      	b.n	801d5e6 <udp_input+0x142>
      }
    }

    prev = pcb;
 801d5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5d6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801d5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5da:	68db      	ldr	r3, [r3, #12]
 801d5dc:	627b      	str	r3, [r7, #36]	; 0x24
 801d5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5e0:	2b00      	cmp	r3, #0
 801d5e2:	d1a7      	bne.n	801d534 <udp_input+0x90>
 801d5e4:	e000      	b.n	801d5e8 <udp_input+0x144>
        break;
 801d5e6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801d5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5ea:	2b00      	cmp	r3, #0
 801d5ec:	d101      	bne.n	801d5f2 <udp_input+0x14e>
    pcb = uncon_pcb;
 801d5ee:	69fb      	ldr	r3, [r7, #28]
 801d5f0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801d5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5f4:	2b00      	cmp	r3, #0
 801d5f6:	d002      	beq.n	801d5fe <udp_input+0x15a>
    for_us = 1;
 801d5f8:	2301      	movs	r3, #1
 801d5fa:	76fb      	strb	r3, [r7, #27]
 801d5fc:	e00a      	b.n	801d614 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801d5fe:	683b      	ldr	r3, [r7, #0]
 801d600:	3304      	adds	r3, #4
 801d602:	681a      	ldr	r2, [r3, #0]
 801d604:	4b2d      	ldr	r3, [pc, #180]	; (801d6bc <udp_input+0x218>)
 801d606:	695b      	ldr	r3, [r3, #20]
 801d608:	429a      	cmp	r2, r3
 801d60a:	bf0c      	ite	eq
 801d60c:	2301      	moveq	r3, #1
 801d60e:	2300      	movne	r3, #0
 801d610:	b2db      	uxtb	r3, r3
 801d612:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801d614:	7efb      	ldrb	r3, [r7, #27]
 801d616:	2b00      	cmp	r3, #0
 801d618:	d041      	beq.n	801d69e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801d61a:	2108      	movs	r1, #8
 801d61c:	6878      	ldr	r0, [r7, #4]
 801d61e:	f7f9 f933 	bl	8016888 <pbuf_remove_header>
 801d622:	4603      	mov	r3, r0
 801d624:	2b00      	cmp	r3, #0
 801d626:	d00a      	beq.n	801d63e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801d628:	4b20      	ldr	r3, [pc, #128]	; (801d6ac <udp_input+0x208>)
 801d62a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801d62e:	4925      	ldr	r1, [pc, #148]	; (801d6c4 <udp_input+0x220>)
 801d630:	4820      	ldr	r0, [pc, #128]	; (801d6b4 <udp_input+0x210>)
 801d632:	f002 fc97 	bl	801ff64 <printf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801d636:	6878      	ldr	r0, [r7, #4]
 801d638:	f7f9 f9ac 	bl	8016994 <pbuf_free>
      goto end;
 801d63c:	e032      	b.n	801d6a4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801d63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d640:	2b00      	cmp	r3, #0
 801d642:	d012      	beq.n	801d66a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801d644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d646:	699b      	ldr	r3, [r3, #24]
 801d648:	2b00      	cmp	r3, #0
 801d64a:	d00a      	beq.n	801d662 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801d64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d64e:	699c      	ldr	r4, [r3, #24]
 801d650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d652:	69d8      	ldr	r0, [r3, #28]
 801d654:	8a3b      	ldrh	r3, [r7, #16]
 801d656:	9300      	str	r3, [sp, #0]
 801d658:	4b1b      	ldr	r3, [pc, #108]	; (801d6c8 <udp_input+0x224>)
 801d65a:	687a      	ldr	r2, [r7, #4]
 801d65c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d65e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801d660:	e021      	b.n	801d6a6 <udp_input+0x202>
        pbuf_free(p);
 801d662:	6878      	ldr	r0, [r7, #4]
 801d664:	f7f9 f996 	bl	8016994 <pbuf_free>
        goto end;
 801d668:	e01c      	b.n	801d6a4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801d66a:	7cfb      	ldrb	r3, [r7, #19]
 801d66c:	2b00      	cmp	r3, #0
 801d66e:	d112      	bne.n	801d696 <udp_input+0x1f2>
 801d670:	4b12      	ldr	r3, [pc, #72]	; (801d6bc <udp_input+0x218>)
 801d672:	695b      	ldr	r3, [r3, #20]
 801d674:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801d678:	2be0      	cmp	r3, #224	; 0xe0
 801d67a:	d00c      	beq.n	801d696 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801d67c:	4b0f      	ldr	r3, [pc, #60]	; (801d6bc <udp_input+0x218>)
 801d67e:	899b      	ldrh	r3, [r3, #12]
 801d680:	3308      	adds	r3, #8
 801d682:	b29b      	uxth	r3, r3
 801d684:	b21b      	sxth	r3, r3
 801d686:	4619      	mov	r1, r3
 801d688:	6878      	ldr	r0, [r7, #4]
 801d68a:	f7f9 f970 	bl	801696e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801d68e:	2103      	movs	r1, #3
 801d690:	6878      	ldr	r0, [r7, #4]
 801d692:	f001 f89b 	bl	801e7cc <icmp_dest_unreach>
      pbuf_free(p);
 801d696:	6878      	ldr	r0, [r7, #4]
 801d698:	f7f9 f97c 	bl	8016994 <pbuf_free>
  return;
 801d69c:	e003      	b.n	801d6a6 <udp_input+0x202>
    pbuf_free(p);
 801d69e:	6878      	ldr	r0, [r7, #4]
 801d6a0:	f7f9 f978 	bl	8016994 <pbuf_free>
  return;
 801d6a4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801d6a6:	372c      	adds	r7, #44	; 0x2c
 801d6a8:	46bd      	mov	sp, r7
 801d6aa:	bd90      	pop	{r4, r7, pc}
 801d6ac:	08028bfc 	.word	0x08028bfc
 801d6b0:	08028ca0 	.word	0x08028ca0
 801d6b4:	08028c50 	.word	0x08028c50
 801d6b8:	08028cb8 	.word	0x08028cb8
 801d6bc:	20011748 	.word	0x20011748
 801d6c0:	200188f8 	.word	0x200188f8
 801d6c4:	08028cd4 	.word	0x08028cd4
 801d6c8:	20011758 	.word	0x20011758

0801d6cc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801d6cc:	b480      	push	{r7}
 801d6ce:	b085      	sub	sp, #20
 801d6d0:	af00      	add	r7, sp, #0
 801d6d2:	6078      	str	r0, [r7, #4]
 801d6d4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801d6d6:	687b      	ldr	r3, [r7, #4]
 801d6d8:	2b00      	cmp	r3, #0
 801d6da:	d01e      	beq.n	801d71a <udp_netif_ip_addr_changed+0x4e>
 801d6dc:	687b      	ldr	r3, [r7, #4]
 801d6de:	681b      	ldr	r3, [r3, #0]
 801d6e0:	2b00      	cmp	r3, #0
 801d6e2:	d01a      	beq.n	801d71a <udp_netif_ip_addr_changed+0x4e>
 801d6e4:	683b      	ldr	r3, [r7, #0]
 801d6e6:	2b00      	cmp	r3, #0
 801d6e8:	d017      	beq.n	801d71a <udp_netif_ip_addr_changed+0x4e>
 801d6ea:	683b      	ldr	r3, [r7, #0]
 801d6ec:	681b      	ldr	r3, [r3, #0]
 801d6ee:	2b00      	cmp	r3, #0
 801d6f0:	d013      	beq.n	801d71a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801d6f2:	4b0d      	ldr	r3, [pc, #52]	; (801d728 <udp_netif_ip_addr_changed+0x5c>)
 801d6f4:	681b      	ldr	r3, [r3, #0]
 801d6f6:	60fb      	str	r3, [r7, #12]
 801d6f8:	e00c      	b.n	801d714 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801d6fa:	68fb      	ldr	r3, [r7, #12]
 801d6fc:	681a      	ldr	r2, [r3, #0]
 801d6fe:	687b      	ldr	r3, [r7, #4]
 801d700:	681b      	ldr	r3, [r3, #0]
 801d702:	429a      	cmp	r2, r3
 801d704:	d103      	bne.n	801d70e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801d706:	683b      	ldr	r3, [r7, #0]
 801d708:	681a      	ldr	r2, [r3, #0]
 801d70a:	68fb      	ldr	r3, [r7, #12]
 801d70c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801d70e:	68fb      	ldr	r3, [r7, #12]
 801d710:	68db      	ldr	r3, [r3, #12]
 801d712:	60fb      	str	r3, [r7, #12]
 801d714:	68fb      	ldr	r3, [r7, #12]
 801d716:	2b00      	cmp	r3, #0
 801d718:	d1ef      	bne.n	801d6fa <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801d71a:	bf00      	nop
 801d71c:	3714      	adds	r7, #20
 801d71e:	46bd      	mov	sp, r7
 801d720:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d724:	4770      	bx	lr
 801d726:	bf00      	nop
 801d728:	200188f8 	.word	0x200188f8

0801d72c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801d72c:	b580      	push	{r7, lr}
 801d72e:	b082      	sub	sp, #8
 801d730:	af00      	add	r7, sp, #0
 801d732:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801d734:	4915      	ldr	r1, [pc, #84]	; (801d78c <etharp_free_entry+0x60>)
 801d736:	687a      	ldr	r2, [r7, #4]
 801d738:	4613      	mov	r3, r2
 801d73a:	005b      	lsls	r3, r3, #1
 801d73c:	4413      	add	r3, r2
 801d73e:	00db      	lsls	r3, r3, #3
 801d740:	440b      	add	r3, r1
 801d742:	681b      	ldr	r3, [r3, #0]
 801d744:	2b00      	cmp	r3, #0
 801d746:	d013      	beq.n	801d770 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801d748:	4910      	ldr	r1, [pc, #64]	; (801d78c <etharp_free_entry+0x60>)
 801d74a:	687a      	ldr	r2, [r7, #4]
 801d74c:	4613      	mov	r3, r2
 801d74e:	005b      	lsls	r3, r3, #1
 801d750:	4413      	add	r3, r2
 801d752:	00db      	lsls	r3, r3, #3
 801d754:	440b      	add	r3, r1
 801d756:	681b      	ldr	r3, [r3, #0]
 801d758:	4618      	mov	r0, r3
 801d75a:	f7f9 f91b 	bl	8016994 <pbuf_free>
    arp_table[i].q = NULL;
 801d75e:	490b      	ldr	r1, [pc, #44]	; (801d78c <etharp_free_entry+0x60>)
 801d760:	687a      	ldr	r2, [r7, #4]
 801d762:	4613      	mov	r3, r2
 801d764:	005b      	lsls	r3, r3, #1
 801d766:	4413      	add	r3, r2
 801d768:	00db      	lsls	r3, r3, #3
 801d76a:	440b      	add	r3, r1
 801d76c:	2200      	movs	r2, #0
 801d76e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801d770:	4906      	ldr	r1, [pc, #24]	; (801d78c <etharp_free_entry+0x60>)
 801d772:	687a      	ldr	r2, [r7, #4]
 801d774:	4613      	mov	r3, r2
 801d776:	005b      	lsls	r3, r3, #1
 801d778:	4413      	add	r3, r2
 801d77a:	00db      	lsls	r3, r3, #3
 801d77c:	440b      	add	r3, r1
 801d77e:	3314      	adds	r3, #20
 801d780:	2200      	movs	r2, #0
 801d782:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801d784:	bf00      	nop
 801d786:	3708      	adds	r7, #8
 801d788:	46bd      	mov	sp, r7
 801d78a:	bd80      	pop	{r7, pc}
 801d78c:	200188fc 	.word	0x200188fc

0801d790 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801d790:	b580      	push	{r7, lr}
 801d792:	b082      	sub	sp, #8
 801d794:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d796:	2300      	movs	r3, #0
 801d798:	607b      	str	r3, [r7, #4]
 801d79a:	e096      	b.n	801d8ca <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801d79c:	494f      	ldr	r1, [pc, #316]	; (801d8dc <etharp_tmr+0x14c>)
 801d79e:	687a      	ldr	r2, [r7, #4]
 801d7a0:	4613      	mov	r3, r2
 801d7a2:	005b      	lsls	r3, r3, #1
 801d7a4:	4413      	add	r3, r2
 801d7a6:	00db      	lsls	r3, r3, #3
 801d7a8:	440b      	add	r3, r1
 801d7aa:	3314      	adds	r3, #20
 801d7ac:	781b      	ldrb	r3, [r3, #0]
 801d7ae:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801d7b0:	78fb      	ldrb	r3, [r7, #3]
 801d7b2:	2b00      	cmp	r3, #0
 801d7b4:	f000 8086 	beq.w	801d8c4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801d7b8:	4948      	ldr	r1, [pc, #288]	; (801d8dc <etharp_tmr+0x14c>)
 801d7ba:	687a      	ldr	r2, [r7, #4]
 801d7bc:	4613      	mov	r3, r2
 801d7be:	005b      	lsls	r3, r3, #1
 801d7c0:	4413      	add	r3, r2
 801d7c2:	00db      	lsls	r3, r3, #3
 801d7c4:	440b      	add	r3, r1
 801d7c6:	3312      	adds	r3, #18
 801d7c8:	881b      	ldrh	r3, [r3, #0]
 801d7ca:	3301      	adds	r3, #1
 801d7cc:	b298      	uxth	r0, r3
 801d7ce:	4943      	ldr	r1, [pc, #268]	; (801d8dc <etharp_tmr+0x14c>)
 801d7d0:	687a      	ldr	r2, [r7, #4]
 801d7d2:	4613      	mov	r3, r2
 801d7d4:	005b      	lsls	r3, r3, #1
 801d7d6:	4413      	add	r3, r2
 801d7d8:	00db      	lsls	r3, r3, #3
 801d7da:	440b      	add	r3, r1
 801d7dc:	3312      	adds	r3, #18
 801d7de:	4602      	mov	r2, r0
 801d7e0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801d7e2:	493e      	ldr	r1, [pc, #248]	; (801d8dc <etharp_tmr+0x14c>)
 801d7e4:	687a      	ldr	r2, [r7, #4]
 801d7e6:	4613      	mov	r3, r2
 801d7e8:	005b      	lsls	r3, r3, #1
 801d7ea:	4413      	add	r3, r2
 801d7ec:	00db      	lsls	r3, r3, #3
 801d7ee:	440b      	add	r3, r1
 801d7f0:	3312      	adds	r3, #18
 801d7f2:	881b      	ldrh	r3, [r3, #0]
 801d7f4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801d7f8:	d215      	bcs.n	801d826 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801d7fa:	4938      	ldr	r1, [pc, #224]	; (801d8dc <etharp_tmr+0x14c>)
 801d7fc:	687a      	ldr	r2, [r7, #4]
 801d7fe:	4613      	mov	r3, r2
 801d800:	005b      	lsls	r3, r3, #1
 801d802:	4413      	add	r3, r2
 801d804:	00db      	lsls	r3, r3, #3
 801d806:	440b      	add	r3, r1
 801d808:	3314      	adds	r3, #20
 801d80a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801d80c:	2b01      	cmp	r3, #1
 801d80e:	d10e      	bne.n	801d82e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801d810:	4932      	ldr	r1, [pc, #200]	; (801d8dc <etharp_tmr+0x14c>)
 801d812:	687a      	ldr	r2, [r7, #4]
 801d814:	4613      	mov	r3, r2
 801d816:	005b      	lsls	r3, r3, #1
 801d818:	4413      	add	r3, r2
 801d81a:	00db      	lsls	r3, r3, #3
 801d81c:	440b      	add	r3, r1
 801d81e:	3312      	adds	r3, #18
 801d820:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801d822:	2b04      	cmp	r3, #4
 801d824:	d903      	bls.n	801d82e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801d826:	6878      	ldr	r0, [r7, #4]
 801d828:	f7ff ff80 	bl	801d72c <etharp_free_entry>
 801d82c:	e04a      	b.n	801d8c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801d82e:	492b      	ldr	r1, [pc, #172]	; (801d8dc <etharp_tmr+0x14c>)
 801d830:	687a      	ldr	r2, [r7, #4]
 801d832:	4613      	mov	r3, r2
 801d834:	005b      	lsls	r3, r3, #1
 801d836:	4413      	add	r3, r2
 801d838:	00db      	lsls	r3, r3, #3
 801d83a:	440b      	add	r3, r1
 801d83c:	3314      	adds	r3, #20
 801d83e:	781b      	ldrb	r3, [r3, #0]
 801d840:	2b03      	cmp	r3, #3
 801d842:	d10a      	bne.n	801d85a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801d844:	4925      	ldr	r1, [pc, #148]	; (801d8dc <etharp_tmr+0x14c>)
 801d846:	687a      	ldr	r2, [r7, #4]
 801d848:	4613      	mov	r3, r2
 801d84a:	005b      	lsls	r3, r3, #1
 801d84c:	4413      	add	r3, r2
 801d84e:	00db      	lsls	r3, r3, #3
 801d850:	440b      	add	r3, r1
 801d852:	3314      	adds	r3, #20
 801d854:	2204      	movs	r2, #4
 801d856:	701a      	strb	r2, [r3, #0]
 801d858:	e034      	b.n	801d8c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801d85a:	4920      	ldr	r1, [pc, #128]	; (801d8dc <etharp_tmr+0x14c>)
 801d85c:	687a      	ldr	r2, [r7, #4]
 801d85e:	4613      	mov	r3, r2
 801d860:	005b      	lsls	r3, r3, #1
 801d862:	4413      	add	r3, r2
 801d864:	00db      	lsls	r3, r3, #3
 801d866:	440b      	add	r3, r1
 801d868:	3314      	adds	r3, #20
 801d86a:	781b      	ldrb	r3, [r3, #0]
 801d86c:	2b04      	cmp	r3, #4
 801d86e:	d10a      	bne.n	801d886 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801d870:	491a      	ldr	r1, [pc, #104]	; (801d8dc <etharp_tmr+0x14c>)
 801d872:	687a      	ldr	r2, [r7, #4]
 801d874:	4613      	mov	r3, r2
 801d876:	005b      	lsls	r3, r3, #1
 801d878:	4413      	add	r3, r2
 801d87a:	00db      	lsls	r3, r3, #3
 801d87c:	440b      	add	r3, r1
 801d87e:	3314      	adds	r3, #20
 801d880:	2202      	movs	r2, #2
 801d882:	701a      	strb	r2, [r3, #0]
 801d884:	e01e      	b.n	801d8c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801d886:	4915      	ldr	r1, [pc, #84]	; (801d8dc <etharp_tmr+0x14c>)
 801d888:	687a      	ldr	r2, [r7, #4]
 801d88a:	4613      	mov	r3, r2
 801d88c:	005b      	lsls	r3, r3, #1
 801d88e:	4413      	add	r3, r2
 801d890:	00db      	lsls	r3, r3, #3
 801d892:	440b      	add	r3, r1
 801d894:	3314      	adds	r3, #20
 801d896:	781b      	ldrb	r3, [r3, #0]
 801d898:	2b01      	cmp	r3, #1
 801d89a:	d113      	bne.n	801d8c4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801d89c:	490f      	ldr	r1, [pc, #60]	; (801d8dc <etharp_tmr+0x14c>)
 801d89e:	687a      	ldr	r2, [r7, #4]
 801d8a0:	4613      	mov	r3, r2
 801d8a2:	005b      	lsls	r3, r3, #1
 801d8a4:	4413      	add	r3, r2
 801d8a6:	00db      	lsls	r3, r3, #3
 801d8a8:	440b      	add	r3, r1
 801d8aa:	3308      	adds	r3, #8
 801d8ac:	6818      	ldr	r0, [r3, #0]
 801d8ae:	687a      	ldr	r2, [r7, #4]
 801d8b0:	4613      	mov	r3, r2
 801d8b2:	005b      	lsls	r3, r3, #1
 801d8b4:	4413      	add	r3, r2
 801d8b6:	00db      	lsls	r3, r3, #3
 801d8b8:	4a08      	ldr	r2, [pc, #32]	; (801d8dc <etharp_tmr+0x14c>)
 801d8ba:	4413      	add	r3, r2
 801d8bc:	3304      	adds	r3, #4
 801d8be:	4619      	mov	r1, r3
 801d8c0:	f000 fe6e 	bl	801e5a0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d8c4:	687b      	ldr	r3, [r7, #4]
 801d8c6:	3301      	adds	r3, #1
 801d8c8:	607b      	str	r3, [r7, #4]
 801d8ca:	687b      	ldr	r3, [r7, #4]
 801d8cc:	2b09      	cmp	r3, #9
 801d8ce:	f77f af65 	ble.w	801d79c <etharp_tmr+0xc>
      }
    }
  }
}
 801d8d2:	bf00      	nop
 801d8d4:	bf00      	nop
 801d8d6:	3708      	adds	r7, #8
 801d8d8:	46bd      	mov	sp, r7
 801d8da:	bd80      	pop	{r7, pc}
 801d8dc:	200188fc 	.word	0x200188fc

0801d8e0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801d8e0:	b580      	push	{r7, lr}
 801d8e2:	b08a      	sub	sp, #40	; 0x28
 801d8e4:	af00      	add	r7, sp, #0
 801d8e6:	60f8      	str	r0, [r7, #12]
 801d8e8:	460b      	mov	r3, r1
 801d8ea:	607a      	str	r2, [r7, #4]
 801d8ec:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801d8ee:	230a      	movs	r3, #10
 801d8f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 801d8f2:	230a      	movs	r3, #10
 801d8f4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801d8f6:	230a      	movs	r3, #10
 801d8f8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801d8fa:	2300      	movs	r3, #0
 801d8fc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801d8fe:	230a      	movs	r3, #10
 801d900:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801d902:	2300      	movs	r3, #0
 801d904:	83bb      	strh	r3, [r7, #28]
 801d906:	2300      	movs	r3, #0
 801d908:	837b      	strh	r3, [r7, #26]
 801d90a:	2300      	movs	r3, #0
 801d90c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d90e:	2300      	movs	r3, #0
 801d910:	843b      	strh	r3, [r7, #32]
 801d912:	e0ae      	b.n	801da72 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801d914:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d918:	49a6      	ldr	r1, [pc, #664]	; (801dbb4 <etharp_find_entry+0x2d4>)
 801d91a:	4613      	mov	r3, r2
 801d91c:	005b      	lsls	r3, r3, #1
 801d91e:	4413      	add	r3, r2
 801d920:	00db      	lsls	r3, r3, #3
 801d922:	440b      	add	r3, r1
 801d924:	3314      	adds	r3, #20
 801d926:	781b      	ldrb	r3, [r3, #0]
 801d928:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801d92a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801d92e:	2b0a      	cmp	r3, #10
 801d930:	d105      	bne.n	801d93e <etharp_find_entry+0x5e>
 801d932:	7dfb      	ldrb	r3, [r7, #23]
 801d934:	2b00      	cmp	r3, #0
 801d936:	d102      	bne.n	801d93e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801d938:	8c3b      	ldrh	r3, [r7, #32]
 801d93a:	847b      	strh	r3, [r7, #34]	; 0x22
 801d93c:	e095      	b.n	801da6a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801d93e:	7dfb      	ldrb	r3, [r7, #23]
 801d940:	2b00      	cmp	r3, #0
 801d942:	f000 8092 	beq.w	801da6a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801d946:	7dfb      	ldrb	r3, [r7, #23]
 801d948:	2b01      	cmp	r3, #1
 801d94a:	d009      	beq.n	801d960 <etharp_find_entry+0x80>
 801d94c:	7dfb      	ldrb	r3, [r7, #23]
 801d94e:	2b01      	cmp	r3, #1
 801d950:	d806      	bhi.n	801d960 <etharp_find_entry+0x80>
 801d952:	4b99      	ldr	r3, [pc, #612]	; (801dbb8 <etharp_find_entry+0x2d8>)
 801d954:	f240 1223 	movw	r2, #291	; 0x123
 801d958:	4998      	ldr	r1, [pc, #608]	; (801dbbc <etharp_find_entry+0x2dc>)
 801d95a:	4899      	ldr	r0, [pc, #612]	; (801dbc0 <etharp_find_entry+0x2e0>)
 801d95c:	f002 fb02 	bl	801ff64 <printf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801d960:	68fb      	ldr	r3, [r7, #12]
 801d962:	2b00      	cmp	r3, #0
 801d964:	d020      	beq.n	801d9a8 <etharp_find_entry+0xc8>
 801d966:	68fb      	ldr	r3, [r7, #12]
 801d968:	6819      	ldr	r1, [r3, #0]
 801d96a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d96e:	4891      	ldr	r0, [pc, #580]	; (801dbb4 <etharp_find_entry+0x2d4>)
 801d970:	4613      	mov	r3, r2
 801d972:	005b      	lsls	r3, r3, #1
 801d974:	4413      	add	r3, r2
 801d976:	00db      	lsls	r3, r3, #3
 801d978:	4403      	add	r3, r0
 801d97a:	3304      	adds	r3, #4
 801d97c:	681b      	ldr	r3, [r3, #0]
 801d97e:	4299      	cmp	r1, r3
 801d980:	d112      	bne.n	801d9a8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801d982:	687b      	ldr	r3, [r7, #4]
 801d984:	2b00      	cmp	r3, #0
 801d986:	d00c      	beq.n	801d9a2 <etharp_find_entry+0xc2>
 801d988:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d98c:	4989      	ldr	r1, [pc, #548]	; (801dbb4 <etharp_find_entry+0x2d4>)
 801d98e:	4613      	mov	r3, r2
 801d990:	005b      	lsls	r3, r3, #1
 801d992:	4413      	add	r3, r2
 801d994:	00db      	lsls	r3, r3, #3
 801d996:	440b      	add	r3, r1
 801d998:	3308      	adds	r3, #8
 801d99a:	681b      	ldr	r3, [r3, #0]
 801d99c:	687a      	ldr	r2, [r7, #4]
 801d99e:	429a      	cmp	r2, r3
 801d9a0:	d102      	bne.n	801d9a8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801d9a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801d9a6:	e100      	b.n	801dbaa <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801d9a8:	7dfb      	ldrb	r3, [r7, #23]
 801d9aa:	2b01      	cmp	r3, #1
 801d9ac:	d140      	bne.n	801da30 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801d9ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d9b2:	4980      	ldr	r1, [pc, #512]	; (801dbb4 <etharp_find_entry+0x2d4>)
 801d9b4:	4613      	mov	r3, r2
 801d9b6:	005b      	lsls	r3, r3, #1
 801d9b8:	4413      	add	r3, r2
 801d9ba:	00db      	lsls	r3, r3, #3
 801d9bc:	440b      	add	r3, r1
 801d9be:	681b      	ldr	r3, [r3, #0]
 801d9c0:	2b00      	cmp	r3, #0
 801d9c2:	d01a      	beq.n	801d9fa <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801d9c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d9c8:	497a      	ldr	r1, [pc, #488]	; (801dbb4 <etharp_find_entry+0x2d4>)
 801d9ca:	4613      	mov	r3, r2
 801d9cc:	005b      	lsls	r3, r3, #1
 801d9ce:	4413      	add	r3, r2
 801d9d0:	00db      	lsls	r3, r3, #3
 801d9d2:	440b      	add	r3, r1
 801d9d4:	3312      	adds	r3, #18
 801d9d6:	881b      	ldrh	r3, [r3, #0]
 801d9d8:	8bba      	ldrh	r2, [r7, #28]
 801d9da:	429a      	cmp	r2, r3
 801d9dc:	d845      	bhi.n	801da6a <etharp_find_entry+0x18a>
            old_queue = i;
 801d9de:	8c3b      	ldrh	r3, [r7, #32]
 801d9e0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801d9e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d9e6:	4973      	ldr	r1, [pc, #460]	; (801dbb4 <etharp_find_entry+0x2d4>)
 801d9e8:	4613      	mov	r3, r2
 801d9ea:	005b      	lsls	r3, r3, #1
 801d9ec:	4413      	add	r3, r2
 801d9ee:	00db      	lsls	r3, r3, #3
 801d9f0:	440b      	add	r3, r1
 801d9f2:	3312      	adds	r3, #18
 801d9f4:	881b      	ldrh	r3, [r3, #0]
 801d9f6:	83bb      	strh	r3, [r7, #28]
 801d9f8:	e037      	b.n	801da6a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801d9fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d9fe:	496d      	ldr	r1, [pc, #436]	; (801dbb4 <etharp_find_entry+0x2d4>)
 801da00:	4613      	mov	r3, r2
 801da02:	005b      	lsls	r3, r3, #1
 801da04:	4413      	add	r3, r2
 801da06:	00db      	lsls	r3, r3, #3
 801da08:	440b      	add	r3, r1
 801da0a:	3312      	adds	r3, #18
 801da0c:	881b      	ldrh	r3, [r3, #0]
 801da0e:	8b7a      	ldrh	r2, [r7, #26]
 801da10:	429a      	cmp	r2, r3
 801da12:	d82a      	bhi.n	801da6a <etharp_find_entry+0x18a>
            old_pending = i;
 801da14:	8c3b      	ldrh	r3, [r7, #32]
 801da16:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801da18:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801da1c:	4965      	ldr	r1, [pc, #404]	; (801dbb4 <etharp_find_entry+0x2d4>)
 801da1e:	4613      	mov	r3, r2
 801da20:	005b      	lsls	r3, r3, #1
 801da22:	4413      	add	r3, r2
 801da24:	00db      	lsls	r3, r3, #3
 801da26:	440b      	add	r3, r1
 801da28:	3312      	adds	r3, #18
 801da2a:	881b      	ldrh	r3, [r3, #0]
 801da2c:	837b      	strh	r3, [r7, #26]
 801da2e:	e01c      	b.n	801da6a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801da30:	7dfb      	ldrb	r3, [r7, #23]
 801da32:	2b01      	cmp	r3, #1
 801da34:	d919      	bls.n	801da6a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801da36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801da3a:	495e      	ldr	r1, [pc, #376]	; (801dbb4 <etharp_find_entry+0x2d4>)
 801da3c:	4613      	mov	r3, r2
 801da3e:	005b      	lsls	r3, r3, #1
 801da40:	4413      	add	r3, r2
 801da42:	00db      	lsls	r3, r3, #3
 801da44:	440b      	add	r3, r1
 801da46:	3312      	adds	r3, #18
 801da48:	881b      	ldrh	r3, [r3, #0]
 801da4a:	8b3a      	ldrh	r2, [r7, #24]
 801da4c:	429a      	cmp	r2, r3
 801da4e:	d80c      	bhi.n	801da6a <etharp_find_entry+0x18a>
            old_stable = i;
 801da50:	8c3b      	ldrh	r3, [r7, #32]
 801da52:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801da54:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801da58:	4956      	ldr	r1, [pc, #344]	; (801dbb4 <etharp_find_entry+0x2d4>)
 801da5a:	4613      	mov	r3, r2
 801da5c:	005b      	lsls	r3, r3, #1
 801da5e:	4413      	add	r3, r2
 801da60:	00db      	lsls	r3, r3, #3
 801da62:	440b      	add	r3, r1
 801da64:	3312      	adds	r3, #18
 801da66:	881b      	ldrh	r3, [r3, #0]
 801da68:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801da6a:	8c3b      	ldrh	r3, [r7, #32]
 801da6c:	3301      	adds	r3, #1
 801da6e:	b29b      	uxth	r3, r3
 801da70:	843b      	strh	r3, [r7, #32]
 801da72:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801da76:	2b09      	cmp	r3, #9
 801da78:	f77f af4c 	ble.w	801d914 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801da7c:	7afb      	ldrb	r3, [r7, #11]
 801da7e:	f003 0302 	and.w	r3, r3, #2
 801da82:	2b00      	cmp	r3, #0
 801da84:	d108      	bne.n	801da98 <etharp_find_entry+0x1b8>
 801da86:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801da8a:	2b0a      	cmp	r3, #10
 801da8c:	d107      	bne.n	801da9e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801da8e:	7afb      	ldrb	r3, [r7, #11]
 801da90:	f003 0301 	and.w	r3, r3, #1
 801da94:	2b00      	cmp	r3, #0
 801da96:	d102      	bne.n	801da9e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801da98:	f04f 33ff 	mov.w	r3, #4294967295
 801da9c:	e085      	b.n	801dbaa <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801da9e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801daa2:	2b09      	cmp	r3, #9
 801daa4:	dc02      	bgt.n	801daac <etharp_find_entry+0x1cc>
    i = empty;
 801daa6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801daa8:	843b      	strh	r3, [r7, #32]
 801daaa:	e039      	b.n	801db20 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801daac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801dab0:	2b09      	cmp	r3, #9
 801dab2:	dc14      	bgt.n	801dade <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801dab4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801dab6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801dab8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801dabc:	493d      	ldr	r1, [pc, #244]	; (801dbb4 <etharp_find_entry+0x2d4>)
 801dabe:	4613      	mov	r3, r2
 801dac0:	005b      	lsls	r3, r3, #1
 801dac2:	4413      	add	r3, r2
 801dac4:	00db      	lsls	r3, r3, #3
 801dac6:	440b      	add	r3, r1
 801dac8:	681b      	ldr	r3, [r3, #0]
 801daca:	2b00      	cmp	r3, #0
 801dacc:	d018      	beq.n	801db00 <etharp_find_entry+0x220>
 801dace:	4b3a      	ldr	r3, [pc, #232]	; (801dbb8 <etharp_find_entry+0x2d8>)
 801dad0:	f240 126d 	movw	r2, #365	; 0x16d
 801dad4:	493b      	ldr	r1, [pc, #236]	; (801dbc4 <etharp_find_entry+0x2e4>)
 801dad6:	483a      	ldr	r0, [pc, #232]	; (801dbc0 <etharp_find_entry+0x2e0>)
 801dad8:	f002 fa44 	bl	801ff64 <printf>
 801dadc:	e010      	b.n	801db00 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801dade:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801dae2:	2b09      	cmp	r3, #9
 801dae4:	dc02      	bgt.n	801daec <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801dae6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801dae8:	843b      	strh	r3, [r7, #32]
 801daea:	e009      	b.n	801db00 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801daec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801daf0:	2b09      	cmp	r3, #9
 801daf2:	dc02      	bgt.n	801dafa <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801daf4:	8bfb      	ldrh	r3, [r7, #30]
 801daf6:	843b      	strh	r3, [r7, #32]
 801daf8:	e002      	b.n	801db00 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801dafa:	f04f 33ff 	mov.w	r3, #4294967295
 801dafe:	e054      	b.n	801dbaa <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801db00:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801db04:	2b09      	cmp	r3, #9
 801db06:	dd06      	ble.n	801db16 <etharp_find_entry+0x236>
 801db08:	4b2b      	ldr	r3, [pc, #172]	; (801dbb8 <etharp_find_entry+0x2d8>)
 801db0a:	f240 127f 	movw	r2, #383	; 0x17f
 801db0e:	492e      	ldr	r1, [pc, #184]	; (801dbc8 <etharp_find_entry+0x2e8>)
 801db10:	482b      	ldr	r0, [pc, #172]	; (801dbc0 <etharp_find_entry+0x2e0>)
 801db12:	f002 fa27 	bl	801ff64 <printf>
    etharp_free_entry(i);
 801db16:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801db1a:	4618      	mov	r0, r3
 801db1c:	f7ff fe06 	bl	801d72c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801db20:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801db24:	2b09      	cmp	r3, #9
 801db26:	dd06      	ble.n	801db36 <etharp_find_entry+0x256>
 801db28:	4b23      	ldr	r3, [pc, #140]	; (801dbb8 <etharp_find_entry+0x2d8>)
 801db2a:	f240 1283 	movw	r2, #387	; 0x183
 801db2e:	4926      	ldr	r1, [pc, #152]	; (801dbc8 <etharp_find_entry+0x2e8>)
 801db30:	4823      	ldr	r0, [pc, #140]	; (801dbc0 <etharp_find_entry+0x2e0>)
 801db32:	f002 fa17 	bl	801ff64 <printf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801db36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801db3a:	491e      	ldr	r1, [pc, #120]	; (801dbb4 <etharp_find_entry+0x2d4>)
 801db3c:	4613      	mov	r3, r2
 801db3e:	005b      	lsls	r3, r3, #1
 801db40:	4413      	add	r3, r2
 801db42:	00db      	lsls	r3, r3, #3
 801db44:	440b      	add	r3, r1
 801db46:	3314      	adds	r3, #20
 801db48:	781b      	ldrb	r3, [r3, #0]
 801db4a:	2b00      	cmp	r3, #0
 801db4c:	d006      	beq.n	801db5c <etharp_find_entry+0x27c>
 801db4e:	4b1a      	ldr	r3, [pc, #104]	; (801dbb8 <etharp_find_entry+0x2d8>)
 801db50:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801db54:	491d      	ldr	r1, [pc, #116]	; (801dbcc <etharp_find_entry+0x2ec>)
 801db56:	481a      	ldr	r0, [pc, #104]	; (801dbc0 <etharp_find_entry+0x2e0>)
 801db58:	f002 fa04 	bl	801ff64 <printf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801db5c:	68fb      	ldr	r3, [r7, #12]
 801db5e:	2b00      	cmp	r3, #0
 801db60:	d00b      	beq.n	801db7a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801db62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801db66:	68fb      	ldr	r3, [r7, #12]
 801db68:	6819      	ldr	r1, [r3, #0]
 801db6a:	4812      	ldr	r0, [pc, #72]	; (801dbb4 <etharp_find_entry+0x2d4>)
 801db6c:	4613      	mov	r3, r2
 801db6e:	005b      	lsls	r3, r3, #1
 801db70:	4413      	add	r3, r2
 801db72:	00db      	lsls	r3, r3, #3
 801db74:	4403      	add	r3, r0
 801db76:	3304      	adds	r3, #4
 801db78:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801db7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801db7e:	490d      	ldr	r1, [pc, #52]	; (801dbb4 <etharp_find_entry+0x2d4>)
 801db80:	4613      	mov	r3, r2
 801db82:	005b      	lsls	r3, r3, #1
 801db84:	4413      	add	r3, r2
 801db86:	00db      	lsls	r3, r3, #3
 801db88:	440b      	add	r3, r1
 801db8a:	3312      	adds	r3, #18
 801db8c:	2200      	movs	r2, #0
 801db8e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801db90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801db94:	4907      	ldr	r1, [pc, #28]	; (801dbb4 <etharp_find_entry+0x2d4>)
 801db96:	4613      	mov	r3, r2
 801db98:	005b      	lsls	r3, r3, #1
 801db9a:	4413      	add	r3, r2
 801db9c:	00db      	lsls	r3, r3, #3
 801db9e:	440b      	add	r3, r1
 801dba0:	3308      	adds	r3, #8
 801dba2:	687a      	ldr	r2, [r7, #4]
 801dba4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801dba6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801dbaa:	4618      	mov	r0, r3
 801dbac:	3728      	adds	r7, #40	; 0x28
 801dbae:	46bd      	mov	sp, r7
 801dbb0:	bd80      	pop	{r7, pc}
 801dbb2:	bf00      	nop
 801dbb4:	200188fc 	.word	0x200188fc
 801dbb8:	08028f60 	.word	0x08028f60
 801dbbc:	08028f98 	.word	0x08028f98
 801dbc0:	08028fd8 	.word	0x08028fd8
 801dbc4:	08029000 	.word	0x08029000
 801dbc8:	08029018 	.word	0x08029018
 801dbcc:	0802902c 	.word	0x0802902c

0801dbd0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801dbd0:	b580      	push	{r7, lr}
 801dbd2:	b088      	sub	sp, #32
 801dbd4:	af02      	add	r7, sp, #8
 801dbd6:	60f8      	str	r0, [r7, #12]
 801dbd8:	60b9      	str	r1, [r7, #8]
 801dbda:	607a      	str	r2, [r7, #4]
 801dbdc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801dbde:	68fb      	ldr	r3, [r7, #12]
 801dbe0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801dbe4:	2b06      	cmp	r3, #6
 801dbe6:	d006      	beq.n	801dbf6 <etharp_update_arp_entry+0x26>
 801dbe8:	4b48      	ldr	r3, [pc, #288]	; (801dd0c <etharp_update_arp_entry+0x13c>)
 801dbea:	f240 12a9 	movw	r2, #425	; 0x1a9
 801dbee:	4948      	ldr	r1, [pc, #288]	; (801dd10 <etharp_update_arp_entry+0x140>)
 801dbf0:	4848      	ldr	r0, [pc, #288]	; (801dd14 <etharp_update_arp_entry+0x144>)
 801dbf2:	f002 f9b7 	bl	801ff64 <printf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801dbf6:	68bb      	ldr	r3, [r7, #8]
 801dbf8:	2b00      	cmp	r3, #0
 801dbfa:	d012      	beq.n	801dc22 <etharp_update_arp_entry+0x52>
 801dbfc:	68bb      	ldr	r3, [r7, #8]
 801dbfe:	681b      	ldr	r3, [r3, #0]
 801dc00:	2b00      	cmp	r3, #0
 801dc02:	d00e      	beq.n	801dc22 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801dc04:	68bb      	ldr	r3, [r7, #8]
 801dc06:	681b      	ldr	r3, [r3, #0]
 801dc08:	68f9      	ldr	r1, [r7, #12]
 801dc0a:	4618      	mov	r0, r3
 801dc0c:	f001 f8fe 	bl	801ee0c <ip4_addr_isbroadcast_u32>
 801dc10:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801dc12:	2b00      	cmp	r3, #0
 801dc14:	d105      	bne.n	801dc22 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801dc16:	68bb      	ldr	r3, [r7, #8]
 801dc18:	681b      	ldr	r3, [r3, #0]
 801dc1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801dc1e:	2be0      	cmp	r3, #224	; 0xe0
 801dc20:	d102      	bne.n	801dc28 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801dc22:	f06f 030f 	mvn.w	r3, #15
 801dc26:	e06c      	b.n	801dd02 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801dc28:	78fb      	ldrb	r3, [r7, #3]
 801dc2a:	68fa      	ldr	r2, [r7, #12]
 801dc2c:	4619      	mov	r1, r3
 801dc2e:	68b8      	ldr	r0, [r7, #8]
 801dc30:	f7ff fe56 	bl	801d8e0 <etharp_find_entry>
 801dc34:	4603      	mov	r3, r0
 801dc36:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801dc38:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801dc3c:	2b00      	cmp	r3, #0
 801dc3e:	da02      	bge.n	801dc46 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801dc40:	8afb      	ldrh	r3, [r7, #22]
 801dc42:	b25b      	sxtb	r3, r3
 801dc44:	e05d      	b.n	801dd02 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801dc46:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801dc4a:	4933      	ldr	r1, [pc, #204]	; (801dd18 <etharp_update_arp_entry+0x148>)
 801dc4c:	4613      	mov	r3, r2
 801dc4e:	005b      	lsls	r3, r3, #1
 801dc50:	4413      	add	r3, r2
 801dc52:	00db      	lsls	r3, r3, #3
 801dc54:	440b      	add	r3, r1
 801dc56:	3314      	adds	r3, #20
 801dc58:	2202      	movs	r2, #2
 801dc5a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801dc5c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801dc60:	492d      	ldr	r1, [pc, #180]	; (801dd18 <etharp_update_arp_entry+0x148>)
 801dc62:	4613      	mov	r3, r2
 801dc64:	005b      	lsls	r3, r3, #1
 801dc66:	4413      	add	r3, r2
 801dc68:	00db      	lsls	r3, r3, #3
 801dc6a:	440b      	add	r3, r1
 801dc6c:	3308      	adds	r3, #8
 801dc6e:	68fa      	ldr	r2, [r7, #12]
 801dc70:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801dc72:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801dc76:	4613      	mov	r3, r2
 801dc78:	005b      	lsls	r3, r3, #1
 801dc7a:	4413      	add	r3, r2
 801dc7c:	00db      	lsls	r3, r3, #3
 801dc7e:	3308      	adds	r3, #8
 801dc80:	4a25      	ldr	r2, [pc, #148]	; (801dd18 <etharp_update_arp_entry+0x148>)
 801dc82:	4413      	add	r3, r2
 801dc84:	3304      	adds	r3, #4
 801dc86:	2206      	movs	r2, #6
 801dc88:	6879      	ldr	r1, [r7, #4]
 801dc8a:	4618      	mov	r0, r3
 801dc8c:	f002 f93a 	bl	801ff04 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801dc90:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801dc94:	4920      	ldr	r1, [pc, #128]	; (801dd18 <etharp_update_arp_entry+0x148>)
 801dc96:	4613      	mov	r3, r2
 801dc98:	005b      	lsls	r3, r3, #1
 801dc9a:	4413      	add	r3, r2
 801dc9c:	00db      	lsls	r3, r3, #3
 801dc9e:	440b      	add	r3, r1
 801dca0:	3312      	adds	r3, #18
 801dca2:	2200      	movs	r2, #0
 801dca4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801dca6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801dcaa:	491b      	ldr	r1, [pc, #108]	; (801dd18 <etharp_update_arp_entry+0x148>)
 801dcac:	4613      	mov	r3, r2
 801dcae:	005b      	lsls	r3, r3, #1
 801dcb0:	4413      	add	r3, r2
 801dcb2:	00db      	lsls	r3, r3, #3
 801dcb4:	440b      	add	r3, r1
 801dcb6:	681b      	ldr	r3, [r3, #0]
 801dcb8:	2b00      	cmp	r3, #0
 801dcba:	d021      	beq.n	801dd00 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801dcbc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801dcc0:	4915      	ldr	r1, [pc, #84]	; (801dd18 <etharp_update_arp_entry+0x148>)
 801dcc2:	4613      	mov	r3, r2
 801dcc4:	005b      	lsls	r3, r3, #1
 801dcc6:	4413      	add	r3, r2
 801dcc8:	00db      	lsls	r3, r3, #3
 801dcca:	440b      	add	r3, r1
 801dccc:	681b      	ldr	r3, [r3, #0]
 801dcce:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801dcd0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801dcd4:	4910      	ldr	r1, [pc, #64]	; (801dd18 <etharp_update_arp_entry+0x148>)
 801dcd6:	4613      	mov	r3, r2
 801dcd8:	005b      	lsls	r3, r3, #1
 801dcda:	4413      	add	r3, r2
 801dcdc:	00db      	lsls	r3, r3, #3
 801dcde:	440b      	add	r3, r1
 801dce0:	2200      	movs	r2, #0
 801dce2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801dce4:	68fb      	ldr	r3, [r7, #12]
 801dce6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801dcea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801dcee:	9300      	str	r3, [sp, #0]
 801dcf0:	687b      	ldr	r3, [r7, #4]
 801dcf2:	6939      	ldr	r1, [r7, #16]
 801dcf4:	68f8      	ldr	r0, [r7, #12]
 801dcf6:	f001 ff97 	bl	801fc28 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801dcfa:	6938      	ldr	r0, [r7, #16]
 801dcfc:	f7f8 fe4a 	bl	8016994 <pbuf_free>
  }
  return ERR_OK;
 801dd00:	2300      	movs	r3, #0
}
 801dd02:	4618      	mov	r0, r3
 801dd04:	3718      	adds	r7, #24
 801dd06:	46bd      	mov	sp, r7
 801dd08:	bd80      	pop	{r7, pc}
 801dd0a:	bf00      	nop
 801dd0c:	08028f60 	.word	0x08028f60
 801dd10:	08029058 	.word	0x08029058
 801dd14:	08028fd8 	.word	0x08028fd8
 801dd18:	200188fc 	.word	0x200188fc

0801dd1c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801dd1c:	b580      	push	{r7, lr}
 801dd1e:	b084      	sub	sp, #16
 801dd20:	af00      	add	r7, sp, #0
 801dd22:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801dd24:	2300      	movs	r3, #0
 801dd26:	60fb      	str	r3, [r7, #12]
 801dd28:	e01e      	b.n	801dd68 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801dd2a:	4913      	ldr	r1, [pc, #76]	; (801dd78 <etharp_cleanup_netif+0x5c>)
 801dd2c:	68fa      	ldr	r2, [r7, #12]
 801dd2e:	4613      	mov	r3, r2
 801dd30:	005b      	lsls	r3, r3, #1
 801dd32:	4413      	add	r3, r2
 801dd34:	00db      	lsls	r3, r3, #3
 801dd36:	440b      	add	r3, r1
 801dd38:	3314      	adds	r3, #20
 801dd3a:	781b      	ldrb	r3, [r3, #0]
 801dd3c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801dd3e:	7afb      	ldrb	r3, [r7, #11]
 801dd40:	2b00      	cmp	r3, #0
 801dd42:	d00e      	beq.n	801dd62 <etharp_cleanup_netif+0x46>
 801dd44:	490c      	ldr	r1, [pc, #48]	; (801dd78 <etharp_cleanup_netif+0x5c>)
 801dd46:	68fa      	ldr	r2, [r7, #12]
 801dd48:	4613      	mov	r3, r2
 801dd4a:	005b      	lsls	r3, r3, #1
 801dd4c:	4413      	add	r3, r2
 801dd4e:	00db      	lsls	r3, r3, #3
 801dd50:	440b      	add	r3, r1
 801dd52:	3308      	adds	r3, #8
 801dd54:	681b      	ldr	r3, [r3, #0]
 801dd56:	687a      	ldr	r2, [r7, #4]
 801dd58:	429a      	cmp	r2, r3
 801dd5a:	d102      	bne.n	801dd62 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801dd5c:	68f8      	ldr	r0, [r7, #12]
 801dd5e:	f7ff fce5 	bl	801d72c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801dd62:	68fb      	ldr	r3, [r7, #12]
 801dd64:	3301      	adds	r3, #1
 801dd66:	60fb      	str	r3, [r7, #12]
 801dd68:	68fb      	ldr	r3, [r7, #12]
 801dd6a:	2b09      	cmp	r3, #9
 801dd6c:	dddd      	ble.n	801dd2a <etharp_cleanup_netif+0xe>
    }
  }
}
 801dd6e:	bf00      	nop
 801dd70:	bf00      	nop
 801dd72:	3710      	adds	r7, #16
 801dd74:	46bd      	mov	sp, r7
 801dd76:	bd80      	pop	{r7, pc}
 801dd78:	200188fc 	.word	0x200188fc

0801dd7c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801dd7c:	b5b0      	push	{r4, r5, r7, lr}
 801dd7e:	b08a      	sub	sp, #40	; 0x28
 801dd80:	af04      	add	r7, sp, #16
 801dd82:	6078      	str	r0, [r7, #4]
 801dd84:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801dd86:	683b      	ldr	r3, [r7, #0]
 801dd88:	2b00      	cmp	r3, #0
 801dd8a:	d107      	bne.n	801dd9c <etharp_input+0x20>
 801dd8c:	4b3d      	ldr	r3, [pc, #244]	; (801de84 <etharp_input+0x108>)
 801dd8e:	f240 228a 	movw	r2, #650	; 0x28a
 801dd92:	493d      	ldr	r1, [pc, #244]	; (801de88 <etharp_input+0x10c>)
 801dd94:	483d      	ldr	r0, [pc, #244]	; (801de8c <etharp_input+0x110>)
 801dd96:	f002 f8e5 	bl	801ff64 <printf>
 801dd9a:	e06f      	b.n	801de7c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801dd9c:	687b      	ldr	r3, [r7, #4]
 801dd9e:	685b      	ldr	r3, [r3, #4]
 801dda0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801dda2:	693b      	ldr	r3, [r7, #16]
 801dda4:	881b      	ldrh	r3, [r3, #0]
 801dda6:	b29b      	uxth	r3, r3
 801dda8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ddac:	d10c      	bne.n	801ddc8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801ddae:	693b      	ldr	r3, [r7, #16]
 801ddb0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801ddb2:	2b06      	cmp	r3, #6
 801ddb4:	d108      	bne.n	801ddc8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801ddb6:	693b      	ldr	r3, [r7, #16]
 801ddb8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801ddba:	2b04      	cmp	r3, #4
 801ddbc:	d104      	bne.n	801ddc8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801ddbe:	693b      	ldr	r3, [r7, #16]
 801ddc0:	885b      	ldrh	r3, [r3, #2]
 801ddc2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801ddc4:	2b08      	cmp	r3, #8
 801ddc6:	d003      	beq.n	801ddd0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801ddc8:	6878      	ldr	r0, [r7, #4]
 801ddca:	f7f8 fde3 	bl	8016994 <pbuf_free>
    return;
 801ddce:	e055      	b.n	801de7c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801ddd0:	693b      	ldr	r3, [r7, #16]
 801ddd2:	330e      	adds	r3, #14
 801ddd4:	681b      	ldr	r3, [r3, #0]
 801ddd6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801ddd8:	693b      	ldr	r3, [r7, #16]
 801ddda:	3318      	adds	r3, #24
 801dddc:	681b      	ldr	r3, [r3, #0]
 801ddde:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801dde0:	683b      	ldr	r3, [r7, #0]
 801dde2:	3304      	adds	r3, #4
 801dde4:	681b      	ldr	r3, [r3, #0]
 801dde6:	2b00      	cmp	r3, #0
 801dde8:	d102      	bne.n	801ddf0 <etharp_input+0x74>
    for_us = 0;
 801ddea:	2300      	movs	r3, #0
 801ddec:	75fb      	strb	r3, [r7, #23]
 801ddee:	e009      	b.n	801de04 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801ddf0:	68ba      	ldr	r2, [r7, #8]
 801ddf2:	683b      	ldr	r3, [r7, #0]
 801ddf4:	3304      	adds	r3, #4
 801ddf6:	681b      	ldr	r3, [r3, #0]
 801ddf8:	429a      	cmp	r2, r3
 801ddfa:	bf0c      	ite	eq
 801ddfc:	2301      	moveq	r3, #1
 801ddfe:	2300      	movne	r3, #0
 801de00:	b2db      	uxtb	r3, r3
 801de02:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801de04:	693b      	ldr	r3, [r7, #16]
 801de06:	f103 0208 	add.w	r2, r3, #8
 801de0a:	7dfb      	ldrb	r3, [r7, #23]
 801de0c:	2b00      	cmp	r3, #0
 801de0e:	d001      	beq.n	801de14 <etharp_input+0x98>
 801de10:	2301      	movs	r3, #1
 801de12:	e000      	b.n	801de16 <etharp_input+0x9a>
 801de14:	2302      	movs	r3, #2
 801de16:	f107 010c 	add.w	r1, r7, #12
 801de1a:	6838      	ldr	r0, [r7, #0]
 801de1c:	f7ff fed8 	bl	801dbd0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801de20:	693b      	ldr	r3, [r7, #16]
 801de22:	88db      	ldrh	r3, [r3, #6]
 801de24:	b29b      	uxth	r3, r3
 801de26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801de2a:	d003      	beq.n	801de34 <etharp_input+0xb8>
 801de2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801de30:	d01e      	beq.n	801de70 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801de32:	e020      	b.n	801de76 <etharp_input+0xfa>
      if (for_us) {
 801de34:	7dfb      	ldrb	r3, [r7, #23]
 801de36:	2b00      	cmp	r3, #0
 801de38:	d01c      	beq.n	801de74 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801de3a:	683b      	ldr	r3, [r7, #0]
 801de3c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801de40:	693b      	ldr	r3, [r7, #16]
 801de42:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801de46:	683b      	ldr	r3, [r7, #0]
 801de48:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801de4c:	683b      	ldr	r3, [r7, #0]
 801de4e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801de50:	693a      	ldr	r2, [r7, #16]
 801de52:	3208      	adds	r2, #8
        etharp_raw(netif,
 801de54:	2102      	movs	r1, #2
 801de56:	9103      	str	r1, [sp, #12]
 801de58:	f107 010c 	add.w	r1, r7, #12
 801de5c:	9102      	str	r1, [sp, #8]
 801de5e:	9201      	str	r2, [sp, #4]
 801de60:	9300      	str	r3, [sp, #0]
 801de62:	462b      	mov	r3, r5
 801de64:	4622      	mov	r2, r4
 801de66:	4601      	mov	r1, r0
 801de68:	6838      	ldr	r0, [r7, #0]
 801de6a:	f000 faeb 	bl	801e444 <etharp_raw>
      break;
 801de6e:	e001      	b.n	801de74 <etharp_input+0xf8>
      break;
 801de70:	bf00      	nop
 801de72:	e000      	b.n	801de76 <etharp_input+0xfa>
      break;
 801de74:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801de76:	6878      	ldr	r0, [r7, #4]
 801de78:	f7f8 fd8c 	bl	8016994 <pbuf_free>
}
 801de7c:	3718      	adds	r7, #24
 801de7e:	46bd      	mov	sp, r7
 801de80:	bdb0      	pop	{r4, r5, r7, pc}
 801de82:	bf00      	nop
 801de84:	08028f60 	.word	0x08028f60
 801de88:	080290b0 	.word	0x080290b0
 801de8c:	08028fd8 	.word	0x08028fd8

0801de90 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801de90:	b580      	push	{r7, lr}
 801de92:	b086      	sub	sp, #24
 801de94:	af02      	add	r7, sp, #8
 801de96:	60f8      	str	r0, [r7, #12]
 801de98:	60b9      	str	r1, [r7, #8]
 801de9a:	4613      	mov	r3, r2
 801de9c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801de9e:	79fa      	ldrb	r2, [r7, #7]
 801dea0:	4944      	ldr	r1, [pc, #272]	; (801dfb4 <etharp_output_to_arp_index+0x124>)
 801dea2:	4613      	mov	r3, r2
 801dea4:	005b      	lsls	r3, r3, #1
 801dea6:	4413      	add	r3, r2
 801dea8:	00db      	lsls	r3, r3, #3
 801deaa:	440b      	add	r3, r1
 801deac:	3314      	adds	r3, #20
 801deae:	781b      	ldrb	r3, [r3, #0]
 801deb0:	2b01      	cmp	r3, #1
 801deb2:	d806      	bhi.n	801dec2 <etharp_output_to_arp_index+0x32>
 801deb4:	4b40      	ldr	r3, [pc, #256]	; (801dfb8 <etharp_output_to_arp_index+0x128>)
 801deb6:	f240 22ee 	movw	r2, #750	; 0x2ee
 801deba:	4940      	ldr	r1, [pc, #256]	; (801dfbc <etharp_output_to_arp_index+0x12c>)
 801debc:	4840      	ldr	r0, [pc, #256]	; (801dfc0 <etharp_output_to_arp_index+0x130>)
 801debe:	f002 f851 	bl	801ff64 <printf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801dec2:	79fa      	ldrb	r2, [r7, #7]
 801dec4:	493b      	ldr	r1, [pc, #236]	; (801dfb4 <etharp_output_to_arp_index+0x124>)
 801dec6:	4613      	mov	r3, r2
 801dec8:	005b      	lsls	r3, r3, #1
 801deca:	4413      	add	r3, r2
 801decc:	00db      	lsls	r3, r3, #3
 801dece:	440b      	add	r3, r1
 801ded0:	3314      	adds	r3, #20
 801ded2:	781b      	ldrb	r3, [r3, #0]
 801ded4:	2b02      	cmp	r3, #2
 801ded6:	d153      	bne.n	801df80 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801ded8:	79fa      	ldrb	r2, [r7, #7]
 801deda:	4936      	ldr	r1, [pc, #216]	; (801dfb4 <etharp_output_to_arp_index+0x124>)
 801dedc:	4613      	mov	r3, r2
 801dede:	005b      	lsls	r3, r3, #1
 801dee0:	4413      	add	r3, r2
 801dee2:	00db      	lsls	r3, r3, #3
 801dee4:	440b      	add	r3, r1
 801dee6:	3312      	adds	r3, #18
 801dee8:	881b      	ldrh	r3, [r3, #0]
 801deea:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801deee:	d919      	bls.n	801df24 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801def0:	79fa      	ldrb	r2, [r7, #7]
 801def2:	4613      	mov	r3, r2
 801def4:	005b      	lsls	r3, r3, #1
 801def6:	4413      	add	r3, r2
 801def8:	00db      	lsls	r3, r3, #3
 801defa:	4a2e      	ldr	r2, [pc, #184]	; (801dfb4 <etharp_output_to_arp_index+0x124>)
 801defc:	4413      	add	r3, r2
 801defe:	3304      	adds	r3, #4
 801df00:	4619      	mov	r1, r3
 801df02:	68f8      	ldr	r0, [r7, #12]
 801df04:	f000 fb4c 	bl	801e5a0 <etharp_request>
 801df08:	4603      	mov	r3, r0
 801df0a:	2b00      	cmp	r3, #0
 801df0c:	d138      	bne.n	801df80 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801df0e:	79fa      	ldrb	r2, [r7, #7]
 801df10:	4928      	ldr	r1, [pc, #160]	; (801dfb4 <etharp_output_to_arp_index+0x124>)
 801df12:	4613      	mov	r3, r2
 801df14:	005b      	lsls	r3, r3, #1
 801df16:	4413      	add	r3, r2
 801df18:	00db      	lsls	r3, r3, #3
 801df1a:	440b      	add	r3, r1
 801df1c:	3314      	adds	r3, #20
 801df1e:	2203      	movs	r2, #3
 801df20:	701a      	strb	r2, [r3, #0]
 801df22:	e02d      	b.n	801df80 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801df24:	79fa      	ldrb	r2, [r7, #7]
 801df26:	4923      	ldr	r1, [pc, #140]	; (801dfb4 <etharp_output_to_arp_index+0x124>)
 801df28:	4613      	mov	r3, r2
 801df2a:	005b      	lsls	r3, r3, #1
 801df2c:	4413      	add	r3, r2
 801df2e:	00db      	lsls	r3, r3, #3
 801df30:	440b      	add	r3, r1
 801df32:	3312      	adds	r3, #18
 801df34:	881b      	ldrh	r3, [r3, #0]
 801df36:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801df3a:	d321      	bcc.n	801df80 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801df3c:	79fa      	ldrb	r2, [r7, #7]
 801df3e:	4613      	mov	r3, r2
 801df40:	005b      	lsls	r3, r3, #1
 801df42:	4413      	add	r3, r2
 801df44:	00db      	lsls	r3, r3, #3
 801df46:	4a1b      	ldr	r2, [pc, #108]	; (801dfb4 <etharp_output_to_arp_index+0x124>)
 801df48:	4413      	add	r3, r2
 801df4a:	1d19      	adds	r1, r3, #4
 801df4c:	79fa      	ldrb	r2, [r7, #7]
 801df4e:	4613      	mov	r3, r2
 801df50:	005b      	lsls	r3, r3, #1
 801df52:	4413      	add	r3, r2
 801df54:	00db      	lsls	r3, r3, #3
 801df56:	3308      	adds	r3, #8
 801df58:	4a16      	ldr	r2, [pc, #88]	; (801dfb4 <etharp_output_to_arp_index+0x124>)
 801df5a:	4413      	add	r3, r2
 801df5c:	3304      	adds	r3, #4
 801df5e:	461a      	mov	r2, r3
 801df60:	68f8      	ldr	r0, [r7, #12]
 801df62:	f000 fafb 	bl	801e55c <etharp_request_dst>
 801df66:	4603      	mov	r3, r0
 801df68:	2b00      	cmp	r3, #0
 801df6a:	d109      	bne.n	801df80 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801df6c:	79fa      	ldrb	r2, [r7, #7]
 801df6e:	4911      	ldr	r1, [pc, #68]	; (801dfb4 <etharp_output_to_arp_index+0x124>)
 801df70:	4613      	mov	r3, r2
 801df72:	005b      	lsls	r3, r3, #1
 801df74:	4413      	add	r3, r2
 801df76:	00db      	lsls	r3, r3, #3
 801df78:	440b      	add	r3, r1
 801df7a:	3314      	adds	r3, #20
 801df7c:	2203      	movs	r2, #3
 801df7e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801df80:	68fb      	ldr	r3, [r7, #12]
 801df82:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801df86:	79fa      	ldrb	r2, [r7, #7]
 801df88:	4613      	mov	r3, r2
 801df8a:	005b      	lsls	r3, r3, #1
 801df8c:	4413      	add	r3, r2
 801df8e:	00db      	lsls	r3, r3, #3
 801df90:	3308      	adds	r3, #8
 801df92:	4a08      	ldr	r2, [pc, #32]	; (801dfb4 <etharp_output_to_arp_index+0x124>)
 801df94:	4413      	add	r3, r2
 801df96:	3304      	adds	r3, #4
 801df98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801df9c:	9200      	str	r2, [sp, #0]
 801df9e:	460a      	mov	r2, r1
 801dfa0:	68b9      	ldr	r1, [r7, #8]
 801dfa2:	68f8      	ldr	r0, [r7, #12]
 801dfa4:	f001 fe40 	bl	801fc28 <ethernet_output>
 801dfa8:	4603      	mov	r3, r0
}
 801dfaa:	4618      	mov	r0, r3
 801dfac:	3710      	adds	r7, #16
 801dfae:	46bd      	mov	sp, r7
 801dfb0:	bd80      	pop	{r7, pc}
 801dfb2:	bf00      	nop
 801dfb4:	200188fc 	.word	0x200188fc
 801dfb8:	08028f60 	.word	0x08028f60
 801dfbc:	080290d0 	.word	0x080290d0
 801dfc0:	08028fd8 	.word	0x08028fd8

0801dfc4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801dfc4:	b580      	push	{r7, lr}
 801dfc6:	b08a      	sub	sp, #40	; 0x28
 801dfc8:	af02      	add	r7, sp, #8
 801dfca:	60f8      	str	r0, [r7, #12]
 801dfcc:	60b9      	str	r1, [r7, #8]
 801dfce:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801dfd0:	687b      	ldr	r3, [r7, #4]
 801dfd2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801dfd4:	68fb      	ldr	r3, [r7, #12]
 801dfd6:	2b00      	cmp	r3, #0
 801dfd8:	d106      	bne.n	801dfe8 <etharp_output+0x24>
 801dfda:	4b73      	ldr	r3, [pc, #460]	; (801e1a8 <etharp_output+0x1e4>)
 801dfdc:	f240 321e 	movw	r2, #798	; 0x31e
 801dfe0:	4972      	ldr	r1, [pc, #456]	; (801e1ac <etharp_output+0x1e8>)
 801dfe2:	4873      	ldr	r0, [pc, #460]	; (801e1b0 <etharp_output+0x1ec>)
 801dfe4:	f001 ffbe 	bl	801ff64 <printf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801dfe8:	68bb      	ldr	r3, [r7, #8]
 801dfea:	2b00      	cmp	r3, #0
 801dfec:	d106      	bne.n	801dffc <etharp_output+0x38>
 801dfee:	4b6e      	ldr	r3, [pc, #440]	; (801e1a8 <etharp_output+0x1e4>)
 801dff0:	f240 321f 	movw	r2, #799	; 0x31f
 801dff4:	496f      	ldr	r1, [pc, #444]	; (801e1b4 <etharp_output+0x1f0>)
 801dff6:	486e      	ldr	r0, [pc, #440]	; (801e1b0 <etharp_output+0x1ec>)
 801dff8:	f001 ffb4 	bl	801ff64 <printf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801dffc:	687b      	ldr	r3, [r7, #4]
 801dffe:	2b00      	cmp	r3, #0
 801e000:	d106      	bne.n	801e010 <etharp_output+0x4c>
 801e002:	4b69      	ldr	r3, [pc, #420]	; (801e1a8 <etharp_output+0x1e4>)
 801e004:	f44f 7248 	mov.w	r2, #800	; 0x320
 801e008:	496b      	ldr	r1, [pc, #428]	; (801e1b8 <etharp_output+0x1f4>)
 801e00a:	4869      	ldr	r0, [pc, #420]	; (801e1b0 <etharp_output+0x1ec>)
 801e00c:	f001 ffaa 	bl	801ff64 <printf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801e010:	687b      	ldr	r3, [r7, #4]
 801e012:	681b      	ldr	r3, [r3, #0]
 801e014:	68f9      	ldr	r1, [r7, #12]
 801e016:	4618      	mov	r0, r3
 801e018:	f000 fef8 	bl	801ee0c <ip4_addr_isbroadcast_u32>
 801e01c:	4603      	mov	r3, r0
 801e01e:	2b00      	cmp	r3, #0
 801e020:	d002      	beq.n	801e028 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801e022:	4b66      	ldr	r3, [pc, #408]	; (801e1bc <etharp_output+0x1f8>)
 801e024:	61fb      	str	r3, [r7, #28]
 801e026:	e0af      	b.n	801e188 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801e028:	687b      	ldr	r3, [r7, #4]
 801e02a:	681b      	ldr	r3, [r3, #0]
 801e02c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801e030:	2be0      	cmp	r3, #224	; 0xe0
 801e032:	d118      	bne.n	801e066 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801e034:	2301      	movs	r3, #1
 801e036:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801e038:	2300      	movs	r3, #0
 801e03a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801e03c:	235e      	movs	r3, #94	; 0x5e
 801e03e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801e040:	687b      	ldr	r3, [r7, #4]
 801e042:	3301      	adds	r3, #1
 801e044:	781b      	ldrb	r3, [r3, #0]
 801e046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e04a:	b2db      	uxtb	r3, r3
 801e04c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801e04e:	687b      	ldr	r3, [r7, #4]
 801e050:	3302      	adds	r3, #2
 801e052:	781b      	ldrb	r3, [r3, #0]
 801e054:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801e056:	687b      	ldr	r3, [r7, #4]
 801e058:	3303      	adds	r3, #3
 801e05a:	781b      	ldrb	r3, [r3, #0]
 801e05c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801e05e:	f107 0310 	add.w	r3, r7, #16
 801e062:	61fb      	str	r3, [r7, #28]
 801e064:	e090      	b.n	801e188 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801e066:	687b      	ldr	r3, [r7, #4]
 801e068:	681a      	ldr	r2, [r3, #0]
 801e06a:	68fb      	ldr	r3, [r7, #12]
 801e06c:	3304      	adds	r3, #4
 801e06e:	681b      	ldr	r3, [r3, #0]
 801e070:	405a      	eors	r2, r3
 801e072:	68fb      	ldr	r3, [r7, #12]
 801e074:	3308      	adds	r3, #8
 801e076:	681b      	ldr	r3, [r3, #0]
 801e078:	4013      	ands	r3, r2
 801e07a:	2b00      	cmp	r3, #0
 801e07c:	d012      	beq.n	801e0a4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801e07e:	687b      	ldr	r3, [r7, #4]
 801e080:	681b      	ldr	r3, [r3, #0]
 801e082:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801e084:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801e088:	4293      	cmp	r3, r2
 801e08a:	d00b      	beq.n	801e0a4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801e08c:	68fb      	ldr	r3, [r7, #12]
 801e08e:	330c      	adds	r3, #12
 801e090:	681b      	ldr	r3, [r3, #0]
 801e092:	2b00      	cmp	r3, #0
 801e094:	d003      	beq.n	801e09e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801e096:	68fb      	ldr	r3, [r7, #12]
 801e098:	330c      	adds	r3, #12
 801e09a:	61bb      	str	r3, [r7, #24]
 801e09c:	e002      	b.n	801e0a4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801e09e:	f06f 0303 	mvn.w	r3, #3
 801e0a2:	e07d      	b.n	801e1a0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801e0a4:	4b46      	ldr	r3, [pc, #280]	; (801e1c0 <etharp_output+0x1fc>)
 801e0a6:	781b      	ldrb	r3, [r3, #0]
 801e0a8:	4619      	mov	r1, r3
 801e0aa:	4a46      	ldr	r2, [pc, #280]	; (801e1c4 <etharp_output+0x200>)
 801e0ac:	460b      	mov	r3, r1
 801e0ae:	005b      	lsls	r3, r3, #1
 801e0b0:	440b      	add	r3, r1
 801e0b2:	00db      	lsls	r3, r3, #3
 801e0b4:	4413      	add	r3, r2
 801e0b6:	3314      	adds	r3, #20
 801e0b8:	781b      	ldrb	r3, [r3, #0]
 801e0ba:	2b01      	cmp	r3, #1
 801e0bc:	d925      	bls.n	801e10a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801e0be:	4b40      	ldr	r3, [pc, #256]	; (801e1c0 <etharp_output+0x1fc>)
 801e0c0:	781b      	ldrb	r3, [r3, #0]
 801e0c2:	4619      	mov	r1, r3
 801e0c4:	4a3f      	ldr	r2, [pc, #252]	; (801e1c4 <etharp_output+0x200>)
 801e0c6:	460b      	mov	r3, r1
 801e0c8:	005b      	lsls	r3, r3, #1
 801e0ca:	440b      	add	r3, r1
 801e0cc:	00db      	lsls	r3, r3, #3
 801e0ce:	4413      	add	r3, r2
 801e0d0:	3308      	adds	r3, #8
 801e0d2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801e0d4:	68fa      	ldr	r2, [r7, #12]
 801e0d6:	429a      	cmp	r2, r3
 801e0d8:	d117      	bne.n	801e10a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801e0da:	69bb      	ldr	r3, [r7, #24]
 801e0dc:	681a      	ldr	r2, [r3, #0]
 801e0de:	4b38      	ldr	r3, [pc, #224]	; (801e1c0 <etharp_output+0x1fc>)
 801e0e0:	781b      	ldrb	r3, [r3, #0]
 801e0e2:	4618      	mov	r0, r3
 801e0e4:	4937      	ldr	r1, [pc, #220]	; (801e1c4 <etharp_output+0x200>)
 801e0e6:	4603      	mov	r3, r0
 801e0e8:	005b      	lsls	r3, r3, #1
 801e0ea:	4403      	add	r3, r0
 801e0ec:	00db      	lsls	r3, r3, #3
 801e0ee:	440b      	add	r3, r1
 801e0f0:	3304      	adds	r3, #4
 801e0f2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801e0f4:	429a      	cmp	r2, r3
 801e0f6:	d108      	bne.n	801e10a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801e0f8:	4b31      	ldr	r3, [pc, #196]	; (801e1c0 <etharp_output+0x1fc>)
 801e0fa:	781b      	ldrb	r3, [r3, #0]
 801e0fc:	461a      	mov	r2, r3
 801e0fe:	68b9      	ldr	r1, [r7, #8]
 801e100:	68f8      	ldr	r0, [r7, #12]
 801e102:	f7ff fec5 	bl	801de90 <etharp_output_to_arp_index>
 801e106:	4603      	mov	r3, r0
 801e108:	e04a      	b.n	801e1a0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801e10a:	2300      	movs	r3, #0
 801e10c:	75fb      	strb	r3, [r7, #23]
 801e10e:	e031      	b.n	801e174 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801e110:	7dfa      	ldrb	r2, [r7, #23]
 801e112:	492c      	ldr	r1, [pc, #176]	; (801e1c4 <etharp_output+0x200>)
 801e114:	4613      	mov	r3, r2
 801e116:	005b      	lsls	r3, r3, #1
 801e118:	4413      	add	r3, r2
 801e11a:	00db      	lsls	r3, r3, #3
 801e11c:	440b      	add	r3, r1
 801e11e:	3314      	adds	r3, #20
 801e120:	781b      	ldrb	r3, [r3, #0]
 801e122:	2b01      	cmp	r3, #1
 801e124:	d923      	bls.n	801e16e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801e126:	7dfa      	ldrb	r2, [r7, #23]
 801e128:	4926      	ldr	r1, [pc, #152]	; (801e1c4 <etharp_output+0x200>)
 801e12a:	4613      	mov	r3, r2
 801e12c:	005b      	lsls	r3, r3, #1
 801e12e:	4413      	add	r3, r2
 801e130:	00db      	lsls	r3, r3, #3
 801e132:	440b      	add	r3, r1
 801e134:	3308      	adds	r3, #8
 801e136:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801e138:	68fa      	ldr	r2, [r7, #12]
 801e13a:	429a      	cmp	r2, r3
 801e13c:	d117      	bne.n	801e16e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801e13e:	69bb      	ldr	r3, [r7, #24]
 801e140:	6819      	ldr	r1, [r3, #0]
 801e142:	7dfa      	ldrb	r2, [r7, #23]
 801e144:	481f      	ldr	r0, [pc, #124]	; (801e1c4 <etharp_output+0x200>)
 801e146:	4613      	mov	r3, r2
 801e148:	005b      	lsls	r3, r3, #1
 801e14a:	4413      	add	r3, r2
 801e14c:	00db      	lsls	r3, r3, #3
 801e14e:	4403      	add	r3, r0
 801e150:	3304      	adds	r3, #4
 801e152:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801e154:	4299      	cmp	r1, r3
 801e156:	d10a      	bne.n	801e16e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801e158:	4a19      	ldr	r2, [pc, #100]	; (801e1c0 <etharp_output+0x1fc>)
 801e15a:	7dfb      	ldrb	r3, [r7, #23]
 801e15c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801e15e:	7dfb      	ldrb	r3, [r7, #23]
 801e160:	461a      	mov	r2, r3
 801e162:	68b9      	ldr	r1, [r7, #8]
 801e164:	68f8      	ldr	r0, [r7, #12]
 801e166:	f7ff fe93 	bl	801de90 <etharp_output_to_arp_index>
 801e16a:	4603      	mov	r3, r0
 801e16c:	e018      	b.n	801e1a0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801e16e:	7dfb      	ldrb	r3, [r7, #23]
 801e170:	3301      	adds	r3, #1
 801e172:	75fb      	strb	r3, [r7, #23]
 801e174:	7dfb      	ldrb	r3, [r7, #23]
 801e176:	2b09      	cmp	r3, #9
 801e178:	d9ca      	bls.n	801e110 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801e17a:	68ba      	ldr	r2, [r7, #8]
 801e17c:	69b9      	ldr	r1, [r7, #24]
 801e17e:	68f8      	ldr	r0, [r7, #12]
 801e180:	f000 f822 	bl	801e1c8 <etharp_query>
 801e184:	4603      	mov	r3, r0
 801e186:	e00b      	b.n	801e1a0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801e188:	68fb      	ldr	r3, [r7, #12]
 801e18a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801e18e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801e192:	9300      	str	r3, [sp, #0]
 801e194:	69fb      	ldr	r3, [r7, #28]
 801e196:	68b9      	ldr	r1, [r7, #8]
 801e198:	68f8      	ldr	r0, [r7, #12]
 801e19a:	f001 fd45 	bl	801fc28 <ethernet_output>
 801e19e:	4603      	mov	r3, r0
}
 801e1a0:	4618      	mov	r0, r3
 801e1a2:	3720      	adds	r7, #32
 801e1a4:	46bd      	mov	sp, r7
 801e1a6:	bd80      	pop	{r7, pc}
 801e1a8:	08028f60 	.word	0x08028f60
 801e1ac:	080290b0 	.word	0x080290b0
 801e1b0:	08028fd8 	.word	0x08028fd8
 801e1b4:	08029100 	.word	0x08029100
 801e1b8:	080290a0 	.word	0x080290a0
 801e1bc:	080718ec 	.word	0x080718ec
 801e1c0:	200189ec 	.word	0x200189ec
 801e1c4:	200188fc 	.word	0x200188fc

0801e1c8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801e1c8:	b580      	push	{r7, lr}
 801e1ca:	b08c      	sub	sp, #48	; 0x30
 801e1cc:	af02      	add	r7, sp, #8
 801e1ce:	60f8      	str	r0, [r7, #12]
 801e1d0:	60b9      	str	r1, [r7, #8]
 801e1d2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801e1d4:	68fb      	ldr	r3, [r7, #12]
 801e1d6:	332a      	adds	r3, #42	; 0x2a
 801e1d8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801e1da:	23ff      	movs	r3, #255	; 0xff
 801e1dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801e1e0:	2300      	movs	r3, #0
 801e1e2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801e1e4:	68bb      	ldr	r3, [r7, #8]
 801e1e6:	681b      	ldr	r3, [r3, #0]
 801e1e8:	68f9      	ldr	r1, [r7, #12]
 801e1ea:	4618      	mov	r0, r3
 801e1ec:	f000 fe0e 	bl	801ee0c <ip4_addr_isbroadcast_u32>
 801e1f0:	4603      	mov	r3, r0
 801e1f2:	2b00      	cmp	r3, #0
 801e1f4:	d10c      	bne.n	801e210 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801e1f6:	68bb      	ldr	r3, [r7, #8]
 801e1f8:	681b      	ldr	r3, [r3, #0]
 801e1fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801e1fe:	2be0      	cmp	r3, #224	; 0xe0
 801e200:	d006      	beq.n	801e210 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801e202:	68bb      	ldr	r3, [r7, #8]
 801e204:	2b00      	cmp	r3, #0
 801e206:	d003      	beq.n	801e210 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801e208:	68bb      	ldr	r3, [r7, #8]
 801e20a:	681b      	ldr	r3, [r3, #0]
 801e20c:	2b00      	cmp	r3, #0
 801e20e:	d102      	bne.n	801e216 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801e210:	f06f 030f 	mvn.w	r3, #15
 801e214:	e101      	b.n	801e41a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801e216:	68fa      	ldr	r2, [r7, #12]
 801e218:	2101      	movs	r1, #1
 801e21a:	68b8      	ldr	r0, [r7, #8]
 801e21c:	f7ff fb60 	bl	801d8e0 <etharp_find_entry>
 801e220:	4603      	mov	r3, r0
 801e222:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801e224:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801e228:	2b00      	cmp	r3, #0
 801e22a:	da02      	bge.n	801e232 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801e22c:	8a7b      	ldrh	r3, [r7, #18]
 801e22e:	b25b      	sxtb	r3, r3
 801e230:	e0f3      	b.n	801e41a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801e232:	8a7b      	ldrh	r3, [r7, #18]
 801e234:	2b7e      	cmp	r3, #126	; 0x7e
 801e236:	d906      	bls.n	801e246 <etharp_query+0x7e>
 801e238:	4b7a      	ldr	r3, [pc, #488]	; (801e424 <etharp_query+0x25c>)
 801e23a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801e23e:	497a      	ldr	r1, [pc, #488]	; (801e428 <etharp_query+0x260>)
 801e240:	487a      	ldr	r0, [pc, #488]	; (801e42c <etharp_query+0x264>)
 801e242:	f001 fe8f 	bl	801ff64 <printf>
  i = (netif_addr_idx_t)i_err;
 801e246:	8a7b      	ldrh	r3, [r7, #18]
 801e248:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801e24a:	7c7a      	ldrb	r2, [r7, #17]
 801e24c:	4978      	ldr	r1, [pc, #480]	; (801e430 <etharp_query+0x268>)
 801e24e:	4613      	mov	r3, r2
 801e250:	005b      	lsls	r3, r3, #1
 801e252:	4413      	add	r3, r2
 801e254:	00db      	lsls	r3, r3, #3
 801e256:	440b      	add	r3, r1
 801e258:	3314      	adds	r3, #20
 801e25a:	781b      	ldrb	r3, [r3, #0]
 801e25c:	2b00      	cmp	r3, #0
 801e25e:	d115      	bne.n	801e28c <etharp_query+0xc4>
    is_new_entry = 1;
 801e260:	2301      	movs	r3, #1
 801e262:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801e264:	7c7a      	ldrb	r2, [r7, #17]
 801e266:	4972      	ldr	r1, [pc, #456]	; (801e430 <etharp_query+0x268>)
 801e268:	4613      	mov	r3, r2
 801e26a:	005b      	lsls	r3, r3, #1
 801e26c:	4413      	add	r3, r2
 801e26e:	00db      	lsls	r3, r3, #3
 801e270:	440b      	add	r3, r1
 801e272:	3314      	adds	r3, #20
 801e274:	2201      	movs	r2, #1
 801e276:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801e278:	7c7a      	ldrb	r2, [r7, #17]
 801e27a:	496d      	ldr	r1, [pc, #436]	; (801e430 <etharp_query+0x268>)
 801e27c:	4613      	mov	r3, r2
 801e27e:	005b      	lsls	r3, r3, #1
 801e280:	4413      	add	r3, r2
 801e282:	00db      	lsls	r3, r3, #3
 801e284:	440b      	add	r3, r1
 801e286:	3308      	adds	r3, #8
 801e288:	68fa      	ldr	r2, [r7, #12]
 801e28a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801e28c:	7c7a      	ldrb	r2, [r7, #17]
 801e28e:	4968      	ldr	r1, [pc, #416]	; (801e430 <etharp_query+0x268>)
 801e290:	4613      	mov	r3, r2
 801e292:	005b      	lsls	r3, r3, #1
 801e294:	4413      	add	r3, r2
 801e296:	00db      	lsls	r3, r3, #3
 801e298:	440b      	add	r3, r1
 801e29a:	3314      	adds	r3, #20
 801e29c:	781b      	ldrb	r3, [r3, #0]
 801e29e:	2b01      	cmp	r3, #1
 801e2a0:	d011      	beq.n	801e2c6 <etharp_query+0xfe>
 801e2a2:	7c7a      	ldrb	r2, [r7, #17]
 801e2a4:	4962      	ldr	r1, [pc, #392]	; (801e430 <etharp_query+0x268>)
 801e2a6:	4613      	mov	r3, r2
 801e2a8:	005b      	lsls	r3, r3, #1
 801e2aa:	4413      	add	r3, r2
 801e2ac:	00db      	lsls	r3, r3, #3
 801e2ae:	440b      	add	r3, r1
 801e2b0:	3314      	adds	r3, #20
 801e2b2:	781b      	ldrb	r3, [r3, #0]
 801e2b4:	2b01      	cmp	r3, #1
 801e2b6:	d806      	bhi.n	801e2c6 <etharp_query+0xfe>
 801e2b8:	4b5a      	ldr	r3, [pc, #360]	; (801e424 <etharp_query+0x25c>)
 801e2ba:	f240 32cd 	movw	r2, #973	; 0x3cd
 801e2be:	495d      	ldr	r1, [pc, #372]	; (801e434 <etharp_query+0x26c>)
 801e2c0:	485a      	ldr	r0, [pc, #360]	; (801e42c <etharp_query+0x264>)
 801e2c2:	f001 fe4f 	bl	801ff64 <printf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801e2c6:	6a3b      	ldr	r3, [r7, #32]
 801e2c8:	2b00      	cmp	r3, #0
 801e2ca:	d102      	bne.n	801e2d2 <etharp_query+0x10a>
 801e2cc:	687b      	ldr	r3, [r7, #4]
 801e2ce:	2b00      	cmp	r3, #0
 801e2d0:	d10c      	bne.n	801e2ec <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801e2d2:	68b9      	ldr	r1, [r7, #8]
 801e2d4:	68f8      	ldr	r0, [r7, #12]
 801e2d6:	f000 f963 	bl	801e5a0 <etharp_request>
 801e2da:	4603      	mov	r3, r0
 801e2dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801e2e0:	687b      	ldr	r3, [r7, #4]
 801e2e2:	2b00      	cmp	r3, #0
 801e2e4:	d102      	bne.n	801e2ec <etharp_query+0x124>
      return result;
 801e2e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801e2ea:	e096      	b.n	801e41a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801e2ec:	687b      	ldr	r3, [r7, #4]
 801e2ee:	2b00      	cmp	r3, #0
 801e2f0:	d106      	bne.n	801e300 <etharp_query+0x138>
 801e2f2:	4b4c      	ldr	r3, [pc, #304]	; (801e424 <etharp_query+0x25c>)
 801e2f4:	f240 32e1 	movw	r2, #993	; 0x3e1
 801e2f8:	494f      	ldr	r1, [pc, #316]	; (801e438 <etharp_query+0x270>)
 801e2fa:	484c      	ldr	r0, [pc, #304]	; (801e42c <etharp_query+0x264>)
 801e2fc:	f001 fe32 	bl	801ff64 <printf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801e300:	7c7a      	ldrb	r2, [r7, #17]
 801e302:	494b      	ldr	r1, [pc, #300]	; (801e430 <etharp_query+0x268>)
 801e304:	4613      	mov	r3, r2
 801e306:	005b      	lsls	r3, r3, #1
 801e308:	4413      	add	r3, r2
 801e30a:	00db      	lsls	r3, r3, #3
 801e30c:	440b      	add	r3, r1
 801e30e:	3314      	adds	r3, #20
 801e310:	781b      	ldrb	r3, [r3, #0]
 801e312:	2b01      	cmp	r3, #1
 801e314:	d917      	bls.n	801e346 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801e316:	4a49      	ldr	r2, [pc, #292]	; (801e43c <etharp_query+0x274>)
 801e318:	7c7b      	ldrb	r3, [r7, #17]
 801e31a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801e31c:	7c7a      	ldrb	r2, [r7, #17]
 801e31e:	4613      	mov	r3, r2
 801e320:	005b      	lsls	r3, r3, #1
 801e322:	4413      	add	r3, r2
 801e324:	00db      	lsls	r3, r3, #3
 801e326:	3308      	adds	r3, #8
 801e328:	4a41      	ldr	r2, [pc, #260]	; (801e430 <etharp_query+0x268>)
 801e32a:	4413      	add	r3, r2
 801e32c:	3304      	adds	r3, #4
 801e32e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801e332:	9200      	str	r2, [sp, #0]
 801e334:	697a      	ldr	r2, [r7, #20]
 801e336:	6879      	ldr	r1, [r7, #4]
 801e338:	68f8      	ldr	r0, [r7, #12]
 801e33a:	f001 fc75 	bl	801fc28 <ethernet_output>
 801e33e:	4603      	mov	r3, r0
 801e340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801e344:	e067      	b.n	801e416 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801e346:	7c7a      	ldrb	r2, [r7, #17]
 801e348:	4939      	ldr	r1, [pc, #228]	; (801e430 <etharp_query+0x268>)
 801e34a:	4613      	mov	r3, r2
 801e34c:	005b      	lsls	r3, r3, #1
 801e34e:	4413      	add	r3, r2
 801e350:	00db      	lsls	r3, r3, #3
 801e352:	440b      	add	r3, r1
 801e354:	3314      	adds	r3, #20
 801e356:	781b      	ldrb	r3, [r3, #0]
 801e358:	2b01      	cmp	r3, #1
 801e35a:	d15c      	bne.n	801e416 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801e35c:	2300      	movs	r3, #0
 801e35e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801e360:	687b      	ldr	r3, [r7, #4]
 801e362:	61fb      	str	r3, [r7, #28]
    while (p) {
 801e364:	e01c      	b.n	801e3a0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801e366:	69fb      	ldr	r3, [r7, #28]
 801e368:	895a      	ldrh	r2, [r3, #10]
 801e36a:	69fb      	ldr	r3, [r7, #28]
 801e36c:	891b      	ldrh	r3, [r3, #8]
 801e36e:	429a      	cmp	r2, r3
 801e370:	d10a      	bne.n	801e388 <etharp_query+0x1c0>
 801e372:	69fb      	ldr	r3, [r7, #28]
 801e374:	681b      	ldr	r3, [r3, #0]
 801e376:	2b00      	cmp	r3, #0
 801e378:	d006      	beq.n	801e388 <etharp_query+0x1c0>
 801e37a:	4b2a      	ldr	r3, [pc, #168]	; (801e424 <etharp_query+0x25c>)
 801e37c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801e380:	492f      	ldr	r1, [pc, #188]	; (801e440 <etharp_query+0x278>)
 801e382:	482a      	ldr	r0, [pc, #168]	; (801e42c <etharp_query+0x264>)
 801e384:	f001 fdee 	bl	801ff64 <printf>
      if (PBUF_NEEDS_COPY(p)) {
 801e388:	69fb      	ldr	r3, [r7, #28]
 801e38a:	7b1b      	ldrb	r3, [r3, #12]
 801e38c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e390:	2b00      	cmp	r3, #0
 801e392:	d002      	beq.n	801e39a <etharp_query+0x1d2>
        copy_needed = 1;
 801e394:	2301      	movs	r3, #1
 801e396:	61bb      	str	r3, [r7, #24]
        break;
 801e398:	e005      	b.n	801e3a6 <etharp_query+0x1de>
      }
      p = p->next;
 801e39a:	69fb      	ldr	r3, [r7, #28]
 801e39c:	681b      	ldr	r3, [r3, #0]
 801e39e:	61fb      	str	r3, [r7, #28]
    while (p) {
 801e3a0:	69fb      	ldr	r3, [r7, #28]
 801e3a2:	2b00      	cmp	r3, #0
 801e3a4:	d1df      	bne.n	801e366 <etharp_query+0x19e>
    }
    if (copy_needed) {
 801e3a6:	69bb      	ldr	r3, [r7, #24]
 801e3a8:	2b00      	cmp	r3, #0
 801e3aa:	d007      	beq.n	801e3bc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801e3ac:	687a      	ldr	r2, [r7, #4]
 801e3ae:	f44f 7120 	mov.w	r1, #640	; 0x280
 801e3b2:	200e      	movs	r0, #14
 801e3b4:	f7f8 fd80 	bl	8016eb8 <pbuf_clone>
 801e3b8:	61f8      	str	r0, [r7, #28]
 801e3ba:	e004      	b.n	801e3c6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801e3bc:	687b      	ldr	r3, [r7, #4]
 801e3be:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801e3c0:	69f8      	ldr	r0, [r7, #28]
 801e3c2:	f7f8 fb8d 	bl	8016ae0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801e3c6:	69fb      	ldr	r3, [r7, #28]
 801e3c8:	2b00      	cmp	r3, #0
 801e3ca:	d021      	beq.n	801e410 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801e3cc:	7c7a      	ldrb	r2, [r7, #17]
 801e3ce:	4918      	ldr	r1, [pc, #96]	; (801e430 <etharp_query+0x268>)
 801e3d0:	4613      	mov	r3, r2
 801e3d2:	005b      	lsls	r3, r3, #1
 801e3d4:	4413      	add	r3, r2
 801e3d6:	00db      	lsls	r3, r3, #3
 801e3d8:	440b      	add	r3, r1
 801e3da:	681b      	ldr	r3, [r3, #0]
 801e3dc:	2b00      	cmp	r3, #0
 801e3de:	d00a      	beq.n	801e3f6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801e3e0:	7c7a      	ldrb	r2, [r7, #17]
 801e3e2:	4913      	ldr	r1, [pc, #76]	; (801e430 <etharp_query+0x268>)
 801e3e4:	4613      	mov	r3, r2
 801e3e6:	005b      	lsls	r3, r3, #1
 801e3e8:	4413      	add	r3, r2
 801e3ea:	00db      	lsls	r3, r3, #3
 801e3ec:	440b      	add	r3, r1
 801e3ee:	681b      	ldr	r3, [r3, #0]
 801e3f0:	4618      	mov	r0, r3
 801e3f2:	f7f8 facf 	bl	8016994 <pbuf_free>
      }
      arp_table[i].q = p;
 801e3f6:	7c7a      	ldrb	r2, [r7, #17]
 801e3f8:	490d      	ldr	r1, [pc, #52]	; (801e430 <etharp_query+0x268>)
 801e3fa:	4613      	mov	r3, r2
 801e3fc:	005b      	lsls	r3, r3, #1
 801e3fe:	4413      	add	r3, r2
 801e400:	00db      	lsls	r3, r3, #3
 801e402:	440b      	add	r3, r1
 801e404:	69fa      	ldr	r2, [r7, #28]
 801e406:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801e408:	2300      	movs	r3, #0
 801e40a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801e40e:	e002      	b.n	801e416 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801e410:	23ff      	movs	r3, #255	; 0xff
 801e412:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801e416:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801e41a:	4618      	mov	r0, r3
 801e41c:	3728      	adds	r7, #40	; 0x28
 801e41e:	46bd      	mov	sp, r7
 801e420:	bd80      	pop	{r7, pc}
 801e422:	bf00      	nop
 801e424:	08028f60 	.word	0x08028f60
 801e428:	0802910c 	.word	0x0802910c
 801e42c:	08028fd8 	.word	0x08028fd8
 801e430:	200188fc 	.word	0x200188fc
 801e434:	0802911c 	.word	0x0802911c
 801e438:	08029100 	.word	0x08029100
 801e43c:	200189ec 	.word	0x200189ec
 801e440:	08029144 	.word	0x08029144

0801e444 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801e444:	b580      	push	{r7, lr}
 801e446:	b08a      	sub	sp, #40	; 0x28
 801e448:	af02      	add	r7, sp, #8
 801e44a:	60f8      	str	r0, [r7, #12]
 801e44c:	60b9      	str	r1, [r7, #8]
 801e44e:	607a      	str	r2, [r7, #4]
 801e450:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801e452:	2300      	movs	r3, #0
 801e454:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801e456:	68fb      	ldr	r3, [r7, #12]
 801e458:	2b00      	cmp	r3, #0
 801e45a:	d106      	bne.n	801e46a <etharp_raw+0x26>
 801e45c:	4b3a      	ldr	r3, [pc, #232]	; (801e548 <etharp_raw+0x104>)
 801e45e:	f240 4257 	movw	r2, #1111	; 0x457
 801e462:	493a      	ldr	r1, [pc, #232]	; (801e54c <etharp_raw+0x108>)
 801e464:	483a      	ldr	r0, [pc, #232]	; (801e550 <etharp_raw+0x10c>)
 801e466:	f001 fd7d 	bl	801ff64 <printf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801e46a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e46e:	211c      	movs	r1, #28
 801e470:	200e      	movs	r0, #14
 801e472:	f7f7 ffab 	bl	80163cc <pbuf_alloc>
 801e476:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801e478:	69bb      	ldr	r3, [r7, #24]
 801e47a:	2b00      	cmp	r3, #0
 801e47c:	d102      	bne.n	801e484 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801e47e:	f04f 33ff 	mov.w	r3, #4294967295
 801e482:	e05d      	b.n	801e540 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801e484:	69bb      	ldr	r3, [r7, #24]
 801e486:	895b      	ldrh	r3, [r3, #10]
 801e488:	2b1b      	cmp	r3, #27
 801e48a:	d806      	bhi.n	801e49a <etharp_raw+0x56>
 801e48c:	4b2e      	ldr	r3, [pc, #184]	; (801e548 <etharp_raw+0x104>)
 801e48e:	f240 4262 	movw	r2, #1122	; 0x462
 801e492:	4930      	ldr	r1, [pc, #192]	; (801e554 <etharp_raw+0x110>)
 801e494:	482e      	ldr	r0, [pc, #184]	; (801e550 <etharp_raw+0x10c>)
 801e496:	f001 fd65 	bl	801ff64 <printf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801e49a:	69bb      	ldr	r3, [r7, #24]
 801e49c:	685b      	ldr	r3, [r3, #4]
 801e49e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801e4a0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801e4a2:	4618      	mov	r0, r3
 801e4a4:	f7f6 fe86 	bl	80151b4 <lwip_htons>
 801e4a8:	4603      	mov	r3, r0
 801e4aa:	461a      	mov	r2, r3
 801e4ac:	697b      	ldr	r3, [r7, #20]
 801e4ae:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801e4b0:	68fb      	ldr	r3, [r7, #12]
 801e4b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801e4b6:	2b06      	cmp	r3, #6
 801e4b8:	d006      	beq.n	801e4c8 <etharp_raw+0x84>
 801e4ba:	4b23      	ldr	r3, [pc, #140]	; (801e548 <etharp_raw+0x104>)
 801e4bc:	f240 4269 	movw	r2, #1129	; 0x469
 801e4c0:	4925      	ldr	r1, [pc, #148]	; (801e558 <etharp_raw+0x114>)
 801e4c2:	4823      	ldr	r0, [pc, #140]	; (801e550 <etharp_raw+0x10c>)
 801e4c4:	f001 fd4e 	bl	801ff64 <printf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801e4c8:	697b      	ldr	r3, [r7, #20]
 801e4ca:	3308      	adds	r3, #8
 801e4cc:	2206      	movs	r2, #6
 801e4ce:	6839      	ldr	r1, [r7, #0]
 801e4d0:	4618      	mov	r0, r3
 801e4d2:	f001 fd17 	bl	801ff04 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801e4d6:	697b      	ldr	r3, [r7, #20]
 801e4d8:	3312      	adds	r3, #18
 801e4da:	2206      	movs	r2, #6
 801e4dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801e4de:	4618      	mov	r0, r3
 801e4e0:	f001 fd10 	bl	801ff04 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801e4e4:	697b      	ldr	r3, [r7, #20]
 801e4e6:	330e      	adds	r3, #14
 801e4e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e4ea:	6812      	ldr	r2, [r2, #0]
 801e4ec:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801e4ee:	697b      	ldr	r3, [r7, #20]
 801e4f0:	3318      	adds	r3, #24
 801e4f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e4f4:	6812      	ldr	r2, [r2, #0]
 801e4f6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801e4f8:	697b      	ldr	r3, [r7, #20]
 801e4fa:	2200      	movs	r2, #0
 801e4fc:	701a      	strb	r2, [r3, #0]
 801e4fe:	2200      	movs	r2, #0
 801e500:	f042 0201 	orr.w	r2, r2, #1
 801e504:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801e506:	697b      	ldr	r3, [r7, #20]
 801e508:	2200      	movs	r2, #0
 801e50a:	f042 0208 	orr.w	r2, r2, #8
 801e50e:	709a      	strb	r2, [r3, #2]
 801e510:	2200      	movs	r2, #0
 801e512:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801e514:	697b      	ldr	r3, [r7, #20]
 801e516:	2206      	movs	r2, #6
 801e518:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801e51a:	697b      	ldr	r3, [r7, #20]
 801e51c:	2204      	movs	r2, #4
 801e51e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801e520:	f640 0306 	movw	r3, #2054	; 0x806
 801e524:	9300      	str	r3, [sp, #0]
 801e526:	687b      	ldr	r3, [r7, #4]
 801e528:	68ba      	ldr	r2, [r7, #8]
 801e52a:	69b9      	ldr	r1, [r7, #24]
 801e52c:	68f8      	ldr	r0, [r7, #12]
 801e52e:	f001 fb7b 	bl	801fc28 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801e532:	69b8      	ldr	r0, [r7, #24]
 801e534:	f7f8 fa2e 	bl	8016994 <pbuf_free>
  p = NULL;
 801e538:	2300      	movs	r3, #0
 801e53a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801e53c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801e540:	4618      	mov	r0, r3
 801e542:	3720      	adds	r7, #32
 801e544:	46bd      	mov	sp, r7
 801e546:	bd80      	pop	{r7, pc}
 801e548:	08028f60 	.word	0x08028f60
 801e54c:	080290b0 	.word	0x080290b0
 801e550:	08028fd8 	.word	0x08028fd8
 801e554:	08029160 	.word	0x08029160
 801e558:	08029194 	.word	0x08029194

0801e55c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801e55c:	b580      	push	{r7, lr}
 801e55e:	b088      	sub	sp, #32
 801e560:	af04      	add	r7, sp, #16
 801e562:	60f8      	str	r0, [r7, #12]
 801e564:	60b9      	str	r1, [r7, #8]
 801e566:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801e568:	68fb      	ldr	r3, [r7, #12]
 801e56a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801e56e:	68fb      	ldr	r3, [r7, #12]
 801e570:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801e574:	68fb      	ldr	r3, [r7, #12]
 801e576:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801e578:	2201      	movs	r2, #1
 801e57a:	9203      	str	r2, [sp, #12]
 801e57c:	68ba      	ldr	r2, [r7, #8]
 801e57e:	9202      	str	r2, [sp, #8]
 801e580:	4a06      	ldr	r2, [pc, #24]	; (801e59c <etharp_request_dst+0x40>)
 801e582:	9201      	str	r2, [sp, #4]
 801e584:	9300      	str	r3, [sp, #0]
 801e586:	4603      	mov	r3, r0
 801e588:	687a      	ldr	r2, [r7, #4]
 801e58a:	68f8      	ldr	r0, [r7, #12]
 801e58c:	f7ff ff5a 	bl	801e444 <etharp_raw>
 801e590:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801e592:	4618      	mov	r0, r3
 801e594:	3710      	adds	r7, #16
 801e596:	46bd      	mov	sp, r7
 801e598:	bd80      	pop	{r7, pc}
 801e59a:	bf00      	nop
 801e59c:	080718f4 	.word	0x080718f4

0801e5a0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801e5a0:	b580      	push	{r7, lr}
 801e5a2:	b082      	sub	sp, #8
 801e5a4:	af00      	add	r7, sp, #0
 801e5a6:	6078      	str	r0, [r7, #4]
 801e5a8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801e5aa:	4a05      	ldr	r2, [pc, #20]	; (801e5c0 <etharp_request+0x20>)
 801e5ac:	6839      	ldr	r1, [r7, #0]
 801e5ae:	6878      	ldr	r0, [r7, #4]
 801e5b0:	f7ff ffd4 	bl	801e55c <etharp_request_dst>
 801e5b4:	4603      	mov	r3, r0
}
 801e5b6:	4618      	mov	r0, r3
 801e5b8:	3708      	adds	r7, #8
 801e5ba:	46bd      	mov	sp, r7
 801e5bc:	bd80      	pop	{r7, pc}
 801e5be:	bf00      	nop
 801e5c0:	080718ec 	.word	0x080718ec

0801e5c4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801e5c4:	b580      	push	{r7, lr}
 801e5c6:	b08e      	sub	sp, #56	; 0x38
 801e5c8:	af04      	add	r7, sp, #16
 801e5ca:	6078      	str	r0, [r7, #4]
 801e5cc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801e5ce:	4b79      	ldr	r3, [pc, #484]	; (801e7b4 <icmp_input+0x1f0>)
 801e5d0:	689b      	ldr	r3, [r3, #8]
 801e5d2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801e5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e5d6:	781b      	ldrb	r3, [r3, #0]
 801e5d8:	f003 030f 	and.w	r3, r3, #15
 801e5dc:	b2db      	uxtb	r3, r3
 801e5de:	009b      	lsls	r3, r3, #2
 801e5e0:	b2db      	uxtb	r3, r3
 801e5e2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801e5e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e5e6:	2b13      	cmp	r3, #19
 801e5e8:	f240 80cd 	bls.w	801e786 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801e5ec:	687b      	ldr	r3, [r7, #4]
 801e5ee:	895b      	ldrh	r3, [r3, #10]
 801e5f0:	2b03      	cmp	r3, #3
 801e5f2:	f240 80ca 	bls.w	801e78a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801e5f6:	687b      	ldr	r3, [r7, #4]
 801e5f8:	685b      	ldr	r3, [r3, #4]
 801e5fa:	781b      	ldrb	r3, [r3, #0]
 801e5fc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801e600:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801e604:	2b00      	cmp	r3, #0
 801e606:	f000 80b7 	beq.w	801e778 <icmp_input+0x1b4>
 801e60a:	2b08      	cmp	r3, #8
 801e60c:	f040 80b7 	bne.w	801e77e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801e610:	4b69      	ldr	r3, [pc, #420]	; (801e7b8 <icmp_input+0x1f4>)
 801e612:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801e614:	4b67      	ldr	r3, [pc, #412]	; (801e7b4 <icmp_input+0x1f0>)
 801e616:	695b      	ldr	r3, [r3, #20]
 801e618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801e61c:	2be0      	cmp	r3, #224	; 0xe0
 801e61e:	f000 80bb 	beq.w	801e798 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801e622:	4b64      	ldr	r3, [pc, #400]	; (801e7b4 <icmp_input+0x1f0>)
 801e624:	695b      	ldr	r3, [r3, #20]
 801e626:	4a63      	ldr	r2, [pc, #396]	; (801e7b4 <icmp_input+0x1f0>)
 801e628:	6812      	ldr	r2, [r2, #0]
 801e62a:	4611      	mov	r1, r2
 801e62c:	4618      	mov	r0, r3
 801e62e:	f000 fbed 	bl	801ee0c <ip4_addr_isbroadcast_u32>
 801e632:	4603      	mov	r3, r0
 801e634:	2b00      	cmp	r3, #0
 801e636:	f040 80b1 	bne.w	801e79c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801e63a:	687b      	ldr	r3, [r7, #4]
 801e63c:	891b      	ldrh	r3, [r3, #8]
 801e63e:	2b07      	cmp	r3, #7
 801e640:	f240 80a5 	bls.w	801e78e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801e644:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e646:	330e      	adds	r3, #14
 801e648:	4619      	mov	r1, r3
 801e64a:	6878      	ldr	r0, [r7, #4]
 801e64c:	f7f8 f90c 	bl	8016868 <pbuf_add_header>
 801e650:	4603      	mov	r3, r0
 801e652:	2b00      	cmp	r3, #0
 801e654:	d04b      	beq.n	801e6ee <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801e656:	687b      	ldr	r3, [r7, #4]
 801e658:	891a      	ldrh	r2, [r3, #8]
 801e65a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e65c:	4413      	add	r3, r2
 801e65e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801e660:	687b      	ldr	r3, [r7, #4]
 801e662:	891b      	ldrh	r3, [r3, #8]
 801e664:	8b7a      	ldrh	r2, [r7, #26]
 801e666:	429a      	cmp	r2, r3
 801e668:	f0c0 809a 	bcc.w	801e7a0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801e66c:	8b7b      	ldrh	r3, [r7, #26]
 801e66e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e672:	4619      	mov	r1, r3
 801e674:	200e      	movs	r0, #14
 801e676:	f7f7 fea9 	bl	80163cc <pbuf_alloc>
 801e67a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801e67c:	697b      	ldr	r3, [r7, #20]
 801e67e:	2b00      	cmp	r3, #0
 801e680:	f000 8090 	beq.w	801e7a4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801e684:	697b      	ldr	r3, [r7, #20]
 801e686:	895b      	ldrh	r3, [r3, #10]
 801e688:	461a      	mov	r2, r3
 801e68a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e68c:	3308      	adds	r3, #8
 801e68e:	429a      	cmp	r2, r3
 801e690:	d203      	bcs.n	801e69a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801e692:	6978      	ldr	r0, [r7, #20]
 801e694:	f7f8 f97e 	bl	8016994 <pbuf_free>
          goto icmperr;
 801e698:	e085      	b.n	801e7a6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801e69a:	697b      	ldr	r3, [r7, #20]
 801e69c:	685b      	ldr	r3, [r3, #4]
 801e69e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801e6a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801e6a2:	4618      	mov	r0, r3
 801e6a4:	f001 fc2e 	bl	801ff04 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801e6a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e6aa:	4619      	mov	r1, r3
 801e6ac:	6978      	ldr	r0, [r7, #20]
 801e6ae:	f7f8 f8eb 	bl	8016888 <pbuf_remove_header>
 801e6b2:	4603      	mov	r3, r0
 801e6b4:	2b00      	cmp	r3, #0
 801e6b6:	d009      	beq.n	801e6cc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801e6b8:	4b40      	ldr	r3, [pc, #256]	; (801e7bc <icmp_input+0x1f8>)
 801e6ba:	22b6      	movs	r2, #182	; 0xb6
 801e6bc:	4940      	ldr	r1, [pc, #256]	; (801e7c0 <icmp_input+0x1fc>)
 801e6be:	4841      	ldr	r0, [pc, #260]	; (801e7c4 <icmp_input+0x200>)
 801e6c0:	f001 fc50 	bl	801ff64 <printf>
          pbuf_free(r);
 801e6c4:	6978      	ldr	r0, [r7, #20]
 801e6c6:	f7f8 f965 	bl	8016994 <pbuf_free>
          goto icmperr;
 801e6ca:	e06c      	b.n	801e7a6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801e6cc:	6879      	ldr	r1, [r7, #4]
 801e6ce:	6978      	ldr	r0, [r7, #20]
 801e6d0:	f7f8 fa84 	bl	8016bdc <pbuf_copy>
 801e6d4:	4603      	mov	r3, r0
 801e6d6:	2b00      	cmp	r3, #0
 801e6d8:	d003      	beq.n	801e6e2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801e6da:	6978      	ldr	r0, [r7, #20]
 801e6dc:	f7f8 f95a 	bl	8016994 <pbuf_free>
          goto icmperr;
 801e6e0:	e061      	b.n	801e7a6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801e6e2:	6878      	ldr	r0, [r7, #4]
 801e6e4:	f7f8 f956 	bl	8016994 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801e6e8:	697b      	ldr	r3, [r7, #20]
 801e6ea:	607b      	str	r3, [r7, #4]
 801e6ec:	e00f      	b.n	801e70e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801e6ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e6f0:	330e      	adds	r3, #14
 801e6f2:	4619      	mov	r1, r3
 801e6f4:	6878      	ldr	r0, [r7, #4]
 801e6f6:	f7f8 f8c7 	bl	8016888 <pbuf_remove_header>
 801e6fa:	4603      	mov	r3, r0
 801e6fc:	2b00      	cmp	r3, #0
 801e6fe:	d006      	beq.n	801e70e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801e700:	4b2e      	ldr	r3, [pc, #184]	; (801e7bc <icmp_input+0x1f8>)
 801e702:	22c7      	movs	r2, #199	; 0xc7
 801e704:	4930      	ldr	r1, [pc, #192]	; (801e7c8 <icmp_input+0x204>)
 801e706:	482f      	ldr	r0, [pc, #188]	; (801e7c4 <icmp_input+0x200>)
 801e708:	f001 fc2c 	bl	801ff64 <printf>
          goto icmperr;
 801e70c:	e04b      	b.n	801e7a6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801e70e:	687b      	ldr	r3, [r7, #4]
 801e710:	685b      	ldr	r3, [r3, #4]
 801e712:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801e714:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e716:	4619      	mov	r1, r3
 801e718:	6878      	ldr	r0, [r7, #4]
 801e71a:	f7f8 f8a5 	bl	8016868 <pbuf_add_header>
 801e71e:	4603      	mov	r3, r0
 801e720:	2b00      	cmp	r3, #0
 801e722:	d12b      	bne.n	801e77c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801e724:	687b      	ldr	r3, [r7, #4]
 801e726:	685b      	ldr	r3, [r3, #4]
 801e728:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801e72a:	69fb      	ldr	r3, [r7, #28]
 801e72c:	681a      	ldr	r2, [r3, #0]
 801e72e:	68fb      	ldr	r3, [r7, #12]
 801e730:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801e732:	4b20      	ldr	r3, [pc, #128]	; (801e7b4 <icmp_input+0x1f0>)
 801e734:	691a      	ldr	r2, [r3, #16]
 801e736:	68fb      	ldr	r3, [r7, #12]
 801e738:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801e73a:	693b      	ldr	r3, [r7, #16]
 801e73c:	2200      	movs	r2, #0
 801e73e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801e740:	693b      	ldr	r3, [r7, #16]
 801e742:	2200      	movs	r2, #0
 801e744:	709a      	strb	r2, [r3, #2]
 801e746:	2200      	movs	r2, #0
 801e748:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801e74a:	68fb      	ldr	r3, [r7, #12]
 801e74c:	22ff      	movs	r2, #255	; 0xff
 801e74e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801e750:	68fb      	ldr	r3, [r7, #12]
 801e752:	2200      	movs	r2, #0
 801e754:	729a      	strb	r2, [r3, #10]
 801e756:	2200      	movs	r2, #0
 801e758:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801e75a:	683b      	ldr	r3, [r7, #0]
 801e75c:	9302      	str	r3, [sp, #8]
 801e75e:	2301      	movs	r3, #1
 801e760:	9301      	str	r3, [sp, #4]
 801e762:	2300      	movs	r3, #0
 801e764:	9300      	str	r3, [sp, #0]
 801e766:	23ff      	movs	r3, #255	; 0xff
 801e768:	2200      	movs	r2, #0
 801e76a:	69f9      	ldr	r1, [r7, #28]
 801e76c:	6878      	ldr	r0, [r7, #4]
 801e76e:	f000 fa75 	bl	801ec5c <ip4_output_if>
 801e772:	4603      	mov	r3, r0
 801e774:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801e776:	e001      	b.n	801e77c <icmp_input+0x1b8>
      break;
 801e778:	bf00      	nop
 801e77a:	e000      	b.n	801e77e <icmp_input+0x1ba>
      break;
 801e77c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801e77e:	6878      	ldr	r0, [r7, #4]
 801e780:	f7f8 f908 	bl	8016994 <pbuf_free>
  return;
 801e784:	e013      	b.n	801e7ae <icmp_input+0x1ea>
    goto lenerr;
 801e786:	bf00      	nop
 801e788:	e002      	b.n	801e790 <icmp_input+0x1cc>
    goto lenerr;
 801e78a:	bf00      	nop
 801e78c:	e000      	b.n	801e790 <icmp_input+0x1cc>
        goto lenerr;
 801e78e:	bf00      	nop
lenerr:
  pbuf_free(p);
 801e790:	6878      	ldr	r0, [r7, #4]
 801e792:	f7f8 f8ff 	bl	8016994 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801e796:	e00a      	b.n	801e7ae <icmp_input+0x1ea>
        goto icmperr;
 801e798:	bf00      	nop
 801e79a:	e004      	b.n	801e7a6 <icmp_input+0x1e2>
        goto icmperr;
 801e79c:	bf00      	nop
 801e79e:	e002      	b.n	801e7a6 <icmp_input+0x1e2>
          goto icmperr;
 801e7a0:	bf00      	nop
 801e7a2:	e000      	b.n	801e7a6 <icmp_input+0x1e2>
          goto icmperr;
 801e7a4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801e7a6:	6878      	ldr	r0, [r7, #4]
 801e7a8:	f7f8 f8f4 	bl	8016994 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801e7ac:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801e7ae:	3728      	adds	r7, #40	; 0x28
 801e7b0:	46bd      	mov	sp, r7
 801e7b2:	bd80      	pop	{r7, pc}
 801e7b4:	20011748 	.word	0x20011748
 801e7b8:	2001175c 	.word	0x2001175c
 801e7bc:	080291d8 	.word	0x080291d8
 801e7c0:	08029210 	.word	0x08029210
 801e7c4:	08029248 	.word	0x08029248
 801e7c8:	08029270 	.word	0x08029270

0801e7cc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801e7cc:	b580      	push	{r7, lr}
 801e7ce:	b082      	sub	sp, #8
 801e7d0:	af00      	add	r7, sp, #0
 801e7d2:	6078      	str	r0, [r7, #4]
 801e7d4:	460b      	mov	r3, r1
 801e7d6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801e7d8:	78fb      	ldrb	r3, [r7, #3]
 801e7da:	461a      	mov	r2, r3
 801e7dc:	2103      	movs	r1, #3
 801e7de:	6878      	ldr	r0, [r7, #4]
 801e7e0:	f000 f814 	bl	801e80c <icmp_send_response>
}
 801e7e4:	bf00      	nop
 801e7e6:	3708      	adds	r7, #8
 801e7e8:	46bd      	mov	sp, r7
 801e7ea:	bd80      	pop	{r7, pc}

0801e7ec <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801e7ec:	b580      	push	{r7, lr}
 801e7ee:	b082      	sub	sp, #8
 801e7f0:	af00      	add	r7, sp, #0
 801e7f2:	6078      	str	r0, [r7, #4]
 801e7f4:	460b      	mov	r3, r1
 801e7f6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801e7f8:	78fb      	ldrb	r3, [r7, #3]
 801e7fa:	461a      	mov	r2, r3
 801e7fc:	210b      	movs	r1, #11
 801e7fe:	6878      	ldr	r0, [r7, #4]
 801e800:	f000 f804 	bl	801e80c <icmp_send_response>
}
 801e804:	bf00      	nop
 801e806:	3708      	adds	r7, #8
 801e808:	46bd      	mov	sp, r7
 801e80a:	bd80      	pop	{r7, pc}

0801e80c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801e80c:	b580      	push	{r7, lr}
 801e80e:	b08c      	sub	sp, #48	; 0x30
 801e810:	af04      	add	r7, sp, #16
 801e812:	6078      	str	r0, [r7, #4]
 801e814:	460b      	mov	r3, r1
 801e816:	70fb      	strb	r3, [r7, #3]
 801e818:	4613      	mov	r3, r2
 801e81a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801e81c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e820:	2124      	movs	r1, #36	; 0x24
 801e822:	2022      	movs	r0, #34	; 0x22
 801e824:	f7f7 fdd2 	bl	80163cc <pbuf_alloc>
 801e828:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801e82a:	69fb      	ldr	r3, [r7, #28]
 801e82c:	2b00      	cmp	r3, #0
 801e82e:	d04c      	beq.n	801e8ca <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801e830:	69fb      	ldr	r3, [r7, #28]
 801e832:	895b      	ldrh	r3, [r3, #10]
 801e834:	2b23      	cmp	r3, #35	; 0x23
 801e836:	d806      	bhi.n	801e846 <icmp_send_response+0x3a>
 801e838:	4b26      	ldr	r3, [pc, #152]	; (801e8d4 <icmp_send_response+0xc8>)
 801e83a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801e83e:	4926      	ldr	r1, [pc, #152]	; (801e8d8 <icmp_send_response+0xcc>)
 801e840:	4826      	ldr	r0, [pc, #152]	; (801e8dc <icmp_send_response+0xd0>)
 801e842:	f001 fb8f 	bl	801ff64 <printf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801e846:	687b      	ldr	r3, [r7, #4]
 801e848:	685b      	ldr	r3, [r3, #4]
 801e84a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801e84c:	69fb      	ldr	r3, [r7, #28]
 801e84e:	685b      	ldr	r3, [r3, #4]
 801e850:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801e852:	697b      	ldr	r3, [r7, #20]
 801e854:	78fa      	ldrb	r2, [r7, #3]
 801e856:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801e858:	697b      	ldr	r3, [r7, #20]
 801e85a:	78ba      	ldrb	r2, [r7, #2]
 801e85c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801e85e:	697b      	ldr	r3, [r7, #20]
 801e860:	2200      	movs	r2, #0
 801e862:	711a      	strb	r2, [r3, #4]
 801e864:	2200      	movs	r2, #0
 801e866:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801e868:	697b      	ldr	r3, [r7, #20]
 801e86a:	2200      	movs	r2, #0
 801e86c:	719a      	strb	r2, [r3, #6]
 801e86e:	2200      	movs	r2, #0
 801e870:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801e872:	69fb      	ldr	r3, [r7, #28]
 801e874:	685b      	ldr	r3, [r3, #4]
 801e876:	f103 0008 	add.w	r0, r3, #8
 801e87a:	687b      	ldr	r3, [r7, #4]
 801e87c:	685b      	ldr	r3, [r3, #4]
 801e87e:	221c      	movs	r2, #28
 801e880:	4619      	mov	r1, r3
 801e882:	f001 fb3f 	bl	801ff04 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801e886:	69bb      	ldr	r3, [r7, #24]
 801e888:	68db      	ldr	r3, [r3, #12]
 801e88a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801e88c:	f107 030c 	add.w	r3, r7, #12
 801e890:	4618      	mov	r0, r3
 801e892:	f000 f825 	bl	801e8e0 <ip4_route>
 801e896:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801e898:	693b      	ldr	r3, [r7, #16]
 801e89a:	2b00      	cmp	r3, #0
 801e89c:	d011      	beq.n	801e8c2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801e89e:	697b      	ldr	r3, [r7, #20]
 801e8a0:	2200      	movs	r2, #0
 801e8a2:	709a      	strb	r2, [r3, #2]
 801e8a4:	2200      	movs	r2, #0
 801e8a6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801e8a8:	f107 020c 	add.w	r2, r7, #12
 801e8ac:	693b      	ldr	r3, [r7, #16]
 801e8ae:	9302      	str	r3, [sp, #8]
 801e8b0:	2301      	movs	r3, #1
 801e8b2:	9301      	str	r3, [sp, #4]
 801e8b4:	2300      	movs	r3, #0
 801e8b6:	9300      	str	r3, [sp, #0]
 801e8b8:	23ff      	movs	r3, #255	; 0xff
 801e8ba:	2100      	movs	r1, #0
 801e8bc:	69f8      	ldr	r0, [r7, #28]
 801e8be:	f000 f9cd 	bl	801ec5c <ip4_output_if>
  }
  pbuf_free(q);
 801e8c2:	69f8      	ldr	r0, [r7, #28]
 801e8c4:	f7f8 f866 	bl	8016994 <pbuf_free>
 801e8c8:	e000      	b.n	801e8cc <icmp_send_response+0xc0>
    return;
 801e8ca:	bf00      	nop
}
 801e8cc:	3720      	adds	r7, #32
 801e8ce:	46bd      	mov	sp, r7
 801e8d0:	bd80      	pop	{r7, pc}
 801e8d2:	bf00      	nop
 801e8d4:	080291d8 	.word	0x080291d8
 801e8d8:	080292a4 	.word	0x080292a4
 801e8dc:	08029248 	.word	0x08029248

0801e8e0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801e8e0:	b480      	push	{r7}
 801e8e2:	b085      	sub	sp, #20
 801e8e4:	af00      	add	r7, sp, #0
 801e8e6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801e8e8:	4b33      	ldr	r3, [pc, #204]	; (801e9b8 <ip4_route+0xd8>)
 801e8ea:	681b      	ldr	r3, [r3, #0]
 801e8ec:	60fb      	str	r3, [r7, #12]
 801e8ee:	e036      	b.n	801e95e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801e8f0:	68fb      	ldr	r3, [r7, #12]
 801e8f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e8f6:	f003 0301 	and.w	r3, r3, #1
 801e8fa:	b2db      	uxtb	r3, r3
 801e8fc:	2b00      	cmp	r3, #0
 801e8fe:	d02b      	beq.n	801e958 <ip4_route+0x78>
 801e900:	68fb      	ldr	r3, [r7, #12]
 801e902:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e906:	089b      	lsrs	r3, r3, #2
 801e908:	f003 0301 	and.w	r3, r3, #1
 801e90c:	b2db      	uxtb	r3, r3
 801e90e:	2b00      	cmp	r3, #0
 801e910:	d022      	beq.n	801e958 <ip4_route+0x78>
 801e912:	68fb      	ldr	r3, [r7, #12]
 801e914:	3304      	adds	r3, #4
 801e916:	681b      	ldr	r3, [r3, #0]
 801e918:	2b00      	cmp	r3, #0
 801e91a:	d01d      	beq.n	801e958 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801e91c:	687b      	ldr	r3, [r7, #4]
 801e91e:	681a      	ldr	r2, [r3, #0]
 801e920:	68fb      	ldr	r3, [r7, #12]
 801e922:	3304      	adds	r3, #4
 801e924:	681b      	ldr	r3, [r3, #0]
 801e926:	405a      	eors	r2, r3
 801e928:	68fb      	ldr	r3, [r7, #12]
 801e92a:	3308      	adds	r3, #8
 801e92c:	681b      	ldr	r3, [r3, #0]
 801e92e:	4013      	ands	r3, r2
 801e930:	2b00      	cmp	r3, #0
 801e932:	d101      	bne.n	801e938 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801e934:	68fb      	ldr	r3, [r7, #12]
 801e936:	e038      	b.n	801e9aa <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801e938:	68fb      	ldr	r3, [r7, #12]
 801e93a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e93e:	f003 0302 	and.w	r3, r3, #2
 801e942:	2b00      	cmp	r3, #0
 801e944:	d108      	bne.n	801e958 <ip4_route+0x78>
 801e946:	687b      	ldr	r3, [r7, #4]
 801e948:	681a      	ldr	r2, [r3, #0]
 801e94a:	68fb      	ldr	r3, [r7, #12]
 801e94c:	330c      	adds	r3, #12
 801e94e:	681b      	ldr	r3, [r3, #0]
 801e950:	429a      	cmp	r2, r3
 801e952:	d101      	bne.n	801e958 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801e954:	68fb      	ldr	r3, [r7, #12]
 801e956:	e028      	b.n	801e9aa <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801e958:	68fb      	ldr	r3, [r7, #12]
 801e95a:	681b      	ldr	r3, [r3, #0]
 801e95c:	60fb      	str	r3, [r7, #12]
 801e95e:	68fb      	ldr	r3, [r7, #12]
 801e960:	2b00      	cmp	r3, #0
 801e962:	d1c5      	bne.n	801e8f0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801e964:	4b15      	ldr	r3, [pc, #84]	; (801e9bc <ip4_route+0xdc>)
 801e966:	681b      	ldr	r3, [r3, #0]
 801e968:	2b00      	cmp	r3, #0
 801e96a:	d01a      	beq.n	801e9a2 <ip4_route+0xc2>
 801e96c:	4b13      	ldr	r3, [pc, #76]	; (801e9bc <ip4_route+0xdc>)
 801e96e:	681b      	ldr	r3, [r3, #0]
 801e970:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e974:	f003 0301 	and.w	r3, r3, #1
 801e978:	2b00      	cmp	r3, #0
 801e97a:	d012      	beq.n	801e9a2 <ip4_route+0xc2>
 801e97c:	4b0f      	ldr	r3, [pc, #60]	; (801e9bc <ip4_route+0xdc>)
 801e97e:	681b      	ldr	r3, [r3, #0]
 801e980:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e984:	f003 0304 	and.w	r3, r3, #4
 801e988:	2b00      	cmp	r3, #0
 801e98a:	d00a      	beq.n	801e9a2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801e98c:	4b0b      	ldr	r3, [pc, #44]	; (801e9bc <ip4_route+0xdc>)
 801e98e:	681b      	ldr	r3, [r3, #0]
 801e990:	3304      	adds	r3, #4
 801e992:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801e994:	2b00      	cmp	r3, #0
 801e996:	d004      	beq.n	801e9a2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801e998:	687b      	ldr	r3, [r7, #4]
 801e99a:	681b      	ldr	r3, [r3, #0]
 801e99c:	b2db      	uxtb	r3, r3
 801e99e:	2b7f      	cmp	r3, #127	; 0x7f
 801e9a0:	d101      	bne.n	801e9a6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801e9a2:	2300      	movs	r3, #0
 801e9a4:	e001      	b.n	801e9aa <ip4_route+0xca>
  }

  return netif_default;
 801e9a6:	4b05      	ldr	r3, [pc, #20]	; (801e9bc <ip4_route+0xdc>)
 801e9a8:	681b      	ldr	r3, [r3, #0]
}
 801e9aa:	4618      	mov	r0, r3
 801e9ac:	3714      	adds	r7, #20
 801e9ae:	46bd      	mov	sp, r7
 801e9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9b4:	4770      	bx	lr
 801e9b6:	bf00      	nop
 801e9b8:	20018890 	.word	0x20018890
 801e9bc:	20018894 	.word	0x20018894

0801e9c0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801e9c0:	b580      	push	{r7, lr}
 801e9c2:	b082      	sub	sp, #8
 801e9c4:	af00      	add	r7, sp, #0
 801e9c6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801e9c8:	687b      	ldr	r3, [r7, #4]
 801e9ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e9ce:	f003 0301 	and.w	r3, r3, #1
 801e9d2:	b2db      	uxtb	r3, r3
 801e9d4:	2b00      	cmp	r3, #0
 801e9d6:	d016      	beq.n	801ea06 <ip4_input_accept+0x46>
 801e9d8:	687b      	ldr	r3, [r7, #4]
 801e9da:	3304      	adds	r3, #4
 801e9dc:	681b      	ldr	r3, [r3, #0]
 801e9de:	2b00      	cmp	r3, #0
 801e9e0:	d011      	beq.n	801ea06 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801e9e2:	4b0b      	ldr	r3, [pc, #44]	; (801ea10 <ip4_input_accept+0x50>)
 801e9e4:	695a      	ldr	r2, [r3, #20]
 801e9e6:	687b      	ldr	r3, [r7, #4]
 801e9e8:	3304      	adds	r3, #4
 801e9ea:	681b      	ldr	r3, [r3, #0]
 801e9ec:	429a      	cmp	r2, r3
 801e9ee:	d008      	beq.n	801ea02 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801e9f0:	4b07      	ldr	r3, [pc, #28]	; (801ea10 <ip4_input_accept+0x50>)
 801e9f2:	695b      	ldr	r3, [r3, #20]
 801e9f4:	6879      	ldr	r1, [r7, #4]
 801e9f6:	4618      	mov	r0, r3
 801e9f8:	f000 fa08 	bl	801ee0c <ip4_addr_isbroadcast_u32>
 801e9fc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801e9fe:	2b00      	cmp	r3, #0
 801ea00:	d001      	beq.n	801ea06 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801ea02:	2301      	movs	r3, #1
 801ea04:	e000      	b.n	801ea08 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801ea06:	2300      	movs	r3, #0
}
 801ea08:	4618      	mov	r0, r3
 801ea0a:	3708      	adds	r7, #8
 801ea0c:	46bd      	mov	sp, r7
 801ea0e:	bd80      	pop	{r7, pc}
 801ea10:	20011748 	.word	0x20011748

0801ea14 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801ea14:	b580      	push	{r7, lr}
 801ea16:	b086      	sub	sp, #24
 801ea18:	af00      	add	r7, sp, #0
 801ea1a:	6078      	str	r0, [r7, #4]
 801ea1c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801ea1e:	687b      	ldr	r3, [r7, #4]
 801ea20:	685b      	ldr	r3, [r3, #4]
 801ea22:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801ea24:	697b      	ldr	r3, [r7, #20]
 801ea26:	781b      	ldrb	r3, [r3, #0]
 801ea28:	091b      	lsrs	r3, r3, #4
 801ea2a:	b2db      	uxtb	r3, r3
 801ea2c:	2b04      	cmp	r3, #4
 801ea2e:	d004      	beq.n	801ea3a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801ea30:	6878      	ldr	r0, [r7, #4]
 801ea32:	f7f7 ffaf 	bl	8016994 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801ea36:	2300      	movs	r3, #0
 801ea38:	e107      	b.n	801ec4a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801ea3a:	697b      	ldr	r3, [r7, #20]
 801ea3c:	781b      	ldrb	r3, [r3, #0]
 801ea3e:	f003 030f 	and.w	r3, r3, #15
 801ea42:	b2db      	uxtb	r3, r3
 801ea44:	009b      	lsls	r3, r3, #2
 801ea46:	b2db      	uxtb	r3, r3
 801ea48:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801ea4a:	697b      	ldr	r3, [r7, #20]
 801ea4c:	885b      	ldrh	r3, [r3, #2]
 801ea4e:	b29b      	uxth	r3, r3
 801ea50:	4618      	mov	r0, r3
 801ea52:	f7f6 fbaf 	bl	80151b4 <lwip_htons>
 801ea56:	4603      	mov	r3, r0
 801ea58:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801ea5a:	687b      	ldr	r3, [r7, #4]
 801ea5c:	891b      	ldrh	r3, [r3, #8]
 801ea5e:	89ba      	ldrh	r2, [r7, #12]
 801ea60:	429a      	cmp	r2, r3
 801ea62:	d204      	bcs.n	801ea6e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801ea64:	89bb      	ldrh	r3, [r7, #12]
 801ea66:	4619      	mov	r1, r3
 801ea68:	6878      	ldr	r0, [r7, #4]
 801ea6a:	f7f7 fe0d 	bl	8016688 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801ea6e:	687b      	ldr	r3, [r7, #4]
 801ea70:	895b      	ldrh	r3, [r3, #10]
 801ea72:	89fa      	ldrh	r2, [r7, #14]
 801ea74:	429a      	cmp	r2, r3
 801ea76:	d807      	bhi.n	801ea88 <ip4_input+0x74>
 801ea78:	687b      	ldr	r3, [r7, #4]
 801ea7a:	891b      	ldrh	r3, [r3, #8]
 801ea7c:	89ba      	ldrh	r2, [r7, #12]
 801ea7e:	429a      	cmp	r2, r3
 801ea80:	d802      	bhi.n	801ea88 <ip4_input+0x74>
 801ea82:	89fb      	ldrh	r3, [r7, #14]
 801ea84:	2b13      	cmp	r3, #19
 801ea86:	d804      	bhi.n	801ea92 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801ea88:	6878      	ldr	r0, [r7, #4]
 801ea8a:	f7f7 ff83 	bl	8016994 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801ea8e:	2300      	movs	r3, #0
 801ea90:	e0db      	b.n	801ec4a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801ea92:	697b      	ldr	r3, [r7, #20]
 801ea94:	691b      	ldr	r3, [r3, #16]
 801ea96:	4a6f      	ldr	r2, [pc, #444]	; (801ec54 <ip4_input+0x240>)
 801ea98:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801ea9a:	697b      	ldr	r3, [r7, #20]
 801ea9c:	68db      	ldr	r3, [r3, #12]
 801ea9e:	4a6d      	ldr	r2, [pc, #436]	; (801ec54 <ip4_input+0x240>)
 801eaa0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801eaa2:	4b6c      	ldr	r3, [pc, #432]	; (801ec54 <ip4_input+0x240>)
 801eaa4:	695b      	ldr	r3, [r3, #20]
 801eaa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801eaaa:	2be0      	cmp	r3, #224	; 0xe0
 801eaac:	d112      	bne.n	801ead4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801eaae:	683b      	ldr	r3, [r7, #0]
 801eab0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801eab4:	f003 0301 	and.w	r3, r3, #1
 801eab8:	b2db      	uxtb	r3, r3
 801eaba:	2b00      	cmp	r3, #0
 801eabc:	d007      	beq.n	801eace <ip4_input+0xba>
 801eabe:	683b      	ldr	r3, [r7, #0]
 801eac0:	3304      	adds	r3, #4
 801eac2:	681b      	ldr	r3, [r3, #0]
 801eac4:	2b00      	cmp	r3, #0
 801eac6:	d002      	beq.n	801eace <ip4_input+0xba>
      netif = inp;
 801eac8:	683b      	ldr	r3, [r7, #0]
 801eaca:	613b      	str	r3, [r7, #16]
 801eacc:	e02a      	b.n	801eb24 <ip4_input+0x110>
    } else {
      netif = NULL;
 801eace:	2300      	movs	r3, #0
 801ead0:	613b      	str	r3, [r7, #16]
 801ead2:	e027      	b.n	801eb24 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801ead4:	6838      	ldr	r0, [r7, #0]
 801ead6:	f7ff ff73 	bl	801e9c0 <ip4_input_accept>
 801eada:	4603      	mov	r3, r0
 801eadc:	2b00      	cmp	r3, #0
 801eade:	d002      	beq.n	801eae6 <ip4_input+0xd2>
      netif = inp;
 801eae0:	683b      	ldr	r3, [r7, #0]
 801eae2:	613b      	str	r3, [r7, #16]
 801eae4:	e01e      	b.n	801eb24 <ip4_input+0x110>
    } else {
      netif = NULL;
 801eae6:	2300      	movs	r3, #0
 801eae8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801eaea:	4b5a      	ldr	r3, [pc, #360]	; (801ec54 <ip4_input+0x240>)
 801eaec:	695b      	ldr	r3, [r3, #20]
 801eaee:	b2db      	uxtb	r3, r3
 801eaf0:	2b7f      	cmp	r3, #127	; 0x7f
 801eaf2:	d017      	beq.n	801eb24 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801eaf4:	4b58      	ldr	r3, [pc, #352]	; (801ec58 <ip4_input+0x244>)
 801eaf6:	681b      	ldr	r3, [r3, #0]
 801eaf8:	613b      	str	r3, [r7, #16]
 801eafa:	e00e      	b.n	801eb1a <ip4_input+0x106>
          if (netif == inp) {
 801eafc:	693a      	ldr	r2, [r7, #16]
 801eafe:	683b      	ldr	r3, [r7, #0]
 801eb00:	429a      	cmp	r2, r3
 801eb02:	d006      	beq.n	801eb12 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801eb04:	6938      	ldr	r0, [r7, #16]
 801eb06:	f7ff ff5b 	bl	801e9c0 <ip4_input_accept>
 801eb0a:	4603      	mov	r3, r0
 801eb0c:	2b00      	cmp	r3, #0
 801eb0e:	d108      	bne.n	801eb22 <ip4_input+0x10e>
 801eb10:	e000      	b.n	801eb14 <ip4_input+0x100>
            continue;
 801eb12:	bf00      	nop
        NETIF_FOREACH(netif) {
 801eb14:	693b      	ldr	r3, [r7, #16]
 801eb16:	681b      	ldr	r3, [r3, #0]
 801eb18:	613b      	str	r3, [r7, #16]
 801eb1a:	693b      	ldr	r3, [r7, #16]
 801eb1c:	2b00      	cmp	r3, #0
 801eb1e:	d1ed      	bne.n	801eafc <ip4_input+0xe8>
 801eb20:	e000      	b.n	801eb24 <ip4_input+0x110>
            break;
 801eb22:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801eb24:	4b4b      	ldr	r3, [pc, #300]	; (801ec54 <ip4_input+0x240>)
 801eb26:	691b      	ldr	r3, [r3, #16]
 801eb28:	6839      	ldr	r1, [r7, #0]
 801eb2a:	4618      	mov	r0, r3
 801eb2c:	f000 f96e 	bl	801ee0c <ip4_addr_isbroadcast_u32>
 801eb30:	4603      	mov	r3, r0
 801eb32:	2b00      	cmp	r3, #0
 801eb34:	d105      	bne.n	801eb42 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801eb36:	4b47      	ldr	r3, [pc, #284]	; (801ec54 <ip4_input+0x240>)
 801eb38:	691b      	ldr	r3, [r3, #16]
 801eb3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801eb3e:	2be0      	cmp	r3, #224	; 0xe0
 801eb40:	d104      	bne.n	801eb4c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801eb42:	6878      	ldr	r0, [r7, #4]
 801eb44:	f7f7 ff26 	bl	8016994 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801eb48:	2300      	movs	r3, #0
 801eb4a:	e07e      	b.n	801ec4a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801eb4c:	693b      	ldr	r3, [r7, #16]
 801eb4e:	2b00      	cmp	r3, #0
 801eb50:	d104      	bne.n	801eb5c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801eb52:	6878      	ldr	r0, [r7, #4]
 801eb54:	f7f7 ff1e 	bl	8016994 <pbuf_free>
    return ERR_OK;
 801eb58:	2300      	movs	r3, #0
 801eb5a:	e076      	b.n	801ec4a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801eb5c:	697b      	ldr	r3, [r7, #20]
 801eb5e:	88db      	ldrh	r3, [r3, #6]
 801eb60:	b29b      	uxth	r3, r3
 801eb62:	461a      	mov	r2, r3
 801eb64:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801eb68:	4013      	ands	r3, r2
 801eb6a:	2b00      	cmp	r3, #0
 801eb6c:	d00b      	beq.n	801eb86 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801eb6e:	6878      	ldr	r0, [r7, #4]
 801eb70:	f000 fc92 	bl	801f498 <ip4_reass>
 801eb74:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801eb76:	687b      	ldr	r3, [r7, #4]
 801eb78:	2b00      	cmp	r3, #0
 801eb7a:	d101      	bne.n	801eb80 <ip4_input+0x16c>
      return ERR_OK;
 801eb7c:	2300      	movs	r3, #0
 801eb7e:	e064      	b.n	801ec4a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801eb80:	687b      	ldr	r3, [r7, #4]
 801eb82:	685b      	ldr	r3, [r3, #4]
 801eb84:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801eb86:	4a33      	ldr	r2, [pc, #204]	; (801ec54 <ip4_input+0x240>)
 801eb88:	693b      	ldr	r3, [r7, #16]
 801eb8a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801eb8c:	4a31      	ldr	r2, [pc, #196]	; (801ec54 <ip4_input+0x240>)
 801eb8e:	683b      	ldr	r3, [r7, #0]
 801eb90:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801eb92:	4a30      	ldr	r2, [pc, #192]	; (801ec54 <ip4_input+0x240>)
 801eb94:	697b      	ldr	r3, [r7, #20]
 801eb96:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801eb98:	697b      	ldr	r3, [r7, #20]
 801eb9a:	781b      	ldrb	r3, [r3, #0]
 801eb9c:	f003 030f 	and.w	r3, r3, #15
 801eba0:	b2db      	uxtb	r3, r3
 801eba2:	009b      	lsls	r3, r3, #2
 801eba4:	b2db      	uxtb	r3, r3
 801eba6:	b29a      	uxth	r2, r3
 801eba8:	4b2a      	ldr	r3, [pc, #168]	; (801ec54 <ip4_input+0x240>)
 801ebaa:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801ebac:	89fb      	ldrh	r3, [r7, #14]
 801ebae:	4619      	mov	r1, r3
 801ebb0:	6878      	ldr	r0, [r7, #4]
 801ebb2:	f7f7 fe69 	bl	8016888 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801ebb6:	697b      	ldr	r3, [r7, #20]
 801ebb8:	7a5b      	ldrb	r3, [r3, #9]
 801ebba:	2b11      	cmp	r3, #17
 801ebbc:	d006      	beq.n	801ebcc <ip4_input+0x1b8>
 801ebbe:	2b11      	cmp	r3, #17
 801ebc0:	dc13      	bgt.n	801ebea <ip4_input+0x1d6>
 801ebc2:	2b01      	cmp	r3, #1
 801ebc4:	d00c      	beq.n	801ebe0 <ip4_input+0x1cc>
 801ebc6:	2b06      	cmp	r3, #6
 801ebc8:	d005      	beq.n	801ebd6 <ip4_input+0x1c2>
 801ebca:	e00e      	b.n	801ebea <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801ebcc:	6839      	ldr	r1, [r7, #0]
 801ebce:	6878      	ldr	r0, [r7, #4]
 801ebd0:	f7fe fc68 	bl	801d4a4 <udp_input>
        break;
 801ebd4:	e026      	b.n	801ec24 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801ebd6:	6839      	ldr	r1, [r7, #0]
 801ebd8:	6878      	ldr	r0, [r7, #4]
 801ebda:	f7fa f81f 	bl	8018c1c <tcp_input>
        break;
 801ebde:	e021      	b.n	801ec24 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801ebe0:	6839      	ldr	r1, [r7, #0]
 801ebe2:	6878      	ldr	r0, [r7, #4]
 801ebe4:	f7ff fcee 	bl	801e5c4 <icmp_input>
        break;
 801ebe8:	e01c      	b.n	801ec24 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801ebea:	4b1a      	ldr	r3, [pc, #104]	; (801ec54 <ip4_input+0x240>)
 801ebec:	695b      	ldr	r3, [r3, #20]
 801ebee:	6939      	ldr	r1, [r7, #16]
 801ebf0:	4618      	mov	r0, r3
 801ebf2:	f000 f90b 	bl	801ee0c <ip4_addr_isbroadcast_u32>
 801ebf6:	4603      	mov	r3, r0
 801ebf8:	2b00      	cmp	r3, #0
 801ebfa:	d10f      	bne.n	801ec1c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801ebfc:	4b15      	ldr	r3, [pc, #84]	; (801ec54 <ip4_input+0x240>)
 801ebfe:	695b      	ldr	r3, [r3, #20]
 801ec00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801ec04:	2be0      	cmp	r3, #224	; 0xe0
 801ec06:	d009      	beq.n	801ec1c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801ec08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801ec0c:	4619      	mov	r1, r3
 801ec0e:	6878      	ldr	r0, [r7, #4]
 801ec10:	f7f7 fead 	bl	801696e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801ec14:	2102      	movs	r1, #2
 801ec16:	6878      	ldr	r0, [r7, #4]
 801ec18:	f7ff fdd8 	bl	801e7cc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801ec1c:	6878      	ldr	r0, [r7, #4]
 801ec1e:	f7f7 feb9 	bl	8016994 <pbuf_free>
        break;
 801ec22:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801ec24:	4b0b      	ldr	r3, [pc, #44]	; (801ec54 <ip4_input+0x240>)
 801ec26:	2200      	movs	r2, #0
 801ec28:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801ec2a:	4b0a      	ldr	r3, [pc, #40]	; (801ec54 <ip4_input+0x240>)
 801ec2c:	2200      	movs	r2, #0
 801ec2e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801ec30:	4b08      	ldr	r3, [pc, #32]	; (801ec54 <ip4_input+0x240>)
 801ec32:	2200      	movs	r2, #0
 801ec34:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801ec36:	4b07      	ldr	r3, [pc, #28]	; (801ec54 <ip4_input+0x240>)
 801ec38:	2200      	movs	r2, #0
 801ec3a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801ec3c:	4b05      	ldr	r3, [pc, #20]	; (801ec54 <ip4_input+0x240>)
 801ec3e:	2200      	movs	r2, #0
 801ec40:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801ec42:	4b04      	ldr	r3, [pc, #16]	; (801ec54 <ip4_input+0x240>)
 801ec44:	2200      	movs	r2, #0
 801ec46:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801ec48:	2300      	movs	r3, #0
}
 801ec4a:	4618      	mov	r0, r3
 801ec4c:	3718      	adds	r7, #24
 801ec4e:	46bd      	mov	sp, r7
 801ec50:	bd80      	pop	{r7, pc}
 801ec52:	bf00      	nop
 801ec54:	20011748 	.word	0x20011748
 801ec58:	20018890 	.word	0x20018890

0801ec5c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801ec5c:	b580      	push	{r7, lr}
 801ec5e:	b08a      	sub	sp, #40	; 0x28
 801ec60:	af04      	add	r7, sp, #16
 801ec62:	60f8      	str	r0, [r7, #12]
 801ec64:	60b9      	str	r1, [r7, #8]
 801ec66:	607a      	str	r2, [r7, #4]
 801ec68:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801ec6a:	68bb      	ldr	r3, [r7, #8]
 801ec6c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801ec6e:	687b      	ldr	r3, [r7, #4]
 801ec70:	2b00      	cmp	r3, #0
 801ec72:	d009      	beq.n	801ec88 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801ec74:	68bb      	ldr	r3, [r7, #8]
 801ec76:	2b00      	cmp	r3, #0
 801ec78:	d003      	beq.n	801ec82 <ip4_output_if+0x26>
 801ec7a:	68bb      	ldr	r3, [r7, #8]
 801ec7c:	681b      	ldr	r3, [r3, #0]
 801ec7e:	2b00      	cmp	r3, #0
 801ec80:	d102      	bne.n	801ec88 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801ec82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ec84:	3304      	adds	r3, #4
 801ec86:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801ec88:	78fa      	ldrb	r2, [r7, #3]
 801ec8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ec8c:	9302      	str	r3, [sp, #8]
 801ec8e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ec92:	9301      	str	r3, [sp, #4]
 801ec94:	f897 3020 	ldrb.w	r3, [r7, #32]
 801ec98:	9300      	str	r3, [sp, #0]
 801ec9a:	4613      	mov	r3, r2
 801ec9c:	687a      	ldr	r2, [r7, #4]
 801ec9e:	6979      	ldr	r1, [r7, #20]
 801eca0:	68f8      	ldr	r0, [r7, #12]
 801eca2:	f000 f805 	bl	801ecb0 <ip4_output_if_src>
 801eca6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801eca8:	4618      	mov	r0, r3
 801ecaa:	3718      	adds	r7, #24
 801ecac:	46bd      	mov	sp, r7
 801ecae:	bd80      	pop	{r7, pc}

0801ecb0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801ecb0:	b580      	push	{r7, lr}
 801ecb2:	b088      	sub	sp, #32
 801ecb4:	af00      	add	r7, sp, #0
 801ecb6:	60f8      	str	r0, [r7, #12]
 801ecb8:	60b9      	str	r1, [r7, #8]
 801ecba:	607a      	str	r2, [r7, #4]
 801ecbc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801ecbe:	68fb      	ldr	r3, [r7, #12]
 801ecc0:	7b9b      	ldrb	r3, [r3, #14]
 801ecc2:	2b01      	cmp	r3, #1
 801ecc4:	d006      	beq.n	801ecd4 <ip4_output_if_src+0x24>
 801ecc6:	4b4b      	ldr	r3, [pc, #300]	; (801edf4 <ip4_output_if_src+0x144>)
 801ecc8:	f44f 7255 	mov.w	r2, #852	; 0x354
 801eccc:	494a      	ldr	r1, [pc, #296]	; (801edf8 <ip4_output_if_src+0x148>)
 801ecce:	484b      	ldr	r0, [pc, #300]	; (801edfc <ip4_output_if_src+0x14c>)
 801ecd0:	f001 f948 	bl	801ff64 <printf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801ecd4:	687b      	ldr	r3, [r7, #4]
 801ecd6:	2b00      	cmp	r3, #0
 801ecd8:	d060      	beq.n	801ed9c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801ecda:	2314      	movs	r3, #20
 801ecdc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801ecde:	2114      	movs	r1, #20
 801ece0:	68f8      	ldr	r0, [r7, #12]
 801ece2:	f7f7 fdc1 	bl	8016868 <pbuf_add_header>
 801ece6:	4603      	mov	r3, r0
 801ece8:	2b00      	cmp	r3, #0
 801ecea:	d002      	beq.n	801ecf2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801ecec:	f06f 0301 	mvn.w	r3, #1
 801ecf0:	e07c      	b.n	801edec <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801ecf2:	68fb      	ldr	r3, [r7, #12]
 801ecf4:	685b      	ldr	r3, [r3, #4]
 801ecf6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801ecf8:	68fb      	ldr	r3, [r7, #12]
 801ecfa:	895b      	ldrh	r3, [r3, #10]
 801ecfc:	2b13      	cmp	r3, #19
 801ecfe:	d806      	bhi.n	801ed0e <ip4_output_if_src+0x5e>
 801ed00:	4b3c      	ldr	r3, [pc, #240]	; (801edf4 <ip4_output_if_src+0x144>)
 801ed02:	f44f 7262 	mov.w	r2, #904	; 0x388
 801ed06:	493e      	ldr	r1, [pc, #248]	; (801ee00 <ip4_output_if_src+0x150>)
 801ed08:	483c      	ldr	r0, [pc, #240]	; (801edfc <ip4_output_if_src+0x14c>)
 801ed0a:	f001 f92b 	bl	801ff64 <printf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801ed0e:	69fb      	ldr	r3, [r7, #28]
 801ed10:	78fa      	ldrb	r2, [r7, #3]
 801ed12:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801ed14:	69fb      	ldr	r3, [r7, #28]
 801ed16:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801ed1a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801ed1c:	687b      	ldr	r3, [r7, #4]
 801ed1e:	681a      	ldr	r2, [r3, #0]
 801ed20:	69fb      	ldr	r3, [r7, #28]
 801ed22:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801ed24:	8b7b      	ldrh	r3, [r7, #26]
 801ed26:	089b      	lsrs	r3, r3, #2
 801ed28:	b29b      	uxth	r3, r3
 801ed2a:	b2db      	uxtb	r3, r3
 801ed2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ed30:	b2da      	uxtb	r2, r3
 801ed32:	69fb      	ldr	r3, [r7, #28]
 801ed34:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801ed36:	69fb      	ldr	r3, [r7, #28]
 801ed38:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801ed3c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801ed3e:	68fb      	ldr	r3, [r7, #12]
 801ed40:	891b      	ldrh	r3, [r3, #8]
 801ed42:	4618      	mov	r0, r3
 801ed44:	f7f6 fa36 	bl	80151b4 <lwip_htons>
 801ed48:	4603      	mov	r3, r0
 801ed4a:	461a      	mov	r2, r3
 801ed4c:	69fb      	ldr	r3, [r7, #28]
 801ed4e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801ed50:	69fb      	ldr	r3, [r7, #28]
 801ed52:	2200      	movs	r2, #0
 801ed54:	719a      	strb	r2, [r3, #6]
 801ed56:	2200      	movs	r2, #0
 801ed58:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801ed5a:	4b2a      	ldr	r3, [pc, #168]	; (801ee04 <ip4_output_if_src+0x154>)
 801ed5c:	881b      	ldrh	r3, [r3, #0]
 801ed5e:	4618      	mov	r0, r3
 801ed60:	f7f6 fa28 	bl	80151b4 <lwip_htons>
 801ed64:	4603      	mov	r3, r0
 801ed66:	461a      	mov	r2, r3
 801ed68:	69fb      	ldr	r3, [r7, #28]
 801ed6a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801ed6c:	4b25      	ldr	r3, [pc, #148]	; (801ee04 <ip4_output_if_src+0x154>)
 801ed6e:	881b      	ldrh	r3, [r3, #0]
 801ed70:	3301      	adds	r3, #1
 801ed72:	b29a      	uxth	r2, r3
 801ed74:	4b23      	ldr	r3, [pc, #140]	; (801ee04 <ip4_output_if_src+0x154>)
 801ed76:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801ed78:	68bb      	ldr	r3, [r7, #8]
 801ed7a:	2b00      	cmp	r3, #0
 801ed7c:	d104      	bne.n	801ed88 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801ed7e:	4b22      	ldr	r3, [pc, #136]	; (801ee08 <ip4_output_if_src+0x158>)
 801ed80:	681a      	ldr	r2, [r3, #0]
 801ed82:	69fb      	ldr	r3, [r7, #28]
 801ed84:	60da      	str	r2, [r3, #12]
 801ed86:	e003      	b.n	801ed90 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801ed88:	68bb      	ldr	r3, [r7, #8]
 801ed8a:	681a      	ldr	r2, [r3, #0]
 801ed8c:	69fb      	ldr	r3, [r7, #28]
 801ed8e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801ed90:	69fb      	ldr	r3, [r7, #28]
 801ed92:	2200      	movs	r2, #0
 801ed94:	729a      	strb	r2, [r3, #10]
 801ed96:	2200      	movs	r2, #0
 801ed98:	72da      	strb	r2, [r3, #11]
 801ed9a:	e00f      	b.n	801edbc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801ed9c:	68fb      	ldr	r3, [r7, #12]
 801ed9e:	895b      	ldrh	r3, [r3, #10]
 801eda0:	2b13      	cmp	r3, #19
 801eda2:	d802      	bhi.n	801edaa <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801eda4:	f06f 0301 	mvn.w	r3, #1
 801eda8:	e020      	b.n	801edec <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801edaa:	68fb      	ldr	r3, [r7, #12]
 801edac:	685b      	ldr	r3, [r3, #4]
 801edae:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801edb0:	69fb      	ldr	r3, [r7, #28]
 801edb2:	691b      	ldr	r3, [r3, #16]
 801edb4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801edb6:	f107 0314 	add.w	r3, r7, #20
 801edba:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801edbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801edbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801edc0:	2b00      	cmp	r3, #0
 801edc2:	d00c      	beq.n	801edde <ip4_output_if_src+0x12e>
 801edc4:	68fb      	ldr	r3, [r7, #12]
 801edc6:	891a      	ldrh	r2, [r3, #8]
 801edc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801edca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801edcc:	429a      	cmp	r2, r3
 801edce:	d906      	bls.n	801edde <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801edd0:	687a      	ldr	r2, [r7, #4]
 801edd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801edd4:	68f8      	ldr	r0, [r7, #12]
 801edd6:	f000 fd53 	bl	801f880 <ip4_frag>
 801edda:	4603      	mov	r3, r0
 801eddc:	e006      	b.n	801edec <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801edde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ede0:	695b      	ldr	r3, [r3, #20]
 801ede2:	687a      	ldr	r2, [r7, #4]
 801ede4:	68f9      	ldr	r1, [r7, #12]
 801ede6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ede8:	4798      	blx	r3
 801edea:	4603      	mov	r3, r0
}
 801edec:	4618      	mov	r0, r3
 801edee:	3720      	adds	r7, #32
 801edf0:	46bd      	mov	sp, r7
 801edf2:	bd80      	pop	{r7, pc}
 801edf4:	080292d0 	.word	0x080292d0
 801edf8:	08029304 	.word	0x08029304
 801edfc:	08029310 	.word	0x08029310
 801ee00:	08029338 	.word	0x08029338
 801ee04:	200189ee 	.word	0x200189ee
 801ee08:	080718e8 	.word	0x080718e8

0801ee0c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801ee0c:	b480      	push	{r7}
 801ee0e:	b085      	sub	sp, #20
 801ee10:	af00      	add	r7, sp, #0
 801ee12:	6078      	str	r0, [r7, #4]
 801ee14:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801ee16:	687b      	ldr	r3, [r7, #4]
 801ee18:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801ee1a:	687b      	ldr	r3, [r7, #4]
 801ee1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ee20:	d002      	beq.n	801ee28 <ip4_addr_isbroadcast_u32+0x1c>
 801ee22:	687b      	ldr	r3, [r7, #4]
 801ee24:	2b00      	cmp	r3, #0
 801ee26:	d101      	bne.n	801ee2c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801ee28:	2301      	movs	r3, #1
 801ee2a:	e02a      	b.n	801ee82 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801ee2c:	683b      	ldr	r3, [r7, #0]
 801ee2e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ee32:	f003 0302 	and.w	r3, r3, #2
 801ee36:	2b00      	cmp	r3, #0
 801ee38:	d101      	bne.n	801ee3e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801ee3a:	2300      	movs	r3, #0
 801ee3c:	e021      	b.n	801ee82 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801ee3e:	683b      	ldr	r3, [r7, #0]
 801ee40:	3304      	adds	r3, #4
 801ee42:	681b      	ldr	r3, [r3, #0]
 801ee44:	687a      	ldr	r2, [r7, #4]
 801ee46:	429a      	cmp	r2, r3
 801ee48:	d101      	bne.n	801ee4e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801ee4a:	2300      	movs	r3, #0
 801ee4c:	e019      	b.n	801ee82 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801ee4e:	68fa      	ldr	r2, [r7, #12]
 801ee50:	683b      	ldr	r3, [r7, #0]
 801ee52:	3304      	adds	r3, #4
 801ee54:	681b      	ldr	r3, [r3, #0]
 801ee56:	405a      	eors	r2, r3
 801ee58:	683b      	ldr	r3, [r7, #0]
 801ee5a:	3308      	adds	r3, #8
 801ee5c:	681b      	ldr	r3, [r3, #0]
 801ee5e:	4013      	ands	r3, r2
 801ee60:	2b00      	cmp	r3, #0
 801ee62:	d10d      	bne.n	801ee80 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801ee64:	683b      	ldr	r3, [r7, #0]
 801ee66:	3308      	adds	r3, #8
 801ee68:	681b      	ldr	r3, [r3, #0]
 801ee6a:	43da      	mvns	r2, r3
 801ee6c:	687b      	ldr	r3, [r7, #4]
 801ee6e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801ee70:	683b      	ldr	r3, [r7, #0]
 801ee72:	3308      	adds	r3, #8
 801ee74:	681b      	ldr	r3, [r3, #0]
 801ee76:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801ee78:	429a      	cmp	r2, r3
 801ee7a:	d101      	bne.n	801ee80 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801ee7c:	2301      	movs	r3, #1
 801ee7e:	e000      	b.n	801ee82 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801ee80:	2300      	movs	r3, #0
  }
}
 801ee82:	4618      	mov	r0, r3
 801ee84:	3714      	adds	r7, #20
 801ee86:	46bd      	mov	sp, r7
 801ee88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee8c:	4770      	bx	lr
	...

0801ee90 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801ee90:	b580      	push	{r7, lr}
 801ee92:	b084      	sub	sp, #16
 801ee94:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801ee96:	2300      	movs	r3, #0
 801ee98:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801ee9a:	4b12      	ldr	r3, [pc, #72]	; (801eee4 <ip_reass_tmr+0x54>)
 801ee9c:	681b      	ldr	r3, [r3, #0]
 801ee9e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801eea0:	e018      	b.n	801eed4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801eea2:	68fb      	ldr	r3, [r7, #12]
 801eea4:	7fdb      	ldrb	r3, [r3, #31]
 801eea6:	2b00      	cmp	r3, #0
 801eea8:	d00b      	beq.n	801eec2 <ip_reass_tmr+0x32>
      r->timer--;
 801eeaa:	68fb      	ldr	r3, [r7, #12]
 801eeac:	7fdb      	ldrb	r3, [r3, #31]
 801eeae:	3b01      	subs	r3, #1
 801eeb0:	b2da      	uxtb	r2, r3
 801eeb2:	68fb      	ldr	r3, [r7, #12]
 801eeb4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801eeb6:	68fb      	ldr	r3, [r7, #12]
 801eeb8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801eeba:	68fb      	ldr	r3, [r7, #12]
 801eebc:	681b      	ldr	r3, [r3, #0]
 801eebe:	60fb      	str	r3, [r7, #12]
 801eec0:	e008      	b.n	801eed4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801eec2:	68fb      	ldr	r3, [r7, #12]
 801eec4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801eec6:	68fb      	ldr	r3, [r7, #12]
 801eec8:	681b      	ldr	r3, [r3, #0]
 801eeca:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801eecc:	68b9      	ldr	r1, [r7, #8]
 801eece:	6878      	ldr	r0, [r7, #4]
 801eed0:	f000 f80a 	bl	801eee8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801eed4:	68fb      	ldr	r3, [r7, #12]
 801eed6:	2b00      	cmp	r3, #0
 801eed8:	d1e3      	bne.n	801eea2 <ip_reass_tmr+0x12>
    }
  }
}
 801eeda:	bf00      	nop
 801eedc:	bf00      	nop
 801eede:	3710      	adds	r7, #16
 801eee0:	46bd      	mov	sp, r7
 801eee2:	bd80      	pop	{r7, pc}
 801eee4:	200189f0 	.word	0x200189f0

0801eee8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801eee8:	b580      	push	{r7, lr}
 801eeea:	b088      	sub	sp, #32
 801eeec:	af00      	add	r7, sp, #0
 801eeee:	6078      	str	r0, [r7, #4]
 801eef0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801eef2:	2300      	movs	r3, #0
 801eef4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801eef6:	683a      	ldr	r2, [r7, #0]
 801eef8:	687b      	ldr	r3, [r7, #4]
 801eefa:	429a      	cmp	r2, r3
 801eefc:	d105      	bne.n	801ef0a <ip_reass_free_complete_datagram+0x22>
 801eefe:	4b45      	ldr	r3, [pc, #276]	; (801f014 <ip_reass_free_complete_datagram+0x12c>)
 801ef00:	22ab      	movs	r2, #171	; 0xab
 801ef02:	4945      	ldr	r1, [pc, #276]	; (801f018 <ip_reass_free_complete_datagram+0x130>)
 801ef04:	4845      	ldr	r0, [pc, #276]	; (801f01c <ip_reass_free_complete_datagram+0x134>)
 801ef06:	f001 f82d 	bl	801ff64 <printf>
  if (prev != NULL) {
 801ef0a:	683b      	ldr	r3, [r7, #0]
 801ef0c:	2b00      	cmp	r3, #0
 801ef0e:	d00a      	beq.n	801ef26 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801ef10:	683b      	ldr	r3, [r7, #0]
 801ef12:	681b      	ldr	r3, [r3, #0]
 801ef14:	687a      	ldr	r2, [r7, #4]
 801ef16:	429a      	cmp	r2, r3
 801ef18:	d005      	beq.n	801ef26 <ip_reass_free_complete_datagram+0x3e>
 801ef1a:	4b3e      	ldr	r3, [pc, #248]	; (801f014 <ip_reass_free_complete_datagram+0x12c>)
 801ef1c:	22ad      	movs	r2, #173	; 0xad
 801ef1e:	4940      	ldr	r1, [pc, #256]	; (801f020 <ip_reass_free_complete_datagram+0x138>)
 801ef20:	483e      	ldr	r0, [pc, #248]	; (801f01c <ip_reass_free_complete_datagram+0x134>)
 801ef22:	f001 f81f 	bl	801ff64 <printf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801ef26:	687b      	ldr	r3, [r7, #4]
 801ef28:	685b      	ldr	r3, [r3, #4]
 801ef2a:	685b      	ldr	r3, [r3, #4]
 801ef2c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801ef2e:	697b      	ldr	r3, [r7, #20]
 801ef30:	889b      	ldrh	r3, [r3, #4]
 801ef32:	b29b      	uxth	r3, r3
 801ef34:	2b00      	cmp	r3, #0
 801ef36:	d12a      	bne.n	801ef8e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801ef38:	687b      	ldr	r3, [r7, #4]
 801ef3a:	685b      	ldr	r3, [r3, #4]
 801ef3c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801ef3e:	697b      	ldr	r3, [r7, #20]
 801ef40:	681a      	ldr	r2, [r3, #0]
 801ef42:	687b      	ldr	r3, [r7, #4]
 801ef44:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801ef46:	69bb      	ldr	r3, [r7, #24]
 801ef48:	6858      	ldr	r0, [r3, #4]
 801ef4a:	687b      	ldr	r3, [r7, #4]
 801ef4c:	3308      	adds	r3, #8
 801ef4e:	2214      	movs	r2, #20
 801ef50:	4619      	mov	r1, r3
 801ef52:	f000 ffd7 	bl	801ff04 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801ef56:	2101      	movs	r1, #1
 801ef58:	69b8      	ldr	r0, [r7, #24]
 801ef5a:	f7ff fc47 	bl	801e7ec <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801ef5e:	69b8      	ldr	r0, [r7, #24]
 801ef60:	f7f7 fda6 	bl	8016ab0 <pbuf_clen>
 801ef64:	4603      	mov	r3, r0
 801ef66:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801ef68:	8bfa      	ldrh	r2, [r7, #30]
 801ef6a:	8a7b      	ldrh	r3, [r7, #18]
 801ef6c:	4413      	add	r3, r2
 801ef6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ef72:	db05      	blt.n	801ef80 <ip_reass_free_complete_datagram+0x98>
 801ef74:	4b27      	ldr	r3, [pc, #156]	; (801f014 <ip_reass_free_complete_datagram+0x12c>)
 801ef76:	22bc      	movs	r2, #188	; 0xbc
 801ef78:	492a      	ldr	r1, [pc, #168]	; (801f024 <ip_reass_free_complete_datagram+0x13c>)
 801ef7a:	4828      	ldr	r0, [pc, #160]	; (801f01c <ip_reass_free_complete_datagram+0x134>)
 801ef7c:	f000 fff2 	bl	801ff64 <printf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801ef80:	8bfa      	ldrh	r2, [r7, #30]
 801ef82:	8a7b      	ldrh	r3, [r7, #18]
 801ef84:	4413      	add	r3, r2
 801ef86:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801ef88:	69b8      	ldr	r0, [r7, #24]
 801ef8a:	f7f7 fd03 	bl	8016994 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801ef8e:	687b      	ldr	r3, [r7, #4]
 801ef90:	685b      	ldr	r3, [r3, #4]
 801ef92:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801ef94:	e01f      	b.n	801efd6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801ef96:	69bb      	ldr	r3, [r7, #24]
 801ef98:	685b      	ldr	r3, [r3, #4]
 801ef9a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801ef9c:	69bb      	ldr	r3, [r7, #24]
 801ef9e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801efa0:	697b      	ldr	r3, [r7, #20]
 801efa2:	681b      	ldr	r3, [r3, #0]
 801efa4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801efa6:	68f8      	ldr	r0, [r7, #12]
 801efa8:	f7f7 fd82 	bl	8016ab0 <pbuf_clen>
 801efac:	4603      	mov	r3, r0
 801efae:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801efb0:	8bfa      	ldrh	r2, [r7, #30]
 801efb2:	8a7b      	ldrh	r3, [r7, #18]
 801efb4:	4413      	add	r3, r2
 801efb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801efba:	db05      	blt.n	801efc8 <ip_reass_free_complete_datagram+0xe0>
 801efbc:	4b15      	ldr	r3, [pc, #84]	; (801f014 <ip_reass_free_complete_datagram+0x12c>)
 801efbe:	22cc      	movs	r2, #204	; 0xcc
 801efc0:	4918      	ldr	r1, [pc, #96]	; (801f024 <ip_reass_free_complete_datagram+0x13c>)
 801efc2:	4816      	ldr	r0, [pc, #88]	; (801f01c <ip_reass_free_complete_datagram+0x134>)
 801efc4:	f000 ffce 	bl	801ff64 <printf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801efc8:	8bfa      	ldrh	r2, [r7, #30]
 801efca:	8a7b      	ldrh	r3, [r7, #18]
 801efcc:	4413      	add	r3, r2
 801efce:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801efd0:	68f8      	ldr	r0, [r7, #12]
 801efd2:	f7f7 fcdf 	bl	8016994 <pbuf_free>
  while (p != NULL) {
 801efd6:	69bb      	ldr	r3, [r7, #24]
 801efd8:	2b00      	cmp	r3, #0
 801efda:	d1dc      	bne.n	801ef96 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801efdc:	6839      	ldr	r1, [r7, #0]
 801efde:	6878      	ldr	r0, [r7, #4]
 801efe0:	f000 f8c2 	bl	801f168 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801efe4:	4b10      	ldr	r3, [pc, #64]	; (801f028 <ip_reass_free_complete_datagram+0x140>)
 801efe6:	881b      	ldrh	r3, [r3, #0]
 801efe8:	8bfa      	ldrh	r2, [r7, #30]
 801efea:	429a      	cmp	r2, r3
 801efec:	d905      	bls.n	801effa <ip_reass_free_complete_datagram+0x112>
 801efee:	4b09      	ldr	r3, [pc, #36]	; (801f014 <ip_reass_free_complete_datagram+0x12c>)
 801eff0:	22d2      	movs	r2, #210	; 0xd2
 801eff2:	490e      	ldr	r1, [pc, #56]	; (801f02c <ip_reass_free_complete_datagram+0x144>)
 801eff4:	4809      	ldr	r0, [pc, #36]	; (801f01c <ip_reass_free_complete_datagram+0x134>)
 801eff6:	f000 ffb5 	bl	801ff64 <printf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801effa:	4b0b      	ldr	r3, [pc, #44]	; (801f028 <ip_reass_free_complete_datagram+0x140>)
 801effc:	881a      	ldrh	r2, [r3, #0]
 801effe:	8bfb      	ldrh	r3, [r7, #30]
 801f000:	1ad3      	subs	r3, r2, r3
 801f002:	b29a      	uxth	r2, r3
 801f004:	4b08      	ldr	r3, [pc, #32]	; (801f028 <ip_reass_free_complete_datagram+0x140>)
 801f006:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801f008:	8bfb      	ldrh	r3, [r7, #30]
}
 801f00a:	4618      	mov	r0, r3
 801f00c:	3720      	adds	r7, #32
 801f00e:	46bd      	mov	sp, r7
 801f010:	bd80      	pop	{r7, pc}
 801f012:	bf00      	nop
 801f014:	08029368 	.word	0x08029368
 801f018:	080293a4 	.word	0x080293a4
 801f01c:	080293b0 	.word	0x080293b0
 801f020:	080293d8 	.word	0x080293d8
 801f024:	080293ec 	.word	0x080293ec
 801f028:	200189f4 	.word	0x200189f4
 801f02c:	0802940c 	.word	0x0802940c

0801f030 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801f030:	b580      	push	{r7, lr}
 801f032:	b08a      	sub	sp, #40	; 0x28
 801f034:	af00      	add	r7, sp, #0
 801f036:	6078      	str	r0, [r7, #4]
 801f038:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801f03a:	2300      	movs	r3, #0
 801f03c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801f03e:	2300      	movs	r3, #0
 801f040:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801f042:	2300      	movs	r3, #0
 801f044:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801f046:	2300      	movs	r3, #0
 801f048:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801f04a:	2300      	movs	r3, #0
 801f04c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801f04e:	4b28      	ldr	r3, [pc, #160]	; (801f0f0 <ip_reass_remove_oldest_datagram+0xc0>)
 801f050:	681b      	ldr	r3, [r3, #0]
 801f052:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801f054:	e030      	b.n	801f0b8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801f056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f058:	695a      	ldr	r2, [r3, #20]
 801f05a:	687b      	ldr	r3, [r7, #4]
 801f05c:	68db      	ldr	r3, [r3, #12]
 801f05e:	429a      	cmp	r2, r3
 801f060:	d10c      	bne.n	801f07c <ip_reass_remove_oldest_datagram+0x4c>
 801f062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f064:	699a      	ldr	r2, [r3, #24]
 801f066:	687b      	ldr	r3, [r7, #4]
 801f068:	691b      	ldr	r3, [r3, #16]
 801f06a:	429a      	cmp	r2, r3
 801f06c:	d106      	bne.n	801f07c <ip_reass_remove_oldest_datagram+0x4c>
 801f06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f070:	899a      	ldrh	r2, [r3, #12]
 801f072:	687b      	ldr	r3, [r7, #4]
 801f074:	889b      	ldrh	r3, [r3, #4]
 801f076:	b29b      	uxth	r3, r3
 801f078:	429a      	cmp	r2, r3
 801f07a:	d014      	beq.n	801f0a6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801f07c:	693b      	ldr	r3, [r7, #16]
 801f07e:	3301      	adds	r3, #1
 801f080:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801f082:	6a3b      	ldr	r3, [r7, #32]
 801f084:	2b00      	cmp	r3, #0
 801f086:	d104      	bne.n	801f092 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801f088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f08a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801f08c:	69fb      	ldr	r3, [r7, #28]
 801f08e:	61bb      	str	r3, [r7, #24]
 801f090:	e009      	b.n	801f0a6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801f092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f094:	7fda      	ldrb	r2, [r3, #31]
 801f096:	6a3b      	ldr	r3, [r7, #32]
 801f098:	7fdb      	ldrb	r3, [r3, #31]
 801f09a:	429a      	cmp	r2, r3
 801f09c:	d803      	bhi.n	801f0a6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801f09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f0a0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801f0a2:	69fb      	ldr	r3, [r7, #28]
 801f0a4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801f0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f0a8:	681b      	ldr	r3, [r3, #0]
 801f0aa:	2b00      	cmp	r3, #0
 801f0ac:	d001      	beq.n	801f0b2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801f0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f0b0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801f0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f0b4:	681b      	ldr	r3, [r3, #0]
 801f0b6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801f0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f0ba:	2b00      	cmp	r3, #0
 801f0bc:	d1cb      	bne.n	801f056 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801f0be:	6a3b      	ldr	r3, [r7, #32]
 801f0c0:	2b00      	cmp	r3, #0
 801f0c2:	d008      	beq.n	801f0d6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801f0c4:	69b9      	ldr	r1, [r7, #24]
 801f0c6:	6a38      	ldr	r0, [r7, #32]
 801f0c8:	f7ff ff0e 	bl	801eee8 <ip_reass_free_complete_datagram>
 801f0cc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801f0ce:	697a      	ldr	r2, [r7, #20]
 801f0d0:	68fb      	ldr	r3, [r7, #12]
 801f0d2:	4413      	add	r3, r2
 801f0d4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801f0d6:	697a      	ldr	r2, [r7, #20]
 801f0d8:	683b      	ldr	r3, [r7, #0]
 801f0da:	429a      	cmp	r2, r3
 801f0dc:	da02      	bge.n	801f0e4 <ip_reass_remove_oldest_datagram+0xb4>
 801f0de:	693b      	ldr	r3, [r7, #16]
 801f0e0:	2b01      	cmp	r3, #1
 801f0e2:	dcac      	bgt.n	801f03e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801f0e4:	697b      	ldr	r3, [r7, #20]
}
 801f0e6:	4618      	mov	r0, r3
 801f0e8:	3728      	adds	r7, #40	; 0x28
 801f0ea:	46bd      	mov	sp, r7
 801f0ec:	bd80      	pop	{r7, pc}
 801f0ee:	bf00      	nop
 801f0f0:	200189f0 	.word	0x200189f0

0801f0f4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801f0f4:	b580      	push	{r7, lr}
 801f0f6:	b084      	sub	sp, #16
 801f0f8:	af00      	add	r7, sp, #0
 801f0fa:	6078      	str	r0, [r7, #4]
 801f0fc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801f0fe:	2004      	movs	r0, #4
 801f100:	f7f6 fd36 	bl	8015b70 <memp_malloc>
 801f104:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801f106:	68fb      	ldr	r3, [r7, #12]
 801f108:	2b00      	cmp	r3, #0
 801f10a:	d110      	bne.n	801f12e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801f10c:	6839      	ldr	r1, [r7, #0]
 801f10e:	6878      	ldr	r0, [r7, #4]
 801f110:	f7ff ff8e 	bl	801f030 <ip_reass_remove_oldest_datagram>
 801f114:	4602      	mov	r2, r0
 801f116:	683b      	ldr	r3, [r7, #0]
 801f118:	4293      	cmp	r3, r2
 801f11a:	dc03      	bgt.n	801f124 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801f11c:	2004      	movs	r0, #4
 801f11e:	f7f6 fd27 	bl	8015b70 <memp_malloc>
 801f122:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801f124:	68fb      	ldr	r3, [r7, #12]
 801f126:	2b00      	cmp	r3, #0
 801f128:	d101      	bne.n	801f12e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801f12a:	2300      	movs	r3, #0
 801f12c:	e016      	b.n	801f15c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801f12e:	2220      	movs	r2, #32
 801f130:	2100      	movs	r1, #0
 801f132:	68f8      	ldr	r0, [r7, #12]
 801f134:	f000 ff0e 	bl	801ff54 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801f138:	68fb      	ldr	r3, [r7, #12]
 801f13a:	220f      	movs	r2, #15
 801f13c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801f13e:	4b09      	ldr	r3, [pc, #36]	; (801f164 <ip_reass_enqueue_new_datagram+0x70>)
 801f140:	681a      	ldr	r2, [r3, #0]
 801f142:	68fb      	ldr	r3, [r7, #12]
 801f144:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801f146:	4a07      	ldr	r2, [pc, #28]	; (801f164 <ip_reass_enqueue_new_datagram+0x70>)
 801f148:	68fb      	ldr	r3, [r7, #12]
 801f14a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801f14c:	68fb      	ldr	r3, [r7, #12]
 801f14e:	3308      	adds	r3, #8
 801f150:	2214      	movs	r2, #20
 801f152:	6879      	ldr	r1, [r7, #4]
 801f154:	4618      	mov	r0, r3
 801f156:	f000 fed5 	bl	801ff04 <memcpy>
  return ipr;
 801f15a:	68fb      	ldr	r3, [r7, #12]
}
 801f15c:	4618      	mov	r0, r3
 801f15e:	3710      	adds	r7, #16
 801f160:	46bd      	mov	sp, r7
 801f162:	bd80      	pop	{r7, pc}
 801f164:	200189f0 	.word	0x200189f0

0801f168 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801f168:	b580      	push	{r7, lr}
 801f16a:	b082      	sub	sp, #8
 801f16c:	af00      	add	r7, sp, #0
 801f16e:	6078      	str	r0, [r7, #4]
 801f170:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801f172:	4b10      	ldr	r3, [pc, #64]	; (801f1b4 <ip_reass_dequeue_datagram+0x4c>)
 801f174:	681b      	ldr	r3, [r3, #0]
 801f176:	687a      	ldr	r2, [r7, #4]
 801f178:	429a      	cmp	r2, r3
 801f17a:	d104      	bne.n	801f186 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801f17c:	687b      	ldr	r3, [r7, #4]
 801f17e:	681b      	ldr	r3, [r3, #0]
 801f180:	4a0c      	ldr	r2, [pc, #48]	; (801f1b4 <ip_reass_dequeue_datagram+0x4c>)
 801f182:	6013      	str	r3, [r2, #0]
 801f184:	e00d      	b.n	801f1a2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801f186:	683b      	ldr	r3, [r7, #0]
 801f188:	2b00      	cmp	r3, #0
 801f18a:	d106      	bne.n	801f19a <ip_reass_dequeue_datagram+0x32>
 801f18c:	4b0a      	ldr	r3, [pc, #40]	; (801f1b8 <ip_reass_dequeue_datagram+0x50>)
 801f18e:	f240 1245 	movw	r2, #325	; 0x145
 801f192:	490a      	ldr	r1, [pc, #40]	; (801f1bc <ip_reass_dequeue_datagram+0x54>)
 801f194:	480a      	ldr	r0, [pc, #40]	; (801f1c0 <ip_reass_dequeue_datagram+0x58>)
 801f196:	f000 fee5 	bl	801ff64 <printf>
    prev->next = ipr->next;
 801f19a:	687b      	ldr	r3, [r7, #4]
 801f19c:	681a      	ldr	r2, [r3, #0]
 801f19e:	683b      	ldr	r3, [r7, #0]
 801f1a0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801f1a2:	6879      	ldr	r1, [r7, #4]
 801f1a4:	2004      	movs	r0, #4
 801f1a6:	f7f6 fd35 	bl	8015c14 <memp_free>
}
 801f1aa:	bf00      	nop
 801f1ac:	3708      	adds	r7, #8
 801f1ae:	46bd      	mov	sp, r7
 801f1b0:	bd80      	pop	{r7, pc}
 801f1b2:	bf00      	nop
 801f1b4:	200189f0 	.word	0x200189f0
 801f1b8:	08029368 	.word	0x08029368
 801f1bc:	08029430 	.word	0x08029430
 801f1c0:	080293b0 	.word	0x080293b0

0801f1c4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801f1c4:	b580      	push	{r7, lr}
 801f1c6:	b08c      	sub	sp, #48	; 0x30
 801f1c8:	af00      	add	r7, sp, #0
 801f1ca:	60f8      	str	r0, [r7, #12]
 801f1cc:	60b9      	str	r1, [r7, #8]
 801f1ce:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801f1d0:	2300      	movs	r3, #0
 801f1d2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801f1d4:	2301      	movs	r3, #1
 801f1d6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801f1d8:	68bb      	ldr	r3, [r7, #8]
 801f1da:	685b      	ldr	r3, [r3, #4]
 801f1dc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801f1de:	69fb      	ldr	r3, [r7, #28]
 801f1e0:	885b      	ldrh	r3, [r3, #2]
 801f1e2:	b29b      	uxth	r3, r3
 801f1e4:	4618      	mov	r0, r3
 801f1e6:	f7f5 ffe5 	bl	80151b4 <lwip_htons>
 801f1ea:	4603      	mov	r3, r0
 801f1ec:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801f1ee:	69fb      	ldr	r3, [r7, #28]
 801f1f0:	781b      	ldrb	r3, [r3, #0]
 801f1f2:	f003 030f 	and.w	r3, r3, #15
 801f1f6:	b2db      	uxtb	r3, r3
 801f1f8:	009b      	lsls	r3, r3, #2
 801f1fa:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801f1fc:	7e7b      	ldrb	r3, [r7, #25]
 801f1fe:	b29b      	uxth	r3, r3
 801f200:	8b7a      	ldrh	r2, [r7, #26]
 801f202:	429a      	cmp	r2, r3
 801f204:	d202      	bcs.n	801f20c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f206:	f04f 33ff 	mov.w	r3, #4294967295
 801f20a:	e135      	b.n	801f478 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801f20c:	7e7b      	ldrb	r3, [r7, #25]
 801f20e:	b29b      	uxth	r3, r3
 801f210:	8b7a      	ldrh	r2, [r7, #26]
 801f212:	1ad3      	subs	r3, r2, r3
 801f214:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801f216:	69fb      	ldr	r3, [r7, #28]
 801f218:	88db      	ldrh	r3, [r3, #6]
 801f21a:	b29b      	uxth	r3, r3
 801f21c:	4618      	mov	r0, r3
 801f21e:	f7f5 ffc9 	bl	80151b4 <lwip_htons>
 801f222:	4603      	mov	r3, r0
 801f224:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f228:	b29b      	uxth	r3, r3
 801f22a:	00db      	lsls	r3, r3, #3
 801f22c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801f22e:	68bb      	ldr	r3, [r7, #8]
 801f230:	685b      	ldr	r3, [r3, #4]
 801f232:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801f234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f236:	2200      	movs	r2, #0
 801f238:	701a      	strb	r2, [r3, #0]
 801f23a:	2200      	movs	r2, #0
 801f23c:	705a      	strb	r2, [r3, #1]
 801f23e:	2200      	movs	r2, #0
 801f240:	709a      	strb	r2, [r3, #2]
 801f242:	2200      	movs	r2, #0
 801f244:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801f246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f248:	8afa      	ldrh	r2, [r7, #22]
 801f24a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801f24c:	8afa      	ldrh	r2, [r7, #22]
 801f24e:	8b7b      	ldrh	r3, [r7, #26]
 801f250:	4413      	add	r3, r2
 801f252:	b29a      	uxth	r2, r3
 801f254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f256:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801f258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f25a:	88db      	ldrh	r3, [r3, #6]
 801f25c:	b29b      	uxth	r3, r3
 801f25e:	8afa      	ldrh	r2, [r7, #22]
 801f260:	429a      	cmp	r2, r3
 801f262:	d902      	bls.n	801f26a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f264:	f04f 33ff 	mov.w	r3, #4294967295
 801f268:	e106      	b.n	801f478 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801f26a:	68fb      	ldr	r3, [r7, #12]
 801f26c:	685b      	ldr	r3, [r3, #4]
 801f26e:	627b      	str	r3, [r7, #36]	; 0x24
 801f270:	e068      	b.n	801f344 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801f272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f274:	685b      	ldr	r3, [r3, #4]
 801f276:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801f278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f27a:	889b      	ldrh	r3, [r3, #4]
 801f27c:	b29a      	uxth	r2, r3
 801f27e:	693b      	ldr	r3, [r7, #16]
 801f280:	889b      	ldrh	r3, [r3, #4]
 801f282:	b29b      	uxth	r3, r3
 801f284:	429a      	cmp	r2, r3
 801f286:	d235      	bcs.n	801f2f4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801f288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f28a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f28c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801f28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f290:	2b00      	cmp	r3, #0
 801f292:	d020      	beq.n	801f2d6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801f294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f296:	889b      	ldrh	r3, [r3, #4]
 801f298:	b29a      	uxth	r2, r3
 801f29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f29c:	88db      	ldrh	r3, [r3, #6]
 801f29e:	b29b      	uxth	r3, r3
 801f2a0:	429a      	cmp	r2, r3
 801f2a2:	d307      	bcc.n	801f2b4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801f2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f2a6:	88db      	ldrh	r3, [r3, #6]
 801f2a8:	b29a      	uxth	r2, r3
 801f2aa:	693b      	ldr	r3, [r7, #16]
 801f2ac:	889b      	ldrh	r3, [r3, #4]
 801f2ae:	b29b      	uxth	r3, r3
 801f2b0:	429a      	cmp	r2, r3
 801f2b2:	d902      	bls.n	801f2ba <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f2b4:	f04f 33ff 	mov.w	r3, #4294967295
 801f2b8:	e0de      	b.n	801f478 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801f2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f2bc:	68ba      	ldr	r2, [r7, #8]
 801f2be:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801f2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f2c2:	88db      	ldrh	r3, [r3, #6]
 801f2c4:	b29a      	uxth	r2, r3
 801f2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f2c8:	889b      	ldrh	r3, [r3, #4]
 801f2ca:	b29b      	uxth	r3, r3
 801f2cc:	429a      	cmp	r2, r3
 801f2ce:	d03d      	beq.n	801f34c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801f2d0:	2300      	movs	r3, #0
 801f2d2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801f2d4:	e03a      	b.n	801f34c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801f2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f2d8:	88db      	ldrh	r3, [r3, #6]
 801f2da:	b29a      	uxth	r2, r3
 801f2dc:	693b      	ldr	r3, [r7, #16]
 801f2de:	889b      	ldrh	r3, [r3, #4]
 801f2e0:	b29b      	uxth	r3, r3
 801f2e2:	429a      	cmp	r2, r3
 801f2e4:	d902      	bls.n	801f2ec <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f2e6:	f04f 33ff 	mov.w	r3, #4294967295
 801f2ea:	e0c5      	b.n	801f478 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801f2ec:	68fb      	ldr	r3, [r7, #12]
 801f2ee:	68ba      	ldr	r2, [r7, #8]
 801f2f0:	605a      	str	r2, [r3, #4]
      break;
 801f2f2:	e02b      	b.n	801f34c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801f2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f2f6:	889b      	ldrh	r3, [r3, #4]
 801f2f8:	b29a      	uxth	r2, r3
 801f2fa:	693b      	ldr	r3, [r7, #16]
 801f2fc:	889b      	ldrh	r3, [r3, #4]
 801f2fe:	b29b      	uxth	r3, r3
 801f300:	429a      	cmp	r2, r3
 801f302:	d102      	bne.n	801f30a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f304:	f04f 33ff 	mov.w	r3, #4294967295
 801f308:	e0b6      	b.n	801f478 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801f30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f30c:	889b      	ldrh	r3, [r3, #4]
 801f30e:	b29a      	uxth	r2, r3
 801f310:	693b      	ldr	r3, [r7, #16]
 801f312:	88db      	ldrh	r3, [r3, #6]
 801f314:	b29b      	uxth	r3, r3
 801f316:	429a      	cmp	r2, r3
 801f318:	d202      	bcs.n	801f320 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f31a:	f04f 33ff 	mov.w	r3, #4294967295
 801f31e:	e0ab      	b.n	801f478 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801f320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f322:	2b00      	cmp	r3, #0
 801f324:	d009      	beq.n	801f33a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801f326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f328:	88db      	ldrh	r3, [r3, #6]
 801f32a:	b29a      	uxth	r2, r3
 801f32c:	693b      	ldr	r3, [r7, #16]
 801f32e:	889b      	ldrh	r3, [r3, #4]
 801f330:	b29b      	uxth	r3, r3
 801f332:	429a      	cmp	r2, r3
 801f334:	d001      	beq.n	801f33a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801f336:	2300      	movs	r3, #0
 801f338:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801f33a:	693b      	ldr	r3, [r7, #16]
 801f33c:	681b      	ldr	r3, [r3, #0]
 801f33e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801f340:	693b      	ldr	r3, [r7, #16]
 801f342:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801f344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f346:	2b00      	cmp	r3, #0
 801f348:	d193      	bne.n	801f272 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801f34a:	e000      	b.n	801f34e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801f34c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801f34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f350:	2b00      	cmp	r3, #0
 801f352:	d12d      	bne.n	801f3b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801f354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f356:	2b00      	cmp	r3, #0
 801f358:	d01c      	beq.n	801f394 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801f35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f35c:	88db      	ldrh	r3, [r3, #6]
 801f35e:	b29a      	uxth	r2, r3
 801f360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f362:	889b      	ldrh	r3, [r3, #4]
 801f364:	b29b      	uxth	r3, r3
 801f366:	429a      	cmp	r2, r3
 801f368:	d906      	bls.n	801f378 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801f36a:	4b45      	ldr	r3, [pc, #276]	; (801f480 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801f36c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801f370:	4944      	ldr	r1, [pc, #272]	; (801f484 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801f372:	4845      	ldr	r0, [pc, #276]	; (801f488 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801f374:	f000 fdf6 	bl	801ff64 <printf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801f378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f37a:	68ba      	ldr	r2, [r7, #8]
 801f37c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801f37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f380:	88db      	ldrh	r3, [r3, #6]
 801f382:	b29a      	uxth	r2, r3
 801f384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f386:	889b      	ldrh	r3, [r3, #4]
 801f388:	b29b      	uxth	r3, r3
 801f38a:	429a      	cmp	r2, r3
 801f38c:	d010      	beq.n	801f3b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801f38e:	2300      	movs	r3, #0
 801f390:	623b      	str	r3, [r7, #32]
 801f392:	e00d      	b.n	801f3b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801f394:	68fb      	ldr	r3, [r7, #12]
 801f396:	685b      	ldr	r3, [r3, #4]
 801f398:	2b00      	cmp	r3, #0
 801f39a:	d006      	beq.n	801f3aa <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801f39c:	4b38      	ldr	r3, [pc, #224]	; (801f480 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801f39e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801f3a2:	493a      	ldr	r1, [pc, #232]	; (801f48c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801f3a4:	4838      	ldr	r0, [pc, #224]	; (801f488 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801f3a6:	f000 fddd 	bl	801ff64 <printf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801f3aa:	68fb      	ldr	r3, [r7, #12]
 801f3ac:	68ba      	ldr	r2, [r7, #8]
 801f3ae:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801f3b0:	687b      	ldr	r3, [r7, #4]
 801f3b2:	2b00      	cmp	r3, #0
 801f3b4:	d105      	bne.n	801f3c2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801f3b6:	68fb      	ldr	r3, [r7, #12]
 801f3b8:	7f9b      	ldrb	r3, [r3, #30]
 801f3ba:	f003 0301 	and.w	r3, r3, #1
 801f3be:	2b00      	cmp	r3, #0
 801f3c0:	d059      	beq.n	801f476 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801f3c2:	6a3b      	ldr	r3, [r7, #32]
 801f3c4:	2b00      	cmp	r3, #0
 801f3c6:	d04f      	beq.n	801f468 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801f3c8:	68fb      	ldr	r3, [r7, #12]
 801f3ca:	685b      	ldr	r3, [r3, #4]
 801f3cc:	2b00      	cmp	r3, #0
 801f3ce:	d006      	beq.n	801f3de <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801f3d0:	68fb      	ldr	r3, [r7, #12]
 801f3d2:	685b      	ldr	r3, [r3, #4]
 801f3d4:	685b      	ldr	r3, [r3, #4]
 801f3d6:	889b      	ldrh	r3, [r3, #4]
 801f3d8:	b29b      	uxth	r3, r3
 801f3da:	2b00      	cmp	r3, #0
 801f3dc:	d002      	beq.n	801f3e4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801f3de:	2300      	movs	r3, #0
 801f3e0:	623b      	str	r3, [r7, #32]
 801f3e2:	e041      	b.n	801f468 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801f3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f3e6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801f3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f3ea:	681b      	ldr	r3, [r3, #0]
 801f3ec:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801f3ee:	e012      	b.n	801f416 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801f3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f3f2:	685b      	ldr	r3, [r3, #4]
 801f3f4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801f3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f3f8:	88db      	ldrh	r3, [r3, #6]
 801f3fa:	b29a      	uxth	r2, r3
 801f3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f3fe:	889b      	ldrh	r3, [r3, #4]
 801f400:	b29b      	uxth	r3, r3
 801f402:	429a      	cmp	r2, r3
 801f404:	d002      	beq.n	801f40c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801f406:	2300      	movs	r3, #0
 801f408:	623b      	str	r3, [r7, #32]
            break;
 801f40a:	e007      	b.n	801f41c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801f40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f40e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801f410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f412:	681b      	ldr	r3, [r3, #0]
 801f414:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801f416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f418:	2b00      	cmp	r3, #0
 801f41a:	d1e9      	bne.n	801f3f0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801f41c:	6a3b      	ldr	r3, [r7, #32]
 801f41e:	2b00      	cmp	r3, #0
 801f420:	d022      	beq.n	801f468 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801f422:	68fb      	ldr	r3, [r7, #12]
 801f424:	685b      	ldr	r3, [r3, #4]
 801f426:	2b00      	cmp	r3, #0
 801f428:	d106      	bne.n	801f438 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801f42a:	4b15      	ldr	r3, [pc, #84]	; (801f480 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801f42c:	f240 12df 	movw	r2, #479	; 0x1df
 801f430:	4917      	ldr	r1, [pc, #92]	; (801f490 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801f432:	4815      	ldr	r0, [pc, #84]	; (801f488 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801f434:	f000 fd96 	bl	801ff64 <printf>
          LWIP_ASSERT("sanity check",
 801f438:	68fb      	ldr	r3, [r7, #12]
 801f43a:	685b      	ldr	r3, [r3, #4]
 801f43c:	685b      	ldr	r3, [r3, #4]
 801f43e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f440:	429a      	cmp	r2, r3
 801f442:	d106      	bne.n	801f452 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801f444:	4b0e      	ldr	r3, [pc, #56]	; (801f480 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801f446:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801f44a:	4911      	ldr	r1, [pc, #68]	; (801f490 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801f44c:	480e      	ldr	r0, [pc, #56]	; (801f488 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801f44e:	f000 fd89 	bl	801ff64 <printf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801f452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f454:	681b      	ldr	r3, [r3, #0]
 801f456:	2b00      	cmp	r3, #0
 801f458:	d006      	beq.n	801f468 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801f45a:	4b09      	ldr	r3, [pc, #36]	; (801f480 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801f45c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801f460:	490c      	ldr	r1, [pc, #48]	; (801f494 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801f462:	4809      	ldr	r0, [pc, #36]	; (801f488 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801f464:	f000 fd7e 	bl	801ff64 <printf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801f468:	6a3b      	ldr	r3, [r7, #32]
 801f46a:	2b00      	cmp	r3, #0
 801f46c:	bf14      	ite	ne
 801f46e:	2301      	movne	r3, #1
 801f470:	2300      	moveq	r3, #0
 801f472:	b2db      	uxtb	r3, r3
 801f474:	e000      	b.n	801f478 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801f476:	2300      	movs	r3, #0
}
 801f478:	4618      	mov	r0, r3
 801f47a:	3730      	adds	r7, #48	; 0x30
 801f47c:	46bd      	mov	sp, r7
 801f47e:	bd80      	pop	{r7, pc}
 801f480:	08029368 	.word	0x08029368
 801f484:	0802944c 	.word	0x0802944c
 801f488:	080293b0 	.word	0x080293b0
 801f48c:	0802946c 	.word	0x0802946c
 801f490:	080294a4 	.word	0x080294a4
 801f494:	080294b4 	.word	0x080294b4

0801f498 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801f498:	b580      	push	{r7, lr}
 801f49a:	b08e      	sub	sp, #56	; 0x38
 801f49c:	af00      	add	r7, sp, #0
 801f49e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801f4a0:	687b      	ldr	r3, [r7, #4]
 801f4a2:	685b      	ldr	r3, [r3, #4]
 801f4a4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801f4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f4a8:	781b      	ldrb	r3, [r3, #0]
 801f4aa:	f003 030f 	and.w	r3, r3, #15
 801f4ae:	b2db      	uxtb	r3, r3
 801f4b0:	009b      	lsls	r3, r3, #2
 801f4b2:	b2db      	uxtb	r3, r3
 801f4b4:	2b14      	cmp	r3, #20
 801f4b6:	f040 8171 	bne.w	801f79c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801f4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f4bc:	88db      	ldrh	r3, [r3, #6]
 801f4be:	b29b      	uxth	r3, r3
 801f4c0:	4618      	mov	r0, r3
 801f4c2:	f7f5 fe77 	bl	80151b4 <lwip_htons>
 801f4c6:	4603      	mov	r3, r0
 801f4c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f4cc:	b29b      	uxth	r3, r3
 801f4ce:	00db      	lsls	r3, r3, #3
 801f4d0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801f4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f4d4:	885b      	ldrh	r3, [r3, #2]
 801f4d6:	b29b      	uxth	r3, r3
 801f4d8:	4618      	mov	r0, r3
 801f4da:	f7f5 fe6b 	bl	80151b4 <lwip_htons>
 801f4de:	4603      	mov	r3, r0
 801f4e0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801f4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f4e4:	781b      	ldrb	r3, [r3, #0]
 801f4e6:	f003 030f 	and.w	r3, r3, #15
 801f4ea:	b2db      	uxtb	r3, r3
 801f4ec:	009b      	lsls	r3, r3, #2
 801f4ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801f4f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801f4f6:	b29b      	uxth	r3, r3
 801f4f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801f4fa:	429a      	cmp	r2, r3
 801f4fc:	f0c0 8150 	bcc.w	801f7a0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801f500:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801f504:	b29b      	uxth	r3, r3
 801f506:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801f508:	1ad3      	subs	r3, r2, r3
 801f50a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801f50c:	6878      	ldr	r0, [r7, #4]
 801f50e:	f7f7 facf 	bl	8016ab0 <pbuf_clen>
 801f512:	4603      	mov	r3, r0
 801f514:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801f516:	4b8c      	ldr	r3, [pc, #560]	; (801f748 <ip4_reass+0x2b0>)
 801f518:	881b      	ldrh	r3, [r3, #0]
 801f51a:	461a      	mov	r2, r3
 801f51c:	8c3b      	ldrh	r3, [r7, #32]
 801f51e:	4413      	add	r3, r2
 801f520:	2b0a      	cmp	r3, #10
 801f522:	dd10      	ble.n	801f546 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801f524:	8c3b      	ldrh	r3, [r7, #32]
 801f526:	4619      	mov	r1, r3
 801f528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f52a:	f7ff fd81 	bl	801f030 <ip_reass_remove_oldest_datagram>
 801f52e:	4603      	mov	r3, r0
 801f530:	2b00      	cmp	r3, #0
 801f532:	f000 8137 	beq.w	801f7a4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801f536:	4b84      	ldr	r3, [pc, #528]	; (801f748 <ip4_reass+0x2b0>)
 801f538:	881b      	ldrh	r3, [r3, #0]
 801f53a:	461a      	mov	r2, r3
 801f53c:	8c3b      	ldrh	r3, [r7, #32]
 801f53e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801f540:	2b0a      	cmp	r3, #10
 801f542:	f300 812f 	bgt.w	801f7a4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801f546:	4b81      	ldr	r3, [pc, #516]	; (801f74c <ip4_reass+0x2b4>)
 801f548:	681b      	ldr	r3, [r3, #0]
 801f54a:	633b      	str	r3, [r7, #48]	; 0x30
 801f54c:	e015      	b.n	801f57a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801f54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f550:	695a      	ldr	r2, [r3, #20]
 801f552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f554:	68db      	ldr	r3, [r3, #12]
 801f556:	429a      	cmp	r2, r3
 801f558:	d10c      	bne.n	801f574 <ip4_reass+0xdc>
 801f55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f55c:	699a      	ldr	r2, [r3, #24]
 801f55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f560:	691b      	ldr	r3, [r3, #16]
 801f562:	429a      	cmp	r2, r3
 801f564:	d106      	bne.n	801f574 <ip4_reass+0xdc>
 801f566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f568:	899a      	ldrh	r2, [r3, #12]
 801f56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f56c:	889b      	ldrh	r3, [r3, #4]
 801f56e:	b29b      	uxth	r3, r3
 801f570:	429a      	cmp	r2, r3
 801f572:	d006      	beq.n	801f582 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801f574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f576:	681b      	ldr	r3, [r3, #0]
 801f578:	633b      	str	r3, [r7, #48]	; 0x30
 801f57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f57c:	2b00      	cmp	r3, #0
 801f57e:	d1e6      	bne.n	801f54e <ip4_reass+0xb6>
 801f580:	e000      	b.n	801f584 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801f582:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801f584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f586:	2b00      	cmp	r3, #0
 801f588:	d109      	bne.n	801f59e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801f58a:	8c3b      	ldrh	r3, [r7, #32]
 801f58c:	4619      	mov	r1, r3
 801f58e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f590:	f7ff fdb0 	bl	801f0f4 <ip_reass_enqueue_new_datagram>
 801f594:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801f596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f598:	2b00      	cmp	r3, #0
 801f59a:	d11c      	bne.n	801f5d6 <ip4_reass+0x13e>
      goto nullreturn;
 801f59c:	e105      	b.n	801f7aa <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801f59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f5a0:	88db      	ldrh	r3, [r3, #6]
 801f5a2:	b29b      	uxth	r3, r3
 801f5a4:	4618      	mov	r0, r3
 801f5a6:	f7f5 fe05 	bl	80151b4 <lwip_htons>
 801f5aa:	4603      	mov	r3, r0
 801f5ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f5b0:	2b00      	cmp	r3, #0
 801f5b2:	d110      	bne.n	801f5d6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801f5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f5b6:	89db      	ldrh	r3, [r3, #14]
 801f5b8:	4618      	mov	r0, r3
 801f5ba:	f7f5 fdfb 	bl	80151b4 <lwip_htons>
 801f5be:	4603      	mov	r3, r0
 801f5c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801f5c4:	2b00      	cmp	r3, #0
 801f5c6:	d006      	beq.n	801f5d6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801f5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f5ca:	3308      	adds	r3, #8
 801f5cc:	2214      	movs	r2, #20
 801f5ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801f5d0:	4618      	mov	r0, r3
 801f5d2:	f000 fc97 	bl	801ff04 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801f5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f5d8:	88db      	ldrh	r3, [r3, #6]
 801f5da:	b29b      	uxth	r3, r3
 801f5dc:	f003 0320 	and.w	r3, r3, #32
 801f5e0:	2b00      	cmp	r3, #0
 801f5e2:	bf0c      	ite	eq
 801f5e4:	2301      	moveq	r3, #1
 801f5e6:	2300      	movne	r3, #0
 801f5e8:	b2db      	uxtb	r3, r3
 801f5ea:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801f5ec:	69fb      	ldr	r3, [r7, #28]
 801f5ee:	2b00      	cmp	r3, #0
 801f5f0:	d00e      	beq.n	801f610 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801f5f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801f5f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f5f6:	4413      	add	r3, r2
 801f5f8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801f5fa:	8b7a      	ldrh	r2, [r7, #26]
 801f5fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801f5fe:	429a      	cmp	r2, r3
 801f600:	f0c0 80a0 	bcc.w	801f744 <ip4_reass+0x2ac>
 801f604:	8b7b      	ldrh	r3, [r7, #26]
 801f606:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801f60a:	4293      	cmp	r3, r2
 801f60c:	f200 809a 	bhi.w	801f744 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801f610:	69fa      	ldr	r2, [r7, #28]
 801f612:	6879      	ldr	r1, [r7, #4]
 801f614:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801f616:	f7ff fdd5 	bl	801f1c4 <ip_reass_chain_frag_into_datagram_and_validate>
 801f61a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801f61c:	697b      	ldr	r3, [r7, #20]
 801f61e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f622:	f000 809b 	beq.w	801f75c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801f626:	4b48      	ldr	r3, [pc, #288]	; (801f748 <ip4_reass+0x2b0>)
 801f628:	881a      	ldrh	r2, [r3, #0]
 801f62a:	8c3b      	ldrh	r3, [r7, #32]
 801f62c:	4413      	add	r3, r2
 801f62e:	b29a      	uxth	r2, r3
 801f630:	4b45      	ldr	r3, [pc, #276]	; (801f748 <ip4_reass+0x2b0>)
 801f632:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801f634:	69fb      	ldr	r3, [r7, #28]
 801f636:	2b00      	cmp	r3, #0
 801f638:	d00d      	beq.n	801f656 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801f63a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801f63c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f63e:	4413      	add	r3, r2
 801f640:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801f642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f644:	8a7a      	ldrh	r2, [r7, #18]
 801f646:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801f648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f64a:	7f9b      	ldrb	r3, [r3, #30]
 801f64c:	f043 0301 	orr.w	r3, r3, #1
 801f650:	b2da      	uxtb	r2, r3
 801f652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f654:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801f656:	697b      	ldr	r3, [r7, #20]
 801f658:	2b01      	cmp	r3, #1
 801f65a:	d171      	bne.n	801f740 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801f65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f65e:	8b9b      	ldrh	r3, [r3, #28]
 801f660:	3314      	adds	r3, #20
 801f662:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801f664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f666:	685b      	ldr	r3, [r3, #4]
 801f668:	685b      	ldr	r3, [r3, #4]
 801f66a:	681b      	ldr	r3, [r3, #0]
 801f66c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801f66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f670:	685b      	ldr	r3, [r3, #4]
 801f672:	685b      	ldr	r3, [r3, #4]
 801f674:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801f676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f678:	3308      	adds	r3, #8
 801f67a:	2214      	movs	r2, #20
 801f67c:	4619      	mov	r1, r3
 801f67e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f680:	f000 fc40 	bl	801ff04 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801f684:	8a3b      	ldrh	r3, [r7, #16]
 801f686:	4618      	mov	r0, r3
 801f688:	f7f5 fd94 	bl	80151b4 <lwip_htons>
 801f68c:	4603      	mov	r3, r0
 801f68e:	461a      	mov	r2, r3
 801f690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f692:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801f694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f696:	2200      	movs	r2, #0
 801f698:	719a      	strb	r2, [r3, #6]
 801f69a:	2200      	movs	r2, #0
 801f69c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801f69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f6a0:	2200      	movs	r2, #0
 801f6a2:	729a      	strb	r2, [r3, #10]
 801f6a4:	2200      	movs	r2, #0
 801f6a6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801f6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f6aa:	685b      	ldr	r3, [r3, #4]
 801f6ac:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801f6ae:	e00d      	b.n	801f6cc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801f6b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f6b2:	685b      	ldr	r3, [r3, #4]
 801f6b4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801f6b6:	2114      	movs	r1, #20
 801f6b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801f6ba:	f7f7 f8e5 	bl	8016888 <pbuf_remove_header>
      pbuf_cat(p, r);
 801f6be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801f6c0:	6878      	ldr	r0, [r7, #4]
 801f6c2:	f7f7 fa35 	bl	8016b30 <pbuf_cat>
      r = iprh->next_pbuf;
 801f6c6:	68fb      	ldr	r3, [r7, #12]
 801f6c8:	681b      	ldr	r3, [r3, #0]
 801f6ca:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801f6cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f6ce:	2b00      	cmp	r3, #0
 801f6d0:	d1ee      	bne.n	801f6b0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801f6d2:	4b1e      	ldr	r3, [pc, #120]	; (801f74c <ip4_reass+0x2b4>)
 801f6d4:	681b      	ldr	r3, [r3, #0]
 801f6d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f6d8:	429a      	cmp	r2, r3
 801f6da:	d102      	bne.n	801f6e2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801f6dc:	2300      	movs	r3, #0
 801f6de:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f6e0:	e010      	b.n	801f704 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801f6e2:	4b1a      	ldr	r3, [pc, #104]	; (801f74c <ip4_reass+0x2b4>)
 801f6e4:	681b      	ldr	r3, [r3, #0]
 801f6e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f6e8:	e007      	b.n	801f6fa <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801f6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f6ec:	681b      	ldr	r3, [r3, #0]
 801f6ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f6f0:	429a      	cmp	r2, r3
 801f6f2:	d006      	beq.n	801f702 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801f6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f6f6:	681b      	ldr	r3, [r3, #0]
 801f6f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f6fc:	2b00      	cmp	r3, #0
 801f6fe:	d1f4      	bne.n	801f6ea <ip4_reass+0x252>
 801f700:	e000      	b.n	801f704 <ip4_reass+0x26c>
          break;
 801f702:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801f704:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f706:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801f708:	f7ff fd2e 	bl	801f168 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801f70c:	6878      	ldr	r0, [r7, #4]
 801f70e:	f7f7 f9cf 	bl	8016ab0 <pbuf_clen>
 801f712:	4603      	mov	r3, r0
 801f714:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801f716:	4b0c      	ldr	r3, [pc, #48]	; (801f748 <ip4_reass+0x2b0>)
 801f718:	881b      	ldrh	r3, [r3, #0]
 801f71a:	8c3a      	ldrh	r2, [r7, #32]
 801f71c:	429a      	cmp	r2, r3
 801f71e:	d906      	bls.n	801f72e <ip4_reass+0x296>
 801f720:	4b0b      	ldr	r3, [pc, #44]	; (801f750 <ip4_reass+0x2b8>)
 801f722:	f240 229b 	movw	r2, #667	; 0x29b
 801f726:	490b      	ldr	r1, [pc, #44]	; (801f754 <ip4_reass+0x2bc>)
 801f728:	480b      	ldr	r0, [pc, #44]	; (801f758 <ip4_reass+0x2c0>)
 801f72a:	f000 fc1b 	bl	801ff64 <printf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801f72e:	4b06      	ldr	r3, [pc, #24]	; (801f748 <ip4_reass+0x2b0>)
 801f730:	881a      	ldrh	r2, [r3, #0]
 801f732:	8c3b      	ldrh	r3, [r7, #32]
 801f734:	1ad3      	subs	r3, r2, r3
 801f736:	b29a      	uxth	r2, r3
 801f738:	4b03      	ldr	r3, [pc, #12]	; (801f748 <ip4_reass+0x2b0>)
 801f73a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801f73c:	687b      	ldr	r3, [r7, #4]
 801f73e:	e038      	b.n	801f7b2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801f740:	2300      	movs	r3, #0
 801f742:	e036      	b.n	801f7b2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801f744:	bf00      	nop
 801f746:	e00a      	b.n	801f75e <ip4_reass+0x2c6>
 801f748:	200189f4 	.word	0x200189f4
 801f74c:	200189f0 	.word	0x200189f0
 801f750:	08029368 	.word	0x08029368
 801f754:	080294d8 	.word	0x080294d8
 801f758:	080293b0 	.word	0x080293b0
    goto nullreturn_ipr;
 801f75c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801f75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f760:	2b00      	cmp	r3, #0
 801f762:	d106      	bne.n	801f772 <ip4_reass+0x2da>
 801f764:	4b15      	ldr	r3, [pc, #84]	; (801f7bc <ip4_reass+0x324>)
 801f766:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801f76a:	4915      	ldr	r1, [pc, #84]	; (801f7c0 <ip4_reass+0x328>)
 801f76c:	4815      	ldr	r0, [pc, #84]	; (801f7c4 <ip4_reass+0x32c>)
 801f76e:	f000 fbf9 	bl	801ff64 <printf>
  if (ipr->p == NULL) {
 801f772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f774:	685b      	ldr	r3, [r3, #4]
 801f776:	2b00      	cmp	r3, #0
 801f778:	d116      	bne.n	801f7a8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801f77a:	4b13      	ldr	r3, [pc, #76]	; (801f7c8 <ip4_reass+0x330>)
 801f77c:	681b      	ldr	r3, [r3, #0]
 801f77e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f780:	429a      	cmp	r2, r3
 801f782:	d006      	beq.n	801f792 <ip4_reass+0x2fa>
 801f784:	4b0d      	ldr	r3, [pc, #52]	; (801f7bc <ip4_reass+0x324>)
 801f786:	f240 22ab 	movw	r2, #683	; 0x2ab
 801f78a:	4910      	ldr	r1, [pc, #64]	; (801f7cc <ip4_reass+0x334>)
 801f78c:	480d      	ldr	r0, [pc, #52]	; (801f7c4 <ip4_reass+0x32c>)
 801f78e:	f000 fbe9 	bl	801ff64 <printf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801f792:	2100      	movs	r1, #0
 801f794:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801f796:	f7ff fce7 	bl	801f168 <ip_reass_dequeue_datagram>
 801f79a:	e006      	b.n	801f7aa <ip4_reass+0x312>
    goto nullreturn;
 801f79c:	bf00      	nop
 801f79e:	e004      	b.n	801f7aa <ip4_reass+0x312>
    goto nullreturn;
 801f7a0:	bf00      	nop
 801f7a2:	e002      	b.n	801f7aa <ip4_reass+0x312>
      goto nullreturn;
 801f7a4:	bf00      	nop
 801f7a6:	e000      	b.n	801f7aa <ip4_reass+0x312>
  }

nullreturn:
 801f7a8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801f7aa:	6878      	ldr	r0, [r7, #4]
 801f7ac:	f7f7 f8f2 	bl	8016994 <pbuf_free>
  return NULL;
 801f7b0:	2300      	movs	r3, #0
}
 801f7b2:	4618      	mov	r0, r3
 801f7b4:	3738      	adds	r7, #56	; 0x38
 801f7b6:	46bd      	mov	sp, r7
 801f7b8:	bd80      	pop	{r7, pc}
 801f7ba:	bf00      	nop
 801f7bc:	08029368 	.word	0x08029368
 801f7c0:	080294f4 	.word	0x080294f4
 801f7c4:	080293b0 	.word	0x080293b0
 801f7c8:	200189f0 	.word	0x200189f0
 801f7cc:	08029500 	.word	0x08029500

0801f7d0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801f7d0:	b580      	push	{r7, lr}
 801f7d2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801f7d4:	2005      	movs	r0, #5
 801f7d6:	f7f6 f9cb 	bl	8015b70 <memp_malloc>
 801f7da:	4603      	mov	r3, r0
}
 801f7dc:	4618      	mov	r0, r3
 801f7de:	bd80      	pop	{r7, pc}

0801f7e0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801f7e0:	b580      	push	{r7, lr}
 801f7e2:	b082      	sub	sp, #8
 801f7e4:	af00      	add	r7, sp, #0
 801f7e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801f7e8:	687b      	ldr	r3, [r7, #4]
 801f7ea:	2b00      	cmp	r3, #0
 801f7ec:	d106      	bne.n	801f7fc <ip_frag_free_pbuf_custom_ref+0x1c>
 801f7ee:	4b07      	ldr	r3, [pc, #28]	; (801f80c <ip_frag_free_pbuf_custom_ref+0x2c>)
 801f7f0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801f7f4:	4906      	ldr	r1, [pc, #24]	; (801f810 <ip_frag_free_pbuf_custom_ref+0x30>)
 801f7f6:	4807      	ldr	r0, [pc, #28]	; (801f814 <ip_frag_free_pbuf_custom_ref+0x34>)
 801f7f8:	f000 fbb4 	bl	801ff64 <printf>
  memp_free(MEMP_FRAG_PBUF, p);
 801f7fc:	6879      	ldr	r1, [r7, #4]
 801f7fe:	2005      	movs	r0, #5
 801f800:	f7f6 fa08 	bl	8015c14 <memp_free>
}
 801f804:	bf00      	nop
 801f806:	3708      	adds	r7, #8
 801f808:	46bd      	mov	sp, r7
 801f80a:	bd80      	pop	{r7, pc}
 801f80c:	08029368 	.word	0x08029368
 801f810:	08029520 	.word	0x08029520
 801f814:	080293b0 	.word	0x080293b0

0801f818 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801f818:	b580      	push	{r7, lr}
 801f81a:	b084      	sub	sp, #16
 801f81c:	af00      	add	r7, sp, #0
 801f81e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801f820:	687b      	ldr	r3, [r7, #4]
 801f822:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801f824:	68fb      	ldr	r3, [r7, #12]
 801f826:	2b00      	cmp	r3, #0
 801f828:	d106      	bne.n	801f838 <ipfrag_free_pbuf_custom+0x20>
 801f82a:	4b11      	ldr	r3, [pc, #68]	; (801f870 <ipfrag_free_pbuf_custom+0x58>)
 801f82c:	f240 22ce 	movw	r2, #718	; 0x2ce
 801f830:	4910      	ldr	r1, [pc, #64]	; (801f874 <ipfrag_free_pbuf_custom+0x5c>)
 801f832:	4811      	ldr	r0, [pc, #68]	; (801f878 <ipfrag_free_pbuf_custom+0x60>)
 801f834:	f000 fb96 	bl	801ff64 <printf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801f838:	68fa      	ldr	r2, [r7, #12]
 801f83a:	687b      	ldr	r3, [r7, #4]
 801f83c:	429a      	cmp	r2, r3
 801f83e:	d006      	beq.n	801f84e <ipfrag_free_pbuf_custom+0x36>
 801f840:	4b0b      	ldr	r3, [pc, #44]	; (801f870 <ipfrag_free_pbuf_custom+0x58>)
 801f842:	f240 22cf 	movw	r2, #719	; 0x2cf
 801f846:	490d      	ldr	r1, [pc, #52]	; (801f87c <ipfrag_free_pbuf_custom+0x64>)
 801f848:	480b      	ldr	r0, [pc, #44]	; (801f878 <ipfrag_free_pbuf_custom+0x60>)
 801f84a:	f000 fb8b 	bl	801ff64 <printf>
  if (pcr->original != NULL) {
 801f84e:	68fb      	ldr	r3, [r7, #12]
 801f850:	695b      	ldr	r3, [r3, #20]
 801f852:	2b00      	cmp	r3, #0
 801f854:	d004      	beq.n	801f860 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801f856:	68fb      	ldr	r3, [r7, #12]
 801f858:	695b      	ldr	r3, [r3, #20]
 801f85a:	4618      	mov	r0, r3
 801f85c:	f7f7 f89a 	bl	8016994 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801f860:	68f8      	ldr	r0, [r7, #12]
 801f862:	f7ff ffbd 	bl	801f7e0 <ip_frag_free_pbuf_custom_ref>
}
 801f866:	bf00      	nop
 801f868:	3710      	adds	r7, #16
 801f86a:	46bd      	mov	sp, r7
 801f86c:	bd80      	pop	{r7, pc}
 801f86e:	bf00      	nop
 801f870:	08029368 	.word	0x08029368
 801f874:	0802952c 	.word	0x0802952c
 801f878:	080293b0 	.word	0x080293b0
 801f87c:	08029538 	.word	0x08029538

0801f880 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801f880:	b580      	push	{r7, lr}
 801f882:	b094      	sub	sp, #80	; 0x50
 801f884:	af02      	add	r7, sp, #8
 801f886:	60f8      	str	r0, [r7, #12]
 801f888:	60b9      	str	r1, [r7, #8]
 801f88a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801f88c:	2300      	movs	r3, #0
 801f88e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801f892:	68bb      	ldr	r3, [r7, #8]
 801f894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801f896:	3b14      	subs	r3, #20
 801f898:	2b00      	cmp	r3, #0
 801f89a:	da00      	bge.n	801f89e <ip4_frag+0x1e>
 801f89c:	3307      	adds	r3, #7
 801f89e:	10db      	asrs	r3, r3, #3
 801f8a0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801f8a2:	2314      	movs	r3, #20
 801f8a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801f8a6:	68fb      	ldr	r3, [r7, #12]
 801f8a8:	685b      	ldr	r3, [r3, #4]
 801f8aa:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801f8ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f8ae:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801f8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f8b2:	781b      	ldrb	r3, [r3, #0]
 801f8b4:	f003 030f 	and.w	r3, r3, #15
 801f8b8:	b2db      	uxtb	r3, r3
 801f8ba:	009b      	lsls	r3, r3, #2
 801f8bc:	b2db      	uxtb	r3, r3
 801f8be:	2b14      	cmp	r3, #20
 801f8c0:	d002      	beq.n	801f8c8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801f8c2:	f06f 0305 	mvn.w	r3, #5
 801f8c6:	e110      	b.n	801faea <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801f8c8:	68fb      	ldr	r3, [r7, #12]
 801f8ca:	895b      	ldrh	r3, [r3, #10]
 801f8cc:	2b13      	cmp	r3, #19
 801f8ce:	d809      	bhi.n	801f8e4 <ip4_frag+0x64>
 801f8d0:	4b88      	ldr	r3, [pc, #544]	; (801faf4 <ip4_frag+0x274>)
 801f8d2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801f8d6:	4988      	ldr	r1, [pc, #544]	; (801faf8 <ip4_frag+0x278>)
 801f8d8:	4888      	ldr	r0, [pc, #544]	; (801fafc <ip4_frag+0x27c>)
 801f8da:	f000 fb43 	bl	801ff64 <printf>
 801f8de:	f06f 0305 	mvn.w	r3, #5
 801f8e2:	e102      	b.n	801faea <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801f8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f8e6:	88db      	ldrh	r3, [r3, #6]
 801f8e8:	b29b      	uxth	r3, r3
 801f8ea:	4618      	mov	r0, r3
 801f8ec:	f7f5 fc62 	bl	80151b4 <lwip_htons>
 801f8f0:	4603      	mov	r3, r0
 801f8f2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801f8f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801f8f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f8fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801f8fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801f900:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801f904:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801f906:	68fb      	ldr	r3, [r7, #12]
 801f908:	891b      	ldrh	r3, [r3, #8]
 801f90a:	3b14      	subs	r3, #20
 801f90c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801f910:	e0e1      	b.n	801fad6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801f912:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801f914:	00db      	lsls	r3, r3, #3
 801f916:	b29b      	uxth	r3, r3
 801f918:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801f91c:	4293      	cmp	r3, r2
 801f91e:	bf28      	it	cs
 801f920:	4613      	movcs	r3, r2
 801f922:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801f924:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f928:	2114      	movs	r1, #20
 801f92a:	200e      	movs	r0, #14
 801f92c:	f7f6 fd4e 	bl	80163cc <pbuf_alloc>
 801f930:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801f932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f934:	2b00      	cmp	r3, #0
 801f936:	f000 80d5 	beq.w	801fae4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801f93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f93c:	895b      	ldrh	r3, [r3, #10]
 801f93e:	2b13      	cmp	r3, #19
 801f940:	d806      	bhi.n	801f950 <ip4_frag+0xd0>
 801f942:	4b6c      	ldr	r3, [pc, #432]	; (801faf4 <ip4_frag+0x274>)
 801f944:	f44f 7249 	mov.w	r2, #804	; 0x324
 801f948:	496d      	ldr	r1, [pc, #436]	; (801fb00 <ip4_frag+0x280>)
 801f94a:	486c      	ldr	r0, [pc, #432]	; (801fafc <ip4_frag+0x27c>)
 801f94c:	f000 fb0a 	bl	801ff64 <printf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801f950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f952:	685b      	ldr	r3, [r3, #4]
 801f954:	2214      	movs	r2, #20
 801f956:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801f958:	4618      	mov	r0, r3
 801f95a:	f000 fad3 	bl	801ff04 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801f95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f960:	685b      	ldr	r3, [r3, #4]
 801f962:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801f964:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801f966:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801f96a:	e064      	b.n	801fa36 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801f96c:	68fb      	ldr	r3, [r7, #12]
 801f96e:	895a      	ldrh	r2, [r3, #10]
 801f970:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801f972:	1ad3      	subs	r3, r2, r3
 801f974:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801f976:	68fb      	ldr	r3, [r7, #12]
 801f978:	895b      	ldrh	r3, [r3, #10]
 801f97a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801f97c:	429a      	cmp	r2, r3
 801f97e:	d906      	bls.n	801f98e <ip4_frag+0x10e>
 801f980:	4b5c      	ldr	r3, [pc, #368]	; (801faf4 <ip4_frag+0x274>)
 801f982:	f240 322d 	movw	r2, #813	; 0x32d
 801f986:	495f      	ldr	r1, [pc, #380]	; (801fb04 <ip4_frag+0x284>)
 801f988:	485c      	ldr	r0, [pc, #368]	; (801fafc <ip4_frag+0x27c>)
 801f98a:	f000 faeb 	bl	801ff64 <printf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801f98e:	8bfa      	ldrh	r2, [r7, #30]
 801f990:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801f994:	4293      	cmp	r3, r2
 801f996:	bf28      	it	cs
 801f998:	4613      	movcs	r3, r2
 801f99a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801f99e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801f9a2:	2b00      	cmp	r3, #0
 801f9a4:	d105      	bne.n	801f9b2 <ip4_frag+0x132>
        poff = 0;
 801f9a6:	2300      	movs	r3, #0
 801f9a8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801f9aa:	68fb      	ldr	r3, [r7, #12]
 801f9ac:	681b      	ldr	r3, [r3, #0]
 801f9ae:	60fb      	str	r3, [r7, #12]
        continue;
 801f9b0:	e041      	b.n	801fa36 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801f9b2:	f7ff ff0d 	bl	801f7d0 <ip_frag_alloc_pbuf_custom_ref>
 801f9b6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801f9b8:	69bb      	ldr	r3, [r7, #24]
 801f9ba:	2b00      	cmp	r3, #0
 801f9bc:	d103      	bne.n	801f9c6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801f9be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f9c0:	f7f6 ffe8 	bl	8016994 <pbuf_free>
        goto memerr;
 801f9c4:	e08f      	b.n	801fae6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801f9c6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801f9c8:	68fb      	ldr	r3, [r7, #12]
 801f9ca:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801f9cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801f9ce:	4413      	add	r3, r2
 801f9d0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801f9d4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801f9d8:	9201      	str	r2, [sp, #4]
 801f9da:	9300      	str	r3, [sp, #0]
 801f9dc:	4603      	mov	r3, r0
 801f9de:	2241      	movs	r2, #65	; 0x41
 801f9e0:	2000      	movs	r0, #0
 801f9e2:	f7f6 fe1d 	bl	8016620 <pbuf_alloced_custom>
 801f9e6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801f9e8:	697b      	ldr	r3, [r7, #20]
 801f9ea:	2b00      	cmp	r3, #0
 801f9ec:	d106      	bne.n	801f9fc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801f9ee:	69b8      	ldr	r0, [r7, #24]
 801f9f0:	f7ff fef6 	bl	801f7e0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801f9f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f9f6:	f7f6 ffcd 	bl	8016994 <pbuf_free>
        goto memerr;
 801f9fa:	e074      	b.n	801fae6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801f9fc:	68f8      	ldr	r0, [r7, #12]
 801f9fe:	f7f7 f86f 	bl	8016ae0 <pbuf_ref>
      pcr->original = p;
 801fa02:	69bb      	ldr	r3, [r7, #24]
 801fa04:	68fa      	ldr	r2, [r7, #12]
 801fa06:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801fa08:	69bb      	ldr	r3, [r7, #24]
 801fa0a:	4a3f      	ldr	r2, [pc, #252]	; (801fb08 <ip4_frag+0x288>)
 801fa0c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801fa0e:	6979      	ldr	r1, [r7, #20]
 801fa10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801fa12:	f7f7 f88d 	bl	8016b30 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801fa16:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801fa1a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801fa1e:	1ad3      	subs	r3, r2, r3
 801fa20:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801fa24:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801fa28:	2b00      	cmp	r3, #0
 801fa2a:	d004      	beq.n	801fa36 <ip4_frag+0x1b6>
        poff = 0;
 801fa2c:	2300      	movs	r3, #0
 801fa2e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801fa30:	68fb      	ldr	r3, [r7, #12]
 801fa32:	681b      	ldr	r3, [r3, #0]
 801fa34:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801fa36:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801fa3a:	2b00      	cmp	r3, #0
 801fa3c:	d196      	bne.n	801f96c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801fa3e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801fa40:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801fa44:	4413      	add	r3, r2
 801fa46:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801fa48:	68bb      	ldr	r3, [r7, #8]
 801fa4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801fa4c:	f1a3 0213 	sub.w	r2, r3, #19
 801fa50:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801fa54:	429a      	cmp	r2, r3
 801fa56:	bfcc      	ite	gt
 801fa58:	2301      	movgt	r3, #1
 801fa5a:	2300      	movle	r3, #0
 801fa5c:	b2db      	uxtb	r3, r3
 801fa5e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801fa60:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801fa64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801fa68:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801fa6a:	6a3b      	ldr	r3, [r7, #32]
 801fa6c:	2b00      	cmp	r3, #0
 801fa6e:	d002      	beq.n	801fa76 <ip4_frag+0x1f6>
 801fa70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fa72:	2b00      	cmp	r3, #0
 801fa74:	d003      	beq.n	801fa7e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801fa76:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801fa78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801fa7c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801fa7e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801fa80:	4618      	mov	r0, r3
 801fa82:	f7f5 fb97 	bl	80151b4 <lwip_htons>
 801fa86:	4603      	mov	r3, r0
 801fa88:	461a      	mov	r2, r3
 801fa8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fa8c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801fa8e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801fa90:	3314      	adds	r3, #20
 801fa92:	b29b      	uxth	r3, r3
 801fa94:	4618      	mov	r0, r3
 801fa96:	f7f5 fb8d 	bl	80151b4 <lwip_htons>
 801fa9a:	4603      	mov	r3, r0
 801fa9c:	461a      	mov	r2, r3
 801fa9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801faa0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801faa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801faa4:	2200      	movs	r2, #0
 801faa6:	729a      	strb	r2, [r3, #10]
 801faa8:	2200      	movs	r2, #0
 801faaa:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801faac:	68bb      	ldr	r3, [r7, #8]
 801faae:	695b      	ldr	r3, [r3, #20]
 801fab0:	687a      	ldr	r2, [r7, #4]
 801fab2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801fab4:	68b8      	ldr	r0, [r7, #8]
 801fab6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801fab8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801faba:	f7f6 ff6b 	bl	8016994 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801fabe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801fac2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801fac4:	1ad3      	subs	r3, r2, r3
 801fac6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801faca:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801face:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801fad0:	4413      	add	r3, r2
 801fad2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801fad6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801fada:	2b00      	cmp	r3, #0
 801fadc:	f47f af19 	bne.w	801f912 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801fae0:	2300      	movs	r3, #0
 801fae2:	e002      	b.n	801faea <ip4_frag+0x26a>
      goto memerr;
 801fae4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801fae6:	f04f 33ff 	mov.w	r3, #4294967295
}
 801faea:	4618      	mov	r0, r3
 801faec:	3748      	adds	r7, #72	; 0x48
 801faee:	46bd      	mov	sp, r7
 801faf0:	bd80      	pop	{r7, pc}
 801faf2:	bf00      	nop
 801faf4:	08029368 	.word	0x08029368
 801faf8:	08029544 	.word	0x08029544
 801fafc:	080293b0 	.word	0x080293b0
 801fb00:	08029560 	.word	0x08029560
 801fb04:	08029580 	.word	0x08029580
 801fb08:	0801f819 	.word	0x0801f819

0801fb0c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801fb0c:	b580      	push	{r7, lr}
 801fb0e:	b086      	sub	sp, #24
 801fb10:	af00      	add	r7, sp, #0
 801fb12:	6078      	str	r0, [r7, #4]
 801fb14:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801fb16:	230e      	movs	r3, #14
 801fb18:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801fb1a:	687b      	ldr	r3, [r7, #4]
 801fb1c:	895b      	ldrh	r3, [r3, #10]
 801fb1e:	2b0e      	cmp	r3, #14
 801fb20:	d96e      	bls.n	801fc00 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801fb22:	687b      	ldr	r3, [r7, #4]
 801fb24:	7bdb      	ldrb	r3, [r3, #15]
 801fb26:	2b00      	cmp	r3, #0
 801fb28:	d106      	bne.n	801fb38 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801fb2a:	683b      	ldr	r3, [r7, #0]
 801fb2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801fb30:	3301      	adds	r3, #1
 801fb32:	b2da      	uxtb	r2, r3
 801fb34:	687b      	ldr	r3, [r7, #4]
 801fb36:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801fb38:	687b      	ldr	r3, [r7, #4]
 801fb3a:	685b      	ldr	r3, [r3, #4]
 801fb3c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801fb3e:	693b      	ldr	r3, [r7, #16]
 801fb40:	7b1a      	ldrb	r2, [r3, #12]
 801fb42:	7b5b      	ldrb	r3, [r3, #13]
 801fb44:	021b      	lsls	r3, r3, #8
 801fb46:	4313      	orrs	r3, r2
 801fb48:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801fb4a:	693b      	ldr	r3, [r7, #16]
 801fb4c:	781b      	ldrb	r3, [r3, #0]
 801fb4e:	f003 0301 	and.w	r3, r3, #1
 801fb52:	2b00      	cmp	r3, #0
 801fb54:	d023      	beq.n	801fb9e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801fb56:	693b      	ldr	r3, [r7, #16]
 801fb58:	781b      	ldrb	r3, [r3, #0]
 801fb5a:	2b01      	cmp	r3, #1
 801fb5c:	d10f      	bne.n	801fb7e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801fb5e:	693b      	ldr	r3, [r7, #16]
 801fb60:	785b      	ldrb	r3, [r3, #1]
 801fb62:	2b00      	cmp	r3, #0
 801fb64:	d11b      	bne.n	801fb9e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801fb66:	693b      	ldr	r3, [r7, #16]
 801fb68:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801fb6a:	2b5e      	cmp	r3, #94	; 0x5e
 801fb6c:	d117      	bne.n	801fb9e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801fb6e:	687b      	ldr	r3, [r7, #4]
 801fb70:	7b5b      	ldrb	r3, [r3, #13]
 801fb72:	f043 0310 	orr.w	r3, r3, #16
 801fb76:	b2da      	uxtb	r2, r3
 801fb78:	687b      	ldr	r3, [r7, #4]
 801fb7a:	735a      	strb	r2, [r3, #13]
 801fb7c:	e00f      	b.n	801fb9e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801fb7e:	693b      	ldr	r3, [r7, #16]
 801fb80:	2206      	movs	r2, #6
 801fb82:	4928      	ldr	r1, [pc, #160]	; (801fc24 <ethernet_input+0x118>)
 801fb84:	4618      	mov	r0, r3
 801fb86:	f000 f9ad 	bl	801fee4 <memcmp>
 801fb8a:	4603      	mov	r3, r0
 801fb8c:	2b00      	cmp	r3, #0
 801fb8e:	d106      	bne.n	801fb9e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801fb90:	687b      	ldr	r3, [r7, #4]
 801fb92:	7b5b      	ldrb	r3, [r3, #13]
 801fb94:	f043 0308 	orr.w	r3, r3, #8
 801fb98:	b2da      	uxtb	r2, r3
 801fb9a:	687b      	ldr	r3, [r7, #4]
 801fb9c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801fb9e:	89fb      	ldrh	r3, [r7, #14]
 801fba0:	2b08      	cmp	r3, #8
 801fba2:	d003      	beq.n	801fbac <ethernet_input+0xa0>
 801fba4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801fba8:	d014      	beq.n	801fbd4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801fbaa:	e032      	b.n	801fc12 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801fbac:	683b      	ldr	r3, [r7, #0]
 801fbae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801fbb2:	f003 0308 	and.w	r3, r3, #8
 801fbb6:	2b00      	cmp	r3, #0
 801fbb8:	d024      	beq.n	801fc04 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801fbba:	8afb      	ldrh	r3, [r7, #22]
 801fbbc:	4619      	mov	r1, r3
 801fbbe:	6878      	ldr	r0, [r7, #4]
 801fbc0:	f7f6 fe62 	bl	8016888 <pbuf_remove_header>
 801fbc4:	4603      	mov	r3, r0
 801fbc6:	2b00      	cmp	r3, #0
 801fbc8:	d11e      	bne.n	801fc08 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801fbca:	6839      	ldr	r1, [r7, #0]
 801fbcc:	6878      	ldr	r0, [r7, #4]
 801fbce:	f7fe ff21 	bl	801ea14 <ip4_input>
      break;
 801fbd2:	e013      	b.n	801fbfc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801fbd4:	683b      	ldr	r3, [r7, #0]
 801fbd6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801fbda:	f003 0308 	and.w	r3, r3, #8
 801fbde:	2b00      	cmp	r3, #0
 801fbe0:	d014      	beq.n	801fc0c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801fbe2:	8afb      	ldrh	r3, [r7, #22]
 801fbe4:	4619      	mov	r1, r3
 801fbe6:	6878      	ldr	r0, [r7, #4]
 801fbe8:	f7f6 fe4e 	bl	8016888 <pbuf_remove_header>
 801fbec:	4603      	mov	r3, r0
 801fbee:	2b00      	cmp	r3, #0
 801fbf0:	d10e      	bne.n	801fc10 <ethernet_input+0x104>
        etharp_input(p, netif);
 801fbf2:	6839      	ldr	r1, [r7, #0]
 801fbf4:	6878      	ldr	r0, [r7, #4]
 801fbf6:	f7fe f8c1 	bl	801dd7c <etharp_input>
      break;
 801fbfa:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801fbfc:	2300      	movs	r3, #0
 801fbfe:	e00c      	b.n	801fc1a <ethernet_input+0x10e>
    goto free_and_return;
 801fc00:	bf00      	nop
 801fc02:	e006      	b.n	801fc12 <ethernet_input+0x106>
        goto free_and_return;
 801fc04:	bf00      	nop
 801fc06:	e004      	b.n	801fc12 <ethernet_input+0x106>
        goto free_and_return;
 801fc08:	bf00      	nop
 801fc0a:	e002      	b.n	801fc12 <ethernet_input+0x106>
        goto free_and_return;
 801fc0c:	bf00      	nop
 801fc0e:	e000      	b.n	801fc12 <ethernet_input+0x106>
        goto free_and_return;
 801fc10:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801fc12:	6878      	ldr	r0, [r7, #4]
 801fc14:	f7f6 febe 	bl	8016994 <pbuf_free>
  return ERR_OK;
 801fc18:	2300      	movs	r3, #0
}
 801fc1a:	4618      	mov	r0, r3
 801fc1c:	3718      	adds	r7, #24
 801fc1e:	46bd      	mov	sp, r7
 801fc20:	bd80      	pop	{r7, pc}
 801fc22:	bf00      	nop
 801fc24:	080718ec 	.word	0x080718ec

0801fc28 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801fc28:	b580      	push	{r7, lr}
 801fc2a:	b086      	sub	sp, #24
 801fc2c:	af00      	add	r7, sp, #0
 801fc2e:	60f8      	str	r0, [r7, #12]
 801fc30:	60b9      	str	r1, [r7, #8]
 801fc32:	607a      	str	r2, [r7, #4]
 801fc34:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801fc36:	8c3b      	ldrh	r3, [r7, #32]
 801fc38:	4618      	mov	r0, r3
 801fc3a:	f7f5 fabb 	bl	80151b4 <lwip_htons>
 801fc3e:	4603      	mov	r3, r0
 801fc40:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801fc42:	210e      	movs	r1, #14
 801fc44:	68b8      	ldr	r0, [r7, #8]
 801fc46:	f7f6 fe0f 	bl	8016868 <pbuf_add_header>
 801fc4a:	4603      	mov	r3, r0
 801fc4c:	2b00      	cmp	r3, #0
 801fc4e:	d125      	bne.n	801fc9c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801fc50:	68bb      	ldr	r3, [r7, #8]
 801fc52:	685b      	ldr	r3, [r3, #4]
 801fc54:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801fc56:	693b      	ldr	r3, [r7, #16]
 801fc58:	8afa      	ldrh	r2, [r7, #22]
 801fc5a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801fc5c:	693b      	ldr	r3, [r7, #16]
 801fc5e:	2206      	movs	r2, #6
 801fc60:	6839      	ldr	r1, [r7, #0]
 801fc62:	4618      	mov	r0, r3
 801fc64:	f000 f94e 	bl	801ff04 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801fc68:	693b      	ldr	r3, [r7, #16]
 801fc6a:	3306      	adds	r3, #6
 801fc6c:	2206      	movs	r2, #6
 801fc6e:	6879      	ldr	r1, [r7, #4]
 801fc70:	4618      	mov	r0, r3
 801fc72:	f000 f947 	bl	801ff04 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801fc76:	68fb      	ldr	r3, [r7, #12]
 801fc78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801fc7c:	2b06      	cmp	r3, #6
 801fc7e:	d006      	beq.n	801fc8e <ethernet_output+0x66>
 801fc80:	4b0a      	ldr	r3, [pc, #40]	; (801fcac <ethernet_output+0x84>)
 801fc82:	f44f 7299 	mov.w	r2, #306	; 0x132
 801fc86:	490a      	ldr	r1, [pc, #40]	; (801fcb0 <ethernet_output+0x88>)
 801fc88:	480a      	ldr	r0, [pc, #40]	; (801fcb4 <ethernet_output+0x8c>)
 801fc8a:	f000 f96b 	bl	801ff64 <printf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801fc8e:	68fb      	ldr	r3, [r7, #12]
 801fc90:	699b      	ldr	r3, [r3, #24]
 801fc92:	68b9      	ldr	r1, [r7, #8]
 801fc94:	68f8      	ldr	r0, [r7, #12]
 801fc96:	4798      	blx	r3
 801fc98:	4603      	mov	r3, r0
 801fc9a:	e002      	b.n	801fca2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801fc9c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801fc9e:	f06f 0301 	mvn.w	r3, #1
}
 801fca2:	4618      	mov	r0, r3
 801fca4:	3718      	adds	r7, #24
 801fca6:	46bd      	mov	sp, r7
 801fca8:	bd80      	pop	{r7, pc}
 801fcaa:	bf00      	nop
 801fcac:	08029590 	.word	0x08029590
 801fcb0:	080295c8 	.word	0x080295c8
 801fcb4:	080295fc 	.word	0x080295fc

0801fcb8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801fcb8:	b580      	push	{r7, lr}
 801fcba:	b082      	sub	sp, #8
 801fcbc:	af00      	add	r7, sp, #0
 801fcbe:	6078      	str	r0, [r7, #4]
 801fcc0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801fcc2:	683b      	ldr	r3, [r7, #0]
 801fcc4:	2200      	movs	r2, #0
 801fcc6:	2104      	movs	r1, #4
 801fcc8:	4618      	mov	r0, r3
 801fcca:	f7ef fd97 	bl	800f7fc <osMessageQueueNew>
 801fcce:	4602      	mov	r2, r0
 801fcd0:	687b      	ldr	r3, [r7, #4]
 801fcd2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801fcd4:	687b      	ldr	r3, [r7, #4]
 801fcd6:	681b      	ldr	r3, [r3, #0]
 801fcd8:	2b00      	cmp	r3, #0
 801fcda:	d102      	bne.n	801fce2 <sys_mbox_new+0x2a>
    return ERR_MEM;
 801fcdc:	f04f 33ff 	mov.w	r3, #4294967295
 801fce0:	e000      	b.n	801fce4 <sys_mbox_new+0x2c>

  return ERR_OK;
 801fce2:	2300      	movs	r3, #0
}
 801fce4:	4618      	mov	r0, r3
 801fce6:	3708      	adds	r7, #8
 801fce8:	46bd      	mov	sp, r7
 801fcea:	bd80      	pop	{r7, pc}

0801fcec <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801fcec:	b580      	push	{r7, lr}
 801fcee:	b084      	sub	sp, #16
 801fcf0:	af00      	add	r7, sp, #0
 801fcf2:	6078      	str	r0, [r7, #4]
 801fcf4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801fcf6:	687b      	ldr	r3, [r7, #4]
 801fcf8:	6818      	ldr	r0, [r3, #0]
 801fcfa:	4639      	mov	r1, r7
 801fcfc:	2300      	movs	r3, #0
 801fcfe:	2200      	movs	r2, #0
 801fd00:	f7ef fdf0 	bl	800f8e4 <osMessageQueuePut>
 801fd04:	4603      	mov	r3, r0
 801fd06:	2b00      	cmp	r3, #0
 801fd08:	d102      	bne.n	801fd10 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801fd0a:	2300      	movs	r3, #0
 801fd0c:	73fb      	strb	r3, [r7, #15]
 801fd0e:	e001      	b.n	801fd14 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801fd10:	23ff      	movs	r3, #255	; 0xff
 801fd12:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801fd14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801fd18:	4618      	mov	r0, r3
 801fd1a:	3710      	adds	r7, #16
 801fd1c:	46bd      	mov	sp, r7
 801fd1e:	bd80      	pop	{r7, pc}

0801fd20 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801fd20:	b580      	push	{r7, lr}
 801fd22:	b086      	sub	sp, #24
 801fd24:	af00      	add	r7, sp, #0
 801fd26:	60f8      	str	r0, [r7, #12]
 801fd28:	60b9      	str	r1, [r7, #8]
 801fd2a:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801fd2c:	f7ef fa52 	bl	800f1d4 <osKernelGetTickCount>
 801fd30:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801fd32:	687b      	ldr	r3, [r7, #4]
 801fd34:	2b00      	cmp	r3, #0
 801fd36:	d013      	beq.n	801fd60 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801fd38:	68fb      	ldr	r3, [r7, #12]
 801fd3a:	6818      	ldr	r0, [r3, #0]
 801fd3c:	687b      	ldr	r3, [r7, #4]
 801fd3e:	2200      	movs	r2, #0
 801fd40:	68b9      	ldr	r1, [r7, #8]
 801fd42:	f7ef fe2f 	bl	800f9a4 <osMessageQueueGet>
 801fd46:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801fd48:	693b      	ldr	r3, [r7, #16]
 801fd4a:	2b00      	cmp	r3, #0
 801fd4c:	d105      	bne.n	801fd5a <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801fd4e:	f7ef fa41 	bl	800f1d4 <osKernelGetTickCount>
 801fd52:	4602      	mov	r2, r0
 801fd54:	697b      	ldr	r3, [r7, #20]
 801fd56:	1ad3      	subs	r3, r2, r3
 801fd58:	e00f      	b.n	801fd7a <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801fd5a:	f04f 33ff 	mov.w	r3, #4294967295
 801fd5e:	e00c      	b.n	801fd7a <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801fd60:	68fb      	ldr	r3, [r7, #12]
 801fd62:	6818      	ldr	r0, [r3, #0]
 801fd64:	f04f 33ff 	mov.w	r3, #4294967295
 801fd68:	2200      	movs	r2, #0
 801fd6a:	68b9      	ldr	r1, [r7, #8]
 801fd6c:	f7ef fe1a 	bl	800f9a4 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801fd70:	f7ef fa30 	bl	800f1d4 <osKernelGetTickCount>
 801fd74:	4602      	mov	r2, r0
 801fd76:	697b      	ldr	r3, [r7, #20]
 801fd78:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801fd7a:	4618      	mov	r0, r3
 801fd7c:	3718      	adds	r7, #24
 801fd7e:	46bd      	mov	sp, r7
 801fd80:	bd80      	pop	{r7, pc}

0801fd82 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801fd82:	b480      	push	{r7}
 801fd84:	b083      	sub	sp, #12
 801fd86:	af00      	add	r7, sp, #0
 801fd88:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801fd8a:	687b      	ldr	r3, [r7, #4]
 801fd8c:	681b      	ldr	r3, [r3, #0]
 801fd8e:	2b00      	cmp	r3, #0
 801fd90:	d101      	bne.n	801fd96 <sys_mbox_valid+0x14>
    return 0;
 801fd92:	2300      	movs	r3, #0
 801fd94:	e000      	b.n	801fd98 <sys_mbox_valid+0x16>
  else
    return 1;
 801fd96:	2301      	movs	r3, #1
}
 801fd98:	4618      	mov	r0, r3
 801fd9a:	370c      	adds	r7, #12
 801fd9c:	46bd      	mov	sp, r7
 801fd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fda2:	4770      	bx	lr

0801fda4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801fda4:	b580      	push	{r7, lr}
 801fda6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801fda8:	2000      	movs	r0, #0
 801fdaa:	f7ef fad5 	bl	800f358 <osMutexNew>
 801fdae:	4603      	mov	r3, r0
 801fdb0:	4a01      	ldr	r2, [pc, #4]	; (801fdb8 <sys_init+0x14>)
 801fdb2:	6013      	str	r3, [r2, #0]
#endif
}
 801fdb4:	bf00      	nop
 801fdb6:	bd80      	pop	{r7, pc}
 801fdb8:	200189fc 	.word	0x200189fc

0801fdbc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801fdbc:	b580      	push	{r7, lr}
 801fdbe:	b082      	sub	sp, #8
 801fdc0:	af00      	add	r7, sp, #0
 801fdc2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801fdc4:	2000      	movs	r0, #0
 801fdc6:	f7ef fac7 	bl	800f358 <osMutexNew>
 801fdca:	4602      	mov	r2, r0
 801fdcc:	687b      	ldr	r3, [r7, #4]
 801fdce:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801fdd0:	687b      	ldr	r3, [r7, #4]
 801fdd2:	681b      	ldr	r3, [r3, #0]
 801fdd4:	2b00      	cmp	r3, #0
 801fdd6:	d102      	bne.n	801fdde <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801fdd8:	f04f 33ff 	mov.w	r3, #4294967295
 801fddc:	e000      	b.n	801fde0 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801fdde:	2300      	movs	r3, #0
}
 801fde0:	4618      	mov	r0, r3
 801fde2:	3708      	adds	r7, #8
 801fde4:	46bd      	mov	sp, r7
 801fde6:	bd80      	pop	{r7, pc}

0801fde8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801fde8:	b580      	push	{r7, lr}
 801fdea:	b082      	sub	sp, #8
 801fdec:	af00      	add	r7, sp, #0
 801fdee:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801fdf0:	687b      	ldr	r3, [r7, #4]
 801fdf2:	681b      	ldr	r3, [r3, #0]
 801fdf4:	f04f 31ff 	mov.w	r1, #4294967295
 801fdf8:	4618      	mov	r0, r3
 801fdfa:	f7ef fb33 	bl	800f464 <osMutexAcquire>
#endif
}
 801fdfe:	bf00      	nop
 801fe00:	3708      	adds	r7, #8
 801fe02:	46bd      	mov	sp, r7
 801fe04:	bd80      	pop	{r7, pc}

0801fe06 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801fe06:	b580      	push	{r7, lr}
 801fe08:	b082      	sub	sp, #8
 801fe0a:	af00      	add	r7, sp, #0
 801fe0c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801fe0e:	687b      	ldr	r3, [r7, #4]
 801fe10:	681b      	ldr	r3, [r3, #0]
 801fe12:	4618      	mov	r0, r3
 801fe14:	f7ef fb71 	bl	800f4fa <osMutexRelease>
}
 801fe18:	bf00      	nop
 801fe1a:	3708      	adds	r7, #8
 801fe1c:	46bd      	mov	sp, r7
 801fe1e:	bd80      	pop	{r7, pc}

0801fe20 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801fe20:	b580      	push	{r7, lr}
 801fe22:	b08e      	sub	sp, #56	; 0x38
 801fe24:	af00      	add	r7, sp, #0
 801fe26:	60f8      	str	r0, [r7, #12]
 801fe28:	60b9      	str	r1, [r7, #8]
 801fe2a:	607a      	str	r2, [r7, #4]
 801fe2c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801fe2e:	f107 0314 	add.w	r3, r7, #20
 801fe32:	2224      	movs	r2, #36	; 0x24
 801fe34:	2100      	movs	r1, #0
 801fe36:	4618      	mov	r0, r3
 801fe38:	f000 f88c 	bl	801ff54 <memset>
 801fe3c:	68fb      	ldr	r3, [r7, #12]
 801fe3e:	617b      	str	r3, [r7, #20]
 801fe40:	683b      	ldr	r3, [r7, #0]
 801fe42:	62bb      	str	r3, [r7, #40]	; 0x28
 801fe44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fe46:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801fe48:	f107 0314 	add.w	r3, r7, #20
 801fe4c:	461a      	mov	r2, r3
 801fe4e:	6879      	ldr	r1, [r7, #4]
 801fe50:	68b8      	ldr	r0, [r7, #8]
 801fe52:	f7ef f9d4 	bl	800f1fe <osThreadNew>
 801fe56:	4603      	mov	r3, r0
#endif
}
 801fe58:	4618      	mov	r0, r3
 801fe5a:	3738      	adds	r7, #56	; 0x38
 801fe5c:	46bd      	mov	sp, r7
 801fe5e:	bd80      	pop	{r7, pc}

0801fe60 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801fe60:	b580      	push	{r7, lr}
 801fe62:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801fe64:	4b04      	ldr	r3, [pc, #16]	; (801fe78 <sys_arch_protect+0x18>)
 801fe66:	681b      	ldr	r3, [r3, #0]
 801fe68:	f04f 31ff 	mov.w	r1, #4294967295
 801fe6c:	4618      	mov	r0, r3
 801fe6e:	f7ef faf9 	bl	800f464 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801fe72:	2301      	movs	r3, #1
}
 801fe74:	4618      	mov	r0, r3
 801fe76:	bd80      	pop	{r7, pc}
 801fe78:	200189fc 	.word	0x200189fc

0801fe7c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801fe7c:	b580      	push	{r7, lr}
 801fe7e:	b082      	sub	sp, #8
 801fe80:	af00      	add	r7, sp, #0
 801fe82:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801fe84:	4b04      	ldr	r3, [pc, #16]	; (801fe98 <sys_arch_unprotect+0x1c>)
 801fe86:	681b      	ldr	r3, [r3, #0]
 801fe88:	4618      	mov	r0, r3
 801fe8a:	f7ef fb36 	bl	800f4fa <osMutexRelease>
}
 801fe8e:	bf00      	nop
 801fe90:	3708      	adds	r7, #8
 801fe92:	46bd      	mov	sp, r7
 801fe94:	bd80      	pop	{r7, pc}
 801fe96:	bf00      	nop
 801fe98:	200189fc 	.word	0x200189fc

0801fe9c <__libc_init_array>:
 801fe9c:	b570      	push	{r4, r5, r6, lr}
 801fe9e:	4d0d      	ldr	r5, [pc, #52]	; (801fed4 <__libc_init_array+0x38>)
 801fea0:	4c0d      	ldr	r4, [pc, #52]	; (801fed8 <__libc_init_array+0x3c>)
 801fea2:	1b64      	subs	r4, r4, r5
 801fea4:	10a4      	asrs	r4, r4, #2
 801fea6:	2600      	movs	r6, #0
 801fea8:	42a6      	cmp	r6, r4
 801feaa:	d109      	bne.n	801fec0 <__libc_init_array+0x24>
 801feac:	4d0b      	ldr	r5, [pc, #44]	; (801fedc <__libc_init_array+0x40>)
 801feae:	4c0c      	ldr	r4, [pc, #48]	; (801fee0 <__libc_init_array+0x44>)
 801feb0:	f006 f84c 	bl	8025f4c <_init>
 801feb4:	1b64      	subs	r4, r4, r5
 801feb6:	10a4      	asrs	r4, r4, #2
 801feb8:	2600      	movs	r6, #0
 801feba:	42a6      	cmp	r6, r4
 801febc:	d105      	bne.n	801feca <__libc_init_array+0x2e>
 801febe:	bd70      	pop	{r4, r5, r6, pc}
 801fec0:	f855 3b04 	ldr.w	r3, [r5], #4
 801fec4:	4798      	blx	r3
 801fec6:	3601      	adds	r6, #1
 801fec8:	e7ee      	b.n	801fea8 <__libc_init_array+0xc>
 801feca:	f855 3b04 	ldr.w	r3, [r5], #4
 801fece:	4798      	blx	r3
 801fed0:	3601      	adds	r6, #1
 801fed2:	e7f2      	b.n	801feba <__libc_init_array+0x1e>
 801fed4:	08071cbc 	.word	0x08071cbc
 801fed8:	08071cbc 	.word	0x08071cbc
 801fedc:	08071cbc 	.word	0x08071cbc
 801fee0:	08071cc4 	.word	0x08071cc4

0801fee4 <memcmp>:
 801fee4:	b510      	push	{r4, lr}
 801fee6:	3901      	subs	r1, #1
 801fee8:	4402      	add	r2, r0
 801feea:	4290      	cmp	r0, r2
 801feec:	d101      	bne.n	801fef2 <memcmp+0xe>
 801feee:	2000      	movs	r0, #0
 801fef0:	e005      	b.n	801fefe <memcmp+0x1a>
 801fef2:	7803      	ldrb	r3, [r0, #0]
 801fef4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801fef8:	42a3      	cmp	r3, r4
 801fefa:	d001      	beq.n	801ff00 <memcmp+0x1c>
 801fefc:	1b18      	subs	r0, r3, r4
 801fefe:	bd10      	pop	{r4, pc}
 801ff00:	3001      	adds	r0, #1
 801ff02:	e7f2      	b.n	801feea <memcmp+0x6>

0801ff04 <memcpy>:
 801ff04:	440a      	add	r2, r1
 801ff06:	4291      	cmp	r1, r2
 801ff08:	f100 33ff 	add.w	r3, r0, #4294967295
 801ff0c:	d100      	bne.n	801ff10 <memcpy+0xc>
 801ff0e:	4770      	bx	lr
 801ff10:	b510      	push	{r4, lr}
 801ff12:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ff16:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ff1a:	4291      	cmp	r1, r2
 801ff1c:	d1f9      	bne.n	801ff12 <memcpy+0xe>
 801ff1e:	bd10      	pop	{r4, pc}

0801ff20 <memmove>:
 801ff20:	4288      	cmp	r0, r1
 801ff22:	b510      	push	{r4, lr}
 801ff24:	eb01 0402 	add.w	r4, r1, r2
 801ff28:	d902      	bls.n	801ff30 <memmove+0x10>
 801ff2a:	4284      	cmp	r4, r0
 801ff2c:	4623      	mov	r3, r4
 801ff2e:	d807      	bhi.n	801ff40 <memmove+0x20>
 801ff30:	1e43      	subs	r3, r0, #1
 801ff32:	42a1      	cmp	r1, r4
 801ff34:	d008      	beq.n	801ff48 <memmove+0x28>
 801ff36:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ff3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ff3e:	e7f8      	b.n	801ff32 <memmove+0x12>
 801ff40:	4402      	add	r2, r0
 801ff42:	4601      	mov	r1, r0
 801ff44:	428a      	cmp	r2, r1
 801ff46:	d100      	bne.n	801ff4a <memmove+0x2a>
 801ff48:	bd10      	pop	{r4, pc}
 801ff4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ff4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ff52:	e7f7      	b.n	801ff44 <memmove+0x24>

0801ff54 <memset>:
 801ff54:	4402      	add	r2, r0
 801ff56:	4603      	mov	r3, r0
 801ff58:	4293      	cmp	r3, r2
 801ff5a:	d100      	bne.n	801ff5e <memset+0xa>
 801ff5c:	4770      	bx	lr
 801ff5e:	f803 1b01 	strb.w	r1, [r3], #1
 801ff62:	e7f9      	b.n	801ff58 <memset+0x4>

0801ff64 <printf>:
 801ff64:	b40f      	push	{r0, r1, r2, r3}
 801ff66:	b507      	push	{r0, r1, r2, lr}
 801ff68:	4906      	ldr	r1, [pc, #24]	; (801ff84 <printf+0x20>)
 801ff6a:	ab04      	add	r3, sp, #16
 801ff6c:	6808      	ldr	r0, [r1, #0]
 801ff6e:	f853 2b04 	ldr.w	r2, [r3], #4
 801ff72:	6881      	ldr	r1, [r0, #8]
 801ff74:	9301      	str	r3, [sp, #4]
 801ff76:	f001 fa7f 	bl	8021478 <_vfprintf_r>
 801ff7a:	b003      	add	sp, #12
 801ff7c:	f85d eb04 	ldr.w	lr, [sp], #4
 801ff80:	b004      	add	sp, #16
 801ff82:	4770      	bx	lr
 801ff84:	2000001c 	.word	0x2000001c

0801ff88 <_puts_r>:
 801ff88:	b530      	push	{r4, r5, lr}
 801ff8a:	4605      	mov	r5, r0
 801ff8c:	b089      	sub	sp, #36	; 0x24
 801ff8e:	4608      	mov	r0, r1
 801ff90:	460c      	mov	r4, r1
 801ff92:	f7e0 f92d 	bl	80001f0 <strlen>
 801ff96:	4b1e      	ldr	r3, [pc, #120]	; (8020010 <_puts_r+0x88>)
 801ff98:	9306      	str	r3, [sp, #24]
 801ff9a:	2301      	movs	r3, #1
 801ff9c:	e9cd 4004 	strd	r4, r0, [sp, #16]
 801ffa0:	9307      	str	r3, [sp, #28]
 801ffa2:	4418      	add	r0, r3
 801ffa4:	ab04      	add	r3, sp, #16
 801ffa6:	9301      	str	r3, [sp, #4]
 801ffa8:	2302      	movs	r3, #2
 801ffaa:	9302      	str	r3, [sp, #8]
 801ffac:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801ffae:	68ac      	ldr	r4, [r5, #8]
 801ffb0:	9003      	str	r0, [sp, #12]
 801ffb2:	b913      	cbnz	r3, 801ffba <_puts_r+0x32>
 801ffb4:	4628      	mov	r0, r5
 801ffb6:	f003 fca5 	bl	8023904 <__sinit>
 801ffba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ffbc:	07db      	lsls	r3, r3, #31
 801ffbe:	d405      	bmi.n	801ffcc <_puts_r+0x44>
 801ffc0:	89a3      	ldrh	r3, [r4, #12]
 801ffc2:	0598      	lsls	r0, r3, #22
 801ffc4:	d402      	bmi.n	801ffcc <_puts_r+0x44>
 801ffc6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ffc8:	f003 ff5c 	bl	8023e84 <__retarget_lock_acquire_recursive>
 801ffcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ffd0:	0499      	lsls	r1, r3, #18
 801ffd2:	d406      	bmi.n	801ffe2 <_puts_r+0x5a>
 801ffd4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801ffd8:	81a3      	strh	r3, [r4, #12]
 801ffda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ffdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801ffe0:	6663      	str	r3, [r4, #100]	; 0x64
 801ffe2:	4628      	mov	r0, r5
 801ffe4:	aa01      	add	r2, sp, #4
 801ffe6:	4621      	mov	r1, r4
 801ffe8:	f003 fddc 	bl	8023ba4 <__sfvwrite_r>
 801ffec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ffee:	2800      	cmp	r0, #0
 801fff0:	bf14      	ite	ne
 801fff2:	f04f 35ff 	movne.w	r5, #4294967295
 801fff6:	250a      	moveq	r5, #10
 801fff8:	07da      	lsls	r2, r3, #31
 801fffa:	d405      	bmi.n	8020008 <_puts_r+0x80>
 801fffc:	89a3      	ldrh	r3, [r4, #12]
 801fffe:	059b      	lsls	r3, r3, #22
 8020000:	d402      	bmi.n	8020008 <_puts_r+0x80>
 8020002:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020004:	f003 ff3f 	bl	8023e86 <__retarget_lock_release_recursive>
 8020008:	4628      	mov	r0, r5
 802000a:	b009      	add	sp, #36	; 0x24
 802000c:	bd30      	pop	{r4, r5, pc}
 802000e:	bf00      	nop
 8020010:	08071ca6 	.word	0x08071ca6

08020014 <puts>:
 8020014:	4b02      	ldr	r3, [pc, #8]	; (8020020 <puts+0xc>)
 8020016:	4601      	mov	r1, r0
 8020018:	6818      	ldr	r0, [r3, #0]
 802001a:	f7ff bfb5 	b.w	801ff88 <_puts_r>
 802001e:	bf00      	nop
 8020020:	2000001c 	.word	0x2000001c

08020024 <rand>:
 8020024:	4b0a      	ldr	r3, [pc, #40]	; (8020050 <rand+0x2c>)
 8020026:	4a0b      	ldr	r2, [pc, #44]	; (8020054 <rand+0x30>)
 8020028:	490b      	ldr	r1, [pc, #44]	; (8020058 <rand+0x34>)
 802002a:	b510      	push	{r4, lr}
 802002c:	681c      	ldr	r4, [r3, #0]
 802002e:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8020032:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8020036:	4342      	muls	r2, r0
 8020038:	fb01 2203 	mla	r2, r1, r3, r2
 802003c:	fba0 0101 	umull	r0, r1, r0, r1
 8020040:	1c43      	adds	r3, r0, #1
 8020042:	eb42 0001 	adc.w	r0, r2, r1
 8020046:	e9c4 302a 	strd	r3, r0, [r4, #168]	; 0xa8
 802004a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 802004e:	bd10      	pop	{r4, pc}
 8020050:	2000001c 	.word	0x2000001c
 8020054:	5851f42d 	.word	0x5851f42d
 8020058:	4c957f2d 	.word	0x4c957f2d

0802005c <sprintf>:
 802005c:	b40e      	push	{r1, r2, r3}
 802005e:	b500      	push	{lr}
 8020060:	b09c      	sub	sp, #112	; 0x70
 8020062:	ab1d      	add	r3, sp, #116	; 0x74
 8020064:	9002      	str	r0, [sp, #8]
 8020066:	9006      	str	r0, [sp, #24]
 8020068:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802006c:	4809      	ldr	r0, [pc, #36]	; (8020094 <sprintf+0x38>)
 802006e:	9107      	str	r1, [sp, #28]
 8020070:	9104      	str	r1, [sp, #16]
 8020072:	4909      	ldr	r1, [pc, #36]	; (8020098 <sprintf+0x3c>)
 8020074:	f853 2b04 	ldr.w	r2, [r3], #4
 8020078:	9105      	str	r1, [sp, #20]
 802007a:	6800      	ldr	r0, [r0, #0]
 802007c:	9301      	str	r3, [sp, #4]
 802007e:	a902      	add	r1, sp, #8
 8020080:	f000 f816 	bl	80200b0 <_svfprintf_r>
 8020084:	9b02      	ldr	r3, [sp, #8]
 8020086:	2200      	movs	r2, #0
 8020088:	701a      	strb	r2, [r3, #0]
 802008a:	b01c      	add	sp, #112	; 0x70
 802008c:	f85d eb04 	ldr.w	lr, [sp], #4
 8020090:	b003      	add	sp, #12
 8020092:	4770      	bx	lr
 8020094:	2000001c 	.word	0x2000001c
 8020098:	ffff0208 	.word	0xffff0208

0802009c <strcpy>:
 802009c:	4603      	mov	r3, r0
 802009e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80200a2:	f803 2b01 	strb.w	r2, [r3], #1
 80200a6:	2a00      	cmp	r2, #0
 80200a8:	d1f9      	bne.n	802009e <strcpy+0x2>
 80200aa:	4770      	bx	lr
 80200ac:	0000      	movs	r0, r0
	...

080200b0 <_svfprintf_r>:
 80200b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80200b4:	ed2d 8b04 	vpush	{d8-d9}
 80200b8:	b0cf      	sub	sp, #316	; 0x13c
 80200ba:	4688      	mov	r8, r1
 80200bc:	4691      	mov	r9, r2
 80200be:	461e      	mov	r6, r3
 80200c0:	4682      	mov	sl, r0
 80200c2:	f003 fed9 	bl	8023e78 <_localeconv_r>
 80200c6:	6803      	ldr	r3, [r0, #0]
 80200c8:	9313      	str	r3, [sp, #76]	; 0x4c
 80200ca:	4618      	mov	r0, r3
 80200cc:	f7e0 f890 	bl	80001f0 <strlen>
 80200d0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80200d4:	900d      	str	r0, [sp, #52]	; 0x34
 80200d6:	0618      	lsls	r0, r3, #24
 80200d8:	d51a      	bpl.n	8020110 <_svfprintf_r+0x60>
 80200da:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80200de:	b9bb      	cbnz	r3, 8020110 <_svfprintf_r+0x60>
 80200e0:	2140      	movs	r1, #64	; 0x40
 80200e2:	4650      	mov	r0, sl
 80200e4:	f003 ff3c 	bl	8023f60 <_malloc_r>
 80200e8:	f8c8 0000 	str.w	r0, [r8]
 80200ec:	f8c8 0010 	str.w	r0, [r8, #16]
 80200f0:	b958      	cbnz	r0, 802010a <_svfprintf_r+0x5a>
 80200f2:	230c      	movs	r3, #12
 80200f4:	f8ca 3000 	str.w	r3, [sl]
 80200f8:	f04f 33ff 	mov.w	r3, #4294967295
 80200fc:	930c      	str	r3, [sp, #48]	; 0x30
 80200fe:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020100:	b04f      	add	sp, #316	; 0x13c
 8020102:	ecbd 8b04 	vpop	{d8-d9}
 8020106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802010a:	2340      	movs	r3, #64	; 0x40
 802010c:	f8c8 3014 	str.w	r3, [r8, #20]
 8020110:	ed9f 7b93 	vldr	d7, [pc, #588]	; 8020360 <_svfprintf_r+0x2b0>
 8020114:	2500      	movs	r5, #0
 8020116:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 802011a:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 802011e:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 8020122:	ac25      	add	r4, sp, #148	; 0x94
 8020124:	9422      	str	r4, [sp, #136]	; 0x88
 8020126:	9505      	str	r5, [sp, #20]
 8020128:	950a      	str	r5, [sp, #40]	; 0x28
 802012a:	9512      	str	r5, [sp, #72]	; 0x48
 802012c:	9514      	str	r5, [sp, #80]	; 0x50
 802012e:	950c      	str	r5, [sp, #48]	; 0x30
 8020130:	464b      	mov	r3, r9
 8020132:	461d      	mov	r5, r3
 8020134:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020138:	b10a      	cbz	r2, 802013e <_svfprintf_r+0x8e>
 802013a:	2a25      	cmp	r2, #37	; 0x25
 802013c:	d1f9      	bne.n	8020132 <_svfprintf_r+0x82>
 802013e:	ebb5 0709 	subs.w	r7, r5, r9
 8020142:	d00d      	beq.n	8020160 <_svfprintf_r+0xb0>
 8020144:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020146:	443b      	add	r3, r7
 8020148:	9324      	str	r3, [sp, #144]	; 0x90
 802014a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802014c:	3301      	adds	r3, #1
 802014e:	2b07      	cmp	r3, #7
 8020150:	e9c4 9700 	strd	r9, r7, [r4]
 8020154:	9323      	str	r3, [sp, #140]	; 0x8c
 8020156:	dc79      	bgt.n	802024c <_svfprintf_r+0x19c>
 8020158:	3408      	adds	r4, #8
 802015a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802015c:	443b      	add	r3, r7
 802015e:	930c      	str	r3, [sp, #48]	; 0x30
 8020160:	782b      	ldrb	r3, [r5, #0]
 8020162:	2b00      	cmp	r3, #0
 8020164:	f001 8148 	beq.w	80213f8 <_svfprintf_r+0x1348>
 8020168:	2300      	movs	r3, #0
 802016a:	f04f 32ff 	mov.w	r2, #4294967295
 802016e:	9204      	str	r2, [sp, #16]
 8020170:	3501      	adds	r5, #1
 8020172:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8020176:	9310      	str	r3, [sp, #64]	; 0x40
 8020178:	469b      	mov	fp, r3
 802017a:	270a      	movs	r7, #10
 802017c:	222b      	movs	r2, #43	; 0x2b
 802017e:	462b      	mov	r3, r5
 8020180:	f813 1b01 	ldrb.w	r1, [r3], #1
 8020184:	9106      	str	r1, [sp, #24]
 8020186:	930b      	str	r3, [sp, #44]	; 0x2c
 8020188:	9b06      	ldr	r3, [sp, #24]
 802018a:	3b20      	subs	r3, #32
 802018c:	2b5a      	cmp	r3, #90	; 0x5a
 802018e:	f200 85bf 	bhi.w	8020d10 <_svfprintf_r+0xc60>
 8020192:	e8df f013 	tbh	[pc, r3, lsl #1]
 8020196:	007e      	.short	0x007e
 8020198:	05bd05bd 	.word	0x05bd05bd
 802019c:	05bd0086 	.word	0x05bd0086
 80201a0:	05bd05bd 	.word	0x05bd05bd
 80201a4:	05bd0065 	.word	0x05bd0065
 80201a8:	008905bd 	.word	0x008905bd
 80201ac:	05bd0093 	.word	0x05bd0093
 80201b0:	00960090 	.word	0x00960090
 80201b4:	00b305bd 	.word	0x00b305bd
 80201b8:	00b600b6 	.word	0x00b600b6
 80201bc:	00b600b6 	.word	0x00b600b6
 80201c0:	00b600b6 	.word	0x00b600b6
 80201c4:	00b600b6 	.word	0x00b600b6
 80201c8:	05bd00b6 	.word	0x05bd00b6
 80201cc:	05bd05bd 	.word	0x05bd05bd
 80201d0:	05bd05bd 	.word	0x05bd05bd
 80201d4:	05bd05bd 	.word	0x05bd05bd
 80201d8:	05bd012c 	.word	0x05bd012c
 80201dc:	00fc00e9 	.word	0x00fc00e9
 80201e0:	012c012c 	.word	0x012c012c
 80201e4:	05bd012c 	.word	0x05bd012c
 80201e8:	05bd05bd 	.word	0x05bd05bd
 80201ec:	00c605bd 	.word	0x00c605bd
 80201f0:	05bd05bd 	.word	0x05bd05bd
 80201f4:	05bd0498 	.word	0x05bd0498
 80201f8:	05bd05bd 	.word	0x05bd05bd
 80201fc:	05bd04e2 	.word	0x05bd04e2
 8020200:	05bd0503 	.word	0x05bd0503
 8020204:	052505bd 	.word	0x052505bd
 8020208:	05bd05bd 	.word	0x05bd05bd
 802020c:	05bd05bd 	.word	0x05bd05bd
 8020210:	05bd05bd 	.word	0x05bd05bd
 8020214:	05bd05bd 	.word	0x05bd05bd
 8020218:	05bd012c 	.word	0x05bd012c
 802021c:	00fe00e9 	.word	0x00fe00e9
 8020220:	012c012c 	.word	0x012c012c
 8020224:	00c9012c 	.word	0x00c9012c
 8020228:	00dd00fe 	.word	0x00dd00fe
 802022c:	00d605bd 	.word	0x00d605bd
 8020230:	047305bd 	.word	0x047305bd
 8020234:	04d0049a 	.word	0x04d0049a
 8020238:	05bd00dd 	.word	0x05bd00dd
 802023c:	007c04e2 	.word	0x007c04e2
 8020240:	05bd0505 	.word	0x05bd0505
 8020244:	054405bd 	.word	0x054405bd
 8020248:	007c05bd 	.word	0x007c05bd
 802024c:	aa22      	add	r2, sp, #136	; 0x88
 802024e:	4641      	mov	r1, r8
 8020250:	4650      	mov	r0, sl
 8020252:	f004 fe45 	bl	8024ee0 <__ssprint_r>
 8020256:	2800      	cmp	r0, #0
 8020258:	f040 8137 	bne.w	80204ca <_svfprintf_r+0x41a>
 802025c:	ac25      	add	r4, sp, #148	; 0x94
 802025e:	e77c      	b.n	802015a <_svfprintf_r+0xaa>
 8020260:	4650      	mov	r0, sl
 8020262:	f003 fe09 	bl	8023e78 <_localeconv_r>
 8020266:	6843      	ldr	r3, [r0, #4]
 8020268:	9314      	str	r3, [sp, #80]	; 0x50
 802026a:	4618      	mov	r0, r3
 802026c:	f7df ffc0 	bl	80001f0 <strlen>
 8020270:	9012      	str	r0, [sp, #72]	; 0x48
 8020272:	4650      	mov	r0, sl
 8020274:	f003 fe00 	bl	8023e78 <_localeconv_r>
 8020278:	6883      	ldr	r3, [r0, #8]
 802027a:	930a      	str	r3, [sp, #40]	; 0x28
 802027c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802027e:	222b      	movs	r2, #43	; 0x2b
 8020280:	b12b      	cbz	r3, 802028e <_svfprintf_r+0x1de>
 8020282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020284:	b11b      	cbz	r3, 802028e <_svfprintf_r+0x1de>
 8020286:	781b      	ldrb	r3, [r3, #0]
 8020288:	b10b      	cbz	r3, 802028e <_svfprintf_r+0x1de>
 802028a:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 802028e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8020290:	e775      	b.n	802017e <_svfprintf_r+0xce>
 8020292:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8020296:	2b00      	cmp	r3, #0
 8020298:	d1f9      	bne.n	802028e <_svfprintf_r+0x1de>
 802029a:	2320      	movs	r3, #32
 802029c:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80202a0:	e7f5      	b.n	802028e <_svfprintf_r+0x1de>
 80202a2:	f04b 0b01 	orr.w	fp, fp, #1
 80202a6:	e7f2      	b.n	802028e <_svfprintf_r+0x1de>
 80202a8:	f856 3b04 	ldr.w	r3, [r6], #4
 80202ac:	9310      	str	r3, [sp, #64]	; 0x40
 80202ae:	2b00      	cmp	r3, #0
 80202b0:	daed      	bge.n	802028e <_svfprintf_r+0x1de>
 80202b2:	425b      	negs	r3, r3
 80202b4:	9310      	str	r3, [sp, #64]	; 0x40
 80202b6:	f04b 0b04 	orr.w	fp, fp, #4
 80202ba:	e7e8      	b.n	802028e <_svfprintf_r+0x1de>
 80202bc:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 80202c0:	e7e5      	b.n	802028e <_svfprintf_r+0x1de>
 80202c2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80202c4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80202c8:	9306      	str	r3, [sp, #24]
 80202ca:	2b2a      	cmp	r3, #42	; 0x2a
 80202cc:	d113      	bne.n	80202f6 <_svfprintf_r+0x246>
 80202ce:	f856 0b04 	ldr.w	r0, [r6], #4
 80202d2:	950b      	str	r5, [sp, #44]	; 0x2c
 80202d4:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 80202d8:	9304      	str	r3, [sp, #16]
 80202da:	e7d8      	b.n	802028e <_svfprintf_r+0x1de>
 80202dc:	9904      	ldr	r1, [sp, #16]
 80202de:	fb07 3301 	mla	r3, r7, r1, r3
 80202e2:	9304      	str	r3, [sp, #16]
 80202e4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80202e8:	9306      	str	r3, [sp, #24]
 80202ea:	9b06      	ldr	r3, [sp, #24]
 80202ec:	3b30      	subs	r3, #48	; 0x30
 80202ee:	2b09      	cmp	r3, #9
 80202f0:	d9f4      	bls.n	80202dc <_svfprintf_r+0x22c>
 80202f2:	950b      	str	r5, [sp, #44]	; 0x2c
 80202f4:	e748      	b.n	8020188 <_svfprintf_r+0xd8>
 80202f6:	2300      	movs	r3, #0
 80202f8:	9304      	str	r3, [sp, #16]
 80202fa:	e7f6      	b.n	80202ea <_svfprintf_r+0x23a>
 80202fc:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8020300:	e7c5      	b.n	802028e <_svfprintf_r+0x1de>
 8020302:	2300      	movs	r3, #0
 8020304:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8020306:	9310      	str	r3, [sp, #64]	; 0x40
 8020308:	9b06      	ldr	r3, [sp, #24]
 802030a:	9910      	ldr	r1, [sp, #64]	; 0x40
 802030c:	3b30      	subs	r3, #48	; 0x30
 802030e:	fb07 3301 	mla	r3, r7, r1, r3
 8020312:	9310      	str	r3, [sp, #64]	; 0x40
 8020314:	f815 3b01 	ldrb.w	r3, [r5], #1
 8020318:	9306      	str	r3, [sp, #24]
 802031a:	3b30      	subs	r3, #48	; 0x30
 802031c:	2b09      	cmp	r3, #9
 802031e:	d9f3      	bls.n	8020308 <_svfprintf_r+0x258>
 8020320:	e7e7      	b.n	80202f2 <_svfprintf_r+0x242>
 8020322:	f04b 0b08 	orr.w	fp, fp, #8
 8020326:	e7b2      	b.n	802028e <_svfprintf_r+0x1de>
 8020328:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802032a:	781b      	ldrb	r3, [r3, #0]
 802032c:	2b68      	cmp	r3, #104	; 0x68
 802032e:	bf01      	itttt	eq
 8020330:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 8020332:	3301      	addeq	r3, #1
 8020334:	930b      	streq	r3, [sp, #44]	; 0x2c
 8020336:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 802033a:	bf18      	it	ne
 802033c:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 8020340:	e7a5      	b.n	802028e <_svfprintf_r+0x1de>
 8020342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020344:	781b      	ldrb	r3, [r3, #0]
 8020346:	2b6c      	cmp	r3, #108	; 0x6c
 8020348:	d105      	bne.n	8020356 <_svfprintf_r+0x2a6>
 802034a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802034c:	3301      	adds	r3, #1
 802034e:	930b      	str	r3, [sp, #44]	; 0x2c
 8020350:	f04b 0b20 	orr.w	fp, fp, #32
 8020354:	e79b      	b.n	802028e <_svfprintf_r+0x1de>
 8020356:	f04b 0b10 	orr.w	fp, fp, #16
 802035a:	e798      	b.n	802028e <_svfprintf_r+0x1de>
 802035c:	f3af 8000 	nop.w
	...
 8020368:	4632      	mov	r2, r6
 802036a:	2000      	movs	r0, #0
 802036c:	f852 3b04 	ldr.w	r3, [r2], #4
 8020370:	9207      	str	r2, [sp, #28]
 8020372:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8020376:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 802037a:	2301      	movs	r3, #1
 802037c:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8020380:	9003      	str	r0, [sp, #12]
 8020382:	9304      	str	r3, [sp, #16]
 8020384:	4606      	mov	r6, r0
 8020386:	4605      	mov	r5, r0
 8020388:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 802038c:	e1bc      	b.n	8020708 <_svfprintf_r+0x658>
 802038e:	f04b 0b10 	orr.w	fp, fp, #16
 8020392:	f01b 0f20 	tst.w	fp, #32
 8020396:	d012      	beq.n	80203be <_svfprintf_r+0x30e>
 8020398:	1df3      	adds	r3, r6, #7
 802039a:	f023 0307 	bic.w	r3, r3, #7
 802039e:	461a      	mov	r2, r3
 80203a0:	685d      	ldr	r5, [r3, #4]
 80203a2:	f852 6b08 	ldr.w	r6, [r2], #8
 80203a6:	9207      	str	r2, [sp, #28]
 80203a8:	2d00      	cmp	r5, #0
 80203aa:	da06      	bge.n	80203ba <_svfprintf_r+0x30a>
 80203ac:	4276      	negs	r6, r6
 80203ae:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80203b2:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80203b6:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80203ba:	2301      	movs	r3, #1
 80203bc:	e396      	b.n	8020aec <_svfprintf_r+0xa3c>
 80203be:	4633      	mov	r3, r6
 80203c0:	f01b 0f10 	tst.w	fp, #16
 80203c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80203c8:	9307      	str	r3, [sp, #28]
 80203ca:	d002      	beq.n	80203d2 <_svfprintf_r+0x322>
 80203cc:	462e      	mov	r6, r5
 80203ce:	17ed      	asrs	r5, r5, #31
 80203d0:	e7ea      	b.n	80203a8 <_svfprintf_r+0x2f8>
 80203d2:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80203d6:	d003      	beq.n	80203e0 <_svfprintf_r+0x330>
 80203d8:	b22e      	sxth	r6, r5
 80203da:	f345 35c0 	sbfx	r5, r5, #15, #1
 80203de:	e7e3      	b.n	80203a8 <_svfprintf_r+0x2f8>
 80203e0:	f41b 7f00 	tst.w	fp, #512	; 0x200
 80203e4:	d0f2      	beq.n	80203cc <_svfprintf_r+0x31c>
 80203e6:	b26e      	sxtb	r6, r5
 80203e8:	f345 15c0 	sbfx	r5, r5, #7, #1
 80203ec:	e7dc      	b.n	80203a8 <_svfprintf_r+0x2f8>
 80203ee:	3607      	adds	r6, #7
 80203f0:	f026 0307 	bic.w	r3, r6, #7
 80203f4:	ecb3 7b02 	vldmia	r3!, {d7}
 80203f8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80203fc:	9307      	str	r3, [sp, #28]
 80203fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020400:	ee09 3a10 	vmov	s18, r3
 8020404:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020406:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802040a:	ee09 3a90 	vmov	s19, r3
 802040e:	f04f 32ff 	mov.w	r2, #4294967295
 8020412:	4b3a      	ldr	r3, [pc, #232]	; (80204fc <_svfprintf_r+0x44c>)
 8020414:	ec51 0b19 	vmov	r0, r1, d9
 8020418:	f7e0 fb98 	bl	8000b4c <__aeabi_dcmpun>
 802041c:	bb10      	cbnz	r0, 8020464 <_svfprintf_r+0x3b4>
 802041e:	4b37      	ldr	r3, [pc, #220]	; (80204fc <_svfprintf_r+0x44c>)
 8020420:	ec51 0b19 	vmov	r0, r1, d9
 8020424:	f04f 32ff 	mov.w	r2, #4294967295
 8020428:	f7e0 fb72 	bl	8000b10 <__aeabi_dcmple>
 802042c:	b9d0      	cbnz	r0, 8020464 <_svfprintf_r+0x3b4>
 802042e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8020432:	2200      	movs	r2, #0
 8020434:	2300      	movs	r3, #0
 8020436:	f7e0 fb61 	bl	8000afc <__aeabi_dcmplt>
 802043a:	b110      	cbz	r0, 8020442 <_svfprintf_r+0x392>
 802043c:	232d      	movs	r3, #45	; 0x2d
 802043e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8020442:	4a2f      	ldr	r2, [pc, #188]	; (8020500 <_svfprintf_r+0x450>)
 8020444:	482f      	ldr	r0, [pc, #188]	; (8020504 <_svfprintf_r+0x454>)
 8020446:	9b06      	ldr	r3, [sp, #24]
 8020448:	2100      	movs	r1, #0
 802044a:	2b47      	cmp	r3, #71	; 0x47
 802044c:	bfd4      	ite	le
 802044e:	4691      	movle	r9, r2
 8020450:	4681      	movgt	r9, r0
 8020452:	2303      	movs	r3, #3
 8020454:	e9cd 1303 	strd	r1, r3, [sp, #12]
 8020458:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 802045c:	2600      	movs	r6, #0
 802045e:	4633      	mov	r3, r6
 8020460:	f001 b800 	b.w	8021464 <_svfprintf_r+0x13b4>
 8020464:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8020468:	4610      	mov	r0, r2
 802046a:	4619      	mov	r1, r3
 802046c:	f7e0 fb6e 	bl	8000b4c <__aeabi_dcmpun>
 8020470:	b140      	cbz	r0, 8020484 <_svfprintf_r+0x3d4>
 8020472:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020474:	4a24      	ldr	r2, [pc, #144]	; (8020508 <_svfprintf_r+0x458>)
 8020476:	4825      	ldr	r0, [pc, #148]	; (802050c <_svfprintf_r+0x45c>)
 8020478:	2b00      	cmp	r3, #0
 802047a:	bfbc      	itt	lt
 802047c:	232d      	movlt	r3, #45	; 0x2d
 802047e:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 8020482:	e7e0      	b.n	8020446 <_svfprintf_r+0x396>
 8020484:	9b06      	ldr	r3, [sp, #24]
 8020486:	f023 0320 	bic.w	r3, r3, #32
 802048a:	2b41      	cmp	r3, #65	; 0x41
 802048c:	9308      	str	r3, [sp, #32]
 802048e:	d125      	bne.n	80204dc <_svfprintf_r+0x42c>
 8020490:	2330      	movs	r3, #48	; 0x30
 8020492:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8020496:	9b06      	ldr	r3, [sp, #24]
 8020498:	2b61      	cmp	r3, #97	; 0x61
 802049a:	bf0c      	ite	eq
 802049c:	2378      	moveq	r3, #120	; 0x78
 802049e:	2358      	movne	r3, #88	; 0x58
 80204a0:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 80204a4:	9b04      	ldr	r3, [sp, #16]
 80204a6:	2b63      	cmp	r3, #99	; 0x63
 80204a8:	f04b 0b02 	orr.w	fp, fp, #2
 80204ac:	dd30      	ble.n	8020510 <_svfprintf_r+0x460>
 80204ae:	1c59      	adds	r1, r3, #1
 80204b0:	4650      	mov	r0, sl
 80204b2:	f003 fd55 	bl	8023f60 <_malloc_r>
 80204b6:	4681      	mov	r9, r0
 80204b8:	2800      	cmp	r0, #0
 80204ba:	f040 81fd 	bne.w	80208b8 <_svfprintf_r+0x808>
 80204be:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80204c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80204c6:	f8a8 300c 	strh.w	r3, [r8, #12]
 80204ca:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80204ce:	f013 0f40 	tst.w	r3, #64	; 0x40
 80204d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80204d4:	bf18      	it	ne
 80204d6:	f04f 33ff 	movne.w	r3, #4294967295
 80204da:	e60f      	b.n	80200fc <_svfprintf_r+0x4c>
 80204dc:	9b04      	ldr	r3, [sp, #16]
 80204de:	3301      	adds	r3, #1
 80204e0:	f000 81ec 	beq.w	80208bc <_svfprintf_r+0x80c>
 80204e4:	9b08      	ldr	r3, [sp, #32]
 80204e6:	2b47      	cmp	r3, #71	; 0x47
 80204e8:	f040 81eb 	bne.w	80208c2 <_svfprintf_r+0x812>
 80204ec:	9b04      	ldr	r3, [sp, #16]
 80204ee:	2b00      	cmp	r3, #0
 80204f0:	f040 81e7 	bne.w	80208c2 <_svfprintf_r+0x812>
 80204f4:	9303      	str	r3, [sp, #12]
 80204f6:	2301      	movs	r3, #1
 80204f8:	9304      	str	r3, [sp, #16]
 80204fa:	e00c      	b.n	8020516 <_svfprintf_r+0x466>
 80204fc:	7fefffff 	.word	0x7fefffff
 8020500:	08071a00 	.word	0x08071a00
 8020504:	08071a04 	.word	0x08071a04
 8020508:	08071a08 	.word	0x08071a08
 802050c:	08071a0c 	.word	0x08071a0c
 8020510:	9003      	str	r0, [sp, #12]
 8020512:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 8020516:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 802051a:	9311      	str	r3, [sp, #68]	; 0x44
 802051c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802051e:	2b00      	cmp	r3, #0
 8020520:	f280 81d1 	bge.w	80208c6 <_svfprintf_r+0x816>
 8020524:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020526:	ee08 3a10 	vmov	s16, r3
 802052a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802052c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8020530:	ee08 3a90 	vmov	s17, r3
 8020534:	232d      	movs	r3, #45	; 0x2d
 8020536:	9318      	str	r3, [sp, #96]	; 0x60
 8020538:	9b08      	ldr	r3, [sp, #32]
 802053a:	2b41      	cmp	r3, #65	; 0x41
 802053c:	f040 81e1 	bne.w	8020902 <_svfprintf_r+0x852>
 8020540:	eeb0 0a48 	vmov.f32	s0, s16
 8020544:	eef0 0a68 	vmov.f32	s1, s17
 8020548:	a81c      	add	r0, sp, #112	; 0x70
 802054a:	f004 fc2b 	bl	8024da4 <frexp>
 802054e:	2200      	movs	r2, #0
 8020550:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8020554:	ec51 0b10 	vmov	r0, r1, d0
 8020558:	f7e0 f85e 	bl	8000618 <__aeabi_dmul>
 802055c:	2200      	movs	r2, #0
 802055e:	2300      	movs	r3, #0
 8020560:	4606      	mov	r6, r0
 8020562:	460f      	mov	r7, r1
 8020564:	f7e0 fac0 	bl	8000ae8 <__aeabi_dcmpeq>
 8020568:	b108      	cbz	r0, 802056e <_svfprintf_r+0x4be>
 802056a:	2301      	movs	r3, #1
 802056c:	931c      	str	r3, [sp, #112]	; 0x70
 802056e:	4ba7      	ldr	r3, [pc, #668]	; (802080c <_svfprintf_r+0x75c>)
 8020570:	4aa7      	ldr	r2, [pc, #668]	; (8020810 <_svfprintf_r+0x760>)
 8020572:	9906      	ldr	r1, [sp, #24]
 8020574:	2961      	cmp	r1, #97	; 0x61
 8020576:	bf18      	it	ne
 8020578:	461a      	movne	r2, r3
 802057a:	9b04      	ldr	r3, [sp, #16]
 802057c:	9217      	str	r2, [sp, #92]	; 0x5c
 802057e:	3b01      	subs	r3, #1
 8020580:	9305      	str	r3, [sp, #20]
 8020582:	464d      	mov	r5, r9
 8020584:	4ba3      	ldr	r3, [pc, #652]	; (8020814 <_svfprintf_r+0x764>)
 8020586:	2200      	movs	r2, #0
 8020588:	4630      	mov	r0, r6
 802058a:	4639      	mov	r1, r7
 802058c:	f7e0 f844 	bl	8000618 <__aeabi_dmul>
 8020590:	460f      	mov	r7, r1
 8020592:	4606      	mov	r6, r0
 8020594:	f7e0 faf0 	bl	8000b78 <__aeabi_d2iz>
 8020598:	9019      	str	r0, [sp, #100]	; 0x64
 802059a:	f7df ffd3 	bl	8000544 <__aeabi_i2d>
 802059e:	4602      	mov	r2, r0
 80205a0:	460b      	mov	r3, r1
 80205a2:	4630      	mov	r0, r6
 80205a4:	4639      	mov	r1, r7
 80205a6:	f7df fe7f 	bl	80002a8 <__aeabi_dsub>
 80205aa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80205ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80205ae:	5c9b      	ldrb	r3, [r3, r2]
 80205b0:	f805 3b01 	strb.w	r3, [r5], #1
 80205b4:	9b05      	ldr	r3, [sp, #20]
 80205b6:	9309      	str	r3, [sp, #36]	; 0x24
 80205b8:	1c5a      	adds	r2, r3, #1
 80205ba:	4606      	mov	r6, r0
 80205bc:	460f      	mov	r7, r1
 80205be:	d007      	beq.n	80205d0 <_svfprintf_r+0x520>
 80205c0:	3b01      	subs	r3, #1
 80205c2:	9305      	str	r3, [sp, #20]
 80205c4:	2200      	movs	r2, #0
 80205c6:	2300      	movs	r3, #0
 80205c8:	f7e0 fa8e 	bl	8000ae8 <__aeabi_dcmpeq>
 80205cc:	2800      	cmp	r0, #0
 80205ce:	d0d9      	beq.n	8020584 <_svfprintf_r+0x4d4>
 80205d0:	4b91      	ldr	r3, [pc, #580]	; (8020818 <_svfprintf_r+0x768>)
 80205d2:	2200      	movs	r2, #0
 80205d4:	4630      	mov	r0, r6
 80205d6:	4639      	mov	r1, r7
 80205d8:	f7e0 faae 	bl	8000b38 <__aeabi_dcmpgt>
 80205dc:	b960      	cbnz	r0, 80205f8 <_svfprintf_r+0x548>
 80205de:	4b8e      	ldr	r3, [pc, #568]	; (8020818 <_svfprintf_r+0x768>)
 80205e0:	2200      	movs	r2, #0
 80205e2:	4630      	mov	r0, r6
 80205e4:	4639      	mov	r1, r7
 80205e6:	f7e0 fa7f 	bl	8000ae8 <__aeabi_dcmpeq>
 80205ea:	2800      	cmp	r0, #0
 80205ec:	f000 8184 	beq.w	80208f8 <_svfprintf_r+0x848>
 80205f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80205f2:	07db      	lsls	r3, r3, #31
 80205f4:	f140 8180 	bpl.w	80208f8 <_svfprintf_r+0x848>
 80205f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80205fa:	9520      	str	r5, [sp, #128]	; 0x80
 80205fc:	7bd9      	ldrb	r1, [r3, #15]
 80205fe:	2030      	movs	r0, #48	; 0x30
 8020600:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020602:	1e53      	subs	r3, r2, #1
 8020604:	9320      	str	r3, [sp, #128]	; 0x80
 8020606:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 802060a:	428b      	cmp	r3, r1
 802060c:	f000 8163 	beq.w	80208d6 <_svfprintf_r+0x826>
 8020610:	2b39      	cmp	r3, #57	; 0x39
 8020612:	bf0b      	itete	eq
 8020614:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 8020616:	3301      	addne	r3, #1
 8020618:	7a9b      	ldrbeq	r3, [r3, #10]
 802061a:	b2db      	uxtbne	r3, r3
 802061c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8020620:	eba5 0309 	sub.w	r3, r5, r9
 8020624:	9305      	str	r3, [sp, #20]
 8020626:	9b08      	ldr	r3, [sp, #32]
 8020628:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 802062a:	2b47      	cmp	r3, #71	; 0x47
 802062c:	f040 81b1 	bne.w	8020992 <_svfprintf_r+0x8e2>
 8020630:	1cef      	adds	r7, r5, #3
 8020632:	db03      	blt.n	802063c <_svfprintf_r+0x58c>
 8020634:	9b04      	ldr	r3, [sp, #16]
 8020636:	42ab      	cmp	r3, r5
 8020638:	f280 81d6 	bge.w	80209e8 <_svfprintf_r+0x938>
 802063c:	9b06      	ldr	r3, [sp, #24]
 802063e:	3b02      	subs	r3, #2
 8020640:	9306      	str	r3, [sp, #24]
 8020642:	9906      	ldr	r1, [sp, #24]
 8020644:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8020648:	f021 0120 	bic.w	r1, r1, #32
 802064c:	2941      	cmp	r1, #65	; 0x41
 802064e:	bf08      	it	eq
 8020650:	320f      	addeq	r2, #15
 8020652:	f105 33ff 	add.w	r3, r5, #4294967295
 8020656:	bf06      	itte	eq
 8020658:	b2d2      	uxtbeq	r2, r2
 802065a:	2101      	moveq	r1, #1
 802065c:	2100      	movne	r1, #0
 802065e:	2b00      	cmp	r3, #0
 8020660:	931c      	str	r3, [sp, #112]	; 0x70
 8020662:	bfb8      	it	lt
 8020664:	f1c5 0301 	rsblt	r3, r5, #1
 8020668:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 802066c:	bfb4      	ite	lt
 802066e:	222d      	movlt	r2, #45	; 0x2d
 8020670:	222b      	movge	r2, #43	; 0x2b
 8020672:	2b09      	cmp	r3, #9
 8020674:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 8020678:	f340 81a4 	ble.w	80209c4 <_svfprintf_r+0x914>
 802067c:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 8020680:	260a      	movs	r6, #10
 8020682:	4611      	mov	r1, r2
 8020684:	fb93 f5f6 	sdiv	r5, r3, r6
 8020688:	fb06 3015 	mls	r0, r6, r5, r3
 802068c:	3030      	adds	r0, #48	; 0x30
 802068e:	f801 0c01 	strb.w	r0, [r1, #-1]
 8020692:	4618      	mov	r0, r3
 8020694:	2863      	cmp	r0, #99	; 0x63
 8020696:	f102 32ff 	add.w	r2, r2, #4294967295
 802069a:	462b      	mov	r3, r5
 802069c:	dcf1      	bgt.n	8020682 <_svfprintf_r+0x5d2>
 802069e:	3330      	adds	r3, #48	; 0x30
 80206a0:	1e88      	subs	r0, r1, #2
 80206a2:	f802 3c01 	strb.w	r3, [r2, #-1]
 80206a6:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 80206aa:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 80206ae:	4603      	mov	r3, r0
 80206b0:	42ab      	cmp	r3, r5
 80206b2:	f0c0 8182 	bcc.w	80209ba <_svfprintf_r+0x90a>
 80206b6:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 80206ba:	1a52      	subs	r2, r2, r1
 80206bc:	42a8      	cmp	r0, r5
 80206be:	bf88      	it	hi
 80206c0:	2200      	movhi	r2, #0
 80206c2:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 80206c6:	441a      	add	r2, r3
 80206c8:	ab1e      	add	r3, sp, #120	; 0x78
 80206ca:	1ad3      	subs	r3, r2, r3
 80206cc:	9a05      	ldr	r2, [sp, #20]
 80206ce:	9315      	str	r3, [sp, #84]	; 0x54
 80206d0:	2a01      	cmp	r2, #1
 80206d2:	4413      	add	r3, r2
 80206d4:	9304      	str	r3, [sp, #16]
 80206d6:	dc02      	bgt.n	80206de <_svfprintf_r+0x62e>
 80206d8:	f01b 0f01 	tst.w	fp, #1
 80206dc:	d003      	beq.n	80206e6 <_svfprintf_r+0x636>
 80206de:	9b04      	ldr	r3, [sp, #16]
 80206e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80206e2:	4413      	add	r3, r2
 80206e4:	9304      	str	r3, [sp, #16]
 80206e6:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 80206ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80206ee:	9311      	str	r3, [sp, #68]	; 0x44
 80206f0:	2300      	movs	r3, #0
 80206f2:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80206f6:	461d      	mov	r5, r3
 80206f8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80206fa:	b113      	cbz	r3, 8020702 <_svfprintf_r+0x652>
 80206fc:	232d      	movs	r3, #45	; 0x2d
 80206fe:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8020702:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8020706:	2600      	movs	r6, #0
 8020708:	9b04      	ldr	r3, [sp, #16]
 802070a:	42b3      	cmp	r3, r6
 802070c:	bfb8      	it	lt
 802070e:	4633      	movlt	r3, r6
 8020710:	9311      	str	r3, [sp, #68]	; 0x44
 8020712:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8020716:	b113      	cbz	r3, 802071e <_svfprintf_r+0x66e>
 8020718:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802071a:	3301      	adds	r3, #1
 802071c:	9311      	str	r3, [sp, #68]	; 0x44
 802071e:	f01b 0302 	ands.w	r3, fp, #2
 8020722:	9317      	str	r3, [sp, #92]	; 0x5c
 8020724:	bf1e      	ittt	ne
 8020726:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8020728:	3302      	addne	r3, #2
 802072a:	9311      	strne	r3, [sp, #68]	; 0x44
 802072c:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 8020730:	9318      	str	r3, [sp, #96]	; 0x60
 8020732:	d11f      	bne.n	8020774 <_svfprintf_r+0x6c4>
 8020734:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8020738:	1a9f      	subs	r7, r3, r2
 802073a:	2f00      	cmp	r7, #0
 802073c:	dd1a      	ble.n	8020774 <_svfprintf_r+0x6c4>
 802073e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8020742:	4836      	ldr	r0, [pc, #216]	; (802081c <_svfprintf_r+0x76c>)
 8020744:	6020      	str	r0, [r4, #0]
 8020746:	2f10      	cmp	r7, #16
 8020748:	f103 0301 	add.w	r3, r3, #1
 802074c:	f104 0108 	add.w	r1, r4, #8
 8020750:	f300 82ed 	bgt.w	8020d2e <_svfprintf_r+0xc7e>
 8020754:	6067      	str	r7, [r4, #4]
 8020756:	2b07      	cmp	r3, #7
 8020758:	4417      	add	r7, r2
 802075a:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 802075e:	f340 82f9 	ble.w	8020d54 <_svfprintf_r+0xca4>
 8020762:	aa22      	add	r2, sp, #136	; 0x88
 8020764:	4641      	mov	r1, r8
 8020766:	4650      	mov	r0, sl
 8020768:	f004 fbba 	bl	8024ee0 <__ssprint_r>
 802076c:	2800      	cmp	r0, #0
 802076e:	f040 8621 	bne.w	80213b4 <_svfprintf_r+0x1304>
 8020772:	ac25      	add	r4, sp, #148	; 0x94
 8020774:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8020778:	b173      	cbz	r3, 8020798 <_svfprintf_r+0x6e8>
 802077a:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 802077e:	6023      	str	r3, [r4, #0]
 8020780:	2301      	movs	r3, #1
 8020782:	6063      	str	r3, [r4, #4]
 8020784:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020786:	3301      	adds	r3, #1
 8020788:	9324      	str	r3, [sp, #144]	; 0x90
 802078a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802078c:	3301      	adds	r3, #1
 802078e:	2b07      	cmp	r3, #7
 8020790:	9323      	str	r3, [sp, #140]	; 0x8c
 8020792:	f300 82e1 	bgt.w	8020d58 <_svfprintf_r+0xca8>
 8020796:	3408      	adds	r4, #8
 8020798:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802079a:	b16b      	cbz	r3, 80207b8 <_svfprintf_r+0x708>
 802079c:	ab1b      	add	r3, sp, #108	; 0x6c
 802079e:	6023      	str	r3, [r4, #0]
 80207a0:	2302      	movs	r3, #2
 80207a2:	6063      	str	r3, [r4, #4]
 80207a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80207a6:	3302      	adds	r3, #2
 80207a8:	9324      	str	r3, [sp, #144]	; 0x90
 80207aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80207ac:	3301      	adds	r3, #1
 80207ae:	2b07      	cmp	r3, #7
 80207b0:	9323      	str	r3, [sp, #140]	; 0x8c
 80207b2:	f300 82db 	bgt.w	8020d6c <_svfprintf_r+0xcbc>
 80207b6:	3408      	adds	r4, #8
 80207b8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80207ba:	2b80      	cmp	r3, #128	; 0x80
 80207bc:	d11f      	bne.n	80207fe <_svfprintf_r+0x74e>
 80207be:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 80207c2:	1a9f      	subs	r7, r3, r2
 80207c4:	2f00      	cmp	r7, #0
 80207c6:	dd1a      	ble.n	80207fe <_svfprintf_r+0x74e>
 80207c8:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80207cc:	4814      	ldr	r0, [pc, #80]	; (8020820 <_svfprintf_r+0x770>)
 80207ce:	6020      	str	r0, [r4, #0]
 80207d0:	2f10      	cmp	r7, #16
 80207d2:	f103 0301 	add.w	r3, r3, #1
 80207d6:	f104 0108 	add.w	r1, r4, #8
 80207da:	f300 82d1 	bgt.w	8020d80 <_svfprintf_r+0xcd0>
 80207de:	6067      	str	r7, [r4, #4]
 80207e0:	2b07      	cmp	r3, #7
 80207e2:	4417      	add	r7, r2
 80207e4:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 80207e8:	f340 82dd 	ble.w	8020da6 <_svfprintf_r+0xcf6>
 80207ec:	aa22      	add	r2, sp, #136	; 0x88
 80207ee:	4641      	mov	r1, r8
 80207f0:	4650      	mov	r0, sl
 80207f2:	f004 fb75 	bl	8024ee0 <__ssprint_r>
 80207f6:	2800      	cmp	r0, #0
 80207f8:	f040 85dc 	bne.w	80213b4 <_svfprintf_r+0x1304>
 80207fc:	ac25      	add	r4, sp, #148	; 0x94
 80207fe:	9b04      	ldr	r3, [sp, #16]
 8020800:	1af6      	subs	r6, r6, r3
 8020802:	2e00      	cmp	r6, #0
 8020804:	dd28      	ble.n	8020858 <_svfprintf_r+0x7a8>
 8020806:	4f06      	ldr	r7, [pc, #24]	; (8020820 <_svfprintf_r+0x770>)
 8020808:	e00c      	b.n	8020824 <_svfprintf_r+0x774>
 802080a:	bf00      	nop
 802080c:	08071a21 	.word	0x08071a21
 8020810:	08071a10 	.word	0x08071a10
 8020814:	40300000 	.word	0x40300000
 8020818:	3fe00000 	.word	0x3fe00000
 802081c:	08071a34 	.word	0x08071a34
 8020820:	08071a44 	.word	0x08071a44
 8020824:	6027      	str	r7, [r4, #0]
 8020826:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 802082a:	2e10      	cmp	r6, #16
 802082c:	f103 0301 	add.w	r3, r3, #1
 8020830:	f104 0108 	add.w	r1, r4, #8
 8020834:	f300 82b9 	bgt.w	8020daa <_svfprintf_r+0xcfa>
 8020838:	6066      	str	r6, [r4, #4]
 802083a:	2b07      	cmp	r3, #7
 802083c:	4416      	add	r6, r2
 802083e:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8020842:	f340 82c5 	ble.w	8020dd0 <_svfprintf_r+0xd20>
 8020846:	aa22      	add	r2, sp, #136	; 0x88
 8020848:	4641      	mov	r1, r8
 802084a:	4650      	mov	r0, sl
 802084c:	f004 fb48 	bl	8024ee0 <__ssprint_r>
 8020850:	2800      	cmp	r0, #0
 8020852:	f040 85af 	bne.w	80213b4 <_svfprintf_r+0x1304>
 8020856:	ac25      	add	r4, sp, #148	; 0x94
 8020858:	f41b 7f80 	tst.w	fp, #256	; 0x100
 802085c:	9e24      	ldr	r6, [sp, #144]	; 0x90
 802085e:	f040 82bd 	bne.w	8020ddc <_svfprintf_r+0xd2c>
 8020862:	9b04      	ldr	r3, [sp, #16]
 8020864:	f8c4 9000 	str.w	r9, [r4]
 8020868:	441e      	add	r6, r3
 802086a:	6063      	str	r3, [r4, #4]
 802086c:	9624      	str	r6, [sp, #144]	; 0x90
 802086e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020870:	3301      	adds	r3, #1
 8020872:	2b07      	cmp	r3, #7
 8020874:	9323      	str	r3, [sp, #140]	; 0x8c
 8020876:	f300 82f6 	bgt.w	8020e66 <_svfprintf_r+0xdb6>
 802087a:	3408      	adds	r4, #8
 802087c:	f01b 0f04 	tst.w	fp, #4
 8020880:	f040 857a 	bne.w	8021378 <_svfprintf_r+0x12c8>
 8020884:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
 8020888:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802088a:	428a      	cmp	r2, r1
 802088c:	bfac      	ite	ge
 802088e:	189b      	addge	r3, r3, r2
 8020890:	185b      	addlt	r3, r3, r1
 8020892:	930c      	str	r3, [sp, #48]	; 0x30
 8020894:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020896:	b13b      	cbz	r3, 80208a8 <_svfprintf_r+0x7f8>
 8020898:	aa22      	add	r2, sp, #136	; 0x88
 802089a:	4641      	mov	r1, r8
 802089c:	4650      	mov	r0, sl
 802089e:	f004 fb1f 	bl	8024ee0 <__ssprint_r>
 80208a2:	2800      	cmp	r0, #0
 80208a4:	f040 8586 	bne.w	80213b4 <_svfprintf_r+0x1304>
 80208a8:	2300      	movs	r3, #0
 80208aa:	9323      	str	r3, [sp, #140]	; 0x8c
 80208ac:	9b03      	ldr	r3, [sp, #12]
 80208ae:	2b00      	cmp	r3, #0
 80208b0:	f040 859c 	bne.w	80213ec <_svfprintf_r+0x133c>
 80208b4:	ac25      	add	r4, sp, #148	; 0x94
 80208b6:	e0ec      	b.n	8020a92 <_svfprintf_r+0x9e2>
 80208b8:	9003      	str	r0, [sp, #12]
 80208ba:	e62c      	b.n	8020516 <_svfprintf_r+0x466>
 80208bc:	9003      	str	r0, [sp, #12]
 80208be:	2306      	movs	r3, #6
 80208c0:	e61a      	b.n	80204f8 <_svfprintf_r+0x448>
 80208c2:	9003      	str	r0, [sp, #12]
 80208c4:	e627      	b.n	8020516 <_svfprintf_r+0x466>
 80208c6:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 80208ca:	2300      	movs	r3, #0
 80208cc:	eeb0 8a47 	vmov.f32	s16, s14
 80208d0:	eef0 8a67 	vmov.f32	s17, s15
 80208d4:	e62f      	b.n	8020536 <_svfprintf_r+0x486>
 80208d6:	f802 0c01 	strb.w	r0, [r2, #-1]
 80208da:	e691      	b.n	8020600 <_svfprintf_r+0x550>
 80208dc:	f803 0b01 	strb.w	r0, [r3], #1
 80208e0:	1aca      	subs	r2, r1, r3
 80208e2:	2a00      	cmp	r2, #0
 80208e4:	dafa      	bge.n	80208dc <_svfprintf_r+0x82c>
 80208e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80208e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80208ea:	3201      	adds	r2, #1
 80208ec:	f103 0301 	add.w	r3, r3, #1
 80208f0:	bfb8      	it	lt
 80208f2:	2300      	movlt	r3, #0
 80208f4:	441d      	add	r5, r3
 80208f6:	e693      	b.n	8020620 <_svfprintf_r+0x570>
 80208f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80208fa:	462b      	mov	r3, r5
 80208fc:	18a9      	adds	r1, r5, r2
 80208fe:	2030      	movs	r0, #48	; 0x30
 8020900:	e7ee      	b.n	80208e0 <_svfprintf_r+0x830>
 8020902:	9b08      	ldr	r3, [sp, #32]
 8020904:	2b46      	cmp	r3, #70	; 0x46
 8020906:	d005      	beq.n	8020914 <_svfprintf_r+0x864>
 8020908:	2b45      	cmp	r3, #69	; 0x45
 802090a:	d11b      	bne.n	8020944 <_svfprintf_r+0x894>
 802090c:	9b04      	ldr	r3, [sp, #16]
 802090e:	1c5d      	adds	r5, r3, #1
 8020910:	2102      	movs	r1, #2
 8020912:	e001      	b.n	8020918 <_svfprintf_r+0x868>
 8020914:	9d04      	ldr	r5, [sp, #16]
 8020916:	2103      	movs	r1, #3
 8020918:	ab20      	add	r3, sp, #128	; 0x80
 802091a:	9301      	str	r3, [sp, #4]
 802091c:	ab1d      	add	r3, sp, #116	; 0x74
 802091e:	9300      	str	r3, [sp, #0]
 8020920:	462a      	mov	r2, r5
 8020922:	ab1c      	add	r3, sp, #112	; 0x70
 8020924:	4650      	mov	r0, sl
 8020926:	eeb0 0a48 	vmov.f32	s0, s16
 802092a:	eef0 0a68 	vmov.f32	s1, s17
 802092e:	f002 f913 	bl	8022b58 <_dtoa_r>
 8020932:	9b08      	ldr	r3, [sp, #32]
 8020934:	2b47      	cmp	r3, #71	; 0x47
 8020936:	4681      	mov	r9, r0
 8020938:	d106      	bne.n	8020948 <_svfprintf_r+0x898>
 802093a:	f01b 0f01 	tst.w	fp, #1
 802093e:	d103      	bne.n	8020948 <_svfprintf_r+0x898>
 8020940:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8020942:	e66d      	b.n	8020620 <_svfprintf_r+0x570>
 8020944:	9d04      	ldr	r5, [sp, #16]
 8020946:	e7e3      	b.n	8020910 <_svfprintf_r+0x860>
 8020948:	9b08      	ldr	r3, [sp, #32]
 802094a:	2b46      	cmp	r3, #70	; 0x46
 802094c:	eb09 0605 	add.w	r6, r9, r5
 8020950:	d10f      	bne.n	8020972 <_svfprintf_r+0x8c2>
 8020952:	f899 3000 	ldrb.w	r3, [r9]
 8020956:	2b30      	cmp	r3, #48	; 0x30
 8020958:	d109      	bne.n	802096e <_svfprintf_r+0x8be>
 802095a:	ec51 0b18 	vmov	r0, r1, d8
 802095e:	2200      	movs	r2, #0
 8020960:	2300      	movs	r3, #0
 8020962:	f7e0 f8c1 	bl	8000ae8 <__aeabi_dcmpeq>
 8020966:	b910      	cbnz	r0, 802096e <_svfprintf_r+0x8be>
 8020968:	f1c5 0501 	rsb	r5, r5, #1
 802096c:	951c      	str	r5, [sp, #112]	; 0x70
 802096e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020970:	441e      	add	r6, r3
 8020972:	ec51 0b18 	vmov	r0, r1, d8
 8020976:	2200      	movs	r2, #0
 8020978:	2300      	movs	r3, #0
 802097a:	f7e0 f8b5 	bl	8000ae8 <__aeabi_dcmpeq>
 802097e:	b100      	cbz	r0, 8020982 <_svfprintf_r+0x8d2>
 8020980:	9620      	str	r6, [sp, #128]	; 0x80
 8020982:	2230      	movs	r2, #48	; 0x30
 8020984:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020986:	429e      	cmp	r6, r3
 8020988:	d9da      	bls.n	8020940 <_svfprintf_r+0x890>
 802098a:	1c59      	adds	r1, r3, #1
 802098c:	9120      	str	r1, [sp, #128]	; 0x80
 802098e:	701a      	strb	r2, [r3, #0]
 8020990:	e7f8      	b.n	8020984 <_svfprintf_r+0x8d4>
 8020992:	9b08      	ldr	r3, [sp, #32]
 8020994:	2b46      	cmp	r3, #70	; 0x46
 8020996:	f47f ae54 	bne.w	8020642 <_svfprintf_r+0x592>
 802099a:	9a04      	ldr	r2, [sp, #16]
 802099c:	f00b 0301 	and.w	r3, fp, #1
 80209a0:	2d00      	cmp	r5, #0
 80209a2:	ea43 0302 	orr.w	r3, r3, r2
 80209a6:	dd1a      	ble.n	80209de <_svfprintf_r+0x92e>
 80209a8:	2b00      	cmp	r3, #0
 80209aa:	d034      	beq.n	8020a16 <_svfprintf_r+0x966>
 80209ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80209ae:	18eb      	adds	r3, r5, r3
 80209b0:	441a      	add	r2, r3
 80209b2:	9204      	str	r2, [sp, #16]
 80209b4:	2366      	movs	r3, #102	; 0x66
 80209b6:	9306      	str	r3, [sp, #24]
 80209b8:	e033      	b.n	8020a22 <_svfprintf_r+0x972>
 80209ba:	f813 6b01 	ldrb.w	r6, [r3], #1
 80209be:	f802 6b01 	strb.w	r6, [r2], #1
 80209c2:	e675      	b.n	80206b0 <_svfprintf_r+0x600>
 80209c4:	b941      	cbnz	r1, 80209d8 <_svfprintf_r+0x928>
 80209c6:	2230      	movs	r2, #48	; 0x30
 80209c8:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 80209cc:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 80209d0:	3330      	adds	r3, #48	; 0x30
 80209d2:	f802 3b01 	strb.w	r3, [r2], #1
 80209d6:	e677      	b.n	80206c8 <_svfprintf_r+0x618>
 80209d8:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 80209dc:	e7f8      	b.n	80209d0 <_svfprintf_r+0x920>
 80209de:	b1e3      	cbz	r3, 8020a1a <_svfprintf_r+0x96a>
 80209e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80209e2:	9a04      	ldr	r2, [sp, #16]
 80209e4:	3301      	adds	r3, #1
 80209e6:	e7e3      	b.n	80209b0 <_svfprintf_r+0x900>
 80209e8:	9b05      	ldr	r3, [sp, #20]
 80209ea:	429d      	cmp	r5, r3
 80209ec:	db07      	blt.n	80209fe <_svfprintf_r+0x94e>
 80209ee:	f01b 0f01 	tst.w	fp, #1
 80209f2:	d02d      	beq.n	8020a50 <_svfprintf_r+0x9a0>
 80209f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80209f6:	18eb      	adds	r3, r5, r3
 80209f8:	9304      	str	r3, [sp, #16]
 80209fa:	2367      	movs	r3, #103	; 0x67
 80209fc:	e7db      	b.n	80209b6 <_svfprintf_r+0x906>
 80209fe:	9b05      	ldr	r3, [sp, #20]
 8020a00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020a02:	2d00      	cmp	r5, #0
 8020a04:	4413      	add	r3, r2
 8020a06:	9304      	str	r3, [sp, #16]
 8020a08:	dcf7      	bgt.n	80209fa <_svfprintf_r+0x94a>
 8020a0a:	9a04      	ldr	r2, [sp, #16]
 8020a0c:	f1c5 0301 	rsb	r3, r5, #1
 8020a10:	441a      	add	r2, r3
 8020a12:	9204      	str	r2, [sp, #16]
 8020a14:	e7f1      	b.n	80209fa <_svfprintf_r+0x94a>
 8020a16:	9504      	str	r5, [sp, #16]
 8020a18:	e7cc      	b.n	80209b4 <_svfprintf_r+0x904>
 8020a1a:	2366      	movs	r3, #102	; 0x66
 8020a1c:	9306      	str	r3, [sp, #24]
 8020a1e:	2301      	movs	r3, #1
 8020a20:	9304      	str	r3, [sp, #16]
 8020a22:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 8020a26:	9309      	str	r3, [sp, #36]	; 0x24
 8020a28:	d025      	beq.n	8020a76 <_svfprintf_r+0x9c6>
 8020a2a:	2300      	movs	r3, #0
 8020a2c:	2d00      	cmp	r5, #0
 8020a2e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8020a32:	f77f ae61 	ble.w	80206f8 <_svfprintf_r+0x648>
 8020a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020a38:	781b      	ldrb	r3, [r3, #0]
 8020a3a:	2bff      	cmp	r3, #255	; 0xff
 8020a3c:	d10a      	bne.n	8020a54 <_svfprintf_r+0x9a4>
 8020a3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8020a42:	9912      	ldr	r1, [sp, #72]	; 0x48
 8020a44:	4413      	add	r3, r2
 8020a46:	9a04      	ldr	r2, [sp, #16]
 8020a48:	fb01 2303 	mla	r3, r1, r3, r2
 8020a4c:	9304      	str	r3, [sp, #16]
 8020a4e:	e653      	b.n	80206f8 <_svfprintf_r+0x648>
 8020a50:	9504      	str	r5, [sp, #16]
 8020a52:	e7d2      	b.n	80209fa <_svfprintf_r+0x94a>
 8020a54:	42ab      	cmp	r3, r5
 8020a56:	daf2      	bge.n	8020a3e <_svfprintf_r+0x98e>
 8020a58:	1aed      	subs	r5, r5, r3
 8020a5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020a5c:	785b      	ldrb	r3, [r3, #1]
 8020a5e:	b133      	cbz	r3, 8020a6e <_svfprintf_r+0x9be>
 8020a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020a62:	3301      	adds	r3, #1
 8020a64:	9309      	str	r3, [sp, #36]	; 0x24
 8020a66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020a68:	3301      	adds	r3, #1
 8020a6a:	930a      	str	r3, [sp, #40]	; 0x28
 8020a6c:	e7e3      	b.n	8020a36 <_svfprintf_r+0x986>
 8020a6e:	9b08      	ldr	r3, [sp, #32]
 8020a70:	3301      	adds	r3, #1
 8020a72:	9308      	str	r3, [sp, #32]
 8020a74:	e7df      	b.n	8020a36 <_svfprintf_r+0x986>
 8020a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020a78:	9308      	str	r3, [sp, #32]
 8020a7a:	e63d      	b.n	80206f8 <_svfprintf_r+0x648>
 8020a7c:	1d33      	adds	r3, r6, #4
 8020a7e:	f01b 0f20 	tst.w	fp, #32
 8020a82:	9307      	str	r3, [sp, #28]
 8020a84:	d00a      	beq.n	8020a9c <_svfprintf_r+0x9ec>
 8020a86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020a88:	6833      	ldr	r3, [r6, #0]
 8020a8a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020a8c:	17d2      	asrs	r2, r2, #31
 8020a8e:	e9c3 1200 	strd	r1, r2, [r3]
 8020a92:	9e07      	ldr	r6, [sp, #28]
 8020a94:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8020a98:	f7ff bb4a 	b.w	8020130 <_svfprintf_r+0x80>
 8020a9c:	f01b 0f10 	tst.w	fp, #16
 8020aa0:	d003      	beq.n	8020aaa <_svfprintf_r+0x9fa>
 8020aa2:	6833      	ldr	r3, [r6, #0]
 8020aa4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020aa6:	601a      	str	r2, [r3, #0]
 8020aa8:	e7f3      	b.n	8020a92 <_svfprintf_r+0x9e2>
 8020aaa:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8020aae:	d003      	beq.n	8020ab8 <_svfprintf_r+0xa08>
 8020ab0:	6833      	ldr	r3, [r6, #0]
 8020ab2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020ab4:	801a      	strh	r2, [r3, #0]
 8020ab6:	e7ec      	b.n	8020a92 <_svfprintf_r+0x9e2>
 8020ab8:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8020abc:	d0f1      	beq.n	8020aa2 <_svfprintf_r+0x9f2>
 8020abe:	6833      	ldr	r3, [r6, #0]
 8020ac0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020ac2:	701a      	strb	r2, [r3, #0]
 8020ac4:	e7e5      	b.n	8020a92 <_svfprintf_r+0x9e2>
 8020ac6:	f04b 0b10 	orr.w	fp, fp, #16
 8020aca:	f01b 0320 	ands.w	r3, fp, #32
 8020ace:	d01f      	beq.n	8020b10 <_svfprintf_r+0xa60>
 8020ad0:	1df3      	adds	r3, r6, #7
 8020ad2:	f023 0307 	bic.w	r3, r3, #7
 8020ad6:	461a      	mov	r2, r3
 8020ad8:	685d      	ldr	r5, [r3, #4]
 8020ada:	f852 6b08 	ldr.w	r6, [r2], #8
 8020ade:	9207      	str	r2, [sp, #28]
 8020ae0:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8020ae4:	2300      	movs	r3, #0
 8020ae6:	2200      	movs	r2, #0
 8020ae8:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 8020aec:	9a04      	ldr	r2, [sp, #16]
 8020aee:	3201      	adds	r2, #1
 8020af0:	f000 848d 	beq.w	802140e <_svfprintf_r+0x135e>
 8020af4:	ea56 0205 	orrs.w	r2, r6, r5
 8020af8:	f02b 0780 	bic.w	r7, fp, #128	; 0x80
 8020afc:	f040 848c 	bne.w	8021418 <_svfprintf_r+0x1368>
 8020b00:	9a04      	ldr	r2, [sp, #16]
 8020b02:	2a00      	cmp	r2, #0
 8020b04:	f000 80f9 	beq.w	8020cfa <_svfprintf_r+0xc4a>
 8020b08:	2b01      	cmp	r3, #1
 8020b0a:	f040 8488 	bne.w	802141e <_svfprintf_r+0x136e>
 8020b0e:	e09f      	b.n	8020c50 <_svfprintf_r+0xba0>
 8020b10:	4632      	mov	r2, r6
 8020b12:	f01b 0510 	ands.w	r5, fp, #16
 8020b16:	f852 6b04 	ldr.w	r6, [r2], #4
 8020b1a:	9207      	str	r2, [sp, #28]
 8020b1c:	d001      	beq.n	8020b22 <_svfprintf_r+0xa72>
 8020b1e:	461d      	mov	r5, r3
 8020b20:	e7de      	b.n	8020ae0 <_svfprintf_r+0xa30>
 8020b22:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8020b26:	d001      	beq.n	8020b2c <_svfprintf_r+0xa7c>
 8020b28:	b2b6      	uxth	r6, r6
 8020b2a:	e7d9      	b.n	8020ae0 <_svfprintf_r+0xa30>
 8020b2c:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 8020b30:	d0d6      	beq.n	8020ae0 <_svfprintf_r+0xa30>
 8020b32:	b2f6      	uxtb	r6, r6
 8020b34:	e7f3      	b.n	8020b1e <_svfprintf_r+0xa6e>
 8020b36:	4633      	mov	r3, r6
 8020b38:	2278      	movs	r2, #120	; 0x78
 8020b3a:	f853 6b04 	ldr.w	r6, [r3], #4
 8020b3e:	9307      	str	r3, [sp, #28]
 8020b40:	2330      	movs	r3, #48	; 0x30
 8020b42:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8020b46:	4ba3      	ldr	r3, [pc, #652]	; (8020dd4 <_svfprintf_r+0xd24>)
 8020b48:	9316      	str	r3, [sp, #88]	; 0x58
 8020b4a:	2500      	movs	r5, #0
 8020b4c:	f04b 0b02 	orr.w	fp, fp, #2
 8020b50:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8020b54:	2302      	movs	r3, #2
 8020b56:	9206      	str	r2, [sp, #24]
 8020b58:	e7c5      	b.n	8020ae6 <_svfprintf_r+0xa36>
 8020b5a:	4633      	mov	r3, r6
 8020b5c:	2500      	movs	r5, #0
 8020b5e:	f853 9b04 	ldr.w	r9, [r3], #4
 8020b62:	9307      	str	r3, [sp, #28]
 8020b64:	9b04      	ldr	r3, [sp, #16]
 8020b66:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 8020b6a:	1c58      	adds	r0, r3, #1
 8020b6c:	d010      	beq.n	8020b90 <_svfprintf_r+0xae0>
 8020b6e:	461a      	mov	r2, r3
 8020b70:	4629      	mov	r1, r5
 8020b72:	4648      	mov	r0, r9
 8020b74:	f7df fb44 	bl	8000200 <memchr>
 8020b78:	9003      	str	r0, [sp, #12]
 8020b7a:	2800      	cmp	r0, #0
 8020b7c:	f000 80d4 	beq.w	8020d28 <_svfprintf_r+0xc78>
 8020b80:	eba0 0309 	sub.w	r3, r0, r9
 8020b84:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8020b88:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8020b8c:	462e      	mov	r6, r5
 8020b8e:	e5bb      	b.n	8020708 <_svfprintf_r+0x658>
 8020b90:	4648      	mov	r0, r9
 8020b92:	f7df fb2d 	bl	80001f0 <strlen>
 8020b96:	e9cd 5003 	strd	r5, r0, [sp, #12]
 8020b9a:	e45f      	b.n	802045c <_svfprintf_r+0x3ac>
 8020b9c:	f04b 0b10 	orr.w	fp, fp, #16
 8020ba0:	f01b 0320 	ands.w	r3, fp, #32
 8020ba4:	d009      	beq.n	8020bba <_svfprintf_r+0xb0a>
 8020ba6:	1df3      	adds	r3, r6, #7
 8020ba8:	f023 0307 	bic.w	r3, r3, #7
 8020bac:	461a      	mov	r2, r3
 8020bae:	685d      	ldr	r5, [r3, #4]
 8020bb0:	f852 6b08 	ldr.w	r6, [r2], #8
 8020bb4:	9207      	str	r2, [sp, #28]
 8020bb6:	2301      	movs	r3, #1
 8020bb8:	e795      	b.n	8020ae6 <_svfprintf_r+0xa36>
 8020bba:	4632      	mov	r2, r6
 8020bbc:	f01b 0510 	ands.w	r5, fp, #16
 8020bc0:	f852 6b04 	ldr.w	r6, [r2], #4
 8020bc4:	9207      	str	r2, [sp, #28]
 8020bc6:	d001      	beq.n	8020bcc <_svfprintf_r+0xb1c>
 8020bc8:	461d      	mov	r5, r3
 8020bca:	e7f4      	b.n	8020bb6 <_svfprintf_r+0xb06>
 8020bcc:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8020bd0:	d001      	beq.n	8020bd6 <_svfprintf_r+0xb26>
 8020bd2:	b2b6      	uxth	r6, r6
 8020bd4:	e7ef      	b.n	8020bb6 <_svfprintf_r+0xb06>
 8020bd6:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 8020bda:	d0ec      	beq.n	8020bb6 <_svfprintf_r+0xb06>
 8020bdc:	b2f6      	uxtb	r6, r6
 8020bde:	e7f3      	b.n	8020bc8 <_svfprintf_r+0xb18>
 8020be0:	4b7d      	ldr	r3, [pc, #500]	; (8020dd8 <_svfprintf_r+0xd28>)
 8020be2:	9316      	str	r3, [sp, #88]	; 0x58
 8020be4:	f01b 0320 	ands.w	r3, fp, #32
 8020be8:	d01b      	beq.n	8020c22 <_svfprintf_r+0xb72>
 8020bea:	1df3      	adds	r3, r6, #7
 8020bec:	f023 0307 	bic.w	r3, r3, #7
 8020bf0:	461a      	mov	r2, r3
 8020bf2:	685d      	ldr	r5, [r3, #4]
 8020bf4:	f852 6b08 	ldr.w	r6, [r2], #8
 8020bf8:	9207      	str	r2, [sp, #28]
 8020bfa:	f01b 0f01 	tst.w	fp, #1
 8020bfe:	d00a      	beq.n	8020c16 <_svfprintf_r+0xb66>
 8020c00:	ea56 0305 	orrs.w	r3, r6, r5
 8020c04:	d007      	beq.n	8020c16 <_svfprintf_r+0xb66>
 8020c06:	2330      	movs	r3, #48	; 0x30
 8020c08:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8020c0c:	9b06      	ldr	r3, [sp, #24]
 8020c0e:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8020c12:	f04b 0b02 	orr.w	fp, fp, #2
 8020c16:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8020c1a:	2302      	movs	r3, #2
 8020c1c:	e763      	b.n	8020ae6 <_svfprintf_r+0xa36>
 8020c1e:	4b6d      	ldr	r3, [pc, #436]	; (8020dd4 <_svfprintf_r+0xd24>)
 8020c20:	e7df      	b.n	8020be2 <_svfprintf_r+0xb32>
 8020c22:	4632      	mov	r2, r6
 8020c24:	f01b 0510 	ands.w	r5, fp, #16
 8020c28:	f852 6b04 	ldr.w	r6, [r2], #4
 8020c2c:	9207      	str	r2, [sp, #28]
 8020c2e:	d001      	beq.n	8020c34 <_svfprintf_r+0xb84>
 8020c30:	461d      	mov	r5, r3
 8020c32:	e7e2      	b.n	8020bfa <_svfprintf_r+0xb4a>
 8020c34:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8020c38:	d001      	beq.n	8020c3e <_svfprintf_r+0xb8e>
 8020c3a:	b2b6      	uxth	r6, r6
 8020c3c:	e7dd      	b.n	8020bfa <_svfprintf_r+0xb4a>
 8020c3e:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 8020c42:	d0da      	beq.n	8020bfa <_svfprintf_r+0xb4a>
 8020c44:	b2f6      	uxtb	r6, r6
 8020c46:	e7f3      	b.n	8020c30 <_svfprintf_r+0xb80>
 8020c48:	2e0a      	cmp	r6, #10
 8020c4a:	f175 0300 	sbcs.w	r3, r5, #0
 8020c4e:	d205      	bcs.n	8020c5c <_svfprintf_r+0xbac>
 8020c50:	3630      	adds	r6, #48	; 0x30
 8020c52:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 8020c56:	f20d 1937 	addw	r9, sp, #311	; 0x137
 8020c5a:	e3fb      	b.n	8021454 <_svfprintf_r+0x13a4>
 8020c5c:	2300      	movs	r3, #0
 8020c5e:	9305      	str	r3, [sp, #20]
 8020c60:	f407 6380 	and.w	r3, r7, #1024	; 0x400
 8020c64:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 8020c68:	9303      	str	r3, [sp, #12]
 8020c6a:	220a      	movs	r2, #10
 8020c6c:	2300      	movs	r3, #0
 8020c6e:	4630      	mov	r0, r6
 8020c70:	4629      	mov	r1, r5
 8020c72:	f7df fff9 	bl	8000c68 <__aeabi_uldivmod>
 8020c76:	9b05      	ldr	r3, [sp, #20]
 8020c78:	3301      	adds	r3, #1
 8020c7a:	9305      	str	r3, [sp, #20]
 8020c7c:	9b03      	ldr	r3, [sp, #12]
 8020c7e:	3230      	adds	r2, #48	; 0x30
 8020c80:	f10b 39ff 	add.w	r9, fp, #4294967295
 8020c84:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8020c88:	b1d3      	cbz	r3, 8020cc0 <_svfprintf_r+0xc10>
 8020c8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020c8c:	9a05      	ldr	r2, [sp, #20]
 8020c8e:	781b      	ldrb	r3, [r3, #0]
 8020c90:	429a      	cmp	r2, r3
 8020c92:	d115      	bne.n	8020cc0 <_svfprintf_r+0xc10>
 8020c94:	2aff      	cmp	r2, #255	; 0xff
 8020c96:	d013      	beq.n	8020cc0 <_svfprintf_r+0xc10>
 8020c98:	2e0a      	cmp	r6, #10
 8020c9a:	f175 0300 	sbcs.w	r3, r5, #0
 8020c9e:	d30f      	bcc.n	8020cc0 <_svfprintf_r+0xc10>
 8020ca0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020ca2:	9914      	ldr	r1, [sp, #80]	; 0x50
 8020ca4:	eba9 0903 	sub.w	r9, r9, r3
 8020ca8:	461a      	mov	r2, r3
 8020caa:	4648      	mov	r0, r9
 8020cac:	f004 f905 	bl	8024eba <strncpy>
 8020cb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020cb2:	785b      	ldrb	r3, [r3, #1]
 8020cb4:	b11b      	cbz	r3, 8020cbe <_svfprintf_r+0xc0e>
 8020cb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020cb8:	3301      	adds	r3, #1
 8020cba:	930a      	str	r3, [sp, #40]	; 0x28
 8020cbc:	2300      	movs	r3, #0
 8020cbe:	9305      	str	r3, [sp, #20]
 8020cc0:	2300      	movs	r3, #0
 8020cc2:	220a      	movs	r2, #10
 8020cc4:	4630      	mov	r0, r6
 8020cc6:	4629      	mov	r1, r5
 8020cc8:	f7df ffce 	bl	8000c68 <__aeabi_uldivmod>
 8020ccc:	2e0a      	cmp	r6, #10
 8020cce:	f175 0300 	sbcs.w	r3, r5, #0
 8020cd2:	f0c0 83bf 	bcc.w	8021454 <_svfprintf_r+0x13a4>
 8020cd6:	4606      	mov	r6, r0
 8020cd8:	460d      	mov	r5, r1
 8020cda:	46cb      	mov	fp, r9
 8020cdc:	e7c5      	b.n	8020c6a <_svfprintf_r+0xbba>
 8020cde:	f006 030f 	and.w	r3, r6, #15
 8020ce2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8020ce4:	0936      	lsrs	r6, r6, #4
 8020ce6:	5cd3      	ldrb	r3, [r2, r3]
 8020ce8:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8020cec:	ea46 7605 	orr.w	r6, r6, r5, lsl #28
 8020cf0:	092d      	lsrs	r5, r5, #4
 8020cf2:	ea56 0305 	orrs.w	r3, r6, r5
 8020cf6:	d1f2      	bne.n	8020cde <_svfprintf_r+0xc2e>
 8020cf8:	e3ac      	b.n	8021454 <_svfprintf_r+0x13a4>
 8020cfa:	b933      	cbnz	r3, 8020d0a <_svfprintf_r+0xc5a>
 8020cfc:	f01b 0f01 	tst.w	fp, #1
 8020d00:	d003      	beq.n	8020d0a <_svfprintf_r+0xc5a>
 8020d02:	2330      	movs	r3, #48	; 0x30
 8020d04:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 8020d08:	e7a5      	b.n	8020c56 <_svfprintf_r+0xba6>
 8020d0a:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 8020d0e:	e3a1      	b.n	8021454 <_svfprintf_r+0x13a4>
 8020d10:	9b06      	ldr	r3, [sp, #24]
 8020d12:	2b00      	cmp	r3, #0
 8020d14:	f000 8370 	beq.w	80213f8 <_svfprintf_r+0x1348>
 8020d18:	2000      	movs	r0, #0
 8020d1a:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8020d1e:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8020d22:	9607      	str	r6, [sp, #28]
 8020d24:	f7ff bb29 	b.w	802037a <_svfprintf_r+0x2ca>
 8020d28:	9e03      	ldr	r6, [sp, #12]
 8020d2a:	f7ff bb98 	b.w	802045e <_svfprintf_r+0x3ae>
 8020d2e:	2010      	movs	r0, #16
 8020d30:	4402      	add	r2, r0
 8020d32:	2b07      	cmp	r3, #7
 8020d34:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8020d38:	6060      	str	r0, [r4, #4]
 8020d3a:	dd08      	ble.n	8020d4e <_svfprintf_r+0xc9e>
 8020d3c:	aa22      	add	r2, sp, #136	; 0x88
 8020d3e:	4641      	mov	r1, r8
 8020d40:	4650      	mov	r0, sl
 8020d42:	f004 f8cd 	bl	8024ee0 <__ssprint_r>
 8020d46:	2800      	cmp	r0, #0
 8020d48:	f040 8334 	bne.w	80213b4 <_svfprintf_r+0x1304>
 8020d4c:	a925      	add	r1, sp, #148	; 0x94
 8020d4e:	3f10      	subs	r7, #16
 8020d50:	460c      	mov	r4, r1
 8020d52:	e4f4      	b.n	802073e <_svfprintf_r+0x68e>
 8020d54:	460c      	mov	r4, r1
 8020d56:	e50d      	b.n	8020774 <_svfprintf_r+0x6c4>
 8020d58:	aa22      	add	r2, sp, #136	; 0x88
 8020d5a:	4641      	mov	r1, r8
 8020d5c:	4650      	mov	r0, sl
 8020d5e:	f004 f8bf 	bl	8024ee0 <__ssprint_r>
 8020d62:	2800      	cmp	r0, #0
 8020d64:	f040 8326 	bne.w	80213b4 <_svfprintf_r+0x1304>
 8020d68:	ac25      	add	r4, sp, #148	; 0x94
 8020d6a:	e515      	b.n	8020798 <_svfprintf_r+0x6e8>
 8020d6c:	aa22      	add	r2, sp, #136	; 0x88
 8020d6e:	4641      	mov	r1, r8
 8020d70:	4650      	mov	r0, sl
 8020d72:	f004 f8b5 	bl	8024ee0 <__ssprint_r>
 8020d76:	2800      	cmp	r0, #0
 8020d78:	f040 831c 	bne.w	80213b4 <_svfprintf_r+0x1304>
 8020d7c:	ac25      	add	r4, sp, #148	; 0x94
 8020d7e:	e51b      	b.n	80207b8 <_svfprintf_r+0x708>
 8020d80:	2010      	movs	r0, #16
 8020d82:	4402      	add	r2, r0
 8020d84:	2b07      	cmp	r3, #7
 8020d86:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8020d8a:	6060      	str	r0, [r4, #4]
 8020d8c:	dd08      	ble.n	8020da0 <_svfprintf_r+0xcf0>
 8020d8e:	aa22      	add	r2, sp, #136	; 0x88
 8020d90:	4641      	mov	r1, r8
 8020d92:	4650      	mov	r0, sl
 8020d94:	f004 f8a4 	bl	8024ee0 <__ssprint_r>
 8020d98:	2800      	cmp	r0, #0
 8020d9a:	f040 830b 	bne.w	80213b4 <_svfprintf_r+0x1304>
 8020d9e:	a925      	add	r1, sp, #148	; 0x94
 8020da0:	3f10      	subs	r7, #16
 8020da2:	460c      	mov	r4, r1
 8020da4:	e510      	b.n	80207c8 <_svfprintf_r+0x718>
 8020da6:	460c      	mov	r4, r1
 8020da8:	e529      	b.n	80207fe <_svfprintf_r+0x74e>
 8020daa:	2010      	movs	r0, #16
 8020dac:	4402      	add	r2, r0
 8020dae:	2b07      	cmp	r3, #7
 8020db0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8020db4:	6060      	str	r0, [r4, #4]
 8020db6:	dd08      	ble.n	8020dca <_svfprintf_r+0xd1a>
 8020db8:	aa22      	add	r2, sp, #136	; 0x88
 8020dba:	4641      	mov	r1, r8
 8020dbc:	4650      	mov	r0, sl
 8020dbe:	f004 f88f 	bl	8024ee0 <__ssprint_r>
 8020dc2:	2800      	cmp	r0, #0
 8020dc4:	f040 82f6 	bne.w	80213b4 <_svfprintf_r+0x1304>
 8020dc8:	a925      	add	r1, sp, #148	; 0x94
 8020dca:	3e10      	subs	r6, #16
 8020dcc:	460c      	mov	r4, r1
 8020dce:	e529      	b.n	8020824 <_svfprintf_r+0x774>
 8020dd0:	460c      	mov	r4, r1
 8020dd2:	e541      	b.n	8020858 <_svfprintf_r+0x7a8>
 8020dd4:	08071a10 	.word	0x08071a10
 8020dd8:	08071a21 	.word	0x08071a21
 8020ddc:	9b06      	ldr	r3, [sp, #24]
 8020dde:	2b65      	cmp	r3, #101	; 0x65
 8020de0:	f340 8230 	ble.w	8021244 <_svfprintf_r+0x1194>
 8020de4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8020de8:	2200      	movs	r2, #0
 8020dea:	2300      	movs	r3, #0
 8020dec:	f7df fe7c 	bl	8000ae8 <__aeabi_dcmpeq>
 8020df0:	2800      	cmp	r0, #0
 8020df2:	d068      	beq.n	8020ec6 <_svfprintf_r+0xe16>
 8020df4:	4b6d      	ldr	r3, [pc, #436]	; (8020fac <_svfprintf_r+0xefc>)
 8020df6:	6023      	str	r3, [r4, #0]
 8020df8:	2301      	movs	r3, #1
 8020dfa:	441e      	add	r6, r3
 8020dfc:	6063      	str	r3, [r4, #4]
 8020dfe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020e00:	9624      	str	r6, [sp, #144]	; 0x90
 8020e02:	3301      	adds	r3, #1
 8020e04:	2b07      	cmp	r3, #7
 8020e06:	9323      	str	r3, [sp, #140]	; 0x8c
 8020e08:	dc37      	bgt.n	8020e7a <_svfprintf_r+0xdca>
 8020e0a:	3408      	adds	r4, #8
 8020e0c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020e0e:	9a05      	ldr	r2, [sp, #20]
 8020e10:	4293      	cmp	r3, r2
 8020e12:	db03      	blt.n	8020e1c <_svfprintf_r+0xd6c>
 8020e14:	f01b 0f01 	tst.w	fp, #1
 8020e18:	f43f ad30 	beq.w	802087c <_svfprintf_r+0x7cc>
 8020e1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020e1e:	6023      	str	r3, [r4, #0]
 8020e20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020e22:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020e24:	6063      	str	r3, [r4, #4]
 8020e26:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020e28:	4413      	add	r3, r2
 8020e2a:	9324      	str	r3, [sp, #144]	; 0x90
 8020e2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020e2e:	3301      	adds	r3, #1
 8020e30:	2b07      	cmp	r3, #7
 8020e32:	9323      	str	r3, [sp, #140]	; 0x8c
 8020e34:	dc2b      	bgt.n	8020e8e <_svfprintf_r+0xdde>
 8020e36:	3408      	adds	r4, #8
 8020e38:	9b05      	ldr	r3, [sp, #20]
 8020e3a:	1e5d      	subs	r5, r3, #1
 8020e3c:	2d00      	cmp	r5, #0
 8020e3e:	f77f ad1d 	ble.w	802087c <_svfprintf_r+0x7cc>
 8020e42:	4e5b      	ldr	r6, [pc, #364]	; (8020fb0 <_svfprintf_r+0xf00>)
 8020e44:	2710      	movs	r7, #16
 8020e46:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8020e4a:	2d10      	cmp	r5, #16
 8020e4c:	f103 0301 	add.w	r3, r3, #1
 8020e50:	f104 0108 	add.w	r1, r4, #8
 8020e54:	6026      	str	r6, [r4, #0]
 8020e56:	dc24      	bgt.n	8020ea2 <_svfprintf_r+0xdf2>
 8020e58:	6065      	str	r5, [r4, #4]
 8020e5a:	2b07      	cmp	r3, #7
 8020e5c:	4415      	add	r5, r2
 8020e5e:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8020e62:	f340 8286 	ble.w	8021372 <_svfprintf_r+0x12c2>
 8020e66:	aa22      	add	r2, sp, #136	; 0x88
 8020e68:	4641      	mov	r1, r8
 8020e6a:	4650      	mov	r0, sl
 8020e6c:	f004 f838 	bl	8024ee0 <__ssprint_r>
 8020e70:	2800      	cmp	r0, #0
 8020e72:	f040 829f 	bne.w	80213b4 <_svfprintf_r+0x1304>
 8020e76:	ac25      	add	r4, sp, #148	; 0x94
 8020e78:	e500      	b.n	802087c <_svfprintf_r+0x7cc>
 8020e7a:	aa22      	add	r2, sp, #136	; 0x88
 8020e7c:	4641      	mov	r1, r8
 8020e7e:	4650      	mov	r0, sl
 8020e80:	f004 f82e 	bl	8024ee0 <__ssprint_r>
 8020e84:	2800      	cmp	r0, #0
 8020e86:	f040 8295 	bne.w	80213b4 <_svfprintf_r+0x1304>
 8020e8a:	ac25      	add	r4, sp, #148	; 0x94
 8020e8c:	e7be      	b.n	8020e0c <_svfprintf_r+0xd5c>
 8020e8e:	aa22      	add	r2, sp, #136	; 0x88
 8020e90:	4641      	mov	r1, r8
 8020e92:	4650      	mov	r0, sl
 8020e94:	f004 f824 	bl	8024ee0 <__ssprint_r>
 8020e98:	2800      	cmp	r0, #0
 8020e9a:	f040 828b 	bne.w	80213b4 <_svfprintf_r+0x1304>
 8020e9e:	ac25      	add	r4, sp, #148	; 0x94
 8020ea0:	e7ca      	b.n	8020e38 <_svfprintf_r+0xd88>
 8020ea2:	3210      	adds	r2, #16
 8020ea4:	2b07      	cmp	r3, #7
 8020ea6:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8020eaa:	6067      	str	r7, [r4, #4]
 8020eac:	dd08      	ble.n	8020ec0 <_svfprintf_r+0xe10>
 8020eae:	aa22      	add	r2, sp, #136	; 0x88
 8020eb0:	4641      	mov	r1, r8
 8020eb2:	4650      	mov	r0, sl
 8020eb4:	f004 f814 	bl	8024ee0 <__ssprint_r>
 8020eb8:	2800      	cmp	r0, #0
 8020eba:	f040 827b 	bne.w	80213b4 <_svfprintf_r+0x1304>
 8020ebe:	a925      	add	r1, sp, #148	; 0x94
 8020ec0:	3d10      	subs	r5, #16
 8020ec2:	460c      	mov	r4, r1
 8020ec4:	e7bf      	b.n	8020e46 <_svfprintf_r+0xd96>
 8020ec6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020ec8:	2b00      	cmp	r3, #0
 8020eca:	dc73      	bgt.n	8020fb4 <_svfprintf_r+0xf04>
 8020ecc:	4b37      	ldr	r3, [pc, #220]	; (8020fac <_svfprintf_r+0xefc>)
 8020ece:	6023      	str	r3, [r4, #0]
 8020ed0:	2301      	movs	r3, #1
 8020ed2:	441e      	add	r6, r3
 8020ed4:	6063      	str	r3, [r4, #4]
 8020ed6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020ed8:	9624      	str	r6, [sp, #144]	; 0x90
 8020eda:	3301      	adds	r3, #1
 8020edc:	2b07      	cmp	r3, #7
 8020ede:	9323      	str	r3, [sp, #140]	; 0x8c
 8020ee0:	dc3d      	bgt.n	8020f5e <_svfprintf_r+0xeae>
 8020ee2:	3408      	adds	r4, #8
 8020ee4:	9905      	ldr	r1, [sp, #20]
 8020ee6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8020ee8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020eea:	430a      	orrs	r2, r1
 8020eec:	f00b 0101 	and.w	r1, fp, #1
 8020ef0:	430a      	orrs	r2, r1
 8020ef2:	f43f acc3 	beq.w	802087c <_svfprintf_r+0x7cc>
 8020ef6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020ef8:	6022      	str	r2, [r4, #0]
 8020efa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020efc:	6062      	str	r2, [r4, #4]
 8020efe:	4413      	add	r3, r2
 8020f00:	9324      	str	r3, [sp, #144]	; 0x90
 8020f02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020f04:	3301      	adds	r3, #1
 8020f06:	2b07      	cmp	r3, #7
 8020f08:	9323      	str	r3, [sp, #140]	; 0x8c
 8020f0a:	dc32      	bgt.n	8020f72 <_svfprintf_r+0xec2>
 8020f0c:	3408      	adds	r4, #8
 8020f0e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8020f10:	2d00      	cmp	r5, #0
 8020f12:	da1b      	bge.n	8020f4c <_svfprintf_r+0xe9c>
 8020f14:	4e26      	ldr	r6, [pc, #152]	; (8020fb0 <_svfprintf_r+0xf00>)
 8020f16:	426d      	negs	r5, r5
 8020f18:	4623      	mov	r3, r4
 8020f1a:	2710      	movs	r7, #16
 8020f1c:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 8020f20:	2d10      	cmp	r5, #16
 8020f22:	f102 0201 	add.w	r2, r2, #1
 8020f26:	f104 0408 	add.w	r4, r4, #8
 8020f2a:	601e      	str	r6, [r3, #0]
 8020f2c:	dc2b      	bgt.n	8020f86 <_svfprintf_r+0xed6>
 8020f2e:	605d      	str	r5, [r3, #4]
 8020f30:	2a07      	cmp	r2, #7
 8020f32:	440d      	add	r5, r1
 8020f34:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 8020f38:	dd08      	ble.n	8020f4c <_svfprintf_r+0xe9c>
 8020f3a:	aa22      	add	r2, sp, #136	; 0x88
 8020f3c:	4641      	mov	r1, r8
 8020f3e:	4650      	mov	r0, sl
 8020f40:	f003 ffce 	bl	8024ee0 <__ssprint_r>
 8020f44:	2800      	cmp	r0, #0
 8020f46:	f040 8235 	bne.w	80213b4 <_svfprintf_r+0x1304>
 8020f4a:	ac25      	add	r4, sp, #148	; 0x94
 8020f4c:	9b05      	ldr	r3, [sp, #20]
 8020f4e:	9a05      	ldr	r2, [sp, #20]
 8020f50:	6063      	str	r3, [r4, #4]
 8020f52:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020f54:	f8c4 9000 	str.w	r9, [r4]
 8020f58:	4413      	add	r3, r2
 8020f5a:	9324      	str	r3, [sp, #144]	; 0x90
 8020f5c:	e487      	b.n	802086e <_svfprintf_r+0x7be>
 8020f5e:	aa22      	add	r2, sp, #136	; 0x88
 8020f60:	4641      	mov	r1, r8
 8020f62:	4650      	mov	r0, sl
 8020f64:	f003 ffbc 	bl	8024ee0 <__ssprint_r>
 8020f68:	2800      	cmp	r0, #0
 8020f6a:	f040 8223 	bne.w	80213b4 <_svfprintf_r+0x1304>
 8020f6e:	ac25      	add	r4, sp, #148	; 0x94
 8020f70:	e7b8      	b.n	8020ee4 <_svfprintf_r+0xe34>
 8020f72:	aa22      	add	r2, sp, #136	; 0x88
 8020f74:	4641      	mov	r1, r8
 8020f76:	4650      	mov	r0, sl
 8020f78:	f003 ffb2 	bl	8024ee0 <__ssprint_r>
 8020f7c:	2800      	cmp	r0, #0
 8020f7e:	f040 8219 	bne.w	80213b4 <_svfprintf_r+0x1304>
 8020f82:	ac25      	add	r4, sp, #148	; 0x94
 8020f84:	e7c3      	b.n	8020f0e <_svfprintf_r+0xe5e>
 8020f86:	3110      	adds	r1, #16
 8020f88:	2a07      	cmp	r2, #7
 8020f8a:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 8020f8e:	605f      	str	r7, [r3, #4]
 8020f90:	dd08      	ble.n	8020fa4 <_svfprintf_r+0xef4>
 8020f92:	aa22      	add	r2, sp, #136	; 0x88
 8020f94:	4641      	mov	r1, r8
 8020f96:	4650      	mov	r0, sl
 8020f98:	f003 ffa2 	bl	8024ee0 <__ssprint_r>
 8020f9c:	2800      	cmp	r0, #0
 8020f9e:	f040 8209 	bne.w	80213b4 <_svfprintf_r+0x1304>
 8020fa2:	ac25      	add	r4, sp, #148	; 0x94
 8020fa4:	3d10      	subs	r5, #16
 8020fa6:	4623      	mov	r3, r4
 8020fa8:	e7b8      	b.n	8020f1c <_svfprintf_r+0xe6c>
 8020faa:	bf00      	nop
 8020fac:	08071a32 	.word	0x08071a32
 8020fb0:	08071a44 	.word	0x08071a44
 8020fb4:	9f05      	ldr	r7, [sp, #20]
 8020fb6:	42af      	cmp	r7, r5
 8020fb8:	bfa8      	it	ge
 8020fba:	462f      	movge	r7, r5
 8020fbc:	2f00      	cmp	r7, #0
 8020fbe:	dd0a      	ble.n	8020fd6 <_svfprintf_r+0xf26>
 8020fc0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020fc2:	3301      	adds	r3, #1
 8020fc4:	443e      	add	r6, r7
 8020fc6:	2b07      	cmp	r3, #7
 8020fc8:	e9c4 9700 	strd	r9, r7, [r4]
 8020fcc:	9624      	str	r6, [sp, #144]	; 0x90
 8020fce:	9323      	str	r3, [sp, #140]	; 0x8c
 8020fd0:	f300 8085 	bgt.w	80210de <_svfprintf_r+0x102e>
 8020fd4:	3408      	adds	r4, #8
 8020fd6:	2f00      	cmp	r7, #0
 8020fd8:	bfac      	ite	ge
 8020fda:	1bee      	subge	r6, r5, r7
 8020fdc:	462e      	movlt	r6, r5
 8020fde:	2e00      	cmp	r6, #0
 8020fe0:	dd19      	ble.n	8021016 <_svfprintf_r+0xf66>
 8020fe2:	4f97      	ldr	r7, [pc, #604]	; (8021240 <_svfprintf_r+0x1190>)
 8020fe4:	6027      	str	r7, [r4, #0]
 8020fe6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8020fea:	2e10      	cmp	r6, #16
 8020fec:	f103 0301 	add.w	r3, r3, #1
 8020ff0:	f104 0108 	add.w	r1, r4, #8
 8020ff4:	dc7d      	bgt.n	80210f2 <_svfprintf_r+0x1042>
 8020ff6:	6066      	str	r6, [r4, #4]
 8020ff8:	2b07      	cmp	r3, #7
 8020ffa:	4416      	add	r6, r2
 8020ffc:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8021000:	f340 808a 	ble.w	8021118 <_svfprintf_r+0x1068>
 8021004:	aa22      	add	r2, sp, #136	; 0x88
 8021006:	4641      	mov	r1, r8
 8021008:	4650      	mov	r0, sl
 802100a:	f003 ff69 	bl	8024ee0 <__ssprint_r>
 802100e:	2800      	cmp	r0, #0
 8021010:	f040 81d0 	bne.w	80213b4 <_svfprintf_r+0x1304>
 8021014:	ac25      	add	r4, sp, #148	; 0x94
 8021016:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 802101a:	444d      	add	r5, r9
 802101c:	d00a      	beq.n	8021034 <_svfprintf_r+0xf84>
 802101e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021020:	2b00      	cmp	r3, #0
 8021022:	d17b      	bne.n	802111c <_svfprintf_r+0x106c>
 8021024:	9b08      	ldr	r3, [sp, #32]
 8021026:	2b00      	cmp	r3, #0
 8021028:	d17b      	bne.n	8021122 <_svfprintf_r+0x1072>
 802102a:	9b05      	ldr	r3, [sp, #20]
 802102c:	444b      	add	r3, r9
 802102e:	429d      	cmp	r5, r3
 8021030:	bf28      	it	cs
 8021032:	461d      	movcs	r5, r3
 8021034:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021036:	9a05      	ldr	r2, [sp, #20]
 8021038:	4293      	cmp	r3, r2
 802103a:	db02      	blt.n	8021042 <_svfprintf_r+0xf92>
 802103c:	f01b 0f01 	tst.w	fp, #1
 8021040:	d00e      	beq.n	8021060 <_svfprintf_r+0xfb0>
 8021042:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021044:	6023      	str	r3, [r4, #0]
 8021046:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021048:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802104a:	6063      	str	r3, [r4, #4]
 802104c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802104e:	4413      	add	r3, r2
 8021050:	9324      	str	r3, [sp, #144]	; 0x90
 8021052:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021054:	3301      	adds	r3, #1
 8021056:	2b07      	cmp	r3, #7
 8021058:	9323      	str	r3, [sp, #140]	; 0x8c
 802105a:	f300 80dd 	bgt.w	8021218 <_svfprintf_r+0x1168>
 802105e:	3408      	adds	r4, #8
 8021060:	9b05      	ldr	r3, [sp, #20]
 8021062:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8021064:	eb09 0203 	add.w	r2, r9, r3
 8021068:	1b9e      	subs	r6, r3, r6
 802106a:	1b52      	subs	r2, r2, r5
 802106c:	4296      	cmp	r6, r2
 802106e:	bfa8      	it	ge
 8021070:	4616      	movge	r6, r2
 8021072:	2e00      	cmp	r6, #0
 8021074:	dd0b      	ble.n	802108e <_svfprintf_r+0xfde>
 8021076:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021078:	4433      	add	r3, r6
 802107a:	9324      	str	r3, [sp, #144]	; 0x90
 802107c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802107e:	3301      	adds	r3, #1
 8021080:	2b07      	cmp	r3, #7
 8021082:	e9c4 5600 	strd	r5, r6, [r4]
 8021086:	9323      	str	r3, [sp, #140]	; 0x8c
 8021088:	f300 80d0 	bgt.w	802122c <_svfprintf_r+0x117c>
 802108c:	3408      	adds	r4, #8
 802108e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8021090:	9b05      	ldr	r3, [sp, #20]
 8021092:	2e00      	cmp	r6, #0
 8021094:	eba3 0505 	sub.w	r5, r3, r5
 8021098:	bfa8      	it	ge
 802109a:	1bad      	subge	r5, r5, r6
 802109c:	2d00      	cmp	r5, #0
 802109e:	f77f abed 	ble.w	802087c <_svfprintf_r+0x7cc>
 80210a2:	4e67      	ldr	r6, [pc, #412]	; (8021240 <_svfprintf_r+0x1190>)
 80210a4:	2710      	movs	r7, #16
 80210a6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80210aa:	2d10      	cmp	r5, #16
 80210ac:	f103 0301 	add.w	r3, r3, #1
 80210b0:	f104 0108 	add.w	r1, r4, #8
 80210b4:	6026      	str	r6, [r4, #0]
 80210b6:	f77f aecf 	ble.w	8020e58 <_svfprintf_r+0xda8>
 80210ba:	3210      	adds	r2, #16
 80210bc:	2b07      	cmp	r3, #7
 80210be:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80210c2:	6067      	str	r7, [r4, #4]
 80210c4:	dd08      	ble.n	80210d8 <_svfprintf_r+0x1028>
 80210c6:	aa22      	add	r2, sp, #136	; 0x88
 80210c8:	4641      	mov	r1, r8
 80210ca:	4650      	mov	r0, sl
 80210cc:	f003 ff08 	bl	8024ee0 <__ssprint_r>
 80210d0:	2800      	cmp	r0, #0
 80210d2:	f040 816f 	bne.w	80213b4 <_svfprintf_r+0x1304>
 80210d6:	a925      	add	r1, sp, #148	; 0x94
 80210d8:	3d10      	subs	r5, #16
 80210da:	460c      	mov	r4, r1
 80210dc:	e7e3      	b.n	80210a6 <_svfprintf_r+0xff6>
 80210de:	aa22      	add	r2, sp, #136	; 0x88
 80210e0:	4641      	mov	r1, r8
 80210e2:	4650      	mov	r0, sl
 80210e4:	f003 fefc 	bl	8024ee0 <__ssprint_r>
 80210e8:	2800      	cmp	r0, #0
 80210ea:	f040 8163 	bne.w	80213b4 <_svfprintf_r+0x1304>
 80210ee:	ac25      	add	r4, sp, #148	; 0x94
 80210f0:	e771      	b.n	8020fd6 <_svfprintf_r+0xf26>
 80210f2:	2010      	movs	r0, #16
 80210f4:	4402      	add	r2, r0
 80210f6:	2b07      	cmp	r3, #7
 80210f8:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80210fc:	6060      	str	r0, [r4, #4]
 80210fe:	dd08      	ble.n	8021112 <_svfprintf_r+0x1062>
 8021100:	aa22      	add	r2, sp, #136	; 0x88
 8021102:	4641      	mov	r1, r8
 8021104:	4650      	mov	r0, sl
 8021106:	f003 feeb 	bl	8024ee0 <__ssprint_r>
 802110a:	2800      	cmp	r0, #0
 802110c:	f040 8152 	bne.w	80213b4 <_svfprintf_r+0x1304>
 8021110:	a925      	add	r1, sp, #148	; 0x94
 8021112:	3e10      	subs	r6, #16
 8021114:	460c      	mov	r4, r1
 8021116:	e765      	b.n	8020fe4 <_svfprintf_r+0xf34>
 8021118:	460c      	mov	r4, r1
 802111a:	e77c      	b.n	8021016 <_svfprintf_r+0xf66>
 802111c:	9b08      	ldr	r3, [sp, #32]
 802111e:	2b00      	cmp	r3, #0
 8021120:	d04a      	beq.n	80211b8 <_svfprintf_r+0x1108>
 8021122:	9b08      	ldr	r3, [sp, #32]
 8021124:	3b01      	subs	r3, #1
 8021126:	9308      	str	r3, [sp, #32]
 8021128:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802112a:	6023      	str	r3, [r4, #0]
 802112c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802112e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021130:	6063      	str	r3, [r4, #4]
 8021132:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021134:	4413      	add	r3, r2
 8021136:	9324      	str	r3, [sp, #144]	; 0x90
 8021138:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802113a:	3301      	adds	r3, #1
 802113c:	2b07      	cmp	r3, #7
 802113e:	9323      	str	r3, [sp, #140]	; 0x8c
 8021140:	dc41      	bgt.n	80211c6 <_svfprintf_r+0x1116>
 8021142:	3408      	adds	r4, #8
 8021144:	9b05      	ldr	r3, [sp, #20]
 8021146:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021148:	eb09 0703 	add.w	r7, r9, r3
 802114c:	1b7b      	subs	r3, r7, r5
 802114e:	7817      	ldrb	r7, [r2, #0]
 8021150:	429f      	cmp	r7, r3
 8021152:	bfa8      	it	ge
 8021154:	461f      	movge	r7, r3
 8021156:	2f00      	cmp	r7, #0
 8021158:	dd0a      	ble.n	8021170 <_svfprintf_r+0x10c0>
 802115a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802115c:	443b      	add	r3, r7
 802115e:	9324      	str	r3, [sp, #144]	; 0x90
 8021160:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021162:	3301      	adds	r3, #1
 8021164:	2b07      	cmp	r3, #7
 8021166:	e9c4 5700 	strd	r5, r7, [r4]
 802116a:	9323      	str	r3, [sp, #140]	; 0x8c
 802116c:	dc35      	bgt.n	80211da <_svfprintf_r+0x112a>
 802116e:	3408      	adds	r4, #8
 8021170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021172:	781e      	ldrb	r6, [r3, #0]
 8021174:	2f00      	cmp	r7, #0
 8021176:	bfa8      	it	ge
 8021178:	1bf6      	subge	r6, r6, r7
 802117a:	2e00      	cmp	r6, #0
 802117c:	dd18      	ble.n	80211b0 <_svfprintf_r+0x1100>
 802117e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8021182:	482f      	ldr	r0, [pc, #188]	; (8021240 <_svfprintf_r+0x1190>)
 8021184:	6020      	str	r0, [r4, #0]
 8021186:	2e10      	cmp	r6, #16
 8021188:	f103 0301 	add.w	r3, r3, #1
 802118c:	f104 0108 	add.w	r1, r4, #8
 8021190:	dc2d      	bgt.n	80211ee <_svfprintf_r+0x113e>
 8021192:	4432      	add	r2, r6
 8021194:	2b07      	cmp	r3, #7
 8021196:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 802119a:	6066      	str	r6, [r4, #4]
 802119c:	dd3a      	ble.n	8021214 <_svfprintf_r+0x1164>
 802119e:	aa22      	add	r2, sp, #136	; 0x88
 80211a0:	4641      	mov	r1, r8
 80211a2:	4650      	mov	r0, sl
 80211a4:	f003 fe9c 	bl	8024ee0 <__ssprint_r>
 80211a8:	2800      	cmp	r0, #0
 80211aa:	f040 8103 	bne.w	80213b4 <_svfprintf_r+0x1304>
 80211ae:	ac25      	add	r4, sp, #148	; 0x94
 80211b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80211b2:	781b      	ldrb	r3, [r3, #0]
 80211b4:	441d      	add	r5, r3
 80211b6:	e732      	b.n	802101e <_svfprintf_r+0xf6e>
 80211b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80211ba:	3b01      	subs	r3, #1
 80211bc:	930a      	str	r3, [sp, #40]	; 0x28
 80211be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80211c0:	3b01      	subs	r3, #1
 80211c2:	9309      	str	r3, [sp, #36]	; 0x24
 80211c4:	e7b0      	b.n	8021128 <_svfprintf_r+0x1078>
 80211c6:	aa22      	add	r2, sp, #136	; 0x88
 80211c8:	4641      	mov	r1, r8
 80211ca:	4650      	mov	r0, sl
 80211cc:	f003 fe88 	bl	8024ee0 <__ssprint_r>
 80211d0:	2800      	cmp	r0, #0
 80211d2:	f040 80ef 	bne.w	80213b4 <_svfprintf_r+0x1304>
 80211d6:	ac25      	add	r4, sp, #148	; 0x94
 80211d8:	e7b4      	b.n	8021144 <_svfprintf_r+0x1094>
 80211da:	aa22      	add	r2, sp, #136	; 0x88
 80211dc:	4641      	mov	r1, r8
 80211de:	4650      	mov	r0, sl
 80211e0:	f003 fe7e 	bl	8024ee0 <__ssprint_r>
 80211e4:	2800      	cmp	r0, #0
 80211e6:	f040 80e5 	bne.w	80213b4 <_svfprintf_r+0x1304>
 80211ea:	ac25      	add	r4, sp, #148	; 0x94
 80211ec:	e7c0      	b.n	8021170 <_svfprintf_r+0x10c0>
 80211ee:	2010      	movs	r0, #16
 80211f0:	4402      	add	r2, r0
 80211f2:	2b07      	cmp	r3, #7
 80211f4:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80211f8:	6060      	str	r0, [r4, #4]
 80211fa:	dd08      	ble.n	802120e <_svfprintf_r+0x115e>
 80211fc:	aa22      	add	r2, sp, #136	; 0x88
 80211fe:	4641      	mov	r1, r8
 8021200:	4650      	mov	r0, sl
 8021202:	f003 fe6d 	bl	8024ee0 <__ssprint_r>
 8021206:	2800      	cmp	r0, #0
 8021208:	f040 80d4 	bne.w	80213b4 <_svfprintf_r+0x1304>
 802120c:	a925      	add	r1, sp, #148	; 0x94
 802120e:	3e10      	subs	r6, #16
 8021210:	460c      	mov	r4, r1
 8021212:	e7b4      	b.n	802117e <_svfprintf_r+0x10ce>
 8021214:	460c      	mov	r4, r1
 8021216:	e7cb      	b.n	80211b0 <_svfprintf_r+0x1100>
 8021218:	aa22      	add	r2, sp, #136	; 0x88
 802121a:	4641      	mov	r1, r8
 802121c:	4650      	mov	r0, sl
 802121e:	f003 fe5f 	bl	8024ee0 <__ssprint_r>
 8021222:	2800      	cmp	r0, #0
 8021224:	f040 80c6 	bne.w	80213b4 <_svfprintf_r+0x1304>
 8021228:	ac25      	add	r4, sp, #148	; 0x94
 802122a:	e719      	b.n	8021060 <_svfprintf_r+0xfb0>
 802122c:	aa22      	add	r2, sp, #136	; 0x88
 802122e:	4641      	mov	r1, r8
 8021230:	4650      	mov	r0, sl
 8021232:	f003 fe55 	bl	8024ee0 <__ssprint_r>
 8021236:	2800      	cmp	r0, #0
 8021238:	f040 80bc 	bne.w	80213b4 <_svfprintf_r+0x1304>
 802123c:	ac25      	add	r4, sp, #148	; 0x94
 802123e:	e726      	b.n	802108e <_svfprintf_r+0xfde>
 8021240:	08071a44 	.word	0x08071a44
 8021244:	9a05      	ldr	r2, [sp, #20]
 8021246:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021248:	2a01      	cmp	r2, #1
 802124a:	f106 0601 	add.w	r6, r6, #1
 802124e:	f103 0301 	add.w	r3, r3, #1
 8021252:	f104 0508 	add.w	r5, r4, #8
 8021256:	dc02      	bgt.n	802125e <_svfprintf_r+0x11ae>
 8021258:	f01b 0f01 	tst.w	fp, #1
 802125c:	d07e      	beq.n	802135c <_svfprintf_r+0x12ac>
 802125e:	2201      	movs	r2, #1
 8021260:	2b07      	cmp	r3, #7
 8021262:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8021266:	f8c4 9000 	str.w	r9, [r4]
 802126a:	6062      	str	r2, [r4, #4]
 802126c:	dd08      	ble.n	8021280 <_svfprintf_r+0x11d0>
 802126e:	aa22      	add	r2, sp, #136	; 0x88
 8021270:	4641      	mov	r1, r8
 8021272:	4650      	mov	r0, sl
 8021274:	f003 fe34 	bl	8024ee0 <__ssprint_r>
 8021278:	2800      	cmp	r0, #0
 802127a:	f040 809b 	bne.w	80213b4 <_svfprintf_r+0x1304>
 802127e:	ad25      	add	r5, sp, #148	; 0x94
 8021280:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021282:	602b      	str	r3, [r5, #0]
 8021284:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021286:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021288:	606b      	str	r3, [r5, #4]
 802128a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802128c:	4413      	add	r3, r2
 802128e:	9324      	str	r3, [sp, #144]	; 0x90
 8021290:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021292:	3301      	adds	r3, #1
 8021294:	2b07      	cmp	r3, #7
 8021296:	9323      	str	r3, [sp, #140]	; 0x8c
 8021298:	dc32      	bgt.n	8021300 <_svfprintf_r+0x1250>
 802129a:	3508      	adds	r5, #8
 802129c:	9b05      	ldr	r3, [sp, #20]
 802129e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80212a2:	1e5c      	subs	r4, r3, #1
 80212a4:	2200      	movs	r2, #0
 80212a6:	2300      	movs	r3, #0
 80212a8:	f7df fc1e 	bl	8000ae8 <__aeabi_dcmpeq>
 80212ac:	2800      	cmp	r0, #0
 80212ae:	d130      	bne.n	8021312 <_svfprintf_r+0x1262>
 80212b0:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80212b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80212b4:	9a05      	ldr	r2, [sp, #20]
 80212b6:	3101      	adds	r1, #1
 80212b8:	3b01      	subs	r3, #1
 80212ba:	f109 0001 	add.w	r0, r9, #1
 80212be:	4413      	add	r3, r2
 80212c0:	2907      	cmp	r1, #7
 80212c2:	e9c5 0400 	strd	r0, r4, [r5]
 80212c6:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 80212ca:	dd50      	ble.n	802136e <_svfprintf_r+0x12be>
 80212cc:	aa22      	add	r2, sp, #136	; 0x88
 80212ce:	4641      	mov	r1, r8
 80212d0:	4650      	mov	r0, sl
 80212d2:	f003 fe05 	bl	8024ee0 <__ssprint_r>
 80212d6:	2800      	cmp	r0, #0
 80212d8:	d16c      	bne.n	80213b4 <_svfprintf_r+0x1304>
 80212da:	ad25      	add	r5, sp, #148	; 0x94
 80212dc:	ab1e      	add	r3, sp, #120	; 0x78
 80212de:	602b      	str	r3, [r5, #0]
 80212e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80212e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80212e4:	606b      	str	r3, [r5, #4]
 80212e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80212e8:	4413      	add	r3, r2
 80212ea:	9324      	str	r3, [sp, #144]	; 0x90
 80212ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80212ee:	3301      	adds	r3, #1
 80212f0:	2b07      	cmp	r3, #7
 80212f2:	9323      	str	r3, [sp, #140]	; 0x8c
 80212f4:	f73f adb7 	bgt.w	8020e66 <_svfprintf_r+0xdb6>
 80212f8:	f105 0408 	add.w	r4, r5, #8
 80212fc:	f7ff babe 	b.w	802087c <_svfprintf_r+0x7cc>
 8021300:	aa22      	add	r2, sp, #136	; 0x88
 8021302:	4641      	mov	r1, r8
 8021304:	4650      	mov	r0, sl
 8021306:	f003 fdeb 	bl	8024ee0 <__ssprint_r>
 802130a:	2800      	cmp	r0, #0
 802130c:	d152      	bne.n	80213b4 <_svfprintf_r+0x1304>
 802130e:	ad25      	add	r5, sp, #148	; 0x94
 8021310:	e7c4      	b.n	802129c <_svfprintf_r+0x11ec>
 8021312:	2c00      	cmp	r4, #0
 8021314:	dde2      	ble.n	80212dc <_svfprintf_r+0x122c>
 8021316:	4e56      	ldr	r6, [pc, #344]	; (8021470 <_svfprintf_r+0x13c0>)
 8021318:	2710      	movs	r7, #16
 802131a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 802131e:	2c10      	cmp	r4, #16
 8021320:	f103 0301 	add.w	r3, r3, #1
 8021324:	f105 0108 	add.w	r1, r5, #8
 8021328:	602e      	str	r6, [r5, #0]
 802132a:	dc07      	bgt.n	802133c <_svfprintf_r+0x128c>
 802132c:	606c      	str	r4, [r5, #4]
 802132e:	2b07      	cmp	r3, #7
 8021330:	4414      	add	r4, r2
 8021332:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 8021336:	dcc9      	bgt.n	80212cc <_svfprintf_r+0x121c>
 8021338:	460d      	mov	r5, r1
 802133a:	e7cf      	b.n	80212dc <_svfprintf_r+0x122c>
 802133c:	3210      	adds	r2, #16
 802133e:	2b07      	cmp	r3, #7
 8021340:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8021344:	606f      	str	r7, [r5, #4]
 8021346:	dd06      	ble.n	8021356 <_svfprintf_r+0x12a6>
 8021348:	aa22      	add	r2, sp, #136	; 0x88
 802134a:	4641      	mov	r1, r8
 802134c:	4650      	mov	r0, sl
 802134e:	f003 fdc7 	bl	8024ee0 <__ssprint_r>
 8021352:	bb78      	cbnz	r0, 80213b4 <_svfprintf_r+0x1304>
 8021354:	a925      	add	r1, sp, #148	; 0x94
 8021356:	3c10      	subs	r4, #16
 8021358:	460d      	mov	r5, r1
 802135a:	e7de      	b.n	802131a <_svfprintf_r+0x126a>
 802135c:	2201      	movs	r2, #1
 802135e:	2b07      	cmp	r3, #7
 8021360:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8021364:	f8c4 9000 	str.w	r9, [r4]
 8021368:	6062      	str	r2, [r4, #4]
 802136a:	ddb7      	ble.n	80212dc <_svfprintf_r+0x122c>
 802136c:	e7ae      	b.n	80212cc <_svfprintf_r+0x121c>
 802136e:	3508      	adds	r5, #8
 8021370:	e7b4      	b.n	80212dc <_svfprintf_r+0x122c>
 8021372:	460c      	mov	r4, r1
 8021374:	f7ff ba82 	b.w	802087c <_svfprintf_r+0x7cc>
 8021378:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 802137c:	1a9d      	subs	r5, r3, r2
 802137e:	2d00      	cmp	r5, #0
 8021380:	f77f aa80 	ble.w	8020884 <_svfprintf_r+0x7d4>
 8021384:	4e3b      	ldr	r6, [pc, #236]	; (8021474 <_svfprintf_r+0x13c4>)
 8021386:	2710      	movs	r7, #16
 8021388:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 802138c:	2d10      	cmp	r5, #16
 802138e:	f103 0301 	add.w	r3, r3, #1
 8021392:	6026      	str	r6, [r4, #0]
 8021394:	dc18      	bgt.n	80213c8 <_svfprintf_r+0x1318>
 8021396:	6065      	str	r5, [r4, #4]
 8021398:	2b07      	cmp	r3, #7
 802139a:	4415      	add	r5, r2
 802139c:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 80213a0:	f77f aa70 	ble.w	8020884 <_svfprintf_r+0x7d4>
 80213a4:	aa22      	add	r2, sp, #136	; 0x88
 80213a6:	4641      	mov	r1, r8
 80213a8:	4650      	mov	r0, sl
 80213aa:	f003 fd99 	bl	8024ee0 <__ssprint_r>
 80213ae:	2800      	cmp	r0, #0
 80213b0:	f43f aa68 	beq.w	8020884 <_svfprintf_r+0x7d4>
 80213b4:	9b03      	ldr	r3, [sp, #12]
 80213b6:	2b00      	cmp	r3, #0
 80213b8:	f43f a887 	beq.w	80204ca <_svfprintf_r+0x41a>
 80213bc:	4619      	mov	r1, r3
 80213be:	4650      	mov	r0, sl
 80213c0:	f002 fb30 	bl	8023a24 <_free_r>
 80213c4:	f7ff b881 	b.w	80204ca <_svfprintf_r+0x41a>
 80213c8:	3210      	adds	r2, #16
 80213ca:	2b07      	cmp	r3, #7
 80213cc:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80213d0:	6067      	str	r7, [r4, #4]
 80213d2:	dc02      	bgt.n	80213da <_svfprintf_r+0x132a>
 80213d4:	3408      	adds	r4, #8
 80213d6:	3d10      	subs	r5, #16
 80213d8:	e7d6      	b.n	8021388 <_svfprintf_r+0x12d8>
 80213da:	aa22      	add	r2, sp, #136	; 0x88
 80213dc:	4641      	mov	r1, r8
 80213de:	4650      	mov	r0, sl
 80213e0:	f003 fd7e 	bl	8024ee0 <__ssprint_r>
 80213e4:	2800      	cmp	r0, #0
 80213e6:	d1e5      	bne.n	80213b4 <_svfprintf_r+0x1304>
 80213e8:	ac25      	add	r4, sp, #148	; 0x94
 80213ea:	e7f4      	b.n	80213d6 <_svfprintf_r+0x1326>
 80213ec:	9903      	ldr	r1, [sp, #12]
 80213ee:	4650      	mov	r0, sl
 80213f0:	f002 fb18 	bl	8023a24 <_free_r>
 80213f4:	f7ff ba5e 	b.w	80208b4 <_svfprintf_r+0x804>
 80213f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80213fa:	2b00      	cmp	r3, #0
 80213fc:	f43f a865 	beq.w	80204ca <_svfprintf_r+0x41a>
 8021400:	aa22      	add	r2, sp, #136	; 0x88
 8021402:	4641      	mov	r1, r8
 8021404:	4650      	mov	r0, sl
 8021406:	f003 fd6b 	bl	8024ee0 <__ssprint_r>
 802140a:	f7ff b85e 	b.w	80204ca <_svfprintf_r+0x41a>
 802140e:	ea56 0205 	orrs.w	r2, r6, r5
 8021412:	465f      	mov	r7, fp
 8021414:	f43f ab78 	beq.w	8020b08 <_svfprintf_r+0xa58>
 8021418:	2b01      	cmp	r3, #1
 802141a:	f43f ac15 	beq.w	8020c48 <_svfprintf_r+0xb98>
 802141e:	2b02      	cmp	r3, #2
 8021420:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 8021424:	f43f ac5b 	beq.w	8020cde <_svfprintf_r+0xc2e>
 8021428:	f006 0307 	and.w	r3, r6, #7
 802142c:	08f6      	lsrs	r6, r6, #3
 802142e:	ea46 7645 	orr.w	r6, r6, r5, lsl #29
 8021432:	08ed      	lsrs	r5, r5, #3
 8021434:	3330      	adds	r3, #48	; 0x30
 8021436:	ea56 0105 	orrs.w	r1, r6, r5
 802143a:	464a      	mov	r2, r9
 802143c:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8021440:	d1f2      	bne.n	8021428 <_svfprintf_r+0x1378>
 8021442:	07f9      	lsls	r1, r7, #31
 8021444:	d506      	bpl.n	8021454 <_svfprintf_r+0x13a4>
 8021446:	2b30      	cmp	r3, #48	; 0x30
 8021448:	d004      	beq.n	8021454 <_svfprintf_r+0x13a4>
 802144a:	2330      	movs	r3, #48	; 0x30
 802144c:	f809 3c01 	strb.w	r3, [r9, #-1]
 8021450:	f1a2 0902 	sub.w	r9, r2, #2
 8021454:	ab4e      	add	r3, sp, #312	; 0x138
 8021456:	eba3 0309 	sub.w	r3, r3, r9
 802145a:	9e04      	ldr	r6, [sp, #16]
 802145c:	9304      	str	r3, [sp, #16]
 802145e:	2300      	movs	r3, #0
 8021460:	46bb      	mov	fp, r7
 8021462:	9303      	str	r3, [sp, #12]
 8021464:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8021468:	461d      	mov	r5, r3
 802146a:	f7ff b94d 	b.w	8020708 <_svfprintf_r+0x658>
 802146e:	bf00      	nop
 8021470:	08071a44 	.word	0x08071a44
 8021474:	08071a34 	.word	0x08071a34

08021478 <_vfprintf_r>:
 8021478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802147c:	ed2d 8b04 	vpush	{d8-d9}
 8021480:	b0cf      	sub	sp, #316	; 0x13c
 8021482:	4689      	mov	r9, r1
 8021484:	4690      	mov	r8, r2
 8021486:	461c      	mov	r4, r3
 8021488:	461e      	mov	r6, r3
 802148a:	4682      	mov	sl, r0
 802148c:	f002 fcf4 	bl	8023e78 <_localeconv_r>
 8021490:	6803      	ldr	r3, [r0, #0]
 8021492:	9313      	str	r3, [sp, #76]	; 0x4c
 8021494:	4618      	mov	r0, r3
 8021496:	f7de feab 	bl	80001f0 <strlen>
 802149a:	900e      	str	r0, [sp, #56]	; 0x38
 802149c:	f1ba 0f00 	cmp.w	sl, #0
 80214a0:	d005      	beq.n	80214ae <_vfprintf_r+0x36>
 80214a2:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 80214a6:	b913      	cbnz	r3, 80214ae <_vfprintf_r+0x36>
 80214a8:	4650      	mov	r0, sl
 80214aa:	f002 fa2b 	bl	8023904 <__sinit>
 80214ae:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 80214b2:	07d8      	lsls	r0, r3, #31
 80214b4:	d407      	bmi.n	80214c6 <_vfprintf_r+0x4e>
 80214b6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80214ba:	0599      	lsls	r1, r3, #22
 80214bc:	d403      	bmi.n	80214c6 <_vfprintf_r+0x4e>
 80214be:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 80214c2:	f002 fcdf 	bl	8023e84 <__retarget_lock_acquire_recursive>
 80214c6:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
 80214ca:	049a      	lsls	r2, r3, #18
 80214cc:	d409      	bmi.n	80214e2 <_vfprintf_r+0x6a>
 80214ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80214d2:	f8a9 300c 	strh.w	r3, [r9, #12]
 80214d6:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 80214da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80214de:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
 80214e2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80214e6:	071b      	lsls	r3, r3, #28
 80214e8:	d502      	bpl.n	80214f0 <_vfprintf_r+0x78>
 80214ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80214ee:	b9d3      	cbnz	r3, 8021526 <_vfprintf_r+0xae>
 80214f0:	4649      	mov	r1, r9
 80214f2:	4650      	mov	r0, sl
 80214f4:	f001 fa3a 	bl	802296c <__swsetup_r>
 80214f8:	b1a8      	cbz	r0, 8021526 <_vfprintf_r+0xae>
 80214fa:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 80214fe:	07df      	lsls	r7, r3, #31
 8021500:	d508      	bpl.n	8021514 <_vfprintf_r+0x9c>
 8021502:	f04f 33ff 	mov.w	r3, #4294967295
 8021506:	930f      	str	r3, [sp, #60]	; 0x3c
 8021508:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802150a:	b04f      	add	sp, #316	; 0x13c
 802150c:	ecbd 8b04 	vpop	{d8-d9}
 8021510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021514:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8021518:	059e      	lsls	r6, r3, #22
 802151a:	d4f2      	bmi.n	8021502 <_vfprintf_r+0x8a>
 802151c:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8021520:	f002 fcb1 	bl	8023e86 <__retarget_lock_release_recursive>
 8021524:	e7ed      	b.n	8021502 <_vfprintf_r+0x8a>
 8021526:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 802152a:	f003 021a 	and.w	r2, r3, #26
 802152e:	2a0a      	cmp	r2, #10
 8021530:	d118      	bne.n	8021564 <_vfprintf_r+0xec>
 8021532:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
 8021536:	2a00      	cmp	r2, #0
 8021538:	db14      	blt.n	8021564 <_vfprintf_r+0xec>
 802153a:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
 802153e:	07d5      	lsls	r5, r2, #31
 8021540:	d405      	bmi.n	802154e <_vfprintf_r+0xd6>
 8021542:	0598      	lsls	r0, r3, #22
 8021544:	d403      	bmi.n	802154e <_vfprintf_r+0xd6>
 8021546:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 802154a:	f002 fc9c 	bl	8023e86 <__retarget_lock_release_recursive>
 802154e:	4623      	mov	r3, r4
 8021550:	4642      	mov	r2, r8
 8021552:	4649      	mov	r1, r9
 8021554:	4650      	mov	r0, sl
 8021556:	b04f      	add	sp, #316	; 0x13c
 8021558:	ecbd 8b04 	vpop	{d8-d9}
 802155c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021560:	f001 b9c4 	b.w	80228ec <__sbprintf>
 8021564:	ed9f 7b92 	vldr	d7, [pc, #584]	; 80217b0 <_vfprintf_r+0x338>
 8021568:	2500      	movs	r5, #0
 802156a:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 802156e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8021572:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 8021576:	ac25      	add	r4, sp, #148	; 0x94
 8021578:	9422      	str	r4, [sp, #136]	; 0x88
 802157a:	9505      	str	r5, [sp, #20]
 802157c:	950a      	str	r5, [sp, #40]	; 0x28
 802157e:	9512      	str	r5, [sp, #72]	; 0x48
 8021580:	9514      	str	r5, [sp, #80]	; 0x50
 8021582:	950f      	str	r5, [sp, #60]	; 0x3c
 8021584:	4643      	mov	r3, r8
 8021586:	461d      	mov	r5, r3
 8021588:	f813 2b01 	ldrb.w	r2, [r3], #1
 802158c:	b10a      	cbz	r2, 8021592 <_vfprintf_r+0x11a>
 802158e:	2a25      	cmp	r2, #37	; 0x25
 8021590:	d1f9      	bne.n	8021586 <_vfprintf_r+0x10e>
 8021592:	ebb5 0708 	subs.w	r7, r5, r8
 8021596:	d00d      	beq.n	80215b4 <_vfprintf_r+0x13c>
 8021598:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802159a:	443b      	add	r3, r7
 802159c:	9324      	str	r3, [sp, #144]	; 0x90
 802159e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80215a0:	3301      	adds	r3, #1
 80215a2:	2b07      	cmp	r3, #7
 80215a4:	e9c4 8700 	strd	r8, r7, [r4]
 80215a8:	9323      	str	r3, [sp, #140]	; 0x8c
 80215aa:	dc79      	bgt.n	80216a0 <_vfprintf_r+0x228>
 80215ac:	3408      	adds	r4, #8
 80215ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80215b0:	443b      	add	r3, r7
 80215b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80215b4:	782b      	ldrb	r3, [r5, #0]
 80215b6:	2b00      	cmp	r3, #0
 80215b8:	f001 8154 	beq.w	8022864 <_vfprintf_r+0x13ec>
 80215bc:	2300      	movs	r3, #0
 80215be:	f04f 32ff 	mov.w	r2, #4294967295
 80215c2:	3501      	adds	r5, #1
 80215c4:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80215c8:	9204      	str	r2, [sp, #16]
 80215ca:	9310      	str	r3, [sp, #64]	; 0x40
 80215cc:	469b      	mov	fp, r3
 80215ce:	270a      	movs	r7, #10
 80215d0:	212b      	movs	r1, #43	; 0x2b
 80215d2:	462b      	mov	r3, r5
 80215d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80215d8:	9206      	str	r2, [sp, #24]
 80215da:	930b      	str	r3, [sp, #44]	; 0x2c
 80215dc:	9b06      	ldr	r3, [sp, #24]
 80215de:	3b20      	subs	r3, #32
 80215e0:	2b5a      	cmp	r3, #90	; 0x5a
 80215e2:	f200 85c8 	bhi.w	8022176 <_vfprintf_r+0xcfe>
 80215e6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80215ea:	007e      	.short	0x007e
 80215ec:	05c605c6 	.word	0x05c605c6
 80215f0:	05c60086 	.word	0x05c60086
 80215f4:	05c605c6 	.word	0x05c605c6
 80215f8:	05c60065 	.word	0x05c60065
 80215fc:	008905c6 	.word	0x008905c6
 8021600:	05c60093 	.word	0x05c60093
 8021604:	00960090 	.word	0x00960090
 8021608:	00b205c6 	.word	0x00b205c6
 802160c:	00b500b5 	.word	0x00b500b5
 8021610:	00b500b5 	.word	0x00b500b5
 8021614:	00b500b5 	.word	0x00b500b5
 8021618:	00b500b5 	.word	0x00b500b5
 802161c:	05c600b5 	.word	0x05c600b5
 8021620:	05c605c6 	.word	0x05c605c6
 8021624:	05c605c6 	.word	0x05c605c6
 8021628:	05c605c6 	.word	0x05c605c6
 802162c:	05c6012a 	.word	0x05c6012a
 8021630:	00fa00e7 	.word	0x00fa00e7
 8021634:	012a012a 	.word	0x012a012a
 8021638:	05c6012a 	.word	0x05c6012a
 802163c:	05c605c6 	.word	0x05c605c6
 8021640:	00c505c6 	.word	0x00c505c6
 8021644:	05c605c6 	.word	0x05c605c6
 8021648:	05c604a0 	.word	0x05c604a0
 802164c:	05c605c6 	.word	0x05c605c6
 8021650:	05c604ea 	.word	0x05c604ea
 8021654:	05c6050b 	.word	0x05c6050b
 8021658:	052d05c6 	.word	0x052d05c6
 802165c:	05c605c6 	.word	0x05c605c6
 8021660:	05c605c6 	.word	0x05c605c6
 8021664:	05c605c6 	.word	0x05c605c6
 8021668:	05c605c6 	.word	0x05c605c6
 802166c:	05c6012a 	.word	0x05c6012a
 8021670:	00fc00e7 	.word	0x00fc00e7
 8021674:	012a012a 	.word	0x012a012a
 8021678:	00c8012a 	.word	0x00c8012a
 802167c:	00dc00fc 	.word	0x00dc00fc
 8021680:	00d505c6 	.word	0x00d505c6
 8021684:	047b05c6 	.word	0x047b05c6
 8021688:	04d804a2 	.word	0x04d804a2
 802168c:	05c600dc 	.word	0x05c600dc
 8021690:	007c04ea 	.word	0x007c04ea
 8021694:	05c6050d 	.word	0x05c6050d
 8021698:	054c05c6 	.word	0x054c05c6
 802169c:	007c05c6 	.word	0x007c05c6
 80216a0:	aa22      	add	r2, sp, #136	; 0x88
 80216a2:	4649      	mov	r1, r9
 80216a4:	4650      	mov	r0, sl
 80216a6:	f003 fca3 	bl	8024ff0 <__sprint_r>
 80216aa:	2800      	cmp	r0, #0
 80216ac:	f040 8135 	bne.w	802191a <_vfprintf_r+0x4a2>
 80216b0:	ac25      	add	r4, sp, #148	; 0x94
 80216b2:	e77c      	b.n	80215ae <_vfprintf_r+0x136>
 80216b4:	4650      	mov	r0, sl
 80216b6:	f002 fbdf 	bl	8023e78 <_localeconv_r>
 80216ba:	6843      	ldr	r3, [r0, #4]
 80216bc:	9314      	str	r3, [sp, #80]	; 0x50
 80216be:	4618      	mov	r0, r3
 80216c0:	f7de fd96 	bl	80001f0 <strlen>
 80216c4:	9012      	str	r0, [sp, #72]	; 0x48
 80216c6:	4650      	mov	r0, sl
 80216c8:	f002 fbd6 	bl	8023e78 <_localeconv_r>
 80216cc:	6883      	ldr	r3, [r0, #8]
 80216ce:	930a      	str	r3, [sp, #40]	; 0x28
 80216d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80216d2:	212b      	movs	r1, #43	; 0x2b
 80216d4:	b12b      	cbz	r3, 80216e2 <_vfprintf_r+0x26a>
 80216d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80216d8:	b11b      	cbz	r3, 80216e2 <_vfprintf_r+0x26a>
 80216da:	781b      	ldrb	r3, [r3, #0]
 80216dc:	b10b      	cbz	r3, 80216e2 <_vfprintf_r+0x26a>
 80216de:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 80216e2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80216e4:	e775      	b.n	80215d2 <_vfprintf_r+0x15a>
 80216e6:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 80216ea:	2b00      	cmp	r3, #0
 80216ec:	d1f9      	bne.n	80216e2 <_vfprintf_r+0x26a>
 80216ee:	2320      	movs	r3, #32
 80216f0:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80216f4:	e7f5      	b.n	80216e2 <_vfprintf_r+0x26a>
 80216f6:	f04b 0b01 	orr.w	fp, fp, #1
 80216fa:	e7f2      	b.n	80216e2 <_vfprintf_r+0x26a>
 80216fc:	f856 3b04 	ldr.w	r3, [r6], #4
 8021700:	9310      	str	r3, [sp, #64]	; 0x40
 8021702:	2b00      	cmp	r3, #0
 8021704:	daed      	bge.n	80216e2 <_vfprintf_r+0x26a>
 8021706:	425b      	negs	r3, r3
 8021708:	9310      	str	r3, [sp, #64]	; 0x40
 802170a:	f04b 0b04 	orr.w	fp, fp, #4
 802170e:	e7e8      	b.n	80216e2 <_vfprintf_r+0x26a>
 8021710:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 8021714:	e7e5      	b.n	80216e2 <_vfprintf_r+0x26a>
 8021716:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021718:	f813 2b01 	ldrb.w	r2, [r3], #1
 802171c:	9206      	str	r2, [sp, #24]
 802171e:	2a2a      	cmp	r2, #42	; 0x2a
 8021720:	d112      	bne.n	8021748 <_vfprintf_r+0x2d0>
 8021722:	f856 0b04 	ldr.w	r0, [r6], #4
 8021726:	930b      	str	r3, [sp, #44]	; 0x2c
 8021728:	ea40 72e0 	orr.w	r2, r0, r0, asr #31
 802172c:	9204      	str	r2, [sp, #16]
 802172e:	e7d8      	b.n	80216e2 <_vfprintf_r+0x26a>
 8021730:	9804      	ldr	r0, [sp, #16]
 8021732:	fb07 2200 	mla	r2, r7, r0, r2
 8021736:	9204      	str	r2, [sp, #16]
 8021738:	f813 2b01 	ldrb.w	r2, [r3], #1
 802173c:	9206      	str	r2, [sp, #24]
 802173e:	9a06      	ldr	r2, [sp, #24]
 8021740:	3a30      	subs	r2, #48	; 0x30
 8021742:	2a09      	cmp	r2, #9
 8021744:	d9f4      	bls.n	8021730 <_vfprintf_r+0x2b8>
 8021746:	e748      	b.n	80215da <_vfprintf_r+0x162>
 8021748:	2200      	movs	r2, #0
 802174a:	9204      	str	r2, [sp, #16]
 802174c:	e7f7      	b.n	802173e <_vfprintf_r+0x2c6>
 802174e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8021752:	e7c6      	b.n	80216e2 <_vfprintf_r+0x26a>
 8021754:	2200      	movs	r2, #0
 8021756:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021758:	9210      	str	r2, [sp, #64]	; 0x40
 802175a:	9a06      	ldr	r2, [sp, #24]
 802175c:	9810      	ldr	r0, [sp, #64]	; 0x40
 802175e:	3a30      	subs	r2, #48	; 0x30
 8021760:	fb07 2200 	mla	r2, r7, r0, r2
 8021764:	9210      	str	r2, [sp, #64]	; 0x40
 8021766:	f813 2b01 	ldrb.w	r2, [r3], #1
 802176a:	9206      	str	r2, [sp, #24]
 802176c:	3a30      	subs	r2, #48	; 0x30
 802176e:	2a09      	cmp	r2, #9
 8021770:	d9f3      	bls.n	802175a <_vfprintf_r+0x2e2>
 8021772:	e732      	b.n	80215da <_vfprintf_r+0x162>
 8021774:	f04b 0b08 	orr.w	fp, fp, #8
 8021778:	e7b3      	b.n	80216e2 <_vfprintf_r+0x26a>
 802177a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802177c:	781b      	ldrb	r3, [r3, #0]
 802177e:	2b68      	cmp	r3, #104	; 0x68
 8021780:	bf01      	itttt	eq
 8021782:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 8021784:	3301      	addeq	r3, #1
 8021786:	930b      	streq	r3, [sp, #44]	; 0x2c
 8021788:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 802178c:	bf18      	it	ne
 802178e:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 8021792:	e7a6      	b.n	80216e2 <_vfprintf_r+0x26a>
 8021794:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021796:	781b      	ldrb	r3, [r3, #0]
 8021798:	2b6c      	cmp	r3, #108	; 0x6c
 802179a:	d105      	bne.n	80217a8 <_vfprintf_r+0x330>
 802179c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802179e:	3301      	adds	r3, #1
 80217a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80217a2:	f04b 0b20 	orr.w	fp, fp, #32
 80217a6:	e79c      	b.n	80216e2 <_vfprintf_r+0x26a>
 80217a8:	f04b 0b10 	orr.w	fp, fp, #16
 80217ac:	e799      	b.n	80216e2 <_vfprintf_r+0x26a>
 80217ae:	bf00      	nop
	...
 80217b8:	4632      	mov	r2, r6
 80217ba:	2000      	movs	r0, #0
 80217bc:	f852 3b04 	ldr.w	r3, [r2], #4
 80217c0:	9207      	str	r2, [sp, #28]
 80217c2:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 80217c6:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 80217ca:	2301      	movs	r3, #1
 80217cc:	e9cd 0008 	strd	r0, r0, [sp, #32]
 80217d0:	9003      	str	r0, [sp, #12]
 80217d2:	9304      	str	r3, [sp, #16]
 80217d4:	4606      	mov	r6, r0
 80217d6:	4605      	mov	r5, r0
 80217d8:	f10d 08d4 	add.w	r8, sp, #212	; 0xd4
 80217dc:	e1c6      	b.n	8021b6c <_vfprintf_r+0x6f4>
 80217de:	f04b 0b10 	orr.w	fp, fp, #16
 80217e2:	f01b 0f20 	tst.w	fp, #32
 80217e6:	d012      	beq.n	802180e <_vfprintf_r+0x396>
 80217e8:	3607      	adds	r6, #7
 80217ea:	f026 0307 	bic.w	r3, r6, #7
 80217ee:	461a      	mov	r2, r3
 80217f0:	685d      	ldr	r5, [r3, #4]
 80217f2:	f852 6b08 	ldr.w	r6, [r2], #8
 80217f6:	9207      	str	r2, [sp, #28]
 80217f8:	2d00      	cmp	r5, #0
 80217fa:	da06      	bge.n	802180a <_vfprintf_r+0x392>
 80217fc:	4276      	negs	r6, r6
 80217fe:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8021802:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8021806:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 802180a:	2301      	movs	r3, #1
 802180c:	e3a0      	b.n	8021f50 <_vfprintf_r+0xad8>
 802180e:	4633      	mov	r3, r6
 8021810:	f01b 0f10 	tst.w	fp, #16
 8021814:	f853 5b04 	ldr.w	r5, [r3], #4
 8021818:	9307      	str	r3, [sp, #28]
 802181a:	d002      	beq.n	8021822 <_vfprintf_r+0x3aa>
 802181c:	462e      	mov	r6, r5
 802181e:	17ed      	asrs	r5, r5, #31
 8021820:	e7ea      	b.n	80217f8 <_vfprintf_r+0x380>
 8021822:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8021826:	d003      	beq.n	8021830 <_vfprintf_r+0x3b8>
 8021828:	b22e      	sxth	r6, r5
 802182a:	f345 35c0 	sbfx	r5, r5, #15, #1
 802182e:	e7e3      	b.n	80217f8 <_vfprintf_r+0x380>
 8021830:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8021834:	d0f2      	beq.n	802181c <_vfprintf_r+0x3a4>
 8021836:	b26e      	sxtb	r6, r5
 8021838:	f345 15c0 	sbfx	r5, r5, #7, #1
 802183c:	e7dc      	b.n	80217f8 <_vfprintf_r+0x380>
 802183e:	3607      	adds	r6, #7
 8021840:	f026 0307 	bic.w	r3, r6, #7
 8021844:	ecb3 7b02 	vldmia	r3!, {d7}
 8021848:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 802184c:	9307      	str	r3, [sp, #28]
 802184e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021850:	ee09 3a10 	vmov	s18, r3
 8021854:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021856:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802185a:	ee09 3a90 	vmov	s19, r3
 802185e:	f04f 32ff 	mov.w	r2, #4294967295
 8021862:	4b3f      	ldr	r3, [pc, #252]	; (8021960 <_vfprintf_r+0x4e8>)
 8021864:	ec51 0b19 	vmov	r0, r1, d9
 8021868:	f7df f970 	bl	8000b4c <__aeabi_dcmpun>
 802186c:	bb10      	cbnz	r0, 80218b4 <_vfprintf_r+0x43c>
 802186e:	4b3c      	ldr	r3, [pc, #240]	; (8021960 <_vfprintf_r+0x4e8>)
 8021870:	ec51 0b19 	vmov	r0, r1, d9
 8021874:	f04f 32ff 	mov.w	r2, #4294967295
 8021878:	f7df f94a 	bl	8000b10 <__aeabi_dcmple>
 802187c:	b9d0      	cbnz	r0, 80218b4 <_vfprintf_r+0x43c>
 802187e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8021882:	2200      	movs	r2, #0
 8021884:	2300      	movs	r3, #0
 8021886:	f7df f939 	bl	8000afc <__aeabi_dcmplt>
 802188a:	b110      	cbz	r0, 8021892 <_vfprintf_r+0x41a>
 802188c:	232d      	movs	r3, #45	; 0x2d
 802188e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8021892:	4a34      	ldr	r2, [pc, #208]	; (8021964 <_vfprintf_r+0x4ec>)
 8021894:	4834      	ldr	r0, [pc, #208]	; (8021968 <_vfprintf_r+0x4f0>)
 8021896:	9b06      	ldr	r3, [sp, #24]
 8021898:	2100      	movs	r1, #0
 802189a:	2b47      	cmp	r3, #71	; 0x47
 802189c:	bfd4      	ite	le
 802189e:	4690      	movle	r8, r2
 80218a0:	4680      	movgt	r8, r0
 80218a2:	2303      	movs	r3, #3
 80218a4:	e9cd 1303 	strd	r1, r3, [sp, #12]
 80218a8:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 80218ac:	2600      	movs	r6, #0
 80218ae:	4633      	mov	r3, r6
 80218b0:	f001 b812 	b.w	80228d8 <_vfprintf_r+0x1460>
 80218b4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80218b8:	4610      	mov	r0, r2
 80218ba:	4619      	mov	r1, r3
 80218bc:	f7df f946 	bl	8000b4c <__aeabi_dcmpun>
 80218c0:	b140      	cbz	r0, 80218d4 <_vfprintf_r+0x45c>
 80218c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80218c4:	4a29      	ldr	r2, [pc, #164]	; (802196c <_vfprintf_r+0x4f4>)
 80218c6:	482a      	ldr	r0, [pc, #168]	; (8021970 <_vfprintf_r+0x4f8>)
 80218c8:	2b00      	cmp	r3, #0
 80218ca:	bfbc      	itt	lt
 80218cc:	232d      	movlt	r3, #45	; 0x2d
 80218ce:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 80218d2:	e7e0      	b.n	8021896 <_vfprintf_r+0x41e>
 80218d4:	9b06      	ldr	r3, [sp, #24]
 80218d6:	f023 0320 	bic.w	r3, r3, #32
 80218da:	2b41      	cmp	r3, #65	; 0x41
 80218dc:	9308      	str	r3, [sp, #32]
 80218de:	d12e      	bne.n	802193e <_vfprintf_r+0x4c6>
 80218e0:	2330      	movs	r3, #48	; 0x30
 80218e2:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 80218e6:	9b06      	ldr	r3, [sp, #24]
 80218e8:	2b61      	cmp	r3, #97	; 0x61
 80218ea:	bf0c      	ite	eq
 80218ec:	2378      	moveq	r3, #120	; 0x78
 80218ee:	2358      	movne	r3, #88	; 0x58
 80218f0:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 80218f4:	9b04      	ldr	r3, [sp, #16]
 80218f6:	2b63      	cmp	r3, #99	; 0x63
 80218f8:	f04b 0b02 	orr.w	fp, fp, #2
 80218fc:	dd3a      	ble.n	8021974 <_vfprintf_r+0x4fc>
 80218fe:	1c59      	adds	r1, r3, #1
 8021900:	4650      	mov	r0, sl
 8021902:	f002 fb2d 	bl	8023f60 <_malloc_r>
 8021906:	4680      	mov	r8, r0
 8021908:	2800      	cmp	r0, #0
 802190a:	f040 8207 	bne.w	8021d1c <_vfprintf_r+0x8a4>
 802190e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8021912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021916:	f8a9 300c 	strh.w	r3, [r9, #12]
 802191a:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 802191e:	07d9      	lsls	r1, r3, #31
 8021920:	d407      	bmi.n	8021932 <_vfprintf_r+0x4ba>
 8021922:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8021926:	059a      	lsls	r2, r3, #22
 8021928:	d403      	bmi.n	8021932 <_vfprintf_r+0x4ba>
 802192a:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 802192e:	f002 faaa 	bl	8023e86 <__retarget_lock_release_recursive>
 8021932:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8021936:	065b      	lsls	r3, r3, #25
 8021938:	f57f ade6 	bpl.w	8021508 <_vfprintf_r+0x90>
 802193c:	e5e1      	b.n	8021502 <_vfprintf_r+0x8a>
 802193e:	9b04      	ldr	r3, [sp, #16]
 8021940:	3301      	adds	r3, #1
 8021942:	f000 81ed 	beq.w	8021d20 <_vfprintf_r+0x8a8>
 8021946:	9b08      	ldr	r3, [sp, #32]
 8021948:	2b47      	cmp	r3, #71	; 0x47
 802194a:	f040 81ec 	bne.w	8021d26 <_vfprintf_r+0x8ae>
 802194e:	9b04      	ldr	r3, [sp, #16]
 8021950:	2b00      	cmp	r3, #0
 8021952:	f040 81e8 	bne.w	8021d26 <_vfprintf_r+0x8ae>
 8021956:	9303      	str	r3, [sp, #12]
 8021958:	2301      	movs	r3, #1
 802195a:	9304      	str	r3, [sp, #16]
 802195c:	e00d      	b.n	802197a <_vfprintf_r+0x502>
 802195e:	bf00      	nop
 8021960:	7fefffff 	.word	0x7fefffff
 8021964:	08071a00 	.word	0x08071a00
 8021968:	08071a04 	.word	0x08071a04
 802196c:	08071a08 	.word	0x08071a08
 8021970:	08071a0c 	.word	0x08071a0c
 8021974:	9003      	str	r0, [sp, #12]
 8021976:	f10d 08d4 	add.w	r8, sp, #212	; 0xd4
 802197a:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 802197e:	9311      	str	r3, [sp, #68]	; 0x44
 8021980:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021982:	2b00      	cmp	r3, #0
 8021984:	f280 81d1 	bge.w	8021d2a <_vfprintf_r+0x8b2>
 8021988:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802198a:	ee08 3a10 	vmov	s16, r3
 802198e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021990:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8021994:	ee08 3a90 	vmov	s17, r3
 8021998:	232d      	movs	r3, #45	; 0x2d
 802199a:	9318      	str	r3, [sp, #96]	; 0x60
 802199c:	9b08      	ldr	r3, [sp, #32]
 802199e:	2b41      	cmp	r3, #65	; 0x41
 80219a0:	f040 81e1 	bne.w	8021d66 <_vfprintf_r+0x8ee>
 80219a4:	eeb0 0a48 	vmov.f32	s0, s16
 80219a8:	eef0 0a68 	vmov.f32	s1, s17
 80219ac:	a81c      	add	r0, sp, #112	; 0x70
 80219ae:	f003 f9f9 	bl	8024da4 <frexp>
 80219b2:	2200      	movs	r2, #0
 80219b4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80219b8:	ec51 0b10 	vmov	r0, r1, d0
 80219bc:	f7de fe2c 	bl	8000618 <__aeabi_dmul>
 80219c0:	2200      	movs	r2, #0
 80219c2:	2300      	movs	r3, #0
 80219c4:	4606      	mov	r6, r0
 80219c6:	460f      	mov	r7, r1
 80219c8:	f7df f88e 	bl	8000ae8 <__aeabi_dcmpeq>
 80219cc:	b108      	cbz	r0, 80219d2 <_vfprintf_r+0x55a>
 80219ce:	2301      	movs	r3, #1
 80219d0:	931c      	str	r3, [sp, #112]	; 0x70
 80219d2:	4ba7      	ldr	r3, [pc, #668]	; (8021c70 <_vfprintf_r+0x7f8>)
 80219d4:	4aa7      	ldr	r2, [pc, #668]	; (8021c74 <_vfprintf_r+0x7fc>)
 80219d6:	9906      	ldr	r1, [sp, #24]
 80219d8:	2961      	cmp	r1, #97	; 0x61
 80219da:	bf18      	it	ne
 80219dc:	461a      	movne	r2, r3
 80219de:	9b04      	ldr	r3, [sp, #16]
 80219e0:	9217      	str	r2, [sp, #92]	; 0x5c
 80219e2:	3b01      	subs	r3, #1
 80219e4:	9305      	str	r3, [sp, #20]
 80219e6:	4645      	mov	r5, r8
 80219e8:	4ba3      	ldr	r3, [pc, #652]	; (8021c78 <_vfprintf_r+0x800>)
 80219ea:	2200      	movs	r2, #0
 80219ec:	4630      	mov	r0, r6
 80219ee:	4639      	mov	r1, r7
 80219f0:	f7de fe12 	bl	8000618 <__aeabi_dmul>
 80219f4:	460f      	mov	r7, r1
 80219f6:	4606      	mov	r6, r0
 80219f8:	f7df f8be 	bl	8000b78 <__aeabi_d2iz>
 80219fc:	9019      	str	r0, [sp, #100]	; 0x64
 80219fe:	f7de fda1 	bl	8000544 <__aeabi_i2d>
 8021a02:	4602      	mov	r2, r0
 8021a04:	460b      	mov	r3, r1
 8021a06:	4630      	mov	r0, r6
 8021a08:	4639      	mov	r1, r7
 8021a0a:	f7de fc4d 	bl	80002a8 <__aeabi_dsub>
 8021a0e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8021a10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021a12:	5c9b      	ldrb	r3, [r3, r2]
 8021a14:	f805 3b01 	strb.w	r3, [r5], #1
 8021a18:	9b05      	ldr	r3, [sp, #20]
 8021a1a:	9309      	str	r3, [sp, #36]	; 0x24
 8021a1c:	1c5a      	adds	r2, r3, #1
 8021a1e:	4606      	mov	r6, r0
 8021a20:	460f      	mov	r7, r1
 8021a22:	d007      	beq.n	8021a34 <_vfprintf_r+0x5bc>
 8021a24:	3b01      	subs	r3, #1
 8021a26:	9305      	str	r3, [sp, #20]
 8021a28:	2200      	movs	r2, #0
 8021a2a:	2300      	movs	r3, #0
 8021a2c:	f7df f85c 	bl	8000ae8 <__aeabi_dcmpeq>
 8021a30:	2800      	cmp	r0, #0
 8021a32:	d0d9      	beq.n	80219e8 <_vfprintf_r+0x570>
 8021a34:	4b91      	ldr	r3, [pc, #580]	; (8021c7c <_vfprintf_r+0x804>)
 8021a36:	2200      	movs	r2, #0
 8021a38:	4630      	mov	r0, r6
 8021a3a:	4639      	mov	r1, r7
 8021a3c:	f7df f87c 	bl	8000b38 <__aeabi_dcmpgt>
 8021a40:	b960      	cbnz	r0, 8021a5c <_vfprintf_r+0x5e4>
 8021a42:	4b8e      	ldr	r3, [pc, #568]	; (8021c7c <_vfprintf_r+0x804>)
 8021a44:	2200      	movs	r2, #0
 8021a46:	4630      	mov	r0, r6
 8021a48:	4639      	mov	r1, r7
 8021a4a:	f7df f84d 	bl	8000ae8 <__aeabi_dcmpeq>
 8021a4e:	2800      	cmp	r0, #0
 8021a50:	f000 8184 	beq.w	8021d5c <_vfprintf_r+0x8e4>
 8021a54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8021a56:	07da      	lsls	r2, r3, #31
 8021a58:	f140 8180 	bpl.w	8021d5c <_vfprintf_r+0x8e4>
 8021a5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021a5e:	9520      	str	r5, [sp, #128]	; 0x80
 8021a60:	7bd9      	ldrb	r1, [r3, #15]
 8021a62:	2030      	movs	r0, #48	; 0x30
 8021a64:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8021a66:	1e53      	subs	r3, r2, #1
 8021a68:	9320      	str	r3, [sp, #128]	; 0x80
 8021a6a:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8021a6e:	428b      	cmp	r3, r1
 8021a70:	f000 8163 	beq.w	8021d3a <_vfprintf_r+0x8c2>
 8021a74:	2b39      	cmp	r3, #57	; 0x39
 8021a76:	bf0b      	itete	eq
 8021a78:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 8021a7a:	3301      	addne	r3, #1
 8021a7c:	7a9b      	ldrbeq	r3, [r3, #10]
 8021a7e:	b2db      	uxtbne	r3, r3
 8021a80:	f802 3c01 	strb.w	r3, [r2, #-1]
 8021a84:	eba5 0308 	sub.w	r3, r5, r8
 8021a88:	9305      	str	r3, [sp, #20]
 8021a8a:	9b08      	ldr	r3, [sp, #32]
 8021a8c:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8021a8e:	2b47      	cmp	r3, #71	; 0x47
 8021a90:	f040 81b1 	bne.w	8021df6 <_vfprintf_r+0x97e>
 8021a94:	1ceb      	adds	r3, r5, #3
 8021a96:	db03      	blt.n	8021aa0 <_vfprintf_r+0x628>
 8021a98:	9b04      	ldr	r3, [sp, #16]
 8021a9a:	42ab      	cmp	r3, r5
 8021a9c:	f280 81d6 	bge.w	8021e4c <_vfprintf_r+0x9d4>
 8021aa0:	9b06      	ldr	r3, [sp, #24]
 8021aa2:	3b02      	subs	r3, #2
 8021aa4:	9306      	str	r3, [sp, #24]
 8021aa6:	9906      	ldr	r1, [sp, #24]
 8021aa8:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8021aac:	f021 0120 	bic.w	r1, r1, #32
 8021ab0:	2941      	cmp	r1, #65	; 0x41
 8021ab2:	bf08      	it	eq
 8021ab4:	320f      	addeq	r2, #15
 8021ab6:	f105 33ff 	add.w	r3, r5, #4294967295
 8021aba:	bf06      	itte	eq
 8021abc:	b2d2      	uxtbeq	r2, r2
 8021abe:	2101      	moveq	r1, #1
 8021ac0:	2100      	movne	r1, #0
 8021ac2:	2b00      	cmp	r3, #0
 8021ac4:	931c      	str	r3, [sp, #112]	; 0x70
 8021ac6:	bfb8      	it	lt
 8021ac8:	f1c5 0301 	rsblt	r3, r5, #1
 8021acc:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8021ad0:	bfb4      	ite	lt
 8021ad2:	222d      	movlt	r2, #45	; 0x2d
 8021ad4:	222b      	movge	r2, #43	; 0x2b
 8021ad6:	2b09      	cmp	r3, #9
 8021ad8:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 8021adc:	f340 81a4 	ble.w	8021e28 <_vfprintf_r+0x9b0>
 8021ae0:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 8021ae4:	260a      	movs	r6, #10
 8021ae6:	4611      	mov	r1, r2
 8021ae8:	fb93 f5f6 	sdiv	r5, r3, r6
 8021aec:	fb06 3015 	mls	r0, r6, r5, r3
 8021af0:	3030      	adds	r0, #48	; 0x30
 8021af2:	f801 0c01 	strb.w	r0, [r1, #-1]
 8021af6:	4618      	mov	r0, r3
 8021af8:	2863      	cmp	r0, #99	; 0x63
 8021afa:	f102 32ff 	add.w	r2, r2, #4294967295
 8021afe:	462b      	mov	r3, r5
 8021b00:	dcf1      	bgt.n	8021ae6 <_vfprintf_r+0x66e>
 8021b02:	3330      	adds	r3, #48	; 0x30
 8021b04:	1e88      	subs	r0, r1, #2
 8021b06:	f802 3c01 	strb.w	r3, [r2, #-1]
 8021b0a:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 8021b0e:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8021b12:	4603      	mov	r3, r0
 8021b14:	42ab      	cmp	r3, r5
 8021b16:	f0c0 8182 	bcc.w	8021e1e <_vfprintf_r+0x9a6>
 8021b1a:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 8021b1e:	1a52      	subs	r2, r2, r1
 8021b20:	42a8      	cmp	r0, r5
 8021b22:	bf88      	it	hi
 8021b24:	2200      	movhi	r2, #0
 8021b26:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 8021b2a:	441a      	add	r2, r3
 8021b2c:	ab1e      	add	r3, sp, #120	; 0x78
 8021b2e:	1ad3      	subs	r3, r2, r3
 8021b30:	9a05      	ldr	r2, [sp, #20]
 8021b32:	9315      	str	r3, [sp, #84]	; 0x54
 8021b34:	2a01      	cmp	r2, #1
 8021b36:	4413      	add	r3, r2
 8021b38:	9304      	str	r3, [sp, #16]
 8021b3a:	dc02      	bgt.n	8021b42 <_vfprintf_r+0x6ca>
 8021b3c:	f01b 0f01 	tst.w	fp, #1
 8021b40:	d003      	beq.n	8021b4a <_vfprintf_r+0x6d2>
 8021b42:	9b04      	ldr	r3, [sp, #16]
 8021b44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021b46:	4413      	add	r3, r2
 8021b48:	9304      	str	r3, [sp, #16]
 8021b4a:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 8021b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8021b52:	9311      	str	r3, [sp, #68]	; 0x44
 8021b54:	2300      	movs	r3, #0
 8021b56:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8021b5a:	461d      	mov	r5, r3
 8021b5c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021b5e:	b113      	cbz	r3, 8021b66 <_vfprintf_r+0x6ee>
 8021b60:	232d      	movs	r3, #45	; 0x2d
 8021b62:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8021b66:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8021b6a:	2600      	movs	r6, #0
 8021b6c:	9b04      	ldr	r3, [sp, #16]
 8021b6e:	42b3      	cmp	r3, r6
 8021b70:	bfb8      	it	lt
 8021b72:	4633      	movlt	r3, r6
 8021b74:	9311      	str	r3, [sp, #68]	; 0x44
 8021b76:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8021b7a:	b113      	cbz	r3, 8021b82 <_vfprintf_r+0x70a>
 8021b7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021b7e:	3301      	adds	r3, #1
 8021b80:	9311      	str	r3, [sp, #68]	; 0x44
 8021b82:	f01b 0302 	ands.w	r3, fp, #2
 8021b86:	9317      	str	r3, [sp, #92]	; 0x5c
 8021b88:	bf1e      	ittt	ne
 8021b8a:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8021b8c:	3302      	addne	r3, #2
 8021b8e:	9311      	strne	r3, [sp, #68]	; 0x44
 8021b90:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 8021b94:	9318      	str	r3, [sp, #96]	; 0x60
 8021b96:	d11f      	bne.n	8021bd8 <_vfprintf_r+0x760>
 8021b98:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8021b9c:	1a9f      	subs	r7, r3, r2
 8021b9e:	2f00      	cmp	r7, #0
 8021ba0:	dd1a      	ble.n	8021bd8 <_vfprintf_r+0x760>
 8021ba2:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8021ba6:	4836      	ldr	r0, [pc, #216]	; (8021c80 <_vfprintf_r+0x808>)
 8021ba8:	6020      	str	r0, [r4, #0]
 8021baa:	2f10      	cmp	r7, #16
 8021bac:	f103 0301 	add.w	r3, r3, #1
 8021bb0:	f104 0108 	add.w	r1, r4, #8
 8021bb4:	f300 82ee 	bgt.w	8022194 <_vfprintf_r+0xd1c>
 8021bb8:	443a      	add	r2, r7
 8021bba:	2b07      	cmp	r3, #7
 8021bbc:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8021bc0:	6067      	str	r7, [r4, #4]
 8021bc2:	f340 82fa 	ble.w	80221ba <_vfprintf_r+0xd42>
 8021bc6:	aa22      	add	r2, sp, #136	; 0x88
 8021bc8:	4649      	mov	r1, r9
 8021bca:	4650      	mov	r0, sl
 8021bcc:	f003 fa10 	bl	8024ff0 <__sprint_r>
 8021bd0:	2800      	cmp	r0, #0
 8021bd2:	f040 8625 	bne.w	8022820 <_vfprintf_r+0x13a8>
 8021bd6:	ac25      	add	r4, sp, #148	; 0x94
 8021bd8:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8021bdc:	b173      	cbz	r3, 8021bfc <_vfprintf_r+0x784>
 8021bde:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 8021be2:	6023      	str	r3, [r4, #0]
 8021be4:	2301      	movs	r3, #1
 8021be6:	6063      	str	r3, [r4, #4]
 8021be8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021bea:	3301      	adds	r3, #1
 8021bec:	9324      	str	r3, [sp, #144]	; 0x90
 8021bee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021bf0:	3301      	adds	r3, #1
 8021bf2:	2b07      	cmp	r3, #7
 8021bf4:	9323      	str	r3, [sp, #140]	; 0x8c
 8021bf6:	f300 82e2 	bgt.w	80221be <_vfprintf_r+0xd46>
 8021bfa:	3408      	adds	r4, #8
 8021bfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021bfe:	b16b      	cbz	r3, 8021c1c <_vfprintf_r+0x7a4>
 8021c00:	ab1b      	add	r3, sp, #108	; 0x6c
 8021c02:	6023      	str	r3, [r4, #0]
 8021c04:	2302      	movs	r3, #2
 8021c06:	6063      	str	r3, [r4, #4]
 8021c08:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021c0a:	3302      	adds	r3, #2
 8021c0c:	9324      	str	r3, [sp, #144]	; 0x90
 8021c0e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021c10:	3301      	adds	r3, #1
 8021c12:	2b07      	cmp	r3, #7
 8021c14:	9323      	str	r3, [sp, #140]	; 0x8c
 8021c16:	f300 82dc 	bgt.w	80221d2 <_vfprintf_r+0xd5a>
 8021c1a:	3408      	adds	r4, #8
 8021c1c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021c1e:	2b80      	cmp	r3, #128	; 0x80
 8021c20:	d11f      	bne.n	8021c62 <_vfprintf_r+0x7ea>
 8021c22:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8021c26:	1a9f      	subs	r7, r3, r2
 8021c28:	2f00      	cmp	r7, #0
 8021c2a:	dd1a      	ble.n	8021c62 <_vfprintf_r+0x7ea>
 8021c2c:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8021c30:	4814      	ldr	r0, [pc, #80]	; (8021c84 <_vfprintf_r+0x80c>)
 8021c32:	6020      	str	r0, [r4, #0]
 8021c34:	2f10      	cmp	r7, #16
 8021c36:	f103 0301 	add.w	r3, r3, #1
 8021c3a:	f104 0108 	add.w	r1, r4, #8
 8021c3e:	f300 82d2 	bgt.w	80221e6 <_vfprintf_r+0xd6e>
 8021c42:	6067      	str	r7, [r4, #4]
 8021c44:	2b07      	cmp	r3, #7
 8021c46:	4417      	add	r7, r2
 8021c48:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8021c4c:	f340 82de 	ble.w	802220c <_vfprintf_r+0xd94>
 8021c50:	aa22      	add	r2, sp, #136	; 0x88
 8021c52:	4649      	mov	r1, r9
 8021c54:	4650      	mov	r0, sl
 8021c56:	f003 f9cb 	bl	8024ff0 <__sprint_r>
 8021c5a:	2800      	cmp	r0, #0
 8021c5c:	f040 85e0 	bne.w	8022820 <_vfprintf_r+0x13a8>
 8021c60:	ac25      	add	r4, sp, #148	; 0x94
 8021c62:	9b04      	ldr	r3, [sp, #16]
 8021c64:	1af6      	subs	r6, r6, r3
 8021c66:	2e00      	cmp	r6, #0
 8021c68:	dd28      	ble.n	8021cbc <_vfprintf_r+0x844>
 8021c6a:	4f06      	ldr	r7, [pc, #24]	; (8021c84 <_vfprintf_r+0x80c>)
 8021c6c:	e00c      	b.n	8021c88 <_vfprintf_r+0x810>
 8021c6e:	bf00      	nop
 8021c70:	08071a21 	.word	0x08071a21
 8021c74:	08071a10 	.word	0x08071a10
 8021c78:	40300000 	.word	0x40300000
 8021c7c:	3fe00000 	.word	0x3fe00000
 8021c80:	08071a54 	.word	0x08071a54
 8021c84:	08071a64 	.word	0x08071a64
 8021c88:	6027      	str	r7, [r4, #0]
 8021c8a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8021c8e:	2e10      	cmp	r6, #16
 8021c90:	f103 0301 	add.w	r3, r3, #1
 8021c94:	f104 0108 	add.w	r1, r4, #8
 8021c98:	f300 82ba 	bgt.w	8022210 <_vfprintf_r+0xd98>
 8021c9c:	6066      	str	r6, [r4, #4]
 8021c9e:	2b07      	cmp	r3, #7
 8021ca0:	4416      	add	r6, r2
 8021ca2:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8021ca6:	f340 82c6 	ble.w	8022236 <_vfprintf_r+0xdbe>
 8021caa:	aa22      	add	r2, sp, #136	; 0x88
 8021cac:	4649      	mov	r1, r9
 8021cae:	4650      	mov	r0, sl
 8021cb0:	f003 f99e 	bl	8024ff0 <__sprint_r>
 8021cb4:	2800      	cmp	r0, #0
 8021cb6:	f040 85b3 	bne.w	8022820 <_vfprintf_r+0x13a8>
 8021cba:	ac25      	add	r4, sp, #148	; 0x94
 8021cbc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8021cc0:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8021cc2:	f040 82bf 	bne.w	8022244 <_vfprintf_r+0xdcc>
 8021cc6:	9b04      	ldr	r3, [sp, #16]
 8021cc8:	f8c4 8000 	str.w	r8, [r4]
 8021ccc:	441e      	add	r6, r3
 8021cce:	6063      	str	r3, [r4, #4]
 8021cd0:	9624      	str	r6, [sp, #144]	; 0x90
 8021cd2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021cd4:	3301      	adds	r3, #1
 8021cd6:	2b07      	cmp	r3, #7
 8021cd8:	9323      	str	r3, [sp, #140]	; 0x8c
 8021cda:	f300 82f8 	bgt.w	80222ce <_vfprintf_r+0xe56>
 8021cde:	3408      	adds	r4, #8
 8021ce0:	f01b 0f04 	tst.w	fp, #4
 8021ce4:	f040 857e 	bne.w	80227e4 <_vfprintf_r+0x136c>
 8021ce8:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8021cec:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021cee:	428a      	cmp	r2, r1
 8021cf0:	bfac      	ite	ge
 8021cf2:	189b      	addge	r3, r3, r2
 8021cf4:	185b      	addlt	r3, r3, r1
 8021cf6:	930f      	str	r3, [sp, #60]	; 0x3c
 8021cf8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021cfa:	b13b      	cbz	r3, 8021d0c <_vfprintf_r+0x894>
 8021cfc:	aa22      	add	r2, sp, #136	; 0x88
 8021cfe:	4649      	mov	r1, r9
 8021d00:	4650      	mov	r0, sl
 8021d02:	f003 f975 	bl	8024ff0 <__sprint_r>
 8021d06:	2800      	cmp	r0, #0
 8021d08:	f040 858a 	bne.w	8022820 <_vfprintf_r+0x13a8>
 8021d0c:	2300      	movs	r3, #0
 8021d0e:	9323      	str	r3, [sp, #140]	; 0x8c
 8021d10:	9b03      	ldr	r3, [sp, #12]
 8021d12:	2b00      	cmp	r3, #0
 8021d14:	f040 85a0 	bne.w	8022858 <_vfprintf_r+0x13e0>
 8021d18:	ac25      	add	r4, sp, #148	; 0x94
 8021d1a:	e0ec      	b.n	8021ef6 <_vfprintf_r+0xa7e>
 8021d1c:	9003      	str	r0, [sp, #12]
 8021d1e:	e62c      	b.n	802197a <_vfprintf_r+0x502>
 8021d20:	9003      	str	r0, [sp, #12]
 8021d22:	2306      	movs	r3, #6
 8021d24:	e619      	b.n	802195a <_vfprintf_r+0x4e2>
 8021d26:	9003      	str	r0, [sp, #12]
 8021d28:	e627      	b.n	802197a <_vfprintf_r+0x502>
 8021d2a:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 8021d2e:	2300      	movs	r3, #0
 8021d30:	eeb0 8a47 	vmov.f32	s16, s14
 8021d34:	eef0 8a67 	vmov.f32	s17, s15
 8021d38:	e62f      	b.n	802199a <_vfprintf_r+0x522>
 8021d3a:	f802 0c01 	strb.w	r0, [r2, #-1]
 8021d3e:	e691      	b.n	8021a64 <_vfprintf_r+0x5ec>
 8021d40:	f803 0b01 	strb.w	r0, [r3], #1
 8021d44:	1aca      	subs	r2, r1, r3
 8021d46:	2a00      	cmp	r2, #0
 8021d48:	dafa      	bge.n	8021d40 <_vfprintf_r+0x8c8>
 8021d4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021d4e:	3201      	adds	r2, #1
 8021d50:	f103 0301 	add.w	r3, r3, #1
 8021d54:	bfb8      	it	lt
 8021d56:	2300      	movlt	r3, #0
 8021d58:	441d      	add	r5, r3
 8021d5a:	e693      	b.n	8021a84 <_vfprintf_r+0x60c>
 8021d5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021d5e:	462b      	mov	r3, r5
 8021d60:	18a9      	adds	r1, r5, r2
 8021d62:	2030      	movs	r0, #48	; 0x30
 8021d64:	e7ee      	b.n	8021d44 <_vfprintf_r+0x8cc>
 8021d66:	9b08      	ldr	r3, [sp, #32]
 8021d68:	2b46      	cmp	r3, #70	; 0x46
 8021d6a:	d005      	beq.n	8021d78 <_vfprintf_r+0x900>
 8021d6c:	2b45      	cmp	r3, #69	; 0x45
 8021d6e:	d11b      	bne.n	8021da8 <_vfprintf_r+0x930>
 8021d70:	9b04      	ldr	r3, [sp, #16]
 8021d72:	1c5d      	adds	r5, r3, #1
 8021d74:	2102      	movs	r1, #2
 8021d76:	e001      	b.n	8021d7c <_vfprintf_r+0x904>
 8021d78:	9d04      	ldr	r5, [sp, #16]
 8021d7a:	2103      	movs	r1, #3
 8021d7c:	ab20      	add	r3, sp, #128	; 0x80
 8021d7e:	9301      	str	r3, [sp, #4]
 8021d80:	ab1d      	add	r3, sp, #116	; 0x74
 8021d82:	9300      	str	r3, [sp, #0]
 8021d84:	462a      	mov	r2, r5
 8021d86:	ab1c      	add	r3, sp, #112	; 0x70
 8021d88:	4650      	mov	r0, sl
 8021d8a:	eeb0 0a48 	vmov.f32	s0, s16
 8021d8e:	eef0 0a68 	vmov.f32	s1, s17
 8021d92:	f000 fee1 	bl	8022b58 <_dtoa_r>
 8021d96:	9b08      	ldr	r3, [sp, #32]
 8021d98:	2b47      	cmp	r3, #71	; 0x47
 8021d9a:	4680      	mov	r8, r0
 8021d9c:	d106      	bne.n	8021dac <_vfprintf_r+0x934>
 8021d9e:	f01b 0f01 	tst.w	fp, #1
 8021da2:	d103      	bne.n	8021dac <_vfprintf_r+0x934>
 8021da4:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8021da6:	e66d      	b.n	8021a84 <_vfprintf_r+0x60c>
 8021da8:	9d04      	ldr	r5, [sp, #16]
 8021daa:	e7e3      	b.n	8021d74 <_vfprintf_r+0x8fc>
 8021dac:	9b08      	ldr	r3, [sp, #32]
 8021dae:	2b46      	cmp	r3, #70	; 0x46
 8021db0:	eb08 0605 	add.w	r6, r8, r5
 8021db4:	d10f      	bne.n	8021dd6 <_vfprintf_r+0x95e>
 8021db6:	f898 3000 	ldrb.w	r3, [r8]
 8021dba:	2b30      	cmp	r3, #48	; 0x30
 8021dbc:	d109      	bne.n	8021dd2 <_vfprintf_r+0x95a>
 8021dbe:	ec51 0b18 	vmov	r0, r1, d8
 8021dc2:	2200      	movs	r2, #0
 8021dc4:	2300      	movs	r3, #0
 8021dc6:	f7de fe8f 	bl	8000ae8 <__aeabi_dcmpeq>
 8021dca:	b910      	cbnz	r0, 8021dd2 <_vfprintf_r+0x95a>
 8021dcc:	f1c5 0501 	rsb	r5, r5, #1
 8021dd0:	951c      	str	r5, [sp, #112]	; 0x70
 8021dd2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021dd4:	441e      	add	r6, r3
 8021dd6:	ec51 0b18 	vmov	r0, r1, d8
 8021dda:	2200      	movs	r2, #0
 8021ddc:	2300      	movs	r3, #0
 8021dde:	f7de fe83 	bl	8000ae8 <__aeabi_dcmpeq>
 8021de2:	b100      	cbz	r0, 8021de6 <_vfprintf_r+0x96e>
 8021de4:	9620      	str	r6, [sp, #128]	; 0x80
 8021de6:	2230      	movs	r2, #48	; 0x30
 8021de8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021dea:	429e      	cmp	r6, r3
 8021dec:	d9da      	bls.n	8021da4 <_vfprintf_r+0x92c>
 8021dee:	1c59      	adds	r1, r3, #1
 8021df0:	9120      	str	r1, [sp, #128]	; 0x80
 8021df2:	701a      	strb	r2, [r3, #0]
 8021df4:	e7f8      	b.n	8021de8 <_vfprintf_r+0x970>
 8021df6:	9b08      	ldr	r3, [sp, #32]
 8021df8:	2b46      	cmp	r3, #70	; 0x46
 8021dfa:	f47f ae54 	bne.w	8021aa6 <_vfprintf_r+0x62e>
 8021dfe:	9a04      	ldr	r2, [sp, #16]
 8021e00:	f00b 0301 	and.w	r3, fp, #1
 8021e04:	2d00      	cmp	r5, #0
 8021e06:	ea43 0302 	orr.w	r3, r3, r2
 8021e0a:	dd1a      	ble.n	8021e42 <_vfprintf_r+0x9ca>
 8021e0c:	2b00      	cmp	r3, #0
 8021e0e:	d034      	beq.n	8021e7a <_vfprintf_r+0xa02>
 8021e10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021e12:	18eb      	adds	r3, r5, r3
 8021e14:	441a      	add	r2, r3
 8021e16:	9204      	str	r2, [sp, #16]
 8021e18:	2366      	movs	r3, #102	; 0x66
 8021e1a:	9306      	str	r3, [sp, #24]
 8021e1c:	e033      	b.n	8021e86 <_vfprintf_r+0xa0e>
 8021e1e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8021e22:	f802 6b01 	strb.w	r6, [r2], #1
 8021e26:	e675      	b.n	8021b14 <_vfprintf_r+0x69c>
 8021e28:	b941      	cbnz	r1, 8021e3c <_vfprintf_r+0x9c4>
 8021e2a:	2230      	movs	r2, #48	; 0x30
 8021e2c:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 8021e30:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8021e34:	3330      	adds	r3, #48	; 0x30
 8021e36:	f802 3b01 	strb.w	r3, [r2], #1
 8021e3a:	e677      	b.n	8021b2c <_vfprintf_r+0x6b4>
 8021e3c:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8021e40:	e7f8      	b.n	8021e34 <_vfprintf_r+0x9bc>
 8021e42:	b1e3      	cbz	r3, 8021e7e <_vfprintf_r+0xa06>
 8021e44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021e46:	9a04      	ldr	r2, [sp, #16]
 8021e48:	3301      	adds	r3, #1
 8021e4a:	e7e3      	b.n	8021e14 <_vfprintf_r+0x99c>
 8021e4c:	9b05      	ldr	r3, [sp, #20]
 8021e4e:	42ab      	cmp	r3, r5
 8021e50:	dc07      	bgt.n	8021e62 <_vfprintf_r+0x9ea>
 8021e52:	f01b 0f01 	tst.w	fp, #1
 8021e56:	d02d      	beq.n	8021eb4 <_vfprintf_r+0xa3c>
 8021e58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021e5a:	18eb      	adds	r3, r5, r3
 8021e5c:	9304      	str	r3, [sp, #16]
 8021e5e:	2367      	movs	r3, #103	; 0x67
 8021e60:	e7db      	b.n	8021e1a <_vfprintf_r+0x9a2>
 8021e62:	9b05      	ldr	r3, [sp, #20]
 8021e64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021e66:	2d00      	cmp	r5, #0
 8021e68:	4413      	add	r3, r2
 8021e6a:	9304      	str	r3, [sp, #16]
 8021e6c:	dcf7      	bgt.n	8021e5e <_vfprintf_r+0x9e6>
 8021e6e:	9a04      	ldr	r2, [sp, #16]
 8021e70:	f1c5 0301 	rsb	r3, r5, #1
 8021e74:	441a      	add	r2, r3
 8021e76:	9204      	str	r2, [sp, #16]
 8021e78:	e7f1      	b.n	8021e5e <_vfprintf_r+0x9e6>
 8021e7a:	9504      	str	r5, [sp, #16]
 8021e7c:	e7cc      	b.n	8021e18 <_vfprintf_r+0x9a0>
 8021e7e:	2366      	movs	r3, #102	; 0x66
 8021e80:	9306      	str	r3, [sp, #24]
 8021e82:	2301      	movs	r3, #1
 8021e84:	9304      	str	r3, [sp, #16]
 8021e86:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 8021e8a:	9309      	str	r3, [sp, #36]	; 0x24
 8021e8c:	d025      	beq.n	8021eda <_vfprintf_r+0xa62>
 8021e8e:	2300      	movs	r3, #0
 8021e90:	2d00      	cmp	r5, #0
 8021e92:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8021e96:	f77f ae61 	ble.w	8021b5c <_vfprintf_r+0x6e4>
 8021e9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021e9c:	781b      	ldrb	r3, [r3, #0]
 8021e9e:	2bff      	cmp	r3, #255	; 0xff
 8021ea0:	d10a      	bne.n	8021eb8 <_vfprintf_r+0xa40>
 8021ea2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8021ea6:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021ea8:	4413      	add	r3, r2
 8021eaa:	9a04      	ldr	r2, [sp, #16]
 8021eac:	fb01 2303 	mla	r3, r1, r3, r2
 8021eb0:	9304      	str	r3, [sp, #16]
 8021eb2:	e653      	b.n	8021b5c <_vfprintf_r+0x6e4>
 8021eb4:	9504      	str	r5, [sp, #16]
 8021eb6:	e7d2      	b.n	8021e5e <_vfprintf_r+0x9e6>
 8021eb8:	42ab      	cmp	r3, r5
 8021eba:	daf2      	bge.n	8021ea2 <_vfprintf_r+0xa2a>
 8021ebc:	1aed      	subs	r5, r5, r3
 8021ebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021ec0:	785b      	ldrb	r3, [r3, #1]
 8021ec2:	b133      	cbz	r3, 8021ed2 <_vfprintf_r+0xa5a>
 8021ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021ec6:	3301      	adds	r3, #1
 8021ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8021eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021ecc:	3301      	adds	r3, #1
 8021ece:	930a      	str	r3, [sp, #40]	; 0x28
 8021ed0:	e7e3      	b.n	8021e9a <_vfprintf_r+0xa22>
 8021ed2:	9b08      	ldr	r3, [sp, #32]
 8021ed4:	3301      	adds	r3, #1
 8021ed6:	9308      	str	r3, [sp, #32]
 8021ed8:	e7df      	b.n	8021e9a <_vfprintf_r+0xa22>
 8021eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021edc:	9308      	str	r3, [sp, #32]
 8021ede:	e63d      	b.n	8021b5c <_vfprintf_r+0x6e4>
 8021ee0:	1d33      	adds	r3, r6, #4
 8021ee2:	f01b 0f20 	tst.w	fp, #32
 8021ee6:	9307      	str	r3, [sp, #28]
 8021ee8:	d00a      	beq.n	8021f00 <_vfprintf_r+0xa88>
 8021eea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021eec:	6833      	ldr	r3, [r6, #0]
 8021eee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8021ef0:	17d2      	asrs	r2, r2, #31
 8021ef2:	e9c3 1200 	strd	r1, r2, [r3]
 8021ef6:	9e07      	ldr	r6, [sp, #28]
 8021ef8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8021efc:	f7ff bb42 	b.w	8021584 <_vfprintf_r+0x10c>
 8021f00:	f01b 0f10 	tst.w	fp, #16
 8021f04:	d003      	beq.n	8021f0e <_vfprintf_r+0xa96>
 8021f06:	6833      	ldr	r3, [r6, #0]
 8021f08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021f0a:	601a      	str	r2, [r3, #0]
 8021f0c:	e7f3      	b.n	8021ef6 <_vfprintf_r+0xa7e>
 8021f0e:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8021f12:	d003      	beq.n	8021f1c <_vfprintf_r+0xaa4>
 8021f14:	6833      	ldr	r3, [r6, #0]
 8021f16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021f18:	801a      	strh	r2, [r3, #0]
 8021f1a:	e7ec      	b.n	8021ef6 <_vfprintf_r+0xa7e>
 8021f1c:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8021f20:	d0f1      	beq.n	8021f06 <_vfprintf_r+0xa8e>
 8021f22:	6833      	ldr	r3, [r6, #0]
 8021f24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021f26:	701a      	strb	r2, [r3, #0]
 8021f28:	e7e5      	b.n	8021ef6 <_vfprintf_r+0xa7e>
 8021f2a:	f04b 0b10 	orr.w	fp, fp, #16
 8021f2e:	f01b 0320 	ands.w	r3, fp, #32
 8021f32:	d01f      	beq.n	8021f74 <_vfprintf_r+0xafc>
 8021f34:	3607      	adds	r6, #7
 8021f36:	f026 0307 	bic.w	r3, r6, #7
 8021f3a:	461a      	mov	r2, r3
 8021f3c:	685d      	ldr	r5, [r3, #4]
 8021f3e:	f852 6b08 	ldr.w	r6, [r2], #8
 8021f42:	9207      	str	r2, [sp, #28]
 8021f44:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8021f48:	2300      	movs	r3, #0
 8021f4a:	2200      	movs	r2, #0
 8021f4c:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 8021f50:	9a04      	ldr	r2, [sp, #16]
 8021f52:	3201      	adds	r2, #1
 8021f54:	f000 8495 	beq.w	8022882 <_vfprintf_r+0x140a>
 8021f58:	ea56 0205 	orrs.w	r2, r6, r5
 8021f5c:	f02b 0780 	bic.w	r7, fp, #128	; 0x80
 8021f60:	f040 8494 	bne.w	802288c <_vfprintf_r+0x1414>
 8021f64:	9a04      	ldr	r2, [sp, #16]
 8021f66:	2a00      	cmp	r2, #0
 8021f68:	f000 80fa 	beq.w	8022160 <_vfprintf_r+0xce8>
 8021f6c:	2b01      	cmp	r3, #1
 8021f6e:	f040 8490 	bne.w	8022892 <_vfprintf_r+0x141a>
 8021f72:	e09f      	b.n	80220b4 <_vfprintf_r+0xc3c>
 8021f74:	4632      	mov	r2, r6
 8021f76:	f01b 0510 	ands.w	r5, fp, #16
 8021f7a:	f852 6b04 	ldr.w	r6, [r2], #4
 8021f7e:	9207      	str	r2, [sp, #28]
 8021f80:	d001      	beq.n	8021f86 <_vfprintf_r+0xb0e>
 8021f82:	461d      	mov	r5, r3
 8021f84:	e7de      	b.n	8021f44 <_vfprintf_r+0xacc>
 8021f86:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8021f8a:	d001      	beq.n	8021f90 <_vfprintf_r+0xb18>
 8021f8c:	b2b6      	uxth	r6, r6
 8021f8e:	e7d9      	b.n	8021f44 <_vfprintf_r+0xacc>
 8021f90:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 8021f94:	d0d6      	beq.n	8021f44 <_vfprintf_r+0xacc>
 8021f96:	b2f6      	uxtb	r6, r6
 8021f98:	e7f3      	b.n	8021f82 <_vfprintf_r+0xb0a>
 8021f9a:	4633      	mov	r3, r6
 8021f9c:	2278      	movs	r2, #120	; 0x78
 8021f9e:	f853 6b04 	ldr.w	r6, [r3], #4
 8021fa2:	9307      	str	r3, [sp, #28]
 8021fa4:	2330      	movs	r3, #48	; 0x30
 8021fa6:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8021faa:	4ba4      	ldr	r3, [pc, #656]	; (802223c <_vfprintf_r+0xdc4>)
 8021fac:	9316      	str	r3, [sp, #88]	; 0x58
 8021fae:	2500      	movs	r5, #0
 8021fb0:	f04b 0b02 	orr.w	fp, fp, #2
 8021fb4:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8021fb8:	2302      	movs	r3, #2
 8021fba:	9206      	str	r2, [sp, #24]
 8021fbc:	e7c5      	b.n	8021f4a <_vfprintf_r+0xad2>
 8021fbe:	4633      	mov	r3, r6
 8021fc0:	2500      	movs	r5, #0
 8021fc2:	f853 8b04 	ldr.w	r8, [r3], #4
 8021fc6:	9307      	str	r3, [sp, #28]
 8021fc8:	9b04      	ldr	r3, [sp, #16]
 8021fca:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 8021fce:	1c5e      	adds	r6, r3, #1
 8021fd0:	d010      	beq.n	8021ff4 <_vfprintf_r+0xb7c>
 8021fd2:	461a      	mov	r2, r3
 8021fd4:	4629      	mov	r1, r5
 8021fd6:	4640      	mov	r0, r8
 8021fd8:	f7de f912 	bl	8000200 <memchr>
 8021fdc:	9003      	str	r0, [sp, #12]
 8021fde:	2800      	cmp	r0, #0
 8021fe0:	f000 80d5 	beq.w	802218e <_vfprintf_r+0xd16>
 8021fe4:	eba0 0308 	sub.w	r3, r0, r8
 8021fe8:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8021fec:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8021ff0:	462e      	mov	r6, r5
 8021ff2:	e5bb      	b.n	8021b6c <_vfprintf_r+0x6f4>
 8021ff4:	4640      	mov	r0, r8
 8021ff6:	f7de f8fb 	bl	80001f0 <strlen>
 8021ffa:	e9cd 5003 	strd	r5, r0, [sp, #12]
 8021ffe:	e455      	b.n	80218ac <_vfprintf_r+0x434>
 8022000:	f04b 0b10 	orr.w	fp, fp, #16
 8022004:	f01b 0320 	ands.w	r3, fp, #32
 8022008:	d009      	beq.n	802201e <_vfprintf_r+0xba6>
 802200a:	3607      	adds	r6, #7
 802200c:	f026 0307 	bic.w	r3, r6, #7
 8022010:	461a      	mov	r2, r3
 8022012:	685d      	ldr	r5, [r3, #4]
 8022014:	f852 6b08 	ldr.w	r6, [r2], #8
 8022018:	9207      	str	r2, [sp, #28]
 802201a:	2301      	movs	r3, #1
 802201c:	e795      	b.n	8021f4a <_vfprintf_r+0xad2>
 802201e:	4632      	mov	r2, r6
 8022020:	f01b 0510 	ands.w	r5, fp, #16
 8022024:	f852 6b04 	ldr.w	r6, [r2], #4
 8022028:	9207      	str	r2, [sp, #28]
 802202a:	d001      	beq.n	8022030 <_vfprintf_r+0xbb8>
 802202c:	461d      	mov	r5, r3
 802202e:	e7f4      	b.n	802201a <_vfprintf_r+0xba2>
 8022030:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8022034:	d001      	beq.n	802203a <_vfprintf_r+0xbc2>
 8022036:	b2b6      	uxth	r6, r6
 8022038:	e7ef      	b.n	802201a <_vfprintf_r+0xba2>
 802203a:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 802203e:	d0ec      	beq.n	802201a <_vfprintf_r+0xba2>
 8022040:	b2f6      	uxtb	r6, r6
 8022042:	e7f3      	b.n	802202c <_vfprintf_r+0xbb4>
 8022044:	4b7e      	ldr	r3, [pc, #504]	; (8022240 <_vfprintf_r+0xdc8>)
 8022046:	9316      	str	r3, [sp, #88]	; 0x58
 8022048:	f01b 0320 	ands.w	r3, fp, #32
 802204c:	d01b      	beq.n	8022086 <_vfprintf_r+0xc0e>
 802204e:	3607      	adds	r6, #7
 8022050:	f026 0307 	bic.w	r3, r6, #7
 8022054:	461a      	mov	r2, r3
 8022056:	685d      	ldr	r5, [r3, #4]
 8022058:	f852 6b08 	ldr.w	r6, [r2], #8
 802205c:	9207      	str	r2, [sp, #28]
 802205e:	f01b 0f01 	tst.w	fp, #1
 8022062:	d00a      	beq.n	802207a <_vfprintf_r+0xc02>
 8022064:	ea56 0305 	orrs.w	r3, r6, r5
 8022068:	d007      	beq.n	802207a <_vfprintf_r+0xc02>
 802206a:	2330      	movs	r3, #48	; 0x30
 802206c:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8022070:	9b06      	ldr	r3, [sp, #24]
 8022072:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8022076:	f04b 0b02 	orr.w	fp, fp, #2
 802207a:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 802207e:	2302      	movs	r3, #2
 8022080:	e763      	b.n	8021f4a <_vfprintf_r+0xad2>
 8022082:	4b6e      	ldr	r3, [pc, #440]	; (802223c <_vfprintf_r+0xdc4>)
 8022084:	e7df      	b.n	8022046 <_vfprintf_r+0xbce>
 8022086:	4632      	mov	r2, r6
 8022088:	f01b 0510 	ands.w	r5, fp, #16
 802208c:	f852 6b04 	ldr.w	r6, [r2], #4
 8022090:	9207      	str	r2, [sp, #28]
 8022092:	d001      	beq.n	8022098 <_vfprintf_r+0xc20>
 8022094:	461d      	mov	r5, r3
 8022096:	e7e2      	b.n	802205e <_vfprintf_r+0xbe6>
 8022098:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 802209c:	d001      	beq.n	80220a2 <_vfprintf_r+0xc2a>
 802209e:	b2b6      	uxth	r6, r6
 80220a0:	e7dd      	b.n	802205e <_vfprintf_r+0xbe6>
 80220a2:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 80220a6:	d0da      	beq.n	802205e <_vfprintf_r+0xbe6>
 80220a8:	b2f6      	uxtb	r6, r6
 80220aa:	e7f3      	b.n	8022094 <_vfprintf_r+0xc1c>
 80220ac:	2e0a      	cmp	r6, #10
 80220ae:	f175 0300 	sbcs.w	r3, r5, #0
 80220b2:	d206      	bcs.n	80220c2 <_vfprintf_r+0xc4a>
 80220b4:	3630      	adds	r6, #48	; 0x30
 80220b6:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 80220ba:	f20d 1837 	addw	r8, sp, #311	; 0x137
 80220be:	f000 bc03 	b.w	80228c8 <_vfprintf_r+0x1450>
 80220c2:	2300      	movs	r3, #0
 80220c4:	9305      	str	r3, [sp, #20]
 80220c6:	f407 6380 	and.w	r3, r7, #1024	; 0x400
 80220ca:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 80220ce:	9303      	str	r3, [sp, #12]
 80220d0:	220a      	movs	r2, #10
 80220d2:	2300      	movs	r3, #0
 80220d4:	4630      	mov	r0, r6
 80220d6:	4629      	mov	r1, r5
 80220d8:	f7de fdc6 	bl	8000c68 <__aeabi_uldivmod>
 80220dc:	9b05      	ldr	r3, [sp, #20]
 80220de:	3301      	adds	r3, #1
 80220e0:	9305      	str	r3, [sp, #20]
 80220e2:	9b03      	ldr	r3, [sp, #12]
 80220e4:	3230      	adds	r2, #48	; 0x30
 80220e6:	f10b 38ff 	add.w	r8, fp, #4294967295
 80220ea:	f80b 2c01 	strb.w	r2, [fp, #-1]
 80220ee:	b1d3      	cbz	r3, 8022126 <_vfprintf_r+0xcae>
 80220f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80220f2:	9a05      	ldr	r2, [sp, #20]
 80220f4:	781b      	ldrb	r3, [r3, #0]
 80220f6:	429a      	cmp	r2, r3
 80220f8:	d115      	bne.n	8022126 <_vfprintf_r+0xcae>
 80220fa:	2aff      	cmp	r2, #255	; 0xff
 80220fc:	d013      	beq.n	8022126 <_vfprintf_r+0xcae>
 80220fe:	2e0a      	cmp	r6, #10
 8022100:	f175 0300 	sbcs.w	r3, r5, #0
 8022104:	d30f      	bcc.n	8022126 <_vfprintf_r+0xcae>
 8022106:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022108:	9914      	ldr	r1, [sp, #80]	; 0x50
 802210a:	eba8 0803 	sub.w	r8, r8, r3
 802210e:	461a      	mov	r2, r3
 8022110:	4640      	mov	r0, r8
 8022112:	f002 fed2 	bl	8024eba <strncpy>
 8022116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022118:	785b      	ldrb	r3, [r3, #1]
 802211a:	b11b      	cbz	r3, 8022124 <_vfprintf_r+0xcac>
 802211c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802211e:	3301      	adds	r3, #1
 8022120:	930a      	str	r3, [sp, #40]	; 0x28
 8022122:	2300      	movs	r3, #0
 8022124:	9305      	str	r3, [sp, #20]
 8022126:	2300      	movs	r3, #0
 8022128:	220a      	movs	r2, #10
 802212a:	4630      	mov	r0, r6
 802212c:	4629      	mov	r1, r5
 802212e:	f7de fd9b 	bl	8000c68 <__aeabi_uldivmod>
 8022132:	2e0a      	cmp	r6, #10
 8022134:	f175 0300 	sbcs.w	r3, r5, #0
 8022138:	f0c0 83c6 	bcc.w	80228c8 <_vfprintf_r+0x1450>
 802213c:	4606      	mov	r6, r0
 802213e:	460d      	mov	r5, r1
 8022140:	46c3      	mov	fp, r8
 8022142:	e7c5      	b.n	80220d0 <_vfprintf_r+0xc58>
 8022144:	f006 030f 	and.w	r3, r6, #15
 8022148:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802214a:	0936      	lsrs	r6, r6, #4
 802214c:	5cd3      	ldrb	r3, [r2, r3]
 802214e:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8022152:	ea46 7605 	orr.w	r6, r6, r5, lsl #28
 8022156:	092d      	lsrs	r5, r5, #4
 8022158:	ea56 0305 	orrs.w	r3, r6, r5
 802215c:	d1f2      	bne.n	8022144 <_vfprintf_r+0xccc>
 802215e:	e3b3      	b.n	80228c8 <_vfprintf_r+0x1450>
 8022160:	b933      	cbnz	r3, 8022170 <_vfprintf_r+0xcf8>
 8022162:	f01b 0f01 	tst.w	fp, #1
 8022166:	d003      	beq.n	8022170 <_vfprintf_r+0xcf8>
 8022168:	2330      	movs	r3, #48	; 0x30
 802216a:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 802216e:	e7a4      	b.n	80220ba <_vfprintf_r+0xc42>
 8022170:	f50d 789c 	add.w	r8, sp, #312	; 0x138
 8022174:	e3a8      	b.n	80228c8 <_vfprintf_r+0x1450>
 8022176:	9b06      	ldr	r3, [sp, #24]
 8022178:	2b00      	cmp	r3, #0
 802217a:	f000 8373 	beq.w	8022864 <_vfprintf_r+0x13ec>
 802217e:	2000      	movs	r0, #0
 8022180:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8022184:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8022188:	9607      	str	r6, [sp, #28]
 802218a:	f7ff bb1e 	b.w	80217ca <_vfprintf_r+0x352>
 802218e:	9e03      	ldr	r6, [sp, #12]
 8022190:	f7ff bb8d 	b.w	80218ae <_vfprintf_r+0x436>
 8022194:	2010      	movs	r0, #16
 8022196:	4402      	add	r2, r0
 8022198:	2b07      	cmp	r3, #7
 802219a:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 802219e:	6060      	str	r0, [r4, #4]
 80221a0:	dd08      	ble.n	80221b4 <_vfprintf_r+0xd3c>
 80221a2:	aa22      	add	r2, sp, #136	; 0x88
 80221a4:	4649      	mov	r1, r9
 80221a6:	4650      	mov	r0, sl
 80221a8:	f002 ff22 	bl	8024ff0 <__sprint_r>
 80221ac:	2800      	cmp	r0, #0
 80221ae:	f040 8337 	bne.w	8022820 <_vfprintf_r+0x13a8>
 80221b2:	a925      	add	r1, sp, #148	; 0x94
 80221b4:	3f10      	subs	r7, #16
 80221b6:	460c      	mov	r4, r1
 80221b8:	e4f3      	b.n	8021ba2 <_vfprintf_r+0x72a>
 80221ba:	460c      	mov	r4, r1
 80221bc:	e50c      	b.n	8021bd8 <_vfprintf_r+0x760>
 80221be:	aa22      	add	r2, sp, #136	; 0x88
 80221c0:	4649      	mov	r1, r9
 80221c2:	4650      	mov	r0, sl
 80221c4:	f002 ff14 	bl	8024ff0 <__sprint_r>
 80221c8:	2800      	cmp	r0, #0
 80221ca:	f040 8329 	bne.w	8022820 <_vfprintf_r+0x13a8>
 80221ce:	ac25      	add	r4, sp, #148	; 0x94
 80221d0:	e514      	b.n	8021bfc <_vfprintf_r+0x784>
 80221d2:	aa22      	add	r2, sp, #136	; 0x88
 80221d4:	4649      	mov	r1, r9
 80221d6:	4650      	mov	r0, sl
 80221d8:	f002 ff0a 	bl	8024ff0 <__sprint_r>
 80221dc:	2800      	cmp	r0, #0
 80221de:	f040 831f 	bne.w	8022820 <_vfprintf_r+0x13a8>
 80221e2:	ac25      	add	r4, sp, #148	; 0x94
 80221e4:	e51a      	b.n	8021c1c <_vfprintf_r+0x7a4>
 80221e6:	2010      	movs	r0, #16
 80221e8:	4402      	add	r2, r0
 80221ea:	2b07      	cmp	r3, #7
 80221ec:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80221f0:	6060      	str	r0, [r4, #4]
 80221f2:	dd08      	ble.n	8022206 <_vfprintf_r+0xd8e>
 80221f4:	aa22      	add	r2, sp, #136	; 0x88
 80221f6:	4649      	mov	r1, r9
 80221f8:	4650      	mov	r0, sl
 80221fa:	f002 fef9 	bl	8024ff0 <__sprint_r>
 80221fe:	2800      	cmp	r0, #0
 8022200:	f040 830e 	bne.w	8022820 <_vfprintf_r+0x13a8>
 8022204:	a925      	add	r1, sp, #148	; 0x94
 8022206:	3f10      	subs	r7, #16
 8022208:	460c      	mov	r4, r1
 802220a:	e50f      	b.n	8021c2c <_vfprintf_r+0x7b4>
 802220c:	460c      	mov	r4, r1
 802220e:	e528      	b.n	8021c62 <_vfprintf_r+0x7ea>
 8022210:	2010      	movs	r0, #16
 8022212:	4402      	add	r2, r0
 8022214:	2b07      	cmp	r3, #7
 8022216:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 802221a:	6060      	str	r0, [r4, #4]
 802221c:	dd08      	ble.n	8022230 <_vfprintf_r+0xdb8>
 802221e:	aa22      	add	r2, sp, #136	; 0x88
 8022220:	4649      	mov	r1, r9
 8022222:	4650      	mov	r0, sl
 8022224:	f002 fee4 	bl	8024ff0 <__sprint_r>
 8022228:	2800      	cmp	r0, #0
 802222a:	f040 82f9 	bne.w	8022820 <_vfprintf_r+0x13a8>
 802222e:	a925      	add	r1, sp, #148	; 0x94
 8022230:	3e10      	subs	r6, #16
 8022232:	460c      	mov	r4, r1
 8022234:	e528      	b.n	8021c88 <_vfprintf_r+0x810>
 8022236:	460c      	mov	r4, r1
 8022238:	e540      	b.n	8021cbc <_vfprintf_r+0x844>
 802223a:	bf00      	nop
 802223c:	08071a10 	.word	0x08071a10
 8022240:	08071a21 	.word	0x08071a21
 8022244:	9b06      	ldr	r3, [sp, #24]
 8022246:	2b65      	cmp	r3, #101	; 0x65
 8022248:	f340 8232 	ble.w	80226b0 <_vfprintf_r+0x1238>
 802224c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8022250:	2200      	movs	r2, #0
 8022252:	2300      	movs	r3, #0
 8022254:	f7de fc48 	bl	8000ae8 <__aeabi_dcmpeq>
 8022258:	2800      	cmp	r0, #0
 802225a:	d068      	beq.n	802232e <_vfprintf_r+0xeb6>
 802225c:	4b6d      	ldr	r3, [pc, #436]	; (8022414 <_vfprintf_r+0xf9c>)
 802225e:	6023      	str	r3, [r4, #0]
 8022260:	2301      	movs	r3, #1
 8022262:	441e      	add	r6, r3
 8022264:	6063      	str	r3, [r4, #4]
 8022266:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8022268:	9624      	str	r6, [sp, #144]	; 0x90
 802226a:	3301      	adds	r3, #1
 802226c:	2b07      	cmp	r3, #7
 802226e:	9323      	str	r3, [sp, #140]	; 0x8c
 8022270:	dc37      	bgt.n	80222e2 <_vfprintf_r+0xe6a>
 8022272:	3408      	adds	r4, #8
 8022274:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022276:	9a05      	ldr	r2, [sp, #20]
 8022278:	4293      	cmp	r3, r2
 802227a:	db03      	blt.n	8022284 <_vfprintf_r+0xe0c>
 802227c:	f01b 0f01 	tst.w	fp, #1
 8022280:	f43f ad2e 	beq.w	8021ce0 <_vfprintf_r+0x868>
 8022284:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022286:	6023      	str	r3, [r4, #0]
 8022288:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802228a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802228c:	6063      	str	r3, [r4, #4]
 802228e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022290:	4413      	add	r3, r2
 8022292:	9324      	str	r3, [sp, #144]	; 0x90
 8022294:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8022296:	3301      	adds	r3, #1
 8022298:	2b07      	cmp	r3, #7
 802229a:	9323      	str	r3, [sp, #140]	; 0x8c
 802229c:	dc2b      	bgt.n	80222f6 <_vfprintf_r+0xe7e>
 802229e:	3408      	adds	r4, #8
 80222a0:	9b05      	ldr	r3, [sp, #20]
 80222a2:	1e5d      	subs	r5, r3, #1
 80222a4:	2d00      	cmp	r5, #0
 80222a6:	f77f ad1b 	ble.w	8021ce0 <_vfprintf_r+0x868>
 80222aa:	4e5b      	ldr	r6, [pc, #364]	; (8022418 <_vfprintf_r+0xfa0>)
 80222ac:	2710      	movs	r7, #16
 80222ae:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80222b2:	2d10      	cmp	r5, #16
 80222b4:	f103 0301 	add.w	r3, r3, #1
 80222b8:	f104 0108 	add.w	r1, r4, #8
 80222bc:	6026      	str	r6, [r4, #0]
 80222be:	dc24      	bgt.n	802230a <_vfprintf_r+0xe92>
 80222c0:	442a      	add	r2, r5
 80222c2:	6065      	str	r5, [r4, #4]
 80222c4:	9224      	str	r2, [sp, #144]	; 0x90
 80222c6:	2b07      	cmp	r3, #7
 80222c8:	9323      	str	r3, [sp, #140]	; 0x8c
 80222ca:	f340 8288 	ble.w	80227de <_vfprintf_r+0x1366>
 80222ce:	aa22      	add	r2, sp, #136	; 0x88
 80222d0:	4649      	mov	r1, r9
 80222d2:	4650      	mov	r0, sl
 80222d4:	f002 fe8c 	bl	8024ff0 <__sprint_r>
 80222d8:	2800      	cmp	r0, #0
 80222da:	f040 82a1 	bne.w	8022820 <_vfprintf_r+0x13a8>
 80222de:	ac25      	add	r4, sp, #148	; 0x94
 80222e0:	e4fe      	b.n	8021ce0 <_vfprintf_r+0x868>
 80222e2:	aa22      	add	r2, sp, #136	; 0x88
 80222e4:	4649      	mov	r1, r9
 80222e6:	4650      	mov	r0, sl
 80222e8:	f002 fe82 	bl	8024ff0 <__sprint_r>
 80222ec:	2800      	cmp	r0, #0
 80222ee:	f040 8297 	bne.w	8022820 <_vfprintf_r+0x13a8>
 80222f2:	ac25      	add	r4, sp, #148	; 0x94
 80222f4:	e7be      	b.n	8022274 <_vfprintf_r+0xdfc>
 80222f6:	aa22      	add	r2, sp, #136	; 0x88
 80222f8:	4649      	mov	r1, r9
 80222fa:	4650      	mov	r0, sl
 80222fc:	f002 fe78 	bl	8024ff0 <__sprint_r>
 8022300:	2800      	cmp	r0, #0
 8022302:	f040 828d 	bne.w	8022820 <_vfprintf_r+0x13a8>
 8022306:	ac25      	add	r4, sp, #148	; 0x94
 8022308:	e7ca      	b.n	80222a0 <_vfprintf_r+0xe28>
 802230a:	3210      	adds	r2, #16
 802230c:	2b07      	cmp	r3, #7
 802230e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8022312:	6067      	str	r7, [r4, #4]
 8022314:	dd08      	ble.n	8022328 <_vfprintf_r+0xeb0>
 8022316:	aa22      	add	r2, sp, #136	; 0x88
 8022318:	4649      	mov	r1, r9
 802231a:	4650      	mov	r0, sl
 802231c:	f002 fe68 	bl	8024ff0 <__sprint_r>
 8022320:	2800      	cmp	r0, #0
 8022322:	f040 827d 	bne.w	8022820 <_vfprintf_r+0x13a8>
 8022326:	a925      	add	r1, sp, #148	; 0x94
 8022328:	3d10      	subs	r5, #16
 802232a:	460c      	mov	r4, r1
 802232c:	e7bf      	b.n	80222ae <_vfprintf_r+0xe36>
 802232e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022330:	2b00      	cmp	r3, #0
 8022332:	dc73      	bgt.n	802241c <_vfprintf_r+0xfa4>
 8022334:	4b37      	ldr	r3, [pc, #220]	; (8022414 <_vfprintf_r+0xf9c>)
 8022336:	6023      	str	r3, [r4, #0]
 8022338:	2301      	movs	r3, #1
 802233a:	441e      	add	r6, r3
 802233c:	6063      	str	r3, [r4, #4]
 802233e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8022340:	9624      	str	r6, [sp, #144]	; 0x90
 8022342:	3301      	adds	r3, #1
 8022344:	2b07      	cmp	r3, #7
 8022346:	9323      	str	r3, [sp, #140]	; 0x8c
 8022348:	dc3d      	bgt.n	80223c6 <_vfprintf_r+0xf4e>
 802234a:	3408      	adds	r4, #8
 802234c:	9905      	ldr	r1, [sp, #20]
 802234e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8022350:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022352:	430a      	orrs	r2, r1
 8022354:	f00b 0101 	and.w	r1, fp, #1
 8022358:	430a      	orrs	r2, r1
 802235a:	f43f acc1 	beq.w	8021ce0 <_vfprintf_r+0x868>
 802235e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022360:	6022      	str	r2, [r4, #0]
 8022362:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022364:	6062      	str	r2, [r4, #4]
 8022366:	4413      	add	r3, r2
 8022368:	9324      	str	r3, [sp, #144]	; 0x90
 802236a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802236c:	3301      	adds	r3, #1
 802236e:	2b07      	cmp	r3, #7
 8022370:	9323      	str	r3, [sp, #140]	; 0x8c
 8022372:	dc32      	bgt.n	80223da <_vfprintf_r+0xf62>
 8022374:	3408      	adds	r4, #8
 8022376:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8022378:	2d00      	cmp	r5, #0
 802237a:	da1b      	bge.n	80223b4 <_vfprintf_r+0xf3c>
 802237c:	4e26      	ldr	r6, [pc, #152]	; (8022418 <_vfprintf_r+0xfa0>)
 802237e:	426d      	negs	r5, r5
 8022380:	4623      	mov	r3, r4
 8022382:	2710      	movs	r7, #16
 8022384:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 8022388:	2d10      	cmp	r5, #16
 802238a:	f102 0201 	add.w	r2, r2, #1
 802238e:	f104 0408 	add.w	r4, r4, #8
 8022392:	601e      	str	r6, [r3, #0]
 8022394:	dc2b      	bgt.n	80223ee <_vfprintf_r+0xf76>
 8022396:	605d      	str	r5, [r3, #4]
 8022398:	2a07      	cmp	r2, #7
 802239a:	440d      	add	r5, r1
 802239c:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 80223a0:	dd08      	ble.n	80223b4 <_vfprintf_r+0xf3c>
 80223a2:	aa22      	add	r2, sp, #136	; 0x88
 80223a4:	4649      	mov	r1, r9
 80223a6:	4650      	mov	r0, sl
 80223a8:	f002 fe22 	bl	8024ff0 <__sprint_r>
 80223ac:	2800      	cmp	r0, #0
 80223ae:	f040 8237 	bne.w	8022820 <_vfprintf_r+0x13a8>
 80223b2:	ac25      	add	r4, sp, #148	; 0x94
 80223b4:	9b05      	ldr	r3, [sp, #20]
 80223b6:	9a05      	ldr	r2, [sp, #20]
 80223b8:	6063      	str	r3, [r4, #4]
 80223ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80223bc:	f8c4 8000 	str.w	r8, [r4]
 80223c0:	4413      	add	r3, r2
 80223c2:	9324      	str	r3, [sp, #144]	; 0x90
 80223c4:	e485      	b.n	8021cd2 <_vfprintf_r+0x85a>
 80223c6:	aa22      	add	r2, sp, #136	; 0x88
 80223c8:	4649      	mov	r1, r9
 80223ca:	4650      	mov	r0, sl
 80223cc:	f002 fe10 	bl	8024ff0 <__sprint_r>
 80223d0:	2800      	cmp	r0, #0
 80223d2:	f040 8225 	bne.w	8022820 <_vfprintf_r+0x13a8>
 80223d6:	ac25      	add	r4, sp, #148	; 0x94
 80223d8:	e7b8      	b.n	802234c <_vfprintf_r+0xed4>
 80223da:	aa22      	add	r2, sp, #136	; 0x88
 80223dc:	4649      	mov	r1, r9
 80223de:	4650      	mov	r0, sl
 80223e0:	f002 fe06 	bl	8024ff0 <__sprint_r>
 80223e4:	2800      	cmp	r0, #0
 80223e6:	f040 821b 	bne.w	8022820 <_vfprintf_r+0x13a8>
 80223ea:	ac25      	add	r4, sp, #148	; 0x94
 80223ec:	e7c3      	b.n	8022376 <_vfprintf_r+0xefe>
 80223ee:	3110      	adds	r1, #16
 80223f0:	2a07      	cmp	r2, #7
 80223f2:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 80223f6:	605f      	str	r7, [r3, #4]
 80223f8:	dd08      	ble.n	802240c <_vfprintf_r+0xf94>
 80223fa:	aa22      	add	r2, sp, #136	; 0x88
 80223fc:	4649      	mov	r1, r9
 80223fe:	4650      	mov	r0, sl
 8022400:	f002 fdf6 	bl	8024ff0 <__sprint_r>
 8022404:	2800      	cmp	r0, #0
 8022406:	f040 820b 	bne.w	8022820 <_vfprintf_r+0x13a8>
 802240a:	ac25      	add	r4, sp, #148	; 0x94
 802240c:	3d10      	subs	r5, #16
 802240e:	4623      	mov	r3, r4
 8022410:	e7b8      	b.n	8022384 <_vfprintf_r+0xf0c>
 8022412:	bf00      	nop
 8022414:	08071a32 	.word	0x08071a32
 8022418:	08071a64 	.word	0x08071a64
 802241c:	9f05      	ldr	r7, [sp, #20]
 802241e:	42af      	cmp	r7, r5
 8022420:	bfa8      	it	ge
 8022422:	462f      	movge	r7, r5
 8022424:	2f00      	cmp	r7, #0
 8022426:	dd09      	ble.n	802243c <_vfprintf_r+0xfc4>
 8022428:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802242a:	3301      	adds	r3, #1
 802242c:	443e      	add	r6, r7
 802242e:	2b07      	cmp	r3, #7
 8022430:	e9c4 8700 	strd	r8, r7, [r4]
 8022434:	9624      	str	r6, [sp, #144]	; 0x90
 8022436:	9323      	str	r3, [sp, #140]	; 0x8c
 8022438:	dc75      	bgt.n	8022526 <_vfprintf_r+0x10ae>
 802243a:	3408      	adds	r4, #8
 802243c:	2f00      	cmp	r7, #0
 802243e:	bfac      	ite	ge
 8022440:	1bee      	subge	r6, r5, r7
 8022442:	462e      	movlt	r6, r5
 8022444:	2e00      	cmp	r6, #0
 8022446:	dd18      	ble.n	802247a <_vfprintf_r+0x1002>
 8022448:	4f98      	ldr	r7, [pc, #608]	; (80226ac <_vfprintf_r+0x1234>)
 802244a:	6027      	str	r7, [r4, #0]
 802244c:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8022450:	2e10      	cmp	r6, #16
 8022452:	f103 0301 	add.w	r3, r3, #1
 8022456:	f104 0108 	add.w	r1, r4, #8
 802245a:	dc6e      	bgt.n	802253a <_vfprintf_r+0x10c2>
 802245c:	6066      	str	r6, [r4, #4]
 802245e:	2b07      	cmp	r3, #7
 8022460:	4416      	add	r6, r2
 8022462:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8022466:	dd7b      	ble.n	8022560 <_vfprintf_r+0x10e8>
 8022468:	aa22      	add	r2, sp, #136	; 0x88
 802246a:	4649      	mov	r1, r9
 802246c:	4650      	mov	r0, sl
 802246e:	f002 fdbf 	bl	8024ff0 <__sprint_r>
 8022472:	2800      	cmp	r0, #0
 8022474:	f040 81d4 	bne.w	8022820 <_vfprintf_r+0x13a8>
 8022478:	ac25      	add	r4, sp, #148	; 0x94
 802247a:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 802247e:	4445      	add	r5, r8
 8022480:	d00a      	beq.n	8022498 <_vfprintf_r+0x1020>
 8022482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022484:	2b00      	cmp	r3, #0
 8022486:	d16d      	bne.n	8022564 <_vfprintf_r+0x10ec>
 8022488:	9b08      	ldr	r3, [sp, #32]
 802248a:	2b00      	cmp	r3, #0
 802248c:	d16d      	bne.n	802256a <_vfprintf_r+0x10f2>
 802248e:	9b05      	ldr	r3, [sp, #20]
 8022490:	4443      	add	r3, r8
 8022492:	429d      	cmp	r5, r3
 8022494:	bf28      	it	cs
 8022496:	461d      	movcs	r5, r3
 8022498:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802249a:	9a05      	ldr	r2, [sp, #20]
 802249c:	4293      	cmp	r3, r2
 802249e:	db02      	blt.n	80224a6 <_vfprintf_r+0x102e>
 80224a0:	f01b 0f01 	tst.w	fp, #1
 80224a4:	d00e      	beq.n	80224c4 <_vfprintf_r+0x104c>
 80224a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80224a8:	6023      	str	r3, [r4, #0]
 80224aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80224ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80224ae:	6063      	str	r3, [r4, #4]
 80224b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80224b2:	4413      	add	r3, r2
 80224b4:	9324      	str	r3, [sp, #144]	; 0x90
 80224b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80224b8:	3301      	adds	r3, #1
 80224ba:	2b07      	cmp	r3, #7
 80224bc:	9323      	str	r3, [sp, #140]	; 0x8c
 80224be:	f300 80cf 	bgt.w	8022660 <_vfprintf_r+0x11e8>
 80224c2:	3408      	adds	r4, #8
 80224c4:	9b05      	ldr	r3, [sp, #20]
 80224c6:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80224c8:	eb08 0203 	add.w	r2, r8, r3
 80224cc:	1b9e      	subs	r6, r3, r6
 80224ce:	1b52      	subs	r2, r2, r5
 80224d0:	4296      	cmp	r6, r2
 80224d2:	bfa8      	it	ge
 80224d4:	4616      	movge	r6, r2
 80224d6:	2e00      	cmp	r6, #0
 80224d8:	dd0b      	ble.n	80224f2 <_vfprintf_r+0x107a>
 80224da:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80224dc:	4433      	add	r3, r6
 80224de:	9324      	str	r3, [sp, #144]	; 0x90
 80224e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80224e2:	3301      	adds	r3, #1
 80224e4:	2b07      	cmp	r3, #7
 80224e6:	e9c4 5600 	strd	r5, r6, [r4]
 80224ea:	9323      	str	r3, [sp, #140]	; 0x8c
 80224ec:	f300 80c2 	bgt.w	8022674 <_vfprintf_r+0x11fc>
 80224f0:	3408      	adds	r4, #8
 80224f2:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80224f4:	9b05      	ldr	r3, [sp, #20]
 80224f6:	2e00      	cmp	r6, #0
 80224f8:	eba3 0505 	sub.w	r5, r3, r5
 80224fc:	bfa8      	it	ge
 80224fe:	1bad      	subge	r5, r5, r6
 8022500:	2d00      	cmp	r5, #0
 8022502:	f77f abed 	ble.w	8021ce0 <_vfprintf_r+0x868>
 8022506:	4e69      	ldr	r6, [pc, #420]	; (80226ac <_vfprintf_r+0x1234>)
 8022508:	2710      	movs	r7, #16
 802250a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 802250e:	2d10      	cmp	r5, #16
 8022510:	f103 0301 	add.w	r3, r3, #1
 8022514:	f104 0108 	add.w	r1, r4, #8
 8022518:	6026      	str	r6, [r4, #0]
 802251a:	f300 80b5 	bgt.w	8022688 <_vfprintf_r+0x1210>
 802251e:	6065      	str	r5, [r4, #4]
 8022520:	4415      	add	r5, r2
 8022522:	9524      	str	r5, [sp, #144]	; 0x90
 8022524:	e6cf      	b.n	80222c6 <_vfprintf_r+0xe4e>
 8022526:	aa22      	add	r2, sp, #136	; 0x88
 8022528:	4649      	mov	r1, r9
 802252a:	4650      	mov	r0, sl
 802252c:	f002 fd60 	bl	8024ff0 <__sprint_r>
 8022530:	2800      	cmp	r0, #0
 8022532:	f040 8175 	bne.w	8022820 <_vfprintf_r+0x13a8>
 8022536:	ac25      	add	r4, sp, #148	; 0x94
 8022538:	e780      	b.n	802243c <_vfprintf_r+0xfc4>
 802253a:	2010      	movs	r0, #16
 802253c:	4402      	add	r2, r0
 802253e:	2b07      	cmp	r3, #7
 8022540:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8022544:	6060      	str	r0, [r4, #4]
 8022546:	dd08      	ble.n	802255a <_vfprintf_r+0x10e2>
 8022548:	aa22      	add	r2, sp, #136	; 0x88
 802254a:	4649      	mov	r1, r9
 802254c:	4650      	mov	r0, sl
 802254e:	f002 fd4f 	bl	8024ff0 <__sprint_r>
 8022552:	2800      	cmp	r0, #0
 8022554:	f040 8164 	bne.w	8022820 <_vfprintf_r+0x13a8>
 8022558:	a925      	add	r1, sp, #148	; 0x94
 802255a:	3e10      	subs	r6, #16
 802255c:	460c      	mov	r4, r1
 802255e:	e774      	b.n	802244a <_vfprintf_r+0xfd2>
 8022560:	460c      	mov	r4, r1
 8022562:	e78a      	b.n	802247a <_vfprintf_r+0x1002>
 8022564:	9b08      	ldr	r3, [sp, #32]
 8022566:	2b00      	cmp	r3, #0
 8022568:	d04a      	beq.n	8022600 <_vfprintf_r+0x1188>
 802256a:	9b08      	ldr	r3, [sp, #32]
 802256c:	3b01      	subs	r3, #1
 802256e:	9308      	str	r3, [sp, #32]
 8022570:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022572:	6023      	str	r3, [r4, #0]
 8022574:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022576:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022578:	6063      	str	r3, [r4, #4]
 802257a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802257c:	4413      	add	r3, r2
 802257e:	9324      	str	r3, [sp, #144]	; 0x90
 8022580:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8022582:	3301      	adds	r3, #1
 8022584:	2b07      	cmp	r3, #7
 8022586:	9323      	str	r3, [sp, #140]	; 0x8c
 8022588:	dc41      	bgt.n	802260e <_vfprintf_r+0x1196>
 802258a:	3408      	adds	r4, #8
 802258c:	9b05      	ldr	r3, [sp, #20]
 802258e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022590:	eb08 0703 	add.w	r7, r8, r3
 8022594:	1b7b      	subs	r3, r7, r5
 8022596:	7817      	ldrb	r7, [r2, #0]
 8022598:	429f      	cmp	r7, r3
 802259a:	bfa8      	it	ge
 802259c:	461f      	movge	r7, r3
 802259e:	2f00      	cmp	r7, #0
 80225a0:	dd0a      	ble.n	80225b8 <_vfprintf_r+0x1140>
 80225a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80225a4:	443b      	add	r3, r7
 80225a6:	9324      	str	r3, [sp, #144]	; 0x90
 80225a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80225aa:	3301      	adds	r3, #1
 80225ac:	2b07      	cmp	r3, #7
 80225ae:	e9c4 5700 	strd	r5, r7, [r4]
 80225b2:	9323      	str	r3, [sp, #140]	; 0x8c
 80225b4:	dc35      	bgt.n	8022622 <_vfprintf_r+0x11aa>
 80225b6:	3408      	adds	r4, #8
 80225b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80225ba:	781e      	ldrb	r6, [r3, #0]
 80225bc:	2f00      	cmp	r7, #0
 80225be:	bfa8      	it	ge
 80225c0:	1bf6      	subge	r6, r6, r7
 80225c2:	2e00      	cmp	r6, #0
 80225c4:	dd18      	ble.n	80225f8 <_vfprintf_r+0x1180>
 80225c6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80225ca:	4838      	ldr	r0, [pc, #224]	; (80226ac <_vfprintf_r+0x1234>)
 80225cc:	6020      	str	r0, [r4, #0]
 80225ce:	2e10      	cmp	r6, #16
 80225d0:	f103 0301 	add.w	r3, r3, #1
 80225d4:	f104 0108 	add.w	r1, r4, #8
 80225d8:	dc2d      	bgt.n	8022636 <_vfprintf_r+0x11be>
 80225da:	6066      	str	r6, [r4, #4]
 80225dc:	2b07      	cmp	r3, #7
 80225de:	4416      	add	r6, r2
 80225e0:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80225e4:	dd3a      	ble.n	802265c <_vfprintf_r+0x11e4>
 80225e6:	aa22      	add	r2, sp, #136	; 0x88
 80225e8:	4649      	mov	r1, r9
 80225ea:	4650      	mov	r0, sl
 80225ec:	f002 fd00 	bl	8024ff0 <__sprint_r>
 80225f0:	2800      	cmp	r0, #0
 80225f2:	f040 8115 	bne.w	8022820 <_vfprintf_r+0x13a8>
 80225f6:	ac25      	add	r4, sp, #148	; 0x94
 80225f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80225fa:	781b      	ldrb	r3, [r3, #0]
 80225fc:	441d      	add	r5, r3
 80225fe:	e740      	b.n	8022482 <_vfprintf_r+0x100a>
 8022600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022602:	3b01      	subs	r3, #1
 8022604:	930a      	str	r3, [sp, #40]	; 0x28
 8022606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022608:	3b01      	subs	r3, #1
 802260a:	9309      	str	r3, [sp, #36]	; 0x24
 802260c:	e7b0      	b.n	8022570 <_vfprintf_r+0x10f8>
 802260e:	aa22      	add	r2, sp, #136	; 0x88
 8022610:	4649      	mov	r1, r9
 8022612:	4650      	mov	r0, sl
 8022614:	f002 fcec 	bl	8024ff0 <__sprint_r>
 8022618:	2800      	cmp	r0, #0
 802261a:	f040 8101 	bne.w	8022820 <_vfprintf_r+0x13a8>
 802261e:	ac25      	add	r4, sp, #148	; 0x94
 8022620:	e7b4      	b.n	802258c <_vfprintf_r+0x1114>
 8022622:	aa22      	add	r2, sp, #136	; 0x88
 8022624:	4649      	mov	r1, r9
 8022626:	4650      	mov	r0, sl
 8022628:	f002 fce2 	bl	8024ff0 <__sprint_r>
 802262c:	2800      	cmp	r0, #0
 802262e:	f040 80f7 	bne.w	8022820 <_vfprintf_r+0x13a8>
 8022632:	ac25      	add	r4, sp, #148	; 0x94
 8022634:	e7c0      	b.n	80225b8 <_vfprintf_r+0x1140>
 8022636:	2010      	movs	r0, #16
 8022638:	4402      	add	r2, r0
 802263a:	2b07      	cmp	r3, #7
 802263c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8022640:	6060      	str	r0, [r4, #4]
 8022642:	dd08      	ble.n	8022656 <_vfprintf_r+0x11de>
 8022644:	aa22      	add	r2, sp, #136	; 0x88
 8022646:	4649      	mov	r1, r9
 8022648:	4650      	mov	r0, sl
 802264a:	f002 fcd1 	bl	8024ff0 <__sprint_r>
 802264e:	2800      	cmp	r0, #0
 8022650:	f040 80e6 	bne.w	8022820 <_vfprintf_r+0x13a8>
 8022654:	a925      	add	r1, sp, #148	; 0x94
 8022656:	3e10      	subs	r6, #16
 8022658:	460c      	mov	r4, r1
 802265a:	e7b4      	b.n	80225c6 <_vfprintf_r+0x114e>
 802265c:	460c      	mov	r4, r1
 802265e:	e7cb      	b.n	80225f8 <_vfprintf_r+0x1180>
 8022660:	aa22      	add	r2, sp, #136	; 0x88
 8022662:	4649      	mov	r1, r9
 8022664:	4650      	mov	r0, sl
 8022666:	f002 fcc3 	bl	8024ff0 <__sprint_r>
 802266a:	2800      	cmp	r0, #0
 802266c:	f040 80d8 	bne.w	8022820 <_vfprintf_r+0x13a8>
 8022670:	ac25      	add	r4, sp, #148	; 0x94
 8022672:	e727      	b.n	80224c4 <_vfprintf_r+0x104c>
 8022674:	aa22      	add	r2, sp, #136	; 0x88
 8022676:	4649      	mov	r1, r9
 8022678:	4650      	mov	r0, sl
 802267a:	f002 fcb9 	bl	8024ff0 <__sprint_r>
 802267e:	2800      	cmp	r0, #0
 8022680:	f040 80ce 	bne.w	8022820 <_vfprintf_r+0x13a8>
 8022684:	ac25      	add	r4, sp, #148	; 0x94
 8022686:	e734      	b.n	80224f2 <_vfprintf_r+0x107a>
 8022688:	3210      	adds	r2, #16
 802268a:	2b07      	cmp	r3, #7
 802268c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8022690:	6067      	str	r7, [r4, #4]
 8022692:	dd08      	ble.n	80226a6 <_vfprintf_r+0x122e>
 8022694:	aa22      	add	r2, sp, #136	; 0x88
 8022696:	4649      	mov	r1, r9
 8022698:	4650      	mov	r0, sl
 802269a:	f002 fca9 	bl	8024ff0 <__sprint_r>
 802269e:	2800      	cmp	r0, #0
 80226a0:	f040 80be 	bne.w	8022820 <_vfprintf_r+0x13a8>
 80226a4:	a925      	add	r1, sp, #148	; 0x94
 80226a6:	3d10      	subs	r5, #16
 80226a8:	460c      	mov	r4, r1
 80226aa:	e72e      	b.n	802250a <_vfprintf_r+0x1092>
 80226ac:	08071a64 	.word	0x08071a64
 80226b0:	9a05      	ldr	r2, [sp, #20]
 80226b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80226b4:	2a01      	cmp	r2, #1
 80226b6:	f106 0601 	add.w	r6, r6, #1
 80226ba:	f103 0301 	add.w	r3, r3, #1
 80226be:	f104 0508 	add.w	r5, r4, #8
 80226c2:	dc02      	bgt.n	80226ca <_vfprintf_r+0x1252>
 80226c4:	f01b 0f01 	tst.w	fp, #1
 80226c8:	d07e      	beq.n	80227c8 <_vfprintf_r+0x1350>
 80226ca:	2201      	movs	r2, #1
 80226cc:	2b07      	cmp	r3, #7
 80226ce:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80226d2:	f8c4 8000 	str.w	r8, [r4]
 80226d6:	6062      	str	r2, [r4, #4]
 80226d8:	dd08      	ble.n	80226ec <_vfprintf_r+0x1274>
 80226da:	aa22      	add	r2, sp, #136	; 0x88
 80226dc:	4649      	mov	r1, r9
 80226de:	4650      	mov	r0, sl
 80226e0:	f002 fc86 	bl	8024ff0 <__sprint_r>
 80226e4:	2800      	cmp	r0, #0
 80226e6:	f040 809b 	bne.w	8022820 <_vfprintf_r+0x13a8>
 80226ea:	ad25      	add	r5, sp, #148	; 0x94
 80226ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80226ee:	602b      	str	r3, [r5, #0]
 80226f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80226f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80226f4:	606b      	str	r3, [r5, #4]
 80226f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80226f8:	4413      	add	r3, r2
 80226fa:	9324      	str	r3, [sp, #144]	; 0x90
 80226fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80226fe:	3301      	adds	r3, #1
 8022700:	2b07      	cmp	r3, #7
 8022702:	9323      	str	r3, [sp, #140]	; 0x8c
 8022704:	dc32      	bgt.n	802276c <_vfprintf_r+0x12f4>
 8022706:	3508      	adds	r5, #8
 8022708:	9b05      	ldr	r3, [sp, #20]
 802270a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 802270e:	1e5c      	subs	r4, r3, #1
 8022710:	2200      	movs	r2, #0
 8022712:	2300      	movs	r3, #0
 8022714:	f7de f9e8 	bl	8000ae8 <__aeabi_dcmpeq>
 8022718:	2800      	cmp	r0, #0
 802271a:	d130      	bne.n	802277e <_vfprintf_r+0x1306>
 802271c:	9923      	ldr	r1, [sp, #140]	; 0x8c
 802271e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022720:	9a05      	ldr	r2, [sp, #20]
 8022722:	3101      	adds	r1, #1
 8022724:	3b01      	subs	r3, #1
 8022726:	f108 0001 	add.w	r0, r8, #1
 802272a:	4413      	add	r3, r2
 802272c:	2907      	cmp	r1, #7
 802272e:	e9c5 0400 	strd	r0, r4, [r5]
 8022732:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 8022736:	dd50      	ble.n	80227da <_vfprintf_r+0x1362>
 8022738:	aa22      	add	r2, sp, #136	; 0x88
 802273a:	4649      	mov	r1, r9
 802273c:	4650      	mov	r0, sl
 802273e:	f002 fc57 	bl	8024ff0 <__sprint_r>
 8022742:	2800      	cmp	r0, #0
 8022744:	d16c      	bne.n	8022820 <_vfprintf_r+0x13a8>
 8022746:	ad25      	add	r5, sp, #148	; 0x94
 8022748:	ab1e      	add	r3, sp, #120	; 0x78
 802274a:	602b      	str	r3, [r5, #0]
 802274c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802274e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8022750:	606b      	str	r3, [r5, #4]
 8022752:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022754:	4413      	add	r3, r2
 8022756:	9324      	str	r3, [sp, #144]	; 0x90
 8022758:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802275a:	3301      	adds	r3, #1
 802275c:	2b07      	cmp	r3, #7
 802275e:	9323      	str	r3, [sp, #140]	; 0x8c
 8022760:	f73f adb5 	bgt.w	80222ce <_vfprintf_r+0xe56>
 8022764:	f105 0408 	add.w	r4, r5, #8
 8022768:	f7ff baba 	b.w	8021ce0 <_vfprintf_r+0x868>
 802276c:	aa22      	add	r2, sp, #136	; 0x88
 802276e:	4649      	mov	r1, r9
 8022770:	4650      	mov	r0, sl
 8022772:	f002 fc3d 	bl	8024ff0 <__sprint_r>
 8022776:	2800      	cmp	r0, #0
 8022778:	d152      	bne.n	8022820 <_vfprintf_r+0x13a8>
 802277a:	ad25      	add	r5, sp, #148	; 0x94
 802277c:	e7c4      	b.n	8022708 <_vfprintf_r+0x1290>
 802277e:	2c00      	cmp	r4, #0
 8022780:	dde2      	ble.n	8022748 <_vfprintf_r+0x12d0>
 8022782:	4e58      	ldr	r6, [pc, #352]	; (80228e4 <_vfprintf_r+0x146c>)
 8022784:	2710      	movs	r7, #16
 8022786:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 802278a:	2c10      	cmp	r4, #16
 802278c:	f103 0301 	add.w	r3, r3, #1
 8022790:	f105 0108 	add.w	r1, r5, #8
 8022794:	602e      	str	r6, [r5, #0]
 8022796:	dc07      	bgt.n	80227a8 <_vfprintf_r+0x1330>
 8022798:	606c      	str	r4, [r5, #4]
 802279a:	2b07      	cmp	r3, #7
 802279c:	4414      	add	r4, r2
 802279e:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 80227a2:	dcc9      	bgt.n	8022738 <_vfprintf_r+0x12c0>
 80227a4:	460d      	mov	r5, r1
 80227a6:	e7cf      	b.n	8022748 <_vfprintf_r+0x12d0>
 80227a8:	3210      	adds	r2, #16
 80227aa:	2b07      	cmp	r3, #7
 80227ac:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80227b0:	606f      	str	r7, [r5, #4]
 80227b2:	dd06      	ble.n	80227c2 <_vfprintf_r+0x134a>
 80227b4:	aa22      	add	r2, sp, #136	; 0x88
 80227b6:	4649      	mov	r1, r9
 80227b8:	4650      	mov	r0, sl
 80227ba:	f002 fc19 	bl	8024ff0 <__sprint_r>
 80227be:	bb78      	cbnz	r0, 8022820 <_vfprintf_r+0x13a8>
 80227c0:	a925      	add	r1, sp, #148	; 0x94
 80227c2:	3c10      	subs	r4, #16
 80227c4:	460d      	mov	r5, r1
 80227c6:	e7de      	b.n	8022786 <_vfprintf_r+0x130e>
 80227c8:	2201      	movs	r2, #1
 80227ca:	2b07      	cmp	r3, #7
 80227cc:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80227d0:	f8c4 8000 	str.w	r8, [r4]
 80227d4:	6062      	str	r2, [r4, #4]
 80227d6:	ddb7      	ble.n	8022748 <_vfprintf_r+0x12d0>
 80227d8:	e7ae      	b.n	8022738 <_vfprintf_r+0x12c0>
 80227da:	3508      	adds	r5, #8
 80227dc:	e7b4      	b.n	8022748 <_vfprintf_r+0x12d0>
 80227de:	460c      	mov	r4, r1
 80227e0:	f7ff ba7e 	b.w	8021ce0 <_vfprintf_r+0x868>
 80227e4:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 80227e8:	1a9d      	subs	r5, r3, r2
 80227ea:	2d00      	cmp	r5, #0
 80227ec:	f77f aa7c 	ble.w	8021ce8 <_vfprintf_r+0x870>
 80227f0:	4e3d      	ldr	r6, [pc, #244]	; (80228e8 <_vfprintf_r+0x1470>)
 80227f2:	2710      	movs	r7, #16
 80227f4:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80227f8:	2d10      	cmp	r5, #16
 80227fa:	f103 0301 	add.w	r3, r3, #1
 80227fe:	6026      	str	r6, [r4, #0]
 8022800:	dc18      	bgt.n	8022834 <_vfprintf_r+0x13bc>
 8022802:	6065      	str	r5, [r4, #4]
 8022804:	2b07      	cmp	r3, #7
 8022806:	4415      	add	r5, r2
 8022808:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 802280c:	f77f aa6c 	ble.w	8021ce8 <_vfprintf_r+0x870>
 8022810:	aa22      	add	r2, sp, #136	; 0x88
 8022812:	4649      	mov	r1, r9
 8022814:	4650      	mov	r0, sl
 8022816:	f002 fbeb 	bl	8024ff0 <__sprint_r>
 802281a:	2800      	cmp	r0, #0
 802281c:	f43f aa64 	beq.w	8021ce8 <_vfprintf_r+0x870>
 8022820:	9b03      	ldr	r3, [sp, #12]
 8022822:	2b00      	cmp	r3, #0
 8022824:	f43f a879 	beq.w	802191a <_vfprintf_r+0x4a2>
 8022828:	4619      	mov	r1, r3
 802282a:	4650      	mov	r0, sl
 802282c:	f001 f8fa 	bl	8023a24 <_free_r>
 8022830:	f7ff b873 	b.w	802191a <_vfprintf_r+0x4a2>
 8022834:	3210      	adds	r2, #16
 8022836:	2b07      	cmp	r3, #7
 8022838:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 802283c:	6067      	str	r7, [r4, #4]
 802283e:	dc02      	bgt.n	8022846 <_vfprintf_r+0x13ce>
 8022840:	3408      	adds	r4, #8
 8022842:	3d10      	subs	r5, #16
 8022844:	e7d6      	b.n	80227f4 <_vfprintf_r+0x137c>
 8022846:	aa22      	add	r2, sp, #136	; 0x88
 8022848:	4649      	mov	r1, r9
 802284a:	4650      	mov	r0, sl
 802284c:	f002 fbd0 	bl	8024ff0 <__sprint_r>
 8022850:	2800      	cmp	r0, #0
 8022852:	d1e5      	bne.n	8022820 <_vfprintf_r+0x13a8>
 8022854:	ac25      	add	r4, sp, #148	; 0x94
 8022856:	e7f4      	b.n	8022842 <_vfprintf_r+0x13ca>
 8022858:	9903      	ldr	r1, [sp, #12]
 802285a:	4650      	mov	r0, sl
 802285c:	f001 f8e2 	bl	8023a24 <_free_r>
 8022860:	f7ff ba5a 	b.w	8021d18 <_vfprintf_r+0x8a0>
 8022864:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022866:	b91b      	cbnz	r3, 8022870 <_vfprintf_r+0x13f8>
 8022868:	2300      	movs	r3, #0
 802286a:	9323      	str	r3, [sp, #140]	; 0x8c
 802286c:	f7ff b855 	b.w	802191a <_vfprintf_r+0x4a2>
 8022870:	aa22      	add	r2, sp, #136	; 0x88
 8022872:	4649      	mov	r1, r9
 8022874:	4650      	mov	r0, sl
 8022876:	f002 fbbb 	bl	8024ff0 <__sprint_r>
 802287a:	2800      	cmp	r0, #0
 802287c:	d0f4      	beq.n	8022868 <_vfprintf_r+0x13f0>
 802287e:	f7ff b84c 	b.w	802191a <_vfprintf_r+0x4a2>
 8022882:	ea56 0205 	orrs.w	r2, r6, r5
 8022886:	465f      	mov	r7, fp
 8022888:	f43f ab70 	beq.w	8021f6c <_vfprintf_r+0xaf4>
 802288c:	2b01      	cmp	r3, #1
 802288e:	f43f ac0d 	beq.w	80220ac <_vfprintf_r+0xc34>
 8022892:	2b02      	cmp	r3, #2
 8022894:	f50d 789c 	add.w	r8, sp, #312	; 0x138
 8022898:	f43f ac54 	beq.w	8022144 <_vfprintf_r+0xccc>
 802289c:	f006 0307 	and.w	r3, r6, #7
 80228a0:	08f6      	lsrs	r6, r6, #3
 80228a2:	ea46 7645 	orr.w	r6, r6, r5, lsl #29
 80228a6:	08ed      	lsrs	r5, r5, #3
 80228a8:	3330      	adds	r3, #48	; 0x30
 80228aa:	ea56 0105 	orrs.w	r1, r6, r5
 80228ae:	4642      	mov	r2, r8
 80228b0:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80228b4:	d1f2      	bne.n	802289c <_vfprintf_r+0x1424>
 80228b6:	07f8      	lsls	r0, r7, #31
 80228b8:	d506      	bpl.n	80228c8 <_vfprintf_r+0x1450>
 80228ba:	2b30      	cmp	r3, #48	; 0x30
 80228bc:	d004      	beq.n	80228c8 <_vfprintf_r+0x1450>
 80228be:	2330      	movs	r3, #48	; 0x30
 80228c0:	f808 3c01 	strb.w	r3, [r8, #-1]
 80228c4:	f1a2 0802 	sub.w	r8, r2, #2
 80228c8:	ab4e      	add	r3, sp, #312	; 0x138
 80228ca:	eba3 0308 	sub.w	r3, r3, r8
 80228ce:	9e04      	ldr	r6, [sp, #16]
 80228d0:	9304      	str	r3, [sp, #16]
 80228d2:	2300      	movs	r3, #0
 80228d4:	46bb      	mov	fp, r7
 80228d6:	9303      	str	r3, [sp, #12]
 80228d8:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80228dc:	461d      	mov	r5, r3
 80228de:	f7ff b945 	b.w	8021b6c <_vfprintf_r+0x6f4>
 80228e2:	bf00      	nop
 80228e4:	08071a64 	.word	0x08071a64
 80228e8:	08071a54 	.word	0x08071a54

080228ec <__sbprintf>:
 80228ec:	b570      	push	{r4, r5, r6, lr}
 80228ee:	460c      	mov	r4, r1
 80228f0:	8989      	ldrh	r1, [r1, #12]
 80228f2:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 80228f6:	f021 0102 	bic.w	r1, r1, #2
 80228fa:	f8ad 1014 	strh.w	r1, [sp, #20]
 80228fe:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8022900:	911b      	str	r1, [sp, #108]	; 0x6c
 8022902:	89e1      	ldrh	r1, [r4, #14]
 8022904:	f8ad 1016 	strh.w	r1, [sp, #22]
 8022908:	69e1      	ldr	r1, [r4, #28]
 802290a:	9109      	str	r1, [sp, #36]	; 0x24
 802290c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 802290e:	910b      	str	r1, [sp, #44]	; 0x2c
 8022910:	a91c      	add	r1, sp, #112	; 0x70
 8022912:	9102      	str	r1, [sp, #8]
 8022914:	9106      	str	r1, [sp, #24]
 8022916:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802291a:	4606      	mov	r6, r0
 802291c:	9104      	str	r1, [sp, #16]
 802291e:	9107      	str	r1, [sp, #28]
 8022920:	a818      	add	r0, sp, #96	; 0x60
 8022922:	2100      	movs	r1, #0
 8022924:	e9cd 3200 	strd	r3, r2, [sp]
 8022928:	9108      	str	r1, [sp, #32]
 802292a:	f001 faa9 	bl	8023e80 <__retarget_lock_init_recursive>
 802292e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8022932:	a902      	add	r1, sp, #8
 8022934:	4630      	mov	r0, r6
 8022936:	f7fe fd9f 	bl	8021478 <_vfprintf_r>
 802293a:	1e05      	subs	r5, r0, #0
 802293c:	db07      	blt.n	802294e <__sbprintf+0x62>
 802293e:	a902      	add	r1, sp, #8
 8022940:	4630      	mov	r0, r6
 8022942:	f000 ff73 	bl	802382c <_fflush_r>
 8022946:	2800      	cmp	r0, #0
 8022948:	bf18      	it	ne
 802294a:	f04f 35ff 	movne.w	r5, #4294967295
 802294e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8022952:	9818      	ldr	r0, [sp, #96]	; 0x60
 8022954:	065b      	lsls	r3, r3, #25
 8022956:	bf42      	ittt	mi
 8022958:	89a3      	ldrhmi	r3, [r4, #12]
 802295a:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 802295e:	81a3      	strhmi	r3, [r4, #12]
 8022960:	f001 fa8f 	bl	8023e82 <__retarget_lock_close_recursive>
 8022964:	4628      	mov	r0, r5
 8022966:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 802296a:	bd70      	pop	{r4, r5, r6, pc}

0802296c <__swsetup_r>:
 802296c:	b538      	push	{r3, r4, r5, lr}
 802296e:	4b2a      	ldr	r3, [pc, #168]	; (8022a18 <__swsetup_r+0xac>)
 8022970:	4605      	mov	r5, r0
 8022972:	6818      	ldr	r0, [r3, #0]
 8022974:	460c      	mov	r4, r1
 8022976:	b118      	cbz	r0, 8022980 <__swsetup_r+0x14>
 8022978:	6b83      	ldr	r3, [r0, #56]	; 0x38
 802297a:	b90b      	cbnz	r3, 8022980 <__swsetup_r+0x14>
 802297c:	f000 ffc2 	bl	8023904 <__sinit>
 8022980:	89a3      	ldrh	r3, [r4, #12]
 8022982:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022986:	0718      	lsls	r0, r3, #28
 8022988:	d422      	bmi.n	80229d0 <__swsetup_r+0x64>
 802298a:	06d9      	lsls	r1, r3, #27
 802298c:	d407      	bmi.n	802299e <__swsetup_r+0x32>
 802298e:	2309      	movs	r3, #9
 8022990:	602b      	str	r3, [r5, #0]
 8022992:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8022996:	81a3      	strh	r3, [r4, #12]
 8022998:	f04f 30ff 	mov.w	r0, #4294967295
 802299c:	e034      	b.n	8022a08 <__swsetup_r+0x9c>
 802299e:	0758      	lsls	r0, r3, #29
 80229a0:	d512      	bpl.n	80229c8 <__swsetup_r+0x5c>
 80229a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80229a4:	b141      	cbz	r1, 80229b8 <__swsetup_r+0x4c>
 80229a6:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80229aa:	4299      	cmp	r1, r3
 80229ac:	d002      	beq.n	80229b4 <__swsetup_r+0x48>
 80229ae:	4628      	mov	r0, r5
 80229b0:	f001 f838 	bl	8023a24 <_free_r>
 80229b4:	2300      	movs	r3, #0
 80229b6:	6323      	str	r3, [r4, #48]	; 0x30
 80229b8:	89a3      	ldrh	r3, [r4, #12]
 80229ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80229be:	81a3      	strh	r3, [r4, #12]
 80229c0:	2300      	movs	r3, #0
 80229c2:	6063      	str	r3, [r4, #4]
 80229c4:	6923      	ldr	r3, [r4, #16]
 80229c6:	6023      	str	r3, [r4, #0]
 80229c8:	89a3      	ldrh	r3, [r4, #12]
 80229ca:	f043 0308 	orr.w	r3, r3, #8
 80229ce:	81a3      	strh	r3, [r4, #12]
 80229d0:	6923      	ldr	r3, [r4, #16]
 80229d2:	b94b      	cbnz	r3, 80229e8 <__swsetup_r+0x7c>
 80229d4:	89a3      	ldrh	r3, [r4, #12]
 80229d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80229da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80229de:	d003      	beq.n	80229e8 <__swsetup_r+0x7c>
 80229e0:	4621      	mov	r1, r4
 80229e2:	4628      	mov	r0, r5
 80229e4:	f001 fa7c 	bl	8023ee0 <__smakebuf_r>
 80229e8:	89a0      	ldrh	r0, [r4, #12]
 80229ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80229ee:	f010 0301 	ands.w	r3, r0, #1
 80229f2:	d00a      	beq.n	8022a0a <__swsetup_r+0x9e>
 80229f4:	2300      	movs	r3, #0
 80229f6:	60a3      	str	r3, [r4, #8]
 80229f8:	6963      	ldr	r3, [r4, #20]
 80229fa:	425b      	negs	r3, r3
 80229fc:	61a3      	str	r3, [r4, #24]
 80229fe:	6923      	ldr	r3, [r4, #16]
 8022a00:	b943      	cbnz	r3, 8022a14 <__swsetup_r+0xa8>
 8022a02:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8022a06:	d1c4      	bne.n	8022992 <__swsetup_r+0x26>
 8022a08:	bd38      	pop	{r3, r4, r5, pc}
 8022a0a:	0781      	lsls	r1, r0, #30
 8022a0c:	bf58      	it	pl
 8022a0e:	6963      	ldrpl	r3, [r4, #20]
 8022a10:	60a3      	str	r3, [r4, #8]
 8022a12:	e7f4      	b.n	80229fe <__swsetup_r+0x92>
 8022a14:	2000      	movs	r0, #0
 8022a16:	e7f7      	b.n	8022a08 <__swsetup_r+0x9c>
 8022a18:	2000001c 	.word	0x2000001c

08022a1c <register_fini>:
 8022a1c:	4b02      	ldr	r3, [pc, #8]	; (8022a28 <register_fini+0xc>)
 8022a1e:	b113      	cbz	r3, 8022a26 <register_fini+0xa>
 8022a20:	4802      	ldr	r0, [pc, #8]	; (8022a2c <register_fini+0x10>)
 8022a22:	f000 b805 	b.w	8022a30 <atexit>
 8022a26:	4770      	bx	lr
 8022a28:	00000000 	.word	0x00000000
 8022a2c:	08023955 	.word	0x08023955

08022a30 <atexit>:
 8022a30:	2300      	movs	r3, #0
 8022a32:	4601      	mov	r1, r0
 8022a34:	461a      	mov	r2, r3
 8022a36:	4618      	mov	r0, r3
 8022a38:	f002 bff4 	b.w	8025a24 <__register_exitproc>

08022a3c <quorem>:
 8022a3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a40:	6903      	ldr	r3, [r0, #16]
 8022a42:	690c      	ldr	r4, [r1, #16]
 8022a44:	42a3      	cmp	r3, r4
 8022a46:	4607      	mov	r7, r0
 8022a48:	f2c0 8081 	blt.w	8022b4e <quorem+0x112>
 8022a4c:	3c01      	subs	r4, #1
 8022a4e:	f101 0814 	add.w	r8, r1, #20
 8022a52:	f100 0514 	add.w	r5, r0, #20
 8022a56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8022a5a:	9301      	str	r3, [sp, #4]
 8022a5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8022a60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8022a64:	3301      	adds	r3, #1
 8022a66:	429a      	cmp	r2, r3
 8022a68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8022a6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8022a70:	fbb2 f6f3 	udiv	r6, r2, r3
 8022a74:	d331      	bcc.n	8022ada <quorem+0x9e>
 8022a76:	f04f 0e00 	mov.w	lr, #0
 8022a7a:	4640      	mov	r0, r8
 8022a7c:	46ac      	mov	ip, r5
 8022a7e:	46f2      	mov	sl, lr
 8022a80:	f850 2b04 	ldr.w	r2, [r0], #4
 8022a84:	b293      	uxth	r3, r2
 8022a86:	fb06 e303 	mla	r3, r6, r3, lr
 8022a8a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8022a8e:	b29b      	uxth	r3, r3
 8022a90:	ebaa 0303 	sub.w	r3, sl, r3
 8022a94:	f8dc a000 	ldr.w	sl, [ip]
 8022a98:	0c12      	lsrs	r2, r2, #16
 8022a9a:	fa13 f38a 	uxtah	r3, r3, sl
 8022a9e:	fb06 e202 	mla	r2, r6, r2, lr
 8022aa2:	9300      	str	r3, [sp, #0]
 8022aa4:	9b00      	ldr	r3, [sp, #0]
 8022aa6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8022aaa:	b292      	uxth	r2, r2
 8022aac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8022ab0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8022ab4:	f8bd 3000 	ldrh.w	r3, [sp]
 8022ab8:	4581      	cmp	r9, r0
 8022aba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8022abe:	f84c 3b04 	str.w	r3, [ip], #4
 8022ac2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8022ac6:	d2db      	bcs.n	8022a80 <quorem+0x44>
 8022ac8:	f855 300b 	ldr.w	r3, [r5, fp]
 8022acc:	b92b      	cbnz	r3, 8022ada <quorem+0x9e>
 8022ace:	9b01      	ldr	r3, [sp, #4]
 8022ad0:	3b04      	subs	r3, #4
 8022ad2:	429d      	cmp	r5, r3
 8022ad4:	461a      	mov	r2, r3
 8022ad6:	d32e      	bcc.n	8022b36 <quorem+0xfa>
 8022ad8:	613c      	str	r4, [r7, #16]
 8022ada:	4638      	mov	r0, r7
 8022adc:	f001 febc 	bl	8024858 <__mcmp>
 8022ae0:	2800      	cmp	r0, #0
 8022ae2:	db24      	blt.n	8022b2e <quorem+0xf2>
 8022ae4:	3601      	adds	r6, #1
 8022ae6:	4628      	mov	r0, r5
 8022ae8:	f04f 0c00 	mov.w	ip, #0
 8022aec:	f858 2b04 	ldr.w	r2, [r8], #4
 8022af0:	f8d0 e000 	ldr.w	lr, [r0]
 8022af4:	b293      	uxth	r3, r2
 8022af6:	ebac 0303 	sub.w	r3, ip, r3
 8022afa:	0c12      	lsrs	r2, r2, #16
 8022afc:	fa13 f38e 	uxtah	r3, r3, lr
 8022b00:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8022b04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8022b08:	b29b      	uxth	r3, r3
 8022b0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8022b0e:	45c1      	cmp	r9, r8
 8022b10:	f840 3b04 	str.w	r3, [r0], #4
 8022b14:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8022b18:	d2e8      	bcs.n	8022aec <quorem+0xb0>
 8022b1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8022b1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8022b22:	b922      	cbnz	r2, 8022b2e <quorem+0xf2>
 8022b24:	3b04      	subs	r3, #4
 8022b26:	429d      	cmp	r5, r3
 8022b28:	461a      	mov	r2, r3
 8022b2a:	d30a      	bcc.n	8022b42 <quorem+0x106>
 8022b2c:	613c      	str	r4, [r7, #16]
 8022b2e:	4630      	mov	r0, r6
 8022b30:	b003      	add	sp, #12
 8022b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b36:	6812      	ldr	r2, [r2, #0]
 8022b38:	3b04      	subs	r3, #4
 8022b3a:	2a00      	cmp	r2, #0
 8022b3c:	d1cc      	bne.n	8022ad8 <quorem+0x9c>
 8022b3e:	3c01      	subs	r4, #1
 8022b40:	e7c7      	b.n	8022ad2 <quorem+0x96>
 8022b42:	6812      	ldr	r2, [r2, #0]
 8022b44:	3b04      	subs	r3, #4
 8022b46:	2a00      	cmp	r2, #0
 8022b48:	d1f0      	bne.n	8022b2c <quorem+0xf0>
 8022b4a:	3c01      	subs	r4, #1
 8022b4c:	e7eb      	b.n	8022b26 <quorem+0xea>
 8022b4e:	2000      	movs	r0, #0
 8022b50:	e7ee      	b.n	8022b30 <quorem+0xf4>
 8022b52:	0000      	movs	r0, r0
 8022b54:	0000      	movs	r0, r0
	...

08022b58 <_dtoa_r>:
 8022b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b5c:	ed2d 8b04 	vpush	{d8-d9}
 8022b60:	b093      	sub	sp, #76	; 0x4c
 8022b62:	ec57 6b10 	vmov	r6, r7, d0
 8022b66:	9106      	str	r1, [sp, #24]
 8022b68:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8022b6a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8022b6c:	9209      	str	r2, [sp, #36]	; 0x24
 8022b6e:	ee10 aa10 	vmov	sl, s0
 8022b72:	4604      	mov	r4, r0
 8022b74:	930c      	str	r3, [sp, #48]	; 0x30
 8022b76:	46bb      	mov	fp, r7
 8022b78:	b141      	cbz	r1, 8022b8c <_dtoa_r+0x34>
 8022b7a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8022b7c:	604a      	str	r2, [r1, #4]
 8022b7e:	2301      	movs	r3, #1
 8022b80:	4093      	lsls	r3, r2
 8022b82:	608b      	str	r3, [r1, #8]
 8022b84:	f001 fc59 	bl	802443a <_Bfree>
 8022b88:	2300      	movs	r3, #0
 8022b8a:	6423      	str	r3, [r4, #64]	; 0x40
 8022b8c:	1e3b      	subs	r3, r7, #0
 8022b8e:	bfaa      	itet	ge
 8022b90:	2300      	movge	r3, #0
 8022b92:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8022b96:	602b      	strge	r3, [r5, #0]
 8022b98:	4ba3      	ldr	r3, [pc, #652]	; (8022e28 <_dtoa_r+0x2d0>)
 8022b9a:	bfbc      	itt	lt
 8022b9c:	2201      	movlt	r2, #1
 8022b9e:	602a      	strlt	r2, [r5, #0]
 8022ba0:	ea33 030b 	bics.w	r3, r3, fp
 8022ba4:	d11b      	bne.n	8022bde <_dtoa_r+0x86>
 8022ba6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022ba8:	f242 730f 	movw	r3, #9999	; 0x270f
 8022bac:	6013      	str	r3, [r2, #0]
 8022bae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8022bb2:	4333      	orrs	r3, r6
 8022bb4:	f000 8590 	beq.w	80236d8 <_dtoa_r+0xb80>
 8022bb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022bba:	b90b      	cbnz	r3, 8022bc0 <_dtoa_r+0x68>
 8022bbc:	4b9b      	ldr	r3, [pc, #620]	; (8022e2c <_dtoa_r+0x2d4>)
 8022bbe:	e022      	b.n	8022c06 <_dtoa_r+0xae>
 8022bc0:	4b9a      	ldr	r3, [pc, #616]	; (8022e2c <_dtoa_r+0x2d4>)
 8022bc2:	9301      	str	r3, [sp, #4]
 8022bc4:	3303      	adds	r3, #3
 8022bc6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8022bc8:	6013      	str	r3, [r2, #0]
 8022bca:	9801      	ldr	r0, [sp, #4]
 8022bcc:	b013      	add	sp, #76	; 0x4c
 8022bce:	ecbd 8b04 	vpop	{d8-d9}
 8022bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022bd6:	4b96      	ldr	r3, [pc, #600]	; (8022e30 <_dtoa_r+0x2d8>)
 8022bd8:	9301      	str	r3, [sp, #4]
 8022bda:	3308      	adds	r3, #8
 8022bdc:	e7f3      	b.n	8022bc6 <_dtoa_r+0x6e>
 8022bde:	2200      	movs	r2, #0
 8022be0:	2300      	movs	r3, #0
 8022be2:	4650      	mov	r0, sl
 8022be4:	4659      	mov	r1, fp
 8022be6:	f7dd ff7f 	bl	8000ae8 <__aeabi_dcmpeq>
 8022bea:	ec4b ab19 	vmov	d9, sl, fp
 8022bee:	4680      	mov	r8, r0
 8022bf0:	b158      	cbz	r0, 8022c0a <_dtoa_r+0xb2>
 8022bf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022bf4:	2301      	movs	r3, #1
 8022bf6:	6013      	str	r3, [r2, #0]
 8022bf8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022bfa:	2b00      	cmp	r3, #0
 8022bfc:	f000 8569 	beq.w	80236d2 <_dtoa_r+0xb7a>
 8022c00:	488c      	ldr	r0, [pc, #560]	; (8022e34 <_dtoa_r+0x2dc>)
 8022c02:	6018      	str	r0, [r3, #0]
 8022c04:	1e43      	subs	r3, r0, #1
 8022c06:	9301      	str	r3, [sp, #4]
 8022c08:	e7df      	b.n	8022bca <_dtoa_r+0x72>
 8022c0a:	ec4b ab10 	vmov	d0, sl, fp
 8022c0e:	aa10      	add	r2, sp, #64	; 0x40
 8022c10:	a911      	add	r1, sp, #68	; 0x44
 8022c12:	4620      	mov	r0, r4
 8022c14:	f001 fec6 	bl	80249a4 <__d2b>
 8022c18:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8022c1c:	ee08 0a10 	vmov	s16, r0
 8022c20:	2d00      	cmp	r5, #0
 8022c22:	f000 8082 	beq.w	8022d2a <_dtoa_r+0x1d2>
 8022c26:	ee19 3a90 	vmov	r3, s19
 8022c2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8022c2e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8022c32:	4656      	mov	r6, sl
 8022c34:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8022c38:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8022c3c:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8022c40:	4b7d      	ldr	r3, [pc, #500]	; (8022e38 <_dtoa_r+0x2e0>)
 8022c42:	2200      	movs	r2, #0
 8022c44:	4630      	mov	r0, r6
 8022c46:	4639      	mov	r1, r7
 8022c48:	f7dd fb2e 	bl	80002a8 <__aeabi_dsub>
 8022c4c:	a370      	add	r3, pc, #448	; (adr r3, 8022e10 <_dtoa_r+0x2b8>)
 8022c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c52:	f7dd fce1 	bl	8000618 <__aeabi_dmul>
 8022c56:	a370      	add	r3, pc, #448	; (adr r3, 8022e18 <_dtoa_r+0x2c0>)
 8022c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c5c:	f7dd fb26 	bl	80002ac <__adddf3>
 8022c60:	4606      	mov	r6, r0
 8022c62:	4628      	mov	r0, r5
 8022c64:	460f      	mov	r7, r1
 8022c66:	f7dd fc6d 	bl	8000544 <__aeabi_i2d>
 8022c6a:	a36d      	add	r3, pc, #436	; (adr r3, 8022e20 <_dtoa_r+0x2c8>)
 8022c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c70:	f7dd fcd2 	bl	8000618 <__aeabi_dmul>
 8022c74:	4602      	mov	r2, r0
 8022c76:	460b      	mov	r3, r1
 8022c78:	4630      	mov	r0, r6
 8022c7a:	4639      	mov	r1, r7
 8022c7c:	f7dd fb16 	bl	80002ac <__adddf3>
 8022c80:	4606      	mov	r6, r0
 8022c82:	460f      	mov	r7, r1
 8022c84:	f7dd ff78 	bl	8000b78 <__aeabi_d2iz>
 8022c88:	2200      	movs	r2, #0
 8022c8a:	9000      	str	r0, [sp, #0]
 8022c8c:	2300      	movs	r3, #0
 8022c8e:	4630      	mov	r0, r6
 8022c90:	4639      	mov	r1, r7
 8022c92:	f7dd ff33 	bl	8000afc <__aeabi_dcmplt>
 8022c96:	b150      	cbz	r0, 8022cae <_dtoa_r+0x156>
 8022c98:	9800      	ldr	r0, [sp, #0]
 8022c9a:	f7dd fc53 	bl	8000544 <__aeabi_i2d>
 8022c9e:	4632      	mov	r2, r6
 8022ca0:	463b      	mov	r3, r7
 8022ca2:	f7dd ff21 	bl	8000ae8 <__aeabi_dcmpeq>
 8022ca6:	b910      	cbnz	r0, 8022cae <_dtoa_r+0x156>
 8022ca8:	9b00      	ldr	r3, [sp, #0]
 8022caa:	3b01      	subs	r3, #1
 8022cac:	9300      	str	r3, [sp, #0]
 8022cae:	9b00      	ldr	r3, [sp, #0]
 8022cb0:	2b16      	cmp	r3, #22
 8022cb2:	d858      	bhi.n	8022d66 <_dtoa_r+0x20e>
 8022cb4:	9a00      	ldr	r2, [sp, #0]
 8022cb6:	4b61      	ldr	r3, [pc, #388]	; (8022e3c <_dtoa_r+0x2e4>)
 8022cb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8022cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022cc0:	ec51 0b19 	vmov	r0, r1, d9
 8022cc4:	f7dd ff1a 	bl	8000afc <__aeabi_dcmplt>
 8022cc8:	2800      	cmp	r0, #0
 8022cca:	d04e      	beq.n	8022d6a <_dtoa_r+0x212>
 8022ccc:	9b00      	ldr	r3, [sp, #0]
 8022cce:	3b01      	subs	r3, #1
 8022cd0:	9300      	str	r3, [sp, #0]
 8022cd2:	2300      	movs	r3, #0
 8022cd4:	930b      	str	r3, [sp, #44]	; 0x2c
 8022cd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022cd8:	1b5d      	subs	r5, r3, r5
 8022cda:	1e6b      	subs	r3, r5, #1
 8022cdc:	9305      	str	r3, [sp, #20]
 8022cde:	bf45      	ittet	mi
 8022ce0:	f1c5 0301 	rsbmi	r3, r5, #1
 8022ce4:	9304      	strmi	r3, [sp, #16]
 8022ce6:	2300      	movpl	r3, #0
 8022ce8:	2300      	movmi	r3, #0
 8022cea:	bf4c      	ite	mi
 8022cec:	9305      	strmi	r3, [sp, #20]
 8022cee:	9304      	strpl	r3, [sp, #16]
 8022cf0:	9b00      	ldr	r3, [sp, #0]
 8022cf2:	2b00      	cmp	r3, #0
 8022cf4:	db3b      	blt.n	8022d6e <_dtoa_r+0x216>
 8022cf6:	9b05      	ldr	r3, [sp, #20]
 8022cf8:	9a00      	ldr	r2, [sp, #0]
 8022cfa:	920a      	str	r2, [sp, #40]	; 0x28
 8022cfc:	4413      	add	r3, r2
 8022cfe:	9305      	str	r3, [sp, #20]
 8022d00:	2300      	movs	r3, #0
 8022d02:	9307      	str	r3, [sp, #28]
 8022d04:	9b06      	ldr	r3, [sp, #24]
 8022d06:	2b09      	cmp	r3, #9
 8022d08:	d869      	bhi.n	8022dde <_dtoa_r+0x286>
 8022d0a:	2b05      	cmp	r3, #5
 8022d0c:	bfc4      	itt	gt
 8022d0e:	3b04      	subgt	r3, #4
 8022d10:	9306      	strgt	r3, [sp, #24]
 8022d12:	9b06      	ldr	r3, [sp, #24]
 8022d14:	f1a3 0302 	sub.w	r3, r3, #2
 8022d18:	bfcc      	ite	gt
 8022d1a:	2500      	movgt	r5, #0
 8022d1c:	2501      	movle	r5, #1
 8022d1e:	2b03      	cmp	r3, #3
 8022d20:	d868      	bhi.n	8022df4 <_dtoa_r+0x29c>
 8022d22:	e8df f003 	tbb	[pc, r3]
 8022d26:	3a2d      	.short	0x3a2d
 8022d28:	5a38      	.short	0x5a38
 8022d2a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8022d2e:	441d      	add	r5, r3
 8022d30:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8022d34:	2b20      	cmp	r3, #32
 8022d36:	bfc1      	itttt	gt
 8022d38:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8022d3c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8022d40:	fa0b f303 	lslgt.w	r3, fp, r3
 8022d44:	fa26 f000 	lsrgt.w	r0, r6, r0
 8022d48:	bfda      	itte	le
 8022d4a:	f1c3 0320 	rsble	r3, r3, #32
 8022d4e:	fa06 f003 	lslle.w	r0, r6, r3
 8022d52:	4318      	orrgt	r0, r3
 8022d54:	f7dd fbe6 	bl	8000524 <__aeabi_ui2d>
 8022d58:	2301      	movs	r3, #1
 8022d5a:	4606      	mov	r6, r0
 8022d5c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8022d60:	3d01      	subs	r5, #1
 8022d62:	930e      	str	r3, [sp, #56]	; 0x38
 8022d64:	e76c      	b.n	8022c40 <_dtoa_r+0xe8>
 8022d66:	2301      	movs	r3, #1
 8022d68:	e7b4      	b.n	8022cd4 <_dtoa_r+0x17c>
 8022d6a:	900b      	str	r0, [sp, #44]	; 0x2c
 8022d6c:	e7b3      	b.n	8022cd6 <_dtoa_r+0x17e>
 8022d6e:	9b04      	ldr	r3, [sp, #16]
 8022d70:	9a00      	ldr	r2, [sp, #0]
 8022d72:	1a9b      	subs	r3, r3, r2
 8022d74:	9304      	str	r3, [sp, #16]
 8022d76:	4253      	negs	r3, r2
 8022d78:	9307      	str	r3, [sp, #28]
 8022d7a:	2300      	movs	r3, #0
 8022d7c:	930a      	str	r3, [sp, #40]	; 0x28
 8022d7e:	e7c1      	b.n	8022d04 <_dtoa_r+0x1ac>
 8022d80:	2300      	movs	r3, #0
 8022d82:	9308      	str	r3, [sp, #32]
 8022d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022d86:	2b00      	cmp	r3, #0
 8022d88:	dc37      	bgt.n	8022dfa <_dtoa_r+0x2a2>
 8022d8a:	2301      	movs	r3, #1
 8022d8c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8022d90:	461a      	mov	r2, r3
 8022d92:	9209      	str	r2, [sp, #36]	; 0x24
 8022d94:	e00c      	b.n	8022db0 <_dtoa_r+0x258>
 8022d96:	2301      	movs	r3, #1
 8022d98:	e7f3      	b.n	8022d82 <_dtoa_r+0x22a>
 8022d9a:	2300      	movs	r3, #0
 8022d9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022d9e:	9308      	str	r3, [sp, #32]
 8022da0:	9b00      	ldr	r3, [sp, #0]
 8022da2:	4413      	add	r3, r2
 8022da4:	9302      	str	r3, [sp, #8]
 8022da6:	3301      	adds	r3, #1
 8022da8:	2b01      	cmp	r3, #1
 8022daa:	9303      	str	r3, [sp, #12]
 8022dac:	bfb8      	it	lt
 8022dae:	2301      	movlt	r3, #1
 8022db0:	2200      	movs	r2, #0
 8022db2:	6462      	str	r2, [r4, #68]	; 0x44
 8022db4:	2204      	movs	r2, #4
 8022db6:	f102 0014 	add.w	r0, r2, #20
 8022dba:	4298      	cmp	r0, r3
 8022dbc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8022dbe:	d920      	bls.n	8022e02 <_dtoa_r+0x2aa>
 8022dc0:	4620      	mov	r0, r4
 8022dc2:	f001 fb15 	bl	80243f0 <_Balloc>
 8022dc6:	9001      	str	r0, [sp, #4]
 8022dc8:	2800      	cmp	r0, #0
 8022dca:	d13d      	bne.n	8022e48 <_dtoa_r+0x2f0>
 8022dcc:	4b1c      	ldr	r3, [pc, #112]	; (8022e40 <_dtoa_r+0x2e8>)
 8022dce:	4602      	mov	r2, r0
 8022dd0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8022dd4:	481b      	ldr	r0, [pc, #108]	; (8022e44 <_dtoa_r+0x2ec>)
 8022dd6:	f002 fe67 	bl	8025aa8 <__assert_func>
 8022dda:	2301      	movs	r3, #1
 8022ddc:	e7de      	b.n	8022d9c <_dtoa_r+0x244>
 8022dde:	2501      	movs	r5, #1
 8022de0:	2300      	movs	r3, #0
 8022de2:	9306      	str	r3, [sp, #24]
 8022de4:	9508      	str	r5, [sp, #32]
 8022de6:	f04f 33ff 	mov.w	r3, #4294967295
 8022dea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8022dee:	2200      	movs	r2, #0
 8022df0:	2312      	movs	r3, #18
 8022df2:	e7ce      	b.n	8022d92 <_dtoa_r+0x23a>
 8022df4:	2301      	movs	r3, #1
 8022df6:	9308      	str	r3, [sp, #32]
 8022df8:	e7f5      	b.n	8022de6 <_dtoa_r+0x28e>
 8022dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022dfc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8022e00:	e7d6      	b.n	8022db0 <_dtoa_r+0x258>
 8022e02:	3101      	adds	r1, #1
 8022e04:	6461      	str	r1, [r4, #68]	; 0x44
 8022e06:	0052      	lsls	r2, r2, #1
 8022e08:	e7d5      	b.n	8022db6 <_dtoa_r+0x25e>
 8022e0a:	bf00      	nop
 8022e0c:	f3af 8000 	nop.w
 8022e10:	636f4361 	.word	0x636f4361
 8022e14:	3fd287a7 	.word	0x3fd287a7
 8022e18:	8b60c8b3 	.word	0x8b60c8b3
 8022e1c:	3fc68a28 	.word	0x3fc68a28
 8022e20:	509f79fb 	.word	0x509f79fb
 8022e24:	3fd34413 	.word	0x3fd34413
 8022e28:	7ff00000 	.word	0x7ff00000
 8022e2c:	08071a74 	.word	0x08071a74
 8022e30:	08071a78 	.word	0x08071a78
 8022e34:	08071a33 	.word	0x08071a33
 8022e38:	3ff80000 	.word	0x3ff80000
 8022e3c:	08071b78 	.word	0x08071b78
 8022e40:	08071a81 	.word	0x08071a81
 8022e44:	08071a92 	.word	0x08071a92
 8022e48:	9b01      	ldr	r3, [sp, #4]
 8022e4a:	6423      	str	r3, [r4, #64]	; 0x40
 8022e4c:	9b03      	ldr	r3, [sp, #12]
 8022e4e:	2b0e      	cmp	r3, #14
 8022e50:	f200 809d 	bhi.w	8022f8e <_dtoa_r+0x436>
 8022e54:	2d00      	cmp	r5, #0
 8022e56:	f000 809a 	beq.w	8022f8e <_dtoa_r+0x436>
 8022e5a:	9b00      	ldr	r3, [sp, #0]
 8022e5c:	2b00      	cmp	r3, #0
 8022e5e:	dd32      	ble.n	8022ec6 <_dtoa_r+0x36e>
 8022e60:	4ab7      	ldr	r2, [pc, #732]	; (8023140 <_dtoa_r+0x5e8>)
 8022e62:	f003 030f 	and.w	r3, r3, #15
 8022e66:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8022e6a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8022e6e:	9b00      	ldr	r3, [sp, #0]
 8022e70:	05d8      	lsls	r0, r3, #23
 8022e72:	ea4f 1723 	mov.w	r7, r3, asr #4
 8022e76:	d516      	bpl.n	8022ea6 <_dtoa_r+0x34e>
 8022e78:	4bb2      	ldr	r3, [pc, #712]	; (8023144 <_dtoa_r+0x5ec>)
 8022e7a:	ec51 0b19 	vmov	r0, r1, d9
 8022e7e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8022e82:	f7dd fcf3 	bl	800086c <__aeabi_ddiv>
 8022e86:	f007 070f 	and.w	r7, r7, #15
 8022e8a:	4682      	mov	sl, r0
 8022e8c:	468b      	mov	fp, r1
 8022e8e:	2503      	movs	r5, #3
 8022e90:	4eac      	ldr	r6, [pc, #688]	; (8023144 <_dtoa_r+0x5ec>)
 8022e92:	b957      	cbnz	r7, 8022eaa <_dtoa_r+0x352>
 8022e94:	4642      	mov	r2, r8
 8022e96:	464b      	mov	r3, r9
 8022e98:	4650      	mov	r0, sl
 8022e9a:	4659      	mov	r1, fp
 8022e9c:	f7dd fce6 	bl	800086c <__aeabi_ddiv>
 8022ea0:	4682      	mov	sl, r0
 8022ea2:	468b      	mov	fp, r1
 8022ea4:	e028      	b.n	8022ef8 <_dtoa_r+0x3a0>
 8022ea6:	2502      	movs	r5, #2
 8022ea8:	e7f2      	b.n	8022e90 <_dtoa_r+0x338>
 8022eaa:	07f9      	lsls	r1, r7, #31
 8022eac:	d508      	bpl.n	8022ec0 <_dtoa_r+0x368>
 8022eae:	4640      	mov	r0, r8
 8022eb0:	4649      	mov	r1, r9
 8022eb2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8022eb6:	f7dd fbaf 	bl	8000618 <__aeabi_dmul>
 8022eba:	3501      	adds	r5, #1
 8022ebc:	4680      	mov	r8, r0
 8022ebe:	4689      	mov	r9, r1
 8022ec0:	107f      	asrs	r7, r7, #1
 8022ec2:	3608      	adds	r6, #8
 8022ec4:	e7e5      	b.n	8022e92 <_dtoa_r+0x33a>
 8022ec6:	f000 809b 	beq.w	8023000 <_dtoa_r+0x4a8>
 8022eca:	9b00      	ldr	r3, [sp, #0]
 8022ecc:	4f9d      	ldr	r7, [pc, #628]	; (8023144 <_dtoa_r+0x5ec>)
 8022ece:	425e      	negs	r6, r3
 8022ed0:	4b9b      	ldr	r3, [pc, #620]	; (8023140 <_dtoa_r+0x5e8>)
 8022ed2:	f006 020f 	and.w	r2, r6, #15
 8022ed6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8022eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ede:	ec51 0b19 	vmov	r0, r1, d9
 8022ee2:	f7dd fb99 	bl	8000618 <__aeabi_dmul>
 8022ee6:	1136      	asrs	r6, r6, #4
 8022ee8:	4682      	mov	sl, r0
 8022eea:	468b      	mov	fp, r1
 8022eec:	2300      	movs	r3, #0
 8022eee:	2502      	movs	r5, #2
 8022ef0:	2e00      	cmp	r6, #0
 8022ef2:	d17a      	bne.n	8022fea <_dtoa_r+0x492>
 8022ef4:	2b00      	cmp	r3, #0
 8022ef6:	d1d3      	bne.n	8022ea0 <_dtoa_r+0x348>
 8022ef8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022efa:	2b00      	cmp	r3, #0
 8022efc:	f000 8082 	beq.w	8023004 <_dtoa_r+0x4ac>
 8022f00:	4b91      	ldr	r3, [pc, #580]	; (8023148 <_dtoa_r+0x5f0>)
 8022f02:	2200      	movs	r2, #0
 8022f04:	4650      	mov	r0, sl
 8022f06:	4659      	mov	r1, fp
 8022f08:	f7dd fdf8 	bl	8000afc <__aeabi_dcmplt>
 8022f0c:	2800      	cmp	r0, #0
 8022f0e:	d079      	beq.n	8023004 <_dtoa_r+0x4ac>
 8022f10:	9b03      	ldr	r3, [sp, #12]
 8022f12:	2b00      	cmp	r3, #0
 8022f14:	d076      	beq.n	8023004 <_dtoa_r+0x4ac>
 8022f16:	9b02      	ldr	r3, [sp, #8]
 8022f18:	2b00      	cmp	r3, #0
 8022f1a:	dd36      	ble.n	8022f8a <_dtoa_r+0x432>
 8022f1c:	9b00      	ldr	r3, [sp, #0]
 8022f1e:	4650      	mov	r0, sl
 8022f20:	4659      	mov	r1, fp
 8022f22:	1e5f      	subs	r7, r3, #1
 8022f24:	2200      	movs	r2, #0
 8022f26:	4b89      	ldr	r3, [pc, #548]	; (802314c <_dtoa_r+0x5f4>)
 8022f28:	f7dd fb76 	bl	8000618 <__aeabi_dmul>
 8022f2c:	9e02      	ldr	r6, [sp, #8]
 8022f2e:	4682      	mov	sl, r0
 8022f30:	468b      	mov	fp, r1
 8022f32:	3501      	adds	r5, #1
 8022f34:	4628      	mov	r0, r5
 8022f36:	f7dd fb05 	bl	8000544 <__aeabi_i2d>
 8022f3a:	4652      	mov	r2, sl
 8022f3c:	465b      	mov	r3, fp
 8022f3e:	f7dd fb6b 	bl	8000618 <__aeabi_dmul>
 8022f42:	4b83      	ldr	r3, [pc, #524]	; (8023150 <_dtoa_r+0x5f8>)
 8022f44:	2200      	movs	r2, #0
 8022f46:	f7dd f9b1 	bl	80002ac <__adddf3>
 8022f4a:	46d0      	mov	r8, sl
 8022f4c:	46d9      	mov	r9, fp
 8022f4e:	4682      	mov	sl, r0
 8022f50:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8022f54:	2e00      	cmp	r6, #0
 8022f56:	d158      	bne.n	802300a <_dtoa_r+0x4b2>
 8022f58:	4b7e      	ldr	r3, [pc, #504]	; (8023154 <_dtoa_r+0x5fc>)
 8022f5a:	2200      	movs	r2, #0
 8022f5c:	4640      	mov	r0, r8
 8022f5e:	4649      	mov	r1, r9
 8022f60:	f7dd f9a2 	bl	80002a8 <__aeabi_dsub>
 8022f64:	4652      	mov	r2, sl
 8022f66:	465b      	mov	r3, fp
 8022f68:	4680      	mov	r8, r0
 8022f6a:	4689      	mov	r9, r1
 8022f6c:	f7dd fde4 	bl	8000b38 <__aeabi_dcmpgt>
 8022f70:	2800      	cmp	r0, #0
 8022f72:	f040 8296 	bne.w	80234a2 <_dtoa_r+0x94a>
 8022f76:	4652      	mov	r2, sl
 8022f78:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8022f7c:	4640      	mov	r0, r8
 8022f7e:	4649      	mov	r1, r9
 8022f80:	f7dd fdbc 	bl	8000afc <__aeabi_dcmplt>
 8022f84:	2800      	cmp	r0, #0
 8022f86:	f040 828a 	bne.w	802349e <_dtoa_r+0x946>
 8022f8a:	ec5b ab19 	vmov	sl, fp, d9
 8022f8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022f90:	2b00      	cmp	r3, #0
 8022f92:	f2c0 8149 	blt.w	8023228 <_dtoa_r+0x6d0>
 8022f96:	9a00      	ldr	r2, [sp, #0]
 8022f98:	2a0e      	cmp	r2, #14
 8022f9a:	f300 8145 	bgt.w	8023228 <_dtoa_r+0x6d0>
 8022f9e:	4b68      	ldr	r3, [pc, #416]	; (8023140 <_dtoa_r+0x5e8>)
 8022fa0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8022fa4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8022fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022faa:	2b00      	cmp	r3, #0
 8022fac:	f280 80d6 	bge.w	802315c <_dtoa_r+0x604>
 8022fb0:	9b03      	ldr	r3, [sp, #12]
 8022fb2:	2b00      	cmp	r3, #0
 8022fb4:	f300 80d2 	bgt.w	802315c <_dtoa_r+0x604>
 8022fb8:	f040 8270 	bne.w	802349c <_dtoa_r+0x944>
 8022fbc:	4b65      	ldr	r3, [pc, #404]	; (8023154 <_dtoa_r+0x5fc>)
 8022fbe:	2200      	movs	r2, #0
 8022fc0:	4640      	mov	r0, r8
 8022fc2:	4649      	mov	r1, r9
 8022fc4:	f7dd fb28 	bl	8000618 <__aeabi_dmul>
 8022fc8:	4652      	mov	r2, sl
 8022fca:	465b      	mov	r3, fp
 8022fcc:	f7dd fdaa 	bl	8000b24 <__aeabi_dcmpge>
 8022fd0:	9e03      	ldr	r6, [sp, #12]
 8022fd2:	4637      	mov	r7, r6
 8022fd4:	2800      	cmp	r0, #0
 8022fd6:	f040 8246 	bne.w	8023466 <_dtoa_r+0x90e>
 8022fda:	9d01      	ldr	r5, [sp, #4]
 8022fdc:	2331      	movs	r3, #49	; 0x31
 8022fde:	f805 3b01 	strb.w	r3, [r5], #1
 8022fe2:	9b00      	ldr	r3, [sp, #0]
 8022fe4:	3301      	adds	r3, #1
 8022fe6:	9300      	str	r3, [sp, #0]
 8022fe8:	e241      	b.n	802346e <_dtoa_r+0x916>
 8022fea:	07f2      	lsls	r2, r6, #31
 8022fec:	d505      	bpl.n	8022ffa <_dtoa_r+0x4a2>
 8022fee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8022ff2:	f7dd fb11 	bl	8000618 <__aeabi_dmul>
 8022ff6:	3501      	adds	r5, #1
 8022ff8:	2301      	movs	r3, #1
 8022ffa:	1076      	asrs	r6, r6, #1
 8022ffc:	3708      	adds	r7, #8
 8022ffe:	e777      	b.n	8022ef0 <_dtoa_r+0x398>
 8023000:	2502      	movs	r5, #2
 8023002:	e779      	b.n	8022ef8 <_dtoa_r+0x3a0>
 8023004:	9f00      	ldr	r7, [sp, #0]
 8023006:	9e03      	ldr	r6, [sp, #12]
 8023008:	e794      	b.n	8022f34 <_dtoa_r+0x3dc>
 802300a:	9901      	ldr	r1, [sp, #4]
 802300c:	4b4c      	ldr	r3, [pc, #304]	; (8023140 <_dtoa_r+0x5e8>)
 802300e:	4431      	add	r1, r6
 8023010:	910d      	str	r1, [sp, #52]	; 0x34
 8023012:	9908      	ldr	r1, [sp, #32]
 8023014:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8023018:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802301c:	2900      	cmp	r1, #0
 802301e:	d043      	beq.n	80230a8 <_dtoa_r+0x550>
 8023020:	494d      	ldr	r1, [pc, #308]	; (8023158 <_dtoa_r+0x600>)
 8023022:	2000      	movs	r0, #0
 8023024:	f7dd fc22 	bl	800086c <__aeabi_ddiv>
 8023028:	4652      	mov	r2, sl
 802302a:	465b      	mov	r3, fp
 802302c:	f7dd f93c 	bl	80002a8 <__aeabi_dsub>
 8023030:	9d01      	ldr	r5, [sp, #4]
 8023032:	4682      	mov	sl, r0
 8023034:	468b      	mov	fp, r1
 8023036:	4649      	mov	r1, r9
 8023038:	4640      	mov	r0, r8
 802303a:	f7dd fd9d 	bl	8000b78 <__aeabi_d2iz>
 802303e:	4606      	mov	r6, r0
 8023040:	f7dd fa80 	bl	8000544 <__aeabi_i2d>
 8023044:	4602      	mov	r2, r0
 8023046:	460b      	mov	r3, r1
 8023048:	4640      	mov	r0, r8
 802304a:	4649      	mov	r1, r9
 802304c:	f7dd f92c 	bl	80002a8 <__aeabi_dsub>
 8023050:	3630      	adds	r6, #48	; 0x30
 8023052:	f805 6b01 	strb.w	r6, [r5], #1
 8023056:	4652      	mov	r2, sl
 8023058:	465b      	mov	r3, fp
 802305a:	4680      	mov	r8, r0
 802305c:	4689      	mov	r9, r1
 802305e:	f7dd fd4d 	bl	8000afc <__aeabi_dcmplt>
 8023062:	2800      	cmp	r0, #0
 8023064:	d163      	bne.n	802312e <_dtoa_r+0x5d6>
 8023066:	4642      	mov	r2, r8
 8023068:	464b      	mov	r3, r9
 802306a:	4937      	ldr	r1, [pc, #220]	; (8023148 <_dtoa_r+0x5f0>)
 802306c:	2000      	movs	r0, #0
 802306e:	f7dd f91b 	bl	80002a8 <__aeabi_dsub>
 8023072:	4652      	mov	r2, sl
 8023074:	465b      	mov	r3, fp
 8023076:	f7dd fd41 	bl	8000afc <__aeabi_dcmplt>
 802307a:	2800      	cmp	r0, #0
 802307c:	f040 80b6 	bne.w	80231ec <_dtoa_r+0x694>
 8023080:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023082:	429d      	cmp	r5, r3
 8023084:	d081      	beq.n	8022f8a <_dtoa_r+0x432>
 8023086:	4b31      	ldr	r3, [pc, #196]	; (802314c <_dtoa_r+0x5f4>)
 8023088:	2200      	movs	r2, #0
 802308a:	4650      	mov	r0, sl
 802308c:	4659      	mov	r1, fp
 802308e:	f7dd fac3 	bl	8000618 <__aeabi_dmul>
 8023092:	4b2e      	ldr	r3, [pc, #184]	; (802314c <_dtoa_r+0x5f4>)
 8023094:	4682      	mov	sl, r0
 8023096:	468b      	mov	fp, r1
 8023098:	4640      	mov	r0, r8
 802309a:	4649      	mov	r1, r9
 802309c:	2200      	movs	r2, #0
 802309e:	f7dd fabb 	bl	8000618 <__aeabi_dmul>
 80230a2:	4680      	mov	r8, r0
 80230a4:	4689      	mov	r9, r1
 80230a6:	e7c6      	b.n	8023036 <_dtoa_r+0x4de>
 80230a8:	4650      	mov	r0, sl
 80230aa:	4659      	mov	r1, fp
 80230ac:	f7dd fab4 	bl	8000618 <__aeabi_dmul>
 80230b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80230b2:	9d01      	ldr	r5, [sp, #4]
 80230b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80230b6:	4682      	mov	sl, r0
 80230b8:	468b      	mov	fp, r1
 80230ba:	4649      	mov	r1, r9
 80230bc:	4640      	mov	r0, r8
 80230be:	f7dd fd5b 	bl	8000b78 <__aeabi_d2iz>
 80230c2:	4606      	mov	r6, r0
 80230c4:	f7dd fa3e 	bl	8000544 <__aeabi_i2d>
 80230c8:	3630      	adds	r6, #48	; 0x30
 80230ca:	4602      	mov	r2, r0
 80230cc:	460b      	mov	r3, r1
 80230ce:	4640      	mov	r0, r8
 80230d0:	4649      	mov	r1, r9
 80230d2:	f7dd f8e9 	bl	80002a8 <__aeabi_dsub>
 80230d6:	f805 6b01 	strb.w	r6, [r5], #1
 80230da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80230dc:	429d      	cmp	r5, r3
 80230de:	4680      	mov	r8, r0
 80230e0:	4689      	mov	r9, r1
 80230e2:	f04f 0200 	mov.w	r2, #0
 80230e6:	d124      	bne.n	8023132 <_dtoa_r+0x5da>
 80230e8:	4b1b      	ldr	r3, [pc, #108]	; (8023158 <_dtoa_r+0x600>)
 80230ea:	4650      	mov	r0, sl
 80230ec:	4659      	mov	r1, fp
 80230ee:	f7dd f8dd 	bl	80002ac <__adddf3>
 80230f2:	4602      	mov	r2, r0
 80230f4:	460b      	mov	r3, r1
 80230f6:	4640      	mov	r0, r8
 80230f8:	4649      	mov	r1, r9
 80230fa:	f7dd fd1d 	bl	8000b38 <__aeabi_dcmpgt>
 80230fe:	2800      	cmp	r0, #0
 8023100:	d174      	bne.n	80231ec <_dtoa_r+0x694>
 8023102:	4652      	mov	r2, sl
 8023104:	465b      	mov	r3, fp
 8023106:	4914      	ldr	r1, [pc, #80]	; (8023158 <_dtoa_r+0x600>)
 8023108:	2000      	movs	r0, #0
 802310a:	f7dd f8cd 	bl	80002a8 <__aeabi_dsub>
 802310e:	4602      	mov	r2, r0
 8023110:	460b      	mov	r3, r1
 8023112:	4640      	mov	r0, r8
 8023114:	4649      	mov	r1, r9
 8023116:	f7dd fcf1 	bl	8000afc <__aeabi_dcmplt>
 802311a:	2800      	cmp	r0, #0
 802311c:	f43f af35 	beq.w	8022f8a <_dtoa_r+0x432>
 8023120:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8023122:	1e6b      	subs	r3, r5, #1
 8023124:	930f      	str	r3, [sp, #60]	; 0x3c
 8023126:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802312a:	2b30      	cmp	r3, #48	; 0x30
 802312c:	d0f8      	beq.n	8023120 <_dtoa_r+0x5c8>
 802312e:	9700      	str	r7, [sp, #0]
 8023130:	e04a      	b.n	80231c8 <_dtoa_r+0x670>
 8023132:	4b06      	ldr	r3, [pc, #24]	; (802314c <_dtoa_r+0x5f4>)
 8023134:	f7dd fa70 	bl	8000618 <__aeabi_dmul>
 8023138:	4680      	mov	r8, r0
 802313a:	4689      	mov	r9, r1
 802313c:	e7bd      	b.n	80230ba <_dtoa_r+0x562>
 802313e:	bf00      	nop
 8023140:	08071b78 	.word	0x08071b78
 8023144:	08071b50 	.word	0x08071b50
 8023148:	3ff00000 	.word	0x3ff00000
 802314c:	40240000 	.word	0x40240000
 8023150:	401c0000 	.word	0x401c0000
 8023154:	40140000 	.word	0x40140000
 8023158:	3fe00000 	.word	0x3fe00000
 802315c:	9d01      	ldr	r5, [sp, #4]
 802315e:	4656      	mov	r6, sl
 8023160:	465f      	mov	r7, fp
 8023162:	4642      	mov	r2, r8
 8023164:	464b      	mov	r3, r9
 8023166:	4630      	mov	r0, r6
 8023168:	4639      	mov	r1, r7
 802316a:	f7dd fb7f 	bl	800086c <__aeabi_ddiv>
 802316e:	f7dd fd03 	bl	8000b78 <__aeabi_d2iz>
 8023172:	4682      	mov	sl, r0
 8023174:	f7dd f9e6 	bl	8000544 <__aeabi_i2d>
 8023178:	4642      	mov	r2, r8
 802317a:	464b      	mov	r3, r9
 802317c:	f7dd fa4c 	bl	8000618 <__aeabi_dmul>
 8023180:	4602      	mov	r2, r0
 8023182:	460b      	mov	r3, r1
 8023184:	4630      	mov	r0, r6
 8023186:	4639      	mov	r1, r7
 8023188:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 802318c:	f7dd f88c 	bl	80002a8 <__aeabi_dsub>
 8023190:	f805 6b01 	strb.w	r6, [r5], #1
 8023194:	9e01      	ldr	r6, [sp, #4]
 8023196:	9f03      	ldr	r7, [sp, #12]
 8023198:	1bae      	subs	r6, r5, r6
 802319a:	42b7      	cmp	r7, r6
 802319c:	4602      	mov	r2, r0
 802319e:	460b      	mov	r3, r1
 80231a0:	d135      	bne.n	802320e <_dtoa_r+0x6b6>
 80231a2:	f7dd f883 	bl	80002ac <__adddf3>
 80231a6:	4642      	mov	r2, r8
 80231a8:	464b      	mov	r3, r9
 80231aa:	4606      	mov	r6, r0
 80231ac:	460f      	mov	r7, r1
 80231ae:	f7dd fcc3 	bl	8000b38 <__aeabi_dcmpgt>
 80231b2:	b9d0      	cbnz	r0, 80231ea <_dtoa_r+0x692>
 80231b4:	4642      	mov	r2, r8
 80231b6:	464b      	mov	r3, r9
 80231b8:	4630      	mov	r0, r6
 80231ba:	4639      	mov	r1, r7
 80231bc:	f7dd fc94 	bl	8000ae8 <__aeabi_dcmpeq>
 80231c0:	b110      	cbz	r0, 80231c8 <_dtoa_r+0x670>
 80231c2:	f01a 0f01 	tst.w	sl, #1
 80231c6:	d110      	bne.n	80231ea <_dtoa_r+0x692>
 80231c8:	4620      	mov	r0, r4
 80231ca:	ee18 1a10 	vmov	r1, s16
 80231ce:	f001 f934 	bl	802443a <_Bfree>
 80231d2:	2300      	movs	r3, #0
 80231d4:	9800      	ldr	r0, [sp, #0]
 80231d6:	702b      	strb	r3, [r5, #0]
 80231d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80231da:	3001      	adds	r0, #1
 80231dc:	6018      	str	r0, [r3, #0]
 80231de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80231e0:	2b00      	cmp	r3, #0
 80231e2:	f43f acf2 	beq.w	8022bca <_dtoa_r+0x72>
 80231e6:	601d      	str	r5, [r3, #0]
 80231e8:	e4ef      	b.n	8022bca <_dtoa_r+0x72>
 80231ea:	9f00      	ldr	r7, [sp, #0]
 80231ec:	462b      	mov	r3, r5
 80231ee:	461d      	mov	r5, r3
 80231f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80231f4:	2a39      	cmp	r2, #57	; 0x39
 80231f6:	d106      	bne.n	8023206 <_dtoa_r+0x6ae>
 80231f8:	9a01      	ldr	r2, [sp, #4]
 80231fa:	429a      	cmp	r2, r3
 80231fc:	d1f7      	bne.n	80231ee <_dtoa_r+0x696>
 80231fe:	9901      	ldr	r1, [sp, #4]
 8023200:	2230      	movs	r2, #48	; 0x30
 8023202:	3701      	adds	r7, #1
 8023204:	700a      	strb	r2, [r1, #0]
 8023206:	781a      	ldrb	r2, [r3, #0]
 8023208:	3201      	adds	r2, #1
 802320a:	701a      	strb	r2, [r3, #0]
 802320c:	e78f      	b.n	802312e <_dtoa_r+0x5d6>
 802320e:	4ba6      	ldr	r3, [pc, #664]	; (80234a8 <_dtoa_r+0x950>)
 8023210:	2200      	movs	r2, #0
 8023212:	f7dd fa01 	bl	8000618 <__aeabi_dmul>
 8023216:	2200      	movs	r2, #0
 8023218:	2300      	movs	r3, #0
 802321a:	4606      	mov	r6, r0
 802321c:	460f      	mov	r7, r1
 802321e:	f7dd fc63 	bl	8000ae8 <__aeabi_dcmpeq>
 8023222:	2800      	cmp	r0, #0
 8023224:	d09d      	beq.n	8023162 <_dtoa_r+0x60a>
 8023226:	e7cf      	b.n	80231c8 <_dtoa_r+0x670>
 8023228:	9a08      	ldr	r2, [sp, #32]
 802322a:	2a00      	cmp	r2, #0
 802322c:	f000 80d7 	beq.w	80233de <_dtoa_r+0x886>
 8023230:	9a06      	ldr	r2, [sp, #24]
 8023232:	2a01      	cmp	r2, #1
 8023234:	f300 80ba 	bgt.w	80233ac <_dtoa_r+0x854>
 8023238:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802323a:	2a00      	cmp	r2, #0
 802323c:	f000 80b2 	beq.w	80233a4 <_dtoa_r+0x84c>
 8023240:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8023244:	9e07      	ldr	r6, [sp, #28]
 8023246:	9d04      	ldr	r5, [sp, #16]
 8023248:	9a04      	ldr	r2, [sp, #16]
 802324a:	441a      	add	r2, r3
 802324c:	9204      	str	r2, [sp, #16]
 802324e:	9a05      	ldr	r2, [sp, #20]
 8023250:	2101      	movs	r1, #1
 8023252:	441a      	add	r2, r3
 8023254:	4620      	mov	r0, r4
 8023256:	9205      	str	r2, [sp, #20]
 8023258:	f001 f98e 	bl	8024578 <__i2b>
 802325c:	4607      	mov	r7, r0
 802325e:	2d00      	cmp	r5, #0
 8023260:	dd0c      	ble.n	802327c <_dtoa_r+0x724>
 8023262:	9b05      	ldr	r3, [sp, #20]
 8023264:	2b00      	cmp	r3, #0
 8023266:	dd09      	ble.n	802327c <_dtoa_r+0x724>
 8023268:	42ab      	cmp	r3, r5
 802326a:	9a04      	ldr	r2, [sp, #16]
 802326c:	bfa8      	it	ge
 802326e:	462b      	movge	r3, r5
 8023270:	1ad2      	subs	r2, r2, r3
 8023272:	9204      	str	r2, [sp, #16]
 8023274:	9a05      	ldr	r2, [sp, #20]
 8023276:	1aed      	subs	r5, r5, r3
 8023278:	1ad3      	subs	r3, r2, r3
 802327a:	9305      	str	r3, [sp, #20]
 802327c:	9b07      	ldr	r3, [sp, #28]
 802327e:	b31b      	cbz	r3, 80232c8 <_dtoa_r+0x770>
 8023280:	9b08      	ldr	r3, [sp, #32]
 8023282:	2b00      	cmp	r3, #0
 8023284:	f000 80af 	beq.w	80233e6 <_dtoa_r+0x88e>
 8023288:	2e00      	cmp	r6, #0
 802328a:	dd13      	ble.n	80232b4 <_dtoa_r+0x75c>
 802328c:	4639      	mov	r1, r7
 802328e:	4632      	mov	r2, r6
 8023290:	4620      	mov	r0, r4
 8023292:	f001 fa31 	bl	80246f8 <__pow5mult>
 8023296:	ee18 2a10 	vmov	r2, s16
 802329a:	4601      	mov	r1, r0
 802329c:	4607      	mov	r7, r0
 802329e:	4620      	mov	r0, r4
 80232a0:	f001 f980 	bl	80245a4 <__multiply>
 80232a4:	ee18 1a10 	vmov	r1, s16
 80232a8:	4680      	mov	r8, r0
 80232aa:	4620      	mov	r0, r4
 80232ac:	f001 f8c5 	bl	802443a <_Bfree>
 80232b0:	ee08 8a10 	vmov	s16, r8
 80232b4:	9b07      	ldr	r3, [sp, #28]
 80232b6:	1b9a      	subs	r2, r3, r6
 80232b8:	d006      	beq.n	80232c8 <_dtoa_r+0x770>
 80232ba:	ee18 1a10 	vmov	r1, s16
 80232be:	4620      	mov	r0, r4
 80232c0:	f001 fa1a 	bl	80246f8 <__pow5mult>
 80232c4:	ee08 0a10 	vmov	s16, r0
 80232c8:	2101      	movs	r1, #1
 80232ca:	4620      	mov	r0, r4
 80232cc:	f001 f954 	bl	8024578 <__i2b>
 80232d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80232d2:	2b00      	cmp	r3, #0
 80232d4:	4606      	mov	r6, r0
 80232d6:	f340 8088 	ble.w	80233ea <_dtoa_r+0x892>
 80232da:	461a      	mov	r2, r3
 80232dc:	4601      	mov	r1, r0
 80232de:	4620      	mov	r0, r4
 80232e0:	f001 fa0a 	bl	80246f8 <__pow5mult>
 80232e4:	9b06      	ldr	r3, [sp, #24]
 80232e6:	2b01      	cmp	r3, #1
 80232e8:	4606      	mov	r6, r0
 80232ea:	f340 8081 	ble.w	80233f0 <_dtoa_r+0x898>
 80232ee:	f04f 0800 	mov.w	r8, #0
 80232f2:	6933      	ldr	r3, [r6, #16]
 80232f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80232f8:	6918      	ldr	r0, [r3, #16]
 80232fa:	f001 f8ed 	bl	80244d8 <__hi0bits>
 80232fe:	f1c0 0020 	rsb	r0, r0, #32
 8023302:	9b05      	ldr	r3, [sp, #20]
 8023304:	4418      	add	r0, r3
 8023306:	f010 001f 	ands.w	r0, r0, #31
 802330a:	f000 8092 	beq.w	8023432 <_dtoa_r+0x8da>
 802330e:	f1c0 0320 	rsb	r3, r0, #32
 8023312:	2b04      	cmp	r3, #4
 8023314:	f340 808a 	ble.w	802342c <_dtoa_r+0x8d4>
 8023318:	f1c0 001c 	rsb	r0, r0, #28
 802331c:	9b04      	ldr	r3, [sp, #16]
 802331e:	4403      	add	r3, r0
 8023320:	9304      	str	r3, [sp, #16]
 8023322:	9b05      	ldr	r3, [sp, #20]
 8023324:	4403      	add	r3, r0
 8023326:	4405      	add	r5, r0
 8023328:	9305      	str	r3, [sp, #20]
 802332a:	9b04      	ldr	r3, [sp, #16]
 802332c:	2b00      	cmp	r3, #0
 802332e:	dd07      	ble.n	8023340 <_dtoa_r+0x7e8>
 8023330:	ee18 1a10 	vmov	r1, s16
 8023334:	461a      	mov	r2, r3
 8023336:	4620      	mov	r0, r4
 8023338:	f001 fa1e 	bl	8024778 <__lshift>
 802333c:	ee08 0a10 	vmov	s16, r0
 8023340:	9b05      	ldr	r3, [sp, #20]
 8023342:	2b00      	cmp	r3, #0
 8023344:	dd05      	ble.n	8023352 <_dtoa_r+0x7fa>
 8023346:	4631      	mov	r1, r6
 8023348:	461a      	mov	r2, r3
 802334a:	4620      	mov	r0, r4
 802334c:	f001 fa14 	bl	8024778 <__lshift>
 8023350:	4606      	mov	r6, r0
 8023352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023354:	2b00      	cmp	r3, #0
 8023356:	d06e      	beq.n	8023436 <_dtoa_r+0x8de>
 8023358:	ee18 0a10 	vmov	r0, s16
 802335c:	4631      	mov	r1, r6
 802335e:	f001 fa7b 	bl	8024858 <__mcmp>
 8023362:	2800      	cmp	r0, #0
 8023364:	da67      	bge.n	8023436 <_dtoa_r+0x8de>
 8023366:	9b00      	ldr	r3, [sp, #0]
 8023368:	3b01      	subs	r3, #1
 802336a:	ee18 1a10 	vmov	r1, s16
 802336e:	9300      	str	r3, [sp, #0]
 8023370:	220a      	movs	r2, #10
 8023372:	2300      	movs	r3, #0
 8023374:	4620      	mov	r0, r4
 8023376:	f001 f869 	bl	802444c <__multadd>
 802337a:	9b08      	ldr	r3, [sp, #32]
 802337c:	ee08 0a10 	vmov	s16, r0
 8023380:	2b00      	cmp	r3, #0
 8023382:	f000 81b0 	beq.w	80236e6 <_dtoa_r+0xb8e>
 8023386:	2300      	movs	r3, #0
 8023388:	4639      	mov	r1, r7
 802338a:	220a      	movs	r2, #10
 802338c:	4620      	mov	r0, r4
 802338e:	f001 f85d 	bl	802444c <__multadd>
 8023392:	9b02      	ldr	r3, [sp, #8]
 8023394:	2b00      	cmp	r3, #0
 8023396:	4607      	mov	r7, r0
 8023398:	f300 808e 	bgt.w	80234b8 <_dtoa_r+0x960>
 802339c:	9b06      	ldr	r3, [sp, #24]
 802339e:	2b02      	cmp	r3, #2
 80233a0:	dc51      	bgt.n	8023446 <_dtoa_r+0x8ee>
 80233a2:	e089      	b.n	80234b8 <_dtoa_r+0x960>
 80233a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80233a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80233aa:	e74b      	b.n	8023244 <_dtoa_r+0x6ec>
 80233ac:	9b03      	ldr	r3, [sp, #12]
 80233ae:	1e5e      	subs	r6, r3, #1
 80233b0:	9b07      	ldr	r3, [sp, #28]
 80233b2:	42b3      	cmp	r3, r6
 80233b4:	bfbf      	itttt	lt
 80233b6:	9b07      	ldrlt	r3, [sp, #28]
 80233b8:	9607      	strlt	r6, [sp, #28]
 80233ba:	1af2      	sublt	r2, r6, r3
 80233bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80233be:	bfb6      	itet	lt
 80233c0:	189b      	addlt	r3, r3, r2
 80233c2:	1b9e      	subge	r6, r3, r6
 80233c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80233c6:	9b03      	ldr	r3, [sp, #12]
 80233c8:	bfb8      	it	lt
 80233ca:	2600      	movlt	r6, #0
 80233cc:	2b00      	cmp	r3, #0
 80233ce:	bfb7      	itett	lt
 80233d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80233d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80233d8:	1a9d      	sublt	r5, r3, r2
 80233da:	2300      	movlt	r3, #0
 80233dc:	e734      	b.n	8023248 <_dtoa_r+0x6f0>
 80233de:	9e07      	ldr	r6, [sp, #28]
 80233e0:	9d04      	ldr	r5, [sp, #16]
 80233e2:	9f08      	ldr	r7, [sp, #32]
 80233e4:	e73b      	b.n	802325e <_dtoa_r+0x706>
 80233e6:	9a07      	ldr	r2, [sp, #28]
 80233e8:	e767      	b.n	80232ba <_dtoa_r+0x762>
 80233ea:	9b06      	ldr	r3, [sp, #24]
 80233ec:	2b01      	cmp	r3, #1
 80233ee:	dc18      	bgt.n	8023422 <_dtoa_r+0x8ca>
 80233f0:	f1ba 0f00 	cmp.w	sl, #0
 80233f4:	d115      	bne.n	8023422 <_dtoa_r+0x8ca>
 80233f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80233fa:	b993      	cbnz	r3, 8023422 <_dtoa_r+0x8ca>
 80233fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8023400:	0d1b      	lsrs	r3, r3, #20
 8023402:	051b      	lsls	r3, r3, #20
 8023404:	b183      	cbz	r3, 8023428 <_dtoa_r+0x8d0>
 8023406:	9b04      	ldr	r3, [sp, #16]
 8023408:	3301      	adds	r3, #1
 802340a:	9304      	str	r3, [sp, #16]
 802340c:	9b05      	ldr	r3, [sp, #20]
 802340e:	3301      	adds	r3, #1
 8023410:	9305      	str	r3, [sp, #20]
 8023412:	f04f 0801 	mov.w	r8, #1
 8023416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023418:	2b00      	cmp	r3, #0
 802341a:	f47f af6a 	bne.w	80232f2 <_dtoa_r+0x79a>
 802341e:	2001      	movs	r0, #1
 8023420:	e76f      	b.n	8023302 <_dtoa_r+0x7aa>
 8023422:	f04f 0800 	mov.w	r8, #0
 8023426:	e7f6      	b.n	8023416 <_dtoa_r+0x8be>
 8023428:	4698      	mov	r8, r3
 802342a:	e7f4      	b.n	8023416 <_dtoa_r+0x8be>
 802342c:	f43f af7d 	beq.w	802332a <_dtoa_r+0x7d2>
 8023430:	4618      	mov	r0, r3
 8023432:	301c      	adds	r0, #28
 8023434:	e772      	b.n	802331c <_dtoa_r+0x7c4>
 8023436:	9b03      	ldr	r3, [sp, #12]
 8023438:	2b00      	cmp	r3, #0
 802343a:	dc37      	bgt.n	80234ac <_dtoa_r+0x954>
 802343c:	9b06      	ldr	r3, [sp, #24]
 802343e:	2b02      	cmp	r3, #2
 8023440:	dd34      	ble.n	80234ac <_dtoa_r+0x954>
 8023442:	9b03      	ldr	r3, [sp, #12]
 8023444:	9302      	str	r3, [sp, #8]
 8023446:	9b02      	ldr	r3, [sp, #8]
 8023448:	b96b      	cbnz	r3, 8023466 <_dtoa_r+0x90e>
 802344a:	4631      	mov	r1, r6
 802344c:	2205      	movs	r2, #5
 802344e:	4620      	mov	r0, r4
 8023450:	f000 fffc 	bl	802444c <__multadd>
 8023454:	4601      	mov	r1, r0
 8023456:	4606      	mov	r6, r0
 8023458:	ee18 0a10 	vmov	r0, s16
 802345c:	f001 f9fc 	bl	8024858 <__mcmp>
 8023460:	2800      	cmp	r0, #0
 8023462:	f73f adba 	bgt.w	8022fda <_dtoa_r+0x482>
 8023466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023468:	9d01      	ldr	r5, [sp, #4]
 802346a:	43db      	mvns	r3, r3
 802346c:	9300      	str	r3, [sp, #0]
 802346e:	f04f 0800 	mov.w	r8, #0
 8023472:	4631      	mov	r1, r6
 8023474:	4620      	mov	r0, r4
 8023476:	f000 ffe0 	bl	802443a <_Bfree>
 802347a:	2f00      	cmp	r7, #0
 802347c:	f43f aea4 	beq.w	80231c8 <_dtoa_r+0x670>
 8023480:	f1b8 0f00 	cmp.w	r8, #0
 8023484:	d005      	beq.n	8023492 <_dtoa_r+0x93a>
 8023486:	45b8      	cmp	r8, r7
 8023488:	d003      	beq.n	8023492 <_dtoa_r+0x93a>
 802348a:	4641      	mov	r1, r8
 802348c:	4620      	mov	r0, r4
 802348e:	f000 ffd4 	bl	802443a <_Bfree>
 8023492:	4639      	mov	r1, r7
 8023494:	4620      	mov	r0, r4
 8023496:	f000 ffd0 	bl	802443a <_Bfree>
 802349a:	e695      	b.n	80231c8 <_dtoa_r+0x670>
 802349c:	2600      	movs	r6, #0
 802349e:	4637      	mov	r7, r6
 80234a0:	e7e1      	b.n	8023466 <_dtoa_r+0x90e>
 80234a2:	9700      	str	r7, [sp, #0]
 80234a4:	4637      	mov	r7, r6
 80234a6:	e598      	b.n	8022fda <_dtoa_r+0x482>
 80234a8:	40240000 	.word	0x40240000
 80234ac:	9b08      	ldr	r3, [sp, #32]
 80234ae:	2b00      	cmp	r3, #0
 80234b0:	f000 80c9 	beq.w	8023646 <_dtoa_r+0xaee>
 80234b4:	9b03      	ldr	r3, [sp, #12]
 80234b6:	9302      	str	r3, [sp, #8]
 80234b8:	2d00      	cmp	r5, #0
 80234ba:	dd05      	ble.n	80234c8 <_dtoa_r+0x970>
 80234bc:	4639      	mov	r1, r7
 80234be:	462a      	mov	r2, r5
 80234c0:	4620      	mov	r0, r4
 80234c2:	f001 f959 	bl	8024778 <__lshift>
 80234c6:	4607      	mov	r7, r0
 80234c8:	f1b8 0f00 	cmp.w	r8, #0
 80234cc:	d05a      	beq.n	8023584 <_dtoa_r+0xa2c>
 80234ce:	6879      	ldr	r1, [r7, #4]
 80234d0:	4620      	mov	r0, r4
 80234d2:	f000 ff8d 	bl	80243f0 <_Balloc>
 80234d6:	4605      	mov	r5, r0
 80234d8:	b920      	cbnz	r0, 80234e4 <_dtoa_r+0x98c>
 80234da:	4b87      	ldr	r3, [pc, #540]	; (80236f8 <_dtoa_r+0xba0>)
 80234dc:	4602      	mov	r2, r0
 80234de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80234e2:	e477      	b.n	8022dd4 <_dtoa_r+0x27c>
 80234e4:	693a      	ldr	r2, [r7, #16]
 80234e6:	3202      	adds	r2, #2
 80234e8:	0092      	lsls	r2, r2, #2
 80234ea:	f107 010c 	add.w	r1, r7, #12
 80234ee:	300c      	adds	r0, #12
 80234f0:	f7fc fd08 	bl	801ff04 <memcpy>
 80234f4:	2201      	movs	r2, #1
 80234f6:	4629      	mov	r1, r5
 80234f8:	4620      	mov	r0, r4
 80234fa:	f001 f93d 	bl	8024778 <__lshift>
 80234fe:	9b01      	ldr	r3, [sp, #4]
 8023500:	f103 0901 	add.w	r9, r3, #1
 8023504:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8023508:	4413      	add	r3, r2
 802350a:	9305      	str	r3, [sp, #20]
 802350c:	f00a 0301 	and.w	r3, sl, #1
 8023510:	46b8      	mov	r8, r7
 8023512:	9304      	str	r3, [sp, #16]
 8023514:	4607      	mov	r7, r0
 8023516:	4631      	mov	r1, r6
 8023518:	ee18 0a10 	vmov	r0, s16
 802351c:	f7ff fa8e 	bl	8022a3c <quorem>
 8023520:	4641      	mov	r1, r8
 8023522:	9002      	str	r0, [sp, #8]
 8023524:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8023528:	ee18 0a10 	vmov	r0, s16
 802352c:	f001 f994 	bl	8024858 <__mcmp>
 8023530:	463a      	mov	r2, r7
 8023532:	9003      	str	r0, [sp, #12]
 8023534:	4631      	mov	r1, r6
 8023536:	4620      	mov	r0, r4
 8023538:	f001 f9aa 	bl	8024890 <__mdiff>
 802353c:	68c2      	ldr	r2, [r0, #12]
 802353e:	f109 3bff 	add.w	fp, r9, #4294967295
 8023542:	4605      	mov	r5, r0
 8023544:	bb02      	cbnz	r2, 8023588 <_dtoa_r+0xa30>
 8023546:	4601      	mov	r1, r0
 8023548:	ee18 0a10 	vmov	r0, s16
 802354c:	f001 f984 	bl	8024858 <__mcmp>
 8023550:	4602      	mov	r2, r0
 8023552:	4629      	mov	r1, r5
 8023554:	4620      	mov	r0, r4
 8023556:	9207      	str	r2, [sp, #28]
 8023558:	f000 ff6f 	bl	802443a <_Bfree>
 802355c:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8023560:	ea43 0102 	orr.w	r1, r3, r2
 8023564:	9b04      	ldr	r3, [sp, #16]
 8023566:	430b      	orrs	r3, r1
 8023568:	464d      	mov	r5, r9
 802356a:	d10f      	bne.n	802358c <_dtoa_r+0xa34>
 802356c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8023570:	d02a      	beq.n	80235c8 <_dtoa_r+0xa70>
 8023572:	9b03      	ldr	r3, [sp, #12]
 8023574:	2b00      	cmp	r3, #0
 8023576:	dd02      	ble.n	802357e <_dtoa_r+0xa26>
 8023578:	9b02      	ldr	r3, [sp, #8]
 802357a:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 802357e:	f88b a000 	strb.w	sl, [fp]
 8023582:	e776      	b.n	8023472 <_dtoa_r+0x91a>
 8023584:	4638      	mov	r0, r7
 8023586:	e7ba      	b.n	80234fe <_dtoa_r+0x9a6>
 8023588:	2201      	movs	r2, #1
 802358a:	e7e2      	b.n	8023552 <_dtoa_r+0x9fa>
 802358c:	9b03      	ldr	r3, [sp, #12]
 802358e:	2b00      	cmp	r3, #0
 8023590:	db04      	blt.n	802359c <_dtoa_r+0xa44>
 8023592:	9906      	ldr	r1, [sp, #24]
 8023594:	430b      	orrs	r3, r1
 8023596:	9904      	ldr	r1, [sp, #16]
 8023598:	430b      	orrs	r3, r1
 802359a:	d122      	bne.n	80235e2 <_dtoa_r+0xa8a>
 802359c:	2a00      	cmp	r2, #0
 802359e:	ddee      	ble.n	802357e <_dtoa_r+0xa26>
 80235a0:	ee18 1a10 	vmov	r1, s16
 80235a4:	2201      	movs	r2, #1
 80235a6:	4620      	mov	r0, r4
 80235a8:	f001 f8e6 	bl	8024778 <__lshift>
 80235ac:	4631      	mov	r1, r6
 80235ae:	ee08 0a10 	vmov	s16, r0
 80235b2:	f001 f951 	bl	8024858 <__mcmp>
 80235b6:	2800      	cmp	r0, #0
 80235b8:	dc03      	bgt.n	80235c2 <_dtoa_r+0xa6a>
 80235ba:	d1e0      	bne.n	802357e <_dtoa_r+0xa26>
 80235bc:	f01a 0f01 	tst.w	sl, #1
 80235c0:	d0dd      	beq.n	802357e <_dtoa_r+0xa26>
 80235c2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80235c6:	d1d7      	bne.n	8023578 <_dtoa_r+0xa20>
 80235c8:	2339      	movs	r3, #57	; 0x39
 80235ca:	f88b 3000 	strb.w	r3, [fp]
 80235ce:	462b      	mov	r3, r5
 80235d0:	461d      	mov	r5, r3
 80235d2:	3b01      	subs	r3, #1
 80235d4:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80235d8:	2a39      	cmp	r2, #57	; 0x39
 80235da:	d071      	beq.n	80236c0 <_dtoa_r+0xb68>
 80235dc:	3201      	adds	r2, #1
 80235de:	701a      	strb	r2, [r3, #0]
 80235e0:	e747      	b.n	8023472 <_dtoa_r+0x91a>
 80235e2:	2a00      	cmp	r2, #0
 80235e4:	dd07      	ble.n	80235f6 <_dtoa_r+0xa9e>
 80235e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80235ea:	d0ed      	beq.n	80235c8 <_dtoa_r+0xa70>
 80235ec:	f10a 0301 	add.w	r3, sl, #1
 80235f0:	f88b 3000 	strb.w	r3, [fp]
 80235f4:	e73d      	b.n	8023472 <_dtoa_r+0x91a>
 80235f6:	9b05      	ldr	r3, [sp, #20]
 80235f8:	f809 ac01 	strb.w	sl, [r9, #-1]
 80235fc:	4599      	cmp	r9, r3
 80235fe:	d047      	beq.n	8023690 <_dtoa_r+0xb38>
 8023600:	ee18 1a10 	vmov	r1, s16
 8023604:	2300      	movs	r3, #0
 8023606:	220a      	movs	r2, #10
 8023608:	4620      	mov	r0, r4
 802360a:	f000 ff1f 	bl	802444c <__multadd>
 802360e:	45b8      	cmp	r8, r7
 8023610:	ee08 0a10 	vmov	s16, r0
 8023614:	f04f 0300 	mov.w	r3, #0
 8023618:	f04f 020a 	mov.w	r2, #10
 802361c:	4641      	mov	r1, r8
 802361e:	4620      	mov	r0, r4
 8023620:	d106      	bne.n	8023630 <_dtoa_r+0xad8>
 8023622:	f000 ff13 	bl	802444c <__multadd>
 8023626:	4680      	mov	r8, r0
 8023628:	4607      	mov	r7, r0
 802362a:	f109 0901 	add.w	r9, r9, #1
 802362e:	e772      	b.n	8023516 <_dtoa_r+0x9be>
 8023630:	f000 ff0c 	bl	802444c <__multadd>
 8023634:	4639      	mov	r1, r7
 8023636:	4680      	mov	r8, r0
 8023638:	2300      	movs	r3, #0
 802363a:	220a      	movs	r2, #10
 802363c:	4620      	mov	r0, r4
 802363e:	f000 ff05 	bl	802444c <__multadd>
 8023642:	4607      	mov	r7, r0
 8023644:	e7f1      	b.n	802362a <_dtoa_r+0xad2>
 8023646:	9b03      	ldr	r3, [sp, #12]
 8023648:	9302      	str	r3, [sp, #8]
 802364a:	9d01      	ldr	r5, [sp, #4]
 802364c:	ee18 0a10 	vmov	r0, s16
 8023650:	4631      	mov	r1, r6
 8023652:	f7ff f9f3 	bl	8022a3c <quorem>
 8023656:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 802365a:	9b01      	ldr	r3, [sp, #4]
 802365c:	f805 ab01 	strb.w	sl, [r5], #1
 8023660:	1aea      	subs	r2, r5, r3
 8023662:	9b02      	ldr	r3, [sp, #8]
 8023664:	4293      	cmp	r3, r2
 8023666:	dd09      	ble.n	802367c <_dtoa_r+0xb24>
 8023668:	ee18 1a10 	vmov	r1, s16
 802366c:	2300      	movs	r3, #0
 802366e:	220a      	movs	r2, #10
 8023670:	4620      	mov	r0, r4
 8023672:	f000 feeb 	bl	802444c <__multadd>
 8023676:	ee08 0a10 	vmov	s16, r0
 802367a:	e7e7      	b.n	802364c <_dtoa_r+0xaf4>
 802367c:	9b02      	ldr	r3, [sp, #8]
 802367e:	2b00      	cmp	r3, #0
 8023680:	bfc8      	it	gt
 8023682:	461d      	movgt	r5, r3
 8023684:	9b01      	ldr	r3, [sp, #4]
 8023686:	bfd8      	it	le
 8023688:	2501      	movle	r5, #1
 802368a:	441d      	add	r5, r3
 802368c:	f04f 0800 	mov.w	r8, #0
 8023690:	ee18 1a10 	vmov	r1, s16
 8023694:	2201      	movs	r2, #1
 8023696:	4620      	mov	r0, r4
 8023698:	f001 f86e 	bl	8024778 <__lshift>
 802369c:	4631      	mov	r1, r6
 802369e:	ee08 0a10 	vmov	s16, r0
 80236a2:	f001 f8d9 	bl	8024858 <__mcmp>
 80236a6:	2800      	cmp	r0, #0
 80236a8:	dc91      	bgt.n	80235ce <_dtoa_r+0xa76>
 80236aa:	d102      	bne.n	80236b2 <_dtoa_r+0xb5a>
 80236ac:	f01a 0f01 	tst.w	sl, #1
 80236b0:	d18d      	bne.n	80235ce <_dtoa_r+0xa76>
 80236b2:	462b      	mov	r3, r5
 80236b4:	461d      	mov	r5, r3
 80236b6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80236ba:	2a30      	cmp	r2, #48	; 0x30
 80236bc:	d0fa      	beq.n	80236b4 <_dtoa_r+0xb5c>
 80236be:	e6d8      	b.n	8023472 <_dtoa_r+0x91a>
 80236c0:	9a01      	ldr	r2, [sp, #4]
 80236c2:	429a      	cmp	r2, r3
 80236c4:	d184      	bne.n	80235d0 <_dtoa_r+0xa78>
 80236c6:	9b00      	ldr	r3, [sp, #0]
 80236c8:	3301      	adds	r3, #1
 80236ca:	9300      	str	r3, [sp, #0]
 80236cc:	2331      	movs	r3, #49	; 0x31
 80236ce:	7013      	strb	r3, [r2, #0]
 80236d0:	e6cf      	b.n	8023472 <_dtoa_r+0x91a>
 80236d2:	4b0a      	ldr	r3, [pc, #40]	; (80236fc <_dtoa_r+0xba4>)
 80236d4:	f7ff ba97 	b.w	8022c06 <_dtoa_r+0xae>
 80236d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80236da:	2b00      	cmp	r3, #0
 80236dc:	f47f aa7b 	bne.w	8022bd6 <_dtoa_r+0x7e>
 80236e0:	4b07      	ldr	r3, [pc, #28]	; (8023700 <_dtoa_r+0xba8>)
 80236e2:	f7ff ba90 	b.w	8022c06 <_dtoa_r+0xae>
 80236e6:	9b02      	ldr	r3, [sp, #8]
 80236e8:	2b00      	cmp	r3, #0
 80236ea:	dcae      	bgt.n	802364a <_dtoa_r+0xaf2>
 80236ec:	9b06      	ldr	r3, [sp, #24]
 80236ee:	2b02      	cmp	r3, #2
 80236f0:	f73f aea9 	bgt.w	8023446 <_dtoa_r+0x8ee>
 80236f4:	e7a9      	b.n	802364a <_dtoa_r+0xaf2>
 80236f6:	bf00      	nop
 80236f8:	08071a81 	.word	0x08071a81
 80236fc:	08071a32 	.word	0x08071a32
 8023700:	08071a78 	.word	0x08071a78

08023704 <__errno>:
 8023704:	4b01      	ldr	r3, [pc, #4]	; (802370c <__errno+0x8>)
 8023706:	6818      	ldr	r0, [r3, #0]
 8023708:	4770      	bx	lr
 802370a:	bf00      	nop
 802370c:	2000001c 	.word	0x2000001c

08023710 <__sflush_r>:
 8023710:	898b      	ldrh	r3, [r1, #12]
 8023712:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8023716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802371a:	4605      	mov	r5, r0
 802371c:	0718      	lsls	r0, r3, #28
 802371e:	460c      	mov	r4, r1
 8023720:	d45f      	bmi.n	80237e2 <__sflush_r+0xd2>
 8023722:	684b      	ldr	r3, [r1, #4]
 8023724:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8023728:	2b00      	cmp	r3, #0
 802372a:	818a      	strh	r2, [r1, #12]
 802372c:	dc05      	bgt.n	802373a <__sflush_r+0x2a>
 802372e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8023730:	2b00      	cmp	r3, #0
 8023732:	dc02      	bgt.n	802373a <__sflush_r+0x2a>
 8023734:	2000      	movs	r0, #0
 8023736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802373a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802373c:	2e00      	cmp	r6, #0
 802373e:	d0f9      	beq.n	8023734 <__sflush_r+0x24>
 8023740:	2300      	movs	r3, #0
 8023742:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8023746:	682f      	ldr	r7, [r5, #0]
 8023748:	602b      	str	r3, [r5, #0]
 802374a:	d036      	beq.n	80237ba <__sflush_r+0xaa>
 802374c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 802374e:	89a3      	ldrh	r3, [r4, #12]
 8023750:	075a      	lsls	r2, r3, #29
 8023752:	d505      	bpl.n	8023760 <__sflush_r+0x50>
 8023754:	6863      	ldr	r3, [r4, #4]
 8023756:	1ac0      	subs	r0, r0, r3
 8023758:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802375a:	b10b      	cbz	r3, 8023760 <__sflush_r+0x50>
 802375c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802375e:	1ac0      	subs	r0, r0, r3
 8023760:	2300      	movs	r3, #0
 8023762:	4602      	mov	r2, r0
 8023764:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8023766:	69e1      	ldr	r1, [r4, #28]
 8023768:	4628      	mov	r0, r5
 802376a:	47b0      	blx	r6
 802376c:	1c43      	adds	r3, r0, #1
 802376e:	89a3      	ldrh	r3, [r4, #12]
 8023770:	d106      	bne.n	8023780 <__sflush_r+0x70>
 8023772:	6829      	ldr	r1, [r5, #0]
 8023774:	291d      	cmp	r1, #29
 8023776:	d830      	bhi.n	80237da <__sflush_r+0xca>
 8023778:	4a2b      	ldr	r2, [pc, #172]	; (8023828 <__sflush_r+0x118>)
 802377a:	40ca      	lsrs	r2, r1
 802377c:	07d6      	lsls	r6, r2, #31
 802377e:	d52c      	bpl.n	80237da <__sflush_r+0xca>
 8023780:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8023784:	b21b      	sxth	r3, r3
 8023786:	2200      	movs	r2, #0
 8023788:	6062      	str	r2, [r4, #4]
 802378a:	04d9      	lsls	r1, r3, #19
 802378c:	6922      	ldr	r2, [r4, #16]
 802378e:	81a3      	strh	r3, [r4, #12]
 8023790:	6022      	str	r2, [r4, #0]
 8023792:	d504      	bpl.n	802379e <__sflush_r+0x8e>
 8023794:	1c42      	adds	r2, r0, #1
 8023796:	d101      	bne.n	802379c <__sflush_r+0x8c>
 8023798:	682b      	ldr	r3, [r5, #0]
 802379a:	b903      	cbnz	r3, 802379e <__sflush_r+0x8e>
 802379c:	6520      	str	r0, [r4, #80]	; 0x50
 802379e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80237a0:	602f      	str	r7, [r5, #0]
 80237a2:	2900      	cmp	r1, #0
 80237a4:	d0c6      	beq.n	8023734 <__sflush_r+0x24>
 80237a6:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80237aa:	4299      	cmp	r1, r3
 80237ac:	d002      	beq.n	80237b4 <__sflush_r+0xa4>
 80237ae:	4628      	mov	r0, r5
 80237b0:	f000 f938 	bl	8023a24 <_free_r>
 80237b4:	2000      	movs	r0, #0
 80237b6:	6320      	str	r0, [r4, #48]	; 0x30
 80237b8:	e7bd      	b.n	8023736 <__sflush_r+0x26>
 80237ba:	69e1      	ldr	r1, [r4, #28]
 80237bc:	2301      	movs	r3, #1
 80237be:	4628      	mov	r0, r5
 80237c0:	47b0      	blx	r6
 80237c2:	1c41      	adds	r1, r0, #1
 80237c4:	d1c3      	bne.n	802374e <__sflush_r+0x3e>
 80237c6:	682b      	ldr	r3, [r5, #0]
 80237c8:	2b00      	cmp	r3, #0
 80237ca:	d0c0      	beq.n	802374e <__sflush_r+0x3e>
 80237cc:	2b1d      	cmp	r3, #29
 80237ce:	d001      	beq.n	80237d4 <__sflush_r+0xc4>
 80237d0:	2b16      	cmp	r3, #22
 80237d2:	d101      	bne.n	80237d8 <__sflush_r+0xc8>
 80237d4:	602f      	str	r7, [r5, #0]
 80237d6:	e7ad      	b.n	8023734 <__sflush_r+0x24>
 80237d8:	89a3      	ldrh	r3, [r4, #12]
 80237da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80237de:	81a3      	strh	r3, [r4, #12]
 80237e0:	e7a9      	b.n	8023736 <__sflush_r+0x26>
 80237e2:	690f      	ldr	r7, [r1, #16]
 80237e4:	2f00      	cmp	r7, #0
 80237e6:	d0a5      	beq.n	8023734 <__sflush_r+0x24>
 80237e8:	079b      	lsls	r3, r3, #30
 80237ea:	680e      	ldr	r6, [r1, #0]
 80237ec:	bf08      	it	eq
 80237ee:	694b      	ldreq	r3, [r1, #20]
 80237f0:	600f      	str	r7, [r1, #0]
 80237f2:	bf18      	it	ne
 80237f4:	2300      	movne	r3, #0
 80237f6:	eba6 0807 	sub.w	r8, r6, r7
 80237fa:	608b      	str	r3, [r1, #8]
 80237fc:	f1b8 0f00 	cmp.w	r8, #0
 8023800:	dd98      	ble.n	8023734 <__sflush_r+0x24>
 8023802:	69e1      	ldr	r1, [r4, #28]
 8023804:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8023806:	4643      	mov	r3, r8
 8023808:	463a      	mov	r2, r7
 802380a:	4628      	mov	r0, r5
 802380c:	47b0      	blx	r6
 802380e:	2800      	cmp	r0, #0
 8023810:	dc06      	bgt.n	8023820 <__sflush_r+0x110>
 8023812:	89a3      	ldrh	r3, [r4, #12]
 8023814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023818:	81a3      	strh	r3, [r4, #12]
 802381a:	f04f 30ff 	mov.w	r0, #4294967295
 802381e:	e78a      	b.n	8023736 <__sflush_r+0x26>
 8023820:	4407      	add	r7, r0
 8023822:	eba8 0800 	sub.w	r8, r8, r0
 8023826:	e7e9      	b.n	80237fc <__sflush_r+0xec>
 8023828:	20400001 	.word	0x20400001

0802382c <_fflush_r>:
 802382c:	b538      	push	{r3, r4, r5, lr}
 802382e:	460c      	mov	r4, r1
 8023830:	4605      	mov	r5, r0
 8023832:	b118      	cbz	r0, 802383c <_fflush_r+0x10>
 8023834:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8023836:	b90b      	cbnz	r3, 802383c <_fflush_r+0x10>
 8023838:	f000 f864 	bl	8023904 <__sinit>
 802383c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023840:	b1bb      	cbz	r3, 8023872 <_fflush_r+0x46>
 8023842:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8023844:	07d0      	lsls	r0, r2, #31
 8023846:	d404      	bmi.n	8023852 <_fflush_r+0x26>
 8023848:	0599      	lsls	r1, r3, #22
 802384a:	d402      	bmi.n	8023852 <_fflush_r+0x26>
 802384c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802384e:	f000 fb19 	bl	8023e84 <__retarget_lock_acquire_recursive>
 8023852:	4628      	mov	r0, r5
 8023854:	4621      	mov	r1, r4
 8023856:	f7ff ff5b 	bl	8023710 <__sflush_r>
 802385a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802385c:	07da      	lsls	r2, r3, #31
 802385e:	4605      	mov	r5, r0
 8023860:	d405      	bmi.n	802386e <_fflush_r+0x42>
 8023862:	89a3      	ldrh	r3, [r4, #12]
 8023864:	059b      	lsls	r3, r3, #22
 8023866:	d402      	bmi.n	802386e <_fflush_r+0x42>
 8023868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802386a:	f000 fb0c 	bl	8023e86 <__retarget_lock_release_recursive>
 802386e:	4628      	mov	r0, r5
 8023870:	bd38      	pop	{r3, r4, r5, pc}
 8023872:	461d      	mov	r5, r3
 8023874:	e7fb      	b.n	802386e <_fflush_r+0x42>
	...

08023878 <std>:
 8023878:	2300      	movs	r3, #0
 802387a:	b510      	push	{r4, lr}
 802387c:	4604      	mov	r4, r0
 802387e:	e9c0 3300 	strd	r3, r3, [r0]
 8023882:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8023886:	6083      	str	r3, [r0, #8]
 8023888:	8181      	strh	r1, [r0, #12]
 802388a:	6643      	str	r3, [r0, #100]	; 0x64
 802388c:	81c2      	strh	r2, [r0, #14]
 802388e:	6183      	str	r3, [r0, #24]
 8023890:	4619      	mov	r1, r3
 8023892:	2208      	movs	r2, #8
 8023894:	305c      	adds	r0, #92	; 0x5c
 8023896:	f7fc fb5d 	bl	801ff54 <memset>
 802389a:	4b07      	ldr	r3, [pc, #28]	; (80238b8 <std+0x40>)
 802389c:	6223      	str	r3, [r4, #32]
 802389e:	4b07      	ldr	r3, [pc, #28]	; (80238bc <std+0x44>)
 80238a0:	6263      	str	r3, [r4, #36]	; 0x24
 80238a2:	4b07      	ldr	r3, [pc, #28]	; (80238c0 <std+0x48>)
 80238a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80238a6:	4b07      	ldr	r3, [pc, #28]	; (80238c4 <std+0x4c>)
 80238a8:	61e4      	str	r4, [r4, #28]
 80238aa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80238ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80238b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80238b4:	f000 bae4 	b.w	8023e80 <__retarget_lock_init_recursive>
 80238b8:	08024e35 	.word	0x08024e35
 80238bc:	08024e57 	.word	0x08024e57
 80238c0:	08024e8f 	.word	0x08024e8f
 80238c4:	08024eb3 	.word	0x08024eb3

080238c8 <_cleanup_r>:
 80238c8:	4901      	ldr	r1, [pc, #4]	; (80238d0 <_cleanup_r+0x8>)
 80238ca:	f000 bab5 	b.w	8023e38 <_fwalk_reent>
 80238ce:	bf00      	nop
 80238d0:	08025b71 	.word	0x08025b71

080238d4 <__sfp_lock_acquire>:
 80238d4:	4801      	ldr	r0, [pc, #4]	; (80238dc <__sfp_lock_acquire+0x8>)
 80238d6:	f000 bad5 	b.w	8023e84 <__retarget_lock_acquire_recursive>
 80238da:	bf00      	nop
 80238dc:	20018a02 	.word	0x20018a02

080238e0 <__sfp_lock_release>:
 80238e0:	4801      	ldr	r0, [pc, #4]	; (80238e8 <__sfp_lock_release+0x8>)
 80238e2:	f000 bad0 	b.w	8023e86 <__retarget_lock_release_recursive>
 80238e6:	bf00      	nop
 80238e8:	20018a02 	.word	0x20018a02

080238ec <__sinit_lock_acquire>:
 80238ec:	4801      	ldr	r0, [pc, #4]	; (80238f4 <__sinit_lock_acquire+0x8>)
 80238ee:	f000 bac9 	b.w	8023e84 <__retarget_lock_acquire_recursive>
 80238f2:	bf00      	nop
 80238f4:	20018a03 	.word	0x20018a03

080238f8 <__sinit_lock_release>:
 80238f8:	4801      	ldr	r0, [pc, #4]	; (8023900 <__sinit_lock_release+0x8>)
 80238fa:	f000 bac4 	b.w	8023e86 <__retarget_lock_release_recursive>
 80238fe:	bf00      	nop
 8023900:	20018a03 	.word	0x20018a03

08023904 <__sinit>:
 8023904:	b510      	push	{r4, lr}
 8023906:	4604      	mov	r4, r0
 8023908:	f7ff fff0 	bl	80238ec <__sinit_lock_acquire>
 802390c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 802390e:	b11a      	cbz	r2, 8023918 <__sinit+0x14>
 8023910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023914:	f7ff bff0 	b.w	80238f8 <__sinit_lock_release>
 8023918:	4b0d      	ldr	r3, [pc, #52]	; (8023950 <__sinit+0x4c>)
 802391a:	63e3      	str	r3, [r4, #60]	; 0x3c
 802391c:	2303      	movs	r3, #3
 802391e:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 8023922:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 8023926:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 802392a:	6860      	ldr	r0, [r4, #4]
 802392c:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 8023930:	2104      	movs	r1, #4
 8023932:	f7ff ffa1 	bl	8023878 <std>
 8023936:	68a0      	ldr	r0, [r4, #8]
 8023938:	2201      	movs	r2, #1
 802393a:	2109      	movs	r1, #9
 802393c:	f7ff ff9c 	bl	8023878 <std>
 8023940:	68e0      	ldr	r0, [r4, #12]
 8023942:	2202      	movs	r2, #2
 8023944:	2112      	movs	r1, #18
 8023946:	f7ff ff97 	bl	8023878 <std>
 802394a:	2301      	movs	r3, #1
 802394c:	63a3      	str	r3, [r4, #56]	; 0x38
 802394e:	e7df      	b.n	8023910 <__sinit+0xc>
 8023950:	080238c9 	.word	0x080238c9

08023954 <__libc_fini_array>:
 8023954:	b538      	push	{r3, r4, r5, lr}
 8023956:	4d07      	ldr	r5, [pc, #28]	; (8023974 <__libc_fini_array+0x20>)
 8023958:	4c07      	ldr	r4, [pc, #28]	; (8023978 <__libc_fini_array+0x24>)
 802395a:	1b64      	subs	r4, r4, r5
 802395c:	10a4      	asrs	r4, r4, #2
 802395e:	b91c      	cbnz	r4, 8023968 <__libc_fini_array+0x14>
 8023960:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023964:	f002 baf8 	b.w	8025f58 <_fini>
 8023968:	3c01      	subs	r4, #1
 802396a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 802396e:	4798      	blx	r3
 8023970:	e7f5      	b.n	802395e <__libc_fini_array+0xa>
 8023972:	bf00      	nop
 8023974:	08071cc4 	.word	0x08071cc4
 8023978:	08071cc8 	.word	0x08071cc8

0802397c <_malloc_trim_r>:
 802397c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023980:	4606      	mov	r6, r0
 8023982:	2008      	movs	r0, #8
 8023984:	460c      	mov	r4, r1
 8023986:	f001 fb26 	bl	8024fd6 <sysconf>
 802398a:	4f23      	ldr	r7, [pc, #140]	; (8023a18 <_malloc_trim_r+0x9c>)
 802398c:	4680      	mov	r8, r0
 802398e:	4630      	mov	r0, r6
 8023990:	f000 fd22 	bl	80243d8 <__malloc_lock>
 8023994:	68bb      	ldr	r3, [r7, #8]
 8023996:	685d      	ldr	r5, [r3, #4]
 8023998:	f025 0503 	bic.w	r5, r5, #3
 802399c:	1b2c      	subs	r4, r5, r4
 802399e:	3c11      	subs	r4, #17
 80239a0:	4444      	add	r4, r8
 80239a2:	fbb4 f4f8 	udiv	r4, r4, r8
 80239a6:	3c01      	subs	r4, #1
 80239a8:	fb08 f404 	mul.w	r4, r8, r4
 80239ac:	45a0      	cmp	r8, r4
 80239ae:	dd05      	ble.n	80239bc <_malloc_trim_r+0x40>
 80239b0:	4630      	mov	r0, r6
 80239b2:	f000 fd17 	bl	80243e4 <__malloc_unlock>
 80239b6:	2000      	movs	r0, #0
 80239b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80239bc:	2100      	movs	r1, #0
 80239be:	4630      	mov	r0, r6
 80239c0:	f001 fa28 	bl	8024e14 <_sbrk_r>
 80239c4:	68bb      	ldr	r3, [r7, #8]
 80239c6:	442b      	add	r3, r5
 80239c8:	4298      	cmp	r0, r3
 80239ca:	d1f1      	bne.n	80239b0 <_malloc_trim_r+0x34>
 80239cc:	4261      	negs	r1, r4
 80239ce:	4630      	mov	r0, r6
 80239d0:	f001 fa20 	bl	8024e14 <_sbrk_r>
 80239d4:	3001      	adds	r0, #1
 80239d6:	d110      	bne.n	80239fa <_malloc_trim_r+0x7e>
 80239d8:	2100      	movs	r1, #0
 80239da:	4630      	mov	r0, r6
 80239dc:	f001 fa1a 	bl	8024e14 <_sbrk_r>
 80239e0:	68ba      	ldr	r2, [r7, #8]
 80239e2:	1a83      	subs	r3, r0, r2
 80239e4:	2b0f      	cmp	r3, #15
 80239e6:	dde3      	ble.n	80239b0 <_malloc_trim_r+0x34>
 80239e8:	490c      	ldr	r1, [pc, #48]	; (8023a1c <_malloc_trim_r+0xa0>)
 80239ea:	6809      	ldr	r1, [r1, #0]
 80239ec:	1a40      	subs	r0, r0, r1
 80239ee:	490c      	ldr	r1, [pc, #48]	; (8023a20 <_malloc_trim_r+0xa4>)
 80239f0:	f043 0301 	orr.w	r3, r3, #1
 80239f4:	6008      	str	r0, [r1, #0]
 80239f6:	6053      	str	r3, [r2, #4]
 80239f8:	e7da      	b.n	80239b0 <_malloc_trim_r+0x34>
 80239fa:	68bb      	ldr	r3, [r7, #8]
 80239fc:	4a08      	ldr	r2, [pc, #32]	; (8023a20 <_malloc_trim_r+0xa4>)
 80239fe:	1b2d      	subs	r5, r5, r4
 8023a00:	f045 0501 	orr.w	r5, r5, #1
 8023a04:	605d      	str	r5, [r3, #4]
 8023a06:	6813      	ldr	r3, [r2, #0]
 8023a08:	4630      	mov	r0, r6
 8023a0a:	1b1b      	subs	r3, r3, r4
 8023a0c:	6013      	str	r3, [r2, #0]
 8023a0e:	f000 fce9 	bl	80243e4 <__malloc_unlock>
 8023a12:	2001      	movs	r0, #1
 8023a14:	e7d0      	b.n	80239b8 <_malloc_trim_r+0x3c>
 8023a16:	bf00      	nop
 8023a18:	2000044c 	.word	0x2000044c
 8023a1c:	20000854 	.word	0x20000854
 8023a20:	20018a04 	.word	0x20018a04

08023a24 <_free_r>:
 8023a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023a26:	4605      	mov	r5, r0
 8023a28:	460f      	mov	r7, r1
 8023a2a:	2900      	cmp	r1, #0
 8023a2c:	f000 80b1 	beq.w	8023b92 <_free_r+0x16e>
 8023a30:	f000 fcd2 	bl	80243d8 <__malloc_lock>
 8023a34:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8023a38:	4856      	ldr	r0, [pc, #344]	; (8023b94 <_free_r+0x170>)
 8023a3a:	f022 0401 	bic.w	r4, r2, #1
 8023a3e:	f1a7 0308 	sub.w	r3, r7, #8
 8023a42:	eb03 0c04 	add.w	ip, r3, r4
 8023a46:	6881      	ldr	r1, [r0, #8]
 8023a48:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8023a4c:	4561      	cmp	r1, ip
 8023a4e:	f026 0603 	bic.w	r6, r6, #3
 8023a52:	f002 0201 	and.w	r2, r2, #1
 8023a56:	d11b      	bne.n	8023a90 <_free_r+0x6c>
 8023a58:	4434      	add	r4, r6
 8023a5a:	b93a      	cbnz	r2, 8023a6c <_free_r+0x48>
 8023a5c:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8023a60:	1a9b      	subs	r3, r3, r2
 8023a62:	4414      	add	r4, r2
 8023a64:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8023a68:	60ca      	str	r2, [r1, #12]
 8023a6a:	6091      	str	r1, [r2, #8]
 8023a6c:	f044 0201 	orr.w	r2, r4, #1
 8023a70:	605a      	str	r2, [r3, #4]
 8023a72:	6083      	str	r3, [r0, #8]
 8023a74:	4b48      	ldr	r3, [pc, #288]	; (8023b98 <_free_r+0x174>)
 8023a76:	681b      	ldr	r3, [r3, #0]
 8023a78:	42a3      	cmp	r3, r4
 8023a7a:	d804      	bhi.n	8023a86 <_free_r+0x62>
 8023a7c:	4b47      	ldr	r3, [pc, #284]	; (8023b9c <_free_r+0x178>)
 8023a7e:	4628      	mov	r0, r5
 8023a80:	6819      	ldr	r1, [r3, #0]
 8023a82:	f7ff ff7b 	bl	802397c <_malloc_trim_r>
 8023a86:	4628      	mov	r0, r5
 8023a88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8023a8c:	f000 bcaa 	b.w	80243e4 <__malloc_unlock>
 8023a90:	f8cc 6004 	str.w	r6, [ip, #4]
 8023a94:	2a00      	cmp	r2, #0
 8023a96:	d138      	bne.n	8023b0a <_free_r+0xe6>
 8023a98:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8023a9c:	1a5b      	subs	r3, r3, r1
 8023a9e:	440c      	add	r4, r1
 8023aa0:	6899      	ldr	r1, [r3, #8]
 8023aa2:	f100 0708 	add.w	r7, r0, #8
 8023aa6:	42b9      	cmp	r1, r7
 8023aa8:	d031      	beq.n	8023b0e <_free_r+0xea>
 8023aaa:	68df      	ldr	r7, [r3, #12]
 8023aac:	60cf      	str	r7, [r1, #12]
 8023aae:	60b9      	str	r1, [r7, #8]
 8023ab0:	eb0c 0106 	add.w	r1, ip, r6
 8023ab4:	6849      	ldr	r1, [r1, #4]
 8023ab6:	07c9      	lsls	r1, r1, #31
 8023ab8:	d40b      	bmi.n	8023ad2 <_free_r+0xae>
 8023aba:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8023abe:	4434      	add	r4, r6
 8023ac0:	bb3a      	cbnz	r2, 8023b12 <_free_r+0xee>
 8023ac2:	4e37      	ldr	r6, [pc, #220]	; (8023ba0 <_free_r+0x17c>)
 8023ac4:	42b1      	cmp	r1, r6
 8023ac6:	d124      	bne.n	8023b12 <_free_r+0xee>
 8023ac8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8023acc:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8023ad0:	2201      	movs	r2, #1
 8023ad2:	f044 0101 	orr.w	r1, r4, #1
 8023ad6:	6059      	str	r1, [r3, #4]
 8023ad8:	511c      	str	r4, [r3, r4]
 8023ada:	2a00      	cmp	r2, #0
 8023adc:	d1d3      	bne.n	8023a86 <_free_r+0x62>
 8023ade:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8023ae2:	d21b      	bcs.n	8023b1c <_free_r+0xf8>
 8023ae4:	0961      	lsrs	r1, r4, #5
 8023ae6:	08e2      	lsrs	r2, r4, #3
 8023ae8:	2401      	movs	r4, #1
 8023aea:	408c      	lsls	r4, r1
 8023aec:	6841      	ldr	r1, [r0, #4]
 8023aee:	3201      	adds	r2, #1
 8023af0:	430c      	orrs	r4, r1
 8023af2:	6044      	str	r4, [r0, #4]
 8023af4:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8023af8:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8023afc:	3908      	subs	r1, #8
 8023afe:	e9c3 4102 	strd	r4, r1, [r3, #8]
 8023b02:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 8023b06:	60e3      	str	r3, [r4, #12]
 8023b08:	e7bd      	b.n	8023a86 <_free_r+0x62>
 8023b0a:	2200      	movs	r2, #0
 8023b0c:	e7d0      	b.n	8023ab0 <_free_r+0x8c>
 8023b0e:	2201      	movs	r2, #1
 8023b10:	e7ce      	b.n	8023ab0 <_free_r+0x8c>
 8023b12:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8023b16:	60ce      	str	r6, [r1, #12]
 8023b18:	60b1      	str	r1, [r6, #8]
 8023b1a:	e7da      	b.n	8023ad2 <_free_r+0xae>
 8023b1c:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8023b20:	ea4f 2254 	mov.w	r2, r4, lsr #9
 8023b24:	d214      	bcs.n	8023b50 <_free_r+0x12c>
 8023b26:	09a2      	lsrs	r2, r4, #6
 8023b28:	3238      	adds	r2, #56	; 0x38
 8023b2a:	1c51      	adds	r1, r2, #1
 8023b2c:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8023b30:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 8023b34:	428e      	cmp	r6, r1
 8023b36:	d125      	bne.n	8023b84 <_free_r+0x160>
 8023b38:	2401      	movs	r4, #1
 8023b3a:	1092      	asrs	r2, r2, #2
 8023b3c:	fa04 f202 	lsl.w	r2, r4, r2
 8023b40:	6844      	ldr	r4, [r0, #4]
 8023b42:	4322      	orrs	r2, r4
 8023b44:	6042      	str	r2, [r0, #4]
 8023b46:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8023b4a:	60b3      	str	r3, [r6, #8]
 8023b4c:	60cb      	str	r3, [r1, #12]
 8023b4e:	e79a      	b.n	8023a86 <_free_r+0x62>
 8023b50:	2a14      	cmp	r2, #20
 8023b52:	d801      	bhi.n	8023b58 <_free_r+0x134>
 8023b54:	325b      	adds	r2, #91	; 0x5b
 8023b56:	e7e8      	b.n	8023b2a <_free_r+0x106>
 8023b58:	2a54      	cmp	r2, #84	; 0x54
 8023b5a:	d802      	bhi.n	8023b62 <_free_r+0x13e>
 8023b5c:	0b22      	lsrs	r2, r4, #12
 8023b5e:	326e      	adds	r2, #110	; 0x6e
 8023b60:	e7e3      	b.n	8023b2a <_free_r+0x106>
 8023b62:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8023b66:	d802      	bhi.n	8023b6e <_free_r+0x14a>
 8023b68:	0be2      	lsrs	r2, r4, #15
 8023b6a:	3277      	adds	r2, #119	; 0x77
 8023b6c:	e7dd      	b.n	8023b2a <_free_r+0x106>
 8023b6e:	f240 5154 	movw	r1, #1364	; 0x554
 8023b72:	428a      	cmp	r2, r1
 8023b74:	bf9a      	itte	ls
 8023b76:	0ca2      	lsrls	r2, r4, #18
 8023b78:	327c      	addls	r2, #124	; 0x7c
 8023b7a:	227e      	movhi	r2, #126	; 0x7e
 8023b7c:	e7d5      	b.n	8023b2a <_free_r+0x106>
 8023b7e:	6889      	ldr	r1, [r1, #8]
 8023b80:	428e      	cmp	r6, r1
 8023b82:	d004      	beq.n	8023b8e <_free_r+0x16a>
 8023b84:	684a      	ldr	r2, [r1, #4]
 8023b86:	f022 0203 	bic.w	r2, r2, #3
 8023b8a:	42a2      	cmp	r2, r4
 8023b8c:	d8f7      	bhi.n	8023b7e <_free_r+0x15a>
 8023b8e:	68ce      	ldr	r6, [r1, #12]
 8023b90:	e7d9      	b.n	8023b46 <_free_r+0x122>
 8023b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023b94:	2000044c 	.word	0x2000044c
 8023b98:	20000858 	.word	0x20000858
 8023b9c:	20018a34 	.word	0x20018a34
 8023ba0:	20000454 	.word	0x20000454

08023ba4 <__sfvwrite_r>:
 8023ba4:	6893      	ldr	r3, [r2, #8]
 8023ba6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023baa:	4606      	mov	r6, r0
 8023bac:	460c      	mov	r4, r1
 8023bae:	4690      	mov	r8, r2
 8023bb0:	b91b      	cbnz	r3, 8023bba <__sfvwrite_r+0x16>
 8023bb2:	2000      	movs	r0, #0
 8023bb4:	b003      	add	sp, #12
 8023bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023bba:	898b      	ldrh	r3, [r1, #12]
 8023bbc:	0718      	lsls	r0, r3, #28
 8023bbe:	d550      	bpl.n	8023c62 <__sfvwrite_r+0xbe>
 8023bc0:	690b      	ldr	r3, [r1, #16]
 8023bc2:	2b00      	cmp	r3, #0
 8023bc4:	d04d      	beq.n	8023c62 <__sfvwrite_r+0xbe>
 8023bc6:	89a3      	ldrh	r3, [r4, #12]
 8023bc8:	f8d8 7000 	ldr.w	r7, [r8]
 8023bcc:	f013 0902 	ands.w	r9, r3, #2
 8023bd0:	d16c      	bne.n	8023cac <__sfvwrite_r+0x108>
 8023bd2:	f013 0301 	ands.w	r3, r3, #1
 8023bd6:	f000 809c 	beq.w	8023d12 <__sfvwrite_r+0x16e>
 8023bda:	4648      	mov	r0, r9
 8023bdc:	46ca      	mov	sl, r9
 8023bde:	46cb      	mov	fp, r9
 8023be0:	f1bb 0f00 	cmp.w	fp, #0
 8023be4:	f000 8103 	beq.w	8023dee <__sfvwrite_r+0x24a>
 8023be8:	b950      	cbnz	r0, 8023c00 <__sfvwrite_r+0x5c>
 8023bea:	465a      	mov	r2, fp
 8023bec:	210a      	movs	r1, #10
 8023bee:	4650      	mov	r0, sl
 8023bf0:	f7dc fb06 	bl	8000200 <memchr>
 8023bf4:	2800      	cmp	r0, #0
 8023bf6:	f000 80ff 	beq.w	8023df8 <__sfvwrite_r+0x254>
 8023bfa:	3001      	adds	r0, #1
 8023bfc:	eba0 090a 	sub.w	r9, r0, sl
 8023c00:	6820      	ldr	r0, [r4, #0]
 8023c02:	6921      	ldr	r1, [r4, #16]
 8023c04:	6963      	ldr	r3, [r4, #20]
 8023c06:	45d9      	cmp	r9, fp
 8023c08:	464a      	mov	r2, r9
 8023c0a:	bf28      	it	cs
 8023c0c:	465a      	movcs	r2, fp
 8023c0e:	4288      	cmp	r0, r1
 8023c10:	f240 80f5 	bls.w	8023dfe <__sfvwrite_r+0x25a>
 8023c14:	68a5      	ldr	r5, [r4, #8]
 8023c16:	441d      	add	r5, r3
 8023c18:	42aa      	cmp	r2, r5
 8023c1a:	f340 80f0 	ble.w	8023dfe <__sfvwrite_r+0x25a>
 8023c1e:	4651      	mov	r1, sl
 8023c20:	462a      	mov	r2, r5
 8023c22:	f7fc f97d 	bl	801ff20 <memmove>
 8023c26:	6823      	ldr	r3, [r4, #0]
 8023c28:	442b      	add	r3, r5
 8023c2a:	6023      	str	r3, [r4, #0]
 8023c2c:	4621      	mov	r1, r4
 8023c2e:	4630      	mov	r0, r6
 8023c30:	f7ff fdfc 	bl	802382c <_fflush_r>
 8023c34:	2800      	cmp	r0, #0
 8023c36:	d167      	bne.n	8023d08 <__sfvwrite_r+0x164>
 8023c38:	ebb9 0905 	subs.w	r9, r9, r5
 8023c3c:	f040 80f7 	bne.w	8023e2e <__sfvwrite_r+0x28a>
 8023c40:	4621      	mov	r1, r4
 8023c42:	4630      	mov	r0, r6
 8023c44:	f7ff fdf2 	bl	802382c <_fflush_r>
 8023c48:	2800      	cmp	r0, #0
 8023c4a:	d15d      	bne.n	8023d08 <__sfvwrite_r+0x164>
 8023c4c:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8023c50:	44aa      	add	sl, r5
 8023c52:	ebab 0b05 	sub.w	fp, fp, r5
 8023c56:	1b55      	subs	r5, r2, r5
 8023c58:	f8c8 5008 	str.w	r5, [r8, #8]
 8023c5c:	2d00      	cmp	r5, #0
 8023c5e:	d1bf      	bne.n	8023be0 <__sfvwrite_r+0x3c>
 8023c60:	e7a7      	b.n	8023bb2 <__sfvwrite_r+0xe>
 8023c62:	4621      	mov	r1, r4
 8023c64:	4630      	mov	r0, r6
 8023c66:	f7fe fe81 	bl	802296c <__swsetup_r>
 8023c6a:	2800      	cmp	r0, #0
 8023c6c:	d0ab      	beq.n	8023bc6 <__sfvwrite_r+0x22>
 8023c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8023c72:	e79f      	b.n	8023bb4 <__sfvwrite_r+0x10>
 8023c74:	e9d7 b900 	ldrd	fp, r9, [r7]
 8023c78:	3708      	adds	r7, #8
 8023c7a:	f1b9 0f00 	cmp.w	r9, #0
 8023c7e:	d0f9      	beq.n	8023c74 <__sfvwrite_r+0xd0>
 8023c80:	45d1      	cmp	r9, sl
 8023c82:	464b      	mov	r3, r9
 8023c84:	69e1      	ldr	r1, [r4, #28]
 8023c86:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8023c88:	bf28      	it	cs
 8023c8a:	4653      	movcs	r3, sl
 8023c8c:	465a      	mov	r2, fp
 8023c8e:	4630      	mov	r0, r6
 8023c90:	47a8      	blx	r5
 8023c92:	2800      	cmp	r0, #0
 8023c94:	dd38      	ble.n	8023d08 <__sfvwrite_r+0x164>
 8023c96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8023c9a:	4483      	add	fp, r0
 8023c9c:	eba9 0900 	sub.w	r9, r9, r0
 8023ca0:	1a18      	subs	r0, r3, r0
 8023ca2:	f8c8 0008 	str.w	r0, [r8, #8]
 8023ca6:	2800      	cmp	r0, #0
 8023ca8:	d1e7      	bne.n	8023c7a <__sfvwrite_r+0xd6>
 8023caa:	e782      	b.n	8023bb2 <__sfvwrite_r+0xe>
 8023cac:	f04f 0b00 	mov.w	fp, #0
 8023cb0:	f8df a180 	ldr.w	sl, [pc, #384]	; 8023e34 <__sfvwrite_r+0x290>
 8023cb4:	46d9      	mov	r9, fp
 8023cb6:	e7e0      	b.n	8023c7a <__sfvwrite_r+0xd6>
 8023cb8:	e9d7 9a00 	ldrd	r9, sl, [r7]
 8023cbc:	3708      	adds	r7, #8
 8023cbe:	f1ba 0f00 	cmp.w	sl, #0
 8023cc2:	d0f9      	beq.n	8023cb8 <__sfvwrite_r+0x114>
 8023cc4:	89a3      	ldrh	r3, [r4, #12]
 8023cc6:	6820      	ldr	r0, [r4, #0]
 8023cc8:	68a2      	ldr	r2, [r4, #8]
 8023cca:	0599      	lsls	r1, r3, #22
 8023ccc:	d563      	bpl.n	8023d96 <__sfvwrite_r+0x1f2>
 8023cce:	4552      	cmp	r2, sl
 8023cd0:	d836      	bhi.n	8023d40 <__sfvwrite_r+0x19c>
 8023cd2:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8023cd6:	d033      	beq.n	8023d40 <__sfvwrite_r+0x19c>
 8023cd8:	6921      	ldr	r1, [r4, #16]
 8023cda:	6965      	ldr	r5, [r4, #20]
 8023cdc:	eba0 0b01 	sub.w	fp, r0, r1
 8023ce0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023ce4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8023ce8:	f10b 0201 	add.w	r2, fp, #1
 8023cec:	106d      	asrs	r5, r5, #1
 8023cee:	4452      	add	r2, sl
 8023cf0:	4295      	cmp	r5, r2
 8023cf2:	bf38      	it	cc
 8023cf4:	4615      	movcc	r5, r2
 8023cf6:	055b      	lsls	r3, r3, #21
 8023cf8:	d53d      	bpl.n	8023d76 <__sfvwrite_r+0x1d2>
 8023cfa:	4629      	mov	r1, r5
 8023cfc:	4630      	mov	r0, r6
 8023cfe:	f000 f92f 	bl	8023f60 <_malloc_r>
 8023d02:	b948      	cbnz	r0, 8023d18 <__sfvwrite_r+0x174>
 8023d04:	230c      	movs	r3, #12
 8023d06:	6033      	str	r3, [r6, #0]
 8023d08:	89a3      	ldrh	r3, [r4, #12]
 8023d0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023d0e:	81a3      	strh	r3, [r4, #12]
 8023d10:	e7ad      	b.n	8023c6e <__sfvwrite_r+0xca>
 8023d12:	4699      	mov	r9, r3
 8023d14:	469a      	mov	sl, r3
 8023d16:	e7d2      	b.n	8023cbe <__sfvwrite_r+0x11a>
 8023d18:	465a      	mov	r2, fp
 8023d1a:	6921      	ldr	r1, [r4, #16]
 8023d1c:	9001      	str	r0, [sp, #4]
 8023d1e:	f7fc f8f1 	bl	801ff04 <memcpy>
 8023d22:	89a2      	ldrh	r2, [r4, #12]
 8023d24:	9b01      	ldr	r3, [sp, #4]
 8023d26:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8023d2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8023d2e:	81a2      	strh	r2, [r4, #12]
 8023d30:	6123      	str	r3, [r4, #16]
 8023d32:	6165      	str	r5, [r4, #20]
 8023d34:	445b      	add	r3, fp
 8023d36:	eba5 050b 	sub.w	r5, r5, fp
 8023d3a:	6023      	str	r3, [r4, #0]
 8023d3c:	4652      	mov	r2, sl
 8023d3e:	60a5      	str	r5, [r4, #8]
 8023d40:	4552      	cmp	r2, sl
 8023d42:	bf28      	it	cs
 8023d44:	4652      	movcs	r2, sl
 8023d46:	6820      	ldr	r0, [r4, #0]
 8023d48:	9201      	str	r2, [sp, #4]
 8023d4a:	4649      	mov	r1, r9
 8023d4c:	f7fc f8e8 	bl	801ff20 <memmove>
 8023d50:	68a3      	ldr	r3, [r4, #8]
 8023d52:	9a01      	ldr	r2, [sp, #4]
 8023d54:	1a9b      	subs	r3, r3, r2
 8023d56:	60a3      	str	r3, [r4, #8]
 8023d58:	6823      	ldr	r3, [r4, #0]
 8023d5a:	441a      	add	r2, r3
 8023d5c:	4655      	mov	r5, sl
 8023d5e:	6022      	str	r2, [r4, #0]
 8023d60:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8023d64:	44a9      	add	r9, r5
 8023d66:	ebaa 0a05 	sub.w	sl, sl, r5
 8023d6a:	1b45      	subs	r5, r0, r5
 8023d6c:	f8c8 5008 	str.w	r5, [r8, #8]
 8023d70:	2d00      	cmp	r5, #0
 8023d72:	d1a4      	bne.n	8023cbe <__sfvwrite_r+0x11a>
 8023d74:	e71d      	b.n	8023bb2 <__sfvwrite_r+0xe>
 8023d76:	462a      	mov	r2, r5
 8023d78:	4630      	mov	r0, r6
 8023d7a:	f000 fe6f 	bl	8024a5c <_realloc_r>
 8023d7e:	4603      	mov	r3, r0
 8023d80:	2800      	cmp	r0, #0
 8023d82:	d1d5      	bne.n	8023d30 <__sfvwrite_r+0x18c>
 8023d84:	6921      	ldr	r1, [r4, #16]
 8023d86:	4630      	mov	r0, r6
 8023d88:	f7ff fe4c 	bl	8023a24 <_free_r>
 8023d8c:	89a3      	ldrh	r3, [r4, #12]
 8023d8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8023d92:	81a3      	strh	r3, [r4, #12]
 8023d94:	e7b6      	b.n	8023d04 <__sfvwrite_r+0x160>
 8023d96:	6923      	ldr	r3, [r4, #16]
 8023d98:	4283      	cmp	r3, r0
 8023d9a:	d302      	bcc.n	8023da2 <__sfvwrite_r+0x1fe>
 8023d9c:	6961      	ldr	r1, [r4, #20]
 8023d9e:	4551      	cmp	r1, sl
 8023da0:	d915      	bls.n	8023dce <__sfvwrite_r+0x22a>
 8023da2:	4552      	cmp	r2, sl
 8023da4:	bf28      	it	cs
 8023da6:	4652      	movcs	r2, sl
 8023da8:	4649      	mov	r1, r9
 8023daa:	4615      	mov	r5, r2
 8023dac:	f7fc f8b8 	bl	801ff20 <memmove>
 8023db0:	68a3      	ldr	r3, [r4, #8]
 8023db2:	6822      	ldr	r2, [r4, #0]
 8023db4:	1b5b      	subs	r3, r3, r5
 8023db6:	442a      	add	r2, r5
 8023db8:	60a3      	str	r3, [r4, #8]
 8023dba:	6022      	str	r2, [r4, #0]
 8023dbc:	2b00      	cmp	r3, #0
 8023dbe:	d1cf      	bne.n	8023d60 <__sfvwrite_r+0x1bc>
 8023dc0:	4621      	mov	r1, r4
 8023dc2:	4630      	mov	r0, r6
 8023dc4:	f7ff fd32 	bl	802382c <_fflush_r>
 8023dc8:	2800      	cmp	r0, #0
 8023dca:	d0c9      	beq.n	8023d60 <__sfvwrite_r+0x1bc>
 8023dcc:	e79c      	b.n	8023d08 <__sfvwrite_r+0x164>
 8023dce:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023dd2:	459a      	cmp	sl, r3
 8023dd4:	bf38      	it	cc
 8023dd6:	4653      	movcc	r3, sl
 8023dd8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8023dda:	fb93 f3f1 	sdiv	r3, r3, r1
 8023dde:	464a      	mov	r2, r9
 8023de0:	434b      	muls	r3, r1
 8023de2:	4630      	mov	r0, r6
 8023de4:	69e1      	ldr	r1, [r4, #28]
 8023de6:	47a8      	blx	r5
 8023de8:	1e05      	subs	r5, r0, #0
 8023dea:	dcb9      	bgt.n	8023d60 <__sfvwrite_r+0x1bc>
 8023dec:	e78c      	b.n	8023d08 <__sfvwrite_r+0x164>
 8023dee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8023df2:	2000      	movs	r0, #0
 8023df4:	3708      	adds	r7, #8
 8023df6:	e6f3      	b.n	8023be0 <__sfvwrite_r+0x3c>
 8023df8:	f10b 0901 	add.w	r9, fp, #1
 8023dfc:	e700      	b.n	8023c00 <__sfvwrite_r+0x5c>
 8023dfe:	4293      	cmp	r3, r2
 8023e00:	dc08      	bgt.n	8023e14 <__sfvwrite_r+0x270>
 8023e02:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8023e04:	69e1      	ldr	r1, [r4, #28]
 8023e06:	4652      	mov	r2, sl
 8023e08:	4630      	mov	r0, r6
 8023e0a:	47a8      	blx	r5
 8023e0c:	1e05      	subs	r5, r0, #0
 8023e0e:	f73f af13 	bgt.w	8023c38 <__sfvwrite_r+0x94>
 8023e12:	e779      	b.n	8023d08 <__sfvwrite_r+0x164>
 8023e14:	4651      	mov	r1, sl
 8023e16:	9201      	str	r2, [sp, #4]
 8023e18:	f7fc f882 	bl	801ff20 <memmove>
 8023e1c:	9a01      	ldr	r2, [sp, #4]
 8023e1e:	68a3      	ldr	r3, [r4, #8]
 8023e20:	1a9b      	subs	r3, r3, r2
 8023e22:	60a3      	str	r3, [r4, #8]
 8023e24:	6823      	ldr	r3, [r4, #0]
 8023e26:	4413      	add	r3, r2
 8023e28:	6023      	str	r3, [r4, #0]
 8023e2a:	4615      	mov	r5, r2
 8023e2c:	e704      	b.n	8023c38 <__sfvwrite_r+0x94>
 8023e2e:	2001      	movs	r0, #1
 8023e30:	e70c      	b.n	8023c4c <__sfvwrite_r+0xa8>
 8023e32:	bf00      	nop
 8023e34:	7ffffc00 	.word	0x7ffffc00

08023e38 <_fwalk_reent>:
 8023e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023e3c:	4606      	mov	r6, r0
 8023e3e:	4688      	mov	r8, r1
 8023e40:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 8023e44:	2700      	movs	r7, #0
 8023e46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8023e4a:	f1b9 0901 	subs.w	r9, r9, #1
 8023e4e:	d505      	bpl.n	8023e5c <_fwalk_reent+0x24>
 8023e50:	6824      	ldr	r4, [r4, #0]
 8023e52:	2c00      	cmp	r4, #0
 8023e54:	d1f7      	bne.n	8023e46 <_fwalk_reent+0xe>
 8023e56:	4638      	mov	r0, r7
 8023e58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023e5c:	89ab      	ldrh	r3, [r5, #12]
 8023e5e:	2b01      	cmp	r3, #1
 8023e60:	d907      	bls.n	8023e72 <_fwalk_reent+0x3a>
 8023e62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023e66:	3301      	adds	r3, #1
 8023e68:	d003      	beq.n	8023e72 <_fwalk_reent+0x3a>
 8023e6a:	4629      	mov	r1, r5
 8023e6c:	4630      	mov	r0, r6
 8023e6e:	47c0      	blx	r8
 8023e70:	4307      	orrs	r7, r0
 8023e72:	3568      	adds	r5, #104	; 0x68
 8023e74:	e7e9      	b.n	8023e4a <_fwalk_reent+0x12>
	...

08023e78 <_localeconv_r>:
 8023e78:	4800      	ldr	r0, [pc, #0]	; (8023e7c <_localeconv_r+0x4>)
 8023e7a:	4770      	bx	lr
 8023e7c:	2000094c 	.word	0x2000094c

08023e80 <__retarget_lock_init_recursive>:
 8023e80:	4770      	bx	lr

08023e82 <__retarget_lock_close_recursive>:
 8023e82:	4770      	bx	lr

08023e84 <__retarget_lock_acquire_recursive>:
 8023e84:	4770      	bx	lr

08023e86 <__retarget_lock_release_recursive>:
 8023e86:	4770      	bx	lr

08023e88 <__swhatbuf_r>:
 8023e88:	b570      	push	{r4, r5, r6, lr}
 8023e8a:	460e      	mov	r6, r1
 8023e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023e90:	2900      	cmp	r1, #0
 8023e92:	b096      	sub	sp, #88	; 0x58
 8023e94:	4614      	mov	r4, r2
 8023e96:	461d      	mov	r5, r3
 8023e98:	da0a      	bge.n	8023eb0 <__swhatbuf_r+0x28>
 8023e9a:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 8023e9e:	2300      	movs	r3, #0
 8023ea0:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 8023ea4:	602b      	str	r3, [r5, #0]
 8023ea6:	d116      	bne.n	8023ed6 <__swhatbuf_r+0x4e>
 8023ea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023eac:	6023      	str	r3, [r4, #0]
 8023eae:	e015      	b.n	8023edc <__swhatbuf_r+0x54>
 8023eb0:	466a      	mov	r2, sp
 8023eb2:	f001 ff33 	bl	8025d1c <_fstat_r>
 8023eb6:	2800      	cmp	r0, #0
 8023eb8:	dbef      	blt.n	8023e9a <__swhatbuf_r+0x12>
 8023eba:	9a01      	ldr	r2, [sp, #4]
 8023ebc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8023ec0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8023ec4:	425a      	negs	r2, r3
 8023ec6:	415a      	adcs	r2, r3
 8023ec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023ecc:	602a      	str	r2, [r5, #0]
 8023ece:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8023ed2:	6023      	str	r3, [r4, #0]
 8023ed4:	e002      	b.n	8023edc <__swhatbuf_r+0x54>
 8023ed6:	2240      	movs	r2, #64	; 0x40
 8023ed8:	6022      	str	r2, [r4, #0]
 8023eda:	4618      	mov	r0, r3
 8023edc:	b016      	add	sp, #88	; 0x58
 8023ede:	bd70      	pop	{r4, r5, r6, pc}

08023ee0 <__smakebuf_r>:
 8023ee0:	898b      	ldrh	r3, [r1, #12]
 8023ee2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023ee4:	079d      	lsls	r5, r3, #30
 8023ee6:	4606      	mov	r6, r0
 8023ee8:	460c      	mov	r4, r1
 8023eea:	d507      	bpl.n	8023efc <__smakebuf_r+0x1c>
 8023eec:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8023ef0:	6023      	str	r3, [r4, #0]
 8023ef2:	6123      	str	r3, [r4, #16]
 8023ef4:	2301      	movs	r3, #1
 8023ef6:	6163      	str	r3, [r4, #20]
 8023ef8:	b002      	add	sp, #8
 8023efa:	bd70      	pop	{r4, r5, r6, pc}
 8023efc:	ab01      	add	r3, sp, #4
 8023efe:	466a      	mov	r2, sp
 8023f00:	f7ff ffc2 	bl	8023e88 <__swhatbuf_r>
 8023f04:	9900      	ldr	r1, [sp, #0]
 8023f06:	4605      	mov	r5, r0
 8023f08:	4630      	mov	r0, r6
 8023f0a:	f000 f829 	bl	8023f60 <_malloc_r>
 8023f0e:	b948      	cbnz	r0, 8023f24 <__smakebuf_r+0x44>
 8023f10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023f14:	059a      	lsls	r2, r3, #22
 8023f16:	d4ef      	bmi.n	8023ef8 <__smakebuf_r+0x18>
 8023f18:	f023 0303 	bic.w	r3, r3, #3
 8023f1c:	f043 0302 	orr.w	r3, r3, #2
 8023f20:	81a3      	strh	r3, [r4, #12]
 8023f22:	e7e3      	b.n	8023eec <__smakebuf_r+0xc>
 8023f24:	4b0d      	ldr	r3, [pc, #52]	; (8023f5c <__smakebuf_r+0x7c>)
 8023f26:	63f3      	str	r3, [r6, #60]	; 0x3c
 8023f28:	89a3      	ldrh	r3, [r4, #12]
 8023f2a:	6020      	str	r0, [r4, #0]
 8023f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023f30:	81a3      	strh	r3, [r4, #12]
 8023f32:	9b00      	ldr	r3, [sp, #0]
 8023f34:	6163      	str	r3, [r4, #20]
 8023f36:	9b01      	ldr	r3, [sp, #4]
 8023f38:	6120      	str	r0, [r4, #16]
 8023f3a:	b15b      	cbz	r3, 8023f54 <__smakebuf_r+0x74>
 8023f3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023f40:	4630      	mov	r0, r6
 8023f42:	f001 fefd 	bl	8025d40 <_isatty_r>
 8023f46:	b128      	cbz	r0, 8023f54 <__smakebuf_r+0x74>
 8023f48:	89a3      	ldrh	r3, [r4, #12]
 8023f4a:	f023 0303 	bic.w	r3, r3, #3
 8023f4e:	f043 0301 	orr.w	r3, r3, #1
 8023f52:	81a3      	strh	r3, [r4, #12]
 8023f54:	89a0      	ldrh	r0, [r4, #12]
 8023f56:	4305      	orrs	r5, r0
 8023f58:	81a5      	strh	r5, [r4, #12]
 8023f5a:	e7cd      	b.n	8023ef8 <__smakebuf_r+0x18>
 8023f5c:	080238c9 	.word	0x080238c9

08023f60 <_malloc_r>:
 8023f60:	f101 030b 	add.w	r3, r1, #11
 8023f64:	2b16      	cmp	r3, #22
 8023f66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f6a:	4605      	mov	r5, r0
 8023f6c:	d906      	bls.n	8023f7c <_malloc_r+0x1c>
 8023f6e:	f033 0707 	bics.w	r7, r3, #7
 8023f72:	d504      	bpl.n	8023f7e <_malloc_r+0x1e>
 8023f74:	230c      	movs	r3, #12
 8023f76:	602b      	str	r3, [r5, #0]
 8023f78:	2400      	movs	r4, #0
 8023f7a:	e1a5      	b.n	80242c8 <_malloc_r+0x368>
 8023f7c:	2710      	movs	r7, #16
 8023f7e:	42b9      	cmp	r1, r7
 8023f80:	d8f8      	bhi.n	8023f74 <_malloc_r+0x14>
 8023f82:	4628      	mov	r0, r5
 8023f84:	f000 fa28 	bl	80243d8 <__malloc_lock>
 8023f88:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8023f8c:	4eb0      	ldr	r6, [pc, #704]	; (8024250 <_malloc_r+0x2f0>)
 8023f8e:	d237      	bcs.n	8024000 <_malloc_r+0xa0>
 8023f90:	f107 0208 	add.w	r2, r7, #8
 8023f94:	4432      	add	r2, r6
 8023f96:	f1a2 0108 	sub.w	r1, r2, #8
 8023f9a:	6854      	ldr	r4, [r2, #4]
 8023f9c:	428c      	cmp	r4, r1
 8023f9e:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8023fa2:	d102      	bne.n	8023faa <_malloc_r+0x4a>
 8023fa4:	68d4      	ldr	r4, [r2, #12]
 8023fa6:	42a2      	cmp	r2, r4
 8023fa8:	d010      	beq.n	8023fcc <_malloc_r+0x6c>
 8023faa:	6863      	ldr	r3, [r4, #4]
 8023fac:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8023fb0:	f023 0303 	bic.w	r3, r3, #3
 8023fb4:	60ca      	str	r2, [r1, #12]
 8023fb6:	4423      	add	r3, r4
 8023fb8:	6091      	str	r1, [r2, #8]
 8023fba:	685a      	ldr	r2, [r3, #4]
 8023fbc:	f042 0201 	orr.w	r2, r2, #1
 8023fc0:	605a      	str	r2, [r3, #4]
 8023fc2:	4628      	mov	r0, r5
 8023fc4:	f000 fa0e 	bl	80243e4 <__malloc_unlock>
 8023fc8:	3408      	adds	r4, #8
 8023fca:	e17d      	b.n	80242c8 <_malloc_r+0x368>
 8023fcc:	3302      	adds	r3, #2
 8023fce:	6934      	ldr	r4, [r6, #16]
 8023fd0:	49a0      	ldr	r1, [pc, #640]	; (8024254 <_malloc_r+0x2f4>)
 8023fd2:	428c      	cmp	r4, r1
 8023fd4:	d077      	beq.n	80240c6 <_malloc_r+0x166>
 8023fd6:	6862      	ldr	r2, [r4, #4]
 8023fd8:	f022 0c03 	bic.w	ip, r2, #3
 8023fdc:	ebac 0007 	sub.w	r0, ip, r7
 8023fe0:	280f      	cmp	r0, #15
 8023fe2:	dd48      	ble.n	8024076 <_malloc_r+0x116>
 8023fe4:	19e2      	adds	r2, r4, r7
 8023fe6:	f040 0301 	orr.w	r3, r0, #1
 8023fea:	f047 0701 	orr.w	r7, r7, #1
 8023fee:	6067      	str	r7, [r4, #4]
 8023ff0:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8023ff4:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8023ff8:	6053      	str	r3, [r2, #4]
 8023ffa:	f844 000c 	str.w	r0, [r4, ip]
 8023ffe:	e7e0      	b.n	8023fc2 <_malloc_r+0x62>
 8024000:	0a7b      	lsrs	r3, r7, #9
 8024002:	d02a      	beq.n	802405a <_malloc_r+0xfa>
 8024004:	2b04      	cmp	r3, #4
 8024006:	d812      	bhi.n	802402e <_malloc_r+0xce>
 8024008:	09bb      	lsrs	r3, r7, #6
 802400a:	3338      	adds	r3, #56	; 0x38
 802400c:	1c5a      	adds	r2, r3, #1
 802400e:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8024012:	f1a2 0c08 	sub.w	ip, r2, #8
 8024016:	6854      	ldr	r4, [r2, #4]
 8024018:	4564      	cmp	r4, ip
 802401a:	d006      	beq.n	802402a <_malloc_r+0xca>
 802401c:	6862      	ldr	r2, [r4, #4]
 802401e:	f022 0203 	bic.w	r2, r2, #3
 8024022:	1bd0      	subs	r0, r2, r7
 8024024:	280f      	cmp	r0, #15
 8024026:	dd1c      	ble.n	8024062 <_malloc_r+0x102>
 8024028:	3b01      	subs	r3, #1
 802402a:	3301      	adds	r3, #1
 802402c:	e7cf      	b.n	8023fce <_malloc_r+0x6e>
 802402e:	2b14      	cmp	r3, #20
 8024030:	d801      	bhi.n	8024036 <_malloc_r+0xd6>
 8024032:	335b      	adds	r3, #91	; 0x5b
 8024034:	e7ea      	b.n	802400c <_malloc_r+0xac>
 8024036:	2b54      	cmp	r3, #84	; 0x54
 8024038:	d802      	bhi.n	8024040 <_malloc_r+0xe0>
 802403a:	0b3b      	lsrs	r3, r7, #12
 802403c:	336e      	adds	r3, #110	; 0x6e
 802403e:	e7e5      	b.n	802400c <_malloc_r+0xac>
 8024040:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8024044:	d802      	bhi.n	802404c <_malloc_r+0xec>
 8024046:	0bfb      	lsrs	r3, r7, #15
 8024048:	3377      	adds	r3, #119	; 0x77
 802404a:	e7df      	b.n	802400c <_malloc_r+0xac>
 802404c:	f240 5254 	movw	r2, #1364	; 0x554
 8024050:	4293      	cmp	r3, r2
 8024052:	d804      	bhi.n	802405e <_malloc_r+0xfe>
 8024054:	0cbb      	lsrs	r3, r7, #18
 8024056:	337c      	adds	r3, #124	; 0x7c
 8024058:	e7d8      	b.n	802400c <_malloc_r+0xac>
 802405a:	233f      	movs	r3, #63	; 0x3f
 802405c:	e7d6      	b.n	802400c <_malloc_r+0xac>
 802405e:	237e      	movs	r3, #126	; 0x7e
 8024060:	e7d4      	b.n	802400c <_malloc_r+0xac>
 8024062:	2800      	cmp	r0, #0
 8024064:	68e1      	ldr	r1, [r4, #12]
 8024066:	db04      	blt.n	8024072 <_malloc_r+0x112>
 8024068:	68a3      	ldr	r3, [r4, #8]
 802406a:	60d9      	str	r1, [r3, #12]
 802406c:	608b      	str	r3, [r1, #8]
 802406e:	18a3      	adds	r3, r4, r2
 8024070:	e7a3      	b.n	8023fba <_malloc_r+0x5a>
 8024072:	460c      	mov	r4, r1
 8024074:	e7d0      	b.n	8024018 <_malloc_r+0xb8>
 8024076:	2800      	cmp	r0, #0
 8024078:	e9c6 1104 	strd	r1, r1, [r6, #16]
 802407c:	db07      	blt.n	802408e <_malloc_r+0x12e>
 802407e:	44a4      	add	ip, r4
 8024080:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8024084:	f043 0301 	orr.w	r3, r3, #1
 8024088:	f8cc 3004 	str.w	r3, [ip, #4]
 802408c:	e799      	b.n	8023fc2 <_malloc_r+0x62>
 802408e:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8024092:	6870      	ldr	r0, [r6, #4]
 8024094:	f080 8096 	bcs.w	80241c4 <_malloc_r+0x264>
 8024098:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 802409c:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 80240a0:	f04f 0c01 	mov.w	ip, #1
 80240a4:	3201      	adds	r2, #1
 80240a6:	fa0c fc0e 	lsl.w	ip, ip, lr
 80240aa:	ea4c 0000 	orr.w	r0, ip, r0
 80240ae:	6070      	str	r0, [r6, #4]
 80240b0:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 80240b4:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 80240b8:	3808      	subs	r0, #8
 80240ba:	e9c4 c002 	strd	ip, r0, [r4, #8]
 80240be:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 80240c2:	f8cc 400c 	str.w	r4, [ip, #12]
 80240c6:	2001      	movs	r0, #1
 80240c8:	109a      	asrs	r2, r3, #2
 80240ca:	fa00 f202 	lsl.w	r2, r0, r2
 80240ce:	6870      	ldr	r0, [r6, #4]
 80240d0:	4290      	cmp	r0, r2
 80240d2:	d326      	bcc.n	8024122 <_malloc_r+0x1c2>
 80240d4:	4210      	tst	r0, r2
 80240d6:	d106      	bne.n	80240e6 <_malloc_r+0x186>
 80240d8:	f023 0303 	bic.w	r3, r3, #3
 80240dc:	0052      	lsls	r2, r2, #1
 80240de:	4210      	tst	r0, r2
 80240e0:	f103 0304 	add.w	r3, r3, #4
 80240e4:	d0fa      	beq.n	80240dc <_malloc_r+0x17c>
 80240e6:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 80240ea:	46c1      	mov	r9, r8
 80240ec:	469e      	mov	lr, r3
 80240ee:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80240f2:	454c      	cmp	r4, r9
 80240f4:	f040 80ba 	bne.w	802426c <_malloc_r+0x30c>
 80240f8:	f10e 0e01 	add.w	lr, lr, #1
 80240fc:	f01e 0f03 	tst.w	lr, #3
 8024100:	f109 0908 	add.w	r9, r9, #8
 8024104:	d1f3      	bne.n	80240ee <_malloc_r+0x18e>
 8024106:	0798      	lsls	r0, r3, #30
 8024108:	f040 80e4 	bne.w	80242d4 <_malloc_r+0x374>
 802410c:	6873      	ldr	r3, [r6, #4]
 802410e:	ea23 0302 	bic.w	r3, r3, r2
 8024112:	6073      	str	r3, [r6, #4]
 8024114:	6870      	ldr	r0, [r6, #4]
 8024116:	0052      	lsls	r2, r2, #1
 8024118:	4290      	cmp	r0, r2
 802411a:	d302      	bcc.n	8024122 <_malloc_r+0x1c2>
 802411c:	2a00      	cmp	r2, #0
 802411e:	f040 80e6 	bne.w	80242ee <_malloc_r+0x38e>
 8024122:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8024126:	f8da 3004 	ldr.w	r3, [sl, #4]
 802412a:	f023 0903 	bic.w	r9, r3, #3
 802412e:	45b9      	cmp	r9, r7
 8024130:	d304      	bcc.n	802413c <_malloc_r+0x1dc>
 8024132:	eba9 0207 	sub.w	r2, r9, r7
 8024136:	2a0f      	cmp	r2, #15
 8024138:	f300 8142 	bgt.w	80243c0 <_malloc_r+0x460>
 802413c:	4b46      	ldr	r3, [pc, #280]	; (8024258 <_malloc_r+0x2f8>)
 802413e:	6819      	ldr	r1, [r3, #0]
 8024140:	3110      	adds	r1, #16
 8024142:	4439      	add	r1, r7
 8024144:	2008      	movs	r0, #8
 8024146:	9101      	str	r1, [sp, #4]
 8024148:	f000 ff45 	bl	8024fd6 <sysconf>
 802414c:	4a43      	ldr	r2, [pc, #268]	; (802425c <_malloc_r+0x2fc>)
 802414e:	9901      	ldr	r1, [sp, #4]
 8024150:	6813      	ldr	r3, [r2, #0]
 8024152:	3301      	adds	r3, #1
 8024154:	bf1f      	itttt	ne
 8024156:	f101 31ff 	addne.w	r1, r1, #4294967295
 802415a:	1809      	addne	r1, r1, r0
 802415c:	4243      	negne	r3, r0
 802415e:	4019      	andne	r1, r3
 8024160:	4680      	mov	r8, r0
 8024162:	4628      	mov	r0, r5
 8024164:	9101      	str	r1, [sp, #4]
 8024166:	f000 fe55 	bl	8024e14 <_sbrk_r>
 802416a:	1c42      	adds	r2, r0, #1
 802416c:	eb0a 0b09 	add.w	fp, sl, r9
 8024170:	4604      	mov	r4, r0
 8024172:	f000 80f8 	beq.w	8024366 <_malloc_r+0x406>
 8024176:	4583      	cmp	fp, r0
 8024178:	9901      	ldr	r1, [sp, #4]
 802417a:	4a38      	ldr	r2, [pc, #224]	; (802425c <_malloc_r+0x2fc>)
 802417c:	d902      	bls.n	8024184 <_malloc_r+0x224>
 802417e:	45b2      	cmp	sl, r6
 8024180:	f040 80f1 	bne.w	8024366 <_malloc_r+0x406>
 8024184:	4b36      	ldr	r3, [pc, #216]	; (8024260 <_malloc_r+0x300>)
 8024186:	6818      	ldr	r0, [r3, #0]
 8024188:	45a3      	cmp	fp, r4
 802418a:	eb00 0e01 	add.w	lr, r0, r1
 802418e:	f8c3 e000 	str.w	lr, [r3]
 8024192:	f108 3cff 	add.w	ip, r8, #4294967295
 8024196:	f040 80ac 	bne.w	80242f2 <_malloc_r+0x392>
 802419a:	ea1b 0f0c 	tst.w	fp, ip
 802419e:	f040 80a8 	bne.w	80242f2 <_malloc_r+0x392>
 80241a2:	68b2      	ldr	r2, [r6, #8]
 80241a4:	4449      	add	r1, r9
 80241a6:	f041 0101 	orr.w	r1, r1, #1
 80241aa:	6051      	str	r1, [r2, #4]
 80241ac:	4a2d      	ldr	r2, [pc, #180]	; (8024264 <_malloc_r+0x304>)
 80241ae:	681b      	ldr	r3, [r3, #0]
 80241b0:	6811      	ldr	r1, [r2, #0]
 80241b2:	428b      	cmp	r3, r1
 80241b4:	bf88      	it	hi
 80241b6:	6013      	strhi	r3, [r2, #0]
 80241b8:	4a2b      	ldr	r2, [pc, #172]	; (8024268 <_malloc_r+0x308>)
 80241ba:	6811      	ldr	r1, [r2, #0]
 80241bc:	428b      	cmp	r3, r1
 80241be:	bf88      	it	hi
 80241c0:	6013      	strhi	r3, [r2, #0]
 80241c2:	e0d0      	b.n	8024366 <_malloc_r+0x406>
 80241c4:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 80241c8:	ea4f 225c 	mov.w	r2, ip, lsr #9
 80241cc:	d218      	bcs.n	8024200 <_malloc_r+0x2a0>
 80241ce:	ea4f 129c 	mov.w	r2, ip, lsr #6
 80241d2:	3238      	adds	r2, #56	; 0x38
 80241d4:	f102 0e01 	add.w	lr, r2, #1
 80241d8:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 80241dc:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 80241e0:	45f0      	cmp	r8, lr
 80241e2:	d12b      	bne.n	802423c <_malloc_r+0x2dc>
 80241e4:	1092      	asrs	r2, r2, #2
 80241e6:	f04f 0c01 	mov.w	ip, #1
 80241ea:	fa0c f202 	lsl.w	r2, ip, r2
 80241ee:	4310      	orrs	r0, r2
 80241f0:	6070      	str	r0, [r6, #4]
 80241f2:	e9c4 e802 	strd	lr, r8, [r4, #8]
 80241f6:	f8c8 4008 	str.w	r4, [r8, #8]
 80241fa:	f8ce 400c 	str.w	r4, [lr, #12]
 80241fe:	e762      	b.n	80240c6 <_malloc_r+0x166>
 8024200:	2a14      	cmp	r2, #20
 8024202:	d801      	bhi.n	8024208 <_malloc_r+0x2a8>
 8024204:	325b      	adds	r2, #91	; 0x5b
 8024206:	e7e5      	b.n	80241d4 <_malloc_r+0x274>
 8024208:	2a54      	cmp	r2, #84	; 0x54
 802420a:	d803      	bhi.n	8024214 <_malloc_r+0x2b4>
 802420c:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8024210:	326e      	adds	r2, #110	; 0x6e
 8024212:	e7df      	b.n	80241d4 <_malloc_r+0x274>
 8024214:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8024218:	d803      	bhi.n	8024222 <_malloc_r+0x2c2>
 802421a:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 802421e:	3277      	adds	r2, #119	; 0x77
 8024220:	e7d8      	b.n	80241d4 <_malloc_r+0x274>
 8024222:	f240 5e54 	movw	lr, #1364	; 0x554
 8024226:	4572      	cmp	r2, lr
 8024228:	bf9a      	itte	ls
 802422a:	ea4f 429c 	movls.w	r2, ip, lsr #18
 802422e:	327c      	addls	r2, #124	; 0x7c
 8024230:	227e      	movhi	r2, #126	; 0x7e
 8024232:	e7cf      	b.n	80241d4 <_malloc_r+0x274>
 8024234:	f8de e008 	ldr.w	lr, [lr, #8]
 8024238:	45f0      	cmp	r8, lr
 802423a:	d005      	beq.n	8024248 <_malloc_r+0x2e8>
 802423c:	f8de 2004 	ldr.w	r2, [lr, #4]
 8024240:	f022 0203 	bic.w	r2, r2, #3
 8024244:	4562      	cmp	r2, ip
 8024246:	d8f5      	bhi.n	8024234 <_malloc_r+0x2d4>
 8024248:	f8de 800c 	ldr.w	r8, [lr, #12]
 802424c:	e7d1      	b.n	80241f2 <_malloc_r+0x292>
 802424e:	bf00      	nop
 8024250:	2000044c 	.word	0x2000044c
 8024254:	20000454 	.word	0x20000454
 8024258:	20018a34 	.word	0x20018a34
 802425c:	20000854 	.word	0x20000854
 8024260:	20018a04 	.word	0x20018a04
 8024264:	20018a2c 	.word	0x20018a2c
 8024268:	20018a30 	.word	0x20018a30
 802426c:	6860      	ldr	r0, [r4, #4]
 802426e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8024272:	f020 0003 	bic.w	r0, r0, #3
 8024276:	eba0 0a07 	sub.w	sl, r0, r7
 802427a:	f1ba 0f0f 	cmp.w	sl, #15
 802427e:	dd12      	ble.n	80242a6 <_malloc_r+0x346>
 8024280:	68a3      	ldr	r3, [r4, #8]
 8024282:	19e2      	adds	r2, r4, r7
 8024284:	f047 0701 	orr.w	r7, r7, #1
 8024288:	6067      	str	r7, [r4, #4]
 802428a:	f8c3 c00c 	str.w	ip, [r3, #12]
 802428e:	f8cc 3008 	str.w	r3, [ip, #8]
 8024292:	f04a 0301 	orr.w	r3, sl, #1
 8024296:	e9c6 2204 	strd	r2, r2, [r6, #16]
 802429a:	e9c2 1102 	strd	r1, r1, [r2, #8]
 802429e:	6053      	str	r3, [r2, #4]
 80242a0:	f844 a000 	str.w	sl, [r4, r0]
 80242a4:	e68d      	b.n	8023fc2 <_malloc_r+0x62>
 80242a6:	f1ba 0f00 	cmp.w	sl, #0
 80242aa:	db11      	blt.n	80242d0 <_malloc_r+0x370>
 80242ac:	4420      	add	r0, r4
 80242ae:	6843      	ldr	r3, [r0, #4]
 80242b0:	f043 0301 	orr.w	r3, r3, #1
 80242b4:	6043      	str	r3, [r0, #4]
 80242b6:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80242ba:	4628      	mov	r0, r5
 80242bc:	f8c3 c00c 	str.w	ip, [r3, #12]
 80242c0:	f8cc 3008 	str.w	r3, [ip, #8]
 80242c4:	f000 f88e 	bl	80243e4 <__malloc_unlock>
 80242c8:	4620      	mov	r0, r4
 80242ca:	b003      	add	sp, #12
 80242cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80242d0:	4664      	mov	r4, ip
 80242d2:	e70e      	b.n	80240f2 <_malloc_r+0x192>
 80242d4:	f858 0908 	ldr.w	r0, [r8], #-8
 80242d8:	4540      	cmp	r0, r8
 80242da:	f103 33ff 	add.w	r3, r3, #4294967295
 80242de:	f43f af12 	beq.w	8024106 <_malloc_r+0x1a6>
 80242e2:	e717      	b.n	8024114 <_malloc_r+0x1b4>
 80242e4:	3304      	adds	r3, #4
 80242e6:	0052      	lsls	r2, r2, #1
 80242e8:	4210      	tst	r0, r2
 80242ea:	d0fb      	beq.n	80242e4 <_malloc_r+0x384>
 80242ec:	e6fb      	b.n	80240e6 <_malloc_r+0x186>
 80242ee:	4673      	mov	r3, lr
 80242f0:	e7fa      	b.n	80242e8 <_malloc_r+0x388>
 80242f2:	6810      	ldr	r0, [r2, #0]
 80242f4:	3001      	adds	r0, #1
 80242f6:	bf1b      	ittet	ne
 80242f8:	eba4 0b0b 	subne.w	fp, r4, fp
 80242fc:	eb0b 020e 	addne.w	r2, fp, lr
 8024300:	6014      	streq	r4, [r2, #0]
 8024302:	601a      	strne	r2, [r3, #0]
 8024304:	f014 0b07 	ands.w	fp, r4, #7
 8024308:	bf1a      	itte	ne
 802430a:	f1cb 0008 	rsbne	r0, fp, #8
 802430e:	1824      	addne	r4, r4, r0
 8024310:	4658      	moveq	r0, fp
 8024312:	1862      	adds	r2, r4, r1
 8024314:	ea02 010c 	and.w	r1, r2, ip
 8024318:	4480      	add	r8, r0
 802431a:	eba8 0801 	sub.w	r8, r8, r1
 802431e:	ea08 080c 	and.w	r8, r8, ip
 8024322:	4641      	mov	r1, r8
 8024324:	4628      	mov	r0, r5
 8024326:	9201      	str	r2, [sp, #4]
 8024328:	f000 fd74 	bl	8024e14 <_sbrk_r>
 802432c:	1c43      	adds	r3, r0, #1
 802432e:	9a01      	ldr	r2, [sp, #4]
 8024330:	4b28      	ldr	r3, [pc, #160]	; (80243d4 <_malloc_r+0x474>)
 8024332:	d107      	bne.n	8024344 <_malloc_r+0x3e4>
 8024334:	f1bb 0f00 	cmp.w	fp, #0
 8024338:	d023      	beq.n	8024382 <_malloc_r+0x422>
 802433a:	f1ab 0008 	sub.w	r0, fp, #8
 802433e:	4410      	add	r0, r2
 8024340:	f04f 0800 	mov.w	r8, #0
 8024344:	681a      	ldr	r2, [r3, #0]
 8024346:	60b4      	str	r4, [r6, #8]
 8024348:	1b00      	subs	r0, r0, r4
 802434a:	4440      	add	r0, r8
 802434c:	4442      	add	r2, r8
 802434e:	f040 0001 	orr.w	r0, r0, #1
 8024352:	45b2      	cmp	sl, r6
 8024354:	601a      	str	r2, [r3, #0]
 8024356:	6060      	str	r0, [r4, #4]
 8024358:	f43f af28 	beq.w	80241ac <_malloc_r+0x24c>
 802435c:	f1b9 0f0f 	cmp.w	r9, #15
 8024360:	d812      	bhi.n	8024388 <_malloc_r+0x428>
 8024362:	2301      	movs	r3, #1
 8024364:	6063      	str	r3, [r4, #4]
 8024366:	68b3      	ldr	r3, [r6, #8]
 8024368:	685b      	ldr	r3, [r3, #4]
 802436a:	f023 0303 	bic.w	r3, r3, #3
 802436e:	42bb      	cmp	r3, r7
 8024370:	eba3 0207 	sub.w	r2, r3, r7
 8024374:	d301      	bcc.n	802437a <_malloc_r+0x41a>
 8024376:	2a0f      	cmp	r2, #15
 8024378:	dc22      	bgt.n	80243c0 <_malloc_r+0x460>
 802437a:	4628      	mov	r0, r5
 802437c:	f000 f832 	bl	80243e4 <__malloc_unlock>
 8024380:	e5fa      	b.n	8023f78 <_malloc_r+0x18>
 8024382:	4610      	mov	r0, r2
 8024384:	46d8      	mov	r8, fp
 8024386:	e7dd      	b.n	8024344 <_malloc_r+0x3e4>
 8024388:	f8da 2004 	ldr.w	r2, [sl, #4]
 802438c:	f1a9 090c 	sub.w	r9, r9, #12
 8024390:	f029 0907 	bic.w	r9, r9, #7
 8024394:	f002 0201 	and.w	r2, r2, #1
 8024398:	ea42 0209 	orr.w	r2, r2, r9
 802439c:	f8ca 2004 	str.w	r2, [sl, #4]
 80243a0:	2105      	movs	r1, #5
 80243a2:	eb0a 0209 	add.w	r2, sl, r9
 80243a6:	f1b9 0f0f 	cmp.w	r9, #15
 80243aa:	e9c2 1101 	strd	r1, r1, [r2, #4]
 80243ae:	f67f aefd 	bls.w	80241ac <_malloc_r+0x24c>
 80243b2:	f10a 0108 	add.w	r1, sl, #8
 80243b6:	4628      	mov	r0, r5
 80243b8:	f7ff fb34 	bl	8023a24 <_free_r>
 80243bc:	4b05      	ldr	r3, [pc, #20]	; (80243d4 <_malloc_r+0x474>)
 80243be:	e6f5      	b.n	80241ac <_malloc_r+0x24c>
 80243c0:	68b4      	ldr	r4, [r6, #8]
 80243c2:	f047 0301 	orr.w	r3, r7, #1
 80243c6:	4427      	add	r7, r4
 80243c8:	f042 0201 	orr.w	r2, r2, #1
 80243cc:	6063      	str	r3, [r4, #4]
 80243ce:	60b7      	str	r7, [r6, #8]
 80243d0:	607a      	str	r2, [r7, #4]
 80243d2:	e5f6      	b.n	8023fc2 <_malloc_r+0x62>
 80243d4:	20018a04 	.word	0x20018a04

080243d8 <__malloc_lock>:
 80243d8:	4801      	ldr	r0, [pc, #4]	; (80243e0 <__malloc_lock+0x8>)
 80243da:	f7ff bd53 	b.w	8023e84 <__retarget_lock_acquire_recursive>
 80243de:	bf00      	nop
 80243e0:	20018a01 	.word	0x20018a01

080243e4 <__malloc_unlock>:
 80243e4:	4801      	ldr	r0, [pc, #4]	; (80243ec <__malloc_unlock+0x8>)
 80243e6:	f7ff bd4e 	b.w	8023e86 <__retarget_lock_release_recursive>
 80243ea:	bf00      	nop
 80243ec:	20018a01 	.word	0x20018a01

080243f0 <_Balloc>:
 80243f0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80243f2:	b570      	push	{r4, r5, r6, lr}
 80243f4:	4605      	mov	r5, r0
 80243f6:	460c      	mov	r4, r1
 80243f8:	b17b      	cbz	r3, 802441a <_Balloc+0x2a>
 80243fa:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80243fc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8024400:	b9a0      	cbnz	r0, 802442c <_Balloc+0x3c>
 8024402:	2101      	movs	r1, #1
 8024404:	fa01 f604 	lsl.w	r6, r1, r4
 8024408:	1d72      	adds	r2, r6, #5
 802440a:	0092      	lsls	r2, r2, #2
 802440c:	4628      	mov	r0, r5
 802440e:	f001 fb69 	bl	8025ae4 <_calloc_r>
 8024412:	b148      	cbz	r0, 8024428 <_Balloc+0x38>
 8024414:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8024418:	e00b      	b.n	8024432 <_Balloc+0x42>
 802441a:	2221      	movs	r2, #33	; 0x21
 802441c:	2104      	movs	r1, #4
 802441e:	f001 fb61 	bl	8025ae4 <_calloc_r>
 8024422:	64e8      	str	r0, [r5, #76]	; 0x4c
 8024424:	2800      	cmp	r0, #0
 8024426:	d1e8      	bne.n	80243fa <_Balloc+0xa>
 8024428:	2000      	movs	r0, #0
 802442a:	bd70      	pop	{r4, r5, r6, pc}
 802442c:	6802      	ldr	r2, [r0, #0]
 802442e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8024432:	2300      	movs	r3, #0
 8024434:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8024438:	e7f7      	b.n	802442a <_Balloc+0x3a>

0802443a <_Bfree>:
 802443a:	b131      	cbz	r1, 802444a <_Bfree+0x10>
 802443c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 802443e:	684a      	ldr	r2, [r1, #4]
 8024440:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8024444:	6008      	str	r0, [r1, #0]
 8024446:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 802444a:	4770      	bx	lr

0802444c <__multadd>:
 802444c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024450:	690d      	ldr	r5, [r1, #16]
 8024452:	4607      	mov	r7, r0
 8024454:	460c      	mov	r4, r1
 8024456:	461e      	mov	r6, r3
 8024458:	f101 0c14 	add.w	ip, r1, #20
 802445c:	2000      	movs	r0, #0
 802445e:	f8dc 3000 	ldr.w	r3, [ip]
 8024462:	b299      	uxth	r1, r3
 8024464:	fb02 6101 	mla	r1, r2, r1, r6
 8024468:	0c1e      	lsrs	r6, r3, #16
 802446a:	0c0b      	lsrs	r3, r1, #16
 802446c:	fb02 3306 	mla	r3, r2, r6, r3
 8024470:	b289      	uxth	r1, r1
 8024472:	3001      	adds	r0, #1
 8024474:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8024478:	4285      	cmp	r5, r0
 802447a:	f84c 1b04 	str.w	r1, [ip], #4
 802447e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8024482:	dcec      	bgt.n	802445e <__multadd+0x12>
 8024484:	b30e      	cbz	r6, 80244ca <__multadd+0x7e>
 8024486:	68a3      	ldr	r3, [r4, #8]
 8024488:	42ab      	cmp	r3, r5
 802448a:	dc19      	bgt.n	80244c0 <__multadd+0x74>
 802448c:	6861      	ldr	r1, [r4, #4]
 802448e:	4638      	mov	r0, r7
 8024490:	3101      	adds	r1, #1
 8024492:	f7ff ffad 	bl	80243f0 <_Balloc>
 8024496:	4680      	mov	r8, r0
 8024498:	b928      	cbnz	r0, 80244a6 <__multadd+0x5a>
 802449a:	4602      	mov	r2, r0
 802449c:	4b0c      	ldr	r3, [pc, #48]	; (80244d0 <__multadd+0x84>)
 802449e:	480d      	ldr	r0, [pc, #52]	; (80244d4 <__multadd+0x88>)
 80244a0:	21b5      	movs	r1, #181	; 0xb5
 80244a2:	f001 fb01 	bl	8025aa8 <__assert_func>
 80244a6:	6922      	ldr	r2, [r4, #16]
 80244a8:	3202      	adds	r2, #2
 80244aa:	f104 010c 	add.w	r1, r4, #12
 80244ae:	0092      	lsls	r2, r2, #2
 80244b0:	300c      	adds	r0, #12
 80244b2:	f7fb fd27 	bl	801ff04 <memcpy>
 80244b6:	4621      	mov	r1, r4
 80244b8:	4638      	mov	r0, r7
 80244ba:	f7ff ffbe 	bl	802443a <_Bfree>
 80244be:	4644      	mov	r4, r8
 80244c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80244c4:	3501      	adds	r5, #1
 80244c6:	615e      	str	r6, [r3, #20]
 80244c8:	6125      	str	r5, [r4, #16]
 80244ca:	4620      	mov	r0, r4
 80244cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80244d0:	08071a81 	.word	0x08071a81
 80244d4:	08071aed 	.word	0x08071aed

080244d8 <__hi0bits>:
 80244d8:	0c03      	lsrs	r3, r0, #16
 80244da:	041b      	lsls	r3, r3, #16
 80244dc:	b9d3      	cbnz	r3, 8024514 <__hi0bits+0x3c>
 80244de:	0400      	lsls	r0, r0, #16
 80244e0:	2310      	movs	r3, #16
 80244e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80244e6:	bf04      	itt	eq
 80244e8:	0200      	lsleq	r0, r0, #8
 80244ea:	3308      	addeq	r3, #8
 80244ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80244f0:	bf04      	itt	eq
 80244f2:	0100      	lsleq	r0, r0, #4
 80244f4:	3304      	addeq	r3, #4
 80244f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80244fa:	bf04      	itt	eq
 80244fc:	0080      	lsleq	r0, r0, #2
 80244fe:	3302      	addeq	r3, #2
 8024500:	2800      	cmp	r0, #0
 8024502:	db05      	blt.n	8024510 <__hi0bits+0x38>
 8024504:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8024508:	f103 0301 	add.w	r3, r3, #1
 802450c:	bf08      	it	eq
 802450e:	2320      	moveq	r3, #32
 8024510:	4618      	mov	r0, r3
 8024512:	4770      	bx	lr
 8024514:	2300      	movs	r3, #0
 8024516:	e7e4      	b.n	80244e2 <__hi0bits+0xa>

08024518 <__lo0bits>:
 8024518:	6803      	ldr	r3, [r0, #0]
 802451a:	f013 0207 	ands.w	r2, r3, #7
 802451e:	4601      	mov	r1, r0
 8024520:	d00b      	beq.n	802453a <__lo0bits+0x22>
 8024522:	07da      	lsls	r2, r3, #31
 8024524:	d423      	bmi.n	802456e <__lo0bits+0x56>
 8024526:	0798      	lsls	r0, r3, #30
 8024528:	bf49      	itett	mi
 802452a:	085b      	lsrmi	r3, r3, #1
 802452c:	089b      	lsrpl	r3, r3, #2
 802452e:	2001      	movmi	r0, #1
 8024530:	600b      	strmi	r3, [r1, #0]
 8024532:	bf5c      	itt	pl
 8024534:	600b      	strpl	r3, [r1, #0]
 8024536:	2002      	movpl	r0, #2
 8024538:	4770      	bx	lr
 802453a:	b298      	uxth	r0, r3
 802453c:	b9a8      	cbnz	r0, 802456a <__lo0bits+0x52>
 802453e:	0c1b      	lsrs	r3, r3, #16
 8024540:	2010      	movs	r0, #16
 8024542:	b2da      	uxtb	r2, r3
 8024544:	b90a      	cbnz	r2, 802454a <__lo0bits+0x32>
 8024546:	3008      	adds	r0, #8
 8024548:	0a1b      	lsrs	r3, r3, #8
 802454a:	071a      	lsls	r2, r3, #28
 802454c:	bf04      	itt	eq
 802454e:	091b      	lsreq	r3, r3, #4
 8024550:	3004      	addeq	r0, #4
 8024552:	079a      	lsls	r2, r3, #30
 8024554:	bf04      	itt	eq
 8024556:	089b      	lsreq	r3, r3, #2
 8024558:	3002      	addeq	r0, #2
 802455a:	07da      	lsls	r2, r3, #31
 802455c:	d403      	bmi.n	8024566 <__lo0bits+0x4e>
 802455e:	085b      	lsrs	r3, r3, #1
 8024560:	f100 0001 	add.w	r0, r0, #1
 8024564:	d005      	beq.n	8024572 <__lo0bits+0x5a>
 8024566:	600b      	str	r3, [r1, #0]
 8024568:	4770      	bx	lr
 802456a:	4610      	mov	r0, r2
 802456c:	e7e9      	b.n	8024542 <__lo0bits+0x2a>
 802456e:	2000      	movs	r0, #0
 8024570:	4770      	bx	lr
 8024572:	2020      	movs	r0, #32
 8024574:	4770      	bx	lr
	...

08024578 <__i2b>:
 8024578:	b510      	push	{r4, lr}
 802457a:	460c      	mov	r4, r1
 802457c:	2101      	movs	r1, #1
 802457e:	f7ff ff37 	bl	80243f0 <_Balloc>
 8024582:	4602      	mov	r2, r0
 8024584:	b928      	cbnz	r0, 8024592 <__i2b+0x1a>
 8024586:	4b05      	ldr	r3, [pc, #20]	; (802459c <__i2b+0x24>)
 8024588:	4805      	ldr	r0, [pc, #20]	; (80245a0 <__i2b+0x28>)
 802458a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802458e:	f001 fa8b 	bl	8025aa8 <__assert_func>
 8024592:	2301      	movs	r3, #1
 8024594:	6144      	str	r4, [r0, #20]
 8024596:	6103      	str	r3, [r0, #16]
 8024598:	bd10      	pop	{r4, pc}
 802459a:	bf00      	nop
 802459c:	08071a81 	.word	0x08071a81
 80245a0:	08071aed 	.word	0x08071aed

080245a4 <__multiply>:
 80245a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80245a8:	4691      	mov	r9, r2
 80245aa:	690a      	ldr	r2, [r1, #16]
 80245ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80245b0:	429a      	cmp	r2, r3
 80245b2:	bfb8      	it	lt
 80245b4:	460b      	movlt	r3, r1
 80245b6:	460c      	mov	r4, r1
 80245b8:	bfbc      	itt	lt
 80245ba:	464c      	movlt	r4, r9
 80245bc:	4699      	movlt	r9, r3
 80245be:	6927      	ldr	r7, [r4, #16]
 80245c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80245c4:	68a3      	ldr	r3, [r4, #8]
 80245c6:	6861      	ldr	r1, [r4, #4]
 80245c8:	eb07 060a 	add.w	r6, r7, sl
 80245cc:	42b3      	cmp	r3, r6
 80245ce:	b085      	sub	sp, #20
 80245d0:	bfb8      	it	lt
 80245d2:	3101      	addlt	r1, #1
 80245d4:	f7ff ff0c 	bl	80243f0 <_Balloc>
 80245d8:	b930      	cbnz	r0, 80245e8 <__multiply+0x44>
 80245da:	4602      	mov	r2, r0
 80245dc:	4b44      	ldr	r3, [pc, #272]	; (80246f0 <__multiply+0x14c>)
 80245de:	4845      	ldr	r0, [pc, #276]	; (80246f4 <__multiply+0x150>)
 80245e0:	f240 115d 	movw	r1, #349	; 0x15d
 80245e4:	f001 fa60 	bl	8025aa8 <__assert_func>
 80245e8:	f100 0514 	add.w	r5, r0, #20
 80245ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80245f0:	462b      	mov	r3, r5
 80245f2:	2200      	movs	r2, #0
 80245f4:	4543      	cmp	r3, r8
 80245f6:	d321      	bcc.n	802463c <__multiply+0x98>
 80245f8:	f104 0314 	add.w	r3, r4, #20
 80245fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8024600:	f109 0314 	add.w	r3, r9, #20
 8024604:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8024608:	9202      	str	r2, [sp, #8]
 802460a:	1b3a      	subs	r2, r7, r4
 802460c:	3a15      	subs	r2, #21
 802460e:	f022 0203 	bic.w	r2, r2, #3
 8024612:	3204      	adds	r2, #4
 8024614:	f104 0115 	add.w	r1, r4, #21
 8024618:	428f      	cmp	r7, r1
 802461a:	bf38      	it	cc
 802461c:	2204      	movcc	r2, #4
 802461e:	9201      	str	r2, [sp, #4]
 8024620:	9a02      	ldr	r2, [sp, #8]
 8024622:	9303      	str	r3, [sp, #12]
 8024624:	429a      	cmp	r2, r3
 8024626:	d80c      	bhi.n	8024642 <__multiply+0x9e>
 8024628:	2e00      	cmp	r6, #0
 802462a:	dd03      	ble.n	8024634 <__multiply+0x90>
 802462c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8024630:	2b00      	cmp	r3, #0
 8024632:	d05a      	beq.n	80246ea <__multiply+0x146>
 8024634:	6106      	str	r6, [r0, #16]
 8024636:	b005      	add	sp, #20
 8024638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802463c:	f843 2b04 	str.w	r2, [r3], #4
 8024640:	e7d8      	b.n	80245f4 <__multiply+0x50>
 8024642:	f8b3 a000 	ldrh.w	sl, [r3]
 8024646:	f1ba 0f00 	cmp.w	sl, #0
 802464a:	d024      	beq.n	8024696 <__multiply+0xf2>
 802464c:	f104 0e14 	add.w	lr, r4, #20
 8024650:	46a9      	mov	r9, r5
 8024652:	f04f 0c00 	mov.w	ip, #0
 8024656:	f85e 2b04 	ldr.w	r2, [lr], #4
 802465a:	f8d9 1000 	ldr.w	r1, [r9]
 802465e:	fa1f fb82 	uxth.w	fp, r2
 8024662:	b289      	uxth	r1, r1
 8024664:	fb0a 110b 	mla	r1, sl, fp, r1
 8024668:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 802466c:	f8d9 2000 	ldr.w	r2, [r9]
 8024670:	4461      	add	r1, ip
 8024672:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8024676:	fb0a c20b 	mla	r2, sl, fp, ip
 802467a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 802467e:	b289      	uxth	r1, r1
 8024680:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8024684:	4577      	cmp	r7, lr
 8024686:	f849 1b04 	str.w	r1, [r9], #4
 802468a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802468e:	d8e2      	bhi.n	8024656 <__multiply+0xb2>
 8024690:	9a01      	ldr	r2, [sp, #4]
 8024692:	f845 c002 	str.w	ip, [r5, r2]
 8024696:	9a03      	ldr	r2, [sp, #12]
 8024698:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802469c:	3304      	adds	r3, #4
 802469e:	f1b9 0f00 	cmp.w	r9, #0
 80246a2:	d020      	beq.n	80246e6 <__multiply+0x142>
 80246a4:	6829      	ldr	r1, [r5, #0]
 80246a6:	f104 0c14 	add.w	ip, r4, #20
 80246aa:	46ae      	mov	lr, r5
 80246ac:	f04f 0a00 	mov.w	sl, #0
 80246b0:	f8bc b000 	ldrh.w	fp, [ip]
 80246b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80246b8:	fb09 220b 	mla	r2, r9, fp, r2
 80246bc:	4492      	add	sl, r2
 80246be:	b289      	uxth	r1, r1
 80246c0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80246c4:	f84e 1b04 	str.w	r1, [lr], #4
 80246c8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80246cc:	f8be 1000 	ldrh.w	r1, [lr]
 80246d0:	0c12      	lsrs	r2, r2, #16
 80246d2:	fb09 1102 	mla	r1, r9, r2, r1
 80246d6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80246da:	4567      	cmp	r7, ip
 80246dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80246e0:	d8e6      	bhi.n	80246b0 <__multiply+0x10c>
 80246e2:	9a01      	ldr	r2, [sp, #4]
 80246e4:	50a9      	str	r1, [r5, r2]
 80246e6:	3504      	adds	r5, #4
 80246e8:	e79a      	b.n	8024620 <__multiply+0x7c>
 80246ea:	3e01      	subs	r6, #1
 80246ec:	e79c      	b.n	8024628 <__multiply+0x84>
 80246ee:	bf00      	nop
 80246f0:	08071a81 	.word	0x08071a81
 80246f4:	08071aed 	.word	0x08071aed

080246f8 <__pow5mult>:
 80246f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80246fc:	4615      	mov	r5, r2
 80246fe:	f012 0203 	ands.w	r2, r2, #3
 8024702:	4606      	mov	r6, r0
 8024704:	460f      	mov	r7, r1
 8024706:	d007      	beq.n	8024718 <__pow5mult+0x20>
 8024708:	4c1a      	ldr	r4, [pc, #104]	; (8024774 <__pow5mult+0x7c>)
 802470a:	3a01      	subs	r2, #1
 802470c:	2300      	movs	r3, #0
 802470e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8024712:	f7ff fe9b 	bl	802444c <__multadd>
 8024716:	4607      	mov	r7, r0
 8024718:	10ad      	asrs	r5, r5, #2
 802471a:	d027      	beq.n	802476c <__pow5mult+0x74>
 802471c:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 802471e:	b944      	cbnz	r4, 8024732 <__pow5mult+0x3a>
 8024720:	f240 2171 	movw	r1, #625	; 0x271
 8024724:	4630      	mov	r0, r6
 8024726:	f7ff ff27 	bl	8024578 <__i2b>
 802472a:	2300      	movs	r3, #0
 802472c:	64b0      	str	r0, [r6, #72]	; 0x48
 802472e:	4604      	mov	r4, r0
 8024730:	6003      	str	r3, [r0, #0]
 8024732:	f04f 0900 	mov.w	r9, #0
 8024736:	07eb      	lsls	r3, r5, #31
 8024738:	d50a      	bpl.n	8024750 <__pow5mult+0x58>
 802473a:	4639      	mov	r1, r7
 802473c:	4622      	mov	r2, r4
 802473e:	4630      	mov	r0, r6
 8024740:	f7ff ff30 	bl	80245a4 <__multiply>
 8024744:	4639      	mov	r1, r7
 8024746:	4680      	mov	r8, r0
 8024748:	4630      	mov	r0, r6
 802474a:	f7ff fe76 	bl	802443a <_Bfree>
 802474e:	4647      	mov	r7, r8
 8024750:	106d      	asrs	r5, r5, #1
 8024752:	d00b      	beq.n	802476c <__pow5mult+0x74>
 8024754:	6820      	ldr	r0, [r4, #0]
 8024756:	b938      	cbnz	r0, 8024768 <__pow5mult+0x70>
 8024758:	4622      	mov	r2, r4
 802475a:	4621      	mov	r1, r4
 802475c:	4630      	mov	r0, r6
 802475e:	f7ff ff21 	bl	80245a4 <__multiply>
 8024762:	6020      	str	r0, [r4, #0]
 8024764:	f8c0 9000 	str.w	r9, [r0]
 8024768:	4604      	mov	r4, r0
 802476a:	e7e4      	b.n	8024736 <__pow5mult+0x3e>
 802476c:	4638      	mov	r0, r7
 802476e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024772:	bf00      	nop
 8024774:	08071c40 	.word	0x08071c40

08024778 <__lshift>:
 8024778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802477c:	460c      	mov	r4, r1
 802477e:	6849      	ldr	r1, [r1, #4]
 8024780:	6923      	ldr	r3, [r4, #16]
 8024782:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8024786:	68a3      	ldr	r3, [r4, #8]
 8024788:	4607      	mov	r7, r0
 802478a:	4691      	mov	r9, r2
 802478c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8024790:	f108 0601 	add.w	r6, r8, #1
 8024794:	42b3      	cmp	r3, r6
 8024796:	db0b      	blt.n	80247b0 <__lshift+0x38>
 8024798:	4638      	mov	r0, r7
 802479a:	f7ff fe29 	bl	80243f0 <_Balloc>
 802479e:	4605      	mov	r5, r0
 80247a0:	b948      	cbnz	r0, 80247b6 <__lshift+0x3e>
 80247a2:	4602      	mov	r2, r0
 80247a4:	4b2a      	ldr	r3, [pc, #168]	; (8024850 <__lshift+0xd8>)
 80247a6:	482b      	ldr	r0, [pc, #172]	; (8024854 <__lshift+0xdc>)
 80247a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80247ac:	f001 f97c 	bl	8025aa8 <__assert_func>
 80247b0:	3101      	adds	r1, #1
 80247b2:	005b      	lsls	r3, r3, #1
 80247b4:	e7ee      	b.n	8024794 <__lshift+0x1c>
 80247b6:	2300      	movs	r3, #0
 80247b8:	f100 0114 	add.w	r1, r0, #20
 80247bc:	f100 0210 	add.w	r2, r0, #16
 80247c0:	4618      	mov	r0, r3
 80247c2:	4553      	cmp	r3, sl
 80247c4:	db37      	blt.n	8024836 <__lshift+0xbe>
 80247c6:	6920      	ldr	r0, [r4, #16]
 80247c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80247cc:	f104 0314 	add.w	r3, r4, #20
 80247d0:	f019 091f 	ands.w	r9, r9, #31
 80247d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80247d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80247dc:	d02f      	beq.n	802483e <__lshift+0xc6>
 80247de:	f1c9 0e20 	rsb	lr, r9, #32
 80247e2:	468a      	mov	sl, r1
 80247e4:	f04f 0c00 	mov.w	ip, #0
 80247e8:	681a      	ldr	r2, [r3, #0]
 80247ea:	fa02 f209 	lsl.w	r2, r2, r9
 80247ee:	ea42 020c 	orr.w	r2, r2, ip
 80247f2:	f84a 2b04 	str.w	r2, [sl], #4
 80247f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80247fa:	4298      	cmp	r0, r3
 80247fc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8024800:	d8f2      	bhi.n	80247e8 <__lshift+0x70>
 8024802:	1b03      	subs	r3, r0, r4
 8024804:	3b15      	subs	r3, #21
 8024806:	f023 0303 	bic.w	r3, r3, #3
 802480a:	3304      	adds	r3, #4
 802480c:	f104 0215 	add.w	r2, r4, #21
 8024810:	4290      	cmp	r0, r2
 8024812:	bf38      	it	cc
 8024814:	2304      	movcc	r3, #4
 8024816:	f841 c003 	str.w	ip, [r1, r3]
 802481a:	f1bc 0f00 	cmp.w	ip, #0
 802481e:	d001      	beq.n	8024824 <__lshift+0xac>
 8024820:	f108 0602 	add.w	r6, r8, #2
 8024824:	3e01      	subs	r6, #1
 8024826:	4638      	mov	r0, r7
 8024828:	612e      	str	r6, [r5, #16]
 802482a:	4621      	mov	r1, r4
 802482c:	f7ff fe05 	bl	802443a <_Bfree>
 8024830:	4628      	mov	r0, r5
 8024832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024836:	f842 0f04 	str.w	r0, [r2, #4]!
 802483a:	3301      	adds	r3, #1
 802483c:	e7c1      	b.n	80247c2 <__lshift+0x4a>
 802483e:	3904      	subs	r1, #4
 8024840:	f853 2b04 	ldr.w	r2, [r3], #4
 8024844:	f841 2f04 	str.w	r2, [r1, #4]!
 8024848:	4298      	cmp	r0, r3
 802484a:	d8f9      	bhi.n	8024840 <__lshift+0xc8>
 802484c:	e7ea      	b.n	8024824 <__lshift+0xac>
 802484e:	bf00      	nop
 8024850:	08071a81 	.word	0x08071a81
 8024854:	08071aed 	.word	0x08071aed

08024858 <__mcmp>:
 8024858:	b530      	push	{r4, r5, lr}
 802485a:	6902      	ldr	r2, [r0, #16]
 802485c:	690c      	ldr	r4, [r1, #16]
 802485e:	1b12      	subs	r2, r2, r4
 8024860:	d10e      	bne.n	8024880 <__mcmp+0x28>
 8024862:	f100 0314 	add.w	r3, r0, #20
 8024866:	3114      	adds	r1, #20
 8024868:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 802486c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8024870:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8024874:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8024878:	42a5      	cmp	r5, r4
 802487a:	d003      	beq.n	8024884 <__mcmp+0x2c>
 802487c:	d305      	bcc.n	802488a <__mcmp+0x32>
 802487e:	2201      	movs	r2, #1
 8024880:	4610      	mov	r0, r2
 8024882:	bd30      	pop	{r4, r5, pc}
 8024884:	4283      	cmp	r3, r0
 8024886:	d3f3      	bcc.n	8024870 <__mcmp+0x18>
 8024888:	e7fa      	b.n	8024880 <__mcmp+0x28>
 802488a:	f04f 32ff 	mov.w	r2, #4294967295
 802488e:	e7f7      	b.n	8024880 <__mcmp+0x28>

08024890 <__mdiff>:
 8024890:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024894:	460c      	mov	r4, r1
 8024896:	4606      	mov	r6, r0
 8024898:	4611      	mov	r1, r2
 802489a:	4620      	mov	r0, r4
 802489c:	4690      	mov	r8, r2
 802489e:	f7ff ffdb 	bl	8024858 <__mcmp>
 80248a2:	1e05      	subs	r5, r0, #0
 80248a4:	d110      	bne.n	80248c8 <__mdiff+0x38>
 80248a6:	4629      	mov	r1, r5
 80248a8:	4630      	mov	r0, r6
 80248aa:	f7ff fda1 	bl	80243f0 <_Balloc>
 80248ae:	b930      	cbnz	r0, 80248be <__mdiff+0x2e>
 80248b0:	4b3a      	ldr	r3, [pc, #232]	; (802499c <__mdiff+0x10c>)
 80248b2:	4602      	mov	r2, r0
 80248b4:	f240 2132 	movw	r1, #562	; 0x232
 80248b8:	4839      	ldr	r0, [pc, #228]	; (80249a0 <__mdiff+0x110>)
 80248ba:	f001 f8f5 	bl	8025aa8 <__assert_func>
 80248be:	2301      	movs	r3, #1
 80248c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80248c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80248c8:	bfa4      	itt	ge
 80248ca:	4643      	movge	r3, r8
 80248cc:	46a0      	movge	r8, r4
 80248ce:	4630      	mov	r0, r6
 80248d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80248d4:	bfa6      	itte	ge
 80248d6:	461c      	movge	r4, r3
 80248d8:	2500      	movge	r5, #0
 80248da:	2501      	movlt	r5, #1
 80248dc:	f7ff fd88 	bl	80243f0 <_Balloc>
 80248e0:	b920      	cbnz	r0, 80248ec <__mdiff+0x5c>
 80248e2:	4b2e      	ldr	r3, [pc, #184]	; (802499c <__mdiff+0x10c>)
 80248e4:	4602      	mov	r2, r0
 80248e6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80248ea:	e7e5      	b.n	80248b8 <__mdiff+0x28>
 80248ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80248f0:	6926      	ldr	r6, [r4, #16]
 80248f2:	60c5      	str	r5, [r0, #12]
 80248f4:	f104 0914 	add.w	r9, r4, #20
 80248f8:	f108 0514 	add.w	r5, r8, #20
 80248fc:	f100 0e14 	add.w	lr, r0, #20
 8024900:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8024904:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8024908:	f108 0210 	add.w	r2, r8, #16
 802490c:	46f2      	mov	sl, lr
 802490e:	2100      	movs	r1, #0
 8024910:	f859 3b04 	ldr.w	r3, [r9], #4
 8024914:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8024918:	fa1f f883 	uxth.w	r8, r3
 802491c:	fa11 f18b 	uxtah	r1, r1, fp
 8024920:	0c1b      	lsrs	r3, r3, #16
 8024922:	eba1 0808 	sub.w	r8, r1, r8
 8024926:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802492a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802492e:	fa1f f888 	uxth.w	r8, r8
 8024932:	1419      	asrs	r1, r3, #16
 8024934:	454e      	cmp	r6, r9
 8024936:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802493a:	f84a 3b04 	str.w	r3, [sl], #4
 802493e:	d8e7      	bhi.n	8024910 <__mdiff+0x80>
 8024940:	1b33      	subs	r3, r6, r4
 8024942:	3b15      	subs	r3, #21
 8024944:	f023 0303 	bic.w	r3, r3, #3
 8024948:	3304      	adds	r3, #4
 802494a:	3415      	adds	r4, #21
 802494c:	42a6      	cmp	r6, r4
 802494e:	bf38      	it	cc
 8024950:	2304      	movcc	r3, #4
 8024952:	441d      	add	r5, r3
 8024954:	4473      	add	r3, lr
 8024956:	469e      	mov	lr, r3
 8024958:	462e      	mov	r6, r5
 802495a:	4566      	cmp	r6, ip
 802495c:	d30e      	bcc.n	802497c <__mdiff+0xec>
 802495e:	f10c 0203 	add.w	r2, ip, #3
 8024962:	1b52      	subs	r2, r2, r5
 8024964:	f022 0203 	bic.w	r2, r2, #3
 8024968:	3d03      	subs	r5, #3
 802496a:	45ac      	cmp	ip, r5
 802496c:	bf38      	it	cc
 802496e:	2200      	movcc	r2, #0
 8024970:	441a      	add	r2, r3
 8024972:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8024976:	b17b      	cbz	r3, 8024998 <__mdiff+0x108>
 8024978:	6107      	str	r7, [r0, #16]
 802497a:	e7a3      	b.n	80248c4 <__mdiff+0x34>
 802497c:	f856 8b04 	ldr.w	r8, [r6], #4
 8024980:	fa11 f288 	uxtah	r2, r1, r8
 8024984:	1414      	asrs	r4, r2, #16
 8024986:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802498a:	b292      	uxth	r2, r2
 802498c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8024990:	f84e 2b04 	str.w	r2, [lr], #4
 8024994:	1421      	asrs	r1, r4, #16
 8024996:	e7e0      	b.n	802495a <__mdiff+0xca>
 8024998:	3f01      	subs	r7, #1
 802499a:	e7ea      	b.n	8024972 <__mdiff+0xe2>
 802499c:	08071a81 	.word	0x08071a81
 80249a0:	08071aed 	.word	0x08071aed

080249a4 <__d2b>:
 80249a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80249a8:	4689      	mov	r9, r1
 80249aa:	2101      	movs	r1, #1
 80249ac:	ec57 6b10 	vmov	r6, r7, d0
 80249b0:	4690      	mov	r8, r2
 80249b2:	f7ff fd1d 	bl	80243f0 <_Balloc>
 80249b6:	4604      	mov	r4, r0
 80249b8:	b930      	cbnz	r0, 80249c8 <__d2b+0x24>
 80249ba:	4602      	mov	r2, r0
 80249bc:	4b25      	ldr	r3, [pc, #148]	; (8024a54 <__d2b+0xb0>)
 80249be:	4826      	ldr	r0, [pc, #152]	; (8024a58 <__d2b+0xb4>)
 80249c0:	f240 310a 	movw	r1, #778	; 0x30a
 80249c4:	f001 f870 	bl	8025aa8 <__assert_func>
 80249c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80249cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80249d0:	bb35      	cbnz	r5, 8024a20 <__d2b+0x7c>
 80249d2:	2e00      	cmp	r6, #0
 80249d4:	9301      	str	r3, [sp, #4]
 80249d6:	d028      	beq.n	8024a2a <__d2b+0x86>
 80249d8:	4668      	mov	r0, sp
 80249da:	9600      	str	r6, [sp, #0]
 80249dc:	f7ff fd9c 	bl	8024518 <__lo0bits>
 80249e0:	9900      	ldr	r1, [sp, #0]
 80249e2:	b300      	cbz	r0, 8024a26 <__d2b+0x82>
 80249e4:	9a01      	ldr	r2, [sp, #4]
 80249e6:	f1c0 0320 	rsb	r3, r0, #32
 80249ea:	fa02 f303 	lsl.w	r3, r2, r3
 80249ee:	430b      	orrs	r3, r1
 80249f0:	40c2      	lsrs	r2, r0
 80249f2:	6163      	str	r3, [r4, #20]
 80249f4:	9201      	str	r2, [sp, #4]
 80249f6:	9b01      	ldr	r3, [sp, #4]
 80249f8:	61a3      	str	r3, [r4, #24]
 80249fa:	2b00      	cmp	r3, #0
 80249fc:	bf14      	ite	ne
 80249fe:	2202      	movne	r2, #2
 8024a00:	2201      	moveq	r2, #1
 8024a02:	6122      	str	r2, [r4, #16]
 8024a04:	b1d5      	cbz	r5, 8024a3c <__d2b+0x98>
 8024a06:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8024a0a:	4405      	add	r5, r0
 8024a0c:	f8c9 5000 	str.w	r5, [r9]
 8024a10:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8024a14:	f8c8 0000 	str.w	r0, [r8]
 8024a18:	4620      	mov	r0, r4
 8024a1a:	b003      	add	sp, #12
 8024a1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024a20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8024a24:	e7d5      	b.n	80249d2 <__d2b+0x2e>
 8024a26:	6161      	str	r1, [r4, #20]
 8024a28:	e7e5      	b.n	80249f6 <__d2b+0x52>
 8024a2a:	a801      	add	r0, sp, #4
 8024a2c:	f7ff fd74 	bl	8024518 <__lo0bits>
 8024a30:	9b01      	ldr	r3, [sp, #4]
 8024a32:	6163      	str	r3, [r4, #20]
 8024a34:	2201      	movs	r2, #1
 8024a36:	6122      	str	r2, [r4, #16]
 8024a38:	3020      	adds	r0, #32
 8024a3a:	e7e3      	b.n	8024a04 <__d2b+0x60>
 8024a3c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8024a40:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8024a44:	f8c9 0000 	str.w	r0, [r9]
 8024a48:	6918      	ldr	r0, [r3, #16]
 8024a4a:	f7ff fd45 	bl	80244d8 <__hi0bits>
 8024a4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8024a52:	e7df      	b.n	8024a14 <__d2b+0x70>
 8024a54:	08071a81 	.word	0x08071a81
 8024a58:	08071aed 	.word	0x08071aed

08024a5c <_realloc_r>:
 8024a5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a60:	4681      	mov	r9, r0
 8024a62:	460c      	mov	r4, r1
 8024a64:	b929      	cbnz	r1, 8024a72 <_realloc_r+0x16>
 8024a66:	4611      	mov	r1, r2
 8024a68:	b003      	add	sp, #12
 8024a6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a6e:	f7ff ba77 	b.w	8023f60 <_malloc_r>
 8024a72:	9201      	str	r2, [sp, #4]
 8024a74:	f7ff fcb0 	bl	80243d8 <__malloc_lock>
 8024a78:	9a01      	ldr	r2, [sp, #4]
 8024a7a:	f102 080b 	add.w	r8, r2, #11
 8024a7e:	f1b8 0f16 	cmp.w	r8, #22
 8024a82:	d90b      	bls.n	8024a9c <_realloc_r+0x40>
 8024a84:	f038 0807 	bics.w	r8, r8, #7
 8024a88:	d50a      	bpl.n	8024aa0 <_realloc_r+0x44>
 8024a8a:	230c      	movs	r3, #12
 8024a8c:	f8c9 3000 	str.w	r3, [r9]
 8024a90:	f04f 0b00 	mov.w	fp, #0
 8024a94:	4658      	mov	r0, fp
 8024a96:	b003      	add	sp, #12
 8024a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024a9c:	f04f 0810 	mov.w	r8, #16
 8024aa0:	4590      	cmp	r8, r2
 8024aa2:	d3f2      	bcc.n	8024a8a <_realloc_r+0x2e>
 8024aa4:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8024aa8:	f025 0603 	bic.w	r6, r5, #3
 8024aac:	45b0      	cmp	r8, r6
 8024aae:	f1a4 0a08 	sub.w	sl, r4, #8
 8024ab2:	f340 816e 	ble.w	8024d92 <_realloc_r+0x336>
 8024ab6:	499b      	ldr	r1, [pc, #620]	; (8024d24 <_realloc_r+0x2c8>)
 8024ab8:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8024abc:	eb0a 0306 	add.w	r3, sl, r6
 8024ac0:	459c      	cmp	ip, r3
 8024ac2:	6859      	ldr	r1, [r3, #4]
 8024ac4:	d005      	beq.n	8024ad2 <_realloc_r+0x76>
 8024ac6:	f021 0001 	bic.w	r0, r1, #1
 8024aca:	4418      	add	r0, r3
 8024acc:	6840      	ldr	r0, [r0, #4]
 8024ace:	07c7      	lsls	r7, r0, #31
 8024ad0:	d427      	bmi.n	8024b22 <_realloc_r+0xc6>
 8024ad2:	f021 0103 	bic.w	r1, r1, #3
 8024ad6:	459c      	cmp	ip, r3
 8024ad8:	eb06 0701 	add.w	r7, r6, r1
 8024adc:	d119      	bne.n	8024b12 <_realloc_r+0xb6>
 8024ade:	f108 0010 	add.w	r0, r8, #16
 8024ae2:	42b8      	cmp	r0, r7
 8024ae4:	dc1f      	bgt.n	8024b26 <_realloc_r+0xca>
 8024ae6:	eb0a 0308 	add.w	r3, sl, r8
 8024aea:	4a8e      	ldr	r2, [pc, #568]	; (8024d24 <_realloc_r+0x2c8>)
 8024aec:	eba7 0708 	sub.w	r7, r7, r8
 8024af0:	f047 0701 	orr.w	r7, r7, #1
 8024af4:	6093      	str	r3, [r2, #8]
 8024af6:	605f      	str	r7, [r3, #4]
 8024af8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8024afc:	f003 0301 	and.w	r3, r3, #1
 8024b00:	ea43 0308 	orr.w	r3, r3, r8
 8024b04:	f844 3c04 	str.w	r3, [r4, #-4]
 8024b08:	4648      	mov	r0, r9
 8024b0a:	f7ff fc6b 	bl	80243e4 <__malloc_unlock>
 8024b0e:	46a3      	mov	fp, r4
 8024b10:	e7c0      	b.n	8024a94 <_realloc_r+0x38>
 8024b12:	45b8      	cmp	r8, r7
 8024b14:	dc07      	bgt.n	8024b26 <_realloc_r+0xca>
 8024b16:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8024b1a:	60da      	str	r2, [r3, #12]
 8024b1c:	6093      	str	r3, [r2, #8]
 8024b1e:	4655      	mov	r5, sl
 8024b20:	e07f      	b.n	8024c22 <_realloc_r+0x1c6>
 8024b22:	2100      	movs	r1, #0
 8024b24:	460b      	mov	r3, r1
 8024b26:	07e8      	lsls	r0, r5, #31
 8024b28:	f100 80e5 	bmi.w	8024cf6 <_realloc_r+0x29a>
 8024b2c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8024b30:	ebaa 0505 	sub.w	r5, sl, r5
 8024b34:	6868      	ldr	r0, [r5, #4]
 8024b36:	f020 0003 	bic.w	r0, r0, #3
 8024b3a:	eb00 0b06 	add.w	fp, r0, r6
 8024b3e:	2b00      	cmp	r3, #0
 8024b40:	f000 80a5 	beq.w	8024c8e <_realloc_r+0x232>
 8024b44:	459c      	cmp	ip, r3
 8024b46:	eb01 070b 	add.w	r7, r1, fp
 8024b4a:	d14a      	bne.n	8024be2 <_realloc_r+0x186>
 8024b4c:	f108 0310 	add.w	r3, r8, #16
 8024b50:	42bb      	cmp	r3, r7
 8024b52:	f300 809c 	bgt.w	8024c8e <_realloc_r+0x232>
 8024b56:	46ab      	mov	fp, r5
 8024b58:	68eb      	ldr	r3, [r5, #12]
 8024b5a:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8024b5e:	60d3      	str	r3, [r2, #12]
 8024b60:	609a      	str	r2, [r3, #8]
 8024b62:	1f32      	subs	r2, r6, #4
 8024b64:	2a24      	cmp	r2, #36	; 0x24
 8024b66:	d837      	bhi.n	8024bd8 <_realloc_r+0x17c>
 8024b68:	2a13      	cmp	r2, #19
 8024b6a:	d933      	bls.n	8024bd4 <_realloc_r+0x178>
 8024b6c:	6823      	ldr	r3, [r4, #0]
 8024b6e:	60ab      	str	r3, [r5, #8]
 8024b70:	6863      	ldr	r3, [r4, #4]
 8024b72:	60eb      	str	r3, [r5, #12]
 8024b74:	2a1b      	cmp	r2, #27
 8024b76:	d81b      	bhi.n	8024bb0 <_realloc_r+0x154>
 8024b78:	3408      	adds	r4, #8
 8024b7a:	f105 0310 	add.w	r3, r5, #16
 8024b7e:	6822      	ldr	r2, [r4, #0]
 8024b80:	601a      	str	r2, [r3, #0]
 8024b82:	6862      	ldr	r2, [r4, #4]
 8024b84:	605a      	str	r2, [r3, #4]
 8024b86:	68a2      	ldr	r2, [r4, #8]
 8024b88:	609a      	str	r2, [r3, #8]
 8024b8a:	eb05 0308 	add.w	r3, r5, r8
 8024b8e:	4a65      	ldr	r2, [pc, #404]	; (8024d24 <_realloc_r+0x2c8>)
 8024b90:	eba7 0708 	sub.w	r7, r7, r8
 8024b94:	f047 0701 	orr.w	r7, r7, #1
 8024b98:	6093      	str	r3, [r2, #8]
 8024b9a:	605f      	str	r7, [r3, #4]
 8024b9c:	686b      	ldr	r3, [r5, #4]
 8024b9e:	f003 0301 	and.w	r3, r3, #1
 8024ba2:	ea43 0308 	orr.w	r3, r3, r8
 8024ba6:	606b      	str	r3, [r5, #4]
 8024ba8:	4648      	mov	r0, r9
 8024baa:	f7ff fc1b 	bl	80243e4 <__malloc_unlock>
 8024bae:	e771      	b.n	8024a94 <_realloc_r+0x38>
 8024bb0:	68a3      	ldr	r3, [r4, #8]
 8024bb2:	612b      	str	r3, [r5, #16]
 8024bb4:	68e3      	ldr	r3, [r4, #12]
 8024bb6:	616b      	str	r3, [r5, #20]
 8024bb8:	2a24      	cmp	r2, #36	; 0x24
 8024bba:	bf01      	itttt	eq
 8024bbc:	6923      	ldreq	r3, [r4, #16]
 8024bbe:	61ab      	streq	r3, [r5, #24]
 8024bc0:	6962      	ldreq	r2, [r4, #20]
 8024bc2:	61ea      	streq	r2, [r5, #28]
 8024bc4:	bf19      	ittee	ne
 8024bc6:	3410      	addne	r4, #16
 8024bc8:	f105 0318 	addne.w	r3, r5, #24
 8024bcc:	f105 0320 	addeq.w	r3, r5, #32
 8024bd0:	3418      	addeq	r4, #24
 8024bd2:	e7d4      	b.n	8024b7e <_realloc_r+0x122>
 8024bd4:	465b      	mov	r3, fp
 8024bd6:	e7d2      	b.n	8024b7e <_realloc_r+0x122>
 8024bd8:	4621      	mov	r1, r4
 8024bda:	4658      	mov	r0, fp
 8024bdc:	f7fb f9a0 	bl	801ff20 <memmove>
 8024be0:	e7d3      	b.n	8024b8a <_realloc_r+0x12e>
 8024be2:	45b8      	cmp	r8, r7
 8024be4:	dc53      	bgt.n	8024c8e <_realloc_r+0x232>
 8024be6:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8024bea:	4628      	mov	r0, r5
 8024bec:	60da      	str	r2, [r3, #12]
 8024bee:	6093      	str	r3, [r2, #8]
 8024bf0:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8024bf4:	68eb      	ldr	r3, [r5, #12]
 8024bf6:	60d3      	str	r3, [r2, #12]
 8024bf8:	609a      	str	r2, [r3, #8]
 8024bfa:	1f32      	subs	r2, r6, #4
 8024bfc:	2a24      	cmp	r2, #36	; 0x24
 8024bfe:	d842      	bhi.n	8024c86 <_realloc_r+0x22a>
 8024c00:	2a13      	cmp	r2, #19
 8024c02:	d908      	bls.n	8024c16 <_realloc_r+0x1ba>
 8024c04:	6823      	ldr	r3, [r4, #0]
 8024c06:	60ab      	str	r3, [r5, #8]
 8024c08:	6863      	ldr	r3, [r4, #4]
 8024c0a:	60eb      	str	r3, [r5, #12]
 8024c0c:	2a1b      	cmp	r2, #27
 8024c0e:	d828      	bhi.n	8024c62 <_realloc_r+0x206>
 8024c10:	3408      	adds	r4, #8
 8024c12:	f105 0010 	add.w	r0, r5, #16
 8024c16:	6823      	ldr	r3, [r4, #0]
 8024c18:	6003      	str	r3, [r0, #0]
 8024c1a:	6863      	ldr	r3, [r4, #4]
 8024c1c:	6043      	str	r3, [r0, #4]
 8024c1e:	68a3      	ldr	r3, [r4, #8]
 8024c20:	6083      	str	r3, [r0, #8]
 8024c22:	686b      	ldr	r3, [r5, #4]
 8024c24:	eba7 0008 	sub.w	r0, r7, r8
 8024c28:	280f      	cmp	r0, #15
 8024c2a:	f003 0301 	and.w	r3, r3, #1
 8024c2e:	eb05 0207 	add.w	r2, r5, r7
 8024c32:	f240 80b0 	bls.w	8024d96 <_realloc_r+0x33a>
 8024c36:	eb05 0108 	add.w	r1, r5, r8
 8024c3a:	ea48 0303 	orr.w	r3, r8, r3
 8024c3e:	f040 0001 	orr.w	r0, r0, #1
 8024c42:	606b      	str	r3, [r5, #4]
 8024c44:	6048      	str	r0, [r1, #4]
 8024c46:	6853      	ldr	r3, [r2, #4]
 8024c48:	f043 0301 	orr.w	r3, r3, #1
 8024c4c:	6053      	str	r3, [r2, #4]
 8024c4e:	3108      	adds	r1, #8
 8024c50:	4648      	mov	r0, r9
 8024c52:	f7fe fee7 	bl	8023a24 <_free_r>
 8024c56:	4648      	mov	r0, r9
 8024c58:	f7ff fbc4 	bl	80243e4 <__malloc_unlock>
 8024c5c:	f105 0b08 	add.w	fp, r5, #8
 8024c60:	e718      	b.n	8024a94 <_realloc_r+0x38>
 8024c62:	68a3      	ldr	r3, [r4, #8]
 8024c64:	612b      	str	r3, [r5, #16]
 8024c66:	68e3      	ldr	r3, [r4, #12]
 8024c68:	616b      	str	r3, [r5, #20]
 8024c6a:	2a24      	cmp	r2, #36	; 0x24
 8024c6c:	bf01      	itttt	eq
 8024c6e:	6923      	ldreq	r3, [r4, #16]
 8024c70:	61ab      	streq	r3, [r5, #24]
 8024c72:	6963      	ldreq	r3, [r4, #20]
 8024c74:	61eb      	streq	r3, [r5, #28]
 8024c76:	bf19      	ittee	ne
 8024c78:	3410      	addne	r4, #16
 8024c7a:	f105 0018 	addne.w	r0, r5, #24
 8024c7e:	f105 0020 	addeq.w	r0, r5, #32
 8024c82:	3418      	addeq	r4, #24
 8024c84:	e7c7      	b.n	8024c16 <_realloc_r+0x1ba>
 8024c86:	4621      	mov	r1, r4
 8024c88:	f7fb f94a 	bl	801ff20 <memmove>
 8024c8c:	e7c9      	b.n	8024c22 <_realloc_r+0x1c6>
 8024c8e:	45d8      	cmp	r8, fp
 8024c90:	dc31      	bgt.n	8024cf6 <_realloc_r+0x29a>
 8024c92:	4628      	mov	r0, r5
 8024c94:	68eb      	ldr	r3, [r5, #12]
 8024c96:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8024c9a:	60d3      	str	r3, [r2, #12]
 8024c9c:	609a      	str	r2, [r3, #8]
 8024c9e:	1f32      	subs	r2, r6, #4
 8024ca0:	2a24      	cmp	r2, #36	; 0x24
 8024ca2:	d824      	bhi.n	8024cee <_realloc_r+0x292>
 8024ca4:	2a13      	cmp	r2, #19
 8024ca6:	d908      	bls.n	8024cba <_realloc_r+0x25e>
 8024ca8:	6823      	ldr	r3, [r4, #0]
 8024caa:	60ab      	str	r3, [r5, #8]
 8024cac:	6863      	ldr	r3, [r4, #4]
 8024cae:	60eb      	str	r3, [r5, #12]
 8024cb0:	2a1b      	cmp	r2, #27
 8024cb2:	d80a      	bhi.n	8024cca <_realloc_r+0x26e>
 8024cb4:	3408      	adds	r4, #8
 8024cb6:	f105 0010 	add.w	r0, r5, #16
 8024cba:	6823      	ldr	r3, [r4, #0]
 8024cbc:	6003      	str	r3, [r0, #0]
 8024cbe:	6863      	ldr	r3, [r4, #4]
 8024cc0:	6043      	str	r3, [r0, #4]
 8024cc2:	68a3      	ldr	r3, [r4, #8]
 8024cc4:	6083      	str	r3, [r0, #8]
 8024cc6:	465f      	mov	r7, fp
 8024cc8:	e7ab      	b.n	8024c22 <_realloc_r+0x1c6>
 8024cca:	68a3      	ldr	r3, [r4, #8]
 8024ccc:	612b      	str	r3, [r5, #16]
 8024cce:	68e3      	ldr	r3, [r4, #12]
 8024cd0:	616b      	str	r3, [r5, #20]
 8024cd2:	2a24      	cmp	r2, #36	; 0x24
 8024cd4:	bf01      	itttt	eq
 8024cd6:	6923      	ldreq	r3, [r4, #16]
 8024cd8:	61ab      	streq	r3, [r5, #24]
 8024cda:	6963      	ldreq	r3, [r4, #20]
 8024cdc:	61eb      	streq	r3, [r5, #28]
 8024cde:	bf19      	ittee	ne
 8024ce0:	3410      	addne	r4, #16
 8024ce2:	f105 0018 	addne.w	r0, r5, #24
 8024ce6:	f105 0020 	addeq.w	r0, r5, #32
 8024cea:	3418      	addeq	r4, #24
 8024cec:	e7e5      	b.n	8024cba <_realloc_r+0x25e>
 8024cee:	4621      	mov	r1, r4
 8024cf0:	f7fb f916 	bl	801ff20 <memmove>
 8024cf4:	e7e7      	b.n	8024cc6 <_realloc_r+0x26a>
 8024cf6:	4611      	mov	r1, r2
 8024cf8:	4648      	mov	r0, r9
 8024cfa:	f7ff f931 	bl	8023f60 <_malloc_r>
 8024cfe:	4683      	mov	fp, r0
 8024d00:	2800      	cmp	r0, #0
 8024d02:	f43f af51 	beq.w	8024ba8 <_realloc_r+0x14c>
 8024d06:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8024d0a:	f023 0301 	bic.w	r3, r3, #1
 8024d0e:	4453      	add	r3, sl
 8024d10:	f1a0 0208 	sub.w	r2, r0, #8
 8024d14:	4293      	cmp	r3, r2
 8024d16:	d107      	bne.n	8024d28 <_realloc_r+0x2cc>
 8024d18:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8024d1c:	f027 0703 	bic.w	r7, r7, #3
 8024d20:	4437      	add	r7, r6
 8024d22:	e6fc      	b.n	8024b1e <_realloc_r+0xc2>
 8024d24:	2000044c 	.word	0x2000044c
 8024d28:	1f32      	subs	r2, r6, #4
 8024d2a:	2a24      	cmp	r2, #36	; 0x24
 8024d2c:	d82d      	bhi.n	8024d8a <_realloc_r+0x32e>
 8024d2e:	2a13      	cmp	r2, #19
 8024d30:	d928      	bls.n	8024d84 <_realloc_r+0x328>
 8024d32:	6823      	ldr	r3, [r4, #0]
 8024d34:	6003      	str	r3, [r0, #0]
 8024d36:	6863      	ldr	r3, [r4, #4]
 8024d38:	6043      	str	r3, [r0, #4]
 8024d3a:	2a1b      	cmp	r2, #27
 8024d3c:	d80e      	bhi.n	8024d5c <_realloc_r+0x300>
 8024d3e:	f104 0208 	add.w	r2, r4, #8
 8024d42:	f100 0308 	add.w	r3, r0, #8
 8024d46:	6811      	ldr	r1, [r2, #0]
 8024d48:	6019      	str	r1, [r3, #0]
 8024d4a:	6851      	ldr	r1, [r2, #4]
 8024d4c:	6059      	str	r1, [r3, #4]
 8024d4e:	6892      	ldr	r2, [r2, #8]
 8024d50:	609a      	str	r2, [r3, #8]
 8024d52:	4621      	mov	r1, r4
 8024d54:	4648      	mov	r0, r9
 8024d56:	f7fe fe65 	bl	8023a24 <_free_r>
 8024d5a:	e725      	b.n	8024ba8 <_realloc_r+0x14c>
 8024d5c:	68a3      	ldr	r3, [r4, #8]
 8024d5e:	6083      	str	r3, [r0, #8]
 8024d60:	68e3      	ldr	r3, [r4, #12]
 8024d62:	60c3      	str	r3, [r0, #12]
 8024d64:	2a24      	cmp	r2, #36	; 0x24
 8024d66:	bf01      	itttt	eq
 8024d68:	6923      	ldreq	r3, [r4, #16]
 8024d6a:	6103      	streq	r3, [r0, #16]
 8024d6c:	6961      	ldreq	r1, [r4, #20]
 8024d6e:	6141      	streq	r1, [r0, #20]
 8024d70:	bf19      	ittee	ne
 8024d72:	f104 0210 	addne.w	r2, r4, #16
 8024d76:	f100 0310 	addne.w	r3, r0, #16
 8024d7a:	f104 0218 	addeq.w	r2, r4, #24
 8024d7e:	f100 0318 	addeq.w	r3, r0, #24
 8024d82:	e7e0      	b.n	8024d46 <_realloc_r+0x2ea>
 8024d84:	4603      	mov	r3, r0
 8024d86:	4622      	mov	r2, r4
 8024d88:	e7dd      	b.n	8024d46 <_realloc_r+0x2ea>
 8024d8a:	4621      	mov	r1, r4
 8024d8c:	f7fb f8c8 	bl	801ff20 <memmove>
 8024d90:	e7df      	b.n	8024d52 <_realloc_r+0x2f6>
 8024d92:	4637      	mov	r7, r6
 8024d94:	e6c3      	b.n	8024b1e <_realloc_r+0xc2>
 8024d96:	431f      	orrs	r7, r3
 8024d98:	606f      	str	r7, [r5, #4]
 8024d9a:	6853      	ldr	r3, [r2, #4]
 8024d9c:	f043 0301 	orr.w	r3, r3, #1
 8024da0:	6053      	str	r3, [r2, #4]
 8024da2:	e758      	b.n	8024c56 <_realloc_r+0x1fa>

08024da4 <frexp>:
 8024da4:	b570      	push	{r4, r5, r6, lr}
 8024da6:	2100      	movs	r1, #0
 8024da8:	ec55 4b10 	vmov	r4, r5, d0
 8024dac:	6001      	str	r1, [r0, #0]
 8024dae:	4916      	ldr	r1, [pc, #88]	; (8024e08 <frexp+0x64>)
 8024db0:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8024db4:	428a      	cmp	r2, r1
 8024db6:	4606      	mov	r6, r0
 8024db8:	462b      	mov	r3, r5
 8024dba:	dc22      	bgt.n	8024e02 <frexp+0x5e>
 8024dbc:	ee10 1a10 	vmov	r1, s0
 8024dc0:	4311      	orrs	r1, r2
 8024dc2:	d01e      	beq.n	8024e02 <frexp+0x5e>
 8024dc4:	4911      	ldr	r1, [pc, #68]	; (8024e0c <frexp+0x68>)
 8024dc6:	4029      	ands	r1, r5
 8024dc8:	b969      	cbnz	r1, 8024de6 <frexp+0x42>
 8024dca:	4b11      	ldr	r3, [pc, #68]	; (8024e10 <frexp+0x6c>)
 8024dcc:	2200      	movs	r2, #0
 8024dce:	ee10 0a10 	vmov	r0, s0
 8024dd2:	4629      	mov	r1, r5
 8024dd4:	f7db fc20 	bl	8000618 <__aeabi_dmul>
 8024dd8:	460b      	mov	r3, r1
 8024dda:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8024dde:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8024de2:	4604      	mov	r4, r0
 8024de4:	6031      	str	r1, [r6, #0]
 8024de6:	6831      	ldr	r1, [r6, #0]
 8024de8:	1512      	asrs	r2, r2, #20
 8024dea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8024dee:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8024df2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8024df6:	440a      	add	r2, r1
 8024df8:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8024dfc:	6032      	str	r2, [r6, #0]
 8024dfe:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8024e02:	ec45 4b10 	vmov	d0, r4, r5
 8024e06:	bd70      	pop	{r4, r5, r6, pc}
 8024e08:	7fefffff 	.word	0x7fefffff
 8024e0c:	7ff00000 	.word	0x7ff00000
 8024e10:	43500000 	.word	0x43500000

08024e14 <_sbrk_r>:
 8024e14:	b538      	push	{r3, r4, r5, lr}
 8024e16:	4d06      	ldr	r5, [pc, #24]	; (8024e30 <_sbrk_r+0x1c>)
 8024e18:	2300      	movs	r3, #0
 8024e1a:	4604      	mov	r4, r0
 8024e1c:	4608      	mov	r0, r1
 8024e1e:	602b      	str	r3, [r5, #0]
 8024e20:	f7dd ff32 	bl	8002c88 <_sbrk>
 8024e24:	1c43      	adds	r3, r0, #1
 8024e26:	d102      	bne.n	8024e2e <_sbrk_r+0x1a>
 8024e28:	682b      	ldr	r3, [r5, #0]
 8024e2a:	b103      	cbz	r3, 8024e2e <_sbrk_r+0x1a>
 8024e2c:	6023      	str	r3, [r4, #0]
 8024e2e:	bd38      	pop	{r3, r4, r5, pc}
 8024e30:	200189f8 	.word	0x200189f8

08024e34 <__sread>:
 8024e34:	b510      	push	{r4, lr}
 8024e36:	460c      	mov	r4, r1
 8024e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024e3c:	f000 ffba 	bl	8025db4 <_read_r>
 8024e40:	2800      	cmp	r0, #0
 8024e42:	bfab      	itete	ge
 8024e44:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 8024e46:	89a3      	ldrhlt	r3, [r4, #12]
 8024e48:	181b      	addge	r3, r3, r0
 8024e4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8024e4e:	bfac      	ite	ge
 8024e50:	6523      	strge	r3, [r4, #80]	; 0x50
 8024e52:	81a3      	strhlt	r3, [r4, #12]
 8024e54:	bd10      	pop	{r4, pc}

08024e56 <__swrite>:
 8024e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024e5a:	461f      	mov	r7, r3
 8024e5c:	898b      	ldrh	r3, [r1, #12]
 8024e5e:	05db      	lsls	r3, r3, #23
 8024e60:	4605      	mov	r5, r0
 8024e62:	460c      	mov	r4, r1
 8024e64:	4616      	mov	r6, r2
 8024e66:	d505      	bpl.n	8024e74 <__swrite+0x1e>
 8024e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024e6c:	2302      	movs	r3, #2
 8024e6e:	2200      	movs	r2, #0
 8024e70:	f000 ff7c 	bl	8025d6c <_lseek_r>
 8024e74:	89a3      	ldrh	r3, [r4, #12]
 8024e76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024e7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8024e7e:	81a3      	strh	r3, [r4, #12]
 8024e80:	4632      	mov	r2, r6
 8024e82:	463b      	mov	r3, r7
 8024e84:	4628      	mov	r0, r5
 8024e86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024e8a:	f000 bdb9 	b.w	8025a00 <_write_r>

08024e8e <__sseek>:
 8024e8e:	b510      	push	{r4, lr}
 8024e90:	460c      	mov	r4, r1
 8024e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024e96:	f000 ff69 	bl	8025d6c <_lseek_r>
 8024e9a:	1c43      	adds	r3, r0, #1
 8024e9c:	89a3      	ldrh	r3, [r4, #12]
 8024e9e:	bf15      	itete	ne
 8024ea0:	6520      	strne	r0, [r4, #80]	; 0x50
 8024ea2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8024ea6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8024eaa:	81a3      	strheq	r3, [r4, #12]
 8024eac:	bf18      	it	ne
 8024eae:	81a3      	strhne	r3, [r4, #12]
 8024eb0:	bd10      	pop	{r4, pc}

08024eb2 <__sclose>:
 8024eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024eb6:	f000 be4b 	b.w	8025b50 <_close_r>

08024eba <strncpy>:
 8024eba:	b510      	push	{r4, lr}
 8024ebc:	3901      	subs	r1, #1
 8024ebe:	4603      	mov	r3, r0
 8024ec0:	b132      	cbz	r2, 8024ed0 <strncpy+0x16>
 8024ec2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8024ec6:	f803 4b01 	strb.w	r4, [r3], #1
 8024eca:	3a01      	subs	r2, #1
 8024ecc:	2c00      	cmp	r4, #0
 8024ece:	d1f7      	bne.n	8024ec0 <strncpy+0x6>
 8024ed0:	441a      	add	r2, r3
 8024ed2:	2100      	movs	r1, #0
 8024ed4:	4293      	cmp	r3, r2
 8024ed6:	d100      	bne.n	8024eda <strncpy+0x20>
 8024ed8:	bd10      	pop	{r4, pc}
 8024eda:	f803 1b01 	strb.w	r1, [r3], #1
 8024ede:	e7f9      	b.n	8024ed4 <strncpy+0x1a>

08024ee0 <__ssprint_r>:
 8024ee0:	6893      	ldr	r3, [r2, #8]
 8024ee2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ee6:	4680      	mov	r8, r0
 8024ee8:	460c      	mov	r4, r1
 8024eea:	4617      	mov	r7, r2
 8024eec:	2b00      	cmp	r3, #0
 8024eee:	d061      	beq.n	8024fb4 <__ssprint_r+0xd4>
 8024ef0:	2300      	movs	r3, #0
 8024ef2:	f8d2 a000 	ldr.w	sl, [r2]
 8024ef6:	9301      	str	r3, [sp, #4]
 8024ef8:	469b      	mov	fp, r3
 8024efa:	f1bb 0f00 	cmp.w	fp, #0
 8024efe:	d02b      	beq.n	8024f58 <__ssprint_r+0x78>
 8024f00:	68a6      	ldr	r6, [r4, #8]
 8024f02:	455e      	cmp	r6, fp
 8024f04:	d844      	bhi.n	8024f90 <__ssprint_r+0xb0>
 8024f06:	89a2      	ldrh	r2, [r4, #12]
 8024f08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8024f0c:	d03e      	beq.n	8024f8c <__ssprint_r+0xac>
 8024f0e:	6820      	ldr	r0, [r4, #0]
 8024f10:	6921      	ldr	r1, [r4, #16]
 8024f12:	6965      	ldr	r5, [r4, #20]
 8024f14:	eba0 0901 	sub.w	r9, r0, r1
 8024f18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024f1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8024f20:	f109 0001 	add.w	r0, r9, #1
 8024f24:	106d      	asrs	r5, r5, #1
 8024f26:	4458      	add	r0, fp
 8024f28:	4285      	cmp	r5, r0
 8024f2a:	bf38      	it	cc
 8024f2c:	4605      	movcc	r5, r0
 8024f2e:	0553      	lsls	r3, r2, #21
 8024f30:	d545      	bpl.n	8024fbe <__ssprint_r+0xde>
 8024f32:	4629      	mov	r1, r5
 8024f34:	4640      	mov	r0, r8
 8024f36:	f7ff f813 	bl	8023f60 <_malloc_r>
 8024f3a:	4606      	mov	r6, r0
 8024f3c:	b9a0      	cbnz	r0, 8024f68 <__ssprint_r+0x88>
 8024f3e:	230c      	movs	r3, #12
 8024f40:	f8c8 3000 	str.w	r3, [r8]
 8024f44:	89a3      	ldrh	r3, [r4, #12]
 8024f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024f4a:	81a3      	strh	r3, [r4, #12]
 8024f4c:	2300      	movs	r3, #0
 8024f4e:	e9c7 3301 	strd	r3, r3, [r7, #4]
 8024f52:	f04f 30ff 	mov.w	r0, #4294967295
 8024f56:	e02f      	b.n	8024fb8 <__ssprint_r+0xd8>
 8024f58:	f8da 3000 	ldr.w	r3, [sl]
 8024f5c:	f8da b004 	ldr.w	fp, [sl, #4]
 8024f60:	9301      	str	r3, [sp, #4]
 8024f62:	f10a 0a08 	add.w	sl, sl, #8
 8024f66:	e7c8      	b.n	8024efa <__ssprint_r+0x1a>
 8024f68:	464a      	mov	r2, r9
 8024f6a:	6921      	ldr	r1, [r4, #16]
 8024f6c:	f7fa ffca 	bl	801ff04 <memcpy>
 8024f70:	89a2      	ldrh	r2, [r4, #12]
 8024f72:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8024f76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8024f7a:	81a2      	strh	r2, [r4, #12]
 8024f7c:	6126      	str	r6, [r4, #16]
 8024f7e:	6165      	str	r5, [r4, #20]
 8024f80:	444e      	add	r6, r9
 8024f82:	eba5 0509 	sub.w	r5, r5, r9
 8024f86:	6026      	str	r6, [r4, #0]
 8024f88:	60a5      	str	r5, [r4, #8]
 8024f8a:	465e      	mov	r6, fp
 8024f8c:	455e      	cmp	r6, fp
 8024f8e:	d900      	bls.n	8024f92 <__ssprint_r+0xb2>
 8024f90:	465e      	mov	r6, fp
 8024f92:	4632      	mov	r2, r6
 8024f94:	9901      	ldr	r1, [sp, #4]
 8024f96:	6820      	ldr	r0, [r4, #0]
 8024f98:	f7fa ffc2 	bl	801ff20 <memmove>
 8024f9c:	68a2      	ldr	r2, [r4, #8]
 8024f9e:	1b92      	subs	r2, r2, r6
 8024fa0:	60a2      	str	r2, [r4, #8]
 8024fa2:	6822      	ldr	r2, [r4, #0]
 8024fa4:	4432      	add	r2, r6
 8024fa6:	6022      	str	r2, [r4, #0]
 8024fa8:	68ba      	ldr	r2, [r7, #8]
 8024faa:	eba2 030b 	sub.w	r3, r2, fp
 8024fae:	60bb      	str	r3, [r7, #8]
 8024fb0:	2b00      	cmp	r3, #0
 8024fb2:	d1d1      	bne.n	8024f58 <__ssprint_r+0x78>
 8024fb4:	2000      	movs	r0, #0
 8024fb6:	6078      	str	r0, [r7, #4]
 8024fb8:	b003      	add	sp, #12
 8024fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024fbe:	462a      	mov	r2, r5
 8024fc0:	4640      	mov	r0, r8
 8024fc2:	f7ff fd4b 	bl	8024a5c <_realloc_r>
 8024fc6:	4606      	mov	r6, r0
 8024fc8:	2800      	cmp	r0, #0
 8024fca:	d1d7      	bne.n	8024f7c <__ssprint_r+0x9c>
 8024fcc:	6921      	ldr	r1, [r4, #16]
 8024fce:	4640      	mov	r0, r8
 8024fd0:	f7fe fd28 	bl	8023a24 <_free_r>
 8024fd4:	e7b3      	b.n	8024f3e <__ssprint_r+0x5e>

08024fd6 <sysconf>:
 8024fd6:	2808      	cmp	r0, #8
 8024fd8:	b508      	push	{r3, lr}
 8024fda:	d006      	beq.n	8024fea <sysconf+0x14>
 8024fdc:	f7fe fb92 	bl	8023704 <__errno>
 8024fe0:	2316      	movs	r3, #22
 8024fe2:	6003      	str	r3, [r0, #0]
 8024fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8024fe8:	bd08      	pop	{r3, pc}
 8024fea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8024fee:	e7fb      	b.n	8024fe8 <sysconf+0x12>

08024ff0 <__sprint_r>:
 8024ff0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ff4:	6893      	ldr	r3, [r2, #8]
 8024ff6:	4680      	mov	r8, r0
 8024ff8:	460f      	mov	r7, r1
 8024ffa:	4614      	mov	r4, r2
 8024ffc:	b91b      	cbnz	r3, 8025006 <__sprint_r+0x16>
 8024ffe:	6053      	str	r3, [r2, #4]
 8025000:	4618      	mov	r0, r3
 8025002:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025006:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8025008:	049d      	lsls	r5, r3, #18
 802500a:	d520      	bpl.n	802504e <__sprint_r+0x5e>
 802500c:	6815      	ldr	r5, [r2, #0]
 802500e:	3508      	adds	r5, #8
 8025010:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 8025014:	f04f 0900 	mov.w	r9, #0
 8025018:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 802501c:	45ca      	cmp	sl, r9
 802501e:	dc0b      	bgt.n	8025038 <__sprint_r+0x48>
 8025020:	68a3      	ldr	r3, [r4, #8]
 8025022:	f026 0003 	bic.w	r0, r6, #3
 8025026:	1a18      	subs	r0, r3, r0
 8025028:	60a0      	str	r0, [r4, #8]
 802502a:	3508      	adds	r5, #8
 802502c:	2800      	cmp	r0, #0
 802502e:	d1ef      	bne.n	8025010 <__sprint_r+0x20>
 8025030:	2300      	movs	r3, #0
 8025032:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8025036:	e7e4      	b.n	8025002 <__sprint_r+0x12>
 8025038:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 802503c:	463a      	mov	r2, r7
 802503e:	4640      	mov	r0, r8
 8025040:	f000 fe41 	bl	8025cc6 <_fputwc_r>
 8025044:	1c43      	adds	r3, r0, #1
 8025046:	d0f3      	beq.n	8025030 <__sprint_r+0x40>
 8025048:	f109 0901 	add.w	r9, r9, #1
 802504c:	e7e6      	b.n	802501c <__sprint_r+0x2c>
 802504e:	f7fe fda9 	bl	8023ba4 <__sfvwrite_r>
 8025052:	e7ed      	b.n	8025030 <__sprint_r+0x40>

08025054 <_vfiprintf_r>:
 8025054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025058:	ed2d 8b02 	vpush	{d8}
 802505c:	b0b9      	sub	sp, #228	; 0xe4
 802505e:	460f      	mov	r7, r1
 8025060:	9201      	str	r2, [sp, #4]
 8025062:	461d      	mov	r5, r3
 8025064:	461c      	mov	r4, r3
 8025066:	4681      	mov	r9, r0
 8025068:	b118      	cbz	r0, 8025072 <_vfiprintf_r+0x1e>
 802506a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 802506c:	b90b      	cbnz	r3, 8025072 <_vfiprintf_r+0x1e>
 802506e:	f7fe fc49 	bl	8023904 <__sinit>
 8025072:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025074:	07d8      	lsls	r0, r3, #31
 8025076:	d405      	bmi.n	8025084 <_vfiprintf_r+0x30>
 8025078:	89bb      	ldrh	r3, [r7, #12]
 802507a:	0599      	lsls	r1, r3, #22
 802507c:	d402      	bmi.n	8025084 <_vfiprintf_r+0x30>
 802507e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8025080:	f7fe ff00 	bl	8023e84 <__retarget_lock_acquire_recursive>
 8025084:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8025088:	049a      	lsls	r2, r3, #18
 802508a:	d406      	bmi.n	802509a <_vfiprintf_r+0x46>
 802508c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8025090:	81bb      	strh	r3, [r7, #12]
 8025092:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025094:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8025098:	667b      	str	r3, [r7, #100]	; 0x64
 802509a:	89bb      	ldrh	r3, [r7, #12]
 802509c:	071e      	lsls	r6, r3, #28
 802509e:	d501      	bpl.n	80250a4 <_vfiprintf_r+0x50>
 80250a0:	693b      	ldr	r3, [r7, #16]
 80250a2:	b9bb      	cbnz	r3, 80250d4 <_vfiprintf_r+0x80>
 80250a4:	4639      	mov	r1, r7
 80250a6:	4648      	mov	r0, r9
 80250a8:	f7fd fc60 	bl	802296c <__swsetup_r>
 80250ac:	b190      	cbz	r0, 80250d4 <_vfiprintf_r+0x80>
 80250ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80250b0:	07d8      	lsls	r0, r3, #31
 80250b2:	d508      	bpl.n	80250c6 <_vfiprintf_r+0x72>
 80250b4:	f04f 33ff 	mov.w	r3, #4294967295
 80250b8:	9302      	str	r3, [sp, #8]
 80250ba:	9802      	ldr	r0, [sp, #8]
 80250bc:	b039      	add	sp, #228	; 0xe4
 80250be:	ecbd 8b02 	vpop	{d8}
 80250c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80250c6:	89bb      	ldrh	r3, [r7, #12]
 80250c8:	0599      	lsls	r1, r3, #22
 80250ca:	d4f3      	bmi.n	80250b4 <_vfiprintf_r+0x60>
 80250cc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80250ce:	f7fe feda 	bl	8023e86 <__retarget_lock_release_recursive>
 80250d2:	e7ef      	b.n	80250b4 <_vfiprintf_r+0x60>
 80250d4:	89bb      	ldrh	r3, [r7, #12]
 80250d6:	f003 021a 	and.w	r2, r3, #26
 80250da:	2a0a      	cmp	r2, #10
 80250dc:	d116      	bne.n	802510c <_vfiprintf_r+0xb8>
 80250de:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80250e2:	2a00      	cmp	r2, #0
 80250e4:	db12      	blt.n	802510c <_vfiprintf_r+0xb8>
 80250e6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80250e8:	07d2      	lsls	r2, r2, #31
 80250ea:	d404      	bmi.n	80250f6 <_vfiprintf_r+0xa2>
 80250ec:	059e      	lsls	r6, r3, #22
 80250ee:	d402      	bmi.n	80250f6 <_vfiprintf_r+0xa2>
 80250f0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80250f2:	f7fe fec8 	bl	8023e86 <__retarget_lock_release_recursive>
 80250f6:	9a01      	ldr	r2, [sp, #4]
 80250f8:	462b      	mov	r3, r5
 80250fa:	4639      	mov	r1, r7
 80250fc:	4648      	mov	r0, r9
 80250fe:	b039      	add	sp, #228	; 0xe4
 8025100:	ecbd 8b02 	vpop	{d8}
 8025104:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025108:	f000 bc3a 	b.w	8025980 <__sbprintf>
 802510c:	2300      	movs	r3, #0
 802510e:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 8025112:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8025116:	ae0f      	add	r6, sp, #60	; 0x3c
 8025118:	ee08 3a10 	vmov	s16, r3
 802511c:	960c      	str	r6, [sp, #48]	; 0x30
 802511e:	9307      	str	r3, [sp, #28]
 8025120:	9302      	str	r3, [sp, #8]
 8025122:	9b01      	ldr	r3, [sp, #4]
 8025124:	461d      	mov	r5, r3
 8025126:	f813 2b01 	ldrb.w	r2, [r3], #1
 802512a:	b10a      	cbz	r2, 8025130 <_vfiprintf_r+0xdc>
 802512c:	2a25      	cmp	r2, #37	; 0x25
 802512e:	d1f9      	bne.n	8025124 <_vfiprintf_r+0xd0>
 8025130:	9b01      	ldr	r3, [sp, #4]
 8025132:	ebb5 0803 	subs.w	r8, r5, r3
 8025136:	d00d      	beq.n	8025154 <_vfiprintf_r+0x100>
 8025138:	e9c6 3800 	strd	r3, r8, [r6]
 802513c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802513e:	4443      	add	r3, r8
 8025140:	930e      	str	r3, [sp, #56]	; 0x38
 8025142:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025144:	3301      	adds	r3, #1
 8025146:	2b07      	cmp	r3, #7
 8025148:	930d      	str	r3, [sp, #52]	; 0x34
 802514a:	dc75      	bgt.n	8025238 <_vfiprintf_r+0x1e4>
 802514c:	3608      	adds	r6, #8
 802514e:	9b02      	ldr	r3, [sp, #8]
 8025150:	4443      	add	r3, r8
 8025152:	9302      	str	r3, [sp, #8]
 8025154:	782b      	ldrb	r3, [r5, #0]
 8025156:	2b00      	cmp	r3, #0
 8025158:	f000 83d6 	beq.w	8025908 <_vfiprintf_r+0x8b4>
 802515c:	2300      	movs	r3, #0
 802515e:	f04f 31ff 	mov.w	r1, #4294967295
 8025162:	1c6a      	adds	r2, r5, #1
 8025164:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8025168:	9100      	str	r1, [sp, #0]
 802516a:	9303      	str	r3, [sp, #12]
 802516c:	469a      	mov	sl, r3
 802516e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8025172:	9201      	str	r2, [sp, #4]
 8025174:	f1a3 0220 	sub.w	r2, r3, #32
 8025178:	2a5a      	cmp	r2, #90	; 0x5a
 802517a:	f200 831f 	bhi.w	80257bc <_vfiprintf_r+0x768>
 802517e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8025182:	009b      	.short	0x009b
 8025184:	031d031d 	.word	0x031d031d
 8025188:	031d00a3 	.word	0x031d00a3
 802518c:	031d031d 	.word	0x031d031d
 8025190:	031d0082 	.word	0x031d0082
 8025194:	00a6031d 	.word	0x00a6031d
 8025198:	031d00b0 	.word	0x031d00b0
 802519c:	00b200ad 	.word	0x00b200ad
 80251a0:	00cd031d 	.word	0x00cd031d
 80251a4:	00d000d0 	.word	0x00d000d0
 80251a8:	00d000d0 	.word	0x00d000d0
 80251ac:	00d000d0 	.word	0x00d000d0
 80251b0:	00d000d0 	.word	0x00d000d0
 80251b4:	031d00d0 	.word	0x031d00d0
 80251b8:	031d031d 	.word	0x031d031d
 80251bc:	031d031d 	.word	0x031d031d
 80251c0:	031d031d 	.word	0x031d031d
 80251c4:	031d031d 	.word	0x031d031d
 80251c8:	010800fa 	.word	0x010800fa
 80251cc:	031d031d 	.word	0x031d031d
 80251d0:	031d031d 	.word	0x031d031d
 80251d4:	031d031d 	.word	0x031d031d
 80251d8:	031d031d 	.word	0x031d031d
 80251dc:	031d031d 	.word	0x031d031d
 80251e0:	031d0158 	.word	0x031d0158
 80251e4:	031d031d 	.word	0x031d031d
 80251e8:	031d01a1 	.word	0x031d01a1
 80251ec:	031d027e 	.word	0x031d027e
 80251f0:	029e031d 	.word	0x029e031d
 80251f4:	031d031d 	.word	0x031d031d
 80251f8:	031d031d 	.word	0x031d031d
 80251fc:	031d031d 	.word	0x031d031d
 8025200:	031d031d 	.word	0x031d031d
 8025204:	031d031d 	.word	0x031d031d
 8025208:	010a00fa 	.word	0x010a00fa
 802520c:	031d031d 	.word	0x031d031d
 8025210:	00e0031d 	.word	0x00e0031d
 8025214:	00f4010a 	.word	0x00f4010a
 8025218:	00ed031d 	.word	0x00ed031d
 802521c:	0136031d 	.word	0x0136031d
 8025220:	018f015a 	.word	0x018f015a
 8025224:	031d00f4 	.word	0x031d00f4
 8025228:	009901a1 	.word	0x009901a1
 802522c:	031d0280 	.word	0x031d0280
 8025230:	0065031d 	.word	0x0065031d
 8025234:	0099031d 	.word	0x0099031d
 8025238:	aa0c      	add	r2, sp, #48	; 0x30
 802523a:	4639      	mov	r1, r7
 802523c:	4648      	mov	r0, r9
 802523e:	f7ff fed7 	bl	8024ff0 <__sprint_r>
 8025242:	2800      	cmp	r0, #0
 8025244:	f040 833f 	bne.w	80258c6 <_vfiprintf_r+0x872>
 8025248:	ae0f      	add	r6, sp, #60	; 0x3c
 802524a:	e780      	b.n	802514e <_vfiprintf_r+0xfa>
 802524c:	4a9c      	ldr	r2, [pc, #624]	; (80254c0 <_vfiprintf_r+0x46c>)
 802524e:	9205      	str	r2, [sp, #20]
 8025250:	f01a 0220 	ands.w	r2, sl, #32
 8025254:	f000 8235 	beq.w	80256c2 <_vfiprintf_r+0x66e>
 8025258:	3407      	adds	r4, #7
 802525a:	f024 0207 	bic.w	r2, r4, #7
 802525e:	4693      	mov	fp, r2
 8025260:	6855      	ldr	r5, [r2, #4]
 8025262:	f85b 4b08 	ldr.w	r4, [fp], #8
 8025266:	f01a 0f01 	tst.w	sl, #1
 802526a:	d009      	beq.n	8025280 <_vfiprintf_r+0x22c>
 802526c:	ea54 0205 	orrs.w	r2, r4, r5
 8025270:	bf1f      	itttt	ne
 8025272:	2230      	movne	r2, #48	; 0x30
 8025274:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 8025278:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 802527c:	f04a 0a02 	orrne.w	sl, sl, #2
 8025280:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8025284:	e11a      	b.n	80254bc <_vfiprintf_r+0x468>
 8025286:	4648      	mov	r0, r9
 8025288:	f7fe fdf6 	bl	8023e78 <_localeconv_r>
 802528c:	6843      	ldr	r3, [r0, #4]
 802528e:	4618      	mov	r0, r3
 8025290:	ee08 3a10 	vmov	s16, r3
 8025294:	f7da ffac 	bl	80001f0 <strlen>
 8025298:	9007      	str	r0, [sp, #28]
 802529a:	4648      	mov	r0, r9
 802529c:	f7fe fdec 	bl	8023e78 <_localeconv_r>
 80252a0:	6883      	ldr	r3, [r0, #8]
 80252a2:	9306      	str	r3, [sp, #24]
 80252a4:	9b07      	ldr	r3, [sp, #28]
 80252a6:	b12b      	cbz	r3, 80252b4 <_vfiprintf_r+0x260>
 80252a8:	9b06      	ldr	r3, [sp, #24]
 80252aa:	b11b      	cbz	r3, 80252b4 <_vfiprintf_r+0x260>
 80252ac:	781b      	ldrb	r3, [r3, #0]
 80252ae:	b10b      	cbz	r3, 80252b4 <_vfiprintf_r+0x260>
 80252b0:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 80252b4:	9a01      	ldr	r2, [sp, #4]
 80252b6:	e75a      	b.n	802516e <_vfiprintf_r+0x11a>
 80252b8:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 80252bc:	2b00      	cmp	r3, #0
 80252be:	d1f9      	bne.n	80252b4 <_vfiprintf_r+0x260>
 80252c0:	2320      	movs	r3, #32
 80252c2:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80252c6:	e7f5      	b.n	80252b4 <_vfiprintf_r+0x260>
 80252c8:	f04a 0a01 	orr.w	sl, sl, #1
 80252cc:	e7f2      	b.n	80252b4 <_vfiprintf_r+0x260>
 80252ce:	f854 3b04 	ldr.w	r3, [r4], #4
 80252d2:	9303      	str	r3, [sp, #12]
 80252d4:	2b00      	cmp	r3, #0
 80252d6:	daed      	bge.n	80252b4 <_vfiprintf_r+0x260>
 80252d8:	425b      	negs	r3, r3
 80252da:	9303      	str	r3, [sp, #12]
 80252dc:	f04a 0a04 	orr.w	sl, sl, #4
 80252e0:	e7e8      	b.n	80252b4 <_vfiprintf_r+0x260>
 80252e2:	232b      	movs	r3, #43	; 0x2b
 80252e4:	e7ed      	b.n	80252c2 <_vfiprintf_r+0x26e>
 80252e6:	9a01      	ldr	r2, [sp, #4]
 80252e8:	f812 3b01 	ldrb.w	r3, [r2], #1
 80252ec:	2b2a      	cmp	r3, #42	; 0x2a
 80252ee:	d112      	bne.n	8025316 <_vfiprintf_r+0x2c2>
 80252f0:	f854 0b04 	ldr.w	r0, [r4], #4
 80252f4:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 80252f8:	e9cd 3200 	strd	r3, r2, [sp]
 80252fc:	e7da      	b.n	80252b4 <_vfiprintf_r+0x260>
 80252fe:	9b00      	ldr	r3, [sp, #0]
 8025300:	200a      	movs	r0, #10
 8025302:	fb00 1303 	mla	r3, r0, r3, r1
 8025306:	9300      	str	r3, [sp, #0]
 8025308:	f812 3b01 	ldrb.w	r3, [r2], #1
 802530c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8025310:	2909      	cmp	r1, #9
 8025312:	d9f4      	bls.n	80252fe <_vfiprintf_r+0x2aa>
 8025314:	e72d      	b.n	8025172 <_vfiprintf_r+0x11e>
 8025316:	2100      	movs	r1, #0
 8025318:	9100      	str	r1, [sp, #0]
 802531a:	e7f7      	b.n	802530c <_vfiprintf_r+0x2b8>
 802531c:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8025320:	e7c8      	b.n	80252b4 <_vfiprintf_r+0x260>
 8025322:	2100      	movs	r1, #0
 8025324:	9a01      	ldr	r2, [sp, #4]
 8025326:	9103      	str	r1, [sp, #12]
 8025328:	9903      	ldr	r1, [sp, #12]
 802532a:	3b30      	subs	r3, #48	; 0x30
 802532c:	200a      	movs	r0, #10
 802532e:	fb00 3301 	mla	r3, r0, r1, r3
 8025332:	9303      	str	r3, [sp, #12]
 8025334:	f812 3b01 	ldrb.w	r3, [r2], #1
 8025338:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 802533c:	2909      	cmp	r1, #9
 802533e:	d9f3      	bls.n	8025328 <_vfiprintf_r+0x2d4>
 8025340:	e717      	b.n	8025172 <_vfiprintf_r+0x11e>
 8025342:	9b01      	ldr	r3, [sp, #4]
 8025344:	781b      	ldrb	r3, [r3, #0]
 8025346:	2b68      	cmp	r3, #104	; 0x68
 8025348:	bf01      	itttt	eq
 802534a:	9b01      	ldreq	r3, [sp, #4]
 802534c:	3301      	addeq	r3, #1
 802534e:	9301      	streq	r3, [sp, #4]
 8025350:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8025354:	bf18      	it	ne
 8025356:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 802535a:	e7ab      	b.n	80252b4 <_vfiprintf_r+0x260>
 802535c:	9b01      	ldr	r3, [sp, #4]
 802535e:	781b      	ldrb	r3, [r3, #0]
 8025360:	2b6c      	cmp	r3, #108	; 0x6c
 8025362:	d105      	bne.n	8025370 <_vfiprintf_r+0x31c>
 8025364:	9b01      	ldr	r3, [sp, #4]
 8025366:	3301      	adds	r3, #1
 8025368:	9301      	str	r3, [sp, #4]
 802536a:	f04a 0a20 	orr.w	sl, sl, #32
 802536e:	e7a1      	b.n	80252b4 <_vfiprintf_r+0x260>
 8025370:	f04a 0a10 	orr.w	sl, sl, #16
 8025374:	e79e      	b.n	80252b4 <_vfiprintf_r+0x260>
 8025376:	46a3      	mov	fp, r4
 8025378:	2100      	movs	r1, #0
 802537a:	f85b 3b04 	ldr.w	r3, [fp], #4
 802537e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8025382:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8025386:	2301      	movs	r3, #1
 8025388:	9300      	str	r3, [sp, #0]
 802538a:	460d      	mov	r5, r1
 802538c:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 8025390:	e0ad      	b.n	80254ee <_vfiprintf_r+0x49a>
 8025392:	f04a 0a10 	orr.w	sl, sl, #16
 8025396:	f01a 0f20 	tst.w	sl, #32
 802539a:	d011      	beq.n	80253c0 <_vfiprintf_r+0x36c>
 802539c:	3407      	adds	r4, #7
 802539e:	f024 0307 	bic.w	r3, r4, #7
 80253a2:	469b      	mov	fp, r3
 80253a4:	685d      	ldr	r5, [r3, #4]
 80253a6:	f85b 4b08 	ldr.w	r4, [fp], #8
 80253aa:	2d00      	cmp	r5, #0
 80253ac:	da06      	bge.n	80253bc <_vfiprintf_r+0x368>
 80253ae:	4264      	negs	r4, r4
 80253b0:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80253b4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80253b8:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80253bc:	2301      	movs	r3, #1
 80253be:	e04a      	b.n	8025456 <_vfiprintf_r+0x402>
 80253c0:	46a3      	mov	fp, r4
 80253c2:	f01a 0f10 	tst.w	sl, #16
 80253c6:	f85b 5b04 	ldr.w	r5, [fp], #4
 80253ca:	d002      	beq.n	80253d2 <_vfiprintf_r+0x37e>
 80253cc:	462c      	mov	r4, r5
 80253ce:	17ed      	asrs	r5, r5, #31
 80253d0:	e7eb      	b.n	80253aa <_vfiprintf_r+0x356>
 80253d2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80253d6:	d003      	beq.n	80253e0 <_vfiprintf_r+0x38c>
 80253d8:	b22c      	sxth	r4, r5
 80253da:	f345 35c0 	sbfx	r5, r5, #15, #1
 80253de:	e7e4      	b.n	80253aa <_vfiprintf_r+0x356>
 80253e0:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80253e4:	d0f2      	beq.n	80253cc <_vfiprintf_r+0x378>
 80253e6:	b26c      	sxtb	r4, r5
 80253e8:	f345 15c0 	sbfx	r5, r5, #7, #1
 80253ec:	e7dd      	b.n	80253aa <_vfiprintf_r+0x356>
 80253ee:	f01a 0f20 	tst.w	sl, #32
 80253f2:	f104 0b04 	add.w	fp, r4, #4
 80253f6:	d007      	beq.n	8025408 <_vfiprintf_r+0x3b4>
 80253f8:	9a02      	ldr	r2, [sp, #8]
 80253fa:	6823      	ldr	r3, [r4, #0]
 80253fc:	9902      	ldr	r1, [sp, #8]
 80253fe:	17d2      	asrs	r2, r2, #31
 8025400:	e9c3 1200 	strd	r1, r2, [r3]
 8025404:	465c      	mov	r4, fp
 8025406:	e68c      	b.n	8025122 <_vfiprintf_r+0xce>
 8025408:	f01a 0f10 	tst.w	sl, #16
 802540c:	d003      	beq.n	8025416 <_vfiprintf_r+0x3c2>
 802540e:	6823      	ldr	r3, [r4, #0]
 8025410:	9a02      	ldr	r2, [sp, #8]
 8025412:	601a      	str	r2, [r3, #0]
 8025414:	e7f6      	b.n	8025404 <_vfiprintf_r+0x3b0>
 8025416:	f01a 0f40 	tst.w	sl, #64	; 0x40
 802541a:	d003      	beq.n	8025424 <_vfiprintf_r+0x3d0>
 802541c:	6823      	ldr	r3, [r4, #0]
 802541e:	9a02      	ldr	r2, [sp, #8]
 8025420:	801a      	strh	r2, [r3, #0]
 8025422:	e7ef      	b.n	8025404 <_vfiprintf_r+0x3b0>
 8025424:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8025428:	d0f1      	beq.n	802540e <_vfiprintf_r+0x3ba>
 802542a:	6823      	ldr	r3, [r4, #0]
 802542c:	9a02      	ldr	r2, [sp, #8]
 802542e:	701a      	strb	r2, [r3, #0]
 8025430:	e7e8      	b.n	8025404 <_vfiprintf_r+0x3b0>
 8025432:	f04a 0a10 	orr.w	sl, sl, #16
 8025436:	f01a 0320 	ands.w	r3, sl, #32
 802543a:	d01f      	beq.n	802547c <_vfiprintf_r+0x428>
 802543c:	3407      	adds	r4, #7
 802543e:	f024 0307 	bic.w	r3, r4, #7
 8025442:	469b      	mov	fp, r3
 8025444:	685d      	ldr	r5, [r3, #4]
 8025446:	f85b 4b08 	ldr.w	r4, [fp], #8
 802544a:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 802544e:	2300      	movs	r3, #0
 8025450:	2200      	movs	r2, #0
 8025452:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 8025456:	9a00      	ldr	r2, [sp, #0]
 8025458:	3201      	adds	r2, #1
 802545a:	f000 8262 	beq.w	8025922 <_vfiprintf_r+0x8ce>
 802545e:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 8025462:	9204      	str	r2, [sp, #16]
 8025464:	ea54 0205 	orrs.w	r2, r4, r5
 8025468:	f040 8261 	bne.w	802592e <_vfiprintf_r+0x8da>
 802546c:	9a00      	ldr	r2, [sp, #0]
 802546e:	2a00      	cmp	r2, #0
 8025470:	f000 8199 	beq.w	80257a6 <_vfiprintf_r+0x752>
 8025474:	2b01      	cmp	r3, #1
 8025476:	f040 825d 	bne.w	8025934 <_vfiprintf_r+0x8e0>
 802547a:	e139      	b.n	80256f0 <_vfiprintf_r+0x69c>
 802547c:	46a3      	mov	fp, r4
 802547e:	f01a 0510 	ands.w	r5, sl, #16
 8025482:	f85b 4b04 	ldr.w	r4, [fp], #4
 8025486:	d001      	beq.n	802548c <_vfiprintf_r+0x438>
 8025488:	461d      	mov	r5, r3
 802548a:	e7de      	b.n	802544a <_vfiprintf_r+0x3f6>
 802548c:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 8025490:	d001      	beq.n	8025496 <_vfiprintf_r+0x442>
 8025492:	b2a4      	uxth	r4, r4
 8025494:	e7d9      	b.n	802544a <_vfiprintf_r+0x3f6>
 8025496:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 802549a:	d0d6      	beq.n	802544a <_vfiprintf_r+0x3f6>
 802549c:	b2e4      	uxtb	r4, r4
 802549e:	e7f3      	b.n	8025488 <_vfiprintf_r+0x434>
 80254a0:	2330      	movs	r3, #48	; 0x30
 80254a2:	46a3      	mov	fp, r4
 80254a4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80254a8:	2378      	movs	r3, #120	; 0x78
 80254aa:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 80254ae:	f85b 4b04 	ldr.w	r4, [fp], #4
 80254b2:	4b03      	ldr	r3, [pc, #12]	; (80254c0 <_vfiprintf_r+0x46c>)
 80254b4:	9305      	str	r3, [sp, #20]
 80254b6:	2500      	movs	r5, #0
 80254b8:	f04a 0a02 	orr.w	sl, sl, #2
 80254bc:	2302      	movs	r3, #2
 80254be:	e7c7      	b.n	8025450 <_vfiprintf_r+0x3fc>
 80254c0:	08071a10 	.word	0x08071a10
 80254c4:	9b00      	ldr	r3, [sp, #0]
 80254c6:	46a3      	mov	fp, r4
 80254c8:	2500      	movs	r5, #0
 80254ca:	1c5c      	adds	r4, r3, #1
 80254cc:	f85b 8b04 	ldr.w	r8, [fp], #4
 80254d0:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80254d4:	f000 80ce 	beq.w	8025674 <_vfiprintf_r+0x620>
 80254d8:	461a      	mov	r2, r3
 80254da:	4629      	mov	r1, r5
 80254dc:	4640      	mov	r0, r8
 80254de:	f7da fe8f 	bl	8000200 <memchr>
 80254e2:	2800      	cmp	r0, #0
 80254e4:	f000 8174 	beq.w	80257d0 <_vfiprintf_r+0x77c>
 80254e8:	eba0 0308 	sub.w	r3, r0, r8
 80254ec:	9300      	str	r3, [sp, #0]
 80254ee:	9b00      	ldr	r3, [sp, #0]
 80254f0:	42ab      	cmp	r3, r5
 80254f2:	bfb8      	it	lt
 80254f4:	462b      	movlt	r3, r5
 80254f6:	9304      	str	r3, [sp, #16]
 80254f8:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 80254fc:	b113      	cbz	r3, 8025504 <_vfiprintf_r+0x4b0>
 80254fe:	9b04      	ldr	r3, [sp, #16]
 8025500:	3301      	adds	r3, #1
 8025502:	9304      	str	r3, [sp, #16]
 8025504:	f01a 0302 	ands.w	r3, sl, #2
 8025508:	9308      	str	r3, [sp, #32]
 802550a:	bf1e      	ittt	ne
 802550c:	9b04      	ldrne	r3, [sp, #16]
 802550e:	3302      	addne	r3, #2
 8025510:	9304      	strne	r3, [sp, #16]
 8025512:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8025516:	9309      	str	r3, [sp, #36]	; 0x24
 8025518:	d11f      	bne.n	802555a <_vfiprintf_r+0x506>
 802551a:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 802551e:	1a9c      	subs	r4, r3, r2
 8025520:	2c00      	cmp	r4, #0
 8025522:	dd1a      	ble.n	802555a <_vfiprintf_r+0x506>
 8025524:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8025528:	48aa      	ldr	r0, [pc, #680]	; (80257d4 <_vfiprintf_r+0x780>)
 802552a:	6030      	str	r0, [r6, #0]
 802552c:	2c10      	cmp	r4, #16
 802552e:	f103 0301 	add.w	r3, r3, #1
 8025532:	f106 0108 	add.w	r1, r6, #8
 8025536:	f300 8153 	bgt.w	80257e0 <_vfiprintf_r+0x78c>
 802553a:	6074      	str	r4, [r6, #4]
 802553c:	2b07      	cmp	r3, #7
 802553e:	4414      	add	r4, r2
 8025540:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8025544:	f340 815e 	ble.w	8025804 <_vfiprintf_r+0x7b0>
 8025548:	aa0c      	add	r2, sp, #48	; 0x30
 802554a:	4639      	mov	r1, r7
 802554c:	4648      	mov	r0, r9
 802554e:	f7ff fd4f 	bl	8024ff0 <__sprint_r>
 8025552:	2800      	cmp	r0, #0
 8025554:	f040 81b7 	bne.w	80258c6 <_vfiprintf_r+0x872>
 8025558:	ae0f      	add	r6, sp, #60	; 0x3c
 802555a:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 802555e:	b173      	cbz	r3, 802557e <_vfiprintf_r+0x52a>
 8025560:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 8025564:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025566:	6032      	str	r2, [r6, #0]
 8025568:	2201      	movs	r2, #1
 802556a:	6072      	str	r2, [r6, #4]
 802556c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802556e:	3301      	adds	r3, #1
 8025570:	3201      	adds	r2, #1
 8025572:	2b07      	cmp	r3, #7
 8025574:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8025578:	f300 8146 	bgt.w	8025808 <_vfiprintf_r+0x7b4>
 802557c:	3608      	adds	r6, #8
 802557e:	9b08      	ldr	r3, [sp, #32]
 8025580:	b16b      	cbz	r3, 802559e <_vfiprintf_r+0x54a>
 8025582:	aa0b      	add	r2, sp, #44	; 0x2c
 8025584:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025586:	6032      	str	r2, [r6, #0]
 8025588:	2202      	movs	r2, #2
 802558a:	6072      	str	r2, [r6, #4]
 802558c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802558e:	3301      	adds	r3, #1
 8025590:	3202      	adds	r2, #2
 8025592:	2b07      	cmp	r3, #7
 8025594:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8025598:	f300 813f 	bgt.w	802581a <_vfiprintf_r+0x7c6>
 802559c:	3608      	adds	r6, #8
 802559e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80255a0:	2b80      	cmp	r3, #128	; 0x80
 80255a2:	d11f      	bne.n	80255e4 <_vfiprintf_r+0x590>
 80255a4:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80255a8:	1a9c      	subs	r4, r3, r2
 80255aa:	2c00      	cmp	r4, #0
 80255ac:	dd1a      	ble.n	80255e4 <_vfiprintf_r+0x590>
 80255ae:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80255b2:	4889      	ldr	r0, [pc, #548]	; (80257d8 <_vfiprintf_r+0x784>)
 80255b4:	6030      	str	r0, [r6, #0]
 80255b6:	2c10      	cmp	r4, #16
 80255b8:	f103 0301 	add.w	r3, r3, #1
 80255bc:	f106 0108 	add.w	r1, r6, #8
 80255c0:	f300 8134 	bgt.w	802582c <_vfiprintf_r+0x7d8>
 80255c4:	6074      	str	r4, [r6, #4]
 80255c6:	2b07      	cmp	r3, #7
 80255c8:	4414      	add	r4, r2
 80255ca:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 80255ce:	f340 813f 	ble.w	8025850 <_vfiprintf_r+0x7fc>
 80255d2:	aa0c      	add	r2, sp, #48	; 0x30
 80255d4:	4639      	mov	r1, r7
 80255d6:	4648      	mov	r0, r9
 80255d8:	f7ff fd0a 	bl	8024ff0 <__sprint_r>
 80255dc:	2800      	cmp	r0, #0
 80255de:	f040 8172 	bne.w	80258c6 <_vfiprintf_r+0x872>
 80255e2:	ae0f      	add	r6, sp, #60	; 0x3c
 80255e4:	9b00      	ldr	r3, [sp, #0]
 80255e6:	1aec      	subs	r4, r5, r3
 80255e8:	2c00      	cmp	r4, #0
 80255ea:	dd1a      	ble.n	8025622 <_vfiprintf_r+0x5ce>
 80255ec:	4d7a      	ldr	r5, [pc, #488]	; (80257d8 <_vfiprintf_r+0x784>)
 80255ee:	6035      	str	r5, [r6, #0]
 80255f0:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 80255f4:	2c10      	cmp	r4, #16
 80255f6:	f103 0301 	add.w	r3, r3, #1
 80255fa:	f106 0208 	add.w	r2, r6, #8
 80255fe:	f300 8129 	bgt.w	8025854 <_vfiprintf_r+0x800>
 8025602:	6074      	str	r4, [r6, #4]
 8025604:	2b07      	cmp	r3, #7
 8025606:	440c      	add	r4, r1
 8025608:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 802560c:	f340 8133 	ble.w	8025876 <_vfiprintf_r+0x822>
 8025610:	aa0c      	add	r2, sp, #48	; 0x30
 8025612:	4639      	mov	r1, r7
 8025614:	4648      	mov	r0, r9
 8025616:	f7ff fceb 	bl	8024ff0 <__sprint_r>
 802561a:	2800      	cmp	r0, #0
 802561c:	f040 8153 	bne.w	80258c6 <_vfiprintf_r+0x872>
 8025620:	ae0f      	add	r6, sp, #60	; 0x3c
 8025622:	9b00      	ldr	r3, [sp, #0]
 8025624:	980e      	ldr	r0, [sp, #56]	; 0x38
 8025626:	6073      	str	r3, [r6, #4]
 8025628:	4418      	add	r0, r3
 802562a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802562c:	f8c6 8000 	str.w	r8, [r6]
 8025630:	3301      	adds	r3, #1
 8025632:	2b07      	cmp	r3, #7
 8025634:	900e      	str	r0, [sp, #56]	; 0x38
 8025636:	930d      	str	r3, [sp, #52]	; 0x34
 8025638:	f300 811f 	bgt.w	802587a <_vfiprintf_r+0x826>
 802563c:	f106 0308 	add.w	r3, r6, #8
 8025640:	f01a 0f04 	tst.w	sl, #4
 8025644:	f040 8121 	bne.w	802588a <_vfiprintf_r+0x836>
 8025648:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 802564c:	9904      	ldr	r1, [sp, #16]
 802564e:	428a      	cmp	r2, r1
 8025650:	bfac      	ite	ge
 8025652:	189b      	addge	r3, r3, r2
 8025654:	185b      	addlt	r3, r3, r1
 8025656:	9302      	str	r3, [sp, #8]
 8025658:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802565a:	b13b      	cbz	r3, 802566c <_vfiprintf_r+0x618>
 802565c:	aa0c      	add	r2, sp, #48	; 0x30
 802565e:	4639      	mov	r1, r7
 8025660:	4648      	mov	r0, r9
 8025662:	f7ff fcc5 	bl	8024ff0 <__sprint_r>
 8025666:	2800      	cmp	r0, #0
 8025668:	f040 812d 	bne.w	80258c6 <_vfiprintf_r+0x872>
 802566c:	2300      	movs	r3, #0
 802566e:	930d      	str	r3, [sp, #52]	; 0x34
 8025670:	ae0f      	add	r6, sp, #60	; 0x3c
 8025672:	e6c7      	b.n	8025404 <_vfiprintf_r+0x3b0>
 8025674:	4640      	mov	r0, r8
 8025676:	f7da fdbb 	bl	80001f0 <strlen>
 802567a:	9000      	str	r0, [sp, #0]
 802567c:	e737      	b.n	80254ee <_vfiprintf_r+0x49a>
 802567e:	f04a 0a10 	orr.w	sl, sl, #16
 8025682:	f01a 0320 	ands.w	r3, sl, #32
 8025686:	d008      	beq.n	802569a <_vfiprintf_r+0x646>
 8025688:	3407      	adds	r4, #7
 802568a:	f024 0307 	bic.w	r3, r4, #7
 802568e:	469b      	mov	fp, r3
 8025690:	685d      	ldr	r5, [r3, #4]
 8025692:	f85b 4b08 	ldr.w	r4, [fp], #8
 8025696:	2301      	movs	r3, #1
 8025698:	e6da      	b.n	8025450 <_vfiprintf_r+0x3fc>
 802569a:	46a3      	mov	fp, r4
 802569c:	f01a 0510 	ands.w	r5, sl, #16
 80256a0:	f85b 4b04 	ldr.w	r4, [fp], #4
 80256a4:	d001      	beq.n	80256aa <_vfiprintf_r+0x656>
 80256a6:	461d      	mov	r5, r3
 80256a8:	e7f5      	b.n	8025696 <_vfiprintf_r+0x642>
 80256aa:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 80256ae:	d001      	beq.n	80256b4 <_vfiprintf_r+0x660>
 80256b0:	b2a4      	uxth	r4, r4
 80256b2:	e7f0      	b.n	8025696 <_vfiprintf_r+0x642>
 80256b4:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 80256b8:	d0ed      	beq.n	8025696 <_vfiprintf_r+0x642>
 80256ba:	b2e4      	uxtb	r4, r4
 80256bc:	e7f3      	b.n	80256a6 <_vfiprintf_r+0x652>
 80256be:	4a47      	ldr	r2, [pc, #284]	; (80257dc <_vfiprintf_r+0x788>)
 80256c0:	e5c5      	b.n	802524e <_vfiprintf_r+0x1fa>
 80256c2:	46a3      	mov	fp, r4
 80256c4:	f01a 0510 	ands.w	r5, sl, #16
 80256c8:	f85b 4b04 	ldr.w	r4, [fp], #4
 80256cc:	d001      	beq.n	80256d2 <_vfiprintf_r+0x67e>
 80256ce:	4615      	mov	r5, r2
 80256d0:	e5c9      	b.n	8025266 <_vfiprintf_r+0x212>
 80256d2:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 80256d6:	d001      	beq.n	80256dc <_vfiprintf_r+0x688>
 80256d8:	b2a4      	uxth	r4, r4
 80256da:	e5c4      	b.n	8025266 <_vfiprintf_r+0x212>
 80256dc:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 80256e0:	f43f adc1 	beq.w	8025266 <_vfiprintf_r+0x212>
 80256e4:	b2e4      	uxtb	r4, r4
 80256e6:	e7f2      	b.n	80256ce <_vfiprintf_r+0x67a>
 80256e8:	2c0a      	cmp	r4, #10
 80256ea:	f175 0300 	sbcs.w	r3, r5, #0
 80256ee:	d205      	bcs.n	80256fc <_vfiprintf_r+0x6a8>
 80256f0:	3430      	adds	r4, #48	; 0x30
 80256f2:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 80256f6:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 80256fa:	e137      	b.n	802596c <_vfiprintf_r+0x918>
 80256fc:	ab38      	add	r3, sp, #224	; 0xe0
 80256fe:	9308      	str	r3, [sp, #32]
 8025700:	9b04      	ldr	r3, [sp, #16]
 8025702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8025706:	f04f 0a00 	mov.w	sl, #0
 802570a:	9309      	str	r3, [sp, #36]	; 0x24
 802570c:	9b08      	ldr	r3, [sp, #32]
 802570e:	220a      	movs	r2, #10
 8025710:	f103 38ff 	add.w	r8, r3, #4294967295
 8025714:	4620      	mov	r0, r4
 8025716:	2300      	movs	r3, #0
 8025718:	4629      	mov	r1, r5
 802571a:	f7db faa5 	bl	8000c68 <__aeabi_uldivmod>
 802571e:	9b08      	ldr	r3, [sp, #32]
 8025720:	3230      	adds	r2, #48	; 0x30
 8025722:	f803 2c01 	strb.w	r2, [r3, #-1]
 8025726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025728:	f10a 0a01 	add.w	sl, sl, #1
 802572c:	b1db      	cbz	r3, 8025766 <_vfiprintf_r+0x712>
 802572e:	9b06      	ldr	r3, [sp, #24]
 8025730:	781b      	ldrb	r3, [r3, #0]
 8025732:	4553      	cmp	r3, sl
 8025734:	d117      	bne.n	8025766 <_vfiprintf_r+0x712>
 8025736:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802573a:	d014      	beq.n	8025766 <_vfiprintf_r+0x712>
 802573c:	2c0a      	cmp	r4, #10
 802573e:	f175 0300 	sbcs.w	r3, r5, #0
 8025742:	d310      	bcc.n	8025766 <_vfiprintf_r+0x712>
 8025744:	9b07      	ldr	r3, [sp, #28]
 8025746:	eba8 0803 	sub.w	r8, r8, r3
 802574a:	461a      	mov	r2, r3
 802574c:	ee18 1a10 	vmov	r1, s16
 8025750:	4640      	mov	r0, r8
 8025752:	f7ff fbb2 	bl	8024eba <strncpy>
 8025756:	9b06      	ldr	r3, [sp, #24]
 8025758:	785b      	ldrb	r3, [r3, #1]
 802575a:	b1a3      	cbz	r3, 8025786 <_vfiprintf_r+0x732>
 802575c:	9b06      	ldr	r3, [sp, #24]
 802575e:	3301      	adds	r3, #1
 8025760:	9306      	str	r3, [sp, #24]
 8025762:	f04f 0a00 	mov.w	sl, #0
 8025766:	2300      	movs	r3, #0
 8025768:	220a      	movs	r2, #10
 802576a:	4620      	mov	r0, r4
 802576c:	4629      	mov	r1, r5
 802576e:	f7db fa7b 	bl	8000c68 <__aeabi_uldivmod>
 8025772:	2c0a      	cmp	r4, #10
 8025774:	f175 0300 	sbcs.w	r3, r5, #0
 8025778:	f0c0 80f8 	bcc.w	802596c <_vfiprintf_r+0x918>
 802577c:	4604      	mov	r4, r0
 802577e:	460d      	mov	r5, r1
 8025780:	f8cd 8020 	str.w	r8, [sp, #32]
 8025784:	e7c2      	b.n	802570c <_vfiprintf_r+0x6b8>
 8025786:	469a      	mov	sl, r3
 8025788:	e7ed      	b.n	8025766 <_vfiprintf_r+0x712>
 802578a:	f004 030f 	and.w	r3, r4, #15
 802578e:	9a05      	ldr	r2, [sp, #20]
 8025790:	0924      	lsrs	r4, r4, #4
 8025792:	5cd3      	ldrb	r3, [r2, r3]
 8025794:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8025798:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 802579c:	092d      	lsrs	r5, r5, #4
 802579e:	ea54 0305 	orrs.w	r3, r4, r5
 80257a2:	d1f2      	bne.n	802578a <_vfiprintf_r+0x736>
 80257a4:	e0e2      	b.n	802596c <_vfiprintf_r+0x918>
 80257a6:	b933      	cbnz	r3, 80257b6 <_vfiprintf_r+0x762>
 80257a8:	f01a 0f01 	tst.w	sl, #1
 80257ac:	d003      	beq.n	80257b6 <_vfiprintf_r+0x762>
 80257ae:	2330      	movs	r3, #48	; 0x30
 80257b0:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 80257b4:	e79f      	b.n	80256f6 <_vfiprintf_r+0x6a2>
 80257b6:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 80257ba:	e0d7      	b.n	802596c <_vfiprintf_r+0x918>
 80257bc:	2b00      	cmp	r3, #0
 80257be:	f000 80a3 	beq.w	8025908 <_vfiprintf_r+0x8b4>
 80257c2:	2100      	movs	r1, #0
 80257c4:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 80257c8:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 80257cc:	46a3      	mov	fp, r4
 80257ce:	e5da      	b.n	8025386 <_vfiprintf_r+0x332>
 80257d0:	4605      	mov	r5, r0
 80257d2:	e68c      	b.n	80254ee <_vfiprintf_r+0x49a>
 80257d4:	08071c4c 	.word	0x08071c4c
 80257d8:	08071c5c 	.word	0x08071c5c
 80257dc:	08071a21 	.word	0x08071a21
 80257e0:	2010      	movs	r0, #16
 80257e2:	4402      	add	r2, r0
 80257e4:	2b07      	cmp	r3, #7
 80257e6:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 80257ea:	6070      	str	r0, [r6, #4]
 80257ec:	dd07      	ble.n	80257fe <_vfiprintf_r+0x7aa>
 80257ee:	aa0c      	add	r2, sp, #48	; 0x30
 80257f0:	4639      	mov	r1, r7
 80257f2:	4648      	mov	r0, r9
 80257f4:	f7ff fbfc 	bl	8024ff0 <__sprint_r>
 80257f8:	2800      	cmp	r0, #0
 80257fa:	d164      	bne.n	80258c6 <_vfiprintf_r+0x872>
 80257fc:	a90f      	add	r1, sp, #60	; 0x3c
 80257fe:	3c10      	subs	r4, #16
 8025800:	460e      	mov	r6, r1
 8025802:	e68f      	b.n	8025524 <_vfiprintf_r+0x4d0>
 8025804:	460e      	mov	r6, r1
 8025806:	e6a8      	b.n	802555a <_vfiprintf_r+0x506>
 8025808:	aa0c      	add	r2, sp, #48	; 0x30
 802580a:	4639      	mov	r1, r7
 802580c:	4648      	mov	r0, r9
 802580e:	f7ff fbef 	bl	8024ff0 <__sprint_r>
 8025812:	2800      	cmp	r0, #0
 8025814:	d157      	bne.n	80258c6 <_vfiprintf_r+0x872>
 8025816:	ae0f      	add	r6, sp, #60	; 0x3c
 8025818:	e6b1      	b.n	802557e <_vfiprintf_r+0x52a>
 802581a:	aa0c      	add	r2, sp, #48	; 0x30
 802581c:	4639      	mov	r1, r7
 802581e:	4648      	mov	r0, r9
 8025820:	f7ff fbe6 	bl	8024ff0 <__sprint_r>
 8025824:	2800      	cmp	r0, #0
 8025826:	d14e      	bne.n	80258c6 <_vfiprintf_r+0x872>
 8025828:	ae0f      	add	r6, sp, #60	; 0x3c
 802582a:	e6b8      	b.n	802559e <_vfiprintf_r+0x54a>
 802582c:	2010      	movs	r0, #16
 802582e:	4402      	add	r2, r0
 8025830:	2b07      	cmp	r3, #7
 8025832:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8025836:	6070      	str	r0, [r6, #4]
 8025838:	dd07      	ble.n	802584a <_vfiprintf_r+0x7f6>
 802583a:	aa0c      	add	r2, sp, #48	; 0x30
 802583c:	4639      	mov	r1, r7
 802583e:	4648      	mov	r0, r9
 8025840:	f7ff fbd6 	bl	8024ff0 <__sprint_r>
 8025844:	2800      	cmp	r0, #0
 8025846:	d13e      	bne.n	80258c6 <_vfiprintf_r+0x872>
 8025848:	a90f      	add	r1, sp, #60	; 0x3c
 802584a:	3c10      	subs	r4, #16
 802584c:	460e      	mov	r6, r1
 802584e:	e6ae      	b.n	80255ae <_vfiprintf_r+0x55a>
 8025850:	460e      	mov	r6, r1
 8025852:	e6c7      	b.n	80255e4 <_vfiprintf_r+0x590>
 8025854:	2010      	movs	r0, #16
 8025856:	4401      	add	r1, r0
 8025858:	2b07      	cmp	r3, #7
 802585a:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 802585e:	6070      	str	r0, [r6, #4]
 8025860:	dd06      	ble.n	8025870 <_vfiprintf_r+0x81c>
 8025862:	aa0c      	add	r2, sp, #48	; 0x30
 8025864:	4639      	mov	r1, r7
 8025866:	4648      	mov	r0, r9
 8025868:	f7ff fbc2 	bl	8024ff0 <__sprint_r>
 802586c:	bb58      	cbnz	r0, 80258c6 <_vfiprintf_r+0x872>
 802586e:	aa0f      	add	r2, sp, #60	; 0x3c
 8025870:	3c10      	subs	r4, #16
 8025872:	4616      	mov	r6, r2
 8025874:	e6bb      	b.n	80255ee <_vfiprintf_r+0x59a>
 8025876:	4616      	mov	r6, r2
 8025878:	e6d3      	b.n	8025622 <_vfiprintf_r+0x5ce>
 802587a:	aa0c      	add	r2, sp, #48	; 0x30
 802587c:	4639      	mov	r1, r7
 802587e:	4648      	mov	r0, r9
 8025880:	f7ff fbb6 	bl	8024ff0 <__sprint_r>
 8025884:	b9f8      	cbnz	r0, 80258c6 <_vfiprintf_r+0x872>
 8025886:	ab0f      	add	r3, sp, #60	; 0x3c
 8025888:	e6da      	b.n	8025640 <_vfiprintf_r+0x5ec>
 802588a:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 802588e:	1a54      	subs	r4, r2, r1
 8025890:	2c00      	cmp	r4, #0
 8025892:	f77f aed9 	ble.w	8025648 <_vfiprintf_r+0x5f4>
 8025896:	4d39      	ldr	r5, [pc, #228]	; (802597c <_vfiprintf_r+0x928>)
 8025898:	2610      	movs	r6, #16
 802589a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 802589e:	2c10      	cmp	r4, #16
 80258a0:	f102 0201 	add.w	r2, r2, #1
 80258a4:	601d      	str	r5, [r3, #0]
 80258a6:	dc1d      	bgt.n	80258e4 <_vfiprintf_r+0x890>
 80258a8:	605c      	str	r4, [r3, #4]
 80258aa:	2a07      	cmp	r2, #7
 80258ac:	440c      	add	r4, r1
 80258ae:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 80258b2:	f77f aec9 	ble.w	8025648 <_vfiprintf_r+0x5f4>
 80258b6:	aa0c      	add	r2, sp, #48	; 0x30
 80258b8:	4639      	mov	r1, r7
 80258ba:	4648      	mov	r0, r9
 80258bc:	f7ff fb98 	bl	8024ff0 <__sprint_r>
 80258c0:	2800      	cmp	r0, #0
 80258c2:	f43f aec1 	beq.w	8025648 <_vfiprintf_r+0x5f4>
 80258c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80258c8:	07d9      	lsls	r1, r3, #31
 80258ca:	d405      	bmi.n	80258d8 <_vfiprintf_r+0x884>
 80258cc:	89bb      	ldrh	r3, [r7, #12]
 80258ce:	059a      	lsls	r2, r3, #22
 80258d0:	d402      	bmi.n	80258d8 <_vfiprintf_r+0x884>
 80258d2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80258d4:	f7fe fad7 	bl	8023e86 <__retarget_lock_release_recursive>
 80258d8:	89bb      	ldrh	r3, [r7, #12]
 80258da:	065b      	lsls	r3, r3, #25
 80258dc:	f57f abed 	bpl.w	80250ba <_vfiprintf_r+0x66>
 80258e0:	f7ff bbe8 	b.w	80250b4 <_vfiprintf_r+0x60>
 80258e4:	3110      	adds	r1, #16
 80258e6:	2a07      	cmp	r2, #7
 80258e8:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 80258ec:	605e      	str	r6, [r3, #4]
 80258ee:	dc02      	bgt.n	80258f6 <_vfiprintf_r+0x8a2>
 80258f0:	3308      	adds	r3, #8
 80258f2:	3c10      	subs	r4, #16
 80258f4:	e7d1      	b.n	802589a <_vfiprintf_r+0x846>
 80258f6:	aa0c      	add	r2, sp, #48	; 0x30
 80258f8:	4639      	mov	r1, r7
 80258fa:	4648      	mov	r0, r9
 80258fc:	f7ff fb78 	bl	8024ff0 <__sprint_r>
 8025900:	2800      	cmp	r0, #0
 8025902:	d1e0      	bne.n	80258c6 <_vfiprintf_r+0x872>
 8025904:	ab0f      	add	r3, sp, #60	; 0x3c
 8025906:	e7f4      	b.n	80258f2 <_vfiprintf_r+0x89e>
 8025908:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802590a:	b913      	cbnz	r3, 8025912 <_vfiprintf_r+0x8be>
 802590c:	2300      	movs	r3, #0
 802590e:	930d      	str	r3, [sp, #52]	; 0x34
 8025910:	e7d9      	b.n	80258c6 <_vfiprintf_r+0x872>
 8025912:	aa0c      	add	r2, sp, #48	; 0x30
 8025914:	4639      	mov	r1, r7
 8025916:	4648      	mov	r0, r9
 8025918:	f7ff fb6a 	bl	8024ff0 <__sprint_r>
 802591c:	2800      	cmp	r0, #0
 802591e:	d0f5      	beq.n	802590c <_vfiprintf_r+0x8b8>
 8025920:	e7d1      	b.n	80258c6 <_vfiprintf_r+0x872>
 8025922:	ea54 0205 	orrs.w	r2, r4, r5
 8025926:	f8cd a010 	str.w	sl, [sp, #16]
 802592a:	f43f ada3 	beq.w	8025474 <_vfiprintf_r+0x420>
 802592e:	2b01      	cmp	r3, #1
 8025930:	f43f aeda 	beq.w	80256e8 <_vfiprintf_r+0x694>
 8025934:	2b02      	cmp	r3, #2
 8025936:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 802593a:	f43f af26 	beq.w	802578a <_vfiprintf_r+0x736>
 802593e:	f004 0307 	and.w	r3, r4, #7
 8025942:	08e4      	lsrs	r4, r4, #3
 8025944:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8025948:	08ed      	lsrs	r5, r5, #3
 802594a:	3330      	adds	r3, #48	; 0x30
 802594c:	ea54 0105 	orrs.w	r1, r4, r5
 8025950:	4642      	mov	r2, r8
 8025952:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8025956:	d1f2      	bne.n	802593e <_vfiprintf_r+0x8ea>
 8025958:	9904      	ldr	r1, [sp, #16]
 802595a:	07c8      	lsls	r0, r1, #31
 802595c:	d506      	bpl.n	802596c <_vfiprintf_r+0x918>
 802595e:	2b30      	cmp	r3, #48	; 0x30
 8025960:	d004      	beq.n	802596c <_vfiprintf_r+0x918>
 8025962:	2330      	movs	r3, #48	; 0x30
 8025964:	f808 3c01 	strb.w	r3, [r8, #-1]
 8025968:	f1a2 0802 	sub.w	r8, r2, #2
 802596c:	ab38      	add	r3, sp, #224	; 0xe0
 802596e:	eba3 0308 	sub.w	r3, r3, r8
 8025972:	9d00      	ldr	r5, [sp, #0]
 8025974:	f8dd a010 	ldr.w	sl, [sp, #16]
 8025978:	9300      	str	r3, [sp, #0]
 802597a:	e5b8      	b.n	80254ee <_vfiprintf_r+0x49a>
 802597c:	08071c4c 	.word	0x08071c4c

08025980 <__sbprintf>:
 8025980:	b570      	push	{r4, r5, r6, lr}
 8025982:	460c      	mov	r4, r1
 8025984:	8989      	ldrh	r1, [r1, #12]
 8025986:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 802598a:	f021 0102 	bic.w	r1, r1, #2
 802598e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8025992:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8025994:	911b      	str	r1, [sp, #108]	; 0x6c
 8025996:	89e1      	ldrh	r1, [r4, #14]
 8025998:	f8ad 1016 	strh.w	r1, [sp, #22]
 802599c:	69e1      	ldr	r1, [r4, #28]
 802599e:	9109      	str	r1, [sp, #36]	; 0x24
 80259a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80259a2:	910b      	str	r1, [sp, #44]	; 0x2c
 80259a4:	a91c      	add	r1, sp, #112	; 0x70
 80259a6:	9102      	str	r1, [sp, #8]
 80259a8:	9106      	str	r1, [sp, #24]
 80259aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80259ae:	4606      	mov	r6, r0
 80259b0:	9104      	str	r1, [sp, #16]
 80259b2:	9107      	str	r1, [sp, #28]
 80259b4:	a818      	add	r0, sp, #96	; 0x60
 80259b6:	2100      	movs	r1, #0
 80259b8:	e9cd 3200 	strd	r3, r2, [sp]
 80259bc:	9108      	str	r1, [sp, #32]
 80259be:	f7fe fa5f 	bl	8023e80 <__retarget_lock_init_recursive>
 80259c2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80259c6:	a902      	add	r1, sp, #8
 80259c8:	4630      	mov	r0, r6
 80259ca:	f7ff fb43 	bl	8025054 <_vfiprintf_r>
 80259ce:	1e05      	subs	r5, r0, #0
 80259d0:	db07      	blt.n	80259e2 <__sbprintf+0x62>
 80259d2:	a902      	add	r1, sp, #8
 80259d4:	4630      	mov	r0, r6
 80259d6:	f7fd ff29 	bl	802382c <_fflush_r>
 80259da:	2800      	cmp	r0, #0
 80259dc:	bf18      	it	ne
 80259de:	f04f 35ff 	movne.w	r5, #4294967295
 80259e2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80259e6:	9818      	ldr	r0, [sp, #96]	; 0x60
 80259e8:	065b      	lsls	r3, r3, #25
 80259ea:	bf42      	ittt	mi
 80259ec:	89a3      	ldrhmi	r3, [r4, #12]
 80259ee:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80259f2:	81a3      	strhmi	r3, [r4, #12]
 80259f4:	f7fe fa45 	bl	8023e82 <__retarget_lock_close_recursive>
 80259f8:	4628      	mov	r0, r5
 80259fa:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 80259fe:	bd70      	pop	{r4, r5, r6, pc}

08025a00 <_write_r>:
 8025a00:	b538      	push	{r3, r4, r5, lr}
 8025a02:	4d07      	ldr	r5, [pc, #28]	; (8025a20 <_write_r+0x20>)
 8025a04:	4604      	mov	r4, r0
 8025a06:	4608      	mov	r0, r1
 8025a08:	4611      	mov	r1, r2
 8025a0a:	2200      	movs	r2, #0
 8025a0c:	602a      	str	r2, [r5, #0]
 8025a0e:	461a      	mov	r2, r3
 8025a10:	f7dd f8e9 	bl	8002be6 <_write>
 8025a14:	1c43      	adds	r3, r0, #1
 8025a16:	d102      	bne.n	8025a1e <_write_r+0x1e>
 8025a18:	682b      	ldr	r3, [r5, #0]
 8025a1a:	b103      	cbz	r3, 8025a1e <_write_r+0x1e>
 8025a1c:	6023      	str	r3, [r4, #0]
 8025a1e:	bd38      	pop	{r3, r4, r5, pc}
 8025a20:	200189f8 	.word	0x200189f8

08025a24 <__register_exitproc>:
 8025a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025a28:	f8df a078 	ldr.w	sl, [pc, #120]	; 8025aa4 <__register_exitproc+0x80>
 8025a2c:	4606      	mov	r6, r0
 8025a2e:	f8da 0000 	ldr.w	r0, [sl]
 8025a32:	4698      	mov	r8, r3
 8025a34:	460f      	mov	r7, r1
 8025a36:	4691      	mov	r9, r2
 8025a38:	f7fe fa24 	bl	8023e84 <__retarget_lock_acquire_recursive>
 8025a3c:	4b18      	ldr	r3, [pc, #96]	; (8025aa0 <__register_exitproc+0x7c>)
 8025a3e:	681b      	ldr	r3, [r3, #0]
 8025a40:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8025a44:	b91c      	cbnz	r4, 8025a4e <__register_exitproc+0x2a>
 8025a46:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8025a4a:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8025a4e:	6865      	ldr	r5, [r4, #4]
 8025a50:	f8da 0000 	ldr.w	r0, [sl]
 8025a54:	2d1f      	cmp	r5, #31
 8025a56:	dd05      	ble.n	8025a64 <__register_exitproc+0x40>
 8025a58:	f7fe fa15 	bl	8023e86 <__retarget_lock_release_recursive>
 8025a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8025a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025a64:	b19e      	cbz	r6, 8025a8e <__register_exitproc+0x6a>
 8025a66:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8025a6a:	2201      	movs	r2, #1
 8025a6c:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8025a70:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8025a74:	40aa      	lsls	r2, r5
 8025a76:	4313      	orrs	r3, r2
 8025a78:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8025a7c:	2e02      	cmp	r6, #2
 8025a7e:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8025a82:	bf02      	ittt	eq
 8025a84:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8025a88:	4313      	orreq	r3, r2
 8025a8a:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 8025a8e:	1c6b      	adds	r3, r5, #1
 8025a90:	3502      	adds	r5, #2
 8025a92:	6063      	str	r3, [r4, #4]
 8025a94:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8025a98:	f7fe f9f5 	bl	8023e86 <__retarget_lock_release_recursive>
 8025a9c:	2000      	movs	r0, #0
 8025a9e:	e7df      	b.n	8025a60 <__register_exitproc+0x3c>
 8025aa0:	080719fc 	.word	0x080719fc
 8025aa4:	20000448 	.word	0x20000448

08025aa8 <__assert_func>:
 8025aa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8025aaa:	4614      	mov	r4, r2
 8025aac:	461a      	mov	r2, r3
 8025aae:	4b09      	ldr	r3, [pc, #36]	; (8025ad4 <__assert_func+0x2c>)
 8025ab0:	681b      	ldr	r3, [r3, #0]
 8025ab2:	4605      	mov	r5, r0
 8025ab4:	68d8      	ldr	r0, [r3, #12]
 8025ab6:	b14c      	cbz	r4, 8025acc <__assert_func+0x24>
 8025ab8:	4b07      	ldr	r3, [pc, #28]	; (8025ad8 <__assert_func+0x30>)
 8025aba:	9100      	str	r1, [sp, #0]
 8025abc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8025ac0:	4906      	ldr	r1, [pc, #24]	; (8025adc <__assert_func+0x34>)
 8025ac2:	462b      	mov	r3, r5
 8025ac4:	f000 f8ac 	bl	8025c20 <fiprintf>
 8025ac8:	f000 f9f3 	bl	8025eb2 <abort>
 8025acc:	4b04      	ldr	r3, [pc, #16]	; (8025ae0 <__assert_func+0x38>)
 8025ace:	461c      	mov	r4, r3
 8025ad0:	e7f3      	b.n	8025aba <__assert_func+0x12>
 8025ad2:	bf00      	nop
 8025ad4:	2000001c 	.word	0x2000001c
 8025ad8:	08071c6c 	.word	0x08071c6c
 8025adc:	08071c79 	.word	0x08071c79
 8025ae0:	08071ca7 	.word	0x08071ca7

08025ae4 <_calloc_r>:
 8025ae4:	b538      	push	{r3, r4, r5, lr}
 8025ae6:	fba1 1502 	umull	r1, r5, r1, r2
 8025aea:	b92d      	cbnz	r5, 8025af8 <_calloc_r+0x14>
 8025aec:	f7fe fa38 	bl	8023f60 <_malloc_r>
 8025af0:	4604      	mov	r4, r0
 8025af2:	b938      	cbnz	r0, 8025b04 <_calloc_r+0x20>
 8025af4:	4620      	mov	r0, r4
 8025af6:	bd38      	pop	{r3, r4, r5, pc}
 8025af8:	f7fd fe04 	bl	8023704 <__errno>
 8025afc:	230c      	movs	r3, #12
 8025afe:	6003      	str	r3, [r0, #0]
 8025b00:	2400      	movs	r4, #0
 8025b02:	e7f7      	b.n	8025af4 <_calloc_r+0x10>
 8025b04:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8025b08:	f022 0203 	bic.w	r2, r2, #3
 8025b0c:	3a04      	subs	r2, #4
 8025b0e:	2a24      	cmp	r2, #36	; 0x24
 8025b10:	d819      	bhi.n	8025b46 <_calloc_r+0x62>
 8025b12:	2a13      	cmp	r2, #19
 8025b14:	d915      	bls.n	8025b42 <_calloc_r+0x5e>
 8025b16:	2a1b      	cmp	r2, #27
 8025b18:	e9c0 5500 	strd	r5, r5, [r0]
 8025b1c:	d806      	bhi.n	8025b2c <_calloc_r+0x48>
 8025b1e:	f100 0308 	add.w	r3, r0, #8
 8025b22:	2200      	movs	r2, #0
 8025b24:	e9c3 2200 	strd	r2, r2, [r3]
 8025b28:	609a      	str	r2, [r3, #8]
 8025b2a:	e7e3      	b.n	8025af4 <_calloc_r+0x10>
 8025b2c:	2a24      	cmp	r2, #36	; 0x24
 8025b2e:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8025b32:	bf11      	iteee	ne
 8025b34:	f100 0310 	addne.w	r3, r0, #16
 8025b38:	6105      	streq	r5, [r0, #16]
 8025b3a:	f100 0318 	addeq.w	r3, r0, #24
 8025b3e:	6145      	streq	r5, [r0, #20]
 8025b40:	e7ef      	b.n	8025b22 <_calloc_r+0x3e>
 8025b42:	4603      	mov	r3, r0
 8025b44:	e7ed      	b.n	8025b22 <_calloc_r+0x3e>
 8025b46:	4629      	mov	r1, r5
 8025b48:	f7fa fa04 	bl	801ff54 <memset>
 8025b4c:	e7d2      	b.n	8025af4 <_calloc_r+0x10>
	...

08025b50 <_close_r>:
 8025b50:	b538      	push	{r3, r4, r5, lr}
 8025b52:	4d06      	ldr	r5, [pc, #24]	; (8025b6c <_close_r+0x1c>)
 8025b54:	2300      	movs	r3, #0
 8025b56:	4604      	mov	r4, r0
 8025b58:	4608      	mov	r0, r1
 8025b5a:	602b      	str	r3, [r5, #0]
 8025b5c:	f7dd f85f 	bl	8002c1e <_close>
 8025b60:	1c43      	adds	r3, r0, #1
 8025b62:	d102      	bne.n	8025b6a <_close_r+0x1a>
 8025b64:	682b      	ldr	r3, [r5, #0]
 8025b66:	b103      	cbz	r3, 8025b6a <_close_r+0x1a>
 8025b68:	6023      	str	r3, [r4, #0]
 8025b6a:	bd38      	pop	{r3, r4, r5, pc}
 8025b6c:	200189f8 	.word	0x200189f8

08025b70 <_fclose_r>:
 8025b70:	b570      	push	{r4, r5, r6, lr}
 8025b72:	4606      	mov	r6, r0
 8025b74:	460c      	mov	r4, r1
 8025b76:	b911      	cbnz	r1, 8025b7e <_fclose_r+0xe>
 8025b78:	2500      	movs	r5, #0
 8025b7a:	4628      	mov	r0, r5
 8025b7c:	bd70      	pop	{r4, r5, r6, pc}
 8025b7e:	b118      	cbz	r0, 8025b88 <_fclose_r+0x18>
 8025b80:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8025b82:	b90b      	cbnz	r3, 8025b88 <_fclose_r+0x18>
 8025b84:	f7fd febe 	bl	8023904 <__sinit>
 8025b88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025b8a:	07d8      	lsls	r0, r3, #31
 8025b8c:	d405      	bmi.n	8025b9a <_fclose_r+0x2a>
 8025b8e:	89a3      	ldrh	r3, [r4, #12]
 8025b90:	0599      	lsls	r1, r3, #22
 8025b92:	d402      	bmi.n	8025b9a <_fclose_r+0x2a>
 8025b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025b96:	f7fe f975 	bl	8023e84 <__retarget_lock_acquire_recursive>
 8025b9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025b9e:	b93b      	cbnz	r3, 8025bb0 <_fclose_r+0x40>
 8025ba0:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8025ba2:	f015 0501 	ands.w	r5, r5, #1
 8025ba6:	d1e7      	bne.n	8025b78 <_fclose_r+0x8>
 8025ba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025baa:	f7fe f96c 	bl	8023e86 <__retarget_lock_release_recursive>
 8025bae:	e7e4      	b.n	8025b7a <_fclose_r+0xa>
 8025bb0:	4621      	mov	r1, r4
 8025bb2:	4630      	mov	r0, r6
 8025bb4:	f7fd fdac 	bl	8023710 <__sflush_r>
 8025bb8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8025bba:	4605      	mov	r5, r0
 8025bbc:	b133      	cbz	r3, 8025bcc <_fclose_r+0x5c>
 8025bbe:	69e1      	ldr	r1, [r4, #28]
 8025bc0:	4630      	mov	r0, r6
 8025bc2:	4798      	blx	r3
 8025bc4:	2800      	cmp	r0, #0
 8025bc6:	bfb8      	it	lt
 8025bc8:	f04f 35ff 	movlt.w	r5, #4294967295
 8025bcc:	89a3      	ldrh	r3, [r4, #12]
 8025bce:	061a      	lsls	r2, r3, #24
 8025bd0:	d503      	bpl.n	8025bda <_fclose_r+0x6a>
 8025bd2:	6921      	ldr	r1, [r4, #16]
 8025bd4:	4630      	mov	r0, r6
 8025bd6:	f7fd ff25 	bl	8023a24 <_free_r>
 8025bda:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8025bdc:	b141      	cbz	r1, 8025bf0 <_fclose_r+0x80>
 8025bde:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8025be2:	4299      	cmp	r1, r3
 8025be4:	d002      	beq.n	8025bec <_fclose_r+0x7c>
 8025be6:	4630      	mov	r0, r6
 8025be8:	f7fd ff1c 	bl	8023a24 <_free_r>
 8025bec:	2300      	movs	r3, #0
 8025bee:	6323      	str	r3, [r4, #48]	; 0x30
 8025bf0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8025bf2:	b121      	cbz	r1, 8025bfe <_fclose_r+0x8e>
 8025bf4:	4630      	mov	r0, r6
 8025bf6:	f7fd ff15 	bl	8023a24 <_free_r>
 8025bfa:	2300      	movs	r3, #0
 8025bfc:	6463      	str	r3, [r4, #68]	; 0x44
 8025bfe:	f7fd fe69 	bl	80238d4 <__sfp_lock_acquire>
 8025c02:	2300      	movs	r3, #0
 8025c04:	81a3      	strh	r3, [r4, #12]
 8025c06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025c08:	07db      	lsls	r3, r3, #31
 8025c0a:	d402      	bmi.n	8025c12 <_fclose_r+0xa2>
 8025c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025c0e:	f7fe f93a 	bl	8023e86 <__retarget_lock_release_recursive>
 8025c12:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025c14:	f7fe f935 	bl	8023e82 <__retarget_lock_close_recursive>
 8025c18:	f7fd fe62 	bl	80238e0 <__sfp_lock_release>
 8025c1c:	e7ad      	b.n	8025b7a <_fclose_r+0xa>
	...

08025c20 <fiprintf>:
 8025c20:	b40e      	push	{r1, r2, r3}
 8025c22:	b503      	push	{r0, r1, lr}
 8025c24:	4601      	mov	r1, r0
 8025c26:	ab03      	add	r3, sp, #12
 8025c28:	4805      	ldr	r0, [pc, #20]	; (8025c40 <fiprintf+0x20>)
 8025c2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8025c2e:	6800      	ldr	r0, [r0, #0]
 8025c30:	9301      	str	r3, [sp, #4]
 8025c32:	f7ff fa0f 	bl	8025054 <_vfiprintf_r>
 8025c36:	b002      	add	sp, #8
 8025c38:	f85d eb04 	ldr.w	lr, [sp], #4
 8025c3c:	b003      	add	sp, #12
 8025c3e:	4770      	bx	lr
 8025c40:	2000001c 	.word	0x2000001c

08025c44 <__fputwc>:
 8025c44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8025c48:	4680      	mov	r8, r0
 8025c4a:	460e      	mov	r6, r1
 8025c4c:	4615      	mov	r5, r2
 8025c4e:	f000 f887 	bl	8025d60 <__locale_mb_cur_max>
 8025c52:	2801      	cmp	r0, #1
 8025c54:	d11c      	bne.n	8025c90 <__fputwc+0x4c>
 8025c56:	1e73      	subs	r3, r6, #1
 8025c58:	2bfe      	cmp	r3, #254	; 0xfe
 8025c5a:	d819      	bhi.n	8025c90 <__fputwc+0x4c>
 8025c5c:	f88d 6004 	strb.w	r6, [sp, #4]
 8025c60:	4604      	mov	r4, r0
 8025c62:	2700      	movs	r7, #0
 8025c64:	f10d 0904 	add.w	r9, sp, #4
 8025c68:	42a7      	cmp	r7, r4
 8025c6a:	d020      	beq.n	8025cae <__fputwc+0x6a>
 8025c6c:	68ab      	ldr	r3, [r5, #8]
 8025c6e:	f817 1009 	ldrb.w	r1, [r7, r9]
 8025c72:	3b01      	subs	r3, #1
 8025c74:	2b00      	cmp	r3, #0
 8025c76:	60ab      	str	r3, [r5, #8]
 8025c78:	da04      	bge.n	8025c84 <__fputwc+0x40>
 8025c7a:	69aa      	ldr	r2, [r5, #24]
 8025c7c:	4293      	cmp	r3, r2
 8025c7e:	db1a      	blt.n	8025cb6 <__fputwc+0x72>
 8025c80:	290a      	cmp	r1, #10
 8025c82:	d018      	beq.n	8025cb6 <__fputwc+0x72>
 8025c84:	682b      	ldr	r3, [r5, #0]
 8025c86:	1c5a      	adds	r2, r3, #1
 8025c88:	602a      	str	r2, [r5, #0]
 8025c8a:	7019      	strb	r1, [r3, #0]
 8025c8c:	3701      	adds	r7, #1
 8025c8e:	e7eb      	b.n	8025c68 <__fputwc+0x24>
 8025c90:	a901      	add	r1, sp, #4
 8025c92:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 8025c96:	4632      	mov	r2, r6
 8025c98:	4640      	mov	r0, r8
 8025c9a:	f000 f8e7 	bl	8025e6c <_wcrtomb_r>
 8025c9e:	1c41      	adds	r1, r0, #1
 8025ca0:	4604      	mov	r4, r0
 8025ca2:	d1de      	bne.n	8025c62 <__fputwc+0x1e>
 8025ca4:	89ab      	ldrh	r3, [r5, #12]
 8025ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025caa:	81ab      	strh	r3, [r5, #12]
 8025cac:	4606      	mov	r6, r0
 8025cae:	4630      	mov	r0, r6
 8025cb0:	b003      	add	sp, #12
 8025cb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025cb6:	462a      	mov	r2, r5
 8025cb8:	4640      	mov	r0, r8
 8025cba:	f000 f88d 	bl	8025dd8 <__swbuf_r>
 8025cbe:	1c42      	adds	r2, r0, #1
 8025cc0:	d1e4      	bne.n	8025c8c <__fputwc+0x48>
 8025cc2:	4606      	mov	r6, r0
 8025cc4:	e7f3      	b.n	8025cae <__fputwc+0x6a>

08025cc6 <_fputwc_r>:
 8025cc6:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8025cc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8025cca:	4614      	mov	r4, r2
 8025ccc:	07da      	lsls	r2, r3, #31
 8025cce:	4605      	mov	r5, r0
 8025cd0:	d407      	bmi.n	8025ce2 <_fputwc_r+0x1c>
 8025cd2:	89a3      	ldrh	r3, [r4, #12]
 8025cd4:	059b      	lsls	r3, r3, #22
 8025cd6:	d404      	bmi.n	8025ce2 <_fputwc_r+0x1c>
 8025cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025cda:	9101      	str	r1, [sp, #4]
 8025cdc:	f7fe f8d2 	bl	8023e84 <__retarget_lock_acquire_recursive>
 8025ce0:	9901      	ldr	r1, [sp, #4]
 8025ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025ce6:	0498      	lsls	r0, r3, #18
 8025ce8:	d406      	bmi.n	8025cf8 <_fputwc_r+0x32>
 8025cea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8025cee:	81a3      	strh	r3, [r4, #12]
 8025cf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025cf2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8025cf6:	6663      	str	r3, [r4, #100]	; 0x64
 8025cf8:	4622      	mov	r2, r4
 8025cfa:	4628      	mov	r0, r5
 8025cfc:	f7ff ffa2 	bl	8025c44 <__fputwc>
 8025d00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025d02:	07da      	lsls	r2, r3, #31
 8025d04:	4605      	mov	r5, r0
 8025d06:	d405      	bmi.n	8025d14 <_fputwc_r+0x4e>
 8025d08:	89a3      	ldrh	r3, [r4, #12]
 8025d0a:	059b      	lsls	r3, r3, #22
 8025d0c:	d402      	bmi.n	8025d14 <_fputwc_r+0x4e>
 8025d0e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025d10:	f7fe f8b9 	bl	8023e86 <__retarget_lock_release_recursive>
 8025d14:	4628      	mov	r0, r5
 8025d16:	b003      	add	sp, #12
 8025d18:	bd30      	pop	{r4, r5, pc}
	...

08025d1c <_fstat_r>:
 8025d1c:	b538      	push	{r3, r4, r5, lr}
 8025d1e:	4d07      	ldr	r5, [pc, #28]	; (8025d3c <_fstat_r+0x20>)
 8025d20:	2300      	movs	r3, #0
 8025d22:	4604      	mov	r4, r0
 8025d24:	4608      	mov	r0, r1
 8025d26:	4611      	mov	r1, r2
 8025d28:	602b      	str	r3, [r5, #0]
 8025d2a:	f7dc ff84 	bl	8002c36 <_fstat>
 8025d2e:	1c43      	adds	r3, r0, #1
 8025d30:	d102      	bne.n	8025d38 <_fstat_r+0x1c>
 8025d32:	682b      	ldr	r3, [r5, #0]
 8025d34:	b103      	cbz	r3, 8025d38 <_fstat_r+0x1c>
 8025d36:	6023      	str	r3, [r4, #0]
 8025d38:	bd38      	pop	{r3, r4, r5, pc}
 8025d3a:	bf00      	nop
 8025d3c:	200189f8 	.word	0x200189f8

08025d40 <_isatty_r>:
 8025d40:	b538      	push	{r3, r4, r5, lr}
 8025d42:	4d06      	ldr	r5, [pc, #24]	; (8025d5c <_isatty_r+0x1c>)
 8025d44:	2300      	movs	r3, #0
 8025d46:	4604      	mov	r4, r0
 8025d48:	4608      	mov	r0, r1
 8025d4a:	602b      	str	r3, [r5, #0]
 8025d4c:	f7dc ff83 	bl	8002c56 <_isatty>
 8025d50:	1c43      	adds	r3, r0, #1
 8025d52:	d102      	bne.n	8025d5a <_isatty_r+0x1a>
 8025d54:	682b      	ldr	r3, [r5, #0]
 8025d56:	b103      	cbz	r3, 8025d5a <_isatty_r+0x1a>
 8025d58:	6023      	str	r3, [r4, #0]
 8025d5a:	bd38      	pop	{r3, r4, r5, pc}
 8025d5c:	200189f8 	.word	0x200189f8

08025d60 <__locale_mb_cur_max>:
 8025d60:	4b01      	ldr	r3, [pc, #4]	; (8025d68 <__locale_mb_cur_max+0x8>)
 8025d62:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8025d66:	4770      	bx	lr
 8025d68:	2000085c 	.word	0x2000085c

08025d6c <_lseek_r>:
 8025d6c:	b538      	push	{r3, r4, r5, lr}
 8025d6e:	4d07      	ldr	r5, [pc, #28]	; (8025d8c <_lseek_r+0x20>)
 8025d70:	4604      	mov	r4, r0
 8025d72:	4608      	mov	r0, r1
 8025d74:	4611      	mov	r1, r2
 8025d76:	2200      	movs	r2, #0
 8025d78:	602a      	str	r2, [r5, #0]
 8025d7a:	461a      	mov	r2, r3
 8025d7c:	f7dc ff76 	bl	8002c6c <_lseek>
 8025d80:	1c43      	adds	r3, r0, #1
 8025d82:	d102      	bne.n	8025d8a <_lseek_r+0x1e>
 8025d84:	682b      	ldr	r3, [r5, #0]
 8025d86:	b103      	cbz	r3, 8025d8a <_lseek_r+0x1e>
 8025d88:	6023      	str	r3, [r4, #0]
 8025d8a:	bd38      	pop	{r3, r4, r5, pc}
 8025d8c:	200189f8 	.word	0x200189f8

08025d90 <__ascii_mbtowc>:
 8025d90:	b082      	sub	sp, #8
 8025d92:	b901      	cbnz	r1, 8025d96 <__ascii_mbtowc+0x6>
 8025d94:	a901      	add	r1, sp, #4
 8025d96:	b142      	cbz	r2, 8025daa <__ascii_mbtowc+0x1a>
 8025d98:	b14b      	cbz	r3, 8025dae <__ascii_mbtowc+0x1e>
 8025d9a:	7813      	ldrb	r3, [r2, #0]
 8025d9c:	600b      	str	r3, [r1, #0]
 8025d9e:	7812      	ldrb	r2, [r2, #0]
 8025da0:	1e10      	subs	r0, r2, #0
 8025da2:	bf18      	it	ne
 8025da4:	2001      	movne	r0, #1
 8025da6:	b002      	add	sp, #8
 8025da8:	4770      	bx	lr
 8025daa:	4610      	mov	r0, r2
 8025dac:	e7fb      	b.n	8025da6 <__ascii_mbtowc+0x16>
 8025dae:	f06f 0001 	mvn.w	r0, #1
 8025db2:	e7f8      	b.n	8025da6 <__ascii_mbtowc+0x16>

08025db4 <_read_r>:
 8025db4:	b538      	push	{r3, r4, r5, lr}
 8025db6:	4d07      	ldr	r5, [pc, #28]	; (8025dd4 <_read_r+0x20>)
 8025db8:	4604      	mov	r4, r0
 8025dba:	4608      	mov	r0, r1
 8025dbc:	4611      	mov	r1, r2
 8025dbe:	2200      	movs	r2, #0
 8025dc0:	602a      	str	r2, [r5, #0]
 8025dc2:	461a      	mov	r2, r3
 8025dc4:	f7dc fef2 	bl	8002bac <_read>
 8025dc8:	1c43      	adds	r3, r0, #1
 8025dca:	d102      	bne.n	8025dd2 <_read_r+0x1e>
 8025dcc:	682b      	ldr	r3, [r5, #0]
 8025dce:	b103      	cbz	r3, 8025dd2 <_read_r+0x1e>
 8025dd0:	6023      	str	r3, [r4, #0]
 8025dd2:	bd38      	pop	{r3, r4, r5, pc}
 8025dd4:	200189f8 	.word	0x200189f8

08025dd8 <__swbuf_r>:
 8025dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025dda:	460e      	mov	r6, r1
 8025ddc:	4614      	mov	r4, r2
 8025dde:	4605      	mov	r5, r0
 8025de0:	b118      	cbz	r0, 8025dea <__swbuf_r+0x12>
 8025de2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8025de4:	b90b      	cbnz	r3, 8025dea <__swbuf_r+0x12>
 8025de6:	f7fd fd8d 	bl	8023904 <__sinit>
 8025dea:	69a3      	ldr	r3, [r4, #24]
 8025dec:	60a3      	str	r3, [r4, #8]
 8025dee:	89a3      	ldrh	r3, [r4, #12]
 8025df0:	0719      	lsls	r1, r3, #28
 8025df2:	d529      	bpl.n	8025e48 <__swbuf_r+0x70>
 8025df4:	6923      	ldr	r3, [r4, #16]
 8025df6:	b33b      	cbz	r3, 8025e48 <__swbuf_r+0x70>
 8025df8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025dfc:	b2f6      	uxtb	r6, r6
 8025dfe:	049a      	lsls	r2, r3, #18
 8025e00:	4637      	mov	r7, r6
 8025e02:	d52a      	bpl.n	8025e5a <__swbuf_r+0x82>
 8025e04:	6823      	ldr	r3, [r4, #0]
 8025e06:	6920      	ldr	r0, [r4, #16]
 8025e08:	1a18      	subs	r0, r3, r0
 8025e0a:	6963      	ldr	r3, [r4, #20]
 8025e0c:	4283      	cmp	r3, r0
 8025e0e:	dc04      	bgt.n	8025e1a <__swbuf_r+0x42>
 8025e10:	4621      	mov	r1, r4
 8025e12:	4628      	mov	r0, r5
 8025e14:	f7fd fd0a 	bl	802382c <_fflush_r>
 8025e18:	b9e0      	cbnz	r0, 8025e54 <__swbuf_r+0x7c>
 8025e1a:	68a3      	ldr	r3, [r4, #8]
 8025e1c:	3b01      	subs	r3, #1
 8025e1e:	60a3      	str	r3, [r4, #8]
 8025e20:	6823      	ldr	r3, [r4, #0]
 8025e22:	1c5a      	adds	r2, r3, #1
 8025e24:	6022      	str	r2, [r4, #0]
 8025e26:	701e      	strb	r6, [r3, #0]
 8025e28:	6962      	ldr	r2, [r4, #20]
 8025e2a:	1c43      	adds	r3, r0, #1
 8025e2c:	429a      	cmp	r2, r3
 8025e2e:	d004      	beq.n	8025e3a <__swbuf_r+0x62>
 8025e30:	89a3      	ldrh	r3, [r4, #12]
 8025e32:	07db      	lsls	r3, r3, #31
 8025e34:	d506      	bpl.n	8025e44 <__swbuf_r+0x6c>
 8025e36:	2e0a      	cmp	r6, #10
 8025e38:	d104      	bne.n	8025e44 <__swbuf_r+0x6c>
 8025e3a:	4621      	mov	r1, r4
 8025e3c:	4628      	mov	r0, r5
 8025e3e:	f7fd fcf5 	bl	802382c <_fflush_r>
 8025e42:	b938      	cbnz	r0, 8025e54 <__swbuf_r+0x7c>
 8025e44:	4638      	mov	r0, r7
 8025e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025e48:	4621      	mov	r1, r4
 8025e4a:	4628      	mov	r0, r5
 8025e4c:	f7fc fd8e 	bl	802296c <__swsetup_r>
 8025e50:	2800      	cmp	r0, #0
 8025e52:	d0d1      	beq.n	8025df8 <__swbuf_r+0x20>
 8025e54:	f04f 37ff 	mov.w	r7, #4294967295
 8025e58:	e7f4      	b.n	8025e44 <__swbuf_r+0x6c>
 8025e5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8025e5e:	81a3      	strh	r3, [r4, #12]
 8025e60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025e62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8025e66:	6663      	str	r3, [r4, #100]	; 0x64
 8025e68:	e7cc      	b.n	8025e04 <__swbuf_r+0x2c>
	...

08025e6c <_wcrtomb_r>:
 8025e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025e6e:	4c09      	ldr	r4, [pc, #36]	; (8025e94 <_wcrtomb_r+0x28>)
 8025e70:	b085      	sub	sp, #20
 8025e72:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 8025e76:	4605      	mov	r5, r0
 8025e78:	461e      	mov	r6, r3
 8025e7a:	b909      	cbnz	r1, 8025e80 <_wcrtomb_r+0x14>
 8025e7c:	460a      	mov	r2, r1
 8025e7e:	a901      	add	r1, sp, #4
 8025e80:	47b8      	blx	r7
 8025e82:	1c43      	adds	r3, r0, #1
 8025e84:	bf01      	itttt	eq
 8025e86:	2300      	moveq	r3, #0
 8025e88:	6033      	streq	r3, [r6, #0]
 8025e8a:	238a      	moveq	r3, #138	; 0x8a
 8025e8c:	602b      	streq	r3, [r5, #0]
 8025e8e:	b005      	add	sp, #20
 8025e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025e92:	bf00      	nop
 8025e94:	2000085c 	.word	0x2000085c

08025e98 <__ascii_wctomb>:
 8025e98:	b149      	cbz	r1, 8025eae <__ascii_wctomb+0x16>
 8025e9a:	2aff      	cmp	r2, #255	; 0xff
 8025e9c:	bf85      	ittet	hi
 8025e9e:	238a      	movhi	r3, #138	; 0x8a
 8025ea0:	6003      	strhi	r3, [r0, #0]
 8025ea2:	700a      	strbls	r2, [r1, #0]
 8025ea4:	f04f 30ff 	movhi.w	r0, #4294967295
 8025ea8:	bf98      	it	ls
 8025eaa:	2001      	movls	r0, #1
 8025eac:	4770      	bx	lr
 8025eae:	4608      	mov	r0, r1
 8025eb0:	4770      	bx	lr

08025eb2 <abort>:
 8025eb2:	b508      	push	{r3, lr}
 8025eb4:	2006      	movs	r0, #6
 8025eb6:	f000 f82d 	bl	8025f14 <raise>
 8025eba:	2001      	movs	r0, #1
 8025ebc:	f7dc fe6c 	bl	8002b98 <_exit>

08025ec0 <_raise_r>:
 8025ec0:	291f      	cmp	r1, #31
 8025ec2:	b538      	push	{r3, r4, r5, lr}
 8025ec4:	4604      	mov	r4, r0
 8025ec6:	460d      	mov	r5, r1
 8025ec8:	d904      	bls.n	8025ed4 <_raise_r+0x14>
 8025eca:	2316      	movs	r3, #22
 8025ecc:	6003      	str	r3, [r0, #0]
 8025ece:	f04f 30ff 	mov.w	r0, #4294967295
 8025ed2:	bd38      	pop	{r3, r4, r5, pc}
 8025ed4:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8025ed8:	b112      	cbz	r2, 8025ee0 <_raise_r+0x20>
 8025eda:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8025ede:	b94b      	cbnz	r3, 8025ef4 <_raise_r+0x34>
 8025ee0:	4620      	mov	r0, r4
 8025ee2:	f000 f831 	bl	8025f48 <_getpid_r>
 8025ee6:	462a      	mov	r2, r5
 8025ee8:	4601      	mov	r1, r0
 8025eea:	4620      	mov	r0, r4
 8025eec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025ef0:	f000 b818 	b.w	8025f24 <_kill_r>
 8025ef4:	2b01      	cmp	r3, #1
 8025ef6:	d00a      	beq.n	8025f0e <_raise_r+0x4e>
 8025ef8:	1c59      	adds	r1, r3, #1
 8025efa:	d103      	bne.n	8025f04 <_raise_r+0x44>
 8025efc:	2316      	movs	r3, #22
 8025efe:	6003      	str	r3, [r0, #0]
 8025f00:	2001      	movs	r0, #1
 8025f02:	e7e6      	b.n	8025ed2 <_raise_r+0x12>
 8025f04:	2400      	movs	r4, #0
 8025f06:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8025f0a:	4628      	mov	r0, r5
 8025f0c:	4798      	blx	r3
 8025f0e:	2000      	movs	r0, #0
 8025f10:	e7df      	b.n	8025ed2 <_raise_r+0x12>
	...

08025f14 <raise>:
 8025f14:	4b02      	ldr	r3, [pc, #8]	; (8025f20 <raise+0xc>)
 8025f16:	4601      	mov	r1, r0
 8025f18:	6818      	ldr	r0, [r3, #0]
 8025f1a:	f7ff bfd1 	b.w	8025ec0 <_raise_r>
 8025f1e:	bf00      	nop
 8025f20:	2000001c 	.word	0x2000001c

08025f24 <_kill_r>:
 8025f24:	b538      	push	{r3, r4, r5, lr}
 8025f26:	4d07      	ldr	r5, [pc, #28]	; (8025f44 <_kill_r+0x20>)
 8025f28:	2300      	movs	r3, #0
 8025f2a:	4604      	mov	r4, r0
 8025f2c:	4608      	mov	r0, r1
 8025f2e:	4611      	mov	r1, r2
 8025f30:	602b      	str	r3, [r5, #0]
 8025f32:	f7dc fe1f 	bl	8002b74 <_kill>
 8025f36:	1c43      	adds	r3, r0, #1
 8025f38:	d102      	bne.n	8025f40 <_kill_r+0x1c>
 8025f3a:	682b      	ldr	r3, [r5, #0]
 8025f3c:	b103      	cbz	r3, 8025f40 <_kill_r+0x1c>
 8025f3e:	6023      	str	r3, [r4, #0]
 8025f40:	bd38      	pop	{r3, r4, r5, pc}
 8025f42:	bf00      	nop
 8025f44:	200189f8 	.word	0x200189f8

08025f48 <_getpid_r>:
 8025f48:	f7dc be0c 	b.w	8002b64 <_getpid>

08025f4c <_init>:
 8025f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025f4e:	bf00      	nop
 8025f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025f52:	bc08      	pop	{r3}
 8025f54:	469e      	mov	lr, r3
 8025f56:	4770      	bx	lr

08025f58 <_fini>:
 8025f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025f5a:	bf00      	nop
 8025f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025f5e:	bc08      	pop	{r3}
 8025f60:	469e      	mov	lr, r3
 8025f62:	4770      	bx	lr
