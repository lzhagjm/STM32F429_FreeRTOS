
STM32F429_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024114  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0004b754  080242c8  080242c8  000342c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0806fa1c  0806fa1c  000809d0  2**0
                  CONTENTS
  4 .ARM          00000008  0806fa1c  0806fa1c  0007fa1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0806fa24  0806fa24  000809d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0806fa24  0806fa24  0007fa24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0806fa2c  0806fa2c  0007fa2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009d0  20000000  0806fa30  00080000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000809d0  2**0
                  CONTENTS
 10 .bss          0000b9b4  200009d0  200009d0  000809d0  2**2
                  ALLOC
 11 ._user_heap_stack 00008004  2000c384  2000c384  000809d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000809d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003d07d  00000000  00000000  00080a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a2b4  00000000  00000000  000bda7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002d38  00000000  00000000  000c7d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002a48  00000000  00000000  000caa70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003ba96  00000000  00000000  000cd4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004f617  00000000  00000000  00108f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00114497  00000000  00000000  00158565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0026c9fc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000cb0c  00000000  00000000  0026ca4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200009d0 	.word	0x200009d0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080242ac 	.word	0x080242ac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200009d4 	.word	0x200009d4
 80001ec:	080242ac 	.word	0x080242ac

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ed2:	463b      	mov	r3, r7
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ede:	4b21      	ldr	r3, [pc, #132]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000ee0:	4a21      	ldr	r2, [pc, #132]	; (8000f68 <MX_ADC1_Init+0x9c>)
 8000ee2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ee4:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000ee6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000eea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eec:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ef8:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f06:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f0c:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000f0e:	4a17      	ldr	r2, [pc, #92]	; (8000f6c <MX_ADC1_Init+0xa0>)
 8000f10:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f12:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f26:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f2c:	480d      	ldr	r0, [pc, #52]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000f2e:	f001 fd49 	bl	80029c4 <HAL_ADC_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f38:	f001 f960 	bl	80021fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <MX_ADC1_Init+0xa4>)
 8000f3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f40:	2301      	movs	r3, #1
 8000f42:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f44:	2300      	movs	r3, #0
 8000f46:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f48:	463b      	mov	r3, r7
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4805      	ldr	r0, [pc, #20]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000f4e:	f001 ff1b 	bl	8002d88 <HAL_ADC_ConfigChannel>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f58:	f001 f950 	bl	80021fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f5c:	bf00      	nop
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	200009ec 	.word	0x200009ec
 8000f68:	40012000 	.word	0x40012000
 8000f6c:	0f000001 	.word	0x0f000001
 8000f70:	10000012 	.word	0x10000012

08000f74 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a0b      	ldr	r2, [pc, #44]	; (8000fb0 <HAL_ADC_MspInit+0x3c>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d10d      	bne.n	8000fa2 <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <HAL_ADC_MspInit+0x40>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8e:	4a09      	ldr	r2, [pc, #36]	; (8000fb4 <HAL_ADC_MspInit+0x40>)
 8000f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f94:	6453      	str	r3, [r2, #68]	; 0x44
 8000f96:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <HAL_ADC_MspInit+0x40>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	3714      	adds	r7, #20
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	40012000 	.word	0x40012000
 8000fb4:	40023800 	.word	0x40023800

08000fb8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <MX_CRC_Init+0x20>)
 8000fbe:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <MX_CRC_Init+0x24>)
 8000fc0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <MX_CRC_Init+0x20>)
 8000fc4:	f002 fa1f 	bl	8003406 <HAL_CRC_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000fce:	f001 f915 	bl	80021fc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000a34 	.word	0x20000a34
 8000fdc:	40023000 	.word	0x40023000

08000fe0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a0b      	ldr	r2, [pc, #44]	; (800101c <HAL_CRC_MspInit+0x3c>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d10d      	bne.n	800100e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <HAL_CRC_MspInit+0x40>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a09      	ldr	r2, [pc, #36]	; (8001020 <HAL_CRC_MspInit+0x40>)
 8000ffc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b07      	ldr	r3, [pc, #28]	; (8001020 <HAL_CRC_MspInit+0x40>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800100e:	bf00      	nop
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40023000 	.word	0x40023000
 8001020:	40023800 	.word	0x40023800

08001024 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <MX_DMA_Init+0x4c>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a0f      	ldr	r2, [pc, #60]	; (8001070 <MX_DMA_Init+0x4c>)
 8001034:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <MX_DMA_Init+0x4c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 7, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	2107      	movs	r1, #7
 800104a:	203b      	movs	r0, #59	; 0x3b
 800104c:	f002 f9a5 	bl	800339a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001050:	203b      	movs	r0, #59	; 0x3b
 8001052:	f002 f9be 	bl	80033d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 7, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2107      	movs	r1, #7
 800105a:	2045      	movs	r0, #69	; 0x45
 800105c:	f002 f99d 	bl	800339a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001060:	2045      	movs	r0, #69	; 0x45
 8001062:	f002 f9b6 	bl	80033d2 <HAL_NVIC_EnableIRQ>

}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40023800 	.word	0x40023800

08001074 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001078:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <MX_DMA2D_Init+0x5c>)
 800107a:	4a16      	ldr	r2, [pc, #88]	; (80010d4 <MX_DMA2D_Init+0x60>)
 800107c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800107e:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <MX_DMA2D_Init+0x5c>)
 8001080:	2200      	movs	r2, #0
 8001082:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <MX_DMA2D_Init+0x5c>)
 8001086:	2201      	movs	r2, #1
 8001088:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <MX_DMA2D_Init+0x5c>)
 800108c:	2200      	movs	r2, #0
 800108e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <MX_DMA2D_Init+0x5c>)
 8001092:	2200      	movs	r2, #0
 8001094:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <MX_DMA2D_Init+0x5c>)
 8001098:	2201      	movs	r2, #1
 800109a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <MX_DMA2D_Init+0x5c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <MX_DMA2D_Init+0x5c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80010a8:	4809      	ldr	r0, [pc, #36]	; (80010d0 <MX_DMA2D_Init+0x5c>)
 80010aa:	f002 fd67 	bl	8003b7c <HAL_DMA2D_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80010b4:	f001 f8a2 	bl	80021fc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80010b8:	2101      	movs	r1, #1
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <MX_DMA2D_Init+0x5c>)
 80010bc:	f002 febc 	bl	8003e38 <HAL_DMA2D_ConfigLayer>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80010c6:	f001 f899 	bl	80021fc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000a3c 	.word	0x20000a3c
 80010d4:	4002b000 	.word	0x4002b000

080010d8 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a0b      	ldr	r2, [pc, #44]	; (8001114 <HAL_DMA2D_MspInit+0x3c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d10d      	bne.n	8001106 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <HAL_DMA2D_MspInit+0x40>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a09      	ldr	r2, [pc, #36]	; (8001118 <HAL_DMA2D_MspInit+0x40>)
 80010f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b07      	ldr	r3, [pc, #28]	; (8001118 <HAL_DMA2D_MspInit+0x40>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8001106:	bf00      	nop
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	4002b000 	.word	0x4002b000
 8001118:	40023800 	.word	0x40023800

0800111c <dma2d_put_src_wh_c>:
  /* USER CODE END DMA2D_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void dma2d_put_src_wh_c(uint32_t p, uint32_t w, uint32_t h, uint32_t c){
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af02      	add	r7, sp, #8
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
 8001128:	603b      	str	r3, [r7, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 800112a:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <dma2d_put_src_wh_c+0x84>)
 800112c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001130:	605a      	str	r2, [r3, #4]
	hdma2d.Init.OutputOffset = 1024 - w;
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001138:	4a19      	ldr	r2, [pc, #100]	; (80011a0 <dma2d_put_src_wh_c+0x84>)
 800113a:	60d3      	str	r3, [r2, #12]
  /* Change DMA2D peripheral state */
  hdma2d.State = HAL_DMA2D_STATE_BUSY;
 800113c:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <dma2d_put_src_wh_c+0x84>)
 800113e:	2202      	movs	r2, #2
 8001140:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  MODIFY_REG(hdma2d.Instance->CR, DMA2D_CR_MODE, hdma2d.Init.Mode);
 8001144:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <dma2d_put_src_wh_c+0x84>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <dma2d_put_src_wh_c+0x84>)
 8001150:	685a      	ldr	r2, [r3, #4]
 8001152:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <dma2d_put_src_wh_c+0x84>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	430a      	orrs	r2, r1
 8001158:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d.Instance->OOR, DMA2D_OOR_LO, hdma2d.Init.OutputOffset);
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <dma2d_put_src_wh_c+0x84>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001160:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001164:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001168:	4a0d      	ldr	r2, [pc, #52]	; (80011a0 <dma2d_put_src_wh_c+0x84>)
 800116a:	68d1      	ldr	r1, [r2, #12]
 800116c:	4a0c      	ldr	r2, [pc, #48]	; (80011a0 <dma2d_put_src_wh_c+0x84>)
 800116e:	6812      	ldr	r2, [r2, #0]
 8001170:	430b      	orrs	r3, r1
 8001172:	6413      	str	r3, [r2, #64]	; 0x40
  /* Initialize the DMA2D state*/
  hdma2d.State  = HAL_DMA2D_STATE_READY;
 8001174:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <dma2d_put_src_wh_c+0x84>)
 8001176:	2201      	movs	r2, #1
 8001178:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	HAL_DMA2D_Start(&hdma2d, c, p, w, h);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	6839      	ldr	r1, [r7, #0]
 8001186:	4806      	ldr	r0, [pc, #24]	; (80011a0 <dma2d_put_src_wh_c+0x84>)
 8001188:	f002 fd41 	bl	8003c0e <HAL_DMA2D_Start>
	HAL_DMA2D_PollForTransfer(&hdma2d, 0xFFFF);
 800118c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001190:	4803      	ldr	r0, [pc, #12]	; (80011a0 <dma2d_put_src_wh_c+0x84>)
 8001192:	f002 fd67 	bl	8003c64 <HAL_DMA2D_PollForTransfer>
}
 8001196:	bf00      	nop
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000a3c 	.word	0x20000a3c

080011a4 <SDRAM_InitSequence>:
#define OP_CODE				0x0000
#define WB						0x0200


static void SDRAM_InitSequence(SDRAM_HandleTypeDef *hsdram1)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b088      	sub	sp, #32
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpr = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61fb      	str	r3, [r7, #28]
  FMC_SDRAM_CommandTypeDef Command;
/* Step 3 --------------------------------------------------------------------*/
  /* 配置命令：开启提供给SDRAM的时钟 */
  Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80011b0:	2301      	movs	r3, #1
 80011b2:	60fb      	str	r3, [r7, #12]
  Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 80011b4:	2308      	movs	r3, #8
 80011b6:	613b      	str	r3, [r7, #16]
  Command.AutoRefreshNumber = 1;
 80011b8:	2301      	movs	r3, #1
 80011ba:	617b      	str	r3, [r7, #20]
  Command.ModeRegisterDefinition = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	61bb      	str	r3, [r7, #24]
/* Send the command */
  HAL_SDRAM_SendCommand(hsdram1, &Command, 0xFFFF);
 80011c0:	f107 030c 	add.w	r3, r7, #12
 80011c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011c8:	4619      	mov	r1, r3
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f006 ffc5 	bl	800815a <HAL_SDRAM_SendCommand>

/* Step 5 --------------------------------------------------------------------*/
  /* 配置命令：对所有的bank预充电 */
  Command.CommandMode = FMC_SDRAM_CMD_PALL;
 80011d0:	2302      	movs	r3, #2
 80011d2:	60fb      	str	r3, [r7, #12]
  Command.AutoRefreshNumber = 1;
 80011d4:	2301      	movs	r3, #1
 80011d6:	617b      	str	r3, [r7, #20]
  Command.ModeRegisterDefinition = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	61bb      	str	r3, [r7, #24]
/* Send the command */
  HAL_SDRAM_SendCommand(hsdram1, &Command, 0xFFFF);
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011e4:	4619      	mov	r1, r3
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f006 ffb7 	bl	800815a <HAL_SDRAM_SendCommand>

/* Step 6 --------------------------------------------------------------------*/
  /* 配置命令：自动刷新 */
  Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80011ec:	2303      	movs	r3, #3
 80011ee:	60fb      	str	r3, [r7, #12]
  Command.AutoRefreshNumber = 4;
 80011f0:	2304      	movs	r3, #4
 80011f2:	617b      	str	r3, [r7, #20]
  Command.ModeRegisterDefinition = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61bb      	str	r3, [r7, #24]
 /* Send the command */
  HAL_SDRAM_SendCommand(hsdram1, &Command, 0xFFFF);
 80011f8:	f107 030c 	add.w	r3, r7, #12
 80011fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001200:	4619      	mov	r1, r3
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f006 ffa9 	bl	800815a <HAL_SDRAM_SendCommand>

/* Step 7 --------------------------------------------------------------------*/
  /* 设置sdram寄存器配置 */
  tmpr = (uint32_t)BURST_LENGTH         |
 8001208:	f240 2331 	movw	r3, #561	; 0x231
 800120c:	61fb      	str	r3, [r7, #28]
									CAS_LATENCY           |
									OP_CODE 							|
									WB;

  /* 配置命令：设置SDRAM寄存器 */
  Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 800120e:	2304      	movs	r3, #4
 8001210:	60fb      	str	r3, [r7, #12]
  Command.AutoRefreshNumber = 1;
 8001212:	2301      	movs	r3, #1
 8001214:	617b      	str	r3, [r7, #20]
  Command.ModeRegisterDefinition = tmpr;
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	61bb      	str	r3, [r7, #24]
  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram1, &Command, 0xFFFF);
 800121a:	f107 030c 	add.w	r3, r7, #12
 800121e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001222:	4619      	mov	r1, r3
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f006 ff98 	bl	800815a <HAL_SDRAM_SendCommand>

  /* 设置刷新计数器 */
  /* (15.62 us x Freq) - 20 */
	  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(hsdram1, 1386);
 800122a:	f240 516a 	movw	r1, #1386	; 0x56a
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f006 ffbe 	bl	80081b0 <HAL_SDRAM_ProgramRefreshRate>

}
 8001234:	bf00      	nop
 8001236:	3720      	adds	r7, #32
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
 8001250:	615a      	str	r2, [r3, #20]
 8001252:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001254:	4b21      	ldr	r3, [pc, #132]	; (80012dc <MX_FMC_Init+0xa0>)
 8001256:	4a22      	ldr	r2, [pc, #136]	; (80012e0 <MX_FMC_Init+0xa4>)
 8001258:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800125a:	4b20      	ldr	r3, [pc, #128]	; (80012dc <MX_FMC_Init+0xa0>)
 800125c:	2201      	movs	r2, #1
 800125e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001260:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <MX_FMC_Init+0xa0>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001266:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <MX_FMC_Init+0xa0>)
 8001268:	2204      	movs	r2, #4
 800126a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <MX_FMC_Init+0xa0>)
 800126e:	2210      	movs	r2, #16
 8001270:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001272:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <MX_FMC_Init+0xa0>)
 8001274:	2240      	movs	r2, #64	; 0x40
 8001276:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001278:	4b18      	ldr	r3, [pc, #96]	; (80012dc <MX_FMC_Init+0xa0>)
 800127a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800127e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001280:	4b16      	ldr	r3, [pc, #88]	; (80012dc <MX_FMC_Init+0xa0>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001286:	4b15      	ldr	r3, [pc, #84]	; (80012dc <MX_FMC_Init+0xa0>)
 8001288:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800128c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800128e:	4b13      	ldr	r3, [pc, #76]	; (80012dc <MX_FMC_Init+0xa0>)
 8001290:	2200      	movs	r2, #0
 8001292:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <MX_FMC_Init+0xa0>)
 8001296:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800129a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800129c:	2302      	movs	r3, #2
 800129e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80012a0:	2307      	movs	r3, #7
 80012a2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80012a4:	2304      	movs	r3, #4
 80012a6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80012a8:	2307      	movs	r3, #7
 80012aa:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80012ac:	2303      	movs	r3, #3
 80012ae:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80012b0:	2302      	movs	r3, #2
 80012b2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80012b4:	2302      	movs	r3, #2
 80012b6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	4619      	mov	r1, r3
 80012bc:	4807      	ldr	r0, [pc, #28]	; (80012dc <MX_FMC_Init+0xa0>)
 80012be:	f006 ff18 	bl	80080f2 <HAL_SDRAM_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80012c8:	f000 ff98 	bl	80021fc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  SDRAM_InitSequence(&hsdram1);
 80012cc:	4803      	ldr	r0, [pc, #12]	; (80012dc <MX_FMC_Init+0xa0>)
 80012ce:	f7ff ff69 	bl	80011a4 <SDRAM_InitSequence>
  /* USER CODE END FMC_Init 2 */
}
 80012d2:	bf00      	nop
 80012d4:	3720      	adds	r7, #32
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000a7c 	.word	0x20000a7c
 80012e0:	a0000140 	.word	0xa0000140

080012e4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80012f8:	4b3b      	ldr	r3, [pc, #236]	; (80013e8 <HAL_FMC_MspInit+0x104>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d16f      	bne.n	80013e0 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001300:	4b39      	ldr	r3, [pc, #228]	; (80013e8 <HAL_FMC_MspInit+0x104>)
 8001302:	2201      	movs	r2, #1
 8001304:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	603b      	str	r3, [r7, #0]
 800130a:	4b38      	ldr	r3, [pc, #224]	; (80013ec <HAL_FMC_MspInit+0x108>)
 800130c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800130e:	4a37      	ldr	r2, [pc, #220]	; (80013ec <HAL_FMC_MspInit+0x108>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6393      	str	r3, [r2, #56]	; 0x38
 8001316:	4b35      	ldr	r3, [pc, #212]	; (80013ec <HAL_FMC_MspInit+0x108>)
 8001318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	603b      	str	r3, [r7, #0]
 8001320:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001322:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001326:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001330:	2303      	movs	r3, #3
 8001332:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001334:	230c      	movs	r3, #12
 8001336:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	4619      	mov	r1, r3
 800133c:	482c      	ldr	r0, [pc, #176]	; (80013f0 <HAL_FMC_MspInit+0x10c>)
 800133e:	f004 f837 	bl	80053b0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001342:	2301      	movs	r3, #1
 8001344:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134e:	2303      	movs	r3, #3
 8001350:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001352:	230c      	movs	r3, #12
 8001354:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	4619      	mov	r1, r3
 800135a:	4826      	ldr	r0, [pc, #152]	; (80013f4 <HAL_FMC_MspInit+0x110>)
 800135c:	f004 f828 	bl	80053b0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001360:	f248 1333 	movw	r3, #33075	; 0x8133
 8001364:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136e:	2303      	movs	r3, #3
 8001370:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001372:	230c      	movs	r3, #12
 8001374:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	4619      	mov	r1, r3
 800137a:	481f      	ldr	r0, [pc, #124]	; (80013f8 <HAL_FMC_MspInit+0x114>)
 800137c:	f004 f818 	bl	80053b0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001380:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001384:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001386:	2302      	movs	r3, #2
 8001388:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138e:	2303      	movs	r3, #3
 8001390:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001392:	230c      	movs	r3, #12
 8001394:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	4619      	mov	r1, r3
 800139a:	4818      	ldr	r0, [pc, #96]	; (80013fc <HAL_FMC_MspInit+0x118>)
 800139c:	f004 f808 	bl	80053b0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013a0:	23c0      	movs	r3, #192	; 0xc0
 80013a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a4:	2302      	movs	r3, #2
 80013a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ac:	2303      	movs	r3, #3
 80013ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013b0:	230c      	movs	r3, #12
 80013b2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013b4:	1d3b      	adds	r3, r7, #4
 80013b6:	4619      	mov	r1, r3
 80013b8:	4811      	ldr	r0, [pc, #68]	; (8001400 <HAL_FMC_MspInit+0x11c>)
 80013ba:	f003 fff9 	bl	80053b0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80013be:	f24c 7303 	movw	r3, #50947	; 0xc703
 80013c2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013cc:	2303      	movs	r3, #3
 80013ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013d0:	230c      	movs	r3, #12
 80013d2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	4619      	mov	r1, r3
 80013d8:	480a      	ldr	r0, [pc, #40]	; (8001404 <HAL_FMC_MspInit+0x120>)
 80013da:	f003 ffe9 	bl	80053b0 <HAL_GPIO_Init>
 80013de:	e000      	b.n	80013e2 <HAL_FMC_MspInit+0xfe>
    return;
 80013e0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000ab0 	.word	0x20000ab0
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40021400 	.word	0x40021400
 80013f4:	40020800 	.word	0x40020800
 80013f8:	40021800 	.word	0x40021800
 80013fc:	40021000 	.word	0x40021000
 8001400:	40021c00 	.word	0x40021c00
 8001404:	40020c00 	.word	0x40020c00

08001408 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001410:	f7ff ff68 	bl	80012e4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001420:	4a04      	ldr	r2, [pc, #16]	; (8001434 <MX_FREERTOS_Init+0x18>)
 8001422:	2100      	movs	r1, #0
 8001424:	4804      	ldr	r0, [pc, #16]	; (8001438 <MX_FREERTOS_Init+0x1c>)
 8001426:	f00c ff70 	bl	800e30a <osThreadNew>
 800142a:	4603      	mov	r3, r0
 800142c:	4a03      	ldr	r2, [pc, #12]	; (800143c <MX_FREERTOS_Init+0x20>)
 800142e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}
 8001434:	080448ec 	.word	0x080448ec
 8001438:	08001441 	.word	0x08001441
 800143c:	20000abc 	.word	0x20000abc

08001440 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001448:	f008 fba8 	bl	8009b9c <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  uint32_t val = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
	FatfsTaskHandle = osThreadNew(FatfsTask, NULL, &FatfsTask_attributes);
 8001450:	4a28      	ldr	r2, [pc, #160]	; (80014f4 <StartDefaultTask+0xb4>)
 8001452:	2100      	movs	r1, #0
 8001454:	4828      	ldr	r0, [pc, #160]	; (80014f8 <StartDefaultTask+0xb8>)
 8001456:	f00c ff58 	bl	800e30a <osThreadNew>
 800145a:	4603      	mov	r3, r0
 800145c:	4a27      	ldr	r2, [pc, #156]	; (80014fc <StartDefaultTask+0xbc>)
 800145e:	6013      	str	r3, [r2, #0]
	LcdTaskHandle = osThreadNew(LcdTask, NULL, &LcdTask_attributes);
 8001460:	4a27      	ldr	r2, [pc, #156]	; (8001500 <StartDefaultTask+0xc0>)
 8001462:	2100      	movs	r1, #0
 8001464:	4827      	ldr	r0, [pc, #156]	; (8001504 <StartDefaultTask+0xc4>)
 8001466:	f00c ff50 	bl	800e30a <osThreadNew>
 800146a:	4603      	mov	r3, r0
 800146c:	4a26      	ldr	r2, [pc, #152]	; (8001508 <StartDefaultTask+0xc8>)
 800146e:	6013      	str	r3, [r2, #0]

    for(;;)
    {
    	HAL_ADC_Start(&hadc1);
 8001470:	4826      	ldr	r0, [pc, #152]	; (800150c <StartDefaultTask+0xcc>)
 8001472:	f001 faeb 	bl	8002a4c <HAL_ADC_Start>
    	HAL_ADC_PollForConversion(&hadc1, 0xFFFF);
 8001476:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800147a:	4824      	ldr	r0, [pc, #144]	; (800150c <StartDefaultTask+0xcc>)
 800147c:	f001 fbeb 	bl	8002c56 <HAL_ADC_PollForConversion>
    	val = HAL_ADC_GetValue(&hadc1);
 8001480:	4822      	ldr	r0, [pc, #136]	; (800150c <StartDefaultTask+0xcc>)
 8001482:	f001 fc73 	bl	8002d6c <HAL_ADC_GetValue>
 8001486:	60f8      	str	r0, [r7, #12]
    	HAL_ADC_Stop(&hadc1);
 8001488:	4820      	ldr	r0, [pc, #128]	; (800150c <StartDefaultTask+0xcc>)
 800148a:	f001 fbb1 	bl	8002bf0 <HAL_ADC_Stop>
    	printf("core tempsensor:%.2f\r\n",((float)val * 3300/4096 - 760) / 2.5 + 25); // @suppress("Float formatting support")
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	ee07 3a90 	vmov	s15, r3
 8001494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001498:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001510 <StartDefaultTask+0xd0>
 800149c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014a0:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001514 <StartDefaultTask+0xd4>
 80014a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014a8:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001518 <StartDefaultTask+0xd8>
 80014ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014b0:	ee17 0a90 	vmov	r0, s15
 80014b4:	f7ff f858 	bl	8000568 <__aeabi_f2d>
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	4b17      	ldr	r3, [pc, #92]	; (800151c <StartDefaultTask+0xdc>)
 80014be:	f7ff f9d5 	bl	800086c <__aeabi_ddiv>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4610      	mov	r0, r2
 80014c8:	4619      	mov	r1, r3
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	4b14      	ldr	r3, [pc, #80]	; (8001520 <StartDefaultTask+0xe0>)
 80014d0:	f7fe feec 	bl	80002ac <__adddf3>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	4812      	ldr	r0, [pc, #72]	; (8001524 <StartDefaultTask+0xe4>)
 80014da:	f01c fefd 	bl	801e2d8 <printf>
    	HAL_GPIO_TogglePin(GPIOH, GPIO_PIN_10);
 80014de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014e2:	4811      	ldr	r0, [pc, #68]	; (8001528 <StartDefaultTask+0xe8>)
 80014e4:	f004 f929 	bl	800573a <HAL_GPIO_TogglePin>
      osDelay(1000);
 80014e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014ec:	f00c ff9f 	bl	800e42e <osDelay>
    	HAL_ADC_Start(&hadc1);
 80014f0:	e7be      	b.n	8001470 <StartDefaultTask+0x30>
 80014f2:	bf00      	nop
 80014f4:	080448a4 	.word	0x080448a4
 80014f8:	08001649 	.word	0x08001649
 80014fc:	20000ab4 	.word	0x20000ab4
 8001500:	080448c8 	.word	0x080448c8
 8001504:	0800196d 	.word	0x0800196d
 8001508:	20000ab8 	.word	0x20000ab8
 800150c:	200009ec 	.word	0x200009ec
 8001510:	454e4000 	.word	0x454e4000
 8001514:	45800000 	.word	0x45800000
 8001518:	443e0000 	.word	0x443e0000
 800151c:	40040000 	.word	0x40040000
 8001520:	40390000 	.word	0x40390000
 8001524:	080242e8 	.word	0x080242e8
 8001528:	40021c00 	.word	0x40021c00

0800152c <draw_xy_wh_c>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

static void draw_xy_wh_c(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint32_t c){
 800152c:	b590      	push	{r4, r7, lr}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	4604      	mov	r4, r0
 8001534:	4608      	mov	r0, r1
 8001536:	4611      	mov	r1, r2
 8001538:	461a      	mov	r2, r3
 800153a:	4623      	mov	r3, r4
 800153c:	80fb      	strh	r3, [r7, #6]
 800153e:	4603      	mov	r3, r0
 8001540:	80bb      	strh	r3, [r7, #4]
 8001542:	460b      	mov	r3, r1
 8001544:	807b      	strh	r3, [r7, #2]
 8001546:	4613      	mov	r3, r2
 8001548:	803b      	strh	r3, [r7, #0]
	dma2d_put_src_wh_c(IMGRAM_BASE_ADDR + y * 1024 * 3 + x * 3, w, h, c);
 800154a:	88ba      	ldrh	r2, [r7, #4]
 800154c:	4613      	mov	r3, r2
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	4413      	add	r3, r2
 8001552:	029b      	lsls	r3, r3, #10
 8001554:	4619      	mov	r1, r3
 8001556:	88fa      	ldrh	r2, [r7, #6]
 8001558:	4613      	mov	r3, r2
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	4413      	add	r3, r2
 800155e:	440b      	add	r3, r1
 8001560:	f103 4050 	add.w	r0, r3, #3489660928	; 0xd0000000
 8001564:	8879      	ldrh	r1, [r7, #2]
 8001566:	883a      	ldrh	r2, [r7, #0]
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	f7ff fdd7 	bl	800111c <dma2d_put_src_wh_c>
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	bd90      	pop	{r4, r7, pc}

08001576 <draw_xy_wh_img>:

static void draw_xy_wh_img(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint8_t* src){
 8001576:	b490      	push	{r4, r7}
 8001578:	b086      	sub	sp, #24
 800157a:	af00      	add	r7, sp, #0
 800157c:	4604      	mov	r4, r0
 800157e:	4608      	mov	r0, r1
 8001580:	4611      	mov	r1, r2
 8001582:	461a      	mov	r2, r3
 8001584:	4623      	mov	r3, r4
 8001586:	80fb      	strh	r3, [r7, #6]
 8001588:	4603      	mov	r3, r0
 800158a:	80bb      	strh	r3, [r7, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	807b      	strh	r3, [r7, #2]
 8001590:	4613      	mov	r3, r2
 8001592:	803b      	strh	r3, [r7, #0]
//	dma2d_put_mem_mem(src, IMGRAM_BASE_ADDR + y * 1024 * 3 + x * 3, w, h);
	uint8_t *p = (uint8_t*)(IMGRAM_BASE_ADDR + y * 1024 * 3 + x * 3);
 8001594:	88ba      	ldrh	r2, [r7, #4]
 8001596:	4613      	mov	r3, r2
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	4413      	add	r3, r2
 800159c:	029b      	lsls	r3, r3, #10
 800159e:	4619      	mov	r1, r3
 80015a0:	88fa      	ldrh	r2, [r7, #6]
 80015a2:	4613      	mov	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4413      	add	r3, r2
 80015a8:	440b      	add	r3, r1
 80015aa:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 80015ae:	617b      	str	r3, [r7, #20]
	uint32_t index = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	613b      	str	r3, [r7, #16]
	int i = 0, j = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]
	for(i = 0 ; i < h; i++){
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	e037      	b.n	8001632 <draw_xy_wh_img+0xbc>
		for(j = 0 ; j < w; j++){
 80015c2:	2300      	movs	r3, #0
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	e023      	b.n	8001610 <draw_xy_wh_img+0x9a>
				*p = src[index++];
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1c5a      	adds	r2, r3, #1
 80015cc:	613a      	str	r2, [r7, #16]
 80015ce:	6a3a      	ldr	r2, [r7, #32]
 80015d0:	4413      	add	r3, r2
 80015d2:	781a      	ldrb	r2, [r3, #0]
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	701a      	strb	r2, [r3, #0]
				p++;
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	3301      	adds	r3, #1
 80015dc:	617b      	str	r3, [r7, #20]
				*p = src[index++];
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1c5a      	adds	r2, r3, #1
 80015e2:	613a      	str	r2, [r7, #16]
 80015e4:	6a3a      	ldr	r2, [r7, #32]
 80015e6:	4413      	add	r3, r2
 80015e8:	781a      	ldrb	r2, [r3, #0]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	701a      	strb	r2, [r3, #0]
				p++;
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	3301      	adds	r3, #1
 80015f2:	617b      	str	r3, [r7, #20]
				*p = src[index++];
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	613a      	str	r2, [r7, #16]
 80015fa:	6a3a      	ldr	r2, [r7, #32]
 80015fc:	4413      	add	r3, r2
 80015fe:	781a      	ldrb	r2, [r3, #0]
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	701a      	strb	r2, [r3, #0]
				p++;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	3301      	adds	r3, #1
 8001608:	617b      	str	r3, [r7, #20]
		for(j = 0 ; j < w; j++){
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	3301      	adds	r3, #1
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	887b      	ldrh	r3, [r7, #2]
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	429a      	cmp	r2, r3
 8001616:	dbd7      	blt.n	80015c8 <draw_xy_wh_img+0x52>
		}

		p=p+(1024-w)*3;
 8001618:	887b      	ldrh	r3, [r7, #2]
 800161a:	f5c3 6280 	rsb	r2, r3, #1024	; 0x400
 800161e:	4613      	mov	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	4413      	add	r3, r2
 8001624:	461a      	mov	r2, r3
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	4413      	add	r3, r2
 800162a:	617b      	str	r3, [r7, #20]
	for(i = 0 ; i < h; i++){
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	3301      	adds	r3, #1
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	883b      	ldrh	r3, [r7, #0]
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	429a      	cmp	r2, r3
 8001638:	dbc3      	blt.n	80015c2 <draw_xy_wh_img+0x4c>
	}
}
 800163a:	bf00      	nop
 800163c:	bf00      	nop
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bc90      	pop	{r4, r7}
 8001644:	4770      	bx	lr
	...

08001648 <FatfsTask>:

void FatfsTask(void *argument){
 8001648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800164c:	f5ad 6dea 	sub.w	sp, sp, #1872	; 0x750
 8001650:	af02      	add	r7, sp, #8
 8001652:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 8001656:	f2a3 7344 	subw	r3, r3, #1860	; 0x744
 800165a:	6018      	str	r0, [r3, #0]
	int ret = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744
	char path[50];
	const char *write_buff = "hello world! xsdhjkshfksehifuhseuhfuisdhfuise";
 8001662:	4ba8      	ldr	r3, [pc, #672]	; (8001904 <FatfsTask+0x2bc>)
 8001664:	f8c7 3740 	str.w	r3, [r7, #1856]	; 0x740
	char readbuff[100];
	HAL_SD_CardInfoTypeDef pCardInfo;
	FIL SDFile1, SDFile2;
	UINT bw = 0, br = 0;
 8001668:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 800166c:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 8001678:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
	/*1、挂载文件系统*/
	BYTE work[_MAX_SS];
	ret = f_mount (&SDFatFS, (const TCHAR*)SDPath, 1);
 8001680:	2201      	movs	r2, #1
 8001682:	49a1      	ldr	r1, [pc, #644]	; (8001908 <FatfsTask+0x2c0>)
 8001684:	48a1      	ldr	r0, [pc, #644]	; (800190c <FatfsTask+0x2c4>)
 8001686:	f00b f8e5 	bl	800c854 <f_mount>
 800168a:	4603      	mov	r3, r0
 800168c:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744
	if(ret == FR_NO_FILESYSTEM){
 8001690:	f8d7 3744 	ldr.w	r3, [r7, #1860]	; 0x744
 8001694:	2b0d      	cmp	r3, #13
 8001696:	d11c      	bne.n	80016d2 <FatfsTask+0x8a>
		ret = f_mkfs ((const TCHAR*)SDPath, FM_FAT32, 0, work, sizeof(work));
 8001698:	f107 0320 	add.w	r3, r7, #32
 800169c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016a0:	9200      	str	r2, [sp, #0]
 80016a2:	2200      	movs	r2, #0
 80016a4:	2102      	movs	r1, #2
 80016a6:	4898      	ldr	r0, [pc, #608]	; (8001908 <FatfsTask+0x2c0>)
 80016a8:	f00b ffc2 	bl	800d630 <f_mkfs>
 80016ac:	4603      	mov	r3, r0
 80016ae:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744
		if(ret != FR_OK){
 80016b2:	f8d7 3744 	ldr.w	r3, [r7, #1860]	; 0x744
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d005      	beq.n	80016c6 <FatfsTask+0x7e>
				printf("f_mkfs is err:%d\r\n",ret);
 80016ba:	f8d7 1744 	ldr.w	r1, [r7, #1860]	; 0x744
 80016be:	4894      	ldr	r0, [pc, #592]	; (8001910 <FatfsTask+0x2c8>)
 80016c0:	f01c fe0a 	bl	801e2d8 <printf>
				goto loop;
 80016c4:	e119      	b.n	80018fa <FatfsTask+0x2b2>
		}
		f_mount (&SDFatFS, SDPath, 1);
 80016c6:	2201      	movs	r2, #1
 80016c8:	498f      	ldr	r1, [pc, #572]	; (8001908 <FatfsTask+0x2c0>)
 80016ca:	4890      	ldr	r0, [pc, #576]	; (800190c <FatfsTask+0x2c4>)
 80016cc:	f00b f8c2 	bl	800c854 <f_mount>
 80016d0:	e00c      	b.n	80016ec <FatfsTask+0xa4>
	}else if (ret != FR_OK){
 80016d2:	f8d7 3744 	ldr.w	r3, [r7, #1860]	; 0x744
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d005      	beq.n	80016e6 <FatfsTask+0x9e>
			printf("f_mount is err:%d\r\n",ret);
 80016da:	f8d7 1744 	ldr.w	r1, [r7, #1860]	; 0x744
 80016de:	488d      	ldr	r0, [pc, #564]	; (8001914 <FatfsTask+0x2cc>)
 80016e0:	f01c fdfa 	bl	801e2d8 <printf>
			goto loop;
 80016e4:	e109      	b.n	80018fa <FatfsTask+0x2b2>
	}else{
		printf("f_mount is ok\r\n");
 80016e6:	488c      	ldr	r0, [pc, #560]	; (8001918 <FatfsTask+0x2d0>)
 80016e8:	f01c fe4e 	bl	801e388 <puts>
	}
	ret = HAL_SD_GetCardInfo(&hsd, &pCardInfo);
 80016ec:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 80016f0:	4619      	mov	r1, r3
 80016f2:	488a      	ldr	r0, [pc, #552]	; (800191c <FatfsTask+0x2d4>)
 80016f4:	f005 ff76 	bl	80075e4 <HAL_SD_GetCardInfo>
 80016f8:	4603      	mov	r3, r0
 80016fa:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744
	if(ret != HAL_OK){
 80016fe:	f8d7 3744 	ldr.w	r3, [r7, #1860]	; 0x744
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <FatfsTask+0xc6>
		printf("HAL_SD_GetCardInfo is err\r\n");
 8001706:	4886      	ldr	r0, [pc, #536]	; (8001920 <FatfsTask+0x2d8>)
 8001708:	f01c fe3e 	bl	801e388 <puts>
 800170c:	e062      	b.n	80017d4 <FatfsTask+0x18c>
	}else{
		printf("Initialize SD card successfully!\r\n");
 800170e:	4885      	ldr	r0, [pc, #532]	; (8001924 <FatfsTask+0x2dc>)
 8001710:	f01c fe3a 	bl	801e388 <puts>
		 // 打印SD卡基本信�????????????
		 printf(" SD card information! \r\n");
 8001714:	4884      	ldr	r0, [pc, #528]	; (8001928 <FatfsTask+0x2e0>)
 8001716:	f01c fe37 	bl	801e388 <puts>
		 printf(" CardBlockSize : %ld \r\n", pCardInfo.BlockSize);   // 块大�????????????
 800171a:	f8d7 369c 	ldr.w	r3, [r7, #1692]	; 0x69c
 800171e:	4619      	mov	r1, r3
 8001720:	4882      	ldr	r0, [pc, #520]	; (800192c <FatfsTask+0x2e4>)
 8001722:	f01c fdd9 	bl	801e2d8 <printf>
		 printf(" CardBlockNbr : %ld \r\n", pCardInfo.BlockNbr);   // 块大�????????????
 8001726:	f8d7 3698 	ldr.w	r3, [r7, #1688]	; 0x698
 800172a:	4619      	mov	r1, r3
 800172c:	4880      	ldr	r0, [pc, #512]	; (8001930 <FatfsTask+0x2e8>)
 800172e:	f01c fdd3 	bl	801e2d8 <printf>
		 printf(" CardCapacity  : %.2f MB \r\n",(double)((unsigned long long)pCardInfo.BlockSize * pCardInfo.BlockNbr/1024)/1024);// 显示容量 // @suppress("Float formatting support")
 8001732:	f8d7 369c 	ldr.w	r3, [r7, #1692]	; 0x69c
 8001736:	2200      	movs	r2, #0
 8001738:	469a      	mov	sl, r3
 800173a:	4693      	mov	fp, r2
 800173c:	f8d7 3698 	ldr.w	r3, [r7, #1688]	; 0x698
 8001740:	2200      	movs	r2, #0
 8001742:	4698      	mov	r8, r3
 8001744:	4691      	mov	r9, r2
 8001746:	fb08 f20b 	mul.w	r2, r8, fp
 800174a:	fb0a f309 	mul.w	r3, sl, r9
 800174e:	4413      	add	r3, r2
 8001750:	fbaa 4508 	umull	r4, r5, sl, r8
 8001754:	442b      	add	r3, r5
 8001756:	461d      	mov	r5, r3
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	f04f 0300 	mov.w	r3, #0
 8001760:	0aa2      	lsrs	r2, r4, #10
 8001762:	ea42 5285 	orr.w	r2, r2, r5, lsl #22
 8001766:	0aab      	lsrs	r3, r5, #10
 8001768:	4610      	mov	r0, r2
 800176a:	4619      	mov	r1, r3
 800176c:	f7fe ff1e 	bl	80005ac <__aeabi_ul2d>
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	4b6f      	ldr	r3, [pc, #444]	; (8001934 <FatfsTask+0x2ec>)
 8001776:	f7ff f879 	bl	800086c <__aeabi_ddiv>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	486e      	ldr	r0, [pc, #440]	; (8001938 <FatfsTask+0x2f0>)
 8001780:	f01c fdaa 	bl	801e2d8 <printf>
		 printf(" LogBlockNbr   : %ld \r\n", pCardInfo.LogBlockNbr); // 逻辑块数�????????????
 8001784:	f8d7 36a0 	ldr.w	r3, [r7, #1696]	; 0x6a0
 8001788:	4619      	mov	r1, r3
 800178a:	486c      	ldr	r0, [pc, #432]	; (800193c <FatfsTask+0x2f4>)
 800178c:	f01c fda4 	bl	801e2d8 <printf>
		 printf(" LogBlockSize  : %ld \r\n", pCardInfo.LogBlockSize);// 逻辑块大�????????????
 8001790:	f8d7 36a4 	ldr.w	r3, [r7, #1700]	; 0x6a4
 8001794:	4619      	mov	r1, r3
 8001796:	486a      	ldr	r0, [pc, #424]	; (8001940 <FatfsTask+0x2f8>)
 8001798:	f01c fd9e 	bl	801e2d8 <printf>
		 printf(" RCA           : %ld \r\n", pCardInfo.RelCardAdd);  // 卡相对地�????????????
 800179c:	f8d7 3694 	ldr.w	r3, [r7, #1684]	; 0x694
 80017a0:	4619      	mov	r1, r3
 80017a2:	4868      	ldr	r0, [pc, #416]	; (8001944 <FatfsTask+0x2fc>)
 80017a4:	f01c fd98 	bl	801e2d8 <printf>
		 printf(" CardType      : %ld \r\n", pCardInfo.CardType);    // 卡类�????????????
 80017a8:	f8d7 3688 	ldr.w	r3, [r7, #1672]	; 0x688
 80017ac:	4619      	mov	r1, r3
 80017ae:	4866      	ldr	r0, [pc, #408]	; (8001948 <FatfsTask+0x300>)
 80017b0:	f01c fd92 	bl	801e2d8 <printf>
		 // 读取并打印SD卡的CID信息
		 HAL_SD_CardCIDTypeDef sdcard_cid;
		 HAL_SD_GetCardCID(&hsd,&sdcard_cid);
 80017b4:	f107 0308 	add.w	r3, r7, #8
 80017b8:	4619      	mov	r1, r3
 80017ba:	4858      	ldr	r0, [pc, #352]	; (800191c <FatfsTask+0x2d4>)
 80017bc:	f005 fd16 	bl	80071ec <HAL_SD_GetCardCID>
		 printf(" ManufacturerID: %d \r\n",sdcard_cid.ManufacturerID);
 80017c0:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 80017c4:	f5a3 63e8 	sub.w	r3, r3, #1856	; 0x740
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	4619      	mov	r1, r3
 80017ce:	485f      	ldr	r0, [pc, #380]	; (800194c <FatfsTask+0x304>)
 80017d0:	f01c fd82 	bl	801e2d8 <printf>
	}
		/*2、新建test.txt文件*/
		sprintf(path, "%stest.txt",SDPath);
 80017d4:	f207 730c 	addw	r3, r7, #1804	; 0x70c
 80017d8:	4a4b      	ldr	r2, [pc, #300]	; (8001908 <FatfsTask+0x2c0>)
 80017da:	495d      	ldr	r1, [pc, #372]	; (8001950 <FatfsTask+0x308>)
 80017dc:	4618      	mov	r0, r3
 80017de:	f01c fdf7 	bl	801e3d0 <sprintf>
		ret = f_open (&SDFile1, path, FA_READ | FA_WRITE);
 80017e2:	f207 710c 	addw	r1, r7, #1804	; 0x70c
 80017e6:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80017ea:	2203      	movs	r2, #3
 80017ec:	4618      	mov	r0, r3
 80017ee:	f00b f895 	bl	800c91c <f_open>
 80017f2:	4603      	mov	r3, r0
 80017f4:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744
		if(ret != FR_OK){
 80017f8:	f8d7 3744 	ldr.w	r3, [r7, #1860]	; 0x744
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d005      	beq.n	800180c <FatfsTask+0x1c4>
			printf("f_open is err:%d\r\n",ret);
 8001800:	f8d7 1744 	ldr.w	r1, [r7, #1860]	; 0x744
 8001804:	4853      	ldr	r0, [pc, #332]	; (8001954 <FatfsTask+0x30c>)
 8001806:	f01c fd67 	bl	801e2d8 <printf>
			goto f_open_err;
 800180a:	e071      	b.n	80018f0 <FatfsTask+0x2a8>
		}
		/*将缓存写入文�?????????????????*/

		ret = f_write (&SDFile1, write_buff, strlen(write_buff), &bw);
 800180c:	f8d7 0740 	ldr.w	r0, [r7, #1856]	; 0x740
 8001810:	f7fe fcee 	bl	80001f0 <strlen>
 8001814:	4602      	mov	r2, r0
 8001816:	f507 7309 	add.w	r3, r7, #548	; 0x224
 800181a:	f507 608b 	add.w	r0, r7, #1112	; 0x458
 800181e:	f8d7 1740 	ldr.w	r1, [r7, #1856]	; 0x740
 8001822:	f00b fca8 	bl	800d176 <f_write>
 8001826:	4603      	mov	r3, r0
 8001828:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744
		if(ret != FR_OK){
 800182c:	f8d7 3744 	ldr.w	r3, [r7, #1860]	; 0x744
 8001830:	2b00      	cmp	r3, #0
 8001832:	d00b      	beq.n	800184c <FatfsTask+0x204>
				printf("f_write is err:%d\r\n",ret);
 8001834:	f8d7 1744 	ldr.w	r1, [r7, #1860]	; 0x744
 8001838:	4847      	ldr	r0, [pc, #284]	; (8001958 <FatfsTask+0x310>)
 800183a:	f01c fd4d 	bl	801e2d8 <printf>
				goto f_write_err;
 800183e:	bf00      	nop
		f_close (&SDFile2);
		f_mount(NULL, SDPath, 1);
		goto loop;
		/* Infinite loop */
	f_write_err:
		f_close (&SDFile1);
 8001840:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8001844:	4618      	mov	r0, r3
 8001846:	f00b fec3 	bl	800d5d0 <f_close>
 800184a:	e051      	b.n	80018f0 <FatfsTask+0x2a8>
		printf("write is ok: bw:%d\r\n",bw);
 800184c:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 8001850:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4619      	mov	r1, r3
 8001858:	4840      	ldr	r0, [pc, #256]	; (800195c <FatfsTask+0x314>)
 800185a:	f01c fd3d 	bl	801e2d8 <printf>
		sprintf(path, "%sxixi.txt",SDPath);
 800185e:	f207 730c 	addw	r3, r7, #1804	; 0x70c
 8001862:	4a29      	ldr	r2, [pc, #164]	; (8001908 <FatfsTask+0x2c0>)
 8001864:	493e      	ldr	r1, [pc, #248]	; (8001960 <FatfsTask+0x318>)
 8001866:	4618      	mov	r0, r3
 8001868:	f01c fdb2 	bl	801e3d0 <sprintf>
		ret = f_open (&SDFile2, path, FA_READ);
 800186c:	f207 710c 	addw	r1, r7, #1804	; 0x70c
 8001870:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001874:	2201      	movs	r2, #1
 8001876:	4618      	mov	r0, r3
 8001878:	f00b f850 	bl	800c91c <f_open>
 800187c:	4603      	mov	r3, r0
 800187e:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744
		if(ret != FR_OK){
 8001882:	f8d7 3744 	ldr.w	r3, [r7, #1860]	; 0x744
 8001886:	2b00      	cmp	r3, #0
 8001888:	d004      	beq.n	8001894 <FatfsTask+0x24c>
			printf("f_open is err:%d\r\n",ret);
 800188a:	f8d7 1744 	ldr.w	r1, [r7, #1860]	; 0x744
 800188e:	4831      	ldr	r0, [pc, #196]	; (8001954 <FatfsTask+0x30c>)
 8001890:	f01c fd22 	bl	801e2d8 <printf>
		ret = f_read (&SDFile2, readbuff, 16, &br);
 8001894:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001898:	f507 61d5 	add.w	r1, r7, #1704	; 0x6a8
 800189c:	f507 700a 	add.w	r0, r7, #552	; 0x228
 80018a0:	2210      	movs	r2, #16
 80018a2:	f00b fafa 	bl	800ce9a <f_read>
 80018a6:	4603      	mov	r3, r0
 80018a8:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744
		if(ret != FR_OK){
 80018ac:	f8d7 3744 	ldr.w	r3, [r7, #1860]	; 0x744
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d004      	beq.n	80018be <FatfsTask+0x276>
				printf("f_read is err:%d\r\n",ret);
 80018b4:	f8d7 1744 	ldr.w	r1, [r7, #1860]	; 0x744
 80018b8:	482a      	ldr	r0, [pc, #168]	; (8001964 <FatfsTask+0x31c>)
 80018ba:	f01c fd0d 	bl	801e2d8 <printf>
		readbuff[16] = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	f887 36b8 	strb.w	r3, [r7, #1720]	; 0x6b8
		printf("%s\r\n",readbuff);
 80018c4:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 80018c8:	4619      	mov	r1, r3
 80018ca:	4827      	ldr	r0, [pc, #156]	; (8001968 <FatfsTask+0x320>)
 80018cc:	f01c fd04 	bl	801e2d8 <printf>
		f_close (&SDFile1);
 80018d0:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80018d4:	4618      	mov	r0, r3
 80018d6:	f00b fe7b 	bl	800d5d0 <f_close>
		f_close (&SDFile2);
 80018da:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80018de:	4618      	mov	r0, r3
 80018e0:	f00b fe76 	bl	800d5d0 <f_close>
		f_mount(NULL, SDPath, 1);
 80018e4:	2201      	movs	r2, #1
 80018e6:	4908      	ldr	r1, [pc, #32]	; (8001908 <FatfsTask+0x2c0>)
 80018e8:	2000      	movs	r0, #0
 80018ea:	f00a ffb3 	bl	800c854 <f_mount>
		goto loop;
 80018ee:	e004      	b.n	80018fa <FatfsTask+0x2b2>
	f_open_err:
		f_mount(NULL, SDPath, 1);
 80018f0:	2201      	movs	r2, #1
 80018f2:	4905      	ldr	r1, [pc, #20]	; (8001908 <FatfsTask+0x2c0>)
 80018f4:	2000      	movs	r0, #0
 80018f6:	f00a ffad 	bl	800c854 <f_mount>
		loop:
	while(1){
		osDelay(1000);
 80018fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018fe:	f00c fd96 	bl	800e42e <osDelay>
 8001902:	e7fa      	b.n	80018fa <FatfsTask+0x2b2>
 8001904:	08024300 	.word	0x08024300
 8001908:	20000d0c 	.word	0x20000d0c
 800190c:	20000d10 	.word	0x20000d10
 8001910:	08024330 	.word	0x08024330
 8001914:	08024344 	.word	0x08024344
 8001918:	08024358 	.word	0x08024358
 800191c:	20000b78 	.word	0x20000b78
 8001920:	08024368 	.word	0x08024368
 8001924:	08024384 	.word	0x08024384
 8001928:	080243a8 	.word	0x080243a8
 800192c:	080243c0 	.word	0x080243c0
 8001930:	080243d8 	.word	0x080243d8
 8001934:	40900000 	.word	0x40900000
 8001938:	080243f0 	.word	0x080243f0
 800193c:	0802440c 	.word	0x0802440c
 8001940:	08024424 	.word	0x08024424
 8001944:	0802443c 	.word	0x0802443c
 8001948:	08024454 	.word	0x08024454
 800194c:	0802446c 	.word	0x0802446c
 8001950:	08024484 	.word	0x08024484
 8001954:	08024490 	.word	0x08024490
 8001958:	080244a4 	.word	0x080244a4
 800195c:	080244b8 	.word	0x080244b8
 8001960:	080244d0 	.word	0x080244d0
 8001964:	080244dc 	.word	0x080244dc
 8001968:	080244f0 	.word	0x080244f0

0800196c <LcdTask>:
	};
}


void LcdTask(void *argument){
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af02      	add	r7, sp, #8
 8001972:	6078      	str	r0, [r7, #4]

	while(1){
		draw_xy_wh_c(0, 0, 1024, 600, 0);
 8001974:	2300      	movs	r3, #0
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	f44f 7316 	mov.w	r3, #600	; 0x258
 800197c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001980:	2100      	movs	r1, #0
 8001982:	2000      	movs	r0, #0
 8001984:	f7ff fdd2 	bl	800152c <draw_xy_wh_c>
		draw_xy_wh_c(255, 149, 512, 300, 0xFF0000);
 8001988:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001996:	2195      	movs	r1, #149	; 0x95
 8001998:	20ff      	movs	r0, #255	; 0xff
 800199a:	f7ff fdc7 	bl	800152c <draw_xy_wh_c>
		osDelay(1000);
 800199e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019a2:	f00c fd44 	bl	800e42e <osDelay>
		draw_xy_wh_c(255, 149, 512, 300, 0x00FF00);
 80019a6:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80019b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019b4:	2195      	movs	r1, #149	; 0x95
 80019b6:	20ff      	movs	r0, #255	; 0xff
 80019b8:	f7ff fdb8 	bl	800152c <draw_xy_wh_c>
		osDelay(1000);
 80019bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019c0:	f00c fd35 	bl	800e42e <osDelay>
		draw_xy_wh_c(255, 149, 512, 300, 0x0000FF);
 80019c4:	23ff      	movs	r3, #255	; 0xff
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80019cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019d0:	2195      	movs	r1, #149	; 0x95
 80019d2:	20ff      	movs	r0, #255	; 0xff
 80019d4:	f7ff fdaa 	bl	800152c <draw_xy_wh_c>
		osDelay(1000);
 80019d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019dc:	f00c fd27 	bl	800e42e <osDelay>
		draw_xy_wh_c(255, 149, 512, 300, 0xFFFFFF);
 80019e0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80019ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ee:	2195      	movs	r1, #149	; 0x95
 80019f0:	20ff      	movs	r0, #255	; 0xff
 80019f2:	f7ff fd9b 	bl	800152c <draw_xy_wh_c>
		osDelay(1000);
 80019f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019fa:	f00c fd18 	bl	800e42e <osDelay>
		draw_xy_wh_c(0, 0, 1024, 600, 0);
 80019fe:	2300      	movs	r3, #0
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001a06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f7ff fd8d 	bl	800152c <draw_xy_wh_c>
		draw_xy_wh_img(411, 199, 200, 200, _1_IMAGE);
 8001a12:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <LcdTask+0xc4>)
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	23c8      	movs	r3, #200	; 0xc8
 8001a18:	22c8      	movs	r2, #200	; 0xc8
 8001a1a:	21c7      	movs	r1, #199	; 0xc7
 8001a1c:	f240 109b 	movw	r0, #411	; 0x19b
 8001a20:	f7ff fda9 	bl	8001576 <draw_xy_wh_img>
		osDelay(1000);
 8001a24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a28:	f00c fd01 	bl	800e42e <osDelay>
		draw_xy_wh_c(0, 0, 1024, 600, 0);
 8001a2c:	e7a2      	b.n	8001974 <LcdTask+0x8>
 8001a2e:	bf00      	nop
 8001a30:	080273e4 	.word	0x080273e4

08001a34 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08e      	sub	sp, #56	; 0x38
 8001a38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	609a      	str	r2, [r3, #8]
 8001a46:	60da      	str	r2, [r3, #12]
 8001a48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	623b      	str	r3, [r7, #32]
 8001a4e:	4b9a      	ldr	r3, [pc, #616]	; (8001cb8 <MX_GPIO_Init+0x284>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a99      	ldr	r2, [pc, #612]	; (8001cb8 <MX_GPIO_Init+0x284>)
 8001a54:	f043 0310 	orr.w	r3, r3, #16
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b97      	ldr	r3, [pc, #604]	; (8001cb8 <MX_GPIO_Init+0x284>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0310 	and.w	r3, r3, #16
 8001a62:	623b      	str	r3, [r7, #32]
 8001a64:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
 8001a6a:	4b93      	ldr	r3, [pc, #588]	; (8001cb8 <MX_GPIO_Init+0x284>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a92      	ldr	r2, [pc, #584]	; (8001cb8 <MX_GPIO_Init+0x284>)
 8001a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b90      	ldr	r3, [pc, #576]	; (8001cb8 <MX_GPIO_Init+0x284>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7e:	61fb      	str	r3, [r7, #28]
 8001a80:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	61bb      	str	r3, [r7, #24]
 8001a86:	4b8c      	ldr	r3, [pc, #560]	; (8001cb8 <MX_GPIO_Init+0x284>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a8b      	ldr	r2, [pc, #556]	; (8001cb8 <MX_GPIO_Init+0x284>)
 8001a8c:	f043 0304 	orr.w	r3, r3, #4
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b89      	ldr	r3, [pc, #548]	; (8001cb8 <MX_GPIO_Init+0x284>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	61bb      	str	r3, [r7, #24]
 8001a9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	4b85      	ldr	r3, [pc, #532]	; (8001cb8 <MX_GPIO_Init+0x284>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	4a84      	ldr	r2, [pc, #528]	; (8001cb8 <MX_GPIO_Init+0x284>)
 8001aa8:	f043 0320 	orr.w	r3, r3, #32
 8001aac:	6313      	str	r3, [r2, #48]	; 0x30
 8001aae:	4b82      	ldr	r3, [pc, #520]	; (8001cb8 <MX_GPIO_Init+0x284>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f003 0320 	and.w	r3, r3, #32
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	4b7e      	ldr	r3, [pc, #504]	; (8001cb8 <MX_GPIO_Init+0x284>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a7d      	ldr	r2, [pc, #500]	; (8001cb8 <MX_GPIO_Init+0x284>)
 8001ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b7b      	ldr	r3, [pc, #492]	; (8001cb8 <MX_GPIO_Init+0x284>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	4b77      	ldr	r3, [pc, #476]	; (8001cb8 <MX_GPIO_Init+0x284>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a76      	ldr	r2, [pc, #472]	; (8001cb8 <MX_GPIO_Init+0x284>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b74      	ldr	r3, [pc, #464]	; (8001cb8 <MX_GPIO_Init+0x284>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	4b70      	ldr	r3, [pc, #448]	; (8001cb8 <MX_GPIO_Init+0x284>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a6f      	ldr	r2, [pc, #444]	; (8001cb8 <MX_GPIO_Init+0x284>)
 8001afc:	f043 0302 	orr.w	r3, r3, #2
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b6d      	ldr	r3, [pc, #436]	; (8001cb8 <MX_GPIO_Init+0x284>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	4b69      	ldr	r3, [pc, #420]	; (8001cb8 <MX_GPIO_Init+0x284>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a68      	ldr	r2, [pc, #416]	; (8001cb8 <MX_GPIO_Init+0x284>)
 8001b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b66      	ldr	r3, [pc, #408]	; (8001cb8 <MX_GPIO_Init+0x284>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	603b      	str	r3, [r7, #0]
 8001b2e:	4b62      	ldr	r3, [pc, #392]	; (8001cb8 <MX_GPIO_Init+0x284>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	4a61      	ldr	r2, [pc, #388]	; (8001cb8 <MX_GPIO_Init+0x284>)
 8001b34:	f043 0308 	orr.w	r3, r3, #8
 8001b38:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3a:	4b5f      	ldr	r3, [pc, #380]	; (8001cb8 <MX_GPIO_Init+0x284>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	603b      	str	r3, [r7, #0]
 8001b44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_SET);
 8001b46:	2201      	movs	r2, #1
 8001b48:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001b4c:	485b      	ldr	r0, [pc, #364]	; (8001cbc <MX_GPIO_Init+0x288>)
 8001b4e:	f003 fddb 	bl	8005708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8001b52:	2201      	movs	r2, #1
 8001b54:	2180      	movs	r1, #128	; 0x80
 8001b56:	485a      	ldr	r0, [pc, #360]	; (8001cc0 <MX_GPIO_Init+0x28c>)
 8001b58:	f003 fdd6 	bl	8005708 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b5c:	230c      	movs	r3, #12
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b60:	2303      	movs	r3, #3
 8001b62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4855      	ldr	r0, [pc, #340]	; (8001cc4 <MX_GPIO_Init+0x290>)
 8001b70:	f003 fc1e 	bl	80053b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI11 PI1 PI3
                           PI5 PI6 PI7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_1|GPIO_PIN_3
 8001b74:	f640 13ea 	movw	r3, #2538	; 0x9ea
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b86:	4619      	mov	r1, r3
 8001b88:	484f      	ldr	r0, [pc, #316]	; (8001cc8 <MX_GPIO_Init+0x294>)
 8001b8a:	f003 fc11 	bl	80053b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b94:	2300      	movs	r3, #0
 8001b96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	484a      	ldr	r0, [pc, #296]	; (8001ccc <MX_GPIO_Init+0x298>)
 8001ba4:	f003 fc04 	bl	80053b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001ba8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4844      	ldr	r0, [pc, #272]	; (8001cd0 <MX_GPIO_Init+0x29c>)
 8001bbe:	f003 fbf7 	bl	80053b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6;
 8001bc2:	234c      	movs	r3, #76	; 0x4c
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	483d      	ldr	r0, [pc, #244]	; (8001ccc <MX_GPIO_Init+0x298>)
 8001bd6:	f003 fbeb 	bl	80053b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bde:	2300      	movs	r3, #0
 8001be0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bea:	4619      	mov	r1, r3
 8001bec:	4839      	ldr	r0, [pc, #228]	; (8001cd4 <MX_GPIO_Init+0x2a0>)
 8001bee:	f003 fbdf 	bl	80053b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH4 PH5 PH9 PH13
                           PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_13
 8001bf2:	f24a 2330 	movw	r3, #41520	; 0xa230
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c04:	4619      	mov	r1, r3
 8001c06:	482d      	ldr	r0, [pc, #180]	; (8001cbc <MX_GPIO_Init+0x288>)
 8001c08:	f003 fbd2 	bl	80053b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
 8001c0c:	f248 1330 	movw	r3, #33072	; 0x8130
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c12:	2303      	movs	r3, #3
 8001c14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c1e:	4619      	mov	r1, r3
 8001c20:	482c      	ldr	r0, [pc, #176]	; (8001cd4 <MX_GPIO_Init+0x2a0>)
 8001c22:	f003 fbc5 	bl	80053b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001c26:	f24f 03fc 	movw	r3, #61692	; 0xf0fc
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4827      	ldr	r0, [pc, #156]	; (8001cd8 <MX_GPIO_Init+0x2a4>)
 8001c3c:	f003 fbb8 	bl	80053b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH10 PH11 PH12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001c40:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c46:	2301      	movs	r3, #1
 8001c48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c56:	4619      	mov	r1, r3
 8001c58:	4818      	ldr	r0, [pc, #96]	; (8001cbc <MX_GPIO_Init+0x288>)
 8001c5a:	f003 fba9 	bl	80053b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 PD3
                           PD4 PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 8001c5e:	f643 0338 	movw	r3, #14392	; 0x3838
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c64:	2303      	movs	r3, #3
 8001c66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c70:	4619      	mov	r1, r3
 8001c72:	4813      	ldr	r0, [pc, #76]	; (8001cc0 <MX_GPIO_Init+0x28c>)
 8001c74:	f003 fb9c 	bl	80053b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PG3 PG9 PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10;
 8001c78:	f240 630c 	movw	r3, #1548	; 0x60c
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4813      	ldr	r0, [pc, #76]	; (8001cdc <MX_GPIO_Init+0x2a8>)
 8001c8e:	f003 fb8f 	bl	80053b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c92:	2380      	movs	r3, #128	; 0x80
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c96:	2301      	movs	r3, #1
 8001c98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4805      	ldr	r0, [pc, #20]	; (8001cc0 <MX_GPIO_Init+0x28c>)
 8001caa:	f003 fb81 	bl	80053b0 <HAL_GPIO_Init>

}
 8001cae:	bf00      	nop
 8001cb0:	3738      	adds	r7, #56	; 0x38
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40021c00 	.word	0x40021c00
 8001cc0:	40020c00 	.word	0x40020c00
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	40022000 	.word	0x40022000
 8001ccc:	40020800 	.word	0x40020800
 8001cd0:	40021400 	.word	0x40021400
 8001cd4:	40020000 	.word	0x40020000
 8001cd8:	40020400 	.word	0x40020400
 8001cdc:	40021800 	.word	0x40021800

08001ce0 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08e      	sub	sp, #56	; 0x38
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001ce6:	1d3b      	adds	r3, r7, #4
 8001ce8:	2234      	movs	r2, #52	; 0x34
 8001cea:	2100      	movs	r1, #0
 8001cec:	4618      	mov	r0, r3
 8001cee:	f01c faeb 	bl	801e2c8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001cf2:	4b3a      	ldr	r3, [pc, #232]	; (8001ddc <MX_LTDC_Init+0xfc>)
 8001cf4:	4a3a      	ldr	r2, [pc, #232]	; (8001de0 <MX_LTDC_Init+0x100>)
 8001cf6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001cf8:	4b38      	ldr	r3, [pc, #224]	; (8001ddc <MX_LTDC_Init+0xfc>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001cfe:	4b37      	ldr	r3, [pc, #220]	; (8001ddc <MX_LTDC_Init+0xfc>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001d04:	4b35      	ldr	r3, [pc, #212]	; (8001ddc <MX_LTDC_Init+0xfc>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001d0a:	4b34      	ldr	r3, [pc, #208]	; (8001ddc <MX_LTDC_Init+0xfc>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 19;
 8001d10:	4b32      	ldr	r3, [pc, #200]	; (8001ddc <MX_LTDC_Init+0xfc>)
 8001d12:	2213      	movs	r2, #19
 8001d14:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 2;
 8001d16:	4b31      	ldr	r3, [pc, #196]	; (8001ddc <MX_LTDC_Init+0xfc>)
 8001d18:	2202      	movs	r2, #2
 8001d1a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 159;
 8001d1c:	4b2f      	ldr	r3, [pc, #188]	; (8001ddc <MX_LTDC_Init+0xfc>)
 8001d1e:	229f      	movs	r2, #159	; 0x9f
 8001d20:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 22;
 8001d22:	4b2e      	ldr	r3, [pc, #184]	; (8001ddc <MX_LTDC_Init+0xfc>)
 8001d24:	2216      	movs	r2, #22
 8001d26:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 1183;
 8001d28:	4b2c      	ldr	r3, [pc, #176]	; (8001ddc <MX_LTDC_Init+0xfc>)
 8001d2a:	f240 429f 	movw	r2, #1183	; 0x49f
 8001d2e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 622;
 8001d30:	4b2a      	ldr	r3, [pc, #168]	; (8001ddc <MX_LTDC_Init+0xfc>)
 8001d32:	f240 226e 	movw	r2, #622	; 0x26e
 8001d36:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 1343;
 8001d38:	4b28      	ldr	r3, [pc, #160]	; (8001ddc <MX_LTDC_Init+0xfc>)
 8001d3a:	f240 523f 	movw	r2, #1343	; 0x53f
 8001d3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 634;
 8001d40:	4b26      	ldr	r3, [pc, #152]	; (8001ddc <MX_LTDC_Init+0xfc>)
 8001d42:	f240 227a 	movw	r2, #634	; 0x27a
 8001d46:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001d48:	4b24      	ldr	r3, [pc, #144]	; (8001ddc <MX_LTDC_Init+0xfc>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001d50:	4b22      	ldr	r3, [pc, #136]	; (8001ddc <MX_LTDC_Init+0xfc>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001d58:	4b20      	ldr	r3, [pc, #128]	; (8001ddc <MX_LTDC_Init+0xfc>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001d60:	481e      	ldr	r0, [pc, #120]	; (8001ddc <MX_LTDC_Init+0xfc>)
 8001d62:	f003 fd05 	bl	8005770 <HAL_LTDC_Init>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001d6c:	f000 fa46 	bl	80021fc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 1024;
 8001d74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d78:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 600;
 8001d7e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001d82:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8001d84:	2301      	movs	r3, #1
 8001d86:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001d88:	23ff      	movs	r3, #255	; 0xff
 8001d8a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001d90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d94:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001d96:	2305      	movs	r3, #5
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8001d9a:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8001d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 1024;
 8001da0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 600;
 8001da6:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001daa:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001dbe:	1d3b      	adds	r3, r7, #4
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4805      	ldr	r0, [pc, #20]	; (8001ddc <MX_LTDC_Init+0xfc>)
 8001dc6:	f003 fda3 	bl	8005910 <HAL_LTDC_ConfigLayer>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001dd0:	f000 fa14 	bl	80021fc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001dd4:	bf00      	nop
 8001dd6:	3738      	adds	r7, #56	; 0x38
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20000ac0 	.word	0x20000ac0
 8001de0:	40016800 	.word	0x40016800

08001de4 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b09e      	sub	sp, #120	; 0x78
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dfc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e00:	2230      	movs	r2, #48	; 0x30
 8001e02:	2100      	movs	r1, #0
 8001e04:	4618      	mov	r0, r3
 8001e06:	f01c fa5f 	bl	801e2c8 <memset>
  if(ltdcHandle->Instance==LTDC)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4aa6      	ldr	r2, [pc, #664]	; (80020a8 <HAL_LTDC_MspInit+0x2c4>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	f040 8144 	bne.w	800209e <HAL_LTDC_MspInit+0x2ba>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001e16:	2308      	movs	r3, #8
 8001e18:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 8001e1a:	233c      	movs	r3, #60	; 0x3c
 8001e1c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001e22:	2300      	movs	r3, #0
 8001e24:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f004 fbee 	bl	800660c <HAL_RCCEx_PeriphCLKConfig>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001e36:	f000 f9e1 	bl	80021fc <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	633b      	str	r3, [r7, #48]	; 0x30
 8001e3e:	4b9b      	ldr	r3, [pc, #620]	; (80020ac <HAL_LTDC_MspInit+0x2c8>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	4a9a      	ldr	r2, [pc, #616]	; (80020ac <HAL_LTDC_MspInit+0x2c8>)
 8001e44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e48:	6453      	str	r3, [r2, #68]	; 0x44
 8001e4a:	4b98      	ldr	r3, [pc, #608]	; (80020ac <HAL_LTDC_MspInit+0x2c8>)
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e52:	633b      	str	r3, [r7, #48]	; 0x30
 8001e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e5a:	4b94      	ldr	r3, [pc, #592]	; (80020ac <HAL_LTDC_MspInit+0x2c8>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	4a93      	ldr	r2, [pc, #588]	; (80020ac <HAL_LTDC_MspInit+0x2c8>)
 8001e60:	f043 0310 	orr.w	r3, r3, #16
 8001e64:	6313      	str	r3, [r2, #48]	; 0x30
 8001e66:	4b91      	ldr	r3, [pc, #580]	; (80020ac <HAL_LTDC_MspInit+0x2c8>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	f003 0310 	and.w	r3, r3, #16
 8001e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e76:	4b8d      	ldr	r3, [pc, #564]	; (80020ac <HAL_LTDC_MspInit+0x2c8>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	4a8c      	ldr	r2, [pc, #560]	; (80020ac <HAL_LTDC_MspInit+0x2c8>)
 8001e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e80:	6313      	str	r3, [r2, #48]	; 0x30
 8001e82:	4b8a      	ldr	r3, [pc, #552]	; (80020ac <HAL_LTDC_MspInit+0x2c8>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
 8001e92:	4b86      	ldr	r3, [pc, #536]	; (80020ac <HAL_LTDC_MspInit+0x2c8>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	4a85      	ldr	r2, [pc, #532]	; (80020ac <HAL_LTDC_MspInit+0x2c8>)
 8001e98:	f043 0320 	orr.w	r3, r3, #32
 8001e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9e:	4b83      	ldr	r3, [pc, #524]	; (80020ac <HAL_LTDC_MspInit+0x2c8>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	f003 0320 	and.w	r3, r3, #32
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	623b      	str	r3, [r7, #32]
 8001eae:	4b7f      	ldr	r3, [pc, #508]	; (80020ac <HAL_LTDC_MspInit+0x2c8>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	4a7e      	ldr	r2, [pc, #504]	; (80020ac <HAL_LTDC_MspInit+0x2c8>)
 8001eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eba:	4b7c      	ldr	r3, [pc, #496]	; (80020ac <HAL_LTDC_MspInit+0x2c8>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec2:	623b      	str	r3, [r7, #32]
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
 8001eca:	4b78      	ldr	r3, [pc, #480]	; (80020ac <HAL_LTDC_MspInit+0x2c8>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	4a77      	ldr	r2, [pc, #476]	; (80020ac <HAL_LTDC_MspInit+0x2c8>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed6:	4b75      	ldr	r3, [pc, #468]	; (80020ac <HAL_LTDC_MspInit+0x2c8>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	61fb      	str	r3, [r7, #28]
 8001ee0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61bb      	str	r3, [r7, #24]
 8001ee6:	4b71      	ldr	r3, [pc, #452]	; (80020ac <HAL_LTDC_MspInit+0x2c8>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	4a70      	ldr	r2, [pc, #448]	; (80020ac <HAL_LTDC_MspInit+0x2c8>)
 8001eec:	f043 0302 	orr.w	r3, r3, #2
 8001ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef2:	4b6e      	ldr	r3, [pc, #440]	; (80020ac <HAL_LTDC_MspInit+0x2c8>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	61bb      	str	r3, [r7, #24]
 8001efc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	617b      	str	r3, [r7, #20]
 8001f02:	4b6a      	ldr	r3, [pc, #424]	; (80020ac <HAL_LTDC_MspInit+0x2c8>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	4a69      	ldr	r2, [pc, #420]	; (80020ac <HAL_LTDC_MspInit+0x2c8>)
 8001f08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0e:	4b67      	ldr	r3, [pc, #412]	; (80020ac <HAL_LTDC_MspInit+0x2c8>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f16:	617b      	str	r3, [r7, #20]
 8001f18:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	613b      	str	r3, [r7, #16]
 8001f1e:	4b63      	ldr	r3, [pc, #396]	; (80020ac <HAL_LTDC_MspInit+0x2c8>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	4a62      	ldr	r2, [pc, #392]	; (80020ac <HAL_LTDC_MspInit+0x2c8>)
 8001f24:	f043 0304 	orr.w	r3, r3, #4
 8001f28:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2a:	4b60      	ldr	r3, [pc, #384]	; (80020ac <HAL_LTDC_MspInit+0x2c8>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	f003 0304 	and.w	r3, r3, #4
 8001f32:	613b      	str	r3, [r7, #16]
 8001f34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	4b5c      	ldr	r3, [pc, #368]	; (80020ac <HAL_LTDC_MspInit+0x2c8>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	4a5b      	ldr	r2, [pc, #364]	; (80020ac <HAL_LTDC_MspInit+0x2c8>)
 8001f40:	f043 0308 	orr.w	r3, r3, #8
 8001f44:	6313      	str	r3, [r2, #48]	; 0x30
 8001f46:	4b59      	ldr	r3, [pc, #356]	; (80020ac <HAL_LTDC_MspInit+0x2c8>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
    PG12     ------> LTDC_B1
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    PI4     ------> LTDC_B4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001f52:	2370      	movs	r3, #112	; 0x70
 8001f54:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f56:	2302      	movs	r3, #2
 8001f58:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f62:	230e      	movs	r3, #14
 8001f64:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f66:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4850      	ldr	r0, [pc, #320]	; (80020b0 <HAL_LTDC_MspInit+0x2cc>)
 8001f6e:	f003 fa1f 	bl	80053b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_2
 8001f72:	f240 6315 	movw	r3, #1557	; 0x615
 8001f76:	667b      	str	r3, [r7, #100]	; 0x64
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f80:	2303      	movs	r3, #3
 8001f82:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f84:	230e      	movs	r3, #14
 8001f86:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001f88:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4849      	ldr	r0, [pc, #292]	; (80020b4 <HAL_LTDC_MspInit+0x2d0>)
 8001f90:	f003 fa0e 	bl	80053b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f98:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001fa6:	230e      	movs	r3, #14
 8001fa8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001faa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4841      	ldr	r0, [pc, #260]	; (80020b8 <HAL_LTDC_MspInit+0x2d4>)
 8001fb2:	f003 f9fd 	bl	80053b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_14;
 8001fb6:	f244 130c 	movw	r3, #16652	; 0x410c
 8001fba:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001fc8:	230e      	movs	r3, #14
 8001fca:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001fcc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	483a      	ldr	r0, [pc, #232]	; (80020bc <HAL_LTDC_MspInit+0x2d8>)
 8001fd4:	f003 f9ec 	bl	80053b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_11|GPIO_PIN_12;
 8001fd8:	f641 0348 	movw	r3, #6216	; 0x1848
 8001fdc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001fea:	230e      	movs	r3, #14
 8001fec:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4832      	ldr	r0, [pc, #200]	; (80020c0 <HAL_LTDC_MspInit+0x2dc>)
 8001ff6:	f003 f9db 	bl	80053b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffe:	2302      	movs	r3, #2
 8002000:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002006:	2303      	movs	r3, #3
 8002008:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800200a:	2309      	movs	r3, #9
 800200c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800200e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002012:	4619      	mov	r1, r3
 8002014:	482b      	ldr	r0, [pc, #172]	; (80020c4 <HAL_LTDC_MspInit+0x2e0>)
 8002016:	f003 f9cb 	bl	80053b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_9;
 800201a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800201e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002020:	2302      	movs	r3, #2
 8002022:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002028:	2303      	movs	r3, #3
 800202a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800202c:	230e      	movs	r3, #14
 800202e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002030:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002034:	4619      	mov	r1, r3
 8002036:	4823      	ldr	r0, [pc, #140]	; (80020c4 <HAL_LTDC_MspInit+0x2e0>)
 8002038:	f003 f9ba 	bl	80053b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_12;
 800203c:	f44f 53c6 	mov.w	r3, #6336	; 0x18c0
 8002040:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002042:	2302      	movs	r3, #2
 8002044:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204a:	2303      	movs	r3, #3
 800204c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800204e:	230e      	movs	r3, #14
 8002050:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002052:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002056:	4619      	mov	r1, r3
 8002058:	481b      	ldr	r0, [pc, #108]	; (80020c8 <HAL_LTDC_MspInit+0x2e4>)
 800205a:	f003 f9a9 	bl	80053b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800205e:	2380      	movs	r3, #128	; 0x80
 8002060:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002062:	2302      	movs	r3, #2
 8002064:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206a:	2303      	movs	r3, #3
 800206c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800206e:	230e      	movs	r3, #14
 8002070:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002072:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002076:	4619      	mov	r1, r3
 8002078:	4814      	ldr	r0, [pc, #80]	; (80020cc <HAL_LTDC_MspInit+0x2e8>)
 800207a:	f003 f999 	bl	80053b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800207e:	2340      	movs	r3, #64	; 0x40
 8002080:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002082:	2302      	movs	r3, #2
 8002084:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208a:	2303      	movs	r3, #3
 800208c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800208e:	230e      	movs	r3, #14
 8002090:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002092:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002096:	4619      	mov	r1, r3
 8002098:	480d      	ldr	r0, [pc, #52]	; (80020d0 <HAL_LTDC_MspInit+0x2ec>)
 800209a:	f003 f989 	bl	80053b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800209e:	bf00      	nop
 80020a0:	3778      	adds	r7, #120	; 0x78
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40016800 	.word	0x40016800
 80020ac:	40023800 	.word	0x40023800
 80020b0:	40021000 	.word	0x40021000
 80020b4:	40022000 	.word	0x40022000
 80020b8:	40021400 	.word	0x40021400
 80020bc:	40021c00 	.word	0x40021c00
 80020c0:	40020000 	.word	0x40020000
 80020c4:	40020400 	.word	0x40020400
 80020c8:	40021800 	.word	0x40021800
 80020cc:	40020800 	.word	0x40020800
 80020d0:	40020c00 	.word	0x40020c00

080020d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020d8:	f000 fbde 	bl	8002898 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020dc:	f000 f81e 	bl	800211c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020e0:	f7ff fca8 	bl	8001a34 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 80020e4:	f000 f8c6 	bl	8002274 <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 80020e8:	f000 fb28 	bl	800273c <MX_USART1_UART_Init>
  MX_DMA_Init();
 80020ec:	f7fe ff9a 	bl	8001024 <MX_DMA_Init>
  MX_FATFS_Init();
 80020f0:	f007 faf6 	bl	80096e0 <MX_FATFS_Init>
  MX_CRC_Init();
 80020f4:	f7fe ff60 	bl	8000fb8 <MX_CRC_Init>
  MX_DMA2D_Init();
 80020f8:	f7fe ffbc 	bl	8001074 <MX_DMA2D_Init>
  MX_FMC_Init();
 80020fc:	f7ff f89e 	bl	800123c <MX_FMC_Init>
  MX_LTDC_Init();
 8002100:	f7ff fdee 	bl	8001ce0 <MX_LTDC_Init>
  MX_RNG_Init();
 8002104:	f000 f880 	bl	8002208 <MX_RNG_Init>
  MX_ADC1_Init();
 8002108:	f7fe fee0 	bl	8000ecc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800210c:	f00c f87c 	bl	800e208 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002110:	f7ff f984 	bl	800141c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002114:	f00c f8be 	bl	800e294 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002118:	e7fe      	b.n	8002118 <main+0x44>
	...

0800211c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b094      	sub	sp, #80	; 0x50
 8002120:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002122:	f107 0320 	add.w	r3, r7, #32
 8002126:	2230      	movs	r2, #48	; 0x30
 8002128:	2100      	movs	r1, #0
 800212a:	4618      	mov	r0, r3
 800212c:	f01c f8cc 	bl	801e2c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002130:	f107 030c 	add.w	r3, r7, #12
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002140:	2300      	movs	r3, #0
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	4b2b      	ldr	r3, [pc, #172]	; (80021f4 <SystemClock_Config+0xd8>)
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	4a2a      	ldr	r2, [pc, #168]	; (80021f4 <SystemClock_Config+0xd8>)
 800214a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800214e:	6413      	str	r3, [r2, #64]	; 0x40
 8002150:	4b28      	ldr	r3, [pc, #160]	; (80021f4 <SystemClock_Config+0xd8>)
 8002152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800215c:	2300      	movs	r3, #0
 800215e:	607b      	str	r3, [r7, #4]
 8002160:	4b25      	ldr	r3, [pc, #148]	; (80021f8 <SystemClock_Config+0xdc>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a24      	ldr	r2, [pc, #144]	; (80021f8 <SystemClock_Config+0xdc>)
 8002166:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800216a:	6013      	str	r3, [r2, #0]
 800216c:	4b22      	ldr	r3, [pc, #136]	; (80021f8 <SystemClock_Config+0xdc>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002174:	607b      	str	r3, [r7, #4]
 8002176:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002178:	2301      	movs	r3, #1
 800217a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800217c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002182:	2302      	movs	r3, #2
 8002184:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002186:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800218a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800218c:	230f      	movs	r3, #15
 800218e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002190:	23d8      	movs	r3, #216	; 0xd8
 8002192:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002194:	2302      	movs	r3, #2
 8002196:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002198:	2308      	movs	r3, #8
 800219a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800219c:	f107 0320 	add.w	r3, r7, #32
 80021a0:	4618      	mov	r0, r3
 80021a2:	f003 fddb 	bl	8005d5c <HAL_RCC_OscConfig>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80021ac:	f000 f826 	bl	80021fc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80021b0:	f003 fd84 	bl	8005cbc <HAL_PWREx_EnableOverDrive>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80021ba:	f000 f81f 	bl	80021fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021be:	230f      	movs	r3, #15
 80021c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021c2:	2302      	movs	r3, #2
 80021c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021c6:	2300      	movs	r3, #0
 80021c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80021ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80021d6:	f107 030c 	add.w	r3, r7, #12
 80021da:	2105      	movs	r1, #5
 80021dc:	4618      	mov	r0, r3
 80021de:	f004 f835 	bl	800624c <HAL_RCC_ClockConfig>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80021e8:	f000 f808 	bl	80021fc <Error_Handler>
  }
}
 80021ec:	bf00      	nop
 80021ee:	3750      	adds	r7, #80	; 0x50
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40007000 	.word	0x40007000

080021fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002200:	b672      	cpsid	i
}
 8002202:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002204:	e7fe      	b.n	8002204 <Error_Handler+0x8>
	...

08002208 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800220c:	4b06      	ldr	r3, [pc, #24]	; (8002228 <MX_RNG_Init+0x20>)
 800220e:	4a07      	ldr	r2, [pc, #28]	; (800222c <MX_RNG_Init+0x24>)
 8002210:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002212:	4805      	ldr	r0, [pc, #20]	; (8002228 <MX_RNG_Init+0x20>)
 8002214:	f004 fbba 	bl	800698c <HAL_RNG_Init>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800221e:	f7ff ffed 	bl	80021fc <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20000b68 	.word	0x20000b68
 800222c:	50060800 	.word	0x50060800

08002230 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a0b      	ldr	r2, [pc, #44]	; (800226c <HAL_RNG_MspInit+0x3c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d10d      	bne.n	800225e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	4b0a      	ldr	r3, [pc, #40]	; (8002270 <HAL_RNG_MspInit+0x40>)
 8002248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800224a:	4a09      	ldr	r2, [pc, #36]	; (8002270 <HAL_RNG_MspInit+0x40>)
 800224c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002250:	6353      	str	r3, [r2, #52]	; 0x34
 8002252:	4b07      	ldr	r3, [pc, #28]	; (8002270 <HAL_RNG_MspInit+0x40>)
 8002254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800225e:	bf00      	nop
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	50060800 	.word	0x50060800
 8002270:	40023800 	.word	0x40023800

08002274 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002278:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <MX_SDIO_SD_Init+0x38>)
 800227a:	4a0d      	ldr	r2, [pc, #52]	; (80022b0 <MX_SDIO_SD_Init+0x3c>)
 800227c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800227e:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <MX_SDIO_SD_Init+0x38>)
 8002280:	2200      	movs	r2, #0
 8002282:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002284:	4b09      	ldr	r3, [pc, #36]	; (80022ac <MX_SDIO_SD_Init+0x38>)
 8002286:	2200      	movs	r2, #0
 8002288:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800228a:	4b08      	ldr	r3, [pc, #32]	; (80022ac <MX_SDIO_SD_Init+0x38>)
 800228c:	2200      	movs	r2, #0
 800228e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <MX_SDIO_SD_Init+0x38>)
 8002292:	2200      	movs	r2, #0
 8002294:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002296:	4b05      	ldr	r3, [pc, #20]	; (80022ac <MX_SDIO_SD_Init+0x38>)
 8002298:	2200      	movs	r2, #0
 800229a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800229c:	4b03      	ldr	r3, [pc, #12]	; (80022ac <MX_SDIO_SD_Init+0x38>)
 800229e:	2200      	movs	r2, #0
 80022a0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80022a2:	bf00      	nop
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	20000b78 	.word	0x20000b78
 80022b0:	40012c00 	.word	0x40012c00

080022b4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08a      	sub	sp, #40	; 0x28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a68      	ldr	r2, [pc, #416]	; (8002474 <HAL_SD_MspInit+0x1c0>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	f040 80c9 	bne.w	800246a <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80022d8:	2300      	movs	r3, #0
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	4b66      	ldr	r3, [pc, #408]	; (8002478 <HAL_SD_MspInit+0x1c4>)
 80022de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e0:	4a65      	ldr	r2, [pc, #404]	; (8002478 <HAL_SD_MspInit+0x1c4>)
 80022e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022e6:	6453      	str	r3, [r2, #68]	; 0x44
 80022e8:	4b63      	ldr	r3, [pc, #396]	; (8002478 <HAL_SD_MspInit+0x1c4>)
 80022ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f4:	2300      	movs	r3, #0
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	4b5f      	ldr	r3, [pc, #380]	; (8002478 <HAL_SD_MspInit+0x1c4>)
 80022fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fc:	4a5e      	ldr	r2, [pc, #376]	; (8002478 <HAL_SD_MspInit+0x1c4>)
 80022fe:	f043 0304 	orr.w	r3, r3, #4
 8002302:	6313      	str	r3, [r2, #48]	; 0x30
 8002304:	4b5c      	ldr	r3, [pc, #368]	; (8002478 <HAL_SD_MspInit+0x1c4>)
 8002306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002310:	2300      	movs	r3, #0
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	4b58      	ldr	r3, [pc, #352]	; (8002478 <HAL_SD_MspInit+0x1c4>)
 8002316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002318:	4a57      	ldr	r2, [pc, #348]	; (8002478 <HAL_SD_MspInit+0x1c4>)
 800231a:	f043 0308 	orr.w	r3, r3, #8
 800231e:	6313      	str	r3, [r2, #48]	; 0x30
 8002320:	4b55      	ldr	r3, [pc, #340]	; (8002478 <HAL_SD_MspInit+0x1c4>)
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002324:	f003 0308 	and.w	r3, r3, #8
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800232c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002330:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002332:	2302      	movs	r3, #2
 8002334:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800233a:	2303      	movs	r3, #3
 800233c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800233e:	230c      	movs	r3, #12
 8002340:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002342:	f107 0314 	add.w	r3, r7, #20
 8002346:	4619      	mov	r1, r3
 8002348:	484c      	ldr	r0, [pc, #304]	; (800247c <HAL_SD_MspInit+0x1c8>)
 800234a:	f003 f831 	bl	80053b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800234e:	2304      	movs	r3, #4
 8002350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002352:	2302      	movs	r3, #2
 8002354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800235a:	2303      	movs	r3, #3
 800235c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800235e:	230c      	movs	r3, #12
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002362:	f107 0314 	add.w	r3, r7, #20
 8002366:	4619      	mov	r1, r3
 8002368:	4845      	ldr	r0, [pc, #276]	; (8002480 <HAL_SD_MspInit+0x1cc>)
 800236a:	f003 f821 	bl	80053b0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800236e:	4b45      	ldr	r3, [pc, #276]	; (8002484 <HAL_SD_MspInit+0x1d0>)
 8002370:	4a45      	ldr	r2, [pc, #276]	; (8002488 <HAL_SD_MspInit+0x1d4>)
 8002372:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8002374:	4b43      	ldr	r3, [pc, #268]	; (8002484 <HAL_SD_MspInit+0x1d0>)
 8002376:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800237a:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800237c:	4b41      	ldr	r3, [pc, #260]	; (8002484 <HAL_SD_MspInit+0x1d0>)
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002382:	4b40      	ldr	r3, [pc, #256]	; (8002484 <HAL_SD_MspInit+0x1d0>)
 8002384:	2200      	movs	r2, #0
 8002386:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002388:	4b3e      	ldr	r3, [pc, #248]	; (8002484 <HAL_SD_MspInit+0x1d0>)
 800238a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800238e:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002390:	4b3c      	ldr	r3, [pc, #240]	; (8002484 <HAL_SD_MspInit+0x1d0>)
 8002392:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002396:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002398:	4b3a      	ldr	r3, [pc, #232]	; (8002484 <HAL_SD_MspInit+0x1d0>)
 800239a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800239e:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80023a0:	4b38      	ldr	r3, [pc, #224]	; (8002484 <HAL_SD_MspInit+0x1d0>)
 80023a2:	2220      	movs	r2, #32
 80023a4:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023a6:	4b37      	ldr	r3, [pc, #220]	; (8002484 <HAL_SD_MspInit+0x1d0>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80023ac:	4b35      	ldr	r3, [pc, #212]	; (8002484 <HAL_SD_MspInit+0x1d0>)
 80023ae:	2204      	movs	r2, #4
 80023b0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80023b2:	4b34      	ldr	r3, [pc, #208]	; (8002484 <HAL_SD_MspInit+0x1d0>)
 80023b4:	2203      	movs	r2, #3
 80023b6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80023b8:	4b32      	ldr	r3, [pc, #200]	; (8002484 <HAL_SD_MspInit+0x1d0>)
 80023ba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80023be:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80023c0:	4b30      	ldr	r3, [pc, #192]	; (8002484 <HAL_SD_MspInit+0x1d0>)
 80023c2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80023c6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80023c8:	482e      	ldr	r0, [pc, #184]	; (8002484 <HAL_SD_MspInit+0x1d0>)
 80023ca:	f001 f839 	bl	8003440 <HAL_DMA_Init>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 80023d4:	f7ff ff12 	bl	80021fc <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a2a      	ldr	r2, [pc, #168]	; (8002484 <HAL_SD_MspInit+0x1d0>)
 80023dc:	641a      	str	r2, [r3, #64]	; 0x40
 80023de:	4a29      	ldr	r2, [pc, #164]	; (8002484 <HAL_SD_MspInit+0x1d0>)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80023e4:	4b29      	ldr	r3, [pc, #164]	; (800248c <HAL_SD_MspInit+0x1d8>)
 80023e6:	4a2a      	ldr	r2, [pc, #168]	; (8002490 <HAL_SD_MspInit+0x1dc>)
 80023e8:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80023ea:	4b28      	ldr	r3, [pc, #160]	; (800248c <HAL_SD_MspInit+0x1d8>)
 80023ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023f0:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023f2:	4b26      	ldr	r3, [pc, #152]	; (800248c <HAL_SD_MspInit+0x1d8>)
 80023f4:	2240      	movs	r2, #64	; 0x40
 80023f6:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023f8:	4b24      	ldr	r3, [pc, #144]	; (800248c <HAL_SD_MspInit+0x1d8>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023fe:	4b23      	ldr	r3, [pc, #140]	; (800248c <HAL_SD_MspInit+0x1d8>)
 8002400:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002404:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002406:	4b21      	ldr	r3, [pc, #132]	; (800248c <HAL_SD_MspInit+0x1d8>)
 8002408:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800240c:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800240e:	4b1f      	ldr	r3, [pc, #124]	; (800248c <HAL_SD_MspInit+0x1d8>)
 8002410:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002414:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8002416:	4b1d      	ldr	r3, [pc, #116]	; (800248c <HAL_SD_MspInit+0x1d8>)
 8002418:	2220      	movs	r2, #32
 800241a:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800241c:	4b1b      	ldr	r3, [pc, #108]	; (800248c <HAL_SD_MspInit+0x1d8>)
 800241e:	2200      	movs	r2, #0
 8002420:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002422:	4b1a      	ldr	r3, [pc, #104]	; (800248c <HAL_SD_MspInit+0x1d8>)
 8002424:	2204      	movs	r2, #4
 8002426:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002428:	4b18      	ldr	r3, [pc, #96]	; (800248c <HAL_SD_MspInit+0x1d8>)
 800242a:	2203      	movs	r2, #3
 800242c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800242e:	4b17      	ldr	r3, [pc, #92]	; (800248c <HAL_SD_MspInit+0x1d8>)
 8002430:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002434:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002436:	4b15      	ldr	r3, [pc, #84]	; (800248c <HAL_SD_MspInit+0x1d8>)
 8002438:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800243c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800243e:	4813      	ldr	r0, [pc, #76]	; (800248c <HAL_SD_MspInit+0x1d8>)
 8002440:	f000 fffe 	bl	8003440 <HAL_DMA_Init>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 800244a:	f7ff fed7 	bl	80021fc <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a0e      	ldr	r2, [pc, #56]	; (800248c <HAL_SD_MspInit+0x1d8>)
 8002452:	63da      	str	r2, [r3, #60]	; 0x3c
 8002454:	4a0d      	ldr	r2, [pc, #52]	; (800248c <HAL_SD_MspInit+0x1d8>)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 6, 0);
 800245a:	2200      	movs	r2, #0
 800245c:	2106      	movs	r1, #6
 800245e:	2031      	movs	r0, #49	; 0x31
 8002460:	f000 ff9b 	bl	800339a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002464:	2031      	movs	r0, #49	; 0x31
 8002466:	f000 ffb4 	bl	80033d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800246a:	bf00      	nop
 800246c:	3728      	adds	r7, #40	; 0x28
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40012c00 	.word	0x40012c00
 8002478:	40023800 	.word	0x40023800
 800247c:	40020800 	.word	0x40020800
 8002480:	40020c00 	.word	0x40020c00
 8002484:	20000bfc 	.word	0x20000bfc
 8002488:	40026458 	.word	0x40026458
 800248c:	20000c5c 	.word	0x20000c5c
 8002490:	400264a0 	.word	0x400264a0

08002494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	607b      	str	r3, [r7, #4]
 800249e:	4b12      	ldr	r3, [pc, #72]	; (80024e8 <HAL_MspInit+0x54>)
 80024a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a2:	4a11      	ldr	r2, [pc, #68]	; (80024e8 <HAL_MspInit+0x54>)
 80024a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024a8:	6453      	str	r3, [r2, #68]	; 0x44
 80024aa:	4b0f      	ldr	r3, [pc, #60]	; (80024e8 <HAL_MspInit+0x54>)
 80024ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024b2:	607b      	str	r3, [r7, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	603b      	str	r3, [r7, #0]
 80024ba:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <HAL_MspInit+0x54>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	4a0a      	ldr	r2, [pc, #40]	; (80024e8 <HAL_MspInit+0x54>)
 80024c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c4:	6413      	str	r3, [r2, #64]	; 0x40
 80024c6:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <HAL_MspInit+0x54>)
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ce:	603b      	str	r3, [r7, #0]
 80024d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024d2:	2200      	movs	r2, #0
 80024d4:	210f      	movs	r1, #15
 80024d6:	f06f 0001 	mvn.w	r0, #1
 80024da:	f000 ff5e 	bl	800339a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40023800 	.word	0x40023800

080024ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024f0:	e7fe      	b.n	80024f0 <NMI_Handler+0x4>

080024f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024f2:	b480      	push	{r7}
 80024f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024f6:	e7fe      	b.n	80024f6 <HardFault_Handler+0x4>

080024f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024fc:	e7fe      	b.n	80024fc <MemManage_Handler+0x4>

080024fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002502:	e7fe      	b.n	8002502 <BusFault_Handler+0x4>

08002504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002508:	e7fe      	b.n	8002508 <UsageFault_Handler+0x4>

0800250a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800250a:	b480      	push	{r7}
 800250c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800251c:	f000 fa0e 	bl	800293c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002520:	f00e fb10 	bl	8010b44 <xTaskGetSchedulerState>
 8002524:	4603      	mov	r3, r0
 8002526:	2b01      	cmp	r3, #1
 8002528:	d001      	beq.n	800252e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800252a:	f00f f9f5 	bl	8011918 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */
  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002538:	4802      	ldr	r0, [pc, #8]	; (8002544 <SDIO_IRQHandler+0x10>)
 800253a:	f004 fcc7 	bl	8006ecc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000b78 	.word	0x20000b78

08002548 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800254c:	4802      	ldr	r0, [pc, #8]	; (8002558 <DMA2_Stream3_IRQHandler+0x10>)
 800254e:	f001 f89f 	bl	8003690 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000bfc 	.word	0x20000bfc

0800255c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002560:	4802      	ldr	r0, [pc, #8]	; (800256c <ETH_IRQHandler+0x10>)
 8002562:	f002 f977 	bl	8004854 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	20004064 	.word	0x20004064

08002570 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8002574:	4802      	ldr	r0, [pc, #8]	; (8002580 <DMA2_Stream6_IRQHandler+0x10>)
 8002576:	f001 f88b 	bl	8003690 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000c5c 	.word	0x20000c5c

08002584 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
	return 1;
 8002588:	2301      	movs	r3, #1
}
 800258a:	4618      	mov	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <_kill>:

int _kill(int pid, int sig)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800259e:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <_kill+0x20>)
 80025a0:	2216      	movs	r2, #22
 80025a2:	601a      	str	r2, [r3, #0]
	return -1;
 80025a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	2000c344 	.word	0x2000c344

080025b8 <_exit>:

void _exit (int status)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80025c0:	f04f 31ff 	mov.w	r1, #4294967295
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f7ff ffe5 	bl	8002594 <_kill>
	while (1) {}		/* Make sure we hang here */
 80025ca:	e7fe      	b.n	80025ca <_exit+0x12>

080025cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d8:	2300      	movs	r3, #0
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	e00a      	b.n	80025f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025de:	f3af 8000 	nop.w
 80025e2:	4601      	mov	r1, r0
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	1c5a      	adds	r2, r3, #1
 80025e8:	60ba      	str	r2, [r7, #8]
 80025ea:	b2ca      	uxtb	r2, r1
 80025ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	3301      	adds	r3, #1
 80025f2:	617b      	str	r3, [r7, #20]
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	dbf0      	blt.n	80025de <_read+0x12>
	}

return len;
 80025fc:	687b      	ldr	r3, [r7, #4]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b086      	sub	sp, #24
 800260a:	af00      	add	r7, sp, #0
 800260c:	60f8      	str	r0, [r7, #12]
 800260e:	60b9      	str	r1, [r7, #8]
 8002610:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002612:	2300      	movs	r3, #0
 8002614:	617b      	str	r3, [r7, #20]
 8002616:	e009      	b.n	800262c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	1c5a      	adds	r2, r3, #1
 800261c:	60ba      	str	r2, [r7, #8]
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f000 f8fd 	bl	8002820 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	3301      	adds	r3, #1
 800262a:	617b      	str	r3, [r7, #20]
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	429a      	cmp	r2, r3
 8002632:	dbf1      	blt.n	8002618 <_write+0x12>
	}
	return len;
 8002634:	687b      	ldr	r3, [r7, #4]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3718      	adds	r7, #24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <_close>:

int _close(int file)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
	return -1;
 8002646:	f04f 33ff 	mov.w	r3, #4294967295
}
 800264a:	4618      	mov	r0, r3
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002666:	605a      	str	r2, [r3, #4]
	return 0;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <_isatty>:

int _isatty(int file)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
	return 1;
 800267e:	2301      	movs	r3, #1
}
 8002680:	4618      	mov	r0, r3
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
	return 0;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
	...

080026a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b087      	sub	sp, #28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026b0:	4a14      	ldr	r2, [pc, #80]	; (8002704 <_sbrk+0x5c>)
 80026b2:	4b15      	ldr	r3, [pc, #84]	; (8002708 <_sbrk+0x60>)
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026bc:	4b13      	ldr	r3, [pc, #76]	; (800270c <_sbrk+0x64>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d102      	bne.n	80026ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026c4:	4b11      	ldr	r3, [pc, #68]	; (800270c <_sbrk+0x64>)
 80026c6:	4a12      	ldr	r2, [pc, #72]	; (8002710 <_sbrk+0x68>)
 80026c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ca:	4b10      	ldr	r3, [pc, #64]	; (800270c <_sbrk+0x64>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4413      	add	r3, r2
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d205      	bcs.n	80026e4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80026d8:	4b0e      	ldr	r3, [pc, #56]	; (8002714 <_sbrk+0x6c>)
 80026da:	220c      	movs	r2, #12
 80026dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026de:	f04f 33ff 	mov.w	r3, #4294967295
 80026e2:	e009      	b.n	80026f8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80026e4:	4b09      	ldr	r3, [pc, #36]	; (800270c <_sbrk+0x64>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ea:	4b08      	ldr	r3, [pc, #32]	; (800270c <_sbrk+0x64>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4413      	add	r3, r2
 80026f2:	4a06      	ldr	r2, [pc, #24]	; (800270c <_sbrk+0x64>)
 80026f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026f6:	68fb      	ldr	r3, [r7, #12]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	371c      	adds	r7, #28
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	20030000 	.word	0x20030000
 8002708:	00004000 	.word	0x00004000
 800270c:	20000cbc 	.word	0x20000cbc
 8002710:	2000c388 	.word	0x2000c388
 8002714:	2000c344 	.word	0x2000c344

08002718 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800271c:	4b06      	ldr	r3, [pc, #24]	; (8002738 <SystemInit+0x20>)
 800271e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002722:	4a05      	ldr	r2, [pc, #20]	; (8002738 <SystemInit+0x20>)
 8002724:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002728:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800272c:	bf00      	nop
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	e000ed00 	.word	0xe000ed00

0800273c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002740:	4b11      	ldr	r3, [pc, #68]	; (8002788 <MX_USART1_UART_Init+0x4c>)
 8002742:	4a12      	ldr	r2, [pc, #72]	; (800278c <MX_USART1_UART_Init+0x50>)
 8002744:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002746:	4b10      	ldr	r3, [pc, #64]	; (8002788 <MX_USART1_UART_Init+0x4c>)
 8002748:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800274c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800274e:	4b0e      	ldr	r3, [pc, #56]	; (8002788 <MX_USART1_UART_Init+0x4c>)
 8002750:	2200      	movs	r2, #0
 8002752:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002754:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <MX_USART1_UART_Init+0x4c>)
 8002756:	2200      	movs	r2, #0
 8002758:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800275a:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <MX_USART1_UART_Init+0x4c>)
 800275c:	2200      	movs	r2, #0
 800275e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002760:	4b09      	ldr	r3, [pc, #36]	; (8002788 <MX_USART1_UART_Init+0x4c>)
 8002762:	220c      	movs	r2, #12
 8002764:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002766:	4b08      	ldr	r3, [pc, #32]	; (8002788 <MX_USART1_UART_Init+0x4c>)
 8002768:	2200      	movs	r2, #0
 800276a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800276c:	4b06      	ldr	r3, [pc, #24]	; (8002788 <MX_USART1_UART_Init+0x4c>)
 800276e:	2200      	movs	r2, #0
 8002770:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002772:	4805      	ldr	r0, [pc, #20]	; (8002788 <MX_USART1_UART_Init+0x4c>)
 8002774:	f005 fd3c 	bl	80081f0 <HAL_UART_Init>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800277e:	f7ff fd3d 	bl	80021fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000cc0 	.word	0x20000cc0
 800278c:	40011000 	.word	0x40011000

08002790 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08a      	sub	sp, #40	; 0x28
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002798:	f107 0314 	add.w	r3, r7, #20
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	60da      	str	r2, [r3, #12]
 80027a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a19      	ldr	r2, [pc, #100]	; (8002814 <HAL_UART_MspInit+0x84>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d12c      	bne.n	800280c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	613b      	str	r3, [r7, #16]
 80027b6:	4b18      	ldr	r3, [pc, #96]	; (8002818 <HAL_UART_MspInit+0x88>)
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	4a17      	ldr	r2, [pc, #92]	; (8002818 <HAL_UART_MspInit+0x88>)
 80027bc:	f043 0310 	orr.w	r3, r3, #16
 80027c0:	6453      	str	r3, [r2, #68]	; 0x44
 80027c2:	4b15      	ldr	r3, [pc, #84]	; (8002818 <HAL_UART_MspInit+0x88>)
 80027c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c6:	f003 0310 	and.w	r3, r3, #16
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	4b11      	ldr	r3, [pc, #68]	; (8002818 <HAL_UART_MspInit+0x88>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	4a10      	ldr	r2, [pc, #64]	; (8002818 <HAL_UART_MspInit+0x88>)
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	6313      	str	r3, [r2, #48]	; 0x30
 80027de:	4b0e      	ldr	r3, [pc, #56]	; (8002818 <HAL_UART_MspInit+0x88>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80027ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80027ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f0:	2302      	movs	r3, #2
 80027f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f8:	2303      	movs	r3, #3
 80027fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027fc:	2307      	movs	r3, #7
 80027fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002800:	f107 0314 	add.w	r3, r7, #20
 8002804:	4619      	mov	r1, r3
 8002806:	4805      	ldr	r0, [pc, #20]	; (800281c <HAL_UART_MspInit+0x8c>)
 8002808:	f002 fdd2 	bl	80053b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800280c:	bf00      	nop
 800280e:	3728      	adds	r7, #40	; 0x28
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40011000 	.word	0x40011000
 8002818:	40023800 	.word	0x40023800
 800281c:	40020000 	.word	0x40020000

08002820 <__io_putchar>:

/* USER CODE BEGIN 1 */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]

  HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8002828:	1d39      	adds	r1, r7, #4
 800282a:	f04f 33ff 	mov.w	r3, #4294967295
 800282e:	2201      	movs	r2, #1
 8002830:	4803      	ldr	r0, [pc, #12]	; (8002840 <__io_putchar+0x20>)
 8002832:	f005 fd2a 	bl	800828a <HAL_UART_Transmit>
  return ch;
 8002836:	687b      	ldr	r3, [r7, #4]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	20000cc0 	.word	0x20000cc0

08002844 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002844:	f8df d034 	ldr.w	sp, [pc, #52]	; 800287c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002848:	480d      	ldr	r0, [pc, #52]	; (8002880 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800284a:	490e      	ldr	r1, [pc, #56]	; (8002884 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800284c:	4a0e      	ldr	r2, [pc, #56]	; (8002888 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800284e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002850:	e002      	b.n	8002858 <LoopCopyDataInit>

08002852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002856:	3304      	adds	r3, #4

08002858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800285a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800285c:	d3f9      	bcc.n	8002852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800285e:	4a0b      	ldr	r2, [pc, #44]	; (800288c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002860:	4c0b      	ldr	r4, [pc, #44]	; (8002890 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002864:	e001      	b.n	800286a <LoopFillZerobss>

08002866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002868:	3204      	adds	r2, #4

0800286a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800286a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800286c:	d3fb      	bcc.n	8002866 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800286e:	f7ff ff53 	bl	8002718 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002872:	f01b fccd 	bl	801e210 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002876:	f7ff fc2d 	bl	80020d4 <main>
  bx  lr    
 800287a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800287c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002884:	200009d0 	.word	0x200009d0
  ldr r2, =_sidata
 8002888:	0806fa30 	.word	0x0806fa30
  ldr r2, =_sbss
 800288c:	200009d0 	.word	0x200009d0
  ldr r4, =_ebss
 8002890:	2000c384 	.word	0x2000c384

08002894 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002894:	e7fe      	b.n	8002894 <ADC_IRQHandler>
	...

08002898 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800289c:	4b0e      	ldr	r3, [pc, #56]	; (80028d8 <HAL_Init+0x40>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a0d      	ldr	r2, [pc, #52]	; (80028d8 <HAL_Init+0x40>)
 80028a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028a8:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <HAL_Init+0x40>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a0a      	ldr	r2, [pc, #40]	; (80028d8 <HAL_Init+0x40>)
 80028ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028b4:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <HAL_Init+0x40>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a07      	ldr	r2, [pc, #28]	; (80028d8 <HAL_Init+0x40>)
 80028ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028c0:	2003      	movs	r0, #3
 80028c2:	f000 fd5f 	bl	8003384 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028c6:	200f      	movs	r0, #15
 80028c8:	f000 f808 	bl	80028dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028cc:	f7ff fde2 	bl	8002494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40023c00 	.word	0x40023c00

080028dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028e4:	4b12      	ldr	r3, [pc, #72]	; (8002930 <HAL_InitTick+0x54>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4b12      	ldr	r3, [pc, #72]	; (8002934 <HAL_InitTick+0x58>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	4619      	mov	r1, r3
 80028ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 fd77 	bl	80033ee <HAL_SYSTICK_Config>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e00e      	b.n	8002928 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b0f      	cmp	r3, #15
 800290e:	d80a      	bhi.n	8002926 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002910:	2200      	movs	r2, #0
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	f04f 30ff 	mov.w	r0, #4294967295
 8002918:	f000 fd3f 	bl	800339a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800291c:	4a06      	ldr	r2, [pc, #24]	; (8002938 <HAL_InitTick+0x5c>)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	e000      	b.n	8002928 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
}
 8002928:	4618      	mov	r0, r3
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	20000000 	.word	0x20000000
 8002934:	20000008 	.word	0x20000008
 8002938:	20000004 	.word	0x20000004

0800293c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002940:	4b06      	ldr	r3, [pc, #24]	; (800295c <HAL_IncTick+0x20>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	461a      	mov	r2, r3
 8002946:	4b06      	ldr	r3, [pc, #24]	; (8002960 <HAL_IncTick+0x24>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4413      	add	r3, r2
 800294c:	4a04      	ldr	r2, [pc, #16]	; (8002960 <HAL_IncTick+0x24>)
 800294e:	6013      	str	r3, [r2, #0]
}
 8002950:	bf00      	nop
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	20000008 	.word	0x20000008
 8002960:	20000d04 	.word	0x20000d04

08002964 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return uwTick;
 8002968:	4b03      	ldr	r3, [pc, #12]	; (8002978 <HAL_GetTick+0x14>)
 800296a:	681b      	ldr	r3, [r3, #0]
}
 800296c:	4618      	mov	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	20000d04 	.word	0x20000d04

0800297c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002984:	f7ff ffee 	bl	8002964 <HAL_GetTick>
 8002988:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002994:	d005      	beq.n	80029a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002996:	4b0a      	ldr	r3, [pc, #40]	; (80029c0 <HAL_Delay+0x44>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	461a      	mov	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4413      	add	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029a2:	bf00      	nop
 80029a4:	f7ff ffde 	bl	8002964 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d8f7      	bhi.n	80029a4 <HAL_Delay+0x28>
  {
  }
}
 80029b4:	bf00      	nop
 80029b6:	bf00      	nop
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	20000008 	.word	0x20000008

080029c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029cc:	2300      	movs	r3, #0
 80029ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e033      	b.n	8002a42 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d109      	bne.n	80029f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7fe fac6 	bl	8000f74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	f003 0310 	and.w	r3, r3, #16
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d118      	bne.n	8002a34 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a0a:	f023 0302 	bic.w	r3, r3, #2
 8002a0e:	f043 0202 	orr.w	r2, r3, #2
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 fae8 	bl	8002fec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f023 0303 	bic.w	r3, r3, #3
 8002a2a:	f043 0201 	orr.w	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	641a      	str	r2, [r3, #64]	; 0x40
 8002a32:	e001      	b.n	8002a38 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d101      	bne.n	8002a66 <HAL_ADC_Start+0x1a>
 8002a62:	2302      	movs	r3, #2
 8002a64:	e0b2      	b.n	8002bcc <HAL_ADC_Start+0x180>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d018      	beq.n	8002aae <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 0201 	orr.w	r2, r2, #1
 8002a8a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a8c:	4b52      	ldr	r3, [pc, #328]	; (8002bd8 <HAL_ADC_Start+0x18c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a52      	ldr	r2, [pc, #328]	; (8002bdc <HAL_ADC_Start+0x190>)
 8002a92:	fba2 2303 	umull	r2, r3, r2, r3
 8002a96:	0c9a      	lsrs	r2, r3, #18
 8002a98:	4613      	mov	r3, r2
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	4413      	add	r3, r2
 8002a9e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002aa0:	e002      	b.n	8002aa8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f9      	bne.n	8002aa2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d17a      	bne.n	8002bb2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ac4:	f023 0301 	bic.w	r3, r3, #1
 8002ac8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d007      	beq.n	8002aee <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ae6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002afa:	d106      	bne.n	8002b0a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b00:	f023 0206 	bic.w	r2, r3, #6
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	645a      	str	r2, [r3, #68]	; 0x44
 8002b08:	e002      	b.n	8002b10 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b18:	4b31      	ldr	r3, [pc, #196]	; (8002be0 <HAL_ADC_Start+0x194>)
 8002b1a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002b24:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f003 031f 	and.w	r3, r3, #31
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d12a      	bne.n	8002b88 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a2b      	ldr	r2, [pc, #172]	; (8002be4 <HAL_ADC_Start+0x198>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d015      	beq.n	8002b68 <HAL_ADC_Start+0x11c>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a29      	ldr	r2, [pc, #164]	; (8002be8 <HAL_ADC_Start+0x19c>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d105      	bne.n	8002b52 <HAL_ADC_Start+0x106>
 8002b46:	4b26      	ldr	r3, [pc, #152]	; (8002be0 <HAL_ADC_Start+0x194>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f003 031f 	and.w	r3, r3, #31
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00a      	beq.n	8002b68 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a25      	ldr	r2, [pc, #148]	; (8002bec <HAL_ADC_Start+0x1a0>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d136      	bne.n	8002bca <HAL_ADC_Start+0x17e>
 8002b5c:	4b20      	ldr	r3, [pc, #128]	; (8002be0 <HAL_ADC_Start+0x194>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 0310 	and.w	r3, r3, #16
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d130      	bne.n	8002bca <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d129      	bne.n	8002bca <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b84:	609a      	str	r2, [r3, #8]
 8002b86:	e020      	b.n	8002bca <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a15      	ldr	r2, [pc, #84]	; (8002be4 <HAL_ADC_Start+0x198>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d11b      	bne.n	8002bca <HAL_ADC_Start+0x17e>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d114      	bne.n	8002bca <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002bae:	609a      	str	r2, [r3, #8]
 8002bb0:	e00b      	b.n	8002bca <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	f043 0210 	orr.w	r2, r3, #16
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc2:	f043 0201 	orr.w	r2, r3, #1
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3714      	adds	r7, #20
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	20000000 	.word	0x20000000
 8002bdc:	431bde83 	.word	0x431bde83
 8002be0:	40012300 	.word	0x40012300
 8002be4:	40012000 	.word	0x40012000
 8002be8:	40012100 	.word	0x40012100
 8002bec:	40012200 	.word	0x40012200

08002bf0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <HAL_ADC_Stop+0x16>
 8002c02:	2302      	movs	r3, #2
 8002c04:	e021      	b.n	8002c4a <HAL_ADC_Stop+0x5a>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0201 	bic.w	r2, r2, #1
 8002c1c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d109      	bne.n	8002c40 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c34:	f023 0301 	bic.w	r3, r3, #1
 8002c38:	f043 0201 	orr.w	r2, r3, #1
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b084      	sub	sp, #16
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c72:	d113      	bne.n	8002c9c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c82:	d10b      	bne.n	8002c9c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c88:	f043 0220 	orr.w	r2, r3, #32
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e063      	b.n	8002d64 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002c9c:	f7ff fe62 	bl	8002964 <HAL_GetTick>
 8002ca0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ca2:	e021      	b.n	8002ce8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002caa:	d01d      	beq.n	8002ce8 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d007      	beq.n	8002cc2 <HAL_ADC_PollForConversion+0x6c>
 8002cb2:	f7ff fe57 	bl	8002964 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d212      	bcs.n	8002ce8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d00b      	beq.n	8002ce8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	f043 0204 	orr.w	r2, r3, #4
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e03d      	b.n	8002d64 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d1d6      	bne.n	8002ca4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f06f 0212 	mvn.w	r2, #18
 8002cfe:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d123      	bne.n	8002d62 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d11f      	bne.n	8002d62 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d28:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d006      	beq.n	8002d3e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d111      	bne.n	8002d62 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d105      	bne.n	8002d62 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	f043 0201 	orr.w	r2, r3, #1
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d92:	2300      	movs	r3, #0
 8002d94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d101      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x1c>
 8002da0:	2302      	movs	r3, #2
 8002da2:	e113      	b.n	8002fcc <HAL_ADC_ConfigChannel+0x244>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b09      	cmp	r3, #9
 8002db2:	d925      	bls.n	8002e00 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68d9      	ldr	r1, [r3, #12]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3b1e      	subs	r3, #30
 8002dca:	2207      	movs	r2, #7
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43da      	mvns	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	400a      	ands	r2, r1
 8002dd8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68d9      	ldr	r1, [r3, #12]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	4618      	mov	r0, r3
 8002dec:	4603      	mov	r3, r0
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	4403      	add	r3, r0
 8002df2:	3b1e      	subs	r3, #30
 8002df4:	409a      	lsls	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	60da      	str	r2, [r3, #12]
 8002dfe:	e022      	b.n	8002e46 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6919      	ldr	r1, [r3, #16]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	4613      	mov	r3, r2
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	4413      	add	r3, r2
 8002e14:	2207      	movs	r2, #7
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	43da      	mvns	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	400a      	ands	r2, r1
 8002e22:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6919      	ldr	r1, [r3, #16]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	4618      	mov	r0, r3
 8002e36:	4603      	mov	r3, r0
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	4403      	add	r3, r0
 8002e3c:	409a      	lsls	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b06      	cmp	r3, #6
 8002e4c:	d824      	bhi.n	8002e98 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	3b05      	subs	r3, #5
 8002e60:	221f      	movs	r2, #31
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	43da      	mvns	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	400a      	ands	r2, r1
 8002e6e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	4613      	mov	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	3b05      	subs	r3, #5
 8002e8a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	635a      	str	r2, [r3, #52]	; 0x34
 8002e96:	e04c      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	2b0c      	cmp	r3, #12
 8002e9e:	d824      	bhi.n	8002eea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	3b23      	subs	r3, #35	; 0x23
 8002eb2:	221f      	movs	r2, #31
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43da      	mvns	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	400a      	ands	r2, r1
 8002ec0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	4618      	mov	r0, r3
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	3b23      	subs	r3, #35	; 0x23
 8002edc:	fa00 f203 	lsl.w	r2, r0, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	631a      	str	r2, [r3, #48]	; 0x30
 8002ee8:	e023      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	3b41      	subs	r3, #65	; 0x41
 8002efc:	221f      	movs	r2, #31
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	43da      	mvns	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	400a      	ands	r2, r1
 8002f0a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	4618      	mov	r0, r3
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	3b41      	subs	r3, #65	; 0x41
 8002f26:	fa00 f203 	lsl.w	r2, r0, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f32:	4b29      	ldr	r3, [pc, #164]	; (8002fd8 <HAL_ADC_ConfigChannel+0x250>)
 8002f34:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a28      	ldr	r2, [pc, #160]	; (8002fdc <HAL_ADC_ConfigChannel+0x254>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d10f      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x1d8>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b12      	cmp	r3, #18
 8002f46:	d10b      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a1d      	ldr	r2, [pc, #116]	; (8002fdc <HAL_ADC_ConfigChannel+0x254>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d12b      	bne.n	8002fc2 <HAL_ADC_ConfigChannel+0x23a>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a1c      	ldr	r2, [pc, #112]	; (8002fe0 <HAL_ADC_ConfigChannel+0x258>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d003      	beq.n	8002f7c <HAL_ADC_ConfigChannel+0x1f4>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2b11      	cmp	r3, #17
 8002f7a:	d122      	bne.n	8002fc2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a11      	ldr	r2, [pc, #68]	; (8002fe0 <HAL_ADC_ConfigChannel+0x258>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d111      	bne.n	8002fc2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f9e:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <HAL_ADC_ConfigChannel+0x25c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a11      	ldr	r2, [pc, #68]	; (8002fe8 <HAL_ADC_ConfigChannel+0x260>)
 8002fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa8:	0c9a      	lsrs	r2, r3, #18
 8002faa:	4613      	mov	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002fb4:	e002      	b.n	8002fbc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1f9      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	40012300 	.word	0x40012300
 8002fdc:	40012000 	.word	0x40012000
 8002fe0:	10000012 	.word	0x10000012
 8002fe4:	20000000 	.word	0x20000000
 8002fe8:	431bde83 	.word	0x431bde83

08002fec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ff4:	4b79      	ldr	r3, [pc, #484]	; (80031dc <ADC_Init+0x1f0>)
 8002ff6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	431a      	orrs	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003020:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6859      	ldr	r1, [r3, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	021a      	lsls	r2, r3, #8
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003044:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6859      	ldr	r1, [r3, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003066:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6899      	ldr	r1, [r3, #8]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307e:	4a58      	ldr	r2, [pc, #352]	; (80031e0 <ADC_Init+0x1f4>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d022      	beq.n	80030ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003092:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6899      	ldr	r1, [r3, #8]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6899      	ldr	r1, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	609a      	str	r2, [r3, #8]
 80030c8:	e00f      	b.n	80030ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0202 	bic.w	r2, r2, #2
 80030f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6899      	ldr	r1, [r3, #8]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	7e1b      	ldrb	r3, [r3, #24]
 8003104:	005a      	lsls	r2, r3, #1
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d01b      	beq.n	8003150 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003126:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003136:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6859      	ldr	r1, [r3, #4]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	3b01      	subs	r3, #1
 8003144:	035a      	lsls	r2, r3, #13
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	605a      	str	r2, [r3, #4]
 800314e:	e007      	b.n	8003160 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800315e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800316e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	3b01      	subs	r3, #1
 800317c:	051a      	lsls	r2, r3, #20
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003194:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6899      	ldr	r1, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031a2:	025a      	lsls	r2, r3, #9
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6899      	ldr	r1, [r3, #8]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	029a      	lsls	r2, r3, #10
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	609a      	str	r2, [r3, #8]
}
 80031d0:	bf00      	nop
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	40012300 	.word	0x40012300
 80031e0:	0f000001 	.word	0x0f000001

080031e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031f4:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <__NVIC_SetPriorityGrouping+0x44>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003200:	4013      	ands	r3, r2
 8003202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800320c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003216:	4a04      	ldr	r2, [pc, #16]	; (8003228 <__NVIC_SetPriorityGrouping+0x44>)
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	60d3      	str	r3, [r2, #12]
}
 800321c:	bf00      	nop
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	e000ed00 	.word	0xe000ed00

0800322c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003230:	4b04      	ldr	r3, [pc, #16]	; (8003244 <__NVIC_GetPriorityGrouping+0x18>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	0a1b      	lsrs	r3, r3, #8
 8003236:	f003 0307 	and.w	r3, r3, #7
}
 800323a:	4618      	mov	r0, r3
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	e000ed00 	.word	0xe000ed00

08003248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003256:	2b00      	cmp	r3, #0
 8003258:	db0b      	blt.n	8003272 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800325a:	79fb      	ldrb	r3, [r7, #7]
 800325c:	f003 021f 	and.w	r2, r3, #31
 8003260:	4907      	ldr	r1, [pc, #28]	; (8003280 <__NVIC_EnableIRQ+0x38>)
 8003262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	2001      	movs	r0, #1
 800326a:	fa00 f202 	lsl.w	r2, r0, r2
 800326e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	e000e100 	.word	0xe000e100

08003284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	6039      	str	r1, [r7, #0]
 800328e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003294:	2b00      	cmp	r3, #0
 8003296:	db0a      	blt.n	80032ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	b2da      	uxtb	r2, r3
 800329c:	490c      	ldr	r1, [pc, #48]	; (80032d0 <__NVIC_SetPriority+0x4c>)
 800329e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a2:	0112      	lsls	r2, r2, #4
 80032a4:	b2d2      	uxtb	r2, r2
 80032a6:	440b      	add	r3, r1
 80032a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032ac:	e00a      	b.n	80032c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	4908      	ldr	r1, [pc, #32]	; (80032d4 <__NVIC_SetPriority+0x50>)
 80032b4:	79fb      	ldrb	r3, [r7, #7]
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	3b04      	subs	r3, #4
 80032bc:	0112      	lsls	r2, r2, #4
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	440b      	add	r3, r1
 80032c2:	761a      	strb	r2, [r3, #24]
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	e000e100 	.word	0xe000e100
 80032d4:	e000ed00 	.word	0xe000ed00

080032d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032d8:	b480      	push	{r7}
 80032da:	b089      	sub	sp, #36	; 0x24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f1c3 0307 	rsb	r3, r3, #7
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	bf28      	it	cs
 80032f6:	2304      	movcs	r3, #4
 80032f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	3304      	adds	r3, #4
 80032fe:	2b06      	cmp	r3, #6
 8003300:	d902      	bls.n	8003308 <NVIC_EncodePriority+0x30>
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	3b03      	subs	r3, #3
 8003306:	e000      	b.n	800330a <NVIC_EncodePriority+0x32>
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800330c:	f04f 32ff 	mov.w	r2, #4294967295
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43da      	mvns	r2, r3
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	401a      	ands	r2, r3
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003320:	f04f 31ff 	mov.w	r1, #4294967295
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	fa01 f303 	lsl.w	r3, r1, r3
 800332a:	43d9      	mvns	r1, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003330:	4313      	orrs	r3, r2
         );
}
 8003332:	4618      	mov	r0, r3
 8003334:	3724      	adds	r7, #36	; 0x24
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
	...

08003340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3b01      	subs	r3, #1
 800334c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003350:	d301      	bcc.n	8003356 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003352:	2301      	movs	r3, #1
 8003354:	e00f      	b.n	8003376 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003356:	4a0a      	ldr	r2, [pc, #40]	; (8003380 <SysTick_Config+0x40>)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3b01      	subs	r3, #1
 800335c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800335e:	210f      	movs	r1, #15
 8003360:	f04f 30ff 	mov.w	r0, #4294967295
 8003364:	f7ff ff8e 	bl	8003284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003368:	4b05      	ldr	r3, [pc, #20]	; (8003380 <SysTick_Config+0x40>)
 800336a:	2200      	movs	r2, #0
 800336c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800336e:	4b04      	ldr	r3, [pc, #16]	; (8003380 <SysTick_Config+0x40>)
 8003370:	2207      	movs	r2, #7
 8003372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	e000e010 	.word	0xe000e010

08003384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7ff ff29 	bl	80031e4 <__NVIC_SetPriorityGrouping>
}
 8003392:	bf00      	nop
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800339a:	b580      	push	{r7, lr}
 800339c:	b086      	sub	sp, #24
 800339e:	af00      	add	r7, sp, #0
 80033a0:	4603      	mov	r3, r0
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	607a      	str	r2, [r7, #4]
 80033a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033ac:	f7ff ff3e 	bl	800322c <__NVIC_GetPriorityGrouping>
 80033b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	68b9      	ldr	r1, [r7, #8]
 80033b6:	6978      	ldr	r0, [r7, #20]
 80033b8:	f7ff ff8e 	bl	80032d8 <NVIC_EncodePriority>
 80033bc:	4602      	mov	r2, r0
 80033be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033c2:	4611      	mov	r1, r2
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff ff5d 	bl	8003284 <__NVIC_SetPriority>
}
 80033ca:	bf00      	nop
 80033cc:	3718      	adds	r7, #24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b082      	sub	sp, #8
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	4603      	mov	r3, r0
 80033da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff ff31 	bl	8003248 <__NVIC_EnableIRQ>
}
 80033e6:	bf00      	nop
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b082      	sub	sp, #8
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7ff ffa2 	bl	8003340 <SysTick_Config>
 80033fc:	4603      	mov	r3, r0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b082      	sub	sp, #8
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e00e      	b.n	8003436 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	795b      	ldrb	r3, [r3, #5]
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d105      	bne.n	800342e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7fd fdd9 	bl	8000fe0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
	...

08003440 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003448:	2300      	movs	r3, #0
 800344a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800344c:	f7ff fa8a 	bl	8002964 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e099      	b.n	8003590 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2202      	movs	r2, #2
 8003460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0201 	bic.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800347c:	e00f      	b.n	800349e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800347e:	f7ff fa71 	bl	8002964 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b05      	cmp	r3, #5
 800348a:	d908      	bls.n	800349e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2220      	movs	r2, #32
 8003490:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2203      	movs	r2, #3
 8003496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e078      	b.n	8003590 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1e8      	bne.n	800347e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	4b38      	ldr	r3, [pc, #224]	; (8003598 <HAL_DMA_Init+0x158>)
 80034b8:	4013      	ands	r3, r2
 80034ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	d107      	bne.n	8003508 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003500:	4313      	orrs	r3, r2
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	4313      	orrs	r3, r2
 8003506:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f023 0307 	bic.w	r3, r3, #7
 800351e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	4313      	orrs	r3, r2
 8003528:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	2b04      	cmp	r3, #4
 8003530:	d117      	bne.n	8003562 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	4313      	orrs	r3, r2
 800353a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00e      	beq.n	8003562 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 fa9d 	bl	8003a84 <DMA_CheckFifoParam>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d008      	beq.n	8003562 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2240      	movs	r2, #64	; 0x40
 8003554:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800355e:	2301      	movs	r3, #1
 8003560:	e016      	b.n	8003590 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 fa54 	bl	8003a18 <DMA_CalcBaseAndBitshift>
 8003570:	4603      	mov	r3, r0
 8003572:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003578:	223f      	movs	r2, #63	; 0x3f
 800357a:	409a      	lsls	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	f010803f 	.word	0xf010803f

0800359c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
 80035a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035aa:	2300      	movs	r3, #0
 80035ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d101      	bne.n	80035c2 <HAL_DMA_Start_IT+0x26>
 80035be:	2302      	movs	r3, #2
 80035c0:	e040      	b.n	8003644 <HAL_DMA_Start_IT+0xa8>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d12f      	bne.n	8003636 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2202      	movs	r2, #2
 80035da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	68b9      	ldr	r1, [r7, #8]
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 f9e6 	bl	80039bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f4:	223f      	movs	r2, #63	; 0x3f
 80035f6:	409a      	lsls	r2, r3
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0216 	orr.w	r2, r2, #22
 800360a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003610:	2b00      	cmp	r3, #0
 8003612:	d007      	beq.n	8003624 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0208 	orr.w	r2, r2, #8
 8003622:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0201 	orr.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	e005      	b.n	8003642 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800363e:	2302      	movs	r3, #2
 8003640:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003642:	7dfb      	ldrb	r3, [r7, #23]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d004      	beq.n	800366a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2280      	movs	r2, #128	; 0x80
 8003664:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e00c      	b.n	8003684 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2205      	movs	r2, #5
 800366e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 0201 	bic.w	r2, r2, #1
 8003680:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800369c:	4b8e      	ldr	r3, [pc, #568]	; (80038d8 <HAL_DMA_IRQHandler+0x248>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a8e      	ldr	r2, [pc, #568]	; (80038dc <HAL_DMA_IRQHandler+0x24c>)
 80036a2:	fba2 2303 	umull	r2, r3, r2, r3
 80036a6:	0a9b      	lsrs	r3, r3, #10
 80036a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ba:	2208      	movs	r2, #8
 80036bc:	409a      	lsls	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	4013      	ands	r3, r2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d01a      	beq.n	80036fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d013      	beq.n	80036fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0204 	bic.w	r2, r2, #4
 80036e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e8:	2208      	movs	r2, #8
 80036ea:	409a      	lsls	r2, r3
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f4:	f043 0201 	orr.w	r2, r3, #1
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003700:	2201      	movs	r2, #1
 8003702:	409a      	lsls	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4013      	ands	r3, r2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d012      	beq.n	8003732 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00b      	beq.n	8003732 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371e:	2201      	movs	r2, #1
 8003720:	409a      	lsls	r2, r3
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372a:	f043 0202 	orr.w	r2, r3, #2
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003736:	2204      	movs	r2, #4
 8003738:	409a      	lsls	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	4013      	ands	r3, r2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d012      	beq.n	8003768 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00b      	beq.n	8003768 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003754:	2204      	movs	r2, #4
 8003756:	409a      	lsls	r2, r3
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003760:	f043 0204 	orr.w	r2, r3, #4
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376c:	2210      	movs	r2, #16
 800376e:	409a      	lsls	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4013      	ands	r3, r2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d043      	beq.n	8003800 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0308 	and.w	r3, r3, #8
 8003782:	2b00      	cmp	r3, #0
 8003784:	d03c      	beq.n	8003800 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800378a:	2210      	movs	r2, #16
 800378c:	409a      	lsls	r2, r3
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d018      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d108      	bne.n	80037c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d024      	beq.n	8003800 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	4798      	blx	r3
 80037be:	e01f      	b.n	8003800 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d01b      	beq.n	8003800 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	4798      	blx	r3
 80037d0:	e016      	b.n	8003800 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d107      	bne.n	80037f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0208 	bic.w	r2, r2, #8
 80037ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d003      	beq.n	8003800 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003804:	2220      	movs	r2, #32
 8003806:	409a      	lsls	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	4013      	ands	r3, r2
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 808f 	beq.w	8003930 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0310 	and.w	r3, r3, #16
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 8087 	beq.w	8003930 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003826:	2220      	movs	r2, #32
 8003828:	409a      	lsls	r2, r3
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b05      	cmp	r3, #5
 8003838:	d136      	bne.n	80038a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0216 	bic.w	r2, r2, #22
 8003848:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	695a      	ldr	r2, [r3, #20]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003858:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	2b00      	cmp	r3, #0
 8003860:	d103      	bne.n	800386a <HAL_DMA_IRQHandler+0x1da>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003866:	2b00      	cmp	r3, #0
 8003868:	d007      	beq.n	800387a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0208 	bic.w	r2, r2, #8
 8003878:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387e:	223f      	movs	r2, #63	; 0x3f
 8003880:	409a      	lsls	r2, r3
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800389a:	2b00      	cmp	r3, #0
 800389c:	d07e      	beq.n	800399c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	4798      	blx	r3
        }
        return;
 80038a6:	e079      	b.n	800399c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d01d      	beq.n	80038f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10d      	bne.n	80038e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d031      	beq.n	8003930 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	4798      	blx	r3
 80038d4:	e02c      	b.n	8003930 <HAL_DMA_IRQHandler+0x2a0>
 80038d6:	bf00      	nop
 80038d8:	20000000 	.word	0x20000000
 80038dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d023      	beq.n	8003930 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	4798      	blx	r3
 80038f0:	e01e      	b.n	8003930 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10f      	bne.n	8003920 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0210 	bic.w	r2, r2, #16
 800390e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003934:	2b00      	cmp	r3, #0
 8003936:	d032      	beq.n	800399e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b00      	cmp	r3, #0
 8003942:	d022      	beq.n	800398a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2205      	movs	r2, #5
 8003948:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 0201 	bic.w	r2, r2, #1
 800395a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	3301      	adds	r3, #1
 8003960:	60bb      	str	r3, [r7, #8]
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	429a      	cmp	r2, r3
 8003966:	d307      	bcc.n	8003978 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1f2      	bne.n	800395c <HAL_DMA_IRQHandler+0x2cc>
 8003976:	e000      	b.n	800397a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003978:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800398e:	2b00      	cmp	r3, #0
 8003990:	d005      	beq.n	800399e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	4798      	blx	r3
 800399a:	e000      	b.n	800399e <HAL_DMA_IRQHandler+0x30e>
        return;
 800399c:	bf00      	nop
    }
  }
}
 800399e:	3718      	adds	r7, #24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
 80039c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	2b40      	cmp	r3, #64	; 0x40
 80039e8:	d108      	bne.n	80039fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68ba      	ldr	r2, [r7, #8]
 80039f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039fa:	e007      	b.n	8003a0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	60da      	str	r2, [r3, #12]
}
 8003a0c:	bf00      	nop
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	3b10      	subs	r3, #16
 8003a28:	4a14      	ldr	r2, [pc, #80]	; (8003a7c <DMA_CalcBaseAndBitshift+0x64>)
 8003a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2e:	091b      	lsrs	r3, r3, #4
 8003a30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a32:	4a13      	ldr	r2, [pc, #76]	; (8003a80 <DMA_CalcBaseAndBitshift+0x68>)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	4413      	add	r3, r2
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2b03      	cmp	r3, #3
 8003a44:	d909      	bls.n	8003a5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a4e:	f023 0303 	bic.w	r3, r3, #3
 8003a52:	1d1a      	adds	r2, r3, #4
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	659a      	str	r2, [r3, #88]	; 0x58
 8003a58:	e007      	b.n	8003a6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a62:	f023 0303 	bic.w	r3, r3, #3
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	aaaaaaab 	.word	0xaaaaaaab
 8003a80:	08044928 	.word	0x08044928

08003a84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d11f      	bne.n	8003ade <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	2b03      	cmp	r3, #3
 8003aa2:	d856      	bhi.n	8003b52 <DMA_CheckFifoParam+0xce>
 8003aa4:	a201      	add	r2, pc, #4	; (adr r2, 8003aac <DMA_CheckFifoParam+0x28>)
 8003aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aaa:	bf00      	nop
 8003aac:	08003abd 	.word	0x08003abd
 8003ab0:	08003acf 	.word	0x08003acf
 8003ab4:	08003abd 	.word	0x08003abd
 8003ab8:	08003b53 	.word	0x08003b53
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d046      	beq.n	8003b56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003acc:	e043      	b.n	8003b56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ad6:	d140      	bne.n	8003b5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003adc:	e03d      	b.n	8003b5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ae6:	d121      	bne.n	8003b2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2b03      	cmp	r3, #3
 8003aec:	d837      	bhi.n	8003b5e <DMA_CheckFifoParam+0xda>
 8003aee:	a201      	add	r2, pc, #4	; (adr r2, 8003af4 <DMA_CheckFifoParam+0x70>)
 8003af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af4:	08003b05 	.word	0x08003b05
 8003af8:	08003b0b 	.word	0x08003b0b
 8003afc:	08003b05 	.word	0x08003b05
 8003b00:	08003b1d 	.word	0x08003b1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	73fb      	strb	r3, [r7, #15]
      break;
 8003b08:	e030      	b.n	8003b6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d025      	beq.n	8003b62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b1a:	e022      	b.n	8003b62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b24:	d11f      	bne.n	8003b66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b2a:	e01c      	b.n	8003b66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d903      	bls.n	8003b3a <DMA_CheckFifoParam+0xb6>
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	2b03      	cmp	r3, #3
 8003b36:	d003      	beq.n	8003b40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b38:	e018      	b.n	8003b6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	73fb      	strb	r3, [r7, #15]
      break;
 8003b3e:	e015      	b.n	8003b6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00e      	beq.n	8003b6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b50:	e00b      	b.n	8003b6a <DMA_CheckFifoParam+0xe6>
      break;
 8003b52:	bf00      	nop
 8003b54:	e00a      	b.n	8003b6c <DMA_CheckFifoParam+0xe8>
      break;
 8003b56:	bf00      	nop
 8003b58:	e008      	b.n	8003b6c <DMA_CheckFifoParam+0xe8>
      break;
 8003b5a:	bf00      	nop
 8003b5c:	e006      	b.n	8003b6c <DMA_CheckFifoParam+0xe8>
      break;
 8003b5e:	bf00      	nop
 8003b60:	e004      	b.n	8003b6c <DMA_CheckFifoParam+0xe8>
      break;
 8003b62:	bf00      	nop
 8003b64:	e002      	b.n	8003b6c <DMA_CheckFifoParam+0xe8>
      break;   
 8003b66:	bf00      	nop
 8003b68:	e000      	b.n	8003b6c <DMA_CheckFifoParam+0xe8>
      break;
 8003b6a:	bf00      	nop
    }
  } 
  
  return status; 
 8003b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop

08003b7c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e03b      	b.n	8003c06 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d106      	bne.n	8003ba8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7fd fa98 	bl	80010d8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2202      	movs	r2, #2
 8003bac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bcc:	f023 0107 	bic.w	r1, r3, #7
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003be6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	68d1      	ldr	r1, [r2, #12]
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	6812      	ldr	r2, [r2, #0]
 8003bf2:	430b      	orrs	r3, r1
 8003bf4:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b086      	sub	sp, #24
 8003c12:	af02      	add	r7, sp, #8
 8003c14:	60f8      	str	r0, [r7, #12]
 8003c16:	60b9      	str	r1, [r7, #8]
 8003c18:	607a      	str	r2, [r7, #4]
 8003c1a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d101      	bne.n	8003c2a <HAL_DMA2D_Start+0x1c>
 8003c26:	2302      	movs	r3, #2
 8003c28:	e018      	b.n	8003c5c <HAL_DMA2D_Start+0x4e>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2202      	movs	r2, #2
 8003c36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	68b9      	ldr	r1, [r7, #8]
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 f989 	bl	8003f5c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f042 0201 	orr.w	r2, r2, #1
 8003c58:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d056      	beq.n	8003d2e <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c80:	f7fe fe70 	bl	8002964 <HAL_GetTick>
 8003c84:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003c86:	e04b      	b.n	8003d20 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d023      	beq.n	8003ce2 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f003 0320 	and.w	r3, r3, #32
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d005      	beq.n	8003cb0 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca8:	f043 0202 	orr.w	r2, r3, #2
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d005      	beq.n	8003cc6 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cbe:	f043 0201 	orr.w	r2, r3, #1
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2221      	movs	r2, #33	; 0x21
 8003ccc:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2204      	movs	r2, #4
 8003cd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e0a5      	b.n	8003e2e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce8:	d01a      	beq.n	8003d20 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003cea:	f7fe fe3b 	bl	8002964 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d302      	bcc.n	8003d00 <HAL_DMA2D_PollForTransfer+0x9c>
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10f      	bne.n	8003d20 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d04:	f043 0220 	orr.w	r2, r3, #32
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2203      	movs	r2, #3
 8003d10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e086      	b.n	8003e2e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0ac      	beq.n	8003c88 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	69db      	ldr	r3, [r3, #28]
 8003d34:	f003 0320 	and.w	r3, r3, #32
 8003d38:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	f003 0320 	and.w	r3, r3, #32
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d061      	beq.n	8003e14 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d50:	f7fe fe08 	bl	8002964 <HAL_GetTick>
 8003d54:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003d56:	e056      	b.n	8003e06 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d02e      	beq.n	8003dc8 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f003 0308 	and.w	r3, r3, #8
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d005      	beq.n	8003d80 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d78:	f043 0204 	orr.w	r2, r3, #4
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f003 0320 	and.w	r3, r3, #32
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d005      	beq.n	8003d96 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8e:	f043 0202 	orr.w	r2, r3, #2
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d005      	beq.n	8003dac <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da4:	f043 0201 	orr.w	r2, r3, #1
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2229      	movs	r2, #41	; 0x29
 8003db2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2204      	movs	r2, #4
 8003db8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e032      	b.n	8003e2e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dce:	d01a      	beq.n	8003e06 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003dd0:	f7fe fdc8 	bl	8002964 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d302      	bcc.n	8003de6 <HAL_DMA2D_PollForTransfer+0x182>
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10f      	bne.n	8003e06 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dea:	f043 0220 	orr.w	r2, r3, #32
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2203      	movs	r2, #3
 8003df6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e013      	b.n	8003e2e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f003 0310 	and.w	r3, r3, #16
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d0a1      	beq.n	8003d58 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2212      	movs	r2, #18
 8003e1a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3718      	adds	r7, #24
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
	...

08003e38 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d101      	bne.n	8003e58 <HAL_DMA2D_ConfigLayer+0x20>
 8003e54:	2302      	movs	r3, #2
 8003e56:	e079      	b.n	8003f4c <HAL_DMA2D_ConfigLayer+0x114>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	011b      	lsls	r3, r3, #4
 8003e6c:	3318      	adds	r3, #24
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	4413      	add	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	041b      	lsls	r3, r3, #16
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003e82:	4b35      	ldr	r3, [pc, #212]	; (8003f58 <HAL_DMA2D_ConfigLayer+0x120>)
 8003e84:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2b0a      	cmp	r3, #10
 8003e8c:	d003      	beq.n	8003e96 <HAL_DMA2D_ConfigLayer+0x5e>
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	2b09      	cmp	r3, #9
 8003e94:	d107      	bne.n	8003ea6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	e005      	b.n	8003eb2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	061b      	lsls	r3, r3, #24
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d120      	bne.n	8003efa <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	ea02 0103 	and.w	r1, r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	6812      	ldr	r2, [r2, #0]
 8003ed8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2b0a      	cmp	r3, #10
 8003ee0:	d003      	beq.n	8003eea <HAL_DMA2D_ConfigLayer+0xb2>
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2b09      	cmp	r3, #9
 8003ee8:	d127      	bne.n	8003f3a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	68da      	ldr	r2, [r3, #12]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003ef6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ef8:	e01f      	b.n	8003f3a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	69da      	ldr	r2, [r3, #28]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	43db      	mvns	r3, r3
 8003f04:	ea02 0103 	and.w	r1, r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	6812      	ldr	r2, [r2, #0]
 8003f1a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2b0a      	cmp	r3, #10
 8003f22:	d003      	beq.n	8003f2c <HAL_DMA2D_ConfigLayer+0xf4>
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	2b09      	cmp	r3, #9
 8003f2a:	d106      	bne.n	8003f3a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	68da      	ldr	r2, [r3, #12]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003f38:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	371c      	adds	r7, #28
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr
 8003f58:	ff03000f 	.word	0xff03000f

08003f5c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b08b      	sub	sp, #44	; 0x2c
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
 8003f68:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f70:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	041a      	lsls	r2, r3, #16
 8003f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f94:	d174      	bne.n	8004080 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003f9c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003fa4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003fac:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d108      	bne.n	8003fce <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	627b      	str	r3, [r7, #36]	; 0x24
 8003fcc:	e053      	b.n	8004076 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d106      	bne.n	8003fe4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8003fe2:	e048      	b.n	8004076 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d111      	bne.n	8004010 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	0cdb      	lsrs	r3, r3, #19
 8003ff0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	0a9b      	lsrs	r3, r3, #10
 8003ff6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	08db      	lsrs	r3, r3, #3
 8003ffc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	015a      	lsls	r2, r3, #5
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	02db      	lsls	r3, r3, #11
 8004006:	4313      	orrs	r3, r2
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	4313      	orrs	r3, r2
 800400c:	627b      	str	r3, [r7, #36]	; 0x24
 800400e:	e032      	b.n	8004076 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	2b03      	cmp	r3, #3
 8004016:	d117      	bne.n	8004048 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	0fdb      	lsrs	r3, r3, #31
 800401c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	0cdb      	lsrs	r3, r3, #19
 8004022:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	0adb      	lsrs	r3, r3, #11
 8004028:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	08db      	lsrs	r3, r3, #3
 800402e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	029b      	lsls	r3, r3, #10
 8004038:	431a      	orrs	r2, r3
 800403a:	6a3b      	ldr	r3, [r7, #32]
 800403c:	03db      	lsls	r3, r3, #15
 800403e:	4313      	orrs	r3, r2
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	4313      	orrs	r3, r2
 8004044:	627b      	str	r3, [r7, #36]	; 0x24
 8004046:	e016      	b.n	8004076 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	0f1b      	lsrs	r3, r3, #28
 800404c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	0d1b      	lsrs	r3, r3, #20
 8004052:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	0b1b      	lsrs	r3, r3, #12
 8004058:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	091b      	lsrs	r3, r3, #4
 800405e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	011a      	lsls	r2, r3, #4
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	021b      	lsls	r3, r3, #8
 8004068:	431a      	orrs	r2, r3
 800406a:	6a3b      	ldr	r3, [r7, #32]
 800406c:	031b      	lsls	r3, r3, #12
 800406e:	4313      	orrs	r3, r2
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	4313      	orrs	r3, r2
 8004074:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800407c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800407e:	e003      	b.n	8004088 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	60da      	str	r2, [r3, #12]
}
 8004088:	bf00      	nop
 800408a:	372c      	adds	r7, #44	; 0x2c
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b088      	sub	sp, #32
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 800409c:	2300      	movs	r3, #0
 800409e:	61fb      	str	r3, [r7, #28]
 80040a0:	2300      	movs	r3, #0
 80040a2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80040a4:	4ba1      	ldr	r3, [pc, #644]	; (800432c <HAL_ETH_Init+0x298>)
 80040a6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80040ac:	2300      	movs	r3, #0
 80040ae:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e182      	b.n	80043c0 <HAL_ETH_Init+0x32c>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d106      	bne.n	80040d4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f005 fdd8 	bl	8009c84 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040d4:	2300      	movs	r3, #0
 80040d6:	60bb      	str	r3, [r7, #8]
 80040d8:	4b95      	ldr	r3, [pc, #596]	; (8004330 <HAL_ETH_Init+0x29c>)
 80040da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040dc:	4a94      	ldr	r2, [pc, #592]	; (8004330 <HAL_ETH_Init+0x29c>)
 80040de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040e2:	6453      	str	r3, [r2, #68]	; 0x44
 80040e4:	4b92      	ldr	r3, [pc, #584]	; (8004330 <HAL_ETH_Init+0x29c>)
 80040e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ec:	60bb      	str	r3, [r7, #8]
 80040ee:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80040f0:	4b90      	ldr	r3, [pc, #576]	; (8004334 <HAL_ETH_Init+0x2a0>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	4a8f      	ldr	r2, [pc, #572]	; (8004334 <HAL_ETH_Init+0x2a0>)
 80040f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80040fa:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80040fc:	4b8d      	ldr	r3, [pc, #564]	; (8004334 <HAL_ETH_Init+0x2a0>)
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	498b      	ldr	r1, [pc, #556]	; (8004334 <HAL_ETH_Init+0x2a0>)
 8004106:	4313      	orrs	r3, r2
 8004108:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	6812      	ldr	r2, [r2, #0]
 8004118:	f043 0301 	orr.w	r3, r3, #1
 800411c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004120:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004122:	f7fe fc1f 	bl	8002964 <HAL_GetTick>
 8004126:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004128:	e011      	b.n	800414e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800412a:	f7fe fc1b 	bl	8002964 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004138:	d909      	bls.n	800414e <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2203      	movs	r2, #3
 800413e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e138      	b.n	80043c0 <HAL_ETH_Init+0x32c>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1e4      	bne.n	800412a <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	f023 031c 	bic.w	r3, r3, #28
 800416e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004170:	f002 fa18 	bl	80065a4 <HAL_RCC_GetHCLKFreq>
 8004174:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	4a6f      	ldr	r2, [pc, #444]	; (8004338 <HAL_ETH_Init+0x2a4>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d908      	bls.n	8004190 <HAL_ETH_Init+0xfc>
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	4a6e      	ldr	r2, [pc, #440]	; (800433c <HAL_ETH_Init+0x2a8>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d804      	bhi.n	8004190 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	f043 0308 	orr.w	r3, r3, #8
 800418c:	61fb      	str	r3, [r7, #28]
 800418e:	e027      	b.n	80041e0 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	4a6a      	ldr	r2, [pc, #424]	; (800433c <HAL_ETH_Init+0x2a8>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d908      	bls.n	80041aa <HAL_ETH_Init+0x116>
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	4a64      	ldr	r2, [pc, #400]	; (800432c <HAL_ETH_Init+0x298>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d204      	bcs.n	80041aa <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	f043 030c 	orr.w	r3, r3, #12
 80041a6:	61fb      	str	r3, [r7, #28]
 80041a8:	e01a      	b.n	80041e0 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	4a5f      	ldr	r2, [pc, #380]	; (800432c <HAL_ETH_Init+0x298>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d303      	bcc.n	80041ba <HAL_ETH_Init+0x126>
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	4a62      	ldr	r2, [pc, #392]	; (8004340 <HAL_ETH_Init+0x2ac>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d911      	bls.n	80041de <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	4a60      	ldr	r2, [pc, #384]	; (8004340 <HAL_ETH_Init+0x2ac>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d908      	bls.n	80041d4 <HAL_ETH_Init+0x140>
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	4a5f      	ldr	r2, [pc, #380]	; (8004344 <HAL_ETH_Init+0x2b0>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d804      	bhi.n	80041d4 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	f043 0304 	orr.w	r3, r3, #4
 80041d0:	61fb      	str	r3, [r7, #28]
 80041d2:	e005      	b.n	80041e0 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	f043 0310 	orr.w	r3, r3, #16
 80041da:	61fb      	str	r3, [r7, #28]
 80041dc:	e000      	b.n	80041e0 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80041de:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	69fa      	ldr	r2, [r7, #28]
 80041e6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80041e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80041ec:	2100      	movs	r1, #0
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 fc10 	bl	8004a14 <HAL_ETH_WritePHYRegister>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00b      	beq.n	8004212 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80041fe:	6939      	ldr	r1, [r7, #16]
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 fdc5 	bl	8004d90 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e0d6      	b.n	80043c0 <HAL_ETH_Init+0x32c>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8004212:	20ff      	movs	r0, #255	; 0xff
 8004214:	f7fe fbb2 	bl	800297c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 80a4 	beq.w	800436a <HAL_ETH_Init+0x2d6>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004222:	f7fe fb9f 	bl	8002964 <HAL_GetTick>
 8004226:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004228:	f107 030c 	add.w	r3, r7, #12
 800422c:	461a      	mov	r2, r3
 800422e:	2101      	movs	r1, #1
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 fb87 	bl	8004944 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8004236:	f7fe fb95 	bl	8002964 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	f241 3288 	movw	r2, #5000	; 0x1388
 8004244:	4293      	cmp	r3, r2
 8004246:	d90f      	bls.n	8004268 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800424c:	6939      	ldr	r1, [r7, #16]
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 fd9e 	bl	8004d90 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e0ab      	b.n	80043c0 <HAL_ETH_Init+0x32c>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f003 0304 	and.w	r3, r3, #4
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0da      	beq.n	8004228 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8004272:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004276:	2100      	movs	r1, #0
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 fbcb 	bl	8004a14 <HAL_ETH_WritePHYRegister>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00b      	beq.n	800429c <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004288:	6939      	ldr	r1, [r7, #16]
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 fd80 	bl	8004d90 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004298:	2301      	movs	r3, #1
 800429a:	e091      	b.n	80043c0 <HAL_ETH_Init+0x32c>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800429c:	f7fe fb62 	bl	8002964 <HAL_GetTick>
 80042a0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80042a2:	f107 030c 	add.w	r3, r7, #12
 80042a6:	461a      	mov	r2, r3
 80042a8:	2101      	movs	r1, #1
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 fb4a 	bl	8004944 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80042b0:	f7fe fb58 	bl	8002964 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80042be:	4293      	cmp	r3, r2
 80042c0:	d90f      	bls.n	80042e2 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80042c6:	6939      	ldr	r1, [r7, #16]
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 fd61 	bl	8004d90 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e06e      	b.n	80043c0 <HAL_ETH_Init+0x32c>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f003 0320 	and.w	r3, r3, #32
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d0da      	beq.n	80042a2 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80042ec:	f107 030c 	add.w	r3, r7, #12
 80042f0:	461a      	mov	r2, r3
 80042f2:	2110      	movs	r1, #16
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 fb25 	bl	8004944 <HAL_ETH_ReadPHYRegister>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00b      	beq.n	8004318 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004304:	6939      	ldr	r1, [r7, #16]
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 fd42 	bl	8004d90 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004314:	2301      	movs	r3, #1
 8004316:	e053      	b.n	80043c0 <HAL_ETH_Init+0x32c>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f003 0304 	and.w	r3, r3, #4
 800431e:	2b00      	cmp	r3, #0
 8004320:	d012      	beq.n	8004348 <HAL_ETH_Init+0x2b4>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004328:	60da      	str	r2, [r3, #12]
 800432a:	e010      	b.n	800434e <HAL_ETH_Init+0x2ba>
 800432c:	03938700 	.word	0x03938700
 8004330:	40023800 	.word	0x40023800
 8004334:	40013800 	.word	0x40013800
 8004338:	01312cff 	.word	0x01312cff
 800433c:	02160ebf 	.word	0x02160ebf
 8004340:	05f5e0ff 	.word	0x05f5e0ff
 8004344:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <HAL_ETH_Init+0x2cc>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	609a      	str	r2, [r3, #8]
 800435e:	e026      	b.n	80043ae <HAL_ETH_Init+0x31a>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004366:	609a      	str	r2, [r3, #8]
 8004368:	e021      	b.n	80043ae <HAL_ETH_Init+0x31a>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	08db      	lsrs	r3, r3, #3
 8004370:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	085b      	lsrs	r3, r3, #1
 8004378:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800437a:	4313      	orrs	r3, r2
 800437c:	b29b      	uxth	r3, r3
 800437e:	461a      	mov	r2, r3
 8004380:	2100      	movs	r1, #0
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 fb46 	bl	8004a14 <HAL_ETH_WritePHYRegister>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00b      	beq.n	80043a6 <HAL_ETH_Init+0x312>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004392:	6939      	ldr	r1, [r7, #16]
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 fcfb 	bl	8004d90 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e00c      	b.n	80043c0 <HAL_ETH_Init+0x32c>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80043a6:	f640 70ff 	movw	r0, #4095	; 0xfff
 80043aa:	f7fe fae7 	bl	800297c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80043ae:	6939      	ldr	r1, [r7, #16]
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 fced 	bl	8004d90 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3720      	adds	r7, #32
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
 80043d4:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d101      	bne.n	80043e8 <HAL_ETH_DMATxDescListInit+0x20>
 80043e4:	2302      	movs	r3, #2
 80043e6:	e051      	b.n	800448c <HAL_ETH_DMATxDescListInit+0xc4>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2202      	movs	r2, #2
 80043f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80043fe:	2300      	movs	r3, #0
 8004400:	617b      	str	r3, [r7, #20]
 8004402:	e030      	b.n	8004466 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	015b      	lsls	r3, r3, #5
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	4413      	add	r3, r2
 800440c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004414:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800441c:	fb02 f303 	mul.w	r3, r2, r3
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	4413      	add	r3, r2
 8004424:	461a      	mov	r2, r3
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d105      	bne.n	800443e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	3b01      	subs	r3, #1
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	429a      	cmp	r2, r3
 8004446:	d208      	bcs.n	800445a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	3301      	adds	r3, #1
 800444c:	015b      	lsls	r3, r3, #5
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	4413      	add	r3, r2
 8004452:	461a      	mov	r2, r3
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	60da      	str	r2, [r3, #12]
 8004458:	e002      	b.n	8004460 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	3301      	adds	r3, #1
 8004464:	617b      	str	r3, [r7, #20]
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d3ca      	bcc.n	8004404 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004478:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	371c      	adds	r7, #28
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
 80044a4:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80044a6:	2300      	movs	r3, #0
 80044a8:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d101      	bne.n	80044b8 <HAL_ETH_DMARxDescListInit+0x20>
 80044b4:	2302      	movs	r3, #2
 80044b6:	e055      	b.n	8004564 <HAL_ETH_DMARxDescListInit+0xcc>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2202      	movs	r2, #2
 80044c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80044ce:	2300      	movs	r3, #0
 80044d0:	617b      	str	r3, [r7, #20]
 80044d2:	e034      	b.n	800453e <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	015b      	lsls	r3, r3, #5
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	4413      	add	r3, r2
 80044dc:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80044e4:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80044ec:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80044f4:	fb02 f303 	mul.w	r3, r2, r3
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	4413      	add	r3, r2
 80044fc:	461a      	mov	r2, r3
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d105      	bne.n	8004516 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	3b01      	subs	r3, #1
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	429a      	cmp	r2, r3
 800451e:	d208      	bcs.n	8004532 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	3301      	adds	r3, #1
 8004524:	015b      	lsls	r3, r3, #5
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	4413      	add	r3, r2
 800452a:	461a      	mov	r2, r3
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	60da      	str	r2, [r3, #12]
 8004530:	e002      	b.n	8004538 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	3301      	adds	r3, #1
 800453c:	617b      	str	r3, [r7, #20]
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	429a      	cmp	r2, r3
 8004544:	d3c6      	bcc.n	80044d4 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004550:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	371c      	adds	r7, #28
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8004570:	b480      	push	{r7}
 8004572:	b087      	sub	sp, #28
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800457a:	2300      	movs	r3, #0
 800457c:	617b      	str	r3, [r7, #20]
 800457e:	2300      	movs	r3, #0
 8004580:	60fb      	str	r3, [r7, #12]
 8004582:	2300      	movs	r3, #0
 8004584:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800458c:	2b01      	cmp	r3, #1
 800458e:	d101      	bne.n	8004594 <HAL_ETH_TransmitFrame+0x24>
 8004590:	2302      	movs	r3, #2
 8004592:	e0cc      	b.n	800472e <HAL_ETH_TransmitFrame+0x1be>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2202      	movs	r2, #2
 80045a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d109      	bne.n	80045be <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80045ba:	2301      	movs	r3, #1
 80045bc:	e0b7      	b.n	800472e <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	da09      	bge.n	80045dc <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2212      	movs	r2, #18
 80045cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e0a8      	b.n	800472e <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d915      	bls.n	8004612 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	4a54      	ldr	r2, [pc, #336]	; (800473c <HAL_ETH_TransmitFrame+0x1cc>)
 80045ea:	fba2 2303 	umull	r2, r3, r2, r3
 80045ee:	0a9b      	lsrs	r3, r3, #10
 80045f0:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	4b51      	ldr	r3, [pc, #324]	; (800473c <HAL_ETH_TransmitFrame+0x1cc>)
 80045f6:	fba3 1302 	umull	r1, r3, r3, r2
 80045fa:	0a9b      	lsrs	r3, r3, #10
 80045fc:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8004600:	fb01 f303 	mul.w	r3, r1, r3
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d005      	beq.n	8004616 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	3301      	adds	r3, #1
 800460e:	617b      	str	r3, [r7, #20]
 8004610:	e001      	b.n	8004616 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8004612:	2301      	movs	r3, #1
 8004614:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d11c      	bne.n	8004656 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004626:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800462a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8004636:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004642:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004646:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	461a      	mov	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	62da      	str	r2, [r3, #44]	; 0x2c
 8004654:	e04b      	b.n	80046ee <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8004656:	2300      	movs	r3, #0
 8004658:	613b      	str	r3, [r7, #16]
 800465a:	e044      	b.n	80046e6 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004666:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800466a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d107      	bne.n	8004682 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004680:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004686:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800468a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	3b01      	subs	r3, #1
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	429a      	cmp	r2, r3
 8004694:	d116      	bne.n	80046c4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80046a4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	4a25      	ldr	r2, [pc, #148]	; (8004740 <HAL_ETH_TransmitFrame+0x1d0>)
 80046aa:	fb03 f202 	mul.w	r2, r3, r2
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	4413      	add	r3, r2
 80046b2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80046b6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80046c2:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80046d2:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	461a      	mov	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	3301      	adds	r3, #1
 80046e4:	613b      	str	r3, [r7, #16]
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d3b6      	bcc.n	800465c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00d      	beq.n	800471c <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004708:	461a      	mov	r2, r3
 800470a:	2304      	movs	r3, #4
 800470c:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004716:	461a      	mov	r2, r3
 8004718:	2300      	movs	r3, #0
 800471a:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	371c      	adds	r7, #28
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	ac02b00b 	.word	0xac02b00b
 8004740:	fffffa0c 	.word	0xfffffa0c

08004744 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004756:	2b01      	cmp	r3, #1
 8004758:	d101      	bne.n	800475e <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800475a:	2302      	movs	r3, #2
 800475c:	e074      	b.n	8004848 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2202      	movs	r2, #2
 800476a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800476e:	e05a      	b.n	8004826 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	3301      	adds	r3, #1
 8004774:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004784:	d10d      	bne.n	80047a2 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	461a      	mov	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	629a      	str	r2, [r3, #40]	; 0x28
 80047a0:	e041      	b.n	8004826 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10b      	bne.n	80047c8 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b4:	1c5a      	adds	r2, r3, #1
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	461a      	mov	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	629a      	str	r2, [r3, #40]	; 0x28
 80047c6:	e02e      	b.n	8004826 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d4:	1c5a      	adds	r2, r3, #1
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d103      	bne.n	80047ea <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	0c1b      	lsrs	r3, r3, #16
 80047f2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80047f6:	1f1a      	subs	r2, r3, #4
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004800:	689a      	ldr	r2, [r3, #8]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	461a      	mov	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8004822:	2300      	movs	r3, #0
 8004824:	e010      	b.n	8004848 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	db02      	blt.n	8004836 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2b03      	cmp	r3, #3
 8004834:	d99c      	bls.n	8004770 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
}
 8004848:	4618      	mov	r0, r3
 800484a:	3714      	adds	r7, #20
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800486a:	2b40      	cmp	r3, #64	; 0x40
 800486c:	d112      	bne.n	8004894 <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f005 fad6 	bl	8009e20 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800487c:	461a      	mov	r2, r3
 800487e:	2340      	movs	r3, #64	; 0x40
 8004880:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004892:	e01a      	b.n	80048ca <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d111      	bne.n	80048ca <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f838 	bl	800491c <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048b4:	461a      	mov	r2, r3
 80048b6:	2301      	movs	r3, #1
 80048b8:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048d2:	461a      	mov	r2, r3
 80048d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048d8:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048ec:	d112      	bne.n	8004914 <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f81e 	bl	8004930 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048fc:	461a      	mov	r2, r3
 80048fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004902:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8004914:	bf00      	nop
 8004916:	3708      	adds	r7, #8
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	460b      	mov	r3, r1
 800494e:	607a      	str	r2, [r7, #4]
 8004950:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8004952:	2300      	movs	r3, #0
 8004954:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004956:	2300      	movs	r3, #0
 8004958:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b82      	cmp	r3, #130	; 0x82
 8004964:	d101      	bne.n	800496a <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8004966:	2302      	movs	r3, #2
 8004968:	e050      	b.n	8004a0c <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2282      	movs	r2, #130	; 0x82
 800496e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f003 031c 	and.w	r3, r3, #28
 8004980:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8a1b      	ldrh	r3, [r3, #16]
 8004986:	02db      	lsls	r3, r3, #11
 8004988:	b29b      	uxth	r3, r3
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	4313      	orrs	r3, r2
 800498e:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8004990:	897b      	ldrh	r3, [r7, #10]
 8004992:	019b      	lsls	r3, r3, #6
 8004994:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004998:	697a      	ldr	r2, [r7, #20]
 800499a:	4313      	orrs	r3, r2
 800499c:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f023 0302 	bic.w	r3, r3, #2
 80049a4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f043 0301 	orr.w	r3, r3, #1
 80049ac:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80049b6:	f7fd ffd5 	bl	8002964 <HAL_GetTick>
 80049ba:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80049bc:	e015      	b.n	80049ea <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80049be:	f7fd ffd1 	bl	8002964 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049cc:	d309      	bcc.n	80049e2 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e014      	b.n	8004a0c <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1e4      	bne.n	80049be <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	461a      	mov	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3718      	adds	r7, #24
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	607a      	str	r2, [r7, #4]
 8004a20:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8004a22:	2300      	movs	r3, #0
 8004a24:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b42      	cmp	r3, #66	; 0x42
 8004a34:	d101      	bne.n	8004a3a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8004a36:	2302      	movs	r3, #2
 8004a38:	e04e      	b.n	8004ad8 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2242      	movs	r2, #66	; 0x42
 8004a3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f003 031c 	and.w	r3, r3, #28
 8004a50:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8a1b      	ldrh	r3, [r3, #16]
 8004a56:	02db      	lsls	r3, r3, #11
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8004a60:	897b      	ldrh	r3, [r7, #10]
 8004a62:	019b      	lsls	r3, r3, #6
 8004a64:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f043 0302 	orr.w	r3, r3, #2
 8004a74:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	f043 0301 	orr.w	r3, r3, #1
 8004a7c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004a90:	f7fd ff68 	bl	8002964 <HAL_GetTick>
 8004a94:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004a96:	e015      	b.n	8004ac4 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8004a98:	f7fd ff64 	bl	8002964 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aa6:	d309      	bcc.n	8004abc <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e00d      	b.n	8004ad8 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1e4      	bne.n	8004a98 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3718      	adds	r7, #24
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d101      	bne.n	8004af6 <HAL_ETH_Start+0x16>
 8004af2:	2302      	movs	r3, #2
 8004af4:	e01f      	b.n	8004b36 <HAL_ETH_Start+0x56>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2202      	movs	r2, #2
 8004b02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 fb40 	bl	800518c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 fb77 	bl	8005200 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 fc06 	bl	8005324 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 fbab 	bl	8005274 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 fbd4 	bl	80052cc <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3708      	adds	r7, #8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b082      	sub	sp, #8
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d101      	bne.n	8004b54 <HAL_ETH_Stop+0x16>
 8004b50:	2302      	movs	r3, #2
 8004b52:	e01f      	b.n	8004b94 <HAL_ETH_Stop+0x56>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2202      	movs	r2, #2
 8004b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 fb9b 	bl	80052a0 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 fbc4 	bl	80052f8 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 fb62 	bl	800523a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 fbd4 	bl	8005324 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 fb22 	bl	80051c6 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3708      	adds	r7, #8
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d101      	bne.n	8004bb8 <HAL_ETH_ConfigMAC+0x1c>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	e0e4      	b.n	8004d82 <HAL_ETH_ConfigMAC+0x1e6>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f000 80b1 	beq.w	8004d32 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	4b6c      	ldr	r3, [pc, #432]	; (8004d8c <HAL_ETH_ConfigMAC+0x1f0>)
 8004bdc:	4013      	ands	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8004be8:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8004bee:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8004bf4:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8004bfa:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8004c00:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8004c06:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8004c0c:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8004c12:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8004c18:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8004c1e:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8004c24:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8004c2a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004c42:	2001      	movs	r0, #1
 8004c44:	f7fd fe9a 	bl	800297c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004c58:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8004c5e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8004c64:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8004c6a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8004c70:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8004c76:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8004c82:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004c84:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004c8e:	2001      	movs	r0, #1
 8004c90:	f7fd fe74 	bl	800297c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004ca4:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004cae:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc6:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8004ccc:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8004cd2:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8004cd8:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8004cde:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8004ce4:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004cfc:	2001      	movs	r0, #1
 8004cfe:	f7fd fe3d 	bl	800297c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	69db      	ldr	r3, [r3, #28]
 8004d20:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8004d22:	2001      	movs	r0, #1
 8004d24:	f7fd fe2a 	bl	800297c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	61da      	str	r2, [r3, #28]
 8004d30:	e01e      	b.n	8004d70 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004d40:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	689a      	ldr	r2, [r3, #8]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004d62:	2001      	movs	r0, #1
 8004d64:	f7fd fe0a 	bl	800297c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	ff20810f 	.word	0xff20810f

08004d90 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b0b0      	sub	sp, #192	; 0xc0
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d007      	beq.n	8004db6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004dac:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004db4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8004db6:	2300      	movs	r3, #0
 8004db8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d103      	bne.n	8004dde <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8004dd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dda:	663b      	str	r3, [r7, #96]	; 0x60
 8004ddc:	e001      	b.n	8004de2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8004dde:	2300      	movs	r3, #0
 8004de0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8004de2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004de6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8004de8:	2300      	movs	r3, #0
 8004dea:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004dec:	2300      	movs	r3, #0
 8004dee:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8004df0:	2300      	movs	r3, #0
 8004df2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8004df4:	2300      	movs	r3, #0
 8004df6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8004dfc:	2340      	movs	r3, #64	; 0x40
 8004dfe:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8004e00:	2300      	movs	r3, #0
 8004e02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8004e06:	2300      	movs	r3, #0
 8004e08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8004e12:	2300      	movs	r3, #0
 8004e14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8004e30:	2380      	movs	r3, #128	; 0x80
 8004e32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004e36:	2300      	movs	r3, #0
 8004e38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8004e42:	2300      	movs	r3, #0
 8004e44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004e64:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004e68:	4baa      	ldr	r3, [pc, #680]	; (8005114 <ETH_MACDMAConfig+0x384>)
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8004e70:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8004e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8004e74:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8004e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8004e78:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8004e7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8004e7c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8004e82:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8004e84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8004e86:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8004e88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8004e8a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8004e90:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8004e92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8004e94:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8004e96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8004e98:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8004e9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8004e9c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8004e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8004ea0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8004ea2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8004ea4:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8004ea6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004eb8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ec4:	2001      	movs	r0, #1
 8004ec6:	f7fd fd59 	bl	800297c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004ed2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004ed4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8004ed6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004ed8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8004eda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8004edc:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8004ede:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8004ee2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8004ee4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8004ee8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8004eea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8004eee:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8004ef0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8004ef4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8004ef8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8004f00:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004f02:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004f0e:	2001      	movs	r0, #1
 8004f10:	f7fd fd34 	bl	800297c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004f1c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f26:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004f30:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004f3c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004f40:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004f44:	4013      	ands	r3, r2
 8004f46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004f4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f4e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8004f50:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004f54:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8004f56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8004f5a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8004f5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8004f60:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8004f62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8004f66:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8004f68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8004f6c:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004f6e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004f72:	4313      	orrs	r3, r2
 8004f74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004f80:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004f8c:	2001      	movs	r0, #1
 8004f8e:	f7fd fcf5 	bl	800297c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004f9a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004f9c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8004fa0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	69db      	ldr	r3, [r3, #28]
 8004fb2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004fb6:	2001      	movs	r0, #1
 8004fb8:	f7fd fce0 	bl	800297c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004fc4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8004fca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fce:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8004fd4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004fd8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8004fea:	2304      	movs	r3, #4
 8004fec:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8004fee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8004ff4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ff8:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004ffa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004ffe:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005000:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005004:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8005006:	2380      	movs	r3, #128	; 0x80
 8005008:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800500a:	2300      	movs	r3, #0
 800500c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800500e:	2300      	movs	r3, #0
 8005010:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8005020:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005024:	4b3c      	ldr	r3, [pc, #240]	; (8005118 <ETH_MACDMAConfig+0x388>)
 8005026:	4013      	ands	r3, r2
 8005028:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800502c:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800502e:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005030:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8005032:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8005034:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8005036:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8005038:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800503a:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800503c:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800503e:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8005040:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8005042:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8005044:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8005048:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800504a:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800504c:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800504e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005052:	4313      	orrs	r3, r2
 8005054:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005060:	461a      	mov	r2, r3
 8005062:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005066:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005076:	2001      	movs	r0, #1
 8005078:	f7fd fc80 	bl	800297c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005084:	461a      	mov	r2, r3
 8005086:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800508a:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800508c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800508e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005090:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8005094:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8005096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005098:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800509a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800509c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800509e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050a0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80050a2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80050a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80050a6:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	6812      	ldr	r2, [r2, #0]
 80050ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80050b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80050b4:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80050c4:	2001      	movs	r0, #1
 80050c6:	f7fd fc59 	bl	800297c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050d2:	461a      	mov	r2, r3
 80050d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80050d8:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d10d      	bne.n	80050fe <ETH_MACDMAConfig+0x36e>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050ea:	69db      	ldr	r3, [r3, #28]
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	6812      	ldr	r2, [r2, #0]
 80050f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80050fc:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	461a      	mov	r2, r3
 8005104:	2100      	movs	r1, #0
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f808 	bl	800511c <ETH_MACAddressConfig>
}
 800510c:	bf00      	nop
 800510e:	37c0      	adds	r7, #192	; 0xc0
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	ff20810f 	.word	0xff20810f
 8005118:	f8de3f23 	.word	0xf8de3f23

0800511c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800511c:	b480      	push	{r7}
 800511e:	b087      	sub	sp, #28
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	3305      	adds	r3, #5
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	021b      	lsls	r3, r3, #8
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	3204      	adds	r2, #4
 8005134:	7812      	ldrb	r2, [r2, #0]
 8005136:	4313      	orrs	r3, r2
 8005138:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	4b11      	ldr	r3, [pc, #68]	; (8005184 <ETH_MACAddressConfig+0x68>)
 800513e:	4413      	add	r3, r2
 8005140:	461a      	mov	r2, r3
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	3303      	adds	r3, #3
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	061a      	lsls	r2, r3, #24
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	3302      	adds	r3, #2
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	041b      	lsls	r3, r3, #16
 8005156:	431a      	orrs	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	3301      	adds	r3, #1
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	021b      	lsls	r3, r3, #8
 8005160:	4313      	orrs	r3, r2
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	7812      	ldrb	r2, [r2, #0]
 8005166:	4313      	orrs	r3, r2
 8005168:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800516a:	68ba      	ldr	r2, [r7, #8]
 800516c:	4b06      	ldr	r3, [pc, #24]	; (8005188 <ETH_MACAddressConfig+0x6c>)
 800516e:	4413      	add	r3, r2
 8005170:	461a      	mov	r2, r3
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	6013      	str	r3, [r2, #0]
}
 8005176:	bf00      	nop
 8005178:	371c      	adds	r7, #28
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	40028040 	.word	0x40028040
 8005188:	40028044 	.word	0x40028044

0800518c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0208 	orr.w	r2, r2, #8
 80051a6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80051b0:	2001      	movs	r0, #1
 80051b2:	f000 f8dd 	bl	8005370 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	601a      	str	r2, [r3, #0]
}
 80051be:	bf00      	nop
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b084      	sub	sp, #16
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80051ce:	2300      	movs	r3, #0
 80051d0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f022 0208 	bic.w	r2, r2, #8
 80051e0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80051ea:	2001      	movs	r0, #1
 80051ec:	f000 f8c0 	bl	8005370 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	601a      	str	r2, [r3, #0]
}
 80051f8:	bf00      	nop
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005208:	2300      	movs	r3, #0
 800520a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f042 0204 	orr.w	r2, r2, #4
 800521a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005224:	2001      	movs	r0, #1
 8005226:	f000 f8a3 	bl	8005370 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	601a      	str	r2, [r3, #0]
}
 8005232:	bf00      	nop
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800523a:	b580      	push	{r7, lr}
 800523c:	b084      	sub	sp, #16
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005242:	2300      	movs	r3, #0
 8005244:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f022 0204 	bic.w	r2, r2, #4
 8005254:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800525e:	2001      	movs	r0, #1
 8005260:	f000 f886 	bl	8005370 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	601a      	str	r2, [r3, #0]
}
 800526c:	bf00      	nop
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	6812      	ldr	r2, [r2, #0]
 800528a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800528e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005292:	6193      	str	r3, [r2, #24]
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	6812      	ldr	r2, [r2, #0]
 80052b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80052be:	6193      	str	r3, [r2, #24]
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	6812      	ldr	r2, [r2, #0]
 80052e2:	f043 0302 	orr.w	r3, r3, #2
 80052e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80052ea:	6193      	str	r3, [r2, #24]
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	6812      	ldr	r2, [r2, #0]
 800530e:	f023 0302 	bic.w	r3, r3, #2
 8005312:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005316:	6193      	str	r3, [r2, #24]
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6812      	ldr	r2, [r2, #0]
 800533e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005342:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005346:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005354:	2001      	movs	r0, #1
 8005356:	f000 f80b 	bl	8005370 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005364:	6193      	str	r3, [r2, #24]
}
 8005366:	bf00      	nop
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
	...

08005370 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005378:	4b0b      	ldr	r3, [pc, #44]	; (80053a8 <ETH_Delay+0x38>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a0b      	ldr	r2, [pc, #44]	; (80053ac <ETH_Delay+0x3c>)
 800537e:	fba2 2303 	umull	r2, r3, r2, r3
 8005382:	0a5b      	lsrs	r3, r3, #9
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	fb02 f303 	mul.w	r3, r2, r3
 800538a:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 800538c:	bf00      	nop
  } 
  while (Delay --);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	1e5a      	subs	r2, r3, #1
 8005392:	60fa      	str	r2, [r7, #12]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1f9      	bne.n	800538c <ETH_Delay+0x1c>
}
 8005398:	bf00      	nop
 800539a:	bf00      	nop
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	20000000 	.word	0x20000000
 80053ac:	10624dd3 	.word	0x10624dd3

080053b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b089      	sub	sp, #36	; 0x24
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80053ba:	2300      	movs	r3, #0
 80053bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80053be:	2300      	movs	r3, #0
 80053c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80053c2:	2300      	movs	r3, #0
 80053c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053c6:	2300      	movs	r3, #0
 80053c8:	61fb      	str	r3, [r7, #28]
 80053ca:	e177      	b.n	80056bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80053cc:	2201      	movs	r2, #1
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	fa02 f303 	lsl.w	r3, r2, r3
 80053d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	4013      	ands	r3, r2
 80053de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	f040 8166 	bne.w	80056b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f003 0303 	and.w	r3, r3, #3
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d005      	beq.n	8005402 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d130      	bne.n	8005464 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	005b      	lsls	r3, r3, #1
 800540c:	2203      	movs	r2, #3
 800540e:	fa02 f303 	lsl.w	r3, r2, r3
 8005412:	43db      	mvns	r3, r3
 8005414:	69ba      	ldr	r2, [r7, #24]
 8005416:	4013      	ands	r3, r2
 8005418:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	68da      	ldr	r2, [r3, #12]
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	005b      	lsls	r3, r3, #1
 8005422:	fa02 f303 	lsl.w	r3, r2, r3
 8005426:	69ba      	ldr	r2, [r7, #24]
 8005428:	4313      	orrs	r3, r2
 800542a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005438:	2201      	movs	r2, #1
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	fa02 f303 	lsl.w	r3, r2, r3
 8005440:	43db      	mvns	r3, r3
 8005442:	69ba      	ldr	r2, [r7, #24]
 8005444:	4013      	ands	r3, r2
 8005446:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	091b      	lsrs	r3, r3, #4
 800544e:	f003 0201 	and.w	r2, r3, #1
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	fa02 f303 	lsl.w	r3, r2, r3
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	4313      	orrs	r3, r2
 800545c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	69ba      	ldr	r2, [r7, #24]
 8005462:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f003 0303 	and.w	r3, r3, #3
 800546c:	2b03      	cmp	r3, #3
 800546e:	d017      	beq.n	80054a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	2203      	movs	r2, #3
 800547c:	fa02 f303 	lsl.w	r3, r2, r3
 8005480:	43db      	mvns	r3, r3
 8005482:	69ba      	ldr	r2, [r7, #24]
 8005484:	4013      	ands	r3, r2
 8005486:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	689a      	ldr	r2, [r3, #8]
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	fa02 f303 	lsl.w	r3, r2, r3
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	4313      	orrs	r3, r2
 8005498:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f003 0303 	and.w	r3, r3, #3
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d123      	bne.n	80054f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	08da      	lsrs	r2, r3, #3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	3208      	adds	r2, #8
 80054b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	f003 0307 	and.w	r3, r3, #7
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	220f      	movs	r2, #15
 80054c4:	fa02 f303 	lsl.w	r3, r2, r3
 80054c8:	43db      	mvns	r3, r3
 80054ca:	69ba      	ldr	r2, [r7, #24]
 80054cc:	4013      	ands	r3, r2
 80054ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	691a      	ldr	r2, [r3, #16]
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	f003 0307 	and.w	r3, r3, #7
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	fa02 f303 	lsl.w	r3, r2, r3
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	08da      	lsrs	r2, r3, #3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	3208      	adds	r2, #8
 80054ee:	69b9      	ldr	r1, [r7, #24]
 80054f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	2203      	movs	r2, #3
 8005500:	fa02 f303 	lsl.w	r3, r2, r3
 8005504:	43db      	mvns	r3, r3
 8005506:	69ba      	ldr	r2, [r7, #24]
 8005508:	4013      	ands	r3, r2
 800550a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f003 0203 	and.w	r2, r3, #3
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	005b      	lsls	r3, r3, #1
 8005518:	fa02 f303 	lsl.w	r3, r2, r3
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	4313      	orrs	r3, r2
 8005520:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	69ba      	ldr	r2, [r7, #24]
 8005526:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005530:	2b00      	cmp	r3, #0
 8005532:	f000 80c0 	beq.w	80056b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005536:	2300      	movs	r3, #0
 8005538:	60fb      	str	r3, [r7, #12]
 800553a:	4b66      	ldr	r3, [pc, #408]	; (80056d4 <HAL_GPIO_Init+0x324>)
 800553c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800553e:	4a65      	ldr	r2, [pc, #404]	; (80056d4 <HAL_GPIO_Init+0x324>)
 8005540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005544:	6453      	str	r3, [r2, #68]	; 0x44
 8005546:	4b63      	ldr	r3, [pc, #396]	; (80056d4 <HAL_GPIO_Init+0x324>)
 8005548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800554a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800554e:	60fb      	str	r3, [r7, #12]
 8005550:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005552:	4a61      	ldr	r2, [pc, #388]	; (80056d8 <HAL_GPIO_Init+0x328>)
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	089b      	lsrs	r3, r3, #2
 8005558:	3302      	adds	r3, #2
 800555a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800555e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	f003 0303 	and.w	r3, r3, #3
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	220f      	movs	r2, #15
 800556a:	fa02 f303 	lsl.w	r3, r2, r3
 800556e:	43db      	mvns	r3, r3
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	4013      	ands	r3, r2
 8005574:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a58      	ldr	r2, [pc, #352]	; (80056dc <HAL_GPIO_Init+0x32c>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d037      	beq.n	80055ee <HAL_GPIO_Init+0x23e>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a57      	ldr	r2, [pc, #348]	; (80056e0 <HAL_GPIO_Init+0x330>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d031      	beq.n	80055ea <HAL_GPIO_Init+0x23a>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a56      	ldr	r2, [pc, #344]	; (80056e4 <HAL_GPIO_Init+0x334>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d02b      	beq.n	80055e6 <HAL_GPIO_Init+0x236>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a55      	ldr	r2, [pc, #340]	; (80056e8 <HAL_GPIO_Init+0x338>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d025      	beq.n	80055e2 <HAL_GPIO_Init+0x232>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a54      	ldr	r2, [pc, #336]	; (80056ec <HAL_GPIO_Init+0x33c>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d01f      	beq.n	80055de <HAL_GPIO_Init+0x22e>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a53      	ldr	r2, [pc, #332]	; (80056f0 <HAL_GPIO_Init+0x340>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d019      	beq.n	80055da <HAL_GPIO_Init+0x22a>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a52      	ldr	r2, [pc, #328]	; (80056f4 <HAL_GPIO_Init+0x344>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d013      	beq.n	80055d6 <HAL_GPIO_Init+0x226>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a51      	ldr	r2, [pc, #324]	; (80056f8 <HAL_GPIO_Init+0x348>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d00d      	beq.n	80055d2 <HAL_GPIO_Init+0x222>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a50      	ldr	r2, [pc, #320]	; (80056fc <HAL_GPIO_Init+0x34c>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d007      	beq.n	80055ce <HAL_GPIO_Init+0x21e>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a4f      	ldr	r2, [pc, #316]	; (8005700 <HAL_GPIO_Init+0x350>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d101      	bne.n	80055ca <HAL_GPIO_Init+0x21a>
 80055c6:	2309      	movs	r3, #9
 80055c8:	e012      	b.n	80055f0 <HAL_GPIO_Init+0x240>
 80055ca:	230a      	movs	r3, #10
 80055cc:	e010      	b.n	80055f0 <HAL_GPIO_Init+0x240>
 80055ce:	2308      	movs	r3, #8
 80055d0:	e00e      	b.n	80055f0 <HAL_GPIO_Init+0x240>
 80055d2:	2307      	movs	r3, #7
 80055d4:	e00c      	b.n	80055f0 <HAL_GPIO_Init+0x240>
 80055d6:	2306      	movs	r3, #6
 80055d8:	e00a      	b.n	80055f0 <HAL_GPIO_Init+0x240>
 80055da:	2305      	movs	r3, #5
 80055dc:	e008      	b.n	80055f0 <HAL_GPIO_Init+0x240>
 80055de:	2304      	movs	r3, #4
 80055e0:	e006      	b.n	80055f0 <HAL_GPIO_Init+0x240>
 80055e2:	2303      	movs	r3, #3
 80055e4:	e004      	b.n	80055f0 <HAL_GPIO_Init+0x240>
 80055e6:	2302      	movs	r3, #2
 80055e8:	e002      	b.n	80055f0 <HAL_GPIO_Init+0x240>
 80055ea:	2301      	movs	r3, #1
 80055ec:	e000      	b.n	80055f0 <HAL_GPIO_Init+0x240>
 80055ee:	2300      	movs	r3, #0
 80055f0:	69fa      	ldr	r2, [r7, #28]
 80055f2:	f002 0203 	and.w	r2, r2, #3
 80055f6:	0092      	lsls	r2, r2, #2
 80055f8:	4093      	lsls	r3, r2
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005600:	4935      	ldr	r1, [pc, #212]	; (80056d8 <HAL_GPIO_Init+0x328>)
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	089b      	lsrs	r3, r3, #2
 8005606:	3302      	adds	r3, #2
 8005608:	69ba      	ldr	r2, [r7, #24]
 800560a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800560e:	4b3d      	ldr	r3, [pc, #244]	; (8005704 <HAL_GPIO_Init+0x354>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	43db      	mvns	r3, r3
 8005618:	69ba      	ldr	r2, [r7, #24]
 800561a:	4013      	ands	r3, r2
 800561c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d003      	beq.n	8005632 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800562a:	69ba      	ldr	r2, [r7, #24]
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	4313      	orrs	r3, r2
 8005630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005632:	4a34      	ldr	r2, [pc, #208]	; (8005704 <HAL_GPIO_Init+0x354>)
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005638:	4b32      	ldr	r3, [pc, #200]	; (8005704 <HAL_GPIO_Init+0x354>)
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	43db      	mvns	r3, r3
 8005642:	69ba      	ldr	r2, [r7, #24]
 8005644:	4013      	ands	r3, r2
 8005646:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d003      	beq.n	800565c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	4313      	orrs	r3, r2
 800565a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800565c:	4a29      	ldr	r2, [pc, #164]	; (8005704 <HAL_GPIO_Init+0x354>)
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005662:	4b28      	ldr	r3, [pc, #160]	; (8005704 <HAL_GPIO_Init+0x354>)
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	43db      	mvns	r3, r3
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	4013      	ands	r3, r2
 8005670:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d003      	beq.n	8005686 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	4313      	orrs	r3, r2
 8005684:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005686:	4a1f      	ldr	r2, [pc, #124]	; (8005704 <HAL_GPIO_Init+0x354>)
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800568c:	4b1d      	ldr	r3, [pc, #116]	; (8005704 <HAL_GPIO_Init+0x354>)
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	43db      	mvns	r3, r3
 8005696:	69ba      	ldr	r2, [r7, #24]
 8005698:	4013      	ands	r3, r2
 800569a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d003      	beq.n	80056b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80056b0:	4a14      	ldr	r2, [pc, #80]	; (8005704 <HAL_GPIO_Init+0x354>)
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	3301      	adds	r3, #1
 80056ba:	61fb      	str	r3, [r7, #28]
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	2b0f      	cmp	r3, #15
 80056c0:	f67f ae84 	bls.w	80053cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80056c4:	bf00      	nop
 80056c6:	bf00      	nop
 80056c8:	3724      	adds	r7, #36	; 0x24
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	40023800 	.word	0x40023800
 80056d8:	40013800 	.word	0x40013800
 80056dc:	40020000 	.word	0x40020000
 80056e0:	40020400 	.word	0x40020400
 80056e4:	40020800 	.word	0x40020800
 80056e8:	40020c00 	.word	0x40020c00
 80056ec:	40021000 	.word	0x40021000
 80056f0:	40021400 	.word	0x40021400
 80056f4:	40021800 	.word	0x40021800
 80056f8:	40021c00 	.word	0x40021c00
 80056fc:	40022000 	.word	0x40022000
 8005700:	40022400 	.word	0x40022400
 8005704:	40013c00 	.word	0x40013c00

08005708 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	460b      	mov	r3, r1
 8005712:	807b      	strh	r3, [r7, #2]
 8005714:	4613      	mov	r3, r2
 8005716:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005718:	787b      	ldrb	r3, [r7, #1]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d003      	beq.n	8005726 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800571e:	887a      	ldrh	r2, [r7, #2]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005724:	e003      	b.n	800572e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005726:	887b      	ldrh	r3, [r7, #2]
 8005728:	041a      	lsls	r2, r3, #16
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	619a      	str	r2, [r3, #24]
}
 800572e:	bf00      	nop
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800573a:	b480      	push	{r7}
 800573c:	b085      	sub	sp, #20
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
 8005742:	460b      	mov	r3, r1
 8005744:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800574c:	887a      	ldrh	r2, [r7, #2]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	4013      	ands	r3, r2
 8005752:	041a      	lsls	r2, r3, #16
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	43d9      	mvns	r1, r3
 8005758:	887b      	ldrh	r3, [r7, #2]
 800575a:	400b      	ands	r3, r1
 800575c:	431a      	orrs	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	619a      	str	r2, [r3, #24]
}
 8005762:	bf00      	nop
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
	...

08005770 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e0bf      	b.n	8005902 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d106      	bne.n	800579c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7fc fb24 	bl	8001de4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	699a      	ldr	r2, [r3, #24]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80057b2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6999      	ldr	r1, [r3, #24]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80057c8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	430a      	orrs	r2, r1
 80057d6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6899      	ldr	r1, [r3, #8]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	4b4a      	ldr	r3, [pc, #296]	; (800590c <HAL_LTDC_Init+0x19c>)
 80057e4:	400b      	ands	r3, r1
 80057e6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	695b      	ldr	r3, [r3, #20]
 80057ec:	041b      	lsls	r3, r3, #16
 80057ee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6899      	ldr	r1, [r3, #8]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	699a      	ldr	r2, [r3, #24]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	431a      	orrs	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68d9      	ldr	r1, [r3, #12]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	4b3e      	ldr	r3, [pc, #248]	; (800590c <HAL_LTDC_Init+0x19c>)
 8005812:	400b      	ands	r3, r1
 8005814:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	041b      	lsls	r3, r3, #16
 800581c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68d9      	ldr	r1, [r3, #12]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a1a      	ldr	r2, [r3, #32]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	431a      	orrs	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	430a      	orrs	r2, r1
 8005832:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6919      	ldr	r1, [r3, #16]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	4b33      	ldr	r3, [pc, #204]	; (800590c <HAL_LTDC_Init+0x19c>)
 8005840:	400b      	ands	r3, r1
 8005842:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005848:	041b      	lsls	r3, r3, #16
 800584a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6919      	ldr	r1, [r3, #16]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	431a      	orrs	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	430a      	orrs	r2, r1
 8005860:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6959      	ldr	r1, [r3, #20]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	4b27      	ldr	r3, [pc, #156]	; (800590c <HAL_LTDC_Init+0x19c>)
 800586e:	400b      	ands	r3, r1
 8005870:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005876:	041b      	lsls	r3, r3, #16
 8005878:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6959      	ldr	r1, [r3, #20]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	431a      	orrs	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	430a      	orrs	r2, r1
 800588e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005896:	021b      	lsls	r3, r3, #8
 8005898:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80058a0:	041b      	lsls	r3, r3, #16
 80058a2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80058b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	4313      	orrs	r3, r2
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80058c6:	431a      	orrs	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	430a      	orrs	r2, r1
 80058ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f042 0206 	orr.w	r2, r2, #6
 80058de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	699a      	ldr	r2, [r3, #24]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f042 0201 	orr.w	r2, r2, #1
 80058ee:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	f000f800 	.word	0xf000f800

08005910 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005910:	b5b0      	push	{r4, r5, r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005922:	2b01      	cmp	r3, #1
 8005924:	d101      	bne.n	800592a <HAL_LTDC_ConfigLayer+0x1a>
 8005926:	2302      	movs	r3, #2
 8005928:	e02c      	b.n	8005984 <HAL_LTDC_ConfigLayer+0x74>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2202      	movs	r2, #2
 8005936:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2134      	movs	r1, #52	; 0x34
 8005940:	fb01 f303 	mul.w	r3, r1, r3
 8005944:	4413      	add	r3, r2
 8005946:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	4614      	mov	r4, r2
 800594e:	461d      	mov	r5, r3
 8005950:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005952:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005954:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005956:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005958:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800595a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800595c:	682b      	ldr	r3, [r5, #0]
 800595e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	68b9      	ldr	r1, [r7, #8]
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f000 f811 	bl	800598c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2201      	movs	r2, #1
 8005970:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bdb0      	pop	{r4, r5, r7, pc}

0800598c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800598c:	b480      	push	{r7}
 800598e:	b089      	sub	sp, #36	; 0x24
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	685a      	ldr	r2, [r3, #4]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	0c1b      	lsrs	r3, r3, #16
 80059a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059a8:	4413      	add	r3, r2
 80059aa:	041b      	lsls	r3, r3, #16
 80059ac:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	461a      	mov	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	01db      	lsls	r3, r3, #7
 80059b8:	4413      	add	r3, r2
 80059ba:	3384      	adds	r3, #132	; 0x84
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	6812      	ldr	r2, [r2, #0]
 80059c2:	4611      	mov	r1, r2
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	01d2      	lsls	r2, r2, #7
 80059c8:	440a      	add	r2, r1
 80059ca:	3284      	adds	r2, #132	; 0x84
 80059cc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80059d0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	0c1b      	lsrs	r3, r3, #16
 80059de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059e2:	4413      	add	r3, r2
 80059e4:	1c5a      	adds	r2, r3, #1
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4619      	mov	r1, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	01db      	lsls	r3, r3, #7
 80059f0:	440b      	add	r3, r1
 80059f2:	3384      	adds	r3, #132	; 0x84
 80059f4:	4619      	mov	r1, r3
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	68da      	ldr	r2, [r3, #12]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a0a:	4413      	add	r3, r2
 8005a0c:	041b      	lsls	r3, r3, #16
 8005a0e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	461a      	mov	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	01db      	lsls	r3, r3, #7
 8005a1a:	4413      	add	r3, r2
 8005a1c:	3384      	adds	r3, #132	; 0x84
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	6812      	ldr	r2, [r2, #0]
 8005a24:	4611      	mov	r1, r2
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	01d2      	lsls	r2, r2, #7
 8005a2a:	440a      	add	r2, r1
 8005a2c:	3284      	adds	r2, #132	; 0x84
 8005a2e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005a32:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	689a      	ldr	r2, [r3, #8]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a42:	4413      	add	r3, r2
 8005a44:	1c5a      	adds	r2, r3, #1
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	01db      	lsls	r3, r3, #7
 8005a50:	440b      	add	r3, r1
 8005a52:	3384      	adds	r3, #132	; 0x84
 8005a54:	4619      	mov	r1, r3
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	461a      	mov	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	01db      	lsls	r3, r3, #7
 8005a66:	4413      	add	r3, r2
 8005a68:	3384      	adds	r3, #132	; 0x84
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	6812      	ldr	r2, [r2, #0]
 8005a70:	4611      	mov	r1, r2
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	01d2      	lsls	r2, r2, #7
 8005a76:	440a      	add	r2, r1
 8005a78:	3284      	adds	r2, #132	; 0x84
 8005a7a:	f023 0307 	bic.w	r3, r3, #7
 8005a7e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	461a      	mov	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	01db      	lsls	r3, r3, #7
 8005a8a:	4413      	add	r3, r2
 8005a8c:	3384      	adds	r3, #132	; 0x84
 8005a8e:	461a      	mov	r2, r3
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005a9c:	021b      	lsls	r3, r3, #8
 8005a9e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005aa6:	041b      	lsls	r3, r3, #16
 8005aa8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	061b      	lsls	r3, r3, #24
 8005ab0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	01db      	lsls	r3, r3, #7
 8005abc:	4413      	add	r3, r2
 8005abe:	3384      	adds	r3, #132	; 0x84
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	01db      	lsls	r3, r3, #7
 8005acc:	4413      	add	r3, r2
 8005ace:	3384      	adds	r3, #132	; 0x84
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005adc:	461a      	mov	r2, r3
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	431a      	orrs	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4619      	mov	r1, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	01db      	lsls	r3, r3, #7
 8005af0:	440b      	add	r3, r1
 8005af2:	3384      	adds	r3, #132	; 0x84
 8005af4:	4619      	mov	r1, r3
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	461a      	mov	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	01db      	lsls	r3, r3, #7
 8005b06:	4413      	add	r3, r2
 8005b08:	3384      	adds	r3, #132	; 0x84
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	6812      	ldr	r2, [r2, #0]
 8005b10:	4611      	mov	r1, r2
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	01d2      	lsls	r2, r2, #7
 8005b16:	440a      	add	r2, r1
 8005b18:	3284      	adds	r2, #132	; 0x84
 8005b1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005b1e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	461a      	mov	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	01db      	lsls	r3, r3, #7
 8005b2a:	4413      	add	r3, r2
 8005b2c:	3384      	adds	r3, #132	; 0x84
 8005b2e:	461a      	mov	r2, r3
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	695b      	ldr	r3, [r3, #20]
 8005b34:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	01db      	lsls	r3, r3, #7
 8005b40:	4413      	add	r3, r2
 8005b42:	3384      	adds	r3, #132	; 0x84
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	6812      	ldr	r2, [r2, #0]
 8005b4a:	4611      	mov	r1, r2
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	01d2      	lsls	r2, r2, #7
 8005b50:	440a      	add	r2, r1
 8005b52:	3284      	adds	r2, #132	; 0x84
 8005b54:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005b58:	f023 0307 	bic.w	r3, r3, #7
 8005b5c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	69da      	ldr	r2, [r3, #28]
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	68f9      	ldr	r1, [r7, #12]
 8005b68:	6809      	ldr	r1, [r1, #0]
 8005b6a:	4608      	mov	r0, r1
 8005b6c:	6879      	ldr	r1, [r7, #4]
 8005b6e:	01c9      	lsls	r1, r1, #7
 8005b70:	4401      	add	r1, r0
 8005b72:	3184      	adds	r1, #132	; 0x84
 8005b74:	4313      	orrs	r3, r2
 8005b76:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	01db      	lsls	r3, r3, #7
 8005b82:	4413      	add	r3, r2
 8005b84:	3384      	adds	r3, #132	; 0x84
 8005b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	01db      	lsls	r3, r3, #7
 8005b92:	4413      	add	r3, r2
 8005b94:	3384      	adds	r3, #132	; 0x84
 8005b96:	461a      	mov	r2, r3
 8005b98:	2300      	movs	r3, #0
 8005b9a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	01db      	lsls	r3, r3, #7
 8005ba6:	4413      	add	r3, r2
 8005ba8:	3384      	adds	r3, #132	; 0x84
 8005baa:	461a      	mov	r2, r3
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb0:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d102      	bne.n	8005bc0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005bba:	2304      	movs	r3, #4
 8005bbc:	61fb      	str	r3, [r7, #28]
 8005bbe:	e01b      	b.n	8005bf8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d102      	bne.n	8005bce <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	61fb      	str	r3, [r7, #28]
 8005bcc:	e014      	b.n	8005bf8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	2b04      	cmp	r3, #4
 8005bd4:	d00b      	beq.n	8005bee <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d007      	beq.n	8005bee <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005be2:	2b03      	cmp	r3, #3
 8005be4:	d003      	beq.n	8005bee <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005bea:	2b07      	cmp	r3, #7
 8005bec:	d102      	bne.n	8005bf4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005bee:	2302      	movs	r3, #2
 8005bf0:	61fb      	str	r3, [r7, #28]
 8005bf2:	e001      	b.n	8005bf8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	01db      	lsls	r3, r3, #7
 8005c02:	4413      	add	r3, r2
 8005c04:	3384      	adds	r3, #132	; 0x84
 8005c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	6812      	ldr	r2, [r2, #0]
 8005c0c:	4611      	mov	r1, r2
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	01d2      	lsls	r2, r2, #7
 8005c12:	440a      	add	r2, r1
 8005c14:	3284      	adds	r2, #132	; 0x84
 8005c16:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005c1a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c20:	69fa      	ldr	r2, [r7, #28]
 8005c22:	fb02 f303 	mul.w	r3, r2, r3
 8005c26:	041a      	lsls	r2, r3, #16
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	6859      	ldr	r1, [r3, #4]
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	1acb      	subs	r3, r1, r3
 8005c32:	69f9      	ldr	r1, [r7, #28]
 8005c34:	fb01 f303 	mul.w	r3, r1, r3
 8005c38:	3303      	adds	r3, #3
 8005c3a:	68f9      	ldr	r1, [r7, #12]
 8005c3c:	6809      	ldr	r1, [r1, #0]
 8005c3e:	4608      	mov	r0, r1
 8005c40:	6879      	ldr	r1, [r7, #4]
 8005c42:	01c9      	lsls	r1, r1, #7
 8005c44:	4401      	add	r1, r0
 8005c46:	3184      	adds	r1, #132	; 0x84
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	461a      	mov	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	01db      	lsls	r3, r3, #7
 8005c56:	4413      	add	r3, r2
 8005c58:	3384      	adds	r3, #132	; 0x84
 8005c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	6812      	ldr	r2, [r2, #0]
 8005c60:	4611      	mov	r1, r2
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	01d2      	lsls	r2, r2, #7
 8005c66:	440a      	add	r2, r1
 8005c68:	3284      	adds	r2, #132	; 0x84
 8005c6a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005c6e:	f023 0307 	bic.w	r3, r3, #7
 8005c72:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	461a      	mov	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	01db      	lsls	r3, r3, #7
 8005c7e:	4413      	add	r3, r2
 8005c80:	3384      	adds	r3, #132	; 0x84
 8005c82:	461a      	mov	r2, r3
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c88:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	461a      	mov	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	01db      	lsls	r3, r3, #7
 8005c94:	4413      	add	r3, r2
 8005c96:	3384      	adds	r3, #132	; 0x84
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	6812      	ldr	r2, [r2, #0]
 8005c9e:	4611      	mov	r1, r2
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	01d2      	lsls	r2, r2, #7
 8005ca4:	440a      	add	r2, r1
 8005ca6:	3284      	adds	r2, #132	; 0x84
 8005ca8:	f043 0301 	orr.w	r3, r3, #1
 8005cac:	6013      	str	r3, [r2, #0]
}
 8005cae:	bf00      	nop
 8005cb0:	3724      	adds	r7, #36	; 0x24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
	...

08005cbc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	603b      	str	r3, [r7, #0]
 8005cca:	4b20      	ldr	r3, [pc, #128]	; (8005d4c <HAL_PWREx_EnableOverDrive+0x90>)
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	4a1f      	ldr	r2, [pc, #124]	; (8005d4c <HAL_PWREx_EnableOverDrive+0x90>)
 8005cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8005cd6:	4b1d      	ldr	r3, [pc, #116]	; (8005d4c <HAL_PWREx_EnableOverDrive+0x90>)
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cde:	603b      	str	r3, [r7, #0]
 8005ce0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005ce2:	4b1b      	ldr	r3, [pc, #108]	; (8005d50 <HAL_PWREx_EnableOverDrive+0x94>)
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ce8:	f7fc fe3c 	bl	8002964 <HAL_GetTick>
 8005cec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005cee:	e009      	b.n	8005d04 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005cf0:	f7fc fe38 	bl	8002964 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cfe:	d901      	bls.n	8005d04 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e01f      	b.n	8005d44 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005d04:	4b13      	ldr	r3, [pc, #76]	; (8005d54 <HAL_PWREx_EnableOverDrive+0x98>)
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d10:	d1ee      	bne.n	8005cf0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005d12:	4b11      	ldr	r3, [pc, #68]	; (8005d58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d14:	2201      	movs	r2, #1
 8005d16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d18:	f7fc fe24 	bl	8002964 <HAL_GetTick>
 8005d1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005d1e:	e009      	b.n	8005d34 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005d20:	f7fc fe20 	bl	8002964 <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d2e:	d901      	bls.n	8005d34 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e007      	b.n	8005d44 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005d34:	4b07      	ldr	r3, [pc, #28]	; (8005d54 <HAL_PWREx_EnableOverDrive+0x98>)
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d40:	d1ee      	bne.n	8005d20 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3708      	adds	r7, #8
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	40023800 	.word	0x40023800
 8005d50:	420e0040 	.word	0x420e0040
 8005d54:	40007000 	.word	0x40007000
 8005d58:	420e0044 	.word	0x420e0044

08005d5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d101      	bne.n	8005d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e267      	b.n	800623e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d075      	beq.n	8005e66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d7a:	4b88      	ldr	r3, [pc, #544]	; (8005f9c <HAL_RCC_OscConfig+0x240>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f003 030c 	and.w	r3, r3, #12
 8005d82:	2b04      	cmp	r3, #4
 8005d84:	d00c      	beq.n	8005da0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d86:	4b85      	ldr	r3, [pc, #532]	; (8005f9c <HAL_RCC_OscConfig+0x240>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d8e:	2b08      	cmp	r3, #8
 8005d90:	d112      	bne.n	8005db8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d92:	4b82      	ldr	r3, [pc, #520]	; (8005f9c <HAL_RCC_OscConfig+0x240>)
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d9e:	d10b      	bne.n	8005db8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005da0:	4b7e      	ldr	r3, [pc, #504]	; (8005f9c <HAL_RCC_OscConfig+0x240>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d05b      	beq.n	8005e64 <HAL_RCC_OscConfig+0x108>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d157      	bne.n	8005e64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e242      	b.n	800623e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dc0:	d106      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x74>
 8005dc2:	4b76      	ldr	r3, [pc, #472]	; (8005f9c <HAL_RCC_OscConfig+0x240>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a75      	ldr	r2, [pc, #468]	; (8005f9c <HAL_RCC_OscConfig+0x240>)
 8005dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dcc:	6013      	str	r3, [r2, #0]
 8005dce:	e01d      	b.n	8005e0c <HAL_RCC_OscConfig+0xb0>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005dd8:	d10c      	bne.n	8005df4 <HAL_RCC_OscConfig+0x98>
 8005dda:	4b70      	ldr	r3, [pc, #448]	; (8005f9c <HAL_RCC_OscConfig+0x240>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a6f      	ldr	r2, [pc, #444]	; (8005f9c <HAL_RCC_OscConfig+0x240>)
 8005de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005de4:	6013      	str	r3, [r2, #0]
 8005de6:	4b6d      	ldr	r3, [pc, #436]	; (8005f9c <HAL_RCC_OscConfig+0x240>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a6c      	ldr	r2, [pc, #432]	; (8005f9c <HAL_RCC_OscConfig+0x240>)
 8005dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005df0:	6013      	str	r3, [r2, #0]
 8005df2:	e00b      	b.n	8005e0c <HAL_RCC_OscConfig+0xb0>
 8005df4:	4b69      	ldr	r3, [pc, #420]	; (8005f9c <HAL_RCC_OscConfig+0x240>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a68      	ldr	r2, [pc, #416]	; (8005f9c <HAL_RCC_OscConfig+0x240>)
 8005dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dfe:	6013      	str	r3, [r2, #0]
 8005e00:	4b66      	ldr	r3, [pc, #408]	; (8005f9c <HAL_RCC_OscConfig+0x240>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a65      	ldr	r2, [pc, #404]	; (8005f9c <HAL_RCC_OscConfig+0x240>)
 8005e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d013      	beq.n	8005e3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e14:	f7fc fda6 	bl	8002964 <HAL_GetTick>
 8005e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e1a:	e008      	b.n	8005e2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e1c:	f7fc fda2 	bl	8002964 <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	2b64      	cmp	r3, #100	; 0x64
 8005e28:	d901      	bls.n	8005e2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e207      	b.n	800623e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e2e:	4b5b      	ldr	r3, [pc, #364]	; (8005f9c <HAL_RCC_OscConfig+0x240>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d0f0      	beq.n	8005e1c <HAL_RCC_OscConfig+0xc0>
 8005e3a:	e014      	b.n	8005e66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e3c:	f7fc fd92 	bl	8002964 <HAL_GetTick>
 8005e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e42:	e008      	b.n	8005e56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e44:	f7fc fd8e 	bl	8002964 <HAL_GetTick>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	2b64      	cmp	r3, #100	; 0x64
 8005e50:	d901      	bls.n	8005e56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e1f3      	b.n	800623e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e56:	4b51      	ldr	r3, [pc, #324]	; (8005f9c <HAL_RCC_OscConfig+0x240>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1f0      	bne.n	8005e44 <HAL_RCC_OscConfig+0xe8>
 8005e62:	e000      	b.n	8005e66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0302 	and.w	r3, r3, #2
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d063      	beq.n	8005f3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e72:	4b4a      	ldr	r3, [pc, #296]	; (8005f9c <HAL_RCC_OscConfig+0x240>)
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f003 030c 	and.w	r3, r3, #12
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00b      	beq.n	8005e96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e7e:	4b47      	ldr	r3, [pc, #284]	; (8005f9c <HAL_RCC_OscConfig+0x240>)
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e86:	2b08      	cmp	r3, #8
 8005e88:	d11c      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e8a:	4b44      	ldr	r3, [pc, #272]	; (8005f9c <HAL_RCC_OscConfig+0x240>)
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d116      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e96:	4b41      	ldr	r3, [pc, #260]	; (8005f9c <HAL_RCC_OscConfig+0x240>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 0302 	and.w	r3, r3, #2
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d005      	beq.n	8005eae <HAL_RCC_OscConfig+0x152>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d001      	beq.n	8005eae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e1c7      	b.n	800623e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eae:	4b3b      	ldr	r3, [pc, #236]	; (8005f9c <HAL_RCC_OscConfig+0x240>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	00db      	lsls	r3, r3, #3
 8005ebc:	4937      	ldr	r1, [pc, #220]	; (8005f9c <HAL_RCC_OscConfig+0x240>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ec2:	e03a      	b.n	8005f3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d020      	beq.n	8005f0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ecc:	4b34      	ldr	r3, [pc, #208]	; (8005fa0 <HAL_RCC_OscConfig+0x244>)
 8005ece:	2201      	movs	r2, #1
 8005ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed2:	f7fc fd47 	bl	8002964 <HAL_GetTick>
 8005ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ed8:	e008      	b.n	8005eec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005eda:	f7fc fd43 	bl	8002964 <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d901      	bls.n	8005eec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e1a8      	b.n	800623e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eec:	4b2b      	ldr	r3, [pc, #172]	; (8005f9c <HAL_RCC_OscConfig+0x240>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0302 	and.w	r3, r3, #2
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d0f0      	beq.n	8005eda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ef8:	4b28      	ldr	r3, [pc, #160]	; (8005f9c <HAL_RCC_OscConfig+0x240>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	00db      	lsls	r3, r3, #3
 8005f06:	4925      	ldr	r1, [pc, #148]	; (8005f9c <HAL_RCC_OscConfig+0x240>)
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	600b      	str	r3, [r1, #0]
 8005f0c:	e015      	b.n	8005f3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f0e:	4b24      	ldr	r3, [pc, #144]	; (8005fa0 <HAL_RCC_OscConfig+0x244>)
 8005f10:	2200      	movs	r2, #0
 8005f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f14:	f7fc fd26 	bl	8002964 <HAL_GetTick>
 8005f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f1a:	e008      	b.n	8005f2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f1c:	f7fc fd22 	bl	8002964 <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d901      	bls.n	8005f2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e187      	b.n	800623e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f2e:	4b1b      	ldr	r3, [pc, #108]	; (8005f9c <HAL_RCC_OscConfig+0x240>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0302 	and.w	r3, r3, #2
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1f0      	bne.n	8005f1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0308 	and.w	r3, r3, #8
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d036      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d016      	beq.n	8005f7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f4e:	4b15      	ldr	r3, [pc, #84]	; (8005fa4 <HAL_RCC_OscConfig+0x248>)
 8005f50:	2201      	movs	r2, #1
 8005f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f54:	f7fc fd06 	bl	8002964 <HAL_GetTick>
 8005f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f5a:	e008      	b.n	8005f6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f5c:	f7fc fd02 	bl	8002964 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d901      	bls.n	8005f6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e167      	b.n	800623e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f6e:	4b0b      	ldr	r3, [pc, #44]	; (8005f9c <HAL_RCC_OscConfig+0x240>)
 8005f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f72:	f003 0302 	and.w	r3, r3, #2
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d0f0      	beq.n	8005f5c <HAL_RCC_OscConfig+0x200>
 8005f7a:	e01b      	b.n	8005fb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f7c:	4b09      	ldr	r3, [pc, #36]	; (8005fa4 <HAL_RCC_OscConfig+0x248>)
 8005f7e:	2200      	movs	r2, #0
 8005f80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f82:	f7fc fcef 	bl	8002964 <HAL_GetTick>
 8005f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f88:	e00e      	b.n	8005fa8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f8a:	f7fc fceb 	bl	8002964 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d907      	bls.n	8005fa8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e150      	b.n	800623e <HAL_RCC_OscConfig+0x4e2>
 8005f9c:	40023800 	.word	0x40023800
 8005fa0:	42470000 	.word	0x42470000
 8005fa4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fa8:	4b88      	ldr	r3, [pc, #544]	; (80061cc <HAL_RCC_OscConfig+0x470>)
 8005faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fac:	f003 0302 	and.w	r3, r3, #2
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1ea      	bne.n	8005f8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0304 	and.w	r3, r3, #4
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f000 8097 	beq.w	80060f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fc6:	4b81      	ldr	r3, [pc, #516]	; (80061cc <HAL_RCC_OscConfig+0x470>)
 8005fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d10f      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	60bb      	str	r3, [r7, #8]
 8005fd6:	4b7d      	ldr	r3, [pc, #500]	; (80061cc <HAL_RCC_OscConfig+0x470>)
 8005fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fda:	4a7c      	ldr	r2, [pc, #496]	; (80061cc <HAL_RCC_OscConfig+0x470>)
 8005fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8005fe2:	4b7a      	ldr	r3, [pc, #488]	; (80061cc <HAL_RCC_OscConfig+0x470>)
 8005fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fea:	60bb      	str	r3, [r7, #8]
 8005fec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ff2:	4b77      	ldr	r3, [pc, #476]	; (80061d0 <HAL_RCC_OscConfig+0x474>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d118      	bne.n	8006030 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ffe:	4b74      	ldr	r3, [pc, #464]	; (80061d0 <HAL_RCC_OscConfig+0x474>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a73      	ldr	r2, [pc, #460]	; (80061d0 <HAL_RCC_OscConfig+0x474>)
 8006004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006008:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800600a:	f7fc fcab 	bl	8002964 <HAL_GetTick>
 800600e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006010:	e008      	b.n	8006024 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006012:	f7fc fca7 	bl	8002964 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	2b02      	cmp	r3, #2
 800601e:	d901      	bls.n	8006024 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006020:	2303      	movs	r3, #3
 8006022:	e10c      	b.n	800623e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006024:	4b6a      	ldr	r3, [pc, #424]	; (80061d0 <HAL_RCC_OscConfig+0x474>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800602c:	2b00      	cmp	r3, #0
 800602e:	d0f0      	beq.n	8006012 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	2b01      	cmp	r3, #1
 8006036:	d106      	bne.n	8006046 <HAL_RCC_OscConfig+0x2ea>
 8006038:	4b64      	ldr	r3, [pc, #400]	; (80061cc <HAL_RCC_OscConfig+0x470>)
 800603a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800603c:	4a63      	ldr	r2, [pc, #396]	; (80061cc <HAL_RCC_OscConfig+0x470>)
 800603e:	f043 0301 	orr.w	r3, r3, #1
 8006042:	6713      	str	r3, [r2, #112]	; 0x70
 8006044:	e01c      	b.n	8006080 <HAL_RCC_OscConfig+0x324>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	2b05      	cmp	r3, #5
 800604c:	d10c      	bne.n	8006068 <HAL_RCC_OscConfig+0x30c>
 800604e:	4b5f      	ldr	r3, [pc, #380]	; (80061cc <HAL_RCC_OscConfig+0x470>)
 8006050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006052:	4a5e      	ldr	r2, [pc, #376]	; (80061cc <HAL_RCC_OscConfig+0x470>)
 8006054:	f043 0304 	orr.w	r3, r3, #4
 8006058:	6713      	str	r3, [r2, #112]	; 0x70
 800605a:	4b5c      	ldr	r3, [pc, #368]	; (80061cc <HAL_RCC_OscConfig+0x470>)
 800605c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800605e:	4a5b      	ldr	r2, [pc, #364]	; (80061cc <HAL_RCC_OscConfig+0x470>)
 8006060:	f043 0301 	orr.w	r3, r3, #1
 8006064:	6713      	str	r3, [r2, #112]	; 0x70
 8006066:	e00b      	b.n	8006080 <HAL_RCC_OscConfig+0x324>
 8006068:	4b58      	ldr	r3, [pc, #352]	; (80061cc <HAL_RCC_OscConfig+0x470>)
 800606a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800606c:	4a57      	ldr	r2, [pc, #348]	; (80061cc <HAL_RCC_OscConfig+0x470>)
 800606e:	f023 0301 	bic.w	r3, r3, #1
 8006072:	6713      	str	r3, [r2, #112]	; 0x70
 8006074:	4b55      	ldr	r3, [pc, #340]	; (80061cc <HAL_RCC_OscConfig+0x470>)
 8006076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006078:	4a54      	ldr	r2, [pc, #336]	; (80061cc <HAL_RCC_OscConfig+0x470>)
 800607a:	f023 0304 	bic.w	r3, r3, #4
 800607e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d015      	beq.n	80060b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006088:	f7fc fc6c 	bl	8002964 <HAL_GetTick>
 800608c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800608e:	e00a      	b.n	80060a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006090:	f7fc fc68 	bl	8002964 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	f241 3288 	movw	r2, #5000	; 0x1388
 800609e:	4293      	cmp	r3, r2
 80060a0:	d901      	bls.n	80060a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e0cb      	b.n	800623e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060a6:	4b49      	ldr	r3, [pc, #292]	; (80061cc <HAL_RCC_OscConfig+0x470>)
 80060a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060aa:	f003 0302 	and.w	r3, r3, #2
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d0ee      	beq.n	8006090 <HAL_RCC_OscConfig+0x334>
 80060b2:	e014      	b.n	80060de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060b4:	f7fc fc56 	bl	8002964 <HAL_GetTick>
 80060b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060ba:	e00a      	b.n	80060d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060bc:	f7fc fc52 	bl	8002964 <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d901      	bls.n	80060d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e0b5      	b.n	800623e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060d2:	4b3e      	ldr	r3, [pc, #248]	; (80061cc <HAL_RCC_OscConfig+0x470>)
 80060d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1ee      	bne.n	80060bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060de:	7dfb      	ldrb	r3, [r7, #23]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d105      	bne.n	80060f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060e4:	4b39      	ldr	r3, [pc, #228]	; (80061cc <HAL_RCC_OscConfig+0x470>)
 80060e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e8:	4a38      	ldr	r2, [pc, #224]	; (80061cc <HAL_RCC_OscConfig+0x470>)
 80060ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f000 80a1 	beq.w	800623c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060fa:	4b34      	ldr	r3, [pc, #208]	; (80061cc <HAL_RCC_OscConfig+0x470>)
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f003 030c 	and.w	r3, r3, #12
 8006102:	2b08      	cmp	r3, #8
 8006104:	d05c      	beq.n	80061c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	2b02      	cmp	r3, #2
 800610c:	d141      	bne.n	8006192 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800610e:	4b31      	ldr	r3, [pc, #196]	; (80061d4 <HAL_RCC_OscConfig+0x478>)
 8006110:	2200      	movs	r2, #0
 8006112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006114:	f7fc fc26 	bl	8002964 <HAL_GetTick>
 8006118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800611a:	e008      	b.n	800612e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800611c:	f7fc fc22 	bl	8002964 <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	2b02      	cmp	r3, #2
 8006128:	d901      	bls.n	800612e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e087      	b.n	800623e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800612e:	4b27      	ldr	r3, [pc, #156]	; (80061cc <HAL_RCC_OscConfig+0x470>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1f0      	bne.n	800611c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	69da      	ldr	r2, [r3, #28]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	431a      	orrs	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006148:	019b      	lsls	r3, r3, #6
 800614a:	431a      	orrs	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006150:	085b      	lsrs	r3, r3, #1
 8006152:	3b01      	subs	r3, #1
 8006154:	041b      	lsls	r3, r3, #16
 8006156:	431a      	orrs	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615c:	061b      	lsls	r3, r3, #24
 800615e:	491b      	ldr	r1, [pc, #108]	; (80061cc <HAL_RCC_OscConfig+0x470>)
 8006160:	4313      	orrs	r3, r2
 8006162:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006164:	4b1b      	ldr	r3, [pc, #108]	; (80061d4 <HAL_RCC_OscConfig+0x478>)
 8006166:	2201      	movs	r2, #1
 8006168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800616a:	f7fc fbfb 	bl	8002964 <HAL_GetTick>
 800616e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006170:	e008      	b.n	8006184 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006172:	f7fc fbf7 	bl	8002964 <HAL_GetTick>
 8006176:	4602      	mov	r2, r0
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	2b02      	cmp	r3, #2
 800617e:	d901      	bls.n	8006184 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e05c      	b.n	800623e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006184:	4b11      	ldr	r3, [pc, #68]	; (80061cc <HAL_RCC_OscConfig+0x470>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d0f0      	beq.n	8006172 <HAL_RCC_OscConfig+0x416>
 8006190:	e054      	b.n	800623c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006192:	4b10      	ldr	r3, [pc, #64]	; (80061d4 <HAL_RCC_OscConfig+0x478>)
 8006194:	2200      	movs	r2, #0
 8006196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006198:	f7fc fbe4 	bl	8002964 <HAL_GetTick>
 800619c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800619e:	e008      	b.n	80061b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061a0:	f7fc fbe0 	bl	8002964 <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d901      	bls.n	80061b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e045      	b.n	800623e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061b2:	4b06      	ldr	r3, [pc, #24]	; (80061cc <HAL_RCC_OscConfig+0x470>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1f0      	bne.n	80061a0 <HAL_RCC_OscConfig+0x444>
 80061be:	e03d      	b.n	800623c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d107      	bne.n	80061d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e038      	b.n	800623e <HAL_RCC_OscConfig+0x4e2>
 80061cc:	40023800 	.word	0x40023800
 80061d0:	40007000 	.word	0x40007000
 80061d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80061d8:	4b1b      	ldr	r3, [pc, #108]	; (8006248 <HAL_RCC_OscConfig+0x4ec>)
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d028      	beq.n	8006238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d121      	bne.n	8006238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061fe:	429a      	cmp	r2, r3
 8006200:	d11a      	bne.n	8006238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006208:	4013      	ands	r3, r2
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800620e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006210:	4293      	cmp	r3, r2
 8006212:	d111      	bne.n	8006238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800621e:	085b      	lsrs	r3, r3, #1
 8006220:	3b01      	subs	r3, #1
 8006222:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006224:	429a      	cmp	r2, r3
 8006226:	d107      	bne.n	8006238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006232:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006234:	429a      	cmp	r2, r3
 8006236:	d001      	beq.n	800623c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e000      	b.n	800623e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3718      	adds	r7, #24
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	40023800 	.word	0x40023800

0800624c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d101      	bne.n	8006260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e0cc      	b.n	80063fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006260:	4b68      	ldr	r3, [pc, #416]	; (8006404 <HAL_RCC_ClockConfig+0x1b8>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 030f 	and.w	r3, r3, #15
 8006268:	683a      	ldr	r2, [r7, #0]
 800626a:	429a      	cmp	r2, r3
 800626c:	d90c      	bls.n	8006288 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800626e:	4b65      	ldr	r3, [pc, #404]	; (8006404 <HAL_RCC_ClockConfig+0x1b8>)
 8006270:	683a      	ldr	r2, [r7, #0]
 8006272:	b2d2      	uxtb	r2, r2
 8006274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006276:	4b63      	ldr	r3, [pc, #396]	; (8006404 <HAL_RCC_ClockConfig+0x1b8>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 030f 	and.w	r3, r3, #15
 800627e:	683a      	ldr	r2, [r7, #0]
 8006280:	429a      	cmp	r2, r3
 8006282:	d001      	beq.n	8006288 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e0b8      	b.n	80063fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0302 	and.w	r3, r3, #2
 8006290:	2b00      	cmp	r3, #0
 8006292:	d020      	beq.n	80062d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0304 	and.w	r3, r3, #4
 800629c:	2b00      	cmp	r3, #0
 800629e:	d005      	beq.n	80062ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062a0:	4b59      	ldr	r3, [pc, #356]	; (8006408 <HAL_RCC_ClockConfig+0x1bc>)
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	4a58      	ldr	r2, [pc, #352]	; (8006408 <HAL_RCC_ClockConfig+0x1bc>)
 80062a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80062aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0308 	and.w	r3, r3, #8
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d005      	beq.n	80062c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062b8:	4b53      	ldr	r3, [pc, #332]	; (8006408 <HAL_RCC_ClockConfig+0x1bc>)
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	4a52      	ldr	r2, [pc, #328]	; (8006408 <HAL_RCC_ClockConfig+0x1bc>)
 80062be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80062c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062c4:	4b50      	ldr	r3, [pc, #320]	; (8006408 <HAL_RCC_ClockConfig+0x1bc>)
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	494d      	ldr	r1, [pc, #308]	; (8006408 <HAL_RCC_ClockConfig+0x1bc>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d044      	beq.n	800636c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d107      	bne.n	80062fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062ea:	4b47      	ldr	r3, [pc, #284]	; (8006408 <HAL_RCC_ClockConfig+0x1bc>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d119      	bne.n	800632a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e07f      	b.n	80063fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d003      	beq.n	800630a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006306:	2b03      	cmp	r3, #3
 8006308:	d107      	bne.n	800631a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800630a:	4b3f      	ldr	r3, [pc, #252]	; (8006408 <HAL_RCC_ClockConfig+0x1bc>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006312:	2b00      	cmp	r3, #0
 8006314:	d109      	bne.n	800632a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e06f      	b.n	80063fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800631a:	4b3b      	ldr	r3, [pc, #236]	; (8006408 <HAL_RCC_ClockConfig+0x1bc>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 0302 	and.w	r3, r3, #2
 8006322:	2b00      	cmp	r3, #0
 8006324:	d101      	bne.n	800632a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e067      	b.n	80063fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800632a:	4b37      	ldr	r3, [pc, #220]	; (8006408 <HAL_RCC_ClockConfig+0x1bc>)
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f023 0203 	bic.w	r2, r3, #3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	4934      	ldr	r1, [pc, #208]	; (8006408 <HAL_RCC_ClockConfig+0x1bc>)
 8006338:	4313      	orrs	r3, r2
 800633a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800633c:	f7fc fb12 	bl	8002964 <HAL_GetTick>
 8006340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006342:	e00a      	b.n	800635a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006344:	f7fc fb0e 	bl	8002964 <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006352:	4293      	cmp	r3, r2
 8006354:	d901      	bls.n	800635a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	e04f      	b.n	80063fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800635a:	4b2b      	ldr	r3, [pc, #172]	; (8006408 <HAL_RCC_ClockConfig+0x1bc>)
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f003 020c 	and.w	r2, r3, #12
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	429a      	cmp	r2, r3
 800636a:	d1eb      	bne.n	8006344 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800636c:	4b25      	ldr	r3, [pc, #148]	; (8006404 <HAL_RCC_ClockConfig+0x1b8>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 030f 	and.w	r3, r3, #15
 8006374:	683a      	ldr	r2, [r7, #0]
 8006376:	429a      	cmp	r2, r3
 8006378:	d20c      	bcs.n	8006394 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800637a:	4b22      	ldr	r3, [pc, #136]	; (8006404 <HAL_RCC_ClockConfig+0x1b8>)
 800637c:	683a      	ldr	r2, [r7, #0]
 800637e:	b2d2      	uxtb	r2, r2
 8006380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006382:	4b20      	ldr	r3, [pc, #128]	; (8006404 <HAL_RCC_ClockConfig+0x1b8>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 030f 	and.w	r3, r3, #15
 800638a:	683a      	ldr	r2, [r7, #0]
 800638c:	429a      	cmp	r2, r3
 800638e:	d001      	beq.n	8006394 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e032      	b.n	80063fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0304 	and.w	r3, r3, #4
 800639c:	2b00      	cmp	r3, #0
 800639e:	d008      	beq.n	80063b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063a0:	4b19      	ldr	r3, [pc, #100]	; (8006408 <HAL_RCC_ClockConfig+0x1bc>)
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	4916      	ldr	r1, [pc, #88]	; (8006408 <HAL_RCC_ClockConfig+0x1bc>)
 80063ae:	4313      	orrs	r3, r2
 80063b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0308 	and.w	r3, r3, #8
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d009      	beq.n	80063d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063be:	4b12      	ldr	r3, [pc, #72]	; (8006408 <HAL_RCC_ClockConfig+0x1bc>)
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	00db      	lsls	r3, r3, #3
 80063cc:	490e      	ldr	r1, [pc, #56]	; (8006408 <HAL_RCC_ClockConfig+0x1bc>)
 80063ce:	4313      	orrs	r3, r2
 80063d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80063d2:	f000 f821 	bl	8006418 <HAL_RCC_GetSysClockFreq>
 80063d6:	4602      	mov	r2, r0
 80063d8:	4b0b      	ldr	r3, [pc, #44]	; (8006408 <HAL_RCC_ClockConfig+0x1bc>)
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	091b      	lsrs	r3, r3, #4
 80063de:	f003 030f 	and.w	r3, r3, #15
 80063e2:	490a      	ldr	r1, [pc, #40]	; (800640c <HAL_RCC_ClockConfig+0x1c0>)
 80063e4:	5ccb      	ldrb	r3, [r1, r3]
 80063e6:	fa22 f303 	lsr.w	r3, r2, r3
 80063ea:	4a09      	ldr	r2, [pc, #36]	; (8006410 <HAL_RCC_ClockConfig+0x1c4>)
 80063ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80063ee:	4b09      	ldr	r3, [pc, #36]	; (8006414 <HAL_RCC_ClockConfig+0x1c8>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7fc fa72 	bl	80028dc <HAL_InitTick>

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	40023c00 	.word	0x40023c00
 8006408:	40023800 	.word	0x40023800
 800640c:	08044910 	.word	0x08044910
 8006410:	20000000 	.word	0x20000000
 8006414:	20000004 	.word	0x20000004

08006418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006418:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800641c:	b090      	sub	sp, #64	; 0x40
 800641e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006420:	2300      	movs	r3, #0
 8006422:	637b      	str	r3, [r7, #52]	; 0x34
 8006424:	2300      	movs	r3, #0
 8006426:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006428:	2300      	movs	r3, #0
 800642a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800642c:	2300      	movs	r3, #0
 800642e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006430:	4b59      	ldr	r3, [pc, #356]	; (8006598 <HAL_RCC_GetSysClockFreq+0x180>)
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f003 030c 	and.w	r3, r3, #12
 8006438:	2b08      	cmp	r3, #8
 800643a:	d00d      	beq.n	8006458 <HAL_RCC_GetSysClockFreq+0x40>
 800643c:	2b08      	cmp	r3, #8
 800643e:	f200 80a1 	bhi.w	8006584 <HAL_RCC_GetSysClockFreq+0x16c>
 8006442:	2b00      	cmp	r3, #0
 8006444:	d002      	beq.n	800644c <HAL_RCC_GetSysClockFreq+0x34>
 8006446:	2b04      	cmp	r3, #4
 8006448:	d003      	beq.n	8006452 <HAL_RCC_GetSysClockFreq+0x3a>
 800644a:	e09b      	b.n	8006584 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800644c:	4b53      	ldr	r3, [pc, #332]	; (800659c <HAL_RCC_GetSysClockFreq+0x184>)
 800644e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006450:	e09b      	b.n	800658a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006452:	4b53      	ldr	r3, [pc, #332]	; (80065a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006454:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006456:	e098      	b.n	800658a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006458:	4b4f      	ldr	r3, [pc, #316]	; (8006598 <HAL_RCC_GetSysClockFreq+0x180>)
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006460:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006462:	4b4d      	ldr	r3, [pc, #308]	; (8006598 <HAL_RCC_GetSysClockFreq+0x180>)
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d028      	beq.n	80064c0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800646e:	4b4a      	ldr	r3, [pc, #296]	; (8006598 <HAL_RCC_GetSysClockFreq+0x180>)
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	099b      	lsrs	r3, r3, #6
 8006474:	2200      	movs	r2, #0
 8006476:	623b      	str	r3, [r7, #32]
 8006478:	627a      	str	r2, [r7, #36]	; 0x24
 800647a:	6a3b      	ldr	r3, [r7, #32]
 800647c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006480:	2100      	movs	r1, #0
 8006482:	4b47      	ldr	r3, [pc, #284]	; (80065a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006484:	fb03 f201 	mul.w	r2, r3, r1
 8006488:	2300      	movs	r3, #0
 800648a:	fb00 f303 	mul.w	r3, r0, r3
 800648e:	4413      	add	r3, r2
 8006490:	4a43      	ldr	r2, [pc, #268]	; (80065a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006492:	fba0 1202 	umull	r1, r2, r0, r2
 8006496:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006498:	460a      	mov	r2, r1
 800649a:	62ba      	str	r2, [r7, #40]	; 0x28
 800649c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800649e:	4413      	add	r3, r2
 80064a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a4:	2200      	movs	r2, #0
 80064a6:	61bb      	str	r3, [r7, #24]
 80064a8:	61fa      	str	r2, [r7, #28]
 80064aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80064b2:	f7fa fb89 	bl	8000bc8 <__aeabi_uldivmod>
 80064b6:	4602      	mov	r2, r0
 80064b8:	460b      	mov	r3, r1
 80064ba:	4613      	mov	r3, r2
 80064bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064be:	e053      	b.n	8006568 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064c0:	4b35      	ldr	r3, [pc, #212]	; (8006598 <HAL_RCC_GetSysClockFreq+0x180>)
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	099b      	lsrs	r3, r3, #6
 80064c6:	2200      	movs	r2, #0
 80064c8:	613b      	str	r3, [r7, #16]
 80064ca:	617a      	str	r2, [r7, #20]
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80064d2:	f04f 0b00 	mov.w	fp, #0
 80064d6:	4652      	mov	r2, sl
 80064d8:	465b      	mov	r3, fp
 80064da:	f04f 0000 	mov.w	r0, #0
 80064de:	f04f 0100 	mov.w	r1, #0
 80064e2:	0159      	lsls	r1, r3, #5
 80064e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064e8:	0150      	lsls	r0, r2, #5
 80064ea:	4602      	mov	r2, r0
 80064ec:	460b      	mov	r3, r1
 80064ee:	ebb2 080a 	subs.w	r8, r2, sl
 80064f2:	eb63 090b 	sbc.w	r9, r3, fp
 80064f6:	f04f 0200 	mov.w	r2, #0
 80064fa:	f04f 0300 	mov.w	r3, #0
 80064fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006502:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006506:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800650a:	ebb2 0408 	subs.w	r4, r2, r8
 800650e:	eb63 0509 	sbc.w	r5, r3, r9
 8006512:	f04f 0200 	mov.w	r2, #0
 8006516:	f04f 0300 	mov.w	r3, #0
 800651a:	00eb      	lsls	r3, r5, #3
 800651c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006520:	00e2      	lsls	r2, r4, #3
 8006522:	4614      	mov	r4, r2
 8006524:	461d      	mov	r5, r3
 8006526:	eb14 030a 	adds.w	r3, r4, sl
 800652a:	603b      	str	r3, [r7, #0]
 800652c:	eb45 030b 	adc.w	r3, r5, fp
 8006530:	607b      	str	r3, [r7, #4]
 8006532:	f04f 0200 	mov.w	r2, #0
 8006536:	f04f 0300 	mov.w	r3, #0
 800653a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800653e:	4629      	mov	r1, r5
 8006540:	028b      	lsls	r3, r1, #10
 8006542:	4621      	mov	r1, r4
 8006544:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006548:	4621      	mov	r1, r4
 800654a:	028a      	lsls	r2, r1, #10
 800654c:	4610      	mov	r0, r2
 800654e:	4619      	mov	r1, r3
 8006550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006552:	2200      	movs	r2, #0
 8006554:	60bb      	str	r3, [r7, #8]
 8006556:	60fa      	str	r2, [r7, #12]
 8006558:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800655c:	f7fa fb34 	bl	8000bc8 <__aeabi_uldivmod>
 8006560:	4602      	mov	r2, r0
 8006562:	460b      	mov	r3, r1
 8006564:	4613      	mov	r3, r2
 8006566:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006568:	4b0b      	ldr	r3, [pc, #44]	; (8006598 <HAL_RCC_GetSysClockFreq+0x180>)
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	0c1b      	lsrs	r3, r3, #16
 800656e:	f003 0303 	and.w	r3, r3, #3
 8006572:	3301      	adds	r3, #1
 8006574:	005b      	lsls	r3, r3, #1
 8006576:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006578:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800657a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006580:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006582:	e002      	b.n	800658a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006584:	4b05      	ldr	r3, [pc, #20]	; (800659c <HAL_RCC_GetSysClockFreq+0x184>)
 8006586:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006588:	bf00      	nop
    }
  }
  return sysclockfreq;
 800658a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800658c:	4618      	mov	r0, r3
 800658e:	3740      	adds	r7, #64	; 0x40
 8006590:	46bd      	mov	sp, r7
 8006592:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006596:	bf00      	nop
 8006598:	40023800 	.word	0x40023800
 800659c:	00f42400 	.word	0x00f42400
 80065a0:	017d7840 	.word	0x017d7840

080065a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065a4:	b480      	push	{r7}
 80065a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065a8:	4b03      	ldr	r3, [pc, #12]	; (80065b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80065aa:	681b      	ldr	r3, [r3, #0]
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	20000000 	.word	0x20000000

080065bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80065c0:	f7ff fff0 	bl	80065a4 <HAL_RCC_GetHCLKFreq>
 80065c4:	4602      	mov	r2, r0
 80065c6:	4b05      	ldr	r3, [pc, #20]	; (80065dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	0a9b      	lsrs	r3, r3, #10
 80065cc:	f003 0307 	and.w	r3, r3, #7
 80065d0:	4903      	ldr	r1, [pc, #12]	; (80065e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065d2:	5ccb      	ldrb	r3, [r1, r3]
 80065d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065d8:	4618      	mov	r0, r3
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	40023800 	.word	0x40023800
 80065e0:	08044920 	.word	0x08044920

080065e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80065e8:	f7ff ffdc 	bl	80065a4 <HAL_RCC_GetHCLKFreq>
 80065ec:	4602      	mov	r2, r0
 80065ee:	4b05      	ldr	r3, [pc, #20]	; (8006604 <HAL_RCC_GetPCLK2Freq+0x20>)
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	0b5b      	lsrs	r3, r3, #13
 80065f4:	f003 0307 	and.w	r3, r3, #7
 80065f8:	4903      	ldr	r1, [pc, #12]	; (8006608 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065fa:	5ccb      	ldrb	r3, [r1, r3]
 80065fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006600:	4618      	mov	r0, r3
 8006602:	bd80      	pop	{r7, pc}
 8006604:	40023800 	.word	0x40023800
 8006608:	08044920 	.word	0x08044920

0800660c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006614:	2300      	movs	r3, #0
 8006616:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006618:	2300      	movs	r3, #0
 800661a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0301 	and.w	r3, r3, #1
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10b      	bne.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006630:	2b00      	cmp	r3, #0
 8006632:	d105      	bne.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800663c:	2b00      	cmp	r3, #0
 800663e:	d075      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006640:	4b91      	ldr	r3, [pc, #580]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006642:	2200      	movs	r2, #0
 8006644:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006646:	f7fc f98d 	bl	8002964 <HAL_GetTick>
 800664a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800664c:	e008      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800664e:	f7fc f989 	bl	8002964 <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	2b02      	cmp	r3, #2
 800665a:	d901      	bls.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e189      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006660:	4b8a      	ldr	r3, [pc, #552]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1f0      	bne.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	2b00      	cmp	r3, #0
 8006676:	d009      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	019a      	lsls	r2, r3, #6
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	071b      	lsls	r3, r3, #28
 8006684:	4981      	ldr	r1, [pc, #516]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006686:	4313      	orrs	r3, r2
 8006688:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0302 	and.w	r3, r3, #2
 8006694:	2b00      	cmp	r3, #0
 8006696:	d01f      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006698:	4b7c      	ldr	r3, [pc, #496]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800669a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800669e:	0f1b      	lsrs	r3, r3, #28
 80066a0:	f003 0307 	and.w	r3, r3, #7
 80066a4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	019a      	lsls	r2, r3, #6
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	061b      	lsls	r3, r3, #24
 80066b2:	431a      	orrs	r2, r3
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	071b      	lsls	r3, r3, #28
 80066b8:	4974      	ldr	r1, [pc, #464]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066ba:	4313      	orrs	r3, r2
 80066bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80066c0:	4b72      	ldr	r3, [pc, #456]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066c6:	f023 021f 	bic.w	r2, r3, #31
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	3b01      	subs	r3, #1
 80066d0:	496e      	ldr	r1, [pc, #440]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066d2:	4313      	orrs	r3, r2
 80066d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00d      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	019a      	lsls	r2, r3, #6
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	061b      	lsls	r3, r3, #24
 80066f0:	431a      	orrs	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	071b      	lsls	r3, r3, #28
 80066f8:	4964      	ldr	r1, [pc, #400]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006700:	4b61      	ldr	r3, [pc, #388]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006702:	2201      	movs	r2, #1
 8006704:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006706:	f7fc f92d 	bl	8002964 <HAL_GetTick>
 800670a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800670c:	e008      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800670e:	f7fc f929 	bl	8002964 <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	2b02      	cmp	r3, #2
 800671a:	d901      	bls.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800671c:	2303      	movs	r3, #3
 800671e:	e129      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006720:	4b5a      	ldr	r3, [pc, #360]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d0f0      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0304 	and.w	r3, r3, #4
 8006734:	2b00      	cmp	r3, #0
 8006736:	d105      	bne.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006740:	2b00      	cmp	r3, #0
 8006742:	d079      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006744:	4b52      	ldr	r3, [pc, #328]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006746:	2200      	movs	r2, #0
 8006748:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800674a:	f7fc f90b 	bl	8002964 <HAL_GetTick>
 800674e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006750:	e008      	b.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006752:	f7fc f907 	bl	8002964 <HAL_GetTick>
 8006756:	4602      	mov	r2, r0
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	2b02      	cmp	r3, #2
 800675e:	d901      	bls.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e107      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006764:	4b49      	ldr	r3, [pc, #292]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800676c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006770:	d0ef      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0304 	and.w	r3, r3, #4
 800677a:	2b00      	cmp	r3, #0
 800677c:	d020      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800677e:	4b43      	ldr	r3, [pc, #268]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006784:	0f1b      	lsrs	r3, r3, #28
 8006786:	f003 0307 	and.w	r3, r3, #7
 800678a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	019a      	lsls	r2, r3, #6
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	061b      	lsls	r3, r3, #24
 8006798:	431a      	orrs	r2, r3
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	071b      	lsls	r3, r3, #28
 800679e:	493b      	ldr	r1, [pc, #236]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80067a6:	4b39      	ldr	r3, [pc, #228]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067ac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	3b01      	subs	r3, #1
 80067b6:	021b      	lsls	r3, r3, #8
 80067b8:	4934      	ldr	r1, [pc, #208]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067ba:	4313      	orrs	r3, r2
 80067bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0308 	and.w	r3, r3, #8
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d01e      	beq.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80067cc:	4b2f      	ldr	r3, [pc, #188]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067d2:	0e1b      	lsrs	r3, r3, #24
 80067d4:	f003 030f 	and.w	r3, r3, #15
 80067d8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	019a      	lsls	r2, r3, #6
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	061b      	lsls	r3, r3, #24
 80067e4:	431a      	orrs	r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	071b      	lsls	r3, r3, #28
 80067ec:	4927      	ldr	r1, [pc, #156]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80067f4:	4b25      	ldr	r3, [pc, #148]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006802:	4922      	ldr	r1, [pc, #136]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006804:	4313      	orrs	r3, r2
 8006806:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800680a:	4b21      	ldr	r3, [pc, #132]	; (8006890 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800680c:	2201      	movs	r2, #1
 800680e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006810:	f7fc f8a8 	bl	8002964 <HAL_GetTick>
 8006814:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006816:	e008      	b.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006818:	f7fc f8a4 	bl	8002964 <HAL_GetTick>
 800681c:	4602      	mov	r2, r0
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	2b02      	cmp	r3, #2
 8006824:	d901      	bls.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e0a4      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800682a:	4b18      	ldr	r3, [pc, #96]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006832:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006836:	d1ef      	bne.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0320 	and.w	r3, r3, #32
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 808b 	beq.w	800695c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006846:	2300      	movs	r3, #0
 8006848:	60fb      	str	r3, [r7, #12]
 800684a:	4b10      	ldr	r3, [pc, #64]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800684c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684e:	4a0f      	ldr	r2, [pc, #60]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006854:	6413      	str	r3, [r2, #64]	; 0x40
 8006856:	4b0d      	ldr	r3, [pc, #52]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800685e:	60fb      	str	r3, [r7, #12]
 8006860:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006862:	4b0c      	ldr	r3, [pc, #48]	; (8006894 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a0b      	ldr	r2, [pc, #44]	; (8006894 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800686c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800686e:	f7fc f879 	bl	8002964 <HAL_GetTick>
 8006872:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006874:	e010      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006876:	f7fc f875 	bl	8002964 <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	2b02      	cmp	r3, #2
 8006882:	d909      	bls.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e075      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006888:	42470068 	.word	0x42470068
 800688c:	40023800 	.word	0x40023800
 8006890:	42470070 	.word	0x42470070
 8006894:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006898:	4b38      	ldr	r3, [pc, #224]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d0e8      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80068a4:	4b36      	ldr	r3, [pc, #216]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068ac:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d02f      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d028      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068c2:	4b2f      	ldr	r3, [pc, #188]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068ca:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80068cc:	4b2d      	ldr	r3, [pc, #180]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80068ce:	2201      	movs	r2, #1
 80068d0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80068d2:	4b2c      	ldr	r3, [pc, #176]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80068d8:	4a29      	ldr	r2, [pc, #164]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80068de:	4b28      	ldr	r3, [pc, #160]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e2:	f003 0301 	and.w	r3, r3, #1
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d114      	bne.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80068ea:	f7fc f83b 	bl	8002964 <HAL_GetTick>
 80068ee:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068f0:	e00a      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068f2:	f7fc f837 	bl	8002964 <HAL_GetTick>
 80068f6:	4602      	mov	r2, r0
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006900:	4293      	cmp	r3, r2
 8006902:	d901      	bls.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	e035      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006908:	4b1d      	ldr	r3, [pc, #116]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800690a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800690c:	f003 0302 	and.w	r3, r3, #2
 8006910:	2b00      	cmp	r3, #0
 8006912:	d0ee      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006918:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800691c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006920:	d10d      	bne.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006922:	4b17      	ldr	r3, [pc, #92]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006936:	4912      	ldr	r1, [pc, #72]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006938:	4313      	orrs	r3, r2
 800693a:	608b      	str	r3, [r1, #8]
 800693c:	e005      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800693e:	4b10      	ldr	r3, [pc, #64]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	4a0f      	ldr	r2, [pc, #60]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006944:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006948:	6093      	str	r3, [r2, #8]
 800694a:	4b0d      	ldr	r3, [pc, #52]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800694c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006952:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006956:	490a      	ldr	r1, [pc, #40]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006958:	4313      	orrs	r3, r2
 800695a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0310 	and.w	r3, r3, #16
 8006964:	2b00      	cmp	r3, #0
 8006966:	d004      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800696e:	4b06      	ldr	r3, [pc, #24]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006970:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3718      	adds	r7, #24
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	40007000 	.word	0x40007000
 8006980:	40023800 	.word	0x40023800
 8006984:	42470e40 	.word	0x42470e40
 8006988:	424711e0 	.word	0x424711e0

0800698c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d101      	bne.n	800699e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e01c      	b.n	80069d8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	795b      	ldrb	r3, [r3, #5]
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d105      	bne.n	80069b4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7fb fc3e 	bl	8002230 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2202      	movs	r2, #2
 80069b8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f042 0204 	orr.w	r2, r2, #4
 80069c8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2201      	movs	r2, #1
 80069ce:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3708      	adds	r7, #8
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d101      	bne.n	80069f2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e022      	b.n	8006a38 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d105      	bne.n	8006a0a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f7fb fc55 	bl	80022b4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2203      	movs	r2, #3
 8006a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f814 	bl	8006a40 <HAL_SD_InitCard>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d001      	beq.n	8006a22 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e00a      	b.n	8006a38 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2201      	movs	r2, #1
 8006a32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3708      	adds	r7, #8
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006a40:	b5b0      	push	{r4, r5, r7, lr}
 8006a42:	b08e      	sub	sp, #56	; 0x38
 8006a44:	af04      	add	r7, sp, #16
 8006a46:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006a50:	2300      	movs	r3, #0
 8006a52:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006a54:	2300      	movs	r3, #0
 8006a56:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006a5c:	2376      	movs	r3, #118	; 0x76
 8006a5e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681d      	ldr	r5, [r3, #0]
 8006a64:	466c      	mov	r4, sp
 8006a66:	f107 0314 	add.w	r3, r7, #20
 8006a6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006a6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006a72:	f107 0308 	add.w	r3, r7, #8
 8006a76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a78:	4628      	mov	r0, r5
 8006a7a:	f002 f8bc 	bl	8008bf6 <SDIO_Init>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006a84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d001      	beq.n	8006a90 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e04c      	b.n	8006b2a <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006a90:	4b28      	ldr	r3, [pc, #160]	; (8006b34 <HAL_SD_InitCard+0xf4>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f002 f8f4 	bl	8008c88 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006aa0:	4b24      	ldr	r3, [pc, #144]	; (8006b34 <HAL_SD_InitCard+0xf4>)
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f001 f85e 	bl	8007b68 <SD_PowerON>
 8006aac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006aae:	6a3b      	ldr	r3, [r7, #32]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00b      	beq.n	8006acc <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ac0:	6a3b      	ldr	r3, [r7, #32]
 8006ac2:	431a      	orrs	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e02e      	b.n	8006b2a <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 ff7d 	bl	80079cc <SD_InitCard>
 8006ad2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ad4:	6a3b      	ldr	r3, [r7, #32]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d00b      	beq.n	8006af2 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2201      	movs	r2, #1
 8006ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ae6:	6a3b      	ldr	r3, [r7, #32]
 8006ae8:	431a      	orrs	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e01b      	b.n	8006b2a <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006afa:	4618      	mov	r0, r3
 8006afc:	f002 f957 	bl	8008dae <SDMMC_CmdBlockLength>
 8006b00:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b02:	6a3b      	ldr	r3, [r7, #32]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00f      	beq.n	8006b28 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a0a      	ldr	r2, [pc, #40]	; (8006b38 <HAL_SD_InitCard+0xf8>)
 8006b0e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b14:	6a3b      	ldr	r3, [r7, #32]
 8006b16:	431a      	orrs	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e000      	b.n	8006b2a <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3728      	adds	r7, #40	; 0x28
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bdb0      	pop	{r4, r5, r7, pc}
 8006b32:	bf00      	nop
 8006b34:	422580a0 	.word	0x422580a0
 8006b38:	004005ff 	.word	0x004005ff

08006b3c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b08c      	sub	sp, #48	; 0x30
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
 8006b48:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d107      	bne.n	8006b64 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b58:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e0c0      	b.n	8006ce6 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	f040 80b9 	bne.w	8006ce4 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006b78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	441a      	add	r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d907      	bls.n	8006b96 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e0a7      	b.n	8006ce6 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2203      	movs	r2, #3
 8006b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	6812      	ldr	r2, [r2, #0]
 8006bb0:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8006bb4:	f043 0302 	orr.w	r3, r3, #2
 8006bb8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bbe:	4a4c      	ldr	r2, [pc, #304]	; (8006cf0 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8006bc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc6:	4a4b      	ldr	r2, [pc, #300]	; (8006cf4 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8006bc8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bce:	2200      	movs	r2, #0
 8006bd0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bea:	689a      	ldr	r2, [r3, #8]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	3380      	adds	r3, #128	; 0x80
 8006c00:	4619      	mov	r1, r3
 8006c02:	68ba      	ldr	r2, [r7, #8]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	025b      	lsls	r3, r3, #9
 8006c08:	089b      	lsrs	r3, r3, #2
 8006c0a:	f7fc fcc7 	bl	800359c <HAL_DMA_Start_IT>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d017      	beq.n	8006c44 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8006c22:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a33      	ldr	r2, [pc, #204]	; (8006cf8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006c2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c30:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e050      	b.n	8006ce6 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8006c44:	4b2d      	ldr	r3, [pc, #180]	; (8006cfc <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8006c46:	2201      	movs	r2, #1
 8006c48:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d002      	beq.n	8006c58 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8006c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c54:	025b      	lsls	r3, r3, #9
 8006c56:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006c58:	f04f 33ff 	mov.w	r3, #4294967295
 8006c5c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	025b      	lsls	r3, r3, #9
 8006c62:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006c64:	2390      	movs	r3, #144	; 0x90
 8006c66:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006c68:	2302      	movs	r3, #2
 8006c6a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006c70:	2301      	movs	r3, #1
 8006c72:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f107 0210 	add.w	r2, r7, #16
 8006c7c:	4611      	mov	r1, r2
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f002 f869 	bl	8008d56 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d90a      	bls.n	8006ca0 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2282      	movs	r2, #130	; 0x82
 8006c8e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c96:	4618      	mov	r0, r3
 8006c98:	f002 f8cd 	bl	8008e36 <SDMMC_CmdReadMultiBlock>
 8006c9c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006c9e:	e009      	b.n	8006cb4 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2281      	movs	r2, #129	; 0x81
 8006ca4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cac:	4618      	mov	r0, r3
 8006cae:	f002 f8a0 	bl	8008df2 <SDMMC_CmdReadSingleBlock>
 8006cb2:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d012      	beq.n	8006ce0 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a0e      	ldr	r2, [pc, #56]	; (8006cf8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006cc0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc8:	431a      	orrs	r2, r3
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e002      	b.n	8006ce6 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	e000      	b.n	8006ce6 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8006ce4:	2302      	movs	r3, #2
  }
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3730      	adds	r7, #48	; 0x30
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	080077db 	.word	0x080077db
 8006cf4:	0800784d 	.word	0x0800784d
 8006cf8:	004005ff 	.word	0x004005ff
 8006cfc:	4225858c 	.word	0x4225858c

08006d00 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b08c      	sub	sp, #48	; 0x30
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
 8006d0c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d107      	bne.n	8006d28 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d1c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e0c5      	b.n	8006eb4 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	f040 80be 	bne.w	8006eb2 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006d3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	441a      	add	r2, r3
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d907      	bls.n	8006d5a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d4e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e0ac      	b.n	8006eb4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2203      	movs	r2, #3
 8006d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2200      	movs	r2, #0
 8006d68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	6812      	ldr	r2, [r2, #0]
 8006d74:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8006d78:	f043 0302 	orr.w	r3, r3, #2
 8006d7c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d82:	4a4e      	ldr	r2, [pc, #312]	; (8006ebc <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8006d84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d8a:	4a4d      	ldr	r2, [pc, #308]	; (8006ec0 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8006d8c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d92:	2200      	movs	r2, #0
 8006d94:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d002      	beq.n	8006da4 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8006d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da0:	025b      	lsls	r3, r3, #9
 8006da2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d90a      	bls.n	8006dc0 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	22a0      	movs	r2, #160	; 0xa0
 8006dae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006db6:	4618      	mov	r0, r3
 8006db8:	f002 f881 	bl	8008ebe <SDMMC_CmdWriteMultiBlock>
 8006dbc:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006dbe:	e009      	b.n	8006dd4 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2290      	movs	r2, #144	; 0x90
 8006dc4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f002 f854 	bl	8008e7a <SDMMC_CmdWriteSingleBlock>
 8006dd2:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d012      	beq.n	8006e00 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a39      	ldr	r2, [pc, #228]	; (8006ec4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8006de0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de8:	431a      	orrs	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2201      	movs	r2, #1
 8006df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e059      	b.n	8006eb4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006e00:	4b31      	ldr	r3, [pc, #196]	; (8006ec8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006e02:	2201      	movs	r2, #1
 8006e04:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e0a:	2240      	movs	r2, #64	; 0x40
 8006e0c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e1e:	689a      	ldr	r2, [r3, #8]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	430a      	orrs	r2, r1
 8006e28:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006e2e:	68b9      	ldr	r1, [r7, #8]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	3380      	adds	r3, #128	; 0x80
 8006e36:	461a      	mov	r2, r3
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	025b      	lsls	r3, r3, #9
 8006e3c:	089b      	lsrs	r3, r3, #2
 8006e3e:	f7fc fbad 	bl	800359c <HAL_DMA_Start_IT>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d01c      	beq.n	8006e82 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	6812      	ldr	r2, [r2, #0]
 8006e52:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8006e56:	f023 0302 	bic.w	r3, r3, #2
 8006e5a:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a18      	ldr	r2, [pc, #96]	; (8006ec4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8006e62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e68:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e018      	b.n	8006eb4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006e82:	f04f 33ff 	mov.w	r3, #4294967295
 8006e86:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	025b      	lsls	r3, r3, #9
 8006e8c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006e8e:	2390      	movs	r3, #144	; 0x90
 8006e90:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006e92:	2300      	movs	r3, #0
 8006e94:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006e96:	2300      	movs	r3, #0
 8006e98:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f107 0210 	add.w	r2, r7, #16
 8006ea6:	4611      	mov	r1, r2
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f001 ff54 	bl	8008d56 <SDIO_ConfigData>

      return HAL_OK;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	e000      	b.n	8006eb4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8006eb2:	2302      	movs	r3, #2
  }
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3730      	adds	r7, #48	; 0x30
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	080077b1 	.word	0x080077b1
 8006ec0:	0800784d 	.word	0x0800784d
 8006ec4:	004005ff 	.word	0x004005ff
 8006ec8:	4225858c 	.word	0x4225858c

08006ecc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed8:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ee0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d008      	beq.n	8006efa <HAL_SD_IRQHandler+0x2e>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f003 0308 	and.w	r3, r3, #8
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d003      	beq.n	8006efa <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f001 f857 	bl	8007fa6 <SD_Read_IT>
 8006ef8:	e165      	b.n	80071c6 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f000 808f 	beq.w	8007028 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f12:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	6812      	ldr	r2, [r2, #0]
 8006f1e:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8006f22:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8006f26:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f022 0201 	bic.w	r2, r2, #1
 8006f36:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f003 0308 	and.w	r3, r3, #8
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d039      	beq.n	8006fb6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f003 0302 	and.w	r3, r3, #2
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d104      	bne.n	8006f56 <HAL_SD_IRQHandler+0x8a>
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f003 0320 	and.w	r3, r3, #32
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d011      	beq.n	8006f7a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f001 ffd2 	bl	8008f04 <SDMMC_CmdStopTransfer>
 8006f60:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d008      	beq.n	8006f7a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	431a      	orrs	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 f92f 	bl	80071d8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f240 523a 	movw	r2, #1338	; 0x53a
 8006f82:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f003 0301 	and.w	r3, r3, #1
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d104      	bne.n	8006fa6 <HAL_SD_IRQHandler+0xda>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f003 0302 	and.w	r3, r3, #2
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d003      	beq.n	8006fae <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f002 fc40 	bl	800982c <HAL_SD_RxCpltCallback>
 8006fac:	e10b      	b.n	80071c6 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f002 fc32 	bl	8009818 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006fb4:	e107      	b.n	80071c6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f000 8102 	beq.w	80071c6 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f003 0320 	and.w	r3, r3, #32
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d011      	beq.n	8006ff0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f001 ff97 	bl	8008f04 <SDMMC_CmdStopTransfer>
 8006fd6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d008      	beq.n	8006ff0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	431a      	orrs	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 f8f4 	bl	80071d8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f003 0301 	and.w	r3, r3, #1
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	f040 80e5 	bne.w	80071c6 <HAL_SD_IRQHandler+0x2fa>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f003 0302 	and.w	r3, r3, #2
 8007002:	2b00      	cmp	r3, #0
 8007004:	f040 80df 	bne.w	80071c6 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f022 0208 	bic.w	r2, r2, #8
 8007016:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f002 fbf9 	bl	8009818 <HAL_SD_TxCpltCallback>
}
 8007026:	e0ce      	b.n	80071c6 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800702e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d008      	beq.n	8007048 <HAL_SD_IRQHandler+0x17c>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f003 0308 	and.w	r3, r3, #8
 800703c:	2b00      	cmp	r3, #0
 800703e:	d003      	beq.n	8007048 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f001 f801 	bl	8008048 <SD_Write_IT>
 8007046:	e0be      	b.n	80071c6 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800704e:	f240 233a 	movw	r3, #570	; 0x23a
 8007052:	4013      	ands	r3, r2
 8007054:	2b00      	cmp	r3, #0
 8007056:	f000 80b6 	beq.w	80071c6 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007060:	f003 0302 	and.w	r3, r3, #2
 8007064:	2b00      	cmp	r3, #0
 8007066:	d005      	beq.n	8007074 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706c:	f043 0202 	orr.w	r2, r3, #2
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800707a:	f003 0308 	and.w	r3, r3, #8
 800707e:	2b00      	cmp	r3, #0
 8007080:	d005      	beq.n	800708e <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007086:	f043 0208 	orr.w	r2, r3, #8
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007094:	f003 0320 	and.w	r3, r3, #32
 8007098:	2b00      	cmp	r3, #0
 800709a:	d005      	beq.n	80070a8 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a0:	f043 0220 	orr.w	r2, r3, #32
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ae:	f003 0310 	and.w	r3, r3, #16
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d005      	beq.n	80070c2 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ba:	f043 0210 	orr.w	r2, r3, #16
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d005      	beq.n	80070dc <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d4:	f043 0208 	orr.w	r2, r3, #8
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f240 723a 	movw	r2, #1850	; 0x73a
 80070e4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	6812      	ldr	r2, [r2, #0]
 80070f0:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80070f4:	f023 0302 	bic.w	r3, r3, #2
 80070f8:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4618      	mov	r0, r3
 8007100:	f001 ff00 	bl	8008f04 <SDMMC_CmdStopTransfer>
 8007104:	4602      	mov	r2, r0
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800710a:	431a      	orrs	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f003 0308 	and.w	r3, r3, #8
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00a      	beq.n	8007130 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2201      	movs	r2, #1
 800711e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 f855 	bl	80071d8 <HAL_SD_ErrorCallback>
}
 800712e:	e04a      	b.n	80071c6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007136:	2b00      	cmp	r3, #0
 8007138:	d045      	beq.n	80071c6 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f003 0310 	and.w	r3, r3, #16
 8007140:	2b00      	cmp	r3, #0
 8007142:	d104      	bne.n	800714e <HAL_SD_IRQHandler+0x282>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f003 0320 	and.w	r3, r3, #32
 800714a:	2b00      	cmp	r3, #0
 800714c:	d011      	beq.n	8007172 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007152:	4a1f      	ldr	r2, [pc, #124]	; (80071d0 <HAL_SD_IRQHandler+0x304>)
 8007154:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800715a:	4618      	mov	r0, r3
 800715c:	f7fc fa76 	bl	800364c <HAL_DMA_Abort_IT>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d02f      	beq.n	80071c6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800716a:	4618      	mov	r0, r3
 800716c:	f000 fbc0 	bl	80078f0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007170:	e029      	b.n	80071c6 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f003 0301 	and.w	r3, r3, #1
 8007178:	2b00      	cmp	r3, #0
 800717a:	d104      	bne.n	8007186 <HAL_SD_IRQHandler+0x2ba>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f003 0302 	and.w	r3, r3, #2
 8007182:	2b00      	cmp	r3, #0
 8007184:	d011      	beq.n	80071aa <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718a:	4a12      	ldr	r2, [pc, #72]	; (80071d4 <HAL_SD_IRQHandler+0x308>)
 800718c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007192:	4618      	mov	r0, r3
 8007194:	f7fc fa5a 	bl	800364c <HAL_DMA_Abort_IT>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d013      	beq.n	80071c6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a2:	4618      	mov	r0, r3
 80071a4:	f000 fbdb 	bl	800795e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80071a8:	e00d      	b.n	80071c6 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f002 fb20 	bl	8009804 <HAL_SD_AbortCallback>
}
 80071c4:	e7ff      	b.n	80071c6 <HAL_SD_IRQHandler+0x2fa>
 80071c6:	bf00      	nop
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	080078f1 	.word	0x080078f1
 80071d4:	0800795f 	.word	0x0800795f

080071d8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80071e0:	bf00      	nop
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <HAL_SD_GetCardCID>:
  * @param  pCID: Pointer to a HAL_SD_CardCIDTypeDef structure that  
  *         contains all CID register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCID(SD_HandleTypeDef *hsd, HAL_SD_CardCIDTypeDef *pCID)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  pCID->ManufacturerID = (uint8_t)((hsd->CID[0] & 0xFF000000U) >> 24U);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071fa:	0e1b      	lsrs	r3, r3, #24
 80071fc:	b2da      	uxtb	r2, r3
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	701a      	strb	r2, [r3, #0]

  pCID->OEM_AppliID = (uint16_t)((hsd->CID[0] & 0x00FFFF00U) >> 8U);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007206:	0a1b      	lsrs	r3, r3, #8
 8007208:	b29a      	uxth	r2, r3
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	805a      	strh	r2, [r3, #2]

  pCID->ProdName1 = (((hsd->CID[0] & 0x000000FFU) << 24U) | ((hsd->CID[1] & 0xFFFFFF00U) >> 8U));
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007212:	061a      	lsls	r2, r3, #24
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007218:	0a1b      	lsrs	r3, r3, #8
 800721a:	431a      	orrs	r2, r3
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	605a      	str	r2, [r3, #4]

  pCID->ProdName2 = (uint8_t)(hsd->CID[1] & 0x000000FFU);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007224:	b2da      	uxtb	r2, r3
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	721a      	strb	r2, [r3, #8]

  pCID->ProdRev = (uint8_t)((hsd->CID[2] & 0xFF000000U) >> 24U);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800722e:	0e1b      	lsrs	r3, r3, #24
 8007230:	b2da      	uxtb	r2, r3
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	725a      	strb	r2, [r3, #9]

  pCID->ProdSN = (((hsd->CID[2] & 0x00FFFFFFU) << 8U) | ((hsd->CID[3] & 0xFF000000U) >> 24U));
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800723a:	021a      	lsls	r2, r3, #8
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007242:	0e1b      	lsrs	r3, r3, #24
 8007244:	431a      	orrs	r2, r3
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	60da      	str	r2, [r3, #12]

  pCID->Reserved1 = (uint8_t)((hsd->CID[3] & 0x00F00000U) >> 20U);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007250:	0d1b      	lsrs	r3, r3, #20
 8007252:	b2db      	uxtb	r3, r3
 8007254:	f003 030f 	and.w	r3, r3, #15
 8007258:	b2da      	uxtb	r2, r3
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	741a      	strb	r2, [r3, #16]

  pCID->ManufactDate = (uint16_t)((hsd->CID[3] & 0x000FFF00U) >> 8U);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007264:	0a1b      	lsrs	r3, r3, #8
 8007266:	b29b      	uxth	r3, r3
 8007268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800726c:	b29a      	uxth	r2, r3
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	825a      	strh	r2, [r3, #18]

  pCID->CID_CRC = (uint8_t)((hsd->CID[3] & 0x000000FEU) >> 1U);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007278:	085b      	lsrs	r3, r3, #1
 800727a:	b2db      	uxtb	r3, r3
 800727c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007280:	b2da      	uxtb	r2, r3
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	751a      	strb	r2, [r3, #20]

  pCID->Reserved2 = 1U;
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	2201      	movs	r2, #1
 800728a:	755a      	strb	r2, [r3, #21]

  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	370c      	adds	r7, #12
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
	...

0800729c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800729c:	b480      	push	{r7}
 800729e:	b083      	sub	sp, #12
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072aa:	0f9b      	lsrs	r3, r3, #30
 80072ac:	b2da      	uxtb	r2, r3
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072b6:	0e9b      	lsrs	r3, r3, #26
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	f003 030f 	and.w	r3, r3, #15
 80072be:	b2da      	uxtb	r2, r3
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072c8:	0e1b      	lsrs	r3, r3, #24
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	f003 0303 	and.w	r3, r3, #3
 80072d0:	b2da      	uxtb	r2, r3
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072da:	0c1b      	lsrs	r3, r3, #16
 80072dc:	b2da      	uxtb	r2, r3
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072e6:	0a1b      	lsrs	r3, r3, #8
 80072e8:	b2da      	uxtb	r2, r3
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072f2:	b2da      	uxtb	r2, r3
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072fc:	0d1b      	lsrs	r3, r3, #20
 80072fe:	b29a      	uxth	r2, r3
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007308:	0c1b      	lsrs	r3, r3, #16
 800730a:	b2db      	uxtb	r3, r3
 800730c:	f003 030f 	and.w	r3, r3, #15
 8007310:	b2da      	uxtb	r2, r3
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800731a:	0bdb      	lsrs	r3, r3, #15
 800731c:	b2db      	uxtb	r3, r3
 800731e:	f003 0301 	and.w	r3, r3, #1
 8007322:	b2da      	uxtb	r2, r3
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800732c:	0b9b      	lsrs	r3, r3, #14
 800732e:	b2db      	uxtb	r3, r3
 8007330:	f003 0301 	and.w	r3, r3, #1
 8007334:	b2da      	uxtb	r2, r3
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800733e:	0b5b      	lsrs	r3, r3, #13
 8007340:	b2db      	uxtb	r3, r3
 8007342:	f003 0301 	and.w	r3, r3, #1
 8007346:	b2da      	uxtb	r2, r3
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007350:	0b1b      	lsrs	r3, r3, #12
 8007352:	b2db      	uxtb	r3, r3
 8007354:	f003 0301 	and.w	r3, r3, #1
 8007358:	b2da      	uxtb	r2, r3
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	2200      	movs	r2, #0
 8007362:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007368:	2b00      	cmp	r3, #0
 800736a:	d163      	bne.n	8007434 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007370:	009a      	lsls	r2, r3, #2
 8007372:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007376:	4013      	ands	r3, r2
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800737c:	0f92      	lsrs	r2, r2, #30
 800737e:	431a      	orrs	r2, r3
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007388:	0edb      	lsrs	r3, r3, #27
 800738a:	b2db      	uxtb	r3, r3
 800738c:	f003 0307 	and.w	r3, r3, #7
 8007390:	b2da      	uxtb	r2, r3
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800739a:	0e1b      	lsrs	r3, r3, #24
 800739c:	b2db      	uxtb	r3, r3
 800739e:	f003 0307 	and.w	r3, r3, #7
 80073a2:	b2da      	uxtb	r2, r3
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073ac:	0d5b      	lsrs	r3, r3, #21
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	f003 0307 	and.w	r3, r3, #7
 80073b4:	b2da      	uxtb	r2, r3
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073be:	0c9b      	lsrs	r3, r3, #18
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	f003 0307 	and.w	r3, r3, #7
 80073c6:	b2da      	uxtb	r2, r3
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073d0:	0bdb      	lsrs	r3, r3, #15
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	f003 0307 	and.w	r3, r3, #7
 80073d8:	b2da      	uxtb	r2, r3
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	1c5a      	adds	r2, r3, #1
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	7e1b      	ldrb	r3, [r3, #24]
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	f003 0307 	and.w	r3, r3, #7
 80073f2:	3302      	adds	r3, #2
 80073f4:	2201      	movs	r2, #1
 80073f6:	fa02 f303 	lsl.w	r3, r2, r3
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80073fe:	fb03 f202 	mul.w	r2, r3, r2
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	7a1b      	ldrb	r3, [r3, #8]
 800740a:	b2db      	uxtb	r3, r3
 800740c:	f003 030f 	and.w	r3, r3, #15
 8007410:	2201      	movs	r2, #1
 8007412:	409a      	lsls	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007420:	0a52      	lsrs	r2, r2, #9
 8007422:	fb03 f202 	mul.w	r2, r3, r2
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007430:	661a      	str	r2, [r3, #96]	; 0x60
 8007432:	e031      	b.n	8007498 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007438:	2b01      	cmp	r3, #1
 800743a:	d11d      	bne.n	8007478 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007440:	041b      	lsls	r3, r3, #16
 8007442:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800744a:	0c1b      	lsrs	r3, r3, #16
 800744c:	431a      	orrs	r2, r3
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	3301      	adds	r3, #1
 8007458:	029a      	lsls	r2, r3, #10
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f44f 7200 	mov.w	r2, #512	; 0x200
 800746c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	661a      	str	r2, [r3, #96]	; 0x60
 8007476:	e00f      	b.n	8007498 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a58      	ldr	r2, [pc, #352]	; (80075e0 <HAL_SD_GetCardCSD+0x344>)
 800747e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007484:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	e09d      	b.n	80075d4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800749c:	0b9b      	lsrs	r3, r3, #14
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	f003 0301 	and.w	r3, r3, #1
 80074a4:	b2da      	uxtb	r2, r3
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074ae:	09db      	lsrs	r3, r3, #7
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074b6:	b2da      	uxtb	r2, r3
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074c6:	b2da      	uxtb	r2, r3
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074d0:	0fdb      	lsrs	r3, r3, #31
 80074d2:	b2da      	uxtb	r2, r3
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074dc:	0f5b      	lsrs	r3, r3, #29
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	f003 0303 	and.w	r3, r3, #3
 80074e4:	b2da      	uxtb	r2, r3
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ee:	0e9b      	lsrs	r3, r3, #26
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	f003 0307 	and.w	r3, r3, #7
 80074f6:	b2da      	uxtb	r2, r3
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007500:	0d9b      	lsrs	r3, r3, #22
 8007502:	b2db      	uxtb	r3, r3
 8007504:	f003 030f 	and.w	r3, r3, #15
 8007508:	b2da      	uxtb	r2, r3
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007512:	0d5b      	lsrs	r3, r3, #21
 8007514:	b2db      	uxtb	r3, r3
 8007516:	f003 0301 	and.w	r3, r3, #1
 800751a:	b2da      	uxtb	r2, r3
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800752e:	0c1b      	lsrs	r3, r3, #16
 8007530:	b2db      	uxtb	r3, r3
 8007532:	f003 0301 	and.w	r3, r3, #1
 8007536:	b2da      	uxtb	r2, r3
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007542:	0bdb      	lsrs	r3, r3, #15
 8007544:	b2db      	uxtb	r3, r3
 8007546:	f003 0301 	and.w	r3, r3, #1
 800754a:	b2da      	uxtb	r2, r3
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007556:	0b9b      	lsrs	r3, r3, #14
 8007558:	b2db      	uxtb	r3, r3
 800755a:	f003 0301 	and.w	r3, r3, #1
 800755e:	b2da      	uxtb	r2, r3
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800756a:	0b5b      	lsrs	r3, r3, #13
 800756c:	b2db      	uxtb	r3, r3
 800756e:	f003 0301 	and.w	r3, r3, #1
 8007572:	b2da      	uxtb	r2, r3
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800757e:	0b1b      	lsrs	r3, r3, #12
 8007580:	b2db      	uxtb	r3, r3
 8007582:	f003 0301 	and.w	r3, r3, #1
 8007586:	b2da      	uxtb	r2, r3
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007592:	0a9b      	lsrs	r3, r3, #10
 8007594:	b2db      	uxtb	r3, r3
 8007596:	f003 0303 	and.w	r3, r3, #3
 800759a:	b2da      	uxtb	r2, r3
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a6:	0a1b      	lsrs	r3, r3, #8
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	f003 0303 	and.w	r3, r3, #3
 80075ae:	b2da      	uxtb	r2, r3
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ba:	085b      	lsrs	r3, r3, #1
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075c2:	b2da      	uxtb	r2, r3
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr
 80075e0:	004005ff 	.word	0x004005ff

080075e4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800762e:	2300      	movs	r3, #0
}
 8007630:	4618      	mov	r0, r3
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800763c:	b5b0      	push	{r4, r5, r7, lr}
 800763e:	b08e      	sub	sp, #56	; 0x38
 8007640:	af04      	add	r7, sp, #16
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007646:	2300      	movs	r3, #0
 8007648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2203      	movs	r2, #3
 8007650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007658:	2b03      	cmp	r3, #3
 800765a:	d02e      	beq.n	80076ba <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007662:	d106      	bne.n	8007672 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007668:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	639a      	str	r2, [r3, #56]	; 0x38
 8007670:	e029      	b.n	80076c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007678:	d10a      	bne.n	8007690 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 fb2a 	bl	8007cd4 <SD_WideBus_Enable>
 8007680:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007686:	6a3b      	ldr	r3, [r7, #32]
 8007688:	431a      	orrs	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	639a      	str	r2, [r3, #56]	; 0x38
 800768e:	e01a      	b.n	80076c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d10a      	bne.n	80076ac <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 fb67 	bl	8007d6a <SD_WideBus_Disable>
 800769c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076a2:	6a3b      	ldr	r3, [r7, #32]
 80076a4:	431a      	orrs	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	639a      	str	r2, [r3, #56]	; 0x38
 80076aa:	e00c      	b.n	80076c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	639a      	str	r2, [r3, #56]	; 0x38
 80076b8:	e005      	b.n	80076c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076be:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00b      	beq.n	80076e6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a26      	ldr	r2, [pc, #152]	; (800776c <HAL_SD_ConfigWideBusOperation+0x130>)
 80076d4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2201      	movs	r2, #1
 80076da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80076e4:	e01f      	b.n	8007726 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	695b      	ldr	r3, [r3, #20]
 8007700:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681d      	ldr	r5, [r3, #0]
 800770c:	466c      	mov	r4, sp
 800770e:	f107 0314 	add.w	r3, r7, #20
 8007712:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007716:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800771a:	f107 0308 	add.w	r3, r7, #8
 800771e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007720:	4628      	mov	r0, r5
 8007722:	f001 fa68 	bl	8008bf6 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800772e:	4618      	mov	r0, r3
 8007730:	f001 fb3d 	bl	8008dae <SDMMC_CmdBlockLength>
 8007734:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007736:	6a3b      	ldr	r3, [r7, #32]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00c      	beq.n	8007756 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a0a      	ldr	r2, [pc, #40]	; (800776c <HAL_SD_ConfigWideBusOperation+0x130>)
 8007742:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007748:	6a3b      	ldr	r3, [r7, #32]
 800774a:	431a      	orrs	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800775e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007762:	4618      	mov	r0, r3
 8007764:	3728      	adds	r7, #40	; 0x28
 8007766:	46bd      	mov	sp, r7
 8007768:	bdb0      	pop	{r4, r5, r7, pc}
 800776a:	bf00      	nop
 800776c:	004005ff 	.word	0x004005ff

08007770 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007778:	2300      	movs	r3, #0
 800777a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800777c:	f107 030c 	add.w	r3, r7, #12
 8007780:	4619      	mov	r1, r3
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fa7e 	bl	8007c84 <SD_SendStatus>
 8007788:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d005      	beq.n	800779c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	431a      	orrs	r2, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	0a5b      	lsrs	r3, r3, #9
 80077a0:	f003 030f 	and.w	r3, r3, #15
 80077a4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80077a6:	693b      	ldr	r3, [r7, #16]
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3718      	adds	r7, #24
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077bc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077cc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80077ce:	bf00      	nop
 80077d0:	3714      	adds	r7, #20
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr

080077da <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b084      	sub	sp, #16
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ec:	2b82      	cmp	r3, #130	; 0x82
 80077ee:	d111      	bne.n	8007814 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4618      	mov	r0, r3
 80077f6:	f001 fb85 	bl	8008f04 <SDMMC_CmdStopTransfer>
 80077fa:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d008      	beq.n	8007814 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	431a      	orrs	r2, r3
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800780e:	68f8      	ldr	r0, [r7, #12]
 8007810:	f7ff fce2 	bl	80071d8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f022 0208 	bic.w	r2, r2, #8
 8007822:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f240 523a 	movw	r2, #1338	; 0x53a
 800782c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2201      	movs	r2, #1
 8007832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2200      	movs	r2, #0
 800783a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f001 fff5 	bl	800982c <HAL_SD_RxCpltCallback>
#endif
}
 8007842:	bf00      	nop
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
	...

0800784c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b086      	sub	sp, #24
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007858:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f7fc f8a2 	bl	80039a4 <HAL_DMA_GetError>
 8007860:	4603      	mov	r3, r0
 8007862:	2b02      	cmp	r3, #2
 8007864:	d03e      	beq.n	80078e4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800786c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007874:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	2b01      	cmp	r3, #1
 800787a:	d002      	beq.n	8007882 <SD_DMAError+0x36>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d12d      	bne.n	80078de <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a19      	ldr	r2, [pc, #100]	; (80078ec <SD_DMAError+0xa0>)
 8007888:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007898:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80078a6:	6978      	ldr	r0, [r7, #20]
 80078a8:	f7ff ff62 	bl	8007770 <HAL_SD_GetCardState>
 80078ac:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	2b06      	cmp	r3, #6
 80078b2:	d002      	beq.n	80078ba <SD_DMAError+0x6e>
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	2b05      	cmp	r3, #5
 80078b8:	d10a      	bne.n	80078d0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4618      	mov	r0, r3
 80078c0:	f001 fb20 	bl	8008f04 <SDMMC_CmdStopTransfer>
 80078c4:	4602      	mov	r2, r0
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ca:	431a      	orrs	r2, r3
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	2200      	movs	r2, #0
 80078dc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80078de:	6978      	ldr	r0, [r7, #20]
 80078e0:	f7ff fc7a 	bl	80071d8 <HAL_SD_ErrorCallback>
#endif
  }
}
 80078e4:	bf00      	nop
 80078e6:	3718      	adds	r7, #24
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	004005ff 	.word	0x004005ff

080078f0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078fc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f240 523a 	movw	r2, #1338	; 0x53a
 8007906:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f7ff ff31 	bl	8007770 <HAL_SD_GetCardState>
 800790e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2200      	movs	r2, #0
 800791c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	2b06      	cmp	r3, #6
 8007922:	d002      	beq.n	800792a <SD_DMATxAbort+0x3a>
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	2b05      	cmp	r3, #5
 8007928:	d10a      	bne.n	8007940 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4618      	mov	r0, r3
 8007930:	f001 fae8 	bl	8008f04 <SDMMC_CmdStopTransfer>
 8007934:	4602      	mov	r2, r0
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793a:	431a      	orrs	r2, r3
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007944:	2b00      	cmp	r3, #0
 8007946:	d103      	bne.n	8007950 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007948:	68f8      	ldr	r0, [r7, #12]
 800794a:	f001 ff5b 	bl	8009804 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800794e:	e002      	b.n	8007956 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f7ff fc41 	bl	80071d8 <HAL_SD_ErrorCallback>
}
 8007956:	bf00      	nop
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b084      	sub	sp, #16
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f240 523a 	movw	r2, #1338	; 0x53a
 8007974:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f7ff fefa 	bl	8007770 <HAL_SD_GetCardState>
 800797c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2201      	movs	r2, #1
 8007982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	2b06      	cmp	r3, #6
 8007990:	d002      	beq.n	8007998 <SD_DMARxAbort+0x3a>
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	2b05      	cmp	r3, #5
 8007996:	d10a      	bne.n	80079ae <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4618      	mov	r0, r3
 800799e:	f001 fab1 	bl	8008f04 <SDMMC_CmdStopTransfer>
 80079a2:	4602      	mov	r2, r0
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a8:	431a      	orrs	r2, r3
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d103      	bne.n	80079be <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	f001 ff24 	bl	8009804 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80079bc:	e002      	b.n	80079c4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	f7ff fc0a 	bl	80071d8 <HAL_SD_ErrorCallback>
}
 80079c4:	bf00      	nop
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80079cc:	b5b0      	push	{r4, r5, r7, lr}
 80079ce:	b094      	sub	sp, #80	; 0x50
 80079d0:	af04      	add	r7, sp, #16
 80079d2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80079d4:	2301      	movs	r3, #1
 80079d6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4618      	mov	r0, r3
 80079de:	f001 f962 	bl	8008ca6 <SDIO_GetPowerState>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d102      	bne.n	80079ee <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80079e8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80079ec:	e0b8      	b.n	8007b60 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079f2:	2b03      	cmp	r3, #3
 80079f4:	d02f      	beq.n	8007a56 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4618      	mov	r0, r3
 80079fc:	f001 fb8c 	bl	8009118 <SDMMC_CmdSendCID>
 8007a00:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d001      	beq.n	8007a0c <SD_InitCard+0x40>
    {
      return errorstate;
 8007a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a0a:	e0a9      	b.n	8007b60 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2100      	movs	r1, #0
 8007a12:	4618      	mov	r0, r3
 8007a14:	f001 f98c 	bl	8008d30 <SDIO_GetResponse>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2104      	movs	r1, #4
 8007a24:	4618      	mov	r0, r3
 8007a26:	f001 f983 	bl	8008d30 <SDIO_GetResponse>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2108      	movs	r1, #8
 8007a36:	4618      	mov	r0, r3
 8007a38:	f001 f97a 	bl	8008d30 <SDIO_GetResponse>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	210c      	movs	r1, #12
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f001 f971 	bl	8008d30 <SDIO_GetResponse>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a5a:	2b03      	cmp	r3, #3
 8007a5c:	d00d      	beq.n	8007a7a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f107 020e 	add.w	r2, r7, #14
 8007a66:	4611      	mov	r1, r2
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f001 fb92 	bl	8009192 <SDMMC_CmdSetRelAdd>
 8007a6e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d001      	beq.n	8007a7a <SD_InitCard+0xae>
    {
      return errorstate;
 8007a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a78:	e072      	b.n	8007b60 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a7e:	2b03      	cmp	r3, #3
 8007a80:	d036      	beq.n	8007af0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007a82:	89fb      	ldrh	r3, [r7, #14]
 8007a84:	461a      	mov	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a92:	041b      	lsls	r3, r3, #16
 8007a94:	4619      	mov	r1, r3
 8007a96:	4610      	mov	r0, r2
 8007a98:	f001 fb5c 	bl	8009154 <SDMMC_CmdSendCSD>
 8007a9c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d001      	beq.n	8007aa8 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aa6:	e05b      	b.n	8007b60 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2100      	movs	r1, #0
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f001 f93e 	bl	8008d30 <SDIO_GetResponse>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2104      	movs	r1, #4
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f001 f935 	bl	8008d30 <SDIO_GetResponse>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2108      	movs	r1, #8
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f001 f92c 	bl	8008d30 <SDIO_GetResponse>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	210c      	movs	r1, #12
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f001 f923 	bl	8008d30 <SDIO_GetResponse>
 8007aea:	4602      	mov	r2, r0
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2104      	movs	r1, #4
 8007af6:	4618      	mov	r0, r3
 8007af8:	f001 f91a 	bl	8008d30 <SDIO_GetResponse>
 8007afc:	4603      	mov	r3, r0
 8007afe:	0d1a      	lsrs	r2, r3, #20
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007b04:	f107 0310 	add.w	r3, r7, #16
 8007b08:	4619      	mov	r1, r3
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f7ff fbc6 	bl	800729c <HAL_SD_GetCardCSD>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d002      	beq.n	8007b1c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007b16:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007b1a:	e021      	b.n	8007b60 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6819      	ldr	r1, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b24:	041b      	lsls	r3, r3, #16
 8007b26:	2200      	movs	r2, #0
 8007b28:	461c      	mov	r4, r3
 8007b2a:	4615      	mov	r5, r2
 8007b2c:	4622      	mov	r2, r4
 8007b2e:	462b      	mov	r3, r5
 8007b30:	4608      	mov	r0, r1
 8007b32:	f001 fa09 	bl	8008f48 <SDMMC_CmdSelDesel>
 8007b36:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d001      	beq.n	8007b42 <SD_InitCard+0x176>
  {
    return errorstate;
 8007b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b40:	e00e      	b.n	8007b60 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681d      	ldr	r5, [r3, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	466c      	mov	r4, sp
 8007b4a:	f103 0210 	add.w	r2, r3, #16
 8007b4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007b50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007b54:	3304      	adds	r3, #4
 8007b56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b58:	4628      	mov	r0, r5
 8007b5a:	f001 f84c 	bl	8008bf6 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3740      	adds	r7, #64	; 0x40
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bdb0      	pop	{r4, r5, r7, pc}

08007b68 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b086      	sub	sp, #24
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b70:	2300      	movs	r3, #0
 8007b72:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007b74:	2300      	movs	r3, #0
 8007b76:	617b      	str	r3, [r7, #20]
 8007b78:	2300      	movs	r3, #0
 8007b7a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4618      	mov	r0, r3
 8007b82:	f001 fa04 	bl	8008f8e <SDMMC_CmdGoIdleState>
 8007b86:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d001      	beq.n	8007b92 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	e072      	b.n	8007c78 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4618      	mov	r0, r3
 8007b98:	f001 fa17 	bl	8008fca <SDMMC_CmdOperCond>
 8007b9c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00d      	beq.n	8007bc0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f001 f9ed 	bl	8008f8e <SDMMC_CmdGoIdleState>
 8007bb4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d004      	beq.n	8007bc6 <SD_PowerON+0x5e>
    {
      return errorstate;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	e05b      	b.n	8007c78 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d137      	bne.n	8007c3e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2100      	movs	r1, #0
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f001 fa17 	bl	8009008 <SDMMC_CmdAppCommand>
 8007bda:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d02d      	beq.n	8007c3e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007be2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007be6:	e047      	b.n	8007c78 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2100      	movs	r1, #0
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f001 fa0a 	bl	8009008 <SDMMC_CmdAppCommand>
 8007bf4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d001      	beq.n	8007c00 <SD_PowerON+0x98>
    {
      return errorstate;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	e03b      	b.n	8007c78 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	491e      	ldr	r1, [pc, #120]	; (8007c80 <SD_PowerON+0x118>)
 8007c06:	4618      	mov	r0, r3
 8007c08:	f001 fa20 	bl	800904c <SDMMC_CmdAppOperCommand>
 8007c0c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d002      	beq.n	8007c1a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007c14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007c18:	e02e      	b.n	8007c78 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2100      	movs	r1, #0
 8007c20:	4618      	mov	r0, r3
 8007c22:	f001 f885 	bl	8008d30 <SDIO_GetResponse>
 8007c26:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	0fdb      	lsrs	r3, r3, #31
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d101      	bne.n	8007c34 <SD_PowerON+0xcc>
 8007c30:	2301      	movs	r3, #1
 8007c32:	e000      	b.n	8007c36 <SD_PowerON+0xce>
 8007c34:	2300      	movs	r3, #0
 8007c36:	613b      	str	r3, [r7, #16]

    count++;
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d802      	bhi.n	8007c4e <SD_PowerON+0xe6>
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d0cc      	beq.n	8007be8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d902      	bls.n	8007c5e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007c58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c5c:	e00c      	b.n	8007c78 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d003      	beq.n	8007c70 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	645a      	str	r2, [r3, #68]	; 0x44
 8007c6e:	e002      	b.n	8007c76 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3718      	adds	r7, #24
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	c1100000 	.word	0xc1100000

08007c84 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d102      	bne.n	8007c9a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007c94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007c98:	e018      	b.n	8007ccc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ca2:	041b      	lsls	r3, r3, #16
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	4610      	mov	r0, r2
 8007ca8:	f001 fa94 	bl	80091d4 <SDMMC_CmdSendStatus>
 8007cac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d001      	beq.n	8007cb8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	e009      	b.n	8007ccc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f001 f836 	bl	8008d30 <SDIO_GetResponse>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3710      	adds	r7, #16
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b086      	sub	sp, #24
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007cdc:	2300      	movs	r3, #0
 8007cde:	60fb      	str	r3, [r7, #12]
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2100      	movs	r1, #0
 8007cea:	4618      	mov	r0, r3
 8007cec:	f001 f820 	bl	8008d30 <SDIO_GetResponse>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cfa:	d102      	bne.n	8007d02 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007cfc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007d00:	e02f      	b.n	8007d62 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007d02:	f107 030c 	add.w	r3, r7, #12
 8007d06:	4619      	mov	r1, r3
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 f879 	bl	8007e00 <SD_FindSCR>
 8007d0e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d001      	beq.n	8007d1a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	e023      	b.n	8007d62 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d01c      	beq.n	8007d5e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d2c:	041b      	lsls	r3, r3, #16
 8007d2e:	4619      	mov	r1, r3
 8007d30:	4610      	mov	r0, r2
 8007d32:	f001 f969 	bl	8009008 <SDMMC_CmdAppCommand>
 8007d36:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d001      	beq.n	8007d42 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	e00f      	b.n	8007d62 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2102      	movs	r1, #2
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f001 f9a2 	bl	8009092 <SDMMC_CmdBusWidth>
 8007d4e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d001      	beq.n	8007d5a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	e003      	b.n	8007d62 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	e001      	b.n	8007d62 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007d5e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3718      	adds	r7, #24
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b086      	sub	sp, #24
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007d72:	2300      	movs	r3, #0
 8007d74:	60fb      	str	r3, [r7, #12]
 8007d76:	2300      	movs	r3, #0
 8007d78:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2100      	movs	r1, #0
 8007d80:	4618      	mov	r0, r3
 8007d82:	f000 ffd5 	bl	8008d30 <SDIO_GetResponse>
 8007d86:	4603      	mov	r3, r0
 8007d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d90:	d102      	bne.n	8007d98 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007d92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007d96:	e02f      	b.n	8007df8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007d98:	f107 030c 	add.w	r3, r7, #12
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 f82e 	bl	8007e00 <SD_FindSCR>
 8007da4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d001      	beq.n	8007db0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	e023      	b.n	8007df8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d01c      	beq.n	8007df4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dc2:	041b      	lsls	r3, r3, #16
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	4610      	mov	r0, r2
 8007dc8:	f001 f91e 	bl	8009008 <SDMMC_CmdAppCommand>
 8007dcc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d001      	beq.n	8007dd8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	e00f      	b.n	8007df8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2100      	movs	r1, #0
 8007dde:	4618      	mov	r0, r3
 8007de0:	f001 f957 	bl	8009092 <SDMMC_CmdBusWidth>
 8007de4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d001      	beq.n	8007df0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	e003      	b.n	8007df8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007df0:	2300      	movs	r3, #0
 8007df2:	e001      	b.n	8007df8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007df4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3718      	adds	r7, #24
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007e00:	b590      	push	{r4, r7, lr}
 8007e02:	b08f      	sub	sp, #60	; 0x3c
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007e0a:	f7fa fdab 	bl	8002964 <HAL_GetTick>
 8007e0e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007e10:	2300      	movs	r3, #0
 8007e12:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007e14:	2300      	movs	r3, #0
 8007e16:	60bb      	str	r3, [r7, #8]
 8007e18:	2300      	movs	r3, #0
 8007e1a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2108      	movs	r1, #8
 8007e26:	4618      	mov	r0, r3
 8007e28:	f000 ffc1 	bl	8008dae <SDMMC_CmdBlockLength>
 8007e2c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d001      	beq.n	8007e38 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e36:	e0b2      	b.n	8007f9e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e40:	041b      	lsls	r3, r3, #16
 8007e42:	4619      	mov	r1, r3
 8007e44:	4610      	mov	r0, r2
 8007e46:	f001 f8df 	bl	8009008 <SDMMC_CmdAppCommand>
 8007e4a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d001      	beq.n	8007e56 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e54:	e0a3      	b.n	8007f9e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007e56:	f04f 33ff 	mov.w	r3, #4294967295
 8007e5a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007e5c:	2308      	movs	r3, #8
 8007e5e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007e60:	2330      	movs	r3, #48	; 0x30
 8007e62:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007e64:	2302      	movs	r3, #2
 8007e66:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f107 0210 	add.w	r2, r7, #16
 8007e78:	4611      	mov	r1, r2
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f000 ff6b 	bl	8008d56 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4618      	mov	r0, r3
 8007e86:	f001 f926 	bl	80090d6 <SDMMC_CmdSendSCR>
 8007e8a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d02a      	beq.n	8007ee8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8007e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e94:	e083      	b.n	8007f9e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00f      	beq.n	8007ec4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6819      	ldr	r1, [r3, #0]
 8007ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	f107 0208 	add.w	r2, r7, #8
 8007eb0:	18d4      	adds	r4, r2, r3
 8007eb2:	4608      	mov	r0, r1
 8007eb4:	f000 feca 	bl	8008c4c <SDIO_ReadFIFO>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	6023      	str	r3, [r4, #0]
      index++;
 8007ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	637b      	str	r3, [r7, #52]	; 0x34
 8007ec2:	e006      	b.n	8007ed2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d012      	beq.n	8007ef8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007ed2:	f7fa fd47 	bl	8002964 <HAL_GetTick>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eda:	1ad3      	subs	r3, r2, r3
 8007edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee0:	d102      	bne.n	8007ee8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007ee2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ee6:	e05a      	b.n	8007f9e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eee:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d0cf      	beq.n	8007e96 <SD_FindSCR+0x96>
 8007ef6:	e000      	b.n	8007efa <SD_FindSCR+0xfa>
      break;
 8007ef8:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f00:	f003 0308 	and.w	r3, r3, #8
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d005      	beq.n	8007f14 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2208      	movs	r2, #8
 8007f0e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007f10:	2308      	movs	r3, #8
 8007f12:	e044      	b.n	8007f9e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f1a:	f003 0302 	and.w	r3, r3, #2
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d005      	beq.n	8007f2e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2202      	movs	r2, #2
 8007f28:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007f2a:	2302      	movs	r3, #2
 8007f2c:	e037      	b.n	8007f9e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f34:	f003 0320 	and.w	r3, r3, #32
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d005      	beq.n	8007f48 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2220      	movs	r2, #32
 8007f42:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007f44:	2320      	movs	r3, #32
 8007f46:	e02a      	b.n	8007f9e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f240 523a 	movw	r2, #1338	; 0x53a
 8007f50:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	061a      	lsls	r2, r3, #24
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	021b      	lsls	r3, r3, #8
 8007f5a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007f5e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	0a1b      	lsrs	r3, r3, #8
 8007f64:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007f68:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	0e1b      	lsrs	r3, r3, #24
 8007f6e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f72:	601a      	str	r2, [r3, #0]
    scr++;
 8007f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f76:	3304      	adds	r3, #4
 8007f78:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	061a      	lsls	r2, r3, #24
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	021b      	lsls	r3, r3, #8
 8007f82:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007f86:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	0a1b      	lsrs	r3, r3, #8
 8007f8c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007f90:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	0e1b      	lsrs	r3, r3, #24
 8007f96:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f9a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	373c      	adds	r7, #60	; 0x3c
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd90      	pop	{r4, r7, pc}

08007fa6 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b086      	sub	sp, #24
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d03f      	beq.n	8008040 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	617b      	str	r3, [r7, #20]
 8007fc4:	e033      	b.n	800802e <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f000 fe3e 	bl	8008c4c <SDIO_ReadFIFO>
 8007fd0:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	b2da      	uxtb	r2, r3
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	3b01      	subs	r3, #1
 8007fe4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	0a1b      	lsrs	r3, r3, #8
 8007fea:	b2da      	uxtb	r2, r3
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	3b01      	subs	r3, #1
 8007ffa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	0c1b      	lsrs	r3, r3, #16
 8008000:	b2da      	uxtb	r2, r3
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	3301      	adds	r3, #1
 800800a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	3b01      	subs	r3, #1
 8008010:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	0e1b      	lsrs	r3, r3, #24
 8008016:	b2da      	uxtb	r2, r3
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	3301      	adds	r3, #1
 8008020:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	3b01      	subs	r3, #1
 8008026:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	3301      	adds	r3, #1
 800802c:	617b      	str	r3, [r7, #20]
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	2b07      	cmp	r3, #7
 8008032:	d9c8      	bls.n	8007fc6 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	68fa      	ldr	r2, [r7, #12]
 8008038:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	693a      	ldr	r2, [r7, #16]
 800803e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8008040:	bf00      	nop
 8008042:	3718      	adds	r7, #24
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b086      	sub	sp, #24
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6a1b      	ldr	r3, [r3, #32]
 8008054:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d043      	beq.n	80080ea <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008062:	2300      	movs	r3, #0
 8008064:	617b      	str	r3, [r7, #20]
 8008066:	e037      	b.n	80080d8 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	3301      	adds	r3, #1
 8008072:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	3b01      	subs	r3, #1
 8008078:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	021a      	lsls	r2, r3, #8
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	4313      	orrs	r3, r2
 8008084:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	3301      	adds	r3, #1
 800808a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	3b01      	subs	r3, #1
 8008090:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	041a      	lsls	r2, r3, #16
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	4313      	orrs	r3, r2
 800809c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	3301      	adds	r3, #1
 80080a2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	3b01      	subs	r3, #1
 80080a8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	061a      	lsls	r2, r3, #24
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	60bb      	str	r3, [r7, #8]
      tmp++;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	3301      	adds	r3, #1
 80080ba:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	3b01      	subs	r3, #1
 80080c0:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f107 0208 	add.w	r2, r7, #8
 80080ca:	4611      	mov	r1, r2
 80080cc:	4618      	mov	r0, r3
 80080ce:	f000 fdca 	bl	8008c66 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	3301      	adds	r3, #1
 80080d6:	617b      	str	r3, [r7, #20]
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	2b07      	cmp	r3, #7
 80080dc:	d9c4      	bls.n	8008068 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	693a      	ldr	r2, [r7, #16]
 80080e8:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80080ea:	bf00      	nop
 80080ec:	3718      	adds	r7, #24
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b082      	sub	sp, #8
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
 80080fa:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d101      	bne.n	8008106 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	e025      	b.n	8008152 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800810c:	b2db      	uxtb	r3, r3
 800810e:	2b00      	cmp	r3, #0
 8008110:	d106      	bne.n	8008120 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f7f9 f974 	bl	8001408 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2202      	movs	r2, #2
 8008124:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	3304      	adds	r3, #4
 8008130:	4619      	mov	r1, r3
 8008132:	4610      	mov	r0, r2
 8008134:	f000 fc1e 	bl	8008974 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6818      	ldr	r0, [r3, #0]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	461a      	mov	r2, r3
 8008142:	6839      	ldr	r1, [r7, #0]
 8008144:	f000 fc89 	bl	8008a5a <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3708      	adds	r7, #8
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b084      	sub	sp, #16
 800815e:	af00      	add	r7, sp, #0
 8008160:	60f8      	str	r0, [r7, #12]
 8008162:	60b9      	str	r1, [r7, #8]
 8008164:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800816c:	b2db      	uxtb	r3, r3
 800816e:	2b02      	cmp	r3, #2
 8008170:	d101      	bne.n	8008176 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008172:	2302      	movs	r3, #2
 8008174:	e018      	b.n	80081a8 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2202      	movs	r2, #2
 800817a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	68b9      	ldr	r1, [r7, #8]
 8008186:	4618      	mov	r0, r3
 8008188:	f000 fce6 	bl	8008b58 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2b02      	cmp	r3, #2
 8008192:	d104      	bne.n	800819e <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2205      	movs	r2, #5
 8008198:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800819c:	e003      	b.n	80081a6 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2201      	movs	r2, #1
 80081a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3710      	adds	r7, #16
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	2b02      	cmp	r3, #2
 80081c4:	d101      	bne.n	80081ca <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80081c6:	2302      	movs	r3, #2
 80081c8:	e00e      	b.n	80081e8 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2202      	movs	r2, #2
 80081ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	6839      	ldr	r1, [r7, #0]
 80081d8:	4618      	mov	r0, r3
 80081da:	f000 fcf9 	bl	8008bd0 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2201      	movs	r2, #1
 80081e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3708      	adds	r7, #8
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d101      	bne.n	8008202 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e03f      	b.n	8008282 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008208:	b2db      	uxtb	r3, r3
 800820a:	2b00      	cmp	r3, #0
 800820c:	d106      	bne.n	800821c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7fa faba 	bl	8002790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2224      	movs	r2, #36	; 0x24
 8008220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	68da      	ldr	r2, [r3, #12]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008232:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 f929 	bl	800848c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	691a      	ldr	r2, [r3, #16]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008248:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	695a      	ldr	r2, [r3, #20]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008258:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68da      	ldr	r2, [r3, #12]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008268:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2220      	movs	r2, #32
 8008274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2220      	movs	r2, #32
 800827c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b08a      	sub	sp, #40	; 0x28
 800828e:	af02      	add	r7, sp, #8
 8008290:	60f8      	str	r0, [r7, #12]
 8008292:	60b9      	str	r1, [r7, #8]
 8008294:	603b      	str	r3, [r7, #0]
 8008296:	4613      	mov	r3, r2
 8008298:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800829a:	2300      	movs	r3, #0
 800829c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	2b20      	cmp	r3, #32
 80082a8:	d17c      	bne.n	80083a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d002      	beq.n	80082b6 <HAL_UART_Transmit+0x2c>
 80082b0:	88fb      	ldrh	r3, [r7, #6]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d101      	bne.n	80082ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	e075      	b.n	80083a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d101      	bne.n	80082c8 <HAL_UART_Transmit+0x3e>
 80082c4:	2302      	movs	r3, #2
 80082c6:	e06e      	b.n	80083a6 <HAL_UART_Transmit+0x11c>
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2200      	movs	r2, #0
 80082d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2221      	movs	r2, #33	; 0x21
 80082da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80082de:	f7fa fb41 	bl	8002964 <HAL_GetTick>
 80082e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	88fa      	ldrh	r2, [r7, #6]
 80082e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	88fa      	ldrh	r2, [r7, #6]
 80082ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082f8:	d108      	bne.n	800830c <HAL_UART_Transmit+0x82>
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d104      	bne.n	800830c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008302:	2300      	movs	r3, #0
 8008304:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	61bb      	str	r3, [r7, #24]
 800830a:	e003      	b.n	8008314 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008310:	2300      	movs	r3, #0
 8008312:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2200      	movs	r2, #0
 8008318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800831c:	e02a      	b.n	8008374 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	9300      	str	r3, [sp, #0]
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	2200      	movs	r2, #0
 8008326:	2180      	movs	r1, #128	; 0x80
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f000 f840 	bl	80083ae <UART_WaitOnFlagUntilTimeout>
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d001      	beq.n	8008338 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008334:	2303      	movs	r3, #3
 8008336:	e036      	b.n	80083a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d10b      	bne.n	8008356 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	881b      	ldrh	r3, [r3, #0]
 8008342:	461a      	mov	r2, r3
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800834c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800834e:	69bb      	ldr	r3, [r7, #24]
 8008350:	3302      	adds	r3, #2
 8008352:	61bb      	str	r3, [r7, #24]
 8008354:	e007      	b.n	8008366 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	781a      	ldrb	r2, [r3, #0]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	3301      	adds	r3, #1
 8008364:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800836a:	b29b      	uxth	r3, r3
 800836c:	3b01      	subs	r3, #1
 800836e:	b29a      	uxth	r2, r3
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008378:	b29b      	uxth	r3, r3
 800837a:	2b00      	cmp	r3, #0
 800837c:	d1cf      	bne.n	800831e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	9300      	str	r3, [sp, #0]
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	2200      	movs	r2, #0
 8008386:	2140      	movs	r1, #64	; 0x40
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	f000 f810 	bl	80083ae <UART_WaitOnFlagUntilTimeout>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d001      	beq.n	8008398 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008394:	2303      	movs	r3, #3
 8008396:	e006      	b.n	80083a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2220      	movs	r2, #32
 800839c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80083a0:	2300      	movs	r3, #0
 80083a2:	e000      	b.n	80083a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80083a4:	2302      	movs	r3, #2
  }
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3720      	adds	r7, #32
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b090      	sub	sp, #64	; 0x40
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	60f8      	str	r0, [r7, #12]
 80083b6:	60b9      	str	r1, [r7, #8]
 80083b8:	603b      	str	r3, [r7, #0]
 80083ba:	4613      	mov	r3, r2
 80083bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083be:	e050      	b.n	8008462 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c6:	d04c      	beq.n	8008462 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80083c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d007      	beq.n	80083de <UART_WaitOnFlagUntilTimeout+0x30>
 80083ce:	f7fa fac9 	bl	8002964 <HAL_GetTick>
 80083d2:	4602      	mov	r2, r0
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	1ad3      	subs	r3, r2, r3
 80083d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083da:	429a      	cmp	r2, r3
 80083dc:	d241      	bcs.n	8008462 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	330c      	adds	r3, #12
 80083e4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e8:	e853 3f00 	ldrex	r3, [r3]
 80083ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80083f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	330c      	adds	r3, #12
 80083fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80083fe:	637a      	str	r2, [r7, #52]	; 0x34
 8008400:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008402:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008404:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008406:	e841 2300 	strex	r3, r2, [r1]
 800840a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800840c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1e5      	bne.n	80083de <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	3314      	adds	r3, #20
 8008418:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	e853 3f00 	ldrex	r3, [r3]
 8008420:	613b      	str	r3, [r7, #16]
   return(result);
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	f023 0301 	bic.w	r3, r3, #1
 8008428:	63bb      	str	r3, [r7, #56]	; 0x38
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	3314      	adds	r3, #20
 8008430:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008432:	623a      	str	r2, [r7, #32]
 8008434:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008436:	69f9      	ldr	r1, [r7, #28]
 8008438:	6a3a      	ldr	r2, [r7, #32]
 800843a:	e841 2300 	strex	r3, r2, [r1]
 800843e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d1e5      	bne.n	8008412 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2220      	movs	r2, #32
 800844a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2220      	movs	r2, #32
 8008452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2200      	movs	r2, #0
 800845a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800845e:	2303      	movs	r3, #3
 8008460:	e00f      	b.n	8008482 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	4013      	ands	r3, r2
 800846c:	68ba      	ldr	r2, [r7, #8]
 800846e:	429a      	cmp	r2, r3
 8008470:	bf0c      	ite	eq
 8008472:	2301      	moveq	r3, #1
 8008474:	2300      	movne	r3, #0
 8008476:	b2db      	uxtb	r3, r3
 8008478:	461a      	mov	r2, r3
 800847a:	79fb      	ldrb	r3, [r7, #7]
 800847c:	429a      	cmp	r2, r3
 800847e:	d09f      	beq.n	80083c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3740      	adds	r7, #64	; 0x40
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
	...

0800848c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800848c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008490:	b0c0      	sub	sp, #256	; 0x100
 8008492:	af00      	add	r7, sp, #0
 8008494:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	691b      	ldr	r3, [r3, #16]
 80084a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80084a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084a8:	68d9      	ldr	r1, [r3, #12]
 80084aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	ea40 0301 	orr.w	r3, r0, r1
 80084b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80084b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ba:	689a      	ldr	r2, [r3, #8]
 80084bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084c0:	691b      	ldr	r3, [r3, #16]
 80084c2:	431a      	orrs	r2, r3
 80084c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084c8:	695b      	ldr	r3, [r3, #20]
 80084ca:	431a      	orrs	r2, r3
 80084cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084d0:	69db      	ldr	r3, [r3, #28]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80084d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80084e4:	f021 010c 	bic.w	r1, r1, #12
 80084e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80084f2:	430b      	orrs	r3, r1
 80084f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80084f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	695b      	ldr	r3, [r3, #20]
 80084fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008506:	6999      	ldr	r1, [r3, #24]
 8008508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	ea40 0301 	orr.w	r3, r0, r1
 8008512:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	4b8f      	ldr	r3, [pc, #572]	; (8008758 <UART_SetConfig+0x2cc>)
 800851c:	429a      	cmp	r2, r3
 800851e:	d005      	beq.n	800852c <UART_SetConfig+0xa0>
 8008520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	4b8d      	ldr	r3, [pc, #564]	; (800875c <UART_SetConfig+0x2d0>)
 8008528:	429a      	cmp	r2, r3
 800852a:	d104      	bne.n	8008536 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800852c:	f7fe f85a 	bl	80065e4 <HAL_RCC_GetPCLK2Freq>
 8008530:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008534:	e003      	b.n	800853e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008536:	f7fe f841 	bl	80065bc <HAL_RCC_GetPCLK1Freq>
 800853a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800853e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008542:	69db      	ldr	r3, [r3, #28]
 8008544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008548:	f040 810c 	bne.w	8008764 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800854c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008550:	2200      	movs	r2, #0
 8008552:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008556:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800855a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800855e:	4622      	mov	r2, r4
 8008560:	462b      	mov	r3, r5
 8008562:	1891      	adds	r1, r2, r2
 8008564:	65b9      	str	r1, [r7, #88]	; 0x58
 8008566:	415b      	adcs	r3, r3
 8008568:	65fb      	str	r3, [r7, #92]	; 0x5c
 800856a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800856e:	4621      	mov	r1, r4
 8008570:	eb12 0801 	adds.w	r8, r2, r1
 8008574:	4629      	mov	r1, r5
 8008576:	eb43 0901 	adc.w	r9, r3, r1
 800857a:	f04f 0200 	mov.w	r2, #0
 800857e:	f04f 0300 	mov.w	r3, #0
 8008582:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008586:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800858a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800858e:	4690      	mov	r8, r2
 8008590:	4699      	mov	r9, r3
 8008592:	4623      	mov	r3, r4
 8008594:	eb18 0303 	adds.w	r3, r8, r3
 8008598:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800859c:	462b      	mov	r3, r5
 800859e:	eb49 0303 	adc.w	r3, r9, r3
 80085a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80085a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80085b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80085b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80085ba:	460b      	mov	r3, r1
 80085bc:	18db      	adds	r3, r3, r3
 80085be:	653b      	str	r3, [r7, #80]	; 0x50
 80085c0:	4613      	mov	r3, r2
 80085c2:	eb42 0303 	adc.w	r3, r2, r3
 80085c6:	657b      	str	r3, [r7, #84]	; 0x54
 80085c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80085cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80085d0:	f7f8 fafa 	bl	8000bc8 <__aeabi_uldivmod>
 80085d4:	4602      	mov	r2, r0
 80085d6:	460b      	mov	r3, r1
 80085d8:	4b61      	ldr	r3, [pc, #388]	; (8008760 <UART_SetConfig+0x2d4>)
 80085da:	fba3 2302 	umull	r2, r3, r3, r2
 80085de:	095b      	lsrs	r3, r3, #5
 80085e0:	011c      	lsls	r4, r3, #4
 80085e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085e6:	2200      	movs	r2, #0
 80085e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80085ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80085f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80085f4:	4642      	mov	r2, r8
 80085f6:	464b      	mov	r3, r9
 80085f8:	1891      	adds	r1, r2, r2
 80085fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80085fc:	415b      	adcs	r3, r3
 80085fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008600:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008604:	4641      	mov	r1, r8
 8008606:	eb12 0a01 	adds.w	sl, r2, r1
 800860a:	4649      	mov	r1, r9
 800860c:	eb43 0b01 	adc.w	fp, r3, r1
 8008610:	f04f 0200 	mov.w	r2, #0
 8008614:	f04f 0300 	mov.w	r3, #0
 8008618:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800861c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008620:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008624:	4692      	mov	sl, r2
 8008626:	469b      	mov	fp, r3
 8008628:	4643      	mov	r3, r8
 800862a:	eb1a 0303 	adds.w	r3, sl, r3
 800862e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008632:	464b      	mov	r3, r9
 8008634:	eb4b 0303 	adc.w	r3, fp, r3
 8008638:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800863c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008648:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800864c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008650:	460b      	mov	r3, r1
 8008652:	18db      	adds	r3, r3, r3
 8008654:	643b      	str	r3, [r7, #64]	; 0x40
 8008656:	4613      	mov	r3, r2
 8008658:	eb42 0303 	adc.w	r3, r2, r3
 800865c:	647b      	str	r3, [r7, #68]	; 0x44
 800865e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008662:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008666:	f7f8 faaf 	bl	8000bc8 <__aeabi_uldivmod>
 800866a:	4602      	mov	r2, r0
 800866c:	460b      	mov	r3, r1
 800866e:	4611      	mov	r1, r2
 8008670:	4b3b      	ldr	r3, [pc, #236]	; (8008760 <UART_SetConfig+0x2d4>)
 8008672:	fba3 2301 	umull	r2, r3, r3, r1
 8008676:	095b      	lsrs	r3, r3, #5
 8008678:	2264      	movs	r2, #100	; 0x64
 800867a:	fb02 f303 	mul.w	r3, r2, r3
 800867e:	1acb      	subs	r3, r1, r3
 8008680:	00db      	lsls	r3, r3, #3
 8008682:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008686:	4b36      	ldr	r3, [pc, #216]	; (8008760 <UART_SetConfig+0x2d4>)
 8008688:	fba3 2302 	umull	r2, r3, r3, r2
 800868c:	095b      	lsrs	r3, r3, #5
 800868e:	005b      	lsls	r3, r3, #1
 8008690:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008694:	441c      	add	r4, r3
 8008696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800869a:	2200      	movs	r2, #0
 800869c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80086a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80086a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80086a8:	4642      	mov	r2, r8
 80086aa:	464b      	mov	r3, r9
 80086ac:	1891      	adds	r1, r2, r2
 80086ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80086b0:	415b      	adcs	r3, r3
 80086b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80086b8:	4641      	mov	r1, r8
 80086ba:	1851      	adds	r1, r2, r1
 80086bc:	6339      	str	r1, [r7, #48]	; 0x30
 80086be:	4649      	mov	r1, r9
 80086c0:	414b      	adcs	r3, r1
 80086c2:	637b      	str	r3, [r7, #52]	; 0x34
 80086c4:	f04f 0200 	mov.w	r2, #0
 80086c8:	f04f 0300 	mov.w	r3, #0
 80086cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80086d0:	4659      	mov	r1, fp
 80086d2:	00cb      	lsls	r3, r1, #3
 80086d4:	4651      	mov	r1, sl
 80086d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086da:	4651      	mov	r1, sl
 80086dc:	00ca      	lsls	r2, r1, #3
 80086de:	4610      	mov	r0, r2
 80086e0:	4619      	mov	r1, r3
 80086e2:	4603      	mov	r3, r0
 80086e4:	4642      	mov	r2, r8
 80086e6:	189b      	adds	r3, r3, r2
 80086e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80086ec:	464b      	mov	r3, r9
 80086ee:	460a      	mov	r2, r1
 80086f0:	eb42 0303 	adc.w	r3, r2, r3
 80086f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80086f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008704:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008708:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800870c:	460b      	mov	r3, r1
 800870e:	18db      	adds	r3, r3, r3
 8008710:	62bb      	str	r3, [r7, #40]	; 0x28
 8008712:	4613      	mov	r3, r2
 8008714:	eb42 0303 	adc.w	r3, r2, r3
 8008718:	62fb      	str	r3, [r7, #44]	; 0x2c
 800871a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800871e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008722:	f7f8 fa51 	bl	8000bc8 <__aeabi_uldivmod>
 8008726:	4602      	mov	r2, r0
 8008728:	460b      	mov	r3, r1
 800872a:	4b0d      	ldr	r3, [pc, #52]	; (8008760 <UART_SetConfig+0x2d4>)
 800872c:	fba3 1302 	umull	r1, r3, r3, r2
 8008730:	095b      	lsrs	r3, r3, #5
 8008732:	2164      	movs	r1, #100	; 0x64
 8008734:	fb01 f303 	mul.w	r3, r1, r3
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	00db      	lsls	r3, r3, #3
 800873c:	3332      	adds	r3, #50	; 0x32
 800873e:	4a08      	ldr	r2, [pc, #32]	; (8008760 <UART_SetConfig+0x2d4>)
 8008740:	fba2 2303 	umull	r2, r3, r2, r3
 8008744:	095b      	lsrs	r3, r3, #5
 8008746:	f003 0207 	and.w	r2, r3, #7
 800874a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4422      	add	r2, r4
 8008752:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008754:	e105      	b.n	8008962 <UART_SetConfig+0x4d6>
 8008756:	bf00      	nop
 8008758:	40011000 	.word	0x40011000
 800875c:	40011400 	.word	0x40011400
 8008760:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008768:	2200      	movs	r2, #0
 800876a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800876e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008772:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008776:	4642      	mov	r2, r8
 8008778:	464b      	mov	r3, r9
 800877a:	1891      	adds	r1, r2, r2
 800877c:	6239      	str	r1, [r7, #32]
 800877e:	415b      	adcs	r3, r3
 8008780:	627b      	str	r3, [r7, #36]	; 0x24
 8008782:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008786:	4641      	mov	r1, r8
 8008788:	1854      	adds	r4, r2, r1
 800878a:	4649      	mov	r1, r9
 800878c:	eb43 0501 	adc.w	r5, r3, r1
 8008790:	f04f 0200 	mov.w	r2, #0
 8008794:	f04f 0300 	mov.w	r3, #0
 8008798:	00eb      	lsls	r3, r5, #3
 800879a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800879e:	00e2      	lsls	r2, r4, #3
 80087a0:	4614      	mov	r4, r2
 80087a2:	461d      	mov	r5, r3
 80087a4:	4643      	mov	r3, r8
 80087a6:	18e3      	adds	r3, r4, r3
 80087a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80087ac:	464b      	mov	r3, r9
 80087ae:	eb45 0303 	adc.w	r3, r5, r3
 80087b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80087b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80087c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80087c6:	f04f 0200 	mov.w	r2, #0
 80087ca:	f04f 0300 	mov.w	r3, #0
 80087ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80087d2:	4629      	mov	r1, r5
 80087d4:	008b      	lsls	r3, r1, #2
 80087d6:	4621      	mov	r1, r4
 80087d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087dc:	4621      	mov	r1, r4
 80087de:	008a      	lsls	r2, r1, #2
 80087e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80087e4:	f7f8 f9f0 	bl	8000bc8 <__aeabi_uldivmod>
 80087e8:	4602      	mov	r2, r0
 80087ea:	460b      	mov	r3, r1
 80087ec:	4b60      	ldr	r3, [pc, #384]	; (8008970 <UART_SetConfig+0x4e4>)
 80087ee:	fba3 2302 	umull	r2, r3, r3, r2
 80087f2:	095b      	lsrs	r3, r3, #5
 80087f4:	011c      	lsls	r4, r3, #4
 80087f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087fa:	2200      	movs	r2, #0
 80087fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008800:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008804:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008808:	4642      	mov	r2, r8
 800880a:	464b      	mov	r3, r9
 800880c:	1891      	adds	r1, r2, r2
 800880e:	61b9      	str	r1, [r7, #24]
 8008810:	415b      	adcs	r3, r3
 8008812:	61fb      	str	r3, [r7, #28]
 8008814:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008818:	4641      	mov	r1, r8
 800881a:	1851      	adds	r1, r2, r1
 800881c:	6139      	str	r1, [r7, #16]
 800881e:	4649      	mov	r1, r9
 8008820:	414b      	adcs	r3, r1
 8008822:	617b      	str	r3, [r7, #20]
 8008824:	f04f 0200 	mov.w	r2, #0
 8008828:	f04f 0300 	mov.w	r3, #0
 800882c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008830:	4659      	mov	r1, fp
 8008832:	00cb      	lsls	r3, r1, #3
 8008834:	4651      	mov	r1, sl
 8008836:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800883a:	4651      	mov	r1, sl
 800883c:	00ca      	lsls	r2, r1, #3
 800883e:	4610      	mov	r0, r2
 8008840:	4619      	mov	r1, r3
 8008842:	4603      	mov	r3, r0
 8008844:	4642      	mov	r2, r8
 8008846:	189b      	adds	r3, r3, r2
 8008848:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800884c:	464b      	mov	r3, r9
 800884e:	460a      	mov	r2, r1
 8008850:	eb42 0303 	adc.w	r3, r2, r3
 8008854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	67bb      	str	r3, [r7, #120]	; 0x78
 8008862:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008864:	f04f 0200 	mov.w	r2, #0
 8008868:	f04f 0300 	mov.w	r3, #0
 800886c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008870:	4649      	mov	r1, r9
 8008872:	008b      	lsls	r3, r1, #2
 8008874:	4641      	mov	r1, r8
 8008876:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800887a:	4641      	mov	r1, r8
 800887c:	008a      	lsls	r2, r1, #2
 800887e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008882:	f7f8 f9a1 	bl	8000bc8 <__aeabi_uldivmod>
 8008886:	4602      	mov	r2, r0
 8008888:	460b      	mov	r3, r1
 800888a:	4b39      	ldr	r3, [pc, #228]	; (8008970 <UART_SetConfig+0x4e4>)
 800888c:	fba3 1302 	umull	r1, r3, r3, r2
 8008890:	095b      	lsrs	r3, r3, #5
 8008892:	2164      	movs	r1, #100	; 0x64
 8008894:	fb01 f303 	mul.w	r3, r1, r3
 8008898:	1ad3      	subs	r3, r2, r3
 800889a:	011b      	lsls	r3, r3, #4
 800889c:	3332      	adds	r3, #50	; 0x32
 800889e:	4a34      	ldr	r2, [pc, #208]	; (8008970 <UART_SetConfig+0x4e4>)
 80088a0:	fba2 2303 	umull	r2, r3, r2, r3
 80088a4:	095b      	lsrs	r3, r3, #5
 80088a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80088aa:	441c      	add	r4, r3
 80088ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088b0:	2200      	movs	r2, #0
 80088b2:	673b      	str	r3, [r7, #112]	; 0x70
 80088b4:	677a      	str	r2, [r7, #116]	; 0x74
 80088b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80088ba:	4642      	mov	r2, r8
 80088bc:	464b      	mov	r3, r9
 80088be:	1891      	adds	r1, r2, r2
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	415b      	adcs	r3, r3
 80088c4:	60fb      	str	r3, [r7, #12]
 80088c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80088ca:	4641      	mov	r1, r8
 80088cc:	1851      	adds	r1, r2, r1
 80088ce:	6039      	str	r1, [r7, #0]
 80088d0:	4649      	mov	r1, r9
 80088d2:	414b      	adcs	r3, r1
 80088d4:	607b      	str	r3, [r7, #4]
 80088d6:	f04f 0200 	mov.w	r2, #0
 80088da:	f04f 0300 	mov.w	r3, #0
 80088de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80088e2:	4659      	mov	r1, fp
 80088e4:	00cb      	lsls	r3, r1, #3
 80088e6:	4651      	mov	r1, sl
 80088e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088ec:	4651      	mov	r1, sl
 80088ee:	00ca      	lsls	r2, r1, #3
 80088f0:	4610      	mov	r0, r2
 80088f2:	4619      	mov	r1, r3
 80088f4:	4603      	mov	r3, r0
 80088f6:	4642      	mov	r2, r8
 80088f8:	189b      	adds	r3, r3, r2
 80088fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80088fc:	464b      	mov	r3, r9
 80088fe:	460a      	mov	r2, r1
 8008900:	eb42 0303 	adc.w	r3, r2, r3
 8008904:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	663b      	str	r3, [r7, #96]	; 0x60
 8008910:	667a      	str	r2, [r7, #100]	; 0x64
 8008912:	f04f 0200 	mov.w	r2, #0
 8008916:	f04f 0300 	mov.w	r3, #0
 800891a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800891e:	4649      	mov	r1, r9
 8008920:	008b      	lsls	r3, r1, #2
 8008922:	4641      	mov	r1, r8
 8008924:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008928:	4641      	mov	r1, r8
 800892a:	008a      	lsls	r2, r1, #2
 800892c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008930:	f7f8 f94a 	bl	8000bc8 <__aeabi_uldivmod>
 8008934:	4602      	mov	r2, r0
 8008936:	460b      	mov	r3, r1
 8008938:	4b0d      	ldr	r3, [pc, #52]	; (8008970 <UART_SetConfig+0x4e4>)
 800893a:	fba3 1302 	umull	r1, r3, r3, r2
 800893e:	095b      	lsrs	r3, r3, #5
 8008940:	2164      	movs	r1, #100	; 0x64
 8008942:	fb01 f303 	mul.w	r3, r1, r3
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	011b      	lsls	r3, r3, #4
 800894a:	3332      	adds	r3, #50	; 0x32
 800894c:	4a08      	ldr	r2, [pc, #32]	; (8008970 <UART_SetConfig+0x4e4>)
 800894e:	fba2 2303 	umull	r2, r3, r2, r3
 8008952:	095b      	lsrs	r3, r3, #5
 8008954:	f003 020f 	and.w	r2, r3, #15
 8008958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4422      	add	r2, r4
 8008960:	609a      	str	r2, [r3, #8]
}
 8008962:	bf00      	nop
 8008964:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008968:	46bd      	mov	sp, r7
 800896a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800896e:	bf00      	nop
 8008970:	51eb851f 	.word	0x51eb851f

08008974 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008974:	b480      	push	{r7}
 8008976:	b085      	sub	sp, #20
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800897e:	2300      	movs	r3, #0
 8008980:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8008982:	2300      	movs	r3, #0
 8008984:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2b01      	cmp	r3, #1
 800898c:	d029      	beq.n	80089e2 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800899a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800899e:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80089a8:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80089ae:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80089b4:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80089ba:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80089c0:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80089c6:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80089cc:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80089d2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80089d4:	68fa      	ldr	r2, [r7, #12]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	68fa      	ldr	r2, [r7, #12]
 80089de:	601a      	str	r2, [r3, #0]
 80089e0:	e034      	b.n	8008a4c <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80089ee:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80089f8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80089fe:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008a00:	68fa      	ldr	r2, [r7, #12]
 8008a02:	4313      	orrs	r3, r2
 8008a04:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008a12:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008a16:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008a20:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8008a26:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8008a2c:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8008a32:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8008a38:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008a3a:	68ba      	ldr	r2, [r7, #8]
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	68fa      	ldr	r2, [r7, #12]
 8008a44:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	68ba      	ldr	r2, [r7, #8]
 8008a4a:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3714      	adds	r7, #20
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr

08008a5a <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008a5a:	b480      	push	{r7}
 8008a5c:	b087      	sub	sp, #28
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	60f8      	str	r0, [r7, #12]
 8008a62:	60b9      	str	r1, [r7, #8]
 8008a64:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8008a66:	2300      	movs	r3, #0
 8008a68:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d02e      	beq.n	8008ad2 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008a80:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	3b01      	subs	r3, #1
 8008a8e:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008a90:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	3b01      	subs	r3, #1
 8008a98:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008a9a:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	68db      	ldr	r3, [r3, #12]
 8008aa0:	3b01      	subs	r3, #1
 8008aa2:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008aa4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	691b      	ldr	r3, [r3, #16]
 8008aaa:	3b01      	subs	r3, #1
 8008aac:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008aae:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	695b      	ldr	r3, [r3, #20]
 8008ab4:	3b01      	subs	r3, #1
 8008ab6:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008ab8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	699b      	ldr	r3, [r3, #24]
 8008abe:	3b01      	subs	r3, #1
 8008ac0:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	697a      	ldr	r2, [r7, #20]
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	697a      	ldr	r2, [r7, #20]
 8008ace:	609a      	str	r2, [r3, #8]
 8008ad0:	e03b      	b.n	8008b4a <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008ade:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ae2:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	695b      	ldr	r3, [r3, #20]
 8008af0:	3b01      	subs	r3, #1
 8008af2:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008af4:	4313      	orrs	r3, r2
 8008af6:	697a      	ldr	r2, [r7, #20]
 8008af8:	4313      	orrs	r3, r2
 8008afa:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	68db      	ldr	r3, [r3, #12]
 8008b00:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008b08:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	3b01      	subs	r3, #1
 8008b16:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008b18:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	3b01      	subs	r3, #1
 8008b20:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008b22:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	691b      	ldr	r3, [r3, #16]
 8008b28:	3b01      	subs	r3, #1
 8008b2a:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008b2c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	699b      	ldr	r3, [r3, #24]
 8008b32:	3b01      	subs	r3, #1
 8008b34:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008b36:	4313      	orrs	r3, r2
 8008b38:	693a      	ldr	r2, [r7, #16]
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	697a      	ldr	r2, [r7, #20]
 8008b42:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	693a      	ldr	r2, [r7, #16]
 8008b48:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	371c      	adds	r7, #28
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b086      	sub	sp, #24
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	60b9      	str	r1, [r7, #8]
 8008b62:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8008b64:	2300      	movs	r3, #0
 8008b66:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008b74:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8008b7e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008b86:	4313      	orrs	r3, r2
 8008b88:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8008b8a:	693a      	ldr	r2, [r7, #16]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8008b90:	f7f9 fee8 	bl	8002964 <HAL_GetTick>
 8008b94:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008b96:	e010      	b.n	8008bba <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b9e:	d00c      	beq.n	8008bba <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d007      	beq.n	8008bb6 <FMC_SDRAM_SendCommand+0x5e>
 8008ba6:	f7f9 fedd 	bl	8002964 <HAL_GetTick>
 8008baa:	4602      	mov	r2, r0
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	1ad3      	subs	r3, r2, r3
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d201      	bcs.n	8008bba <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8008bb6:	2303      	movs	r3, #3
 8008bb8:	e006      	b.n	8008bc8 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	699b      	ldr	r3, [r3, #24]
 8008bbe:	f003 0320 	and.w	r3, r3, #32
 8008bc2:	2b20      	cmp	r3, #32
 8008bc4:	d0e8      	beq.n	8008b98 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3718      	adds	r7, #24
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	695a      	ldr	r2, [r3, #20]
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	005b      	lsls	r3, r3, #1
 8008be2:	431a      	orrs	r2, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	370c      	adds	r7, #12
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr

08008bf6 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	f107 001c 	add.w	r0, r7, #28
 8008c04:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008c0c:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008c0e:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008c10:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8008c14:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008c18:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008c1c:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008c20:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008c22:	68fa      	ldr	r2, [r7, #12]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008c30:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008c34:	68fa      	ldr	r2, [r7, #12]
 8008c36:	431a      	orrs	r2, r3
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3714      	adds	r7, #20
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	b004      	add	sp, #16
 8008c4a:	4770      	bx	lr

08008c4c <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	370c      	adds	r7, #12
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr

08008c66 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008c66:	b480      	push	{r7}
 8008c68:	b083      	sub	sp, #12
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
 8008c6e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c7a:	2300      	movs	r3, #0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2203      	movs	r2, #3
 8008c94:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008c96:	2002      	movs	r0, #2
 8008c98:	f7f9 fe70 	bl	800297c <HAL_Delay>
  
  return HAL_OK;
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3708      	adds	r7, #8
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8008ca6:	b480      	push	{r7}
 8008ca8:	b083      	sub	sp, #12
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f003 0303 	and.w	r3, r3, #3
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	370c      	adds	r7, #12
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr

08008cc2 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008cc2:	b480      	push	{r7}
 8008cc4:	b085      	sub	sp, #20
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
 8008cca:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008ce0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008ce6:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008cec:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008cee:	68fa      	ldr	r2, [r7, #12]
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008cfc:	f023 030f 	bic.w	r3, r3, #15
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	431a      	orrs	r2, r3
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3714      	adds	r7, #20
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr

08008d16 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008d16:	b480      	push	{r7}
 8008d18:	b083      	sub	sp, #12
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	691b      	ldr	r3, [r3, #16]
 8008d22:	b2db      	uxtb	r3, r3
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	370c      	adds	r7, #12
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b085      	sub	sp, #20
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	3314      	adds	r3, #20
 8008d3e:	461a      	mov	r2, r3
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	4413      	add	r3, r2
 8008d44:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
}  
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3714      	adds	r7, #20
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr

08008d56 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008d56:	b480      	push	{r7}
 8008d58:	b085      	sub	sp, #20
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
 8008d5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008d60:	2300      	movs	r3, #0
 8008d62:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	685a      	ldr	r2, [r3, #4]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d7c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008d82:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008d88:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d8a:	68fa      	ldr	r2, [r7, #12]
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d94:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	431a      	orrs	r2, r3
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008da0:	2300      	movs	r3, #0

}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3714      	adds	r7, #20
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr

08008dae <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b088      	sub	sp, #32
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
 8008db6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008dbc:	2310      	movs	r3, #16
 8008dbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008dc0:	2340      	movs	r3, #64	; 0x40
 8008dc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008dc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dcc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008dce:	f107 0308 	add.w	r3, r7, #8
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f7ff ff74 	bl	8008cc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dde:	2110      	movs	r1, #16
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 fa45 	bl	8009270 <SDMMC_GetCmdResp1>
 8008de6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008de8:	69fb      	ldr	r3, [r7, #28]
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3720      	adds	r7, #32
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b088      	sub	sp, #32
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
 8008dfa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008e00:	2311      	movs	r3, #17
 8008e02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e04:	2340      	movs	r3, #64	; 0x40
 8008e06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e10:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e12:	f107 0308 	add.w	r3, r7, #8
 8008e16:	4619      	mov	r1, r3
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f7ff ff52 	bl	8008cc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e22:	2111      	movs	r1, #17
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 fa23 	bl	8009270 <SDMMC_GetCmdResp1>
 8008e2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e2c:	69fb      	ldr	r3, [r7, #28]
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3720      	adds	r7, #32
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b088      	sub	sp, #32
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
 8008e3e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008e44:	2312      	movs	r3, #18
 8008e46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e48:	2340      	movs	r3, #64	; 0x40
 8008e4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e54:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e56:	f107 0308 	add.w	r3, r7, #8
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f7ff ff30 	bl	8008cc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e66:	2112      	movs	r1, #18
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fa01 	bl	8009270 <SDMMC_GetCmdResp1>
 8008e6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e70:	69fb      	ldr	r3, [r7, #28]
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3720      	adds	r7, #32
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b088      	sub	sp, #32
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
 8008e82:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008e88:	2318      	movs	r3, #24
 8008e8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e8c:	2340      	movs	r3, #64	; 0x40
 8008e8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e90:	2300      	movs	r3, #0
 8008e92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e98:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e9a:	f107 0308 	add.w	r3, r7, #8
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f7ff ff0e 	bl	8008cc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eaa:	2118      	movs	r1, #24
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 f9df 	bl	8009270 <SDMMC_GetCmdResp1>
 8008eb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008eb4:	69fb      	ldr	r3, [r7, #28]
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3720      	adds	r7, #32
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}

08008ebe <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	b088      	sub	sp, #32
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
 8008ec6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008ecc:	2319      	movs	r3, #25
 8008ece:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008ed0:	2340      	movs	r3, #64	; 0x40
 8008ed2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008edc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ede:	f107 0308 	add.w	r3, r7, #8
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f7ff feec 	bl	8008cc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eee:	2119      	movs	r1, #25
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 f9bd 	bl	8009270 <SDMMC_GetCmdResp1>
 8008ef6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ef8:	69fb      	ldr	r3, [r7, #28]
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3720      	adds	r7, #32
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
	...

08008f04 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b088      	sub	sp, #32
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008f10:	230c      	movs	r3, #12
 8008f12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008f14:	2340      	movs	r3, #64	; 0x40
 8008f16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f20:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f22:	f107 0308 	add.w	r3, r7, #8
 8008f26:	4619      	mov	r1, r3
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f7ff feca 	bl	8008cc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8008f2e:	4a05      	ldr	r2, [pc, #20]	; (8008f44 <SDMMC_CmdStopTransfer+0x40>)
 8008f30:	210c      	movs	r1, #12
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 f99c 	bl	8009270 <SDMMC_GetCmdResp1>
 8008f38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f3a:	69fb      	ldr	r3, [r7, #28]
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3720      	adds	r7, #32
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}
 8008f44:	05f5e100 	.word	0x05f5e100

08008f48 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b08a      	sub	sp, #40	; 0x28
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008f58:	2307      	movs	r3, #7
 8008f5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008f5c:	2340      	movs	r3, #64	; 0x40
 8008f5e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f60:	2300      	movs	r3, #0
 8008f62:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f68:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f6a:	f107 0310 	add.w	r3, r7, #16
 8008f6e:	4619      	mov	r1, r3
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f7ff fea6 	bl	8008cc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f7a:	2107      	movs	r1, #7
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f000 f977 	bl	8009270 <SDMMC_GetCmdResp1>
 8008f82:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3728      	adds	r7, #40	; 0x28
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b088      	sub	sp, #32
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008f96:	2300      	movs	r3, #0
 8008f98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008fa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008faa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008fac:	f107 0308 	add.w	r3, r7, #8
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f7ff fe85 	bl	8008cc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 f92d 	bl	8009218 <SDMMC_GetCmdError>
 8008fbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fc0:	69fb      	ldr	r3, [r7, #28]
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3720      	adds	r7, #32
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}

08008fca <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	b088      	sub	sp, #32
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008fd2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008fd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008fd8:	2308      	movs	r3, #8
 8008fda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008fdc:	2340      	movs	r3, #64	; 0x40
 8008fde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008fe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fe8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008fea:	f107 0308 	add.w	r3, r7, #8
 8008fee:	4619      	mov	r1, r3
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f7ff fe66 	bl	8008cc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 fb24 	bl	8009644 <SDMMC_GetCmdResp7>
 8008ffc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ffe:	69fb      	ldr	r3, [r7, #28]
}
 8009000:	4618      	mov	r0, r3
 8009002:	3720      	adds	r7, #32
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b088      	sub	sp, #32
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009016:	2337      	movs	r3, #55	; 0x37
 8009018:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800901a:	2340      	movs	r3, #64	; 0x40
 800901c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800901e:	2300      	movs	r3, #0
 8009020:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009022:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009026:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009028:	f107 0308 	add.w	r3, r7, #8
 800902c:	4619      	mov	r1, r3
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f7ff fe47 	bl	8008cc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009034:	f241 3288 	movw	r2, #5000	; 0x1388
 8009038:	2137      	movs	r1, #55	; 0x37
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 f918 	bl	8009270 <SDMMC_GetCmdResp1>
 8009040:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009042:	69fb      	ldr	r3, [r7, #28]
}
 8009044:	4618      	mov	r0, r3
 8009046:	3720      	adds	r7, #32
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b088      	sub	sp, #32
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800905c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009060:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009062:	2329      	movs	r3, #41	; 0x29
 8009064:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009066:	2340      	movs	r3, #64	; 0x40
 8009068:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800906a:	2300      	movs	r3, #0
 800906c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800906e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009072:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009074:	f107 0308 	add.w	r3, r7, #8
 8009078:	4619      	mov	r1, r3
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f7ff fe21 	bl	8008cc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 fa2b 	bl	80094dc <SDMMC_GetCmdResp3>
 8009086:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009088:	69fb      	ldr	r3, [r7, #28]
}
 800908a:	4618      	mov	r0, r3
 800908c:	3720      	adds	r7, #32
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8009092:	b580      	push	{r7, lr}
 8009094:	b088      	sub	sp, #32
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
 800909a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80090a0:	2306      	movs	r3, #6
 80090a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80090a4:	2340      	movs	r3, #64	; 0x40
 80090a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80090a8:	2300      	movs	r3, #0
 80090aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80090ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80090b2:	f107 0308 	add.w	r3, r7, #8
 80090b6:	4619      	mov	r1, r3
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f7ff fe02 	bl	8008cc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80090be:	f241 3288 	movw	r2, #5000	; 0x1388
 80090c2:	2106      	movs	r1, #6
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 f8d3 	bl	8009270 <SDMMC_GetCmdResp1>
 80090ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090cc:	69fb      	ldr	r3, [r7, #28]
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3720      	adds	r7, #32
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}

080090d6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b088      	sub	sp, #32
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80090de:	2300      	movs	r3, #0
 80090e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80090e2:	2333      	movs	r3, #51	; 0x33
 80090e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80090e6:	2340      	movs	r3, #64	; 0x40
 80090e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80090ea:	2300      	movs	r3, #0
 80090ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80090ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80090f4:	f107 0308 	add.w	r3, r7, #8
 80090f8:	4619      	mov	r1, r3
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f7ff fde1 	bl	8008cc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009100:	f241 3288 	movw	r2, #5000	; 0x1388
 8009104:	2133      	movs	r1, #51	; 0x33
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 f8b2 	bl	8009270 <SDMMC_GetCmdResp1>
 800910c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800910e:	69fb      	ldr	r3, [r7, #28]
}
 8009110:	4618      	mov	r0, r3
 8009112:	3720      	adds	r7, #32
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b088      	sub	sp, #32
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009120:	2300      	movs	r3, #0
 8009122:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009124:	2302      	movs	r3, #2
 8009126:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009128:	23c0      	movs	r3, #192	; 0xc0
 800912a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800912c:	2300      	movs	r3, #0
 800912e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009130:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009134:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009136:	f107 0308 	add.w	r3, r7, #8
 800913a:	4619      	mov	r1, r3
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f7ff fdc0 	bl	8008cc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 f982 	bl	800944c <SDMMC_GetCmdResp2>
 8009148:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800914a:	69fb      	ldr	r3, [r7, #28]
}
 800914c:	4618      	mov	r0, r3
 800914e:	3720      	adds	r7, #32
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b088      	sub	sp, #32
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009162:	2309      	movs	r3, #9
 8009164:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009166:	23c0      	movs	r3, #192	; 0xc0
 8009168:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800916a:	2300      	movs	r3, #0
 800916c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800916e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009172:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009174:	f107 0308 	add.w	r3, r7, #8
 8009178:	4619      	mov	r1, r3
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f7ff fda1 	bl	8008cc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 f963 	bl	800944c <SDMMC_GetCmdResp2>
 8009186:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009188:	69fb      	ldr	r3, [r7, #28]
}
 800918a:	4618      	mov	r0, r3
 800918c:	3720      	adds	r7, #32
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}

08009192 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009192:	b580      	push	{r7, lr}
 8009194:	b088      	sub	sp, #32
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
 800919a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800919c:	2300      	movs	r3, #0
 800919e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80091a0:	2303      	movs	r3, #3
 80091a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80091a4:	2340      	movs	r3, #64	; 0x40
 80091a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80091a8:	2300      	movs	r3, #0
 80091aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80091ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80091b2:	f107 0308 	add.w	r3, r7, #8
 80091b6:	4619      	mov	r1, r3
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f7ff fd82 	bl	8008cc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80091be:	683a      	ldr	r2, [r7, #0]
 80091c0:	2103      	movs	r1, #3
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 f9c8 	bl	8009558 <SDMMC_GetCmdResp6>
 80091c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091ca:	69fb      	ldr	r3, [r7, #28]
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3720      	adds	r7, #32
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b088      	sub	sp, #32
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80091e2:	230d      	movs	r3, #13
 80091e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80091e6:	2340      	movs	r3, #64	; 0x40
 80091e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80091ea:	2300      	movs	r3, #0
 80091ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80091ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80091f4:	f107 0308 	add.w	r3, r7, #8
 80091f8:	4619      	mov	r1, r3
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f7ff fd61 	bl	8008cc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009200:	f241 3288 	movw	r2, #5000	; 0x1388
 8009204:	210d      	movs	r1, #13
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 f832 	bl	8009270 <SDMMC_GetCmdResp1>
 800920c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800920e:	69fb      	ldr	r3, [r7, #28]
}
 8009210:	4618      	mov	r0, r3
 8009212:	3720      	adds	r7, #32
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009218:	b480      	push	{r7}
 800921a:	b085      	sub	sp, #20
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009220:	4b11      	ldr	r3, [pc, #68]	; (8009268 <SDMMC_GetCmdError+0x50>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a11      	ldr	r2, [pc, #68]	; (800926c <SDMMC_GetCmdError+0x54>)
 8009226:	fba2 2303 	umull	r2, r3, r2, r3
 800922a:	0a5b      	lsrs	r3, r3, #9
 800922c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009230:	fb02 f303 	mul.w	r3, r2, r3
 8009234:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	1e5a      	subs	r2, r3, #1
 800923a:	60fa      	str	r2, [r7, #12]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d102      	bne.n	8009246 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009240:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009244:	e009      	b.n	800925a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800924a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800924e:	2b00      	cmp	r3, #0
 8009250:	d0f1      	beq.n	8009236 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	22c5      	movs	r2, #197	; 0xc5
 8009256:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009258:	2300      	movs	r3, #0
}
 800925a:	4618      	mov	r0, r3
 800925c:	3714      	adds	r7, #20
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop
 8009268:	20000000 	.word	0x20000000
 800926c:	10624dd3 	.word	0x10624dd3

08009270 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b088      	sub	sp, #32
 8009274:	af00      	add	r7, sp, #0
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	460b      	mov	r3, r1
 800927a:	607a      	str	r2, [r7, #4]
 800927c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800927e:	4b70      	ldr	r3, [pc, #448]	; (8009440 <SDMMC_GetCmdResp1+0x1d0>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a70      	ldr	r2, [pc, #448]	; (8009444 <SDMMC_GetCmdResp1+0x1d4>)
 8009284:	fba2 2303 	umull	r2, r3, r2, r3
 8009288:	0a5a      	lsrs	r2, r3, #9
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	fb02 f303 	mul.w	r3, r2, r3
 8009290:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	1e5a      	subs	r2, r3, #1
 8009296:	61fa      	str	r2, [r7, #28]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d102      	bne.n	80092a2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800929c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092a0:	e0c9      	b.n	8009436 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d0ef      	beq.n	8009292 <SDMMC_GetCmdResp1+0x22>
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d1ea      	bne.n	8009292 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092c0:	f003 0304 	and.w	r3, r3, #4
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d004      	beq.n	80092d2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2204      	movs	r2, #4
 80092cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80092ce:	2304      	movs	r3, #4
 80092d0:	e0b1      	b.n	8009436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092d6:	f003 0301 	and.w	r3, r3, #1
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d004      	beq.n	80092e8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2201      	movs	r2, #1
 80092e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80092e4:	2301      	movs	r3, #1
 80092e6:	e0a6      	b.n	8009436 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	22c5      	movs	r2, #197	; 0xc5
 80092ec:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80092ee:	68f8      	ldr	r0, [r7, #12]
 80092f0:	f7ff fd11 	bl	8008d16 <SDIO_GetCommandResponse>
 80092f4:	4603      	mov	r3, r0
 80092f6:	461a      	mov	r2, r3
 80092f8:	7afb      	ldrb	r3, [r7, #11]
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d001      	beq.n	8009302 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80092fe:	2301      	movs	r3, #1
 8009300:	e099      	b.n	8009436 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009302:	2100      	movs	r1, #0
 8009304:	68f8      	ldr	r0, [r7, #12]
 8009306:	f7ff fd13 	bl	8008d30 <SDIO_GetResponse>
 800930a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800930c:	697a      	ldr	r2, [r7, #20]
 800930e:	4b4e      	ldr	r3, [pc, #312]	; (8009448 <SDMMC_GetCmdResp1+0x1d8>)
 8009310:	4013      	ands	r3, r2
 8009312:	2b00      	cmp	r3, #0
 8009314:	d101      	bne.n	800931a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009316:	2300      	movs	r3, #0
 8009318:	e08d      	b.n	8009436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	2b00      	cmp	r3, #0
 800931e:	da02      	bge.n	8009326 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009320:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009324:	e087      	b.n	8009436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800932c:	2b00      	cmp	r3, #0
 800932e:	d001      	beq.n	8009334 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009330:	2340      	movs	r3, #64	; 0x40
 8009332:	e080      	b.n	8009436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800933a:	2b00      	cmp	r3, #0
 800933c:	d001      	beq.n	8009342 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800933e:	2380      	movs	r3, #128	; 0x80
 8009340:	e079      	b.n	8009436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009348:	2b00      	cmp	r3, #0
 800934a:	d002      	beq.n	8009352 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800934c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009350:	e071      	b.n	8009436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009358:	2b00      	cmp	r3, #0
 800935a:	d002      	beq.n	8009362 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800935c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009360:	e069      	b.n	8009436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009368:	2b00      	cmp	r3, #0
 800936a:	d002      	beq.n	8009372 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800936c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009370:	e061      	b.n	8009436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009378:	2b00      	cmp	r3, #0
 800937a:	d002      	beq.n	8009382 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800937c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009380:	e059      	b.n	8009436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009388:	2b00      	cmp	r3, #0
 800938a:	d002      	beq.n	8009392 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800938c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009390:	e051      	b.n	8009436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009398:	2b00      	cmp	r3, #0
 800939a:	d002      	beq.n	80093a2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800939c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80093a0:	e049      	b.n	8009436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d002      	beq.n	80093b2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80093ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80093b0:	e041      	b.n	8009436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d002      	beq.n	80093c2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80093bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093c0:	e039      	b.n	8009436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d002      	beq.n	80093d2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80093cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80093d0:	e031      	b.n	8009436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d002      	beq.n	80093e2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80093dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80093e0:	e029      	b.n	8009436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d002      	beq.n	80093f2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80093ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80093f0:	e021      	b.n	8009436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d002      	beq.n	8009402 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80093fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009400:	e019      	b.n	8009436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009408:	2b00      	cmp	r3, #0
 800940a:	d002      	beq.n	8009412 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800940c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009410:	e011      	b.n	8009436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009418:	2b00      	cmp	r3, #0
 800941a:	d002      	beq.n	8009422 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800941c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009420:	e009      	b.n	8009436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	f003 0308 	and.w	r3, r3, #8
 8009428:	2b00      	cmp	r3, #0
 800942a:	d002      	beq.n	8009432 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800942c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009430:	e001      	b.n	8009436 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009432:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009436:	4618      	mov	r0, r3
 8009438:	3720      	adds	r7, #32
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	20000000 	.word	0x20000000
 8009444:	10624dd3 	.word	0x10624dd3
 8009448:	fdffe008 	.word	0xfdffe008

0800944c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800944c:	b480      	push	{r7}
 800944e:	b085      	sub	sp, #20
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009454:	4b1f      	ldr	r3, [pc, #124]	; (80094d4 <SDMMC_GetCmdResp2+0x88>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a1f      	ldr	r2, [pc, #124]	; (80094d8 <SDMMC_GetCmdResp2+0x8c>)
 800945a:	fba2 2303 	umull	r2, r3, r2, r3
 800945e:	0a5b      	lsrs	r3, r3, #9
 8009460:	f241 3288 	movw	r2, #5000	; 0x1388
 8009464:	fb02 f303 	mul.w	r3, r2, r3
 8009468:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	1e5a      	subs	r2, r3, #1
 800946e:	60fa      	str	r2, [r7, #12]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d102      	bne.n	800947a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009474:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009478:	e026      	b.n	80094c8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800947e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009486:	2b00      	cmp	r3, #0
 8009488:	d0ef      	beq.n	800946a <SDMMC_GetCmdResp2+0x1e>
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009490:	2b00      	cmp	r3, #0
 8009492:	d1ea      	bne.n	800946a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009498:	f003 0304 	and.w	r3, r3, #4
 800949c:	2b00      	cmp	r3, #0
 800949e:	d004      	beq.n	80094aa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2204      	movs	r2, #4
 80094a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80094a6:	2304      	movs	r3, #4
 80094a8:	e00e      	b.n	80094c8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ae:	f003 0301 	and.w	r3, r3, #1
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d004      	beq.n	80094c0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2201      	movs	r2, #1
 80094ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80094bc:	2301      	movs	r3, #1
 80094be:	e003      	b.n	80094c8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	22c5      	movs	r2, #197	; 0xc5
 80094c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80094c6:	2300      	movs	r3, #0
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3714      	adds	r7, #20
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr
 80094d4:	20000000 	.word	0x20000000
 80094d8:	10624dd3 	.word	0x10624dd3

080094dc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80094dc:	b480      	push	{r7}
 80094de:	b085      	sub	sp, #20
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80094e4:	4b1a      	ldr	r3, [pc, #104]	; (8009550 <SDMMC_GetCmdResp3+0x74>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4a1a      	ldr	r2, [pc, #104]	; (8009554 <SDMMC_GetCmdResp3+0x78>)
 80094ea:	fba2 2303 	umull	r2, r3, r2, r3
 80094ee:	0a5b      	lsrs	r3, r3, #9
 80094f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80094f4:	fb02 f303 	mul.w	r3, r2, r3
 80094f8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	1e5a      	subs	r2, r3, #1
 80094fe:	60fa      	str	r2, [r7, #12]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d102      	bne.n	800950a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009504:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009508:	e01b      	b.n	8009542 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800950e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009516:	2b00      	cmp	r3, #0
 8009518:	d0ef      	beq.n	80094fa <SDMMC_GetCmdResp3+0x1e>
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009520:	2b00      	cmp	r3, #0
 8009522:	d1ea      	bne.n	80094fa <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009528:	f003 0304 	and.w	r3, r3, #4
 800952c:	2b00      	cmp	r3, #0
 800952e:	d004      	beq.n	800953a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2204      	movs	r2, #4
 8009534:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009536:	2304      	movs	r3, #4
 8009538:	e003      	b.n	8009542 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	22c5      	movs	r2, #197	; 0xc5
 800953e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3714      	adds	r7, #20
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr
 800954e:	bf00      	nop
 8009550:	20000000 	.word	0x20000000
 8009554:	10624dd3 	.word	0x10624dd3

08009558 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b088      	sub	sp, #32
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	460b      	mov	r3, r1
 8009562:	607a      	str	r2, [r7, #4]
 8009564:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009566:	4b35      	ldr	r3, [pc, #212]	; (800963c <SDMMC_GetCmdResp6+0xe4>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a35      	ldr	r2, [pc, #212]	; (8009640 <SDMMC_GetCmdResp6+0xe8>)
 800956c:	fba2 2303 	umull	r2, r3, r2, r3
 8009570:	0a5b      	lsrs	r3, r3, #9
 8009572:	f241 3288 	movw	r2, #5000	; 0x1388
 8009576:	fb02 f303 	mul.w	r3, r2, r3
 800957a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800957c:	69fb      	ldr	r3, [r7, #28]
 800957e:	1e5a      	subs	r2, r3, #1
 8009580:	61fa      	str	r2, [r7, #28]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d102      	bne.n	800958c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009586:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800958a:	e052      	b.n	8009632 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009590:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009592:	69bb      	ldr	r3, [r7, #24]
 8009594:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009598:	2b00      	cmp	r3, #0
 800959a:	d0ef      	beq.n	800957c <SDMMC_GetCmdResp6+0x24>
 800959c:	69bb      	ldr	r3, [r7, #24]
 800959e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d1ea      	bne.n	800957c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095aa:	f003 0304 	and.w	r3, r3, #4
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d004      	beq.n	80095bc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2204      	movs	r2, #4
 80095b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80095b8:	2304      	movs	r3, #4
 80095ba:	e03a      	b.n	8009632 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095c0:	f003 0301 	and.w	r3, r3, #1
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d004      	beq.n	80095d2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2201      	movs	r2, #1
 80095cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80095ce:	2301      	movs	r3, #1
 80095d0:	e02f      	b.n	8009632 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80095d2:	68f8      	ldr	r0, [r7, #12]
 80095d4:	f7ff fb9f 	bl	8008d16 <SDIO_GetCommandResponse>
 80095d8:	4603      	mov	r3, r0
 80095da:	461a      	mov	r2, r3
 80095dc:	7afb      	ldrb	r3, [r7, #11]
 80095de:	4293      	cmp	r3, r2
 80095e0:	d001      	beq.n	80095e6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80095e2:	2301      	movs	r3, #1
 80095e4:	e025      	b.n	8009632 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	22c5      	movs	r2, #197	; 0xc5
 80095ea:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80095ec:	2100      	movs	r1, #0
 80095ee:	68f8      	ldr	r0, [r7, #12]
 80095f0:	f7ff fb9e 	bl	8008d30 <SDIO_GetResponse>
 80095f4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d106      	bne.n	800960e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	0c1b      	lsrs	r3, r3, #16
 8009604:	b29a      	uxth	r2, r3
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800960a:	2300      	movs	r3, #0
 800960c:	e011      	b.n	8009632 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009614:	2b00      	cmp	r3, #0
 8009616:	d002      	beq.n	800961e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009618:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800961c:	e009      	b.n	8009632 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009624:	2b00      	cmp	r3, #0
 8009626:	d002      	beq.n	800962e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800962c:	e001      	b.n	8009632 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800962e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009632:	4618      	mov	r0, r3
 8009634:	3720      	adds	r7, #32
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	20000000 	.word	0x20000000
 8009640:	10624dd3 	.word	0x10624dd3

08009644 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009644:	b480      	push	{r7}
 8009646:	b085      	sub	sp, #20
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800964c:	4b22      	ldr	r3, [pc, #136]	; (80096d8 <SDMMC_GetCmdResp7+0x94>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a22      	ldr	r2, [pc, #136]	; (80096dc <SDMMC_GetCmdResp7+0x98>)
 8009652:	fba2 2303 	umull	r2, r3, r2, r3
 8009656:	0a5b      	lsrs	r3, r3, #9
 8009658:	f241 3288 	movw	r2, #5000	; 0x1388
 800965c:	fb02 f303 	mul.w	r3, r2, r3
 8009660:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	1e5a      	subs	r2, r3, #1
 8009666:	60fa      	str	r2, [r7, #12]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d102      	bne.n	8009672 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800966c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009670:	e02c      	b.n	80096cc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009676:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800967e:	2b00      	cmp	r3, #0
 8009680:	d0ef      	beq.n	8009662 <SDMMC_GetCmdResp7+0x1e>
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009688:	2b00      	cmp	r3, #0
 800968a:	d1ea      	bne.n	8009662 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009690:	f003 0304 	and.w	r3, r3, #4
 8009694:	2b00      	cmp	r3, #0
 8009696:	d004      	beq.n	80096a2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2204      	movs	r2, #4
 800969c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800969e:	2304      	movs	r3, #4
 80096a0:	e014      	b.n	80096cc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096a6:	f003 0301 	and.w	r3, r3, #1
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d004      	beq.n	80096b8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2201      	movs	r2, #1
 80096b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80096b4:	2301      	movs	r3, #1
 80096b6:	e009      	b.n	80096cc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d002      	beq.n	80096ca <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2240      	movs	r2, #64	; 0x40
 80096c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80096ca:	2300      	movs	r3, #0
  
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3714      	adds	r7, #20
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr
 80096d8:	20000000 	.word	0x20000000
 80096dc:	10624dd3 	.word	0x10624dd3

080096e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80096e4:	4904      	ldr	r1, [pc, #16]	; (80096f8 <MX_FATFS_Init+0x18>)
 80096e6:	4805      	ldr	r0, [pc, #20]	; (80096fc <MX_FATFS_Init+0x1c>)
 80096e8:	f004 fc1a 	bl	800df20 <FATFS_LinkDriver>
 80096ec:	4603      	mov	r3, r0
 80096ee:	461a      	mov	r2, r3
 80096f0:	4b03      	ldr	r3, [pc, #12]	; (8009700 <MX_FATFS_Init+0x20>)
 80096f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80096f4:	bf00      	nop
 80096f6:	bd80      	pop	{r7, pc}
 80096f8:	20000d0c 	.word	0x20000d0c
 80096fc:	08044930 	.word	0x08044930
 8009700:	20000d08 	.word	0x20000d08

08009704 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009704:	b480      	push	{r7}
 8009706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009708:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800970a:	4618      	mov	r0, r3
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800971a:	2300      	movs	r3, #0
 800971c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800971e:	f000 f896 	bl	800984e <BSP_SD_IsDetected>
 8009722:	4603      	mov	r3, r0
 8009724:	2b01      	cmp	r3, #1
 8009726:	d001      	beq.n	800972c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009728:	2301      	movs	r3, #1
 800972a:	e012      	b.n	8009752 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800972c:	480b      	ldr	r0, [pc, #44]	; (800975c <BSP_SD_Init+0x48>)
 800972e:	f7fd f957 	bl	80069e0 <HAL_SD_Init>
 8009732:	4603      	mov	r3, r0
 8009734:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009736:	79fb      	ldrb	r3, [r7, #7]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d109      	bne.n	8009750 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800973c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009740:	4806      	ldr	r0, [pc, #24]	; (800975c <BSP_SD_Init+0x48>)
 8009742:	f7fd ff7b 	bl	800763c <HAL_SD_ConfigWideBusOperation>
 8009746:	4603      	mov	r3, r0
 8009748:	2b00      	cmp	r3, #0
 800974a:	d001      	beq.n	8009750 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800974c:	2301      	movs	r3, #1
 800974e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009750:	79fb      	ldrb	r3, [r7, #7]
}
 8009752:	4618      	mov	r0, r3
 8009754:	3708      	adds	r7, #8
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	20000b78 	.word	0x20000b78

08009760 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b086      	sub	sp, #24
 8009764:	af00      	add	r7, sp, #0
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	60b9      	str	r1, [r7, #8]
 800976a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800976c:	2300      	movs	r3, #0
 800976e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	68ba      	ldr	r2, [r7, #8]
 8009774:	68f9      	ldr	r1, [r7, #12]
 8009776:	4806      	ldr	r0, [pc, #24]	; (8009790 <BSP_SD_ReadBlocks_DMA+0x30>)
 8009778:	f7fd f9e0 	bl	8006b3c <HAL_SD_ReadBlocks_DMA>
 800977c:	4603      	mov	r3, r0
 800977e:	2b00      	cmp	r3, #0
 8009780:	d001      	beq.n	8009786 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009782:	2301      	movs	r3, #1
 8009784:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009786:	7dfb      	ldrb	r3, [r7, #23]
}
 8009788:	4618      	mov	r0, r3
 800978a:	3718      	adds	r7, #24
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}
 8009790:	20000b78 	.word	0x20000b78

08009794 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b086      	sub	sp, #24
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80097a0:	2300      	movs	r3, #0
 80097a2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	68ba      	ldr	r2, [r7, #8]
 80097a8:	68f9      	ldr	r1, [r7, #12]
 80097aa:	4806      	ldr	r0, [pc, #24]	; (80097c4 <BSP_SD_WriteBlocks_DMA+0x30>)
 80097ac:	f7fd faa8 	bl	8006d00 <HAL_SD_WriteBlocks_DMA>
 80097b0:	4603      	mov	r3, r0
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d001      	beq.n	80097ba <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80097b6:	2301      	movs	r3, #1
 80097b8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80097ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3718      	adds	r7, #24
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	20000b78 	.word	0x20000b78

080097c8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80097cc:	4805      	ldr	r0, [pc, #20]	; (80097e4 <BSP_SD_GetCardState+0x1c>)
 80097ce:	f7fd ffcf 	bl	8007770 <HAL_SD_GetCardState>
 80097d2:	4603      	mov	r3, r0
 80097d4:	2b04      	cmp	r3, #4
 80097d6:	bf14      	ite	ne
 80097d8:	2301      	movne	r3, #1
 80097da:	2300      	moveq	r3, #0
 80097dc:	b2db      	uxtb	r3, r3
}
 80097de:	4618      	mov	r0, r3
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	20000b78 	.word	0x20000b78

080097e8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80097f0:	6879      	ldr	r1, [r7, #4]
 80097f2:	4803      	ldr	r0, [pc, #12]	; (8009800 <BSP_SD_GetCardInfo+0x18>)
 80097f4:	f7fd fef6 	bl	80075e4 <HAL_SD_GetCardInfo>
}
 80097f8:	bf00      	nop
 80097fa:	3708      	adds	r7, #8
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	20000b78 	.word	0x20000b78

08009804 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800980c:	f000 f818 	bl	8009840 <BSP_SD_AbortCallback>
}
 8009810:	bf00      	nop
 8009812:	3708      	adds	r7, #8
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009820:	f000 f998 	bl	8009b54 <BSP_SD_WriteCpltCallback>
}
 8009824:	bf00      	nop
 8009826:	3708      	adds	r7, #8
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009834:	f000 f9a0 	bl	8009b78 <BSP_SD_ReadCpltCallback>
}
 8009838:	bf00      	nop
 800983a:	3708      	adds	r7, #8
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8009840:	b480      	push	{r7}
 8009842:	af00      	add	r7, sp, #0

}
 8009844:	bf00      	nop
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr

0800984e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800984e:	b480      	push	{r7}
 8009850:	b083      	sub	sp, #12
 8009852:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009854:	2301      	movs	r3, #1
 8009856:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8009858:	79fb      	ldrb	r3, [r7, #7]
 800985a:	b2db      	uxtb	r3, r3
}
 800985c:	4618      	mov	r0, r3
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8009870:	f004 fd36 	bl	800e2e0 <osKernelGetTickCount>
 8009874:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8009876:	e006      	b.n	8009886 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009878:	f7ff ffa6 	bl	80097c8 <BSP_SD_GetCardState>
 800987c:	4603      	mov	r3, r0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d101      	bne.n	8009886 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8009882:	2300      	movs	r3, #0
 8009884:	e009      	b.n	800989a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8009886:	f004 fd2b 	bl	800e2e0 <osKernelGetTickCount>
 800988a:	4602      	mov	r2, r0
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	1ad3      	subs	r3, r2, r3
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	429a      	cmp	r2, r3
 8009894:	d8f0      	bhi.n	8009878 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8009896:	f04f 33ff 	mov.w	r3, #4294967295
}
 800989a:	4618      	mov	r0, r3
 800989c:	3710      	adds	r7, #16
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
	...

080098a4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	4603      	mov	r3, r0
 80098ac:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80098ae:	4b0b      	ldr	r3, [pc, #44]	; (80098dc <SD_CheckStatus+0x38>)
 80098b0:	2201      	movs	r2, #1
 80098b2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80098b4:	f7ff ff88 	bl	80097c8 <BSP_SD_GetCardState>
 80098b8:	4603      	mov	r3, r0
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d107      	bne.n	80098ce <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80098be:	4b07      	ldr	r3, [pc, #28]	; (80098dc <SD_CheckStatus+0x38>)
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	f023 0301 	bic.w	r3, r3, #1
 80098c8:	b2da      	uxtb	r2, r3
 80098ca:	4b04      	ldr	r3, [pc, #16]	; (80098dc <SD_CheckStatus+0x38>)
 80098cc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80098ce:	4b03      	ldr	r3, [pc, #12]	; (80098dc <SD_CheckStatus+0x38>)
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	b2db      	uxtb	r3, r3
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3708      	adds	r7, #8
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	20000009 	.word	0x20000009

080098e0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	4603      	mov	r3, r0
 80098e8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80098ea:	4b1c      	ldr	r3, [pc, #112]	; (800995c <SD_initialize+0x7c>)
 80098ec:	2201      	movs	r2, #1
 80098ee:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 80098f0:	f004 fcae 	bl	800e250 <osKernelGetState>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b02      	cmp	r3, #2
 80098f8:	d129      	bne.n	800994e <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 80098fa:	f7ff ff0b 	bl	8009714 <BSP_SD_Init>
 80098fe:	4603      	mov	r3, r0
 8009900:	2b00      	cmp	r3, #0
 8009902:	d107      	bne.n	8009914 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8009904:	79fb      	ldrb	r3, [r7, #7]
 8009906:	4618      	mov	r0, r3
 8009908:	f7ff ffcc 	bl	80098a4 <SD_CheckStatus>
 800990c:	4603      	mov	r3, r0
 800990e:	461a      	mov	r2, r3
 8009910:	4b12      	ldr	r3, [pc, #72]	; (800995c <SD_initialize+0x7c>)
 8009912:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8009914:	4b11      	ldr	r3, [pc, #68]	; (800995c <SD_initialize+0x7c>)
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	b2db      	uxtb	r3, r3
 800991a:	2b01      	cmp	r3, #1
 800991c:	d017      	beq.n	800994e <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800991e:	4b10      	ldr	r3, [pc, #64]	; (8009960 <SD_initialize+0x80>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d107      	bne.n	8009936 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8009926:	2200      	movs	r2, #0
 8009928:	2102      	movs	r1, #2
 800992a:	200a      	movs	r0, #10
 800992c:	f004 ffec 	bl	800e908 <osMessageQueueNew>
 8009930:	4603      	mov	r3, r0
 8009932:	4a0b      	ldr	r2, [pc, #44]	; (8009960 <SD_initialize+0x80>)
 8009934:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8009936:	4b0a      	ldr	r3, [pc, #40]	; (8009960 <SD_initialize+0x80>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d107      	bne.n	800994e <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800993e:	4b07      	ldr	r3, [pc, #28]	; (800995c <SD_initialize+0x7c>)
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	b2db      	uxtb	r3, r3
 8009944:	f043 0301 	orr.w	r3, r3, #1
 8009948:	b2da      	uxtb	r2, r3
 800994a:	4b04      	ldr	r3, [pc, #16]	; (800995c <SD_initialize+0x7c>)
 800994c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800994e:	4b03      	ldr	r3, [pc, #12]	; (800995c <SD_initialize+0x7c>)
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	b2db      	uxtb	r3, r3
}
 8009954:	4618      	mov	r0, r3
 8009956:	3708      	adds	r7, #8
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}
 800995c:	20000009 	.word	0x20000009
 8009960:	20000f48 	.word	0x20000f48

08009964 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	4603      	mov	r3, r0
 800996c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800996e:	79fb      	ldrb	r3, [r7, #7]
 8009970:	4618      	mov	r0, r3
 8009972:	f7ff ff97 	bl	80098a4 <SD_CheckStatus>
 8009976:	4603      	mov	r3, r0
}
 8009978:	4618      	mov	r0, r3
 800997a:	3708      	adds	r7, #8
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b088      	sub	sp, #32
 8009984:	af00      	add	r7, sp, #0
 8009986:	60b9      	str	r1, [r7, #8]
 8009988:	607a      	str	r2, [r7, #4]
 800998a:	603b      	str	r3, [r7, #0]
 800998c:	4603      	mov	r3, r0
 800998e:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8009990:	2301      	movs	r3, #1
 8009992:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009994:	f247 5030 	movw	r0, #30000	; 0x7530
 8009998:	f7ff ff66 	bl	8009868 <SD_CheckStatusWithTimeout>
 800999c:	4603      	mov	r3, r0
 800999e:	2b00      	cmp	r3, #0
 80099a0:	da01      	bge.n	80099a6 <SD_read+0x26>
  {
    return res;
 80099a2:	7ffb      	ldrb	r3, [r7, #31]
 80099a4:	e02f      	b.n	8009a06 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 80099a6:	683a      	ldr	r2, [r7, #0]
 80099a8:	6879      	ldr	r1, [r7, #4]
 80099aa:	68b8      	ldr	r0, [r7, #8]
 80099ac:	f7ff fed8 	bl	8009760 <BSP_SD_ReadBlocks_DMA>
 80099b0:	4603      	mov	r3, r0
 80099b2:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 80099b4:	7fbb      	ldrb	r3, [r7, #30]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d124      	bne.n	8009a04 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80099ba:	4b15      	ldr	r3, [pc, #84]	; (8009a10 <SD_read+0x90>)
 80099bc:	6818      	ldr	r0, [r3, #0]
 80099be:	f107 0112 	add.w	r1, r7, #18
 80099c2:	f247 5330 	movw	r3, #30000	; 0x7530
 80099c6:	2200      	movs	r2, #0
 80099c8:	f005 f872 	bl	800eab0 <osMessageQueueGet>
 80099cc:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 80099ce:	69bb      	ldr	r3, [r7, #24]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d117      	bne.n	8009a04 <SD_read+0x84>
 80099d4:	8a7b      	ldrh	r3, [r7, #18]
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d114      	bne.n	8009a04 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 80099da:	f004 fc81 	bl	800e2e0 <osKernelGetTickCount>
 80099de:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 80099e0:	e007      	b.n	80099f2 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80099e2:	f7ff fef1 	bl	80097c8 <BSP_SD_GetCardState>
 80099e6:	4603      	mov	r3, r0
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d102      	bne.n	80099f2 <SD_read+0x72>
              {
                res = RES_OK;
 80099ec:	2300      	movs	r3, #0
 80099ee:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 80099f0:	e008      	b.n	8009a04 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 80099f2:	f004 fc75 	bl	800e2e0 <osKernelGetTickCount>
 80099f6:	4602      	mov	r2, r0
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	1ad3      	subs	r3, r2, r3
 80099fc:	f247 522f 	movw	r2, #29999	; 0x752f
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d9ee      	bls.n	80099e2 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8009a04:	7ffb      	ldrb	r3, [r7, #31]
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3720      	adds	r7, #32
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	20000f48 	.word	0x20000f48

08009a14 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b088      	sub	sp, #32
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60b9      	str	r1, [r7, #8]
 8009a1c:	607a      	str	r2, [r7, #4]
 8009a1e:	603b      	str	r3, [r7, #0]
 8009a20:	4603      	mov	r3, r0
 8009a22:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009a24:	2301      	movs	r3, #1
 8009a26:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009a28:	f247 5030 	movw	r0, #30000	; 0x7530
 8009a2c:	f7ff ff1c 	bl	8009868 <SD_CheckStatusWithTimeout>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	da01      	bge.n	8009a3a <SD_write+0x26>
  {
    return res;
 8009a36:	7ffb      	ldrb	r3, [r7, #31]
 8009a38:	e02d      	b.n	8009a96 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009a3a:	683a      	ldr	r2, [r7, #0]
 8009a3c:	6879      	ldr	r1, [r7, #4]
 8009a3e:	68b8      	ldr	r0, [r7, #8]
 8009a40:	f7ff fea8 	bl	8009794 <BSP_SD_WriteBlocks_DMA>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d124      	bne.n	8009a94 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8009a4a:	4b15      	ldr	r3, [pc, #84]	; (8009aa0 <SD_write+0x8c>)
 8009a4c:	6818      	ldr	r0, [r3, #0]
 8009a4e:	f107 0112 	add.w	r1, r7, #18
 8009a52:	f247 5330 	movw	r3, #30000	; 0x7530
 8009a56:	2200      	movs	r2, #0
 8009a58:	f005 f82a 	bl	800eab0 <osMessageQueueGet>
 8009a5c:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d117      	bne.n	8009a94 <SD_write+0x80>
 8009a64:	8a7b      	ldrh	r3, [r7, #18]
 8009a66:	2b02      	cmp	r3, #2
 8009a68:	d114      	bne.n	8009a94 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8009a6a:	f004 fc39 	bl	800e2e0 <osKernelGetTickCount>
 8009a6e:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8009a70:	e007      	b.n	8009a82 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009a72:	f7ff fea9 	bl	80097c8 <BSP_SD_GetCardState>
 8009a76:	4603      	mov	r3, r0
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d102      	bne.n	8009a82 <SD_write+0x6e>
          {
            res = RES_OK;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	77fb      	strb	r3, [r7, #31]
            break;
 8009a80:	e008      	b.n	8009a94 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8009a82:	f004 fc2d 	bl	800e2e0 <osKernelGetTickCount>
 8009a86:	4602      	mov	r2, r0
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	1ad3      	subs	r3, r2, r3
 8009a8c:	f247 522f 	movw	r2, #29999	; 0x752f
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d9ee      	bls.n	8009a72 <SD_write+0x5e>
    }

  }
#endif

  return res;
 8009a94:	7ffb      	ldrb	r3, [r7, #31]
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3720      	adds	r7, #32
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	20000f48 	.word	0x20000f48

08009aa4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b08c      	sub	sp, #48	; 0x30
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	4603      	mov	r3, r0
 8009aac:	603a      	str	r2, [r7, #0]
 8009aae:	71fb      	strb	r3, [r7, #7]
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009aba:	4b25      	ldr	r3, [pc, #148]	; (8009b50 <SD_ioctl+0xac>)
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	f003 0301 	and.w	r3, r3, #1
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d001      	beq.n	8009acc <SD_ioctl+0x28>
 8009ac8:	2303      	movs	r3, #3
 8009aca:	e03c      	b.n	8009b46 <SD_ioctl+0xa2>

  switch (cmd)
 8009acc:	79bb      	ldrb	r3, [r7, #6]
 8009ace:	2b03      	cmp	r3, #3
 8009ad0:	d834      	bhi.n	8009b3c <SD_ioctl+0x98>
 8009ad2:	a201      	add	r2, pc, #4	; (adr r2, 8009ad8 <SD_ioctl+0x34>)
 8009ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad8:	08009ae9 	.word	0x08009ae9
 8009adc:	08009af1 	.word	0x08009af1
 8009ae0:	08009b09 	.word	0x08009b09
 8009ae4:	08009b23 	.word	0x08009b23
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009aee:	e028      	b.n	8009b42 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009af0:	f107 030c 	add.w	r3, r7, #12
 8009af4:	4618      	mov	r0, r3
 8009af6:	f7ff fe77 	bl	80097e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009b00:	2300      	movs	r3, #0
 8009b02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009b06:	e01c      	b.n	8009b42 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009b08:	f107 030c 	add.w	r3, r7, #12
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f7ff fe6b 	bl	80097e8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b14:	b29a      	uxth	r2, r3
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009b20:	e00f      	b.n	8009b42 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009b22:	f107 030c 	add.w	r3, r7, #12
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7ff fe5e 	bl	80097e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b2e:	0a5a      	lsrs	r2, r3, #9
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009b34:	2300      	movs	r3, #0
 8009b36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009b3a:	e002      	b.n	8009b42 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009b3c:	2304      	movs	r3, #4
 8009b3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009b42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3730      	adds	r7, #48	; 0x30
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	20000009 	.word	0x20000009

08009b54 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 8009b5a:	2302      	movs	r3, #2
 8009b5c:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8009b5e:	4b05      	ldr	r3, [pc, #20]	; (8009b74 <BSP_SD_WriteCpltCallback+0x20>)
 8009b60:	6818      	ldr	r0, [r3, #0]
 8009b62:	1db9      	adds	r1, r7, #6
 8009b64:	2300      	movs	r3, #0
 8009b66:	2200      	movs	r2, #0
 8009b68:	f004 ff42 	bl	800e9f0 <osMessageQueuePut>
#endif
}
 8009b6c:	bf00      	nop
 8009b6e:	3708      	adds	r7, #8
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}
 8009b74:	20000f48 	.word	0x20000f48

08009b78 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b082      	sub	sp, #8
 8009b7c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8009b7e:	2301      	movs	r3, #1
 8009b80:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8009b82:	4b05      	ldr	r3, [pc, #20]	; (8009b98 <BSP_SD_ReadCpltCallback+0x20>)
 8009b84:	6818      	ldr	r0, [r3, #0]
 8009b86:	1db9      	adds	r1, r7, #6
 8009b88:	2300      	movs	r3, #0
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f004 ff30 	bl	800e9f0 <osMessageQueuePut>
#endif
}
 8009b90:	bf00      	nop
 8009b92:	3708      	adds	r7, #8
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}
 8009b98:	20000f48 	.word	0x20000f48

08009b9c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8009ba2:	2100      	movs	r1, #0
 8009ba4:	2000      	movs	r0, #0
 8009ba6:	f008 fa89 	bl	80120bc <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8009baa:	4b2a      	ldr	r3, [pc, #168]	; (8009c54 <MX_LWIP_Init+0xb8>)
 8009bac:	2200      	movs	r2, #0
 8009bae:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8009bb0:	4b29      	ldr	r3, [pc, #164]	; (8009c58 <MX_LWIP_Init+0xbc>)
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8009bb6:	4b29      	ldr	r3, [pc, #164]	; (8009c5c <MX_LWIP_Init+0xc0>)
 8009bb8:	2200      	movs	r2, #0
 8009bba:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8009bbc:	4b28      	ldr	r3, [pc, #160]	; (8009c60 <MX_LWIP_Init+0xc4>)
 8009bbe:	9302      	str	r3, [sp, #8]
 8009bc0:	4b28      	ldr	r3, [pc, #160]	; (8009c64 <MX_LWIP_Init+0xc8>)
 8009bc2:	9301      	str	r3, [sp, #4]
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	9300      	str	r3, [sp, #0]
 8009bc8:	4b24      	ldr	r3, [pc, #144]	; (8009c5c <MX_LWIP_Init+0xc0>)
 8009bca:	4a23      	ldr	r2, [pc, #140]	; (8009c58 <MX_LWIP_Init+0xbc>)
 8009bcc:	4921      	ldr	r1, [pc, #132]	; (8009c54 <MX_LWIP_Init+0xb8>)
 8009bce:	4826      	ldr	r0, [pc, #152]	; (8009c68 <MX_LWIP_Init+0xcc>)
 8009bd0:	f008 fff8 	bl	8012bc4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009bd4:	4824      	ldr	r0, [pc, #144]	; (8009c68 <MX_LWIP_Init+0xcc>)
 8009bd6:	f009 f9af 	bl	8012f38 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8009bda:	4b23      	ldr	r3, [pc, #140]	; (8009c68 <MX_LWIP_Init+0xcc>)
 8009bdc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009be0:	089b      	lsrs	r3, r3, #2
 8009be2:	f003 0301 	and.w	r3, r3, #1
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d003      	beq.n	8009bf4 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8009bec:	481e      	ldr	r0, [pc, #120]	; (8009c68 <MX_LWIP_Init+0xcc>)
 8009bee:	f009 f9b3 	bl	8012f58 <netif_set_up>
 8009bf2:	e002      	b.n	8009bfa <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8009bf4:	481c      	ldr	r0, [pc, #112]	; (8009c68 <MX_LWIP_Init+0xcc>)
 8009bf6:	f009 fa1b 	bl	8013030 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8009bfa:	491c      	ldr	r1, [pc, #112]	; (8009c6c <MX_LWIP_Init+0xd0>)
 8009bfc:	481a      	ldr	r0, [pc, #104]	; (8009c68 <MX_LWIP_Init+0xcc>)
 8009bfe:	f009 fab1 	bl	8013164 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 8009c02:	2200      	movs	r2, #0
 8009c04:	2101      	movs	r1, #1
 8009c06:	2001      	movs	r0, #1
 8009c08:	f004 fd3a 	bl	800e680 <osSemaphoreNew>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	4a18      	ldr	r2, [pc, #96]	; (8009c70 <MX_LWIP_Init+0xd4>)
 8009c10:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8009c12:	4b18      	ldr	r3, [pc, #96]	; (8009c74 <MX_LWIP_Init+0xd8>)
 8009c14:	4a14      	ldr	r2, [pc, #80]	; (8009c68 <MX_LWIP_Init+0xcc>)
 8009c16:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8009c18:	4b15      	ldr	r3, [pc, #84]	; (8009c70 <MX_LWIP_Init+0xd4>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4a15      	ldr	r2, [pc, #84]	; (8009c74 <MX_LWIP_Init+0xd8>)
 8009c1e:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8009c20:	2224      	movs	r2, #36	; 0x24
 8009c22:	2100      	movs	r1, #0
 8009c24:	4814      	ldr	r0, [pc, #80]	; (8009c78 <MX_LWIP_Init+0xdc>)
 8009c26:	f014 fb4f 	bl	801e2c8 <memset>
  attributes.name = "LinkThr";
 8009c2a:	4b13      	ldr	r3, [pc, #76]	; (8009c78 <MX_LWIP_Init+0xdc>)
 8009c2c:	4a13      	ldr	r2, [pc, #76]	; (8009c7c <MX_LWIP_Init+0xe0>)
 8009c2e:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8009c30:	4b11      	ldr	r3, [pc, #68]	; (8009c78 <MX_LWIP_Init+0xdc>)
 8009c32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009c36:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8009c38:	4b0f      	ldr	r3, [pc, #60]	; (8009c78 <MX_LWIP_Init+0xdc>)
 8009c3a:	2210      	movs	r2, #16
 8009c3c:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 8009c3e:	4a0e      	ldr	r2, [pc, #56]	; (8009c78 <MX_LWIP_Init+0xdc>)
 8009c40:	490c      	ldr	r1, [pc, #48]	; (8009c74 <MX_LWIP_Init+0xd8>)
 8009c42:	480f      	ldr	r0, [pc, #60]	; (8009c80 <MX_LWIP_Init+0xe4>)
 8009c44:	f004 fb61 	bl	800e30a <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8009c48:	4807      	ldr	r0, [pc, #28]	; (8009c68 <MX_LWIP_Init+0xcc>)
 8009c4a:	f010 fbf1 	bl	801a430 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8009c4e:	bf00      	nop
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	20000f90 	.word	0x20000f90
 8009c58:	20000f94 	.word	0x20000f94
 8009c5c:	20000f98 	.word	0x20000f98
 8009c60:	08011ff9 	.word	0x08011ff9
 8009c64:	0800a2e9 	.word	0x0800a2e9
 8009c68:	20000f58 	.word	0x20000f58
 8009c6c:	0800a3cd 	.word	0x0800a3cd
 8009c70:	20000f4c 	.word	0x20000f4c
 8009c74:	20000f50 	.word	0x20000f50
 8009c78:	20000f9c 	.word	0x20000f9c
 8009c7c:	080244f8 	.word	0x080244f8
 8009c80:	0800a355 	.word	0x0800a355

08009c84 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b08e      	sub	sp, #56	; 0x38
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c90:	2200      	movs	r2, #0
 8009c92:	601a      	str	r2, [r3, #0]
 8009c94:	605a      	str	r2, [r3, #4]
 8009c96:	609a      	str	r2, [r3, #8]
 8009c98:	60da      	str	r2, [r3, #12]
 8009c9a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a59      	ldr	r2, [pc, #356]	; (8009e08 <HAL_ETH_MspInit+0x184>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	f040 80ac 	bne.w	8009e00 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8009ca8:	2300      	movs	r3, #0
 8009caa:	623b      	str	r3, [r7, #32]
 8009cac:	4b57      	ldr	r3, [pc, #348]	; (8009e0c <HAL_ETH_MspInit+0x188>)
 8009cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cb0:	4a56      	ldr	r2, [pc, #344]	; (8009e0c <HAL_ETH_MspInit+0x188>)
 8009cb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009cb6:	6313      	str	r3, [r2, #48]	; 0x30
 8009cb8:	4b54      	ldr	r3, [pc, #336]	; (8009e0c <HAL_ETH_MspInit+0x188>)
 8009cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cc0:	623b      	str	r3, [r7, #32]
 8009cc2:	6a3b      	ldr	r3, [r7, #32]
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	61fb      	str	r3, [r7, #28]
 8009cc8:	4b50      	ldr	r3, [pc, #320]	; (8009e0c <HAL_ETH_MspInit+0x188>)
 8009cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ccc:	4a4f      	ldr	r2, [pc, #316]	; (8009e0c <HAL_ETH_MspInit+0x188>)
 8009cce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009cd2:	6313      	str	r3, [r2, #48]	; 0x30
 8009cd4:	4b4d      	ldr	r3, [pc, #308]	; (8009e0c <HAL_ETH_MspInit+0x188>)
 8009cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009cdc:	61fb      	str	r3, [r7, #28]
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	61bb      	str	r3, [r7, #24]
 8009ce4:	4b49      	ldr	r3, [pc, #292]	; (8009e0c <HAL_ETH_MspInit+0x188>)
 8009ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ce8:	4a48      	ldr	r2, [pc, #288]	; (8009e0c <HAL_ETH_MspInit+0x188>)
 8009cea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009cee:	6313      	str	r3, [r2, #48]	; 0x30
 8009cf0:	4b46      	ldr	r3, [pc, #280]	; (8009e0c <HAL_ETH_MspInit+0x188>)
 8009cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009cf8:	61bb      	str	r3, [r7, #24]
 8009cfa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	617b      	str	r3, [r7, #20]
 8009d00:	4b42      	ldr	r3, [pc, #264]	; (8009e0c <HAL_ETH_MspInit+0x188>)
 8009d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d04:	4a41      	ldr	r2, [pc, #260]	; (8009e0c <HAL_ETH_MspInit+0x188>)
 8009d06:	f043 0304 	orr.w	r3, r3, #4
 8009d0a:	6313      	str	r3, [r2, #48]	; 0x30
 8009d0c:	4b3f      	ldr	r3, [pc, #252]	; (8009e0c <HAL_ETH_MspInit+0x188>)
 8009d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d10:	f003 0304 	and.w	r3, r3, #4
 8009d14:	617b      	str	r3, [r7, #20]
 8009d16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d18:	2300      	movs	r3, #0
 8009d1a:	613b      	str	r3, [r7, #16]
 8009d1c:	4b3b      	ldr	r3, [pc, #236]	; (8009e0c <HAL_ETH_MspInit+0x188>)
 8009d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d20:	4a3a      	ldr	r2, [pc, #232]	; (8009e0c <HAL_ETH_MspInit+0x188>)
 8009d22:	f043 0301 	orr.w	r3, r3, #1
 8009d26:	6313      	str	r3, [r2, #48]	; 0x30
 8009d28:	4b38      	ldr	r3, [pc, #224]	; (8009e0c <HAL_ETH_MspInit+0x188>)
 8009d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d2c:	f003 0301 	and.w	r3, r3, #1
 8009d30:	613b      	str	r3, [r7, #16]
 8009d32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009d34:	2300      	movs	r3, #0
 8009d36:	60fb      	str	r3, [r7, #12]
 8009d38:	4b34      	ldr	r3, [pc, #208]	; (8009e0c <HAL_ETH_MspInit+0x188>)
 8009d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d3c:	4a33      	ldr	r2, [pc, #204]	; (8009e0c <HAL_ETH_MspInit+0x188>)
 8009d3e:	f043 0302 	orr.w	r3, r3, #2
 8009d42:	6313      	str	r3, [r2, #48]	; 0x30
 8009d44:	4b31      	ldr	r3, [pc, #196]	; (8009e0c <HAL_ETH_MspInit+0x188>)
 8009d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d48:	f003 0302 	and.w	r3, r3, #2
 8009d4c:	60fb      	str	r3, [r7, #12]
 8009d4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009d50:	2300      	movs	r3, #0
 8009d52:	60bb      	str	r3, [r7, #8]
 8009d54:	4b2d      	ldr	r3, [pc, #180]	; (8009e0c <HAL_ETH_MspInit+0x188>)
 8009d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d58:	4a2c      	ldr	r2, [pc, #176]	; (8009e0c <HAL_ETH_MspInit+0x188>)
 8009d5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d5e:	6313      	str	r3, [r2, #48]	; 0x30
 8009d60:	4b2a      	ldr	r3, [pc, #168]	; (8009e0c <HAL_ETH_MspInit+0x188>)
 8009d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d68:	60bb      	str	r3, [r7, #8]
 8009d6a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8009d6c:	2332      	movs	r3, #50	; 0x32
 8009d6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d70:	2302      	movs	r3, #2
 8009d72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d74:	2300      	movs	r3, #0
 8009d76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d78:	2303      	movs	r3, #3
 8009d7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009d7c:	230b      	movs	r3, #11
 8009d7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d84:	4619      	mov	r1, r3
 8009d86:	4822      	ldr	r0, [pc, #136]	; (8009e10 <HAL_ETH_MspInit+0x18c>)
 8009d88:	f7fb fb12 	bl	80053b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8009d8c:	2386      	movs	r3, #134	; 0x86
 8009d8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d90:	2302      	movs	r3, #2
 8009d92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d94:	2300      	movs	r3, #0
 8009d96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d98:	2303      	movs	r3, #3
 8009d9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009d9c:	230b      	movs	r3, #11
 8009d9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009da0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009da4:	4619      	mov	r1, r3
 8009da6:	481b      	ldr	r0, [pc, #108]	; (8009e14 <HAL_ETH_MspInit+0x190>)
 8009da8:	f7fb fb02 	bl	80053b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8009dac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009db0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009db2:	2302      	movs	r3, #2
 8009db4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009db6:	2300      	movs	r3, #0
 8009db8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009dba:	2303      	movs	r3, #3
 8009dbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009dbe:	230b      	movs	r3, #11
 8009dc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	4813      	ldr	r0, [pc, #76]	; (8009e18 <HAL_ETH_MspInit+0x194>)
 8009dca:	f7fb faf1 	bl	80053b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8009dce:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8009dd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009dd4:	2302      	movs	r3, #2
 8009dd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ddc:	2303      	movs	r3, #3
 8009dde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009de0:	230b      	movs	r3, #11
 8009de2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009de8:	4619      	mov	r1, r3
 8009dea:	480c      	ldr	r0, [pc, #48]	; (8009e1c <HAL_ETH_MspInit+0x198>)
 8009dec:	f7fb fae0 	bl	80053b0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8009df0:	2200      	movs	r2, #0
 8009df2:	2105      	movs	r1, #5
 8009df4:	203d      	movs	r0, #61	; 0x3d
 8009df6:	f7f9 fad0 	bl	800339a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8009dfa:	203d      	movs	r0, #61	; 0x3d
 8009dfc:	f7f9 fae9 	bl	80033d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8009e00:	bf00      	nop
 8009e02:	3738      	adds	r7, #56	; 0x38
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}
 8009e08:	40028000 	.word	0x40028000
 8009e0c:	40023800 	.word	0x40023800
 8009e10:	40020800 	.word	0x40020800
 8009e14:	40020000 	.word	0x40020000
 8009e18:	40020400 	.word	0x40020400
 8009e1c:	40021800 	.word	0x40021800

08009e20 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8009e28:	4b04      	ldr	r3, [pc, #16]	; (8009e3c <HAL_ETH_RxCpltCallback+0x1c>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f004 fd03 	bl	800e838 <osSemaphoreRelease>
}
 8009e32:	bf00      	nop
 8009e34:	3708      	adds	r7, #8
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
 8009e3a:	bf00      	nop
 8009e3c:	20004060 	.word	0x20004060

08009e40 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b090      	sub	sp, #64	; 0x40
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009e4c:	4b5d      	ldr	r3, [pc, #372]	; (8009fc4 <low_level_init+0x184>)
 8009e4e:	4a5e      	ldr	r2, [pc, #376]	; (8009fc8 <low_level_init+0x188>)
 8009e50:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8009e52:	4b5c      	ldr	r3, [pc, #368]	; (8009fc4 <low_level_init+0x184>)
 8009e54:	2201      	movs	r2, #1
 8009e56:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8009e58:	4b5a      	ldr	r3, [pc, #360]	; (8009fc4 <low_level_init+0x184>)
 8009e5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009e5e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8009e60:	4b58      	ldr	r3, [pc, #352]	; (8009fc4 <low_level_init+0x184>)
 8009e62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e66:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8009e68:	4b56      	ldr	r3, [pc, #344]	; (8009fc4 <low_level_init+0x184>)
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8009e72:	2380      	movs	r3, #128	; 0x80
 8009e74:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8009e76:	23e1      	movs	r3, #225	; 0xe1
 8009e78:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8009e82:	2300      	movs	r3, #0
 8009e84:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8009e86:	4a4f      	ldr	r2, [pc, #316]	; (8009fc4 <low_level_init+0x184>)
 8009e88:	f107 030c 	add.w	r3, r7, #12
 8009e8c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8009e8e:	4b4d      	ldr	r3, [pc, #308]	; (8009fc4 <low_level_init+0x184>)
 8009e90:	2201      	movs	r2, #1
 8009e92:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8009e94:	4b4b      	ldr	r3, [pc, #300]	; (8009fc4 <low_level_init+0x184>)
 8009e96:	2200      	movs	r2, #0
 8009e98:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8009e9a:	4b4a      	ldr	r3, [pc, #296]	; (8009fc4 <low_level_init+0x184>)
 8009e9c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8009ea0:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8009ea2:	4848      	ldr	r0, [pc, #288]	; (8009fc4 <low_level_init+0x184>)
 8009ea4:	f7fa f8f6 	bl	8004094 <HAL_ETH_Init>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8009eae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d108      	bne.n	8009ec8 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009ebc:	f043 0304 	orr.w	r3, r3, #4
 8009ec0:	b2da      	uxtb	r2, r3
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8009ec8:	2304      	movs	r3, #4
 8009eca:	4a40      	ldr	r2, [pc, #256]	; (8009fcc <low_level_init+0x18c>)
 8009ecc:	4940      	ldr	r1, [pc, #256]	; (8009fd0 <low_level_init+0x190>)
 8009ece:	483d      	ldr	r0, [pc, #244]	; (8009fc4 <low_level_init+0x184>)
 8009ed0:	f7fa fa7a 	bl	80043c8 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8009ed4:	2304      	movs	r3, #4
 8009ed6:	4a3f      	ldr	r2, [pc, #252]	; (8009fd4 <low_level_init+0x194>)
 8009ed8:	493f      	ldr	r1, [pc, #252]	; (8009fd8 <low_level_init+0x198>)
 8009eda:	483a      	ldr	r0, [pc, #232]	; (8009fc4 <low_level_init+0x184>)
 8009edc:	f7fa fadc 	bl	8004498 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2206      	movs	r2, #6
 8009ee4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009ee8:	4b36      	ldr	r3, [pc, #216]	; (8009fc4 <low_level_init+0x184>)
 8009eea:	695b      	ldr	r3, [r3, #20]
 8009eec:	781a      	ldrb	r2, [r3, #0]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8009ef4:	4b33      	ldr	r3, [pc, #204]	; (8009fc4 <low_level_init+0x184>)
 8009ef6:	695b      	ldr	r3, [r3, #20]
 8009ef8:	785a      	ldrb	r2, [r3, #1]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8009f00:	4b30      	ldr	r3, [pc, #192]	; (8009fc4 <low_level_init+0x184>)
 8009f02:	695b      	ldr	r3, [r3, #20]
 8009f04:	789a      	ldrb	r2, [r3, #2]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8009f0c:	4b2d      	ldr	r3, [pc, #180]	; (8009fc4 <low_level_init+0x184>)
 8009f0e:	695b      	ldr	r3, [r3, #20]
 8009f10:	78da      	ldrb	r2, [r3, #3]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8009f18:	4b2a      	ldr	r3, [pc, #168]	; (8009fc4 <low_level_init+0x184>)
 8009f1a:	695b      	ldr	r3, [r3, #20]
 8009f1c:	791a      	ldrb	r2, [r3, #4]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009f24:	4b27      	ldr	r3, [pc, #156]	; (8009fc4 <low_level_init+0x184>)
 8009f26:	695b      	ldr	r3, [r3, #20]
 8009f28:	795a      	ldrb	r2, [r3, #5]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009f36:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009f3e:	f043 030a 	orr.w	r3, r3, #10
 8009f42:	b2da      	uxtb	r2, r3
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	2101      	movs	r1, #1
 8009f4e:	2001      	movs	r0, #1
 8009f50:	f004 fb96 	bl	800e680 <osSemaphoreNew>
 8009f54:	4603      	mov	r3, r0
 8009f56:	4a21      	ldr	r2, [pc, #132]	; (8009fdc <low_level_init+0x19c>)
 8009f58:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8009f5a:	f107 0314 	add.w	r3, r7, #20
 8009f5e:	2224      	movs	r2, #36	; 0x24
 8009f60:	2100      	movs	r1, #0
 8009f62:	4618      	mov	r0, r3
 8009f64:	f014 f9b0 	bl	801e2c8 <memset>
  attributes.name = "EthIf";
 8009f68:	4b1d      	ldr	r3, [pc, #116]	; (8009fe0 <low_level_init+0x1a0>)
 8009f6a:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8009f6c:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8009f70:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 8009f72:	2330      	movs	r3, #48	; 0x30
 8009f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 8009f76:	f107 0314 	add.w	r3, r7, #20
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	6879      	ldr	r1, [r7, #4]
 8009f7e:	4819      	ldr	r0, [pc, #100]	; (8009fe4 <low_level_init+0x1a4>)
 8009f80:	f004 f9c3 	bl	800e30a <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8009f84:	480f      	ldr	r0, [pc, #60]	; (8009fc4 <low_level_init+0x184>)
 8009f86:	f7fa fdab 	bl	8004ae0 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8009f8a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009f8e:	461a      	mov	r2, r3
 8009f90:	211d      	movs	r1, #29
 8009f92:	480c      	ldr	r0, [pc, #48]	; (8009fc4 <low_level_init+0x184>)
 8009f94:	f7fa fcd6 	bl	8004944 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8009f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f9a:	f043 030b 	orr.w	r3, r3, #11
 8009f9e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8009fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	211d      	movs	r1, #29
 8009fa6:	4807      	ldr	r0, [pc, #28]	; (8009fc4 <low_level_init+0x184>)
 8009fa8:	f7fa fd34 	bl	8004a14 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8009fac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	211d      	movs	r1, #29
 8009fb4:	4803      	ldr	r0, [pc, #12]	; (8009fc4 <low_level_init+0x184>)
 8009fb6:	f7fa fcc5 	bl	8004944 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8009fba:	bf00      	nop
 8009fbc:	3740      	adds	r7, #64	; 0x40
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	bf00      	nop
 8009fc4:	20004064 	.word	0x20004064
 8009fc8:	40028000 	.word	0x40028000
 8009fcc:	20002890 	.word	0x20002890
 8009fd0:	20001040 	.word	0x20001040
 8009fd4:	200010c0 	.word	0x200010c0
 8009fd8:	20000fc0 	.word	0x20000fc0
 8009fdc:	20004060 	.word	0x20004060
 8009fe0:	08024500 	.word	0x08024500
 8009fe4:	0800a289 	.word	0x0800a289

08009fe8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b08a      	sub	sp, #40	; 0x28
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8009ff2:	4b4b      	ldr	r3, [pc, #300]	; (800a120 <low_level_output+0x138>)
 8009ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff6:	689b      	ldr	r3, [r3, #8]
 8009ff8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8009ffe:	2300      	movs	r3, #0
 800a000:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800a002:	2300      	movs	r3, #0
 800a004:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800a006:	2300      	movs	r3, #0
 800a008:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800a00a:	4b45      	ldr	r3, [pc, #276]	; (800a120 <low_level_output+0x138>)
 800a00c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a00e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800a010:	2300      	movs	r3, #0
 800a012:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	623b      	str	r3, [r7, #32]
 800a018:	e05a      	b.n	800a0d0 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a01a:	69bb      	ldr	r3, [r7, #24]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	da03      	bge.n	800a02a <low_level_output+0x42>
      {
        errval = ERR_USE;
 800a022:	23f8      	movs	r3, #248	; 0xf8
 800a024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800a028:	e05c      	b.n	800a0e4 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800a02a:	6a3b      	ldr	r3, [r7, #32]
 800a02c:	895b      	ldrh	r3, [r3, #10]
 800a02e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800a030:	2300      	movs	r3, #0
 800a032:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800a034:	e02f      	b.n	800a096 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800a036:	69fa      	ldr	r2, [r7, #28]
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	18d0      	adds	r0, r2, r3
 800a03c:	6a3b      	ldr	r3, [r7, #32]
 800a03e:	685a      	ldr	r2, [r3, #4]
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	18d1      	adds	r1, r2, r3
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800a04a:	3304      	adds	r3, #4
 800a04c:	461a      	mov	r2, r3
 800a04e:	f014 f913 	bl	801e278 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800a052:	69bb      	ldr	r3, [r7, #24]
 800a054:	68db      	ldr	r3, [r3, #12]
 800a056:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a058:	69bb      	ldr	r3, [r7, #24]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	da03      	bge.n	800a068 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800a060:	23f8      	movs	r3, #248	; 0xf8
 800a062:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800a066:	e03d      	b.n	800a0e4 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800a068:	69bb      	ldr	r3, [r7, #24]
 800a06a:	689b      	ldr	r3, [r3, #8]
 800a06c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800a06e:	693a      	ldr	r2, [r7, #16]
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	4413      	add	r3, r2
 800a074:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800a078:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800a07a:	68ba      	ldr	r2, [r7, #8]
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	1ad3      	subs	r3, r2, r3
 800a080:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800a084:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800a086:	697a      	ldr	r2, [r7, #20]
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	1ad3      	subs	r3, r2, r3
 800a08c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800a090:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800a092:	2300      	movs	r3, #0
 800a094:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800a096:	68fa      	ldr	r2, [r7, #12]
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	4413      	add	r3, r2
 800a09c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d8c8      	bhi.n	800a036 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800a0a4:	69fa      	ldr	r2, [r7, #28]
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	18d0      	adds	r0, r2, r3
 800a0aa:	6a3b      	ldr	r3, [r7, #32]
 800a0ac:	685a      	ldr	r2, [r3, #4]
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	4413      	add	r3, r2
 800a0b2:	68fa      	ldr	r2, [r7, #12]
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	f014 f8df 	bl	801e278 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800a0ba:	693a      	ldr	r2, [r7, #16]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	4413      	add	r3, r2
 800a0c0:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800a0c2:	697a      	ldr	r2, [r7, #20]
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	4413      	add	r3, r2
 800a0c8:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800a0ca:	6a3b      	ldr	r3, [r7, #32]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	623b      	str	r3, [r7, #32]
 800a0d0:	6a3b      	ldr	r3, [r7, #32]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d1a1      	bne.n	800a01a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800a0d6:	6979      	ldr	r1, [r7, #20]
 800a0d8:	4811      	ldr	r0, [pc, #68]	; (800a120 <low_level_output+0x138>)
 800a0da:	f7fa fa49 	bl	8004570 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800a0e4:	4b0e      	ldr	r3, [pc, #56]	; (800a120 <low_level_output+0x138>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0ec:	695b      	ldr	r3, [r3, #20]
 800a0ee:	f003 0320 	and.w	r3, r3, #32
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d00d      	beq.n	800a112 <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800a0f6:	4b0a      	ldr	r3, [pc, #40]	; (800a120 <low_level_output+0x138>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0fe:	461a      	mov	r2, r3
 800a100:	2320      	movs	r3, #32
 800a102:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800a104:	4b06      	ldr	r3, [pc, #24]	; (800a120 <low_level_output+0x138>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a10c:	461a      	mov	r2, r3
 800a10e:	2300      	movs	r3, #0
 800a110:	6053      	str	r3, [r2, #4]
  }
  return errval;
 800a112:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a116:	4618      	mov	r0, r3
 800a118:	3728      	adds	r7, #40	; 0x28
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	20004064 	.word	0x20004064

0800a124 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b08c      	sub	sp, #48	; 0x30
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a12c:	2300      	movs	r3, #0
 800a12e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800a130:	2300      	movs	r3, #0
 800a132:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800a134:	2300      	movs	r3, #0
 800a136:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800a138:	2300      	movs	r3, #0
 800a13a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800a13c:	2300      	movs	r3, #0
 800a13e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800a140:	2300      	movs	r3, #0
 800a142:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800a144:	2300      	movs	r3, #0
 800a146:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800a148:	484e      	ldr	r0, [pc, #312]	; (800a284 <low_level_input+0x160>)
 800a14a:	f7fa fafb 	bl	8004744 <HAL_ETH_GetReceivedFrame_IT>
 800a14e:	4603      	mov	r3, r0
 800a150:	2b00      	cmp	r3, #0
 800a152:	d001      	beq.n	800a158 <low_level_input+0x34>

    return NULL;
 800a154:	2300      	movs	r3, #0
 800a156:	e091      	b.n	800a27c <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800a158:	4b4a      	ldr	r3, [pc, #296]	; (800a284 <low_level_input+0x160>)
 800a15a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a15c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800a15e:	4b49      	ldr	r3, [pc, #292]	; (800a284 <low_level_input+0x160>)
 800a160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a162:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800a164:	89fb      	ldrh	r3, [r7, #14]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d007      	beq.n	800a17a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800a16a:	89fb      	ldrh	r3, [r7, #14]
 800a16c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800a170:	4619      	mov	r1, r3
 800a172:	2000      	movs	r0, #0
 800a174:	f009 f8c0 	bl	80132f8 <pbuf_alloc>
 800a178:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800a17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d04b      	beq.n	800a218 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800a180:	4b40      	ldr	r3, [pc, #256]	; (800a284 <low_level_input+0x160>)
 800a182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a184:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800a186:	2300      	movs	r3, #0
 800a188:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800a18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a18c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a18e:	e040      	b.n	800a212 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800a190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a192:	895b      	ldrh	r3, [r3, #10]
 800a194:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800a196:	2300      	movs	r3, #0
 800a198:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800a19a:	e021      	b.n	800a1e0 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800a19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19e:	685a      	ldr	r2, [r3, #4]
 800a1a0:	69bb      	ldr	r3, [r7, #24]
 800a1a2:	18d0      	adds	r0, r2, r3
 800a1a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1a6:	69fb      	ldr	r3, [r7, #28]
 800a1a8:	18d1      	adds	r1, r2, r3
 800a1aa:	69fb      	ldr	r3, [r7, #28]
 800a1ac:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800a1b0:	3304      	adds	r3, #4
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	f014 f860 	bl	801e278 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800a1b8:	6a3b      	ldr	r3, [r7, #32]
 800a1ba:	68db      	ldr	r3, [r3, #12]
 800a1bc:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800a1be:	6a3b      	ldr	r3, [r7, #32]
 800a1c0:	689b      	ldr	r3, [r3, #8]
 800a1c2:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800a1c4:	69fa      	ldr	r2, [r7, #28]
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	4413      	add	r3, r2
 800a1ca:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800a1ce:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800a1d0:	69ba      	ldr	r2, [r7, #24]
 800a1d2:	69fb      	ldr	r3, [r7, #28]
 800a1d4:	1ad3      	subs	r3, r2, r3
 800a1d6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800a1da:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800a1e0:	697a      	ldr	r2, [r7, #20]
 800a1e2:	69fb      	ldr	r3, [r7, #28]
 800a1e4:	4413      	add	r3, r2
 800a1e6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d8d6      	bhi.n	800a19c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800a1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f0:	685a      	ldr	r2, [r3, #4]
 800a1f2:	69bb      	ldr	r3, [r7, #24]
 800a1f4:	18d0      	adds	r0, r2, r3
 800a1f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1f8:	69fb      	ldr	r3, [r7, #28]
 800a1fa:	4413      	add	r3, r2
 800a1fc:	697a      	ldr	r2, [r7, #20]
 800a1fe:	4619      	mov	r1, r3
 800a200:	f014 f83a 	bl	801e278 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800a204:	69fa      	ldr	r2, [r7, #28]
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	4413      	add	r3, r2
 800a20a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800a20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	62bb      	str	r3, [r7, #40]	; 0x28
 800a212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a214:	2b00      	cmp	r3, #0
 800a216:	d1bb      	bne.n	800a190 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800a218:	4b1a      	ldr	r3, [pc, #104]	; (800a284 <low_level_input+0x160>)
 800a21a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a21c:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800a21e:	2300      	movs	r3, #0
 800a220:	613b      	str	r3, [r7, #16]
 800a222:	e00b      	b.n	800a23c <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800a224:	6a3b      	ldr	r3, [r7, #32]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a22c:	6a3b      	ldr	r3, [r7, #32]
 800a22e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800a230:	6a3b      	ldr	r3, [r7, #32]
 800a232:	68db      	ldr	r3, [r3, #12]
 800a234:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	3301      	adds	r3, #1
 800a23a:	613b      	str	r3, [r7, #16]
 800a23c:	4b11      	ldr	r3, [pc, #68]	; (800a284 <low_level_input+0x160>)
 800a23e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a240:	693a      	ldr	r2, [r7, #16]
 800a242:	429a      	cmp	r2, r3
 800a244:	d3ee      	bcc.n	800a224 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800a246:	4b0f      	ldr	r3, [pc, #60]	; (800a284 <low_level_input+0x160>)
 800a248:	2200      	movs	r2, #0
 800a24a:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800a24c:	4b0d      	ldr	r3, [pc, #52]	; (800a284 <low_level_input+0x160>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a254:	695b      	ldr	r3, [r3, #20]
 800a256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d00d      	beq.n	800a27a <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800a25e:	4b09      	ldr	r3, [pc, #36]	; (800a284 <low_level_input+0x160>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a266:	461a      	mov	r2, r3
 800a268:	2380      	movs	r3, #128	; 0x80
 800a26a:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800a26c:	4b05      	ldr	r3, [pc, #20]	; (800a284 <low_level_input+0x160>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a274:	461a      	mov	r2, r3
 800a276:	2300      	movs	r3, #0
 800a278:	6093      	str	r3, [r2, #8]
  }
  return p;
 800a27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3730      	adds	r7, #48	; 0x30
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}
 800a284:	20004064 	.word	0x20004064

0800a288 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a294:	4b12      	ldr	r3, [pc, #72]	; (800a2e0 <ethernetif_input+0x58>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f04f 31ff 	mov.w	r1, #4294967295
 800a29c:	4618      	mov	r0, r3
 800a29e:	f004 fa79 	bl	800e794 <osSemaphoreAcquire>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d1f5      	bne.n	800a294 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800a2a8:	480e      	ldr	r0, [pc, #56]	; (800a2e4 <ethernetif_input+0x5c>)
 800a2aa:	f013 ff57 	bl	801e15c <sys_mutex_lock>
        p = low_level_input( netif );
 800a2ae:	68f8      	ldr	r0, [r7, #12]
 800a2b0:	f7ff ff38 	bl	800a124 <low_level_input>
 800a2b4:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d00a      	beq.n	800a2d2 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	691b      	ldr	r3, [r3, #16]
 800a2c0:	68f9      	ldr	r1, [r7, #12]
 800a2c2:	68b8      	ldr	r0, [r7, #8]
 800a2c4:	4798      	blx	r3
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d002      	beq.n	800a2d2 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 800a2cc:	68b8      	ldr	r0, [r7, #8]
 800a2ce:	f009 faf7 	bl	80138c0 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800a2d2:	4804      	ldr	r0, [pc, #16]	; (800a2e4 <ethernetif_input+0x5c>)
 800a2d4:	f013 ff51 	bl	801e17a <sys_mutex_unlock>
      } while(p!=NULL);
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d1e4      	bne.n	800a2a8 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a2de:	e7d9      	b.n	800a294 <ethernetif_input+0xc>
 800a2e0:	20004060 	.word	0x20004060
 800a2e4:	20008a3c 	.word	0x20008a3c

0800a2e8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d106      	bne.n	800a304 <ethernetif_init+0x1c>
 800a2f6:	4b0e      	ldr	r3, [pc, #56]	; (800a330 <ethernetif_init+0x48>)
 800a2f8:	f240 223b 	movw	r2, #571	; 0x23b
 800a2fc:	490d      	ldr	r1, [pc, #52]	; (800a334 <ethernetif_init+0x4c>)
 800a2fe:	480e      	ldr	r0, [pc, #56]	; (800a338 <ethernetif_init+0x50>)
 800a300:	f013 ffea 	bl	801e2d8 <printf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2273      	movs	r2, #115	; 0x73
 800a308:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2274      	movs	r2, #116	; 0x74
 800a310:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	4a09      	ldr	r2, [pc, #36]	; (800a33c <ethernetif_init+0x54>)
 800a318:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	4a08      	ldr	r2, [pc, #32]	; (800a340 <ethernetif_init+0x58>)
 800a31e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f7ff fd8d 	bl	8009e40 <low_level_init>

  return ERR_OK;
 800a326:	2300      	movs	r3, #0
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3708      	adds	r7, #8
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}
 800a330:	08024508 	.word	0x08024508
 800a334:	08024524 	.word	0x08024524
 800a338:	08024534 	.word	0x08024534
 800a33c:	0801c2fd 	.word	0x0801c2fd
 800a340:	08009fe9 	.word	0x08009fe9

0800a344 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a348:	f7f8 fb0c 	bl	8002964 <HAL_GetTick>
 800a34c:	4603      	mov	r3, r0
}
 800a34e:	4618      	mov	r0, r3
 800a350:	bd80      	pop	{r7, pc}
	...

0800a354 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800a35c:	2300      	movs	r3, #0
 800a35e:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800a364:	f107 0308 	add.w	r3, r7, #8
 800a368:	461a      	mov	r2, r3
 800a36a:	2101      	movs	r1, #1
 800a36c:	4816      	ldr	r0, [pc, #88]	; (800a3c8 <ethernetif_set_link+0x74>)
 800a36e:	f7fa fae9 	bl	8004944 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	f003 0304 	and.w	r3, r3, #4
 800a378:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a382:	f003 0304 	and.w	r3, r3, #4
 800a386:	2b00      	cmp	r3, #0
 800a388:	d108      	bne.n	800a39c <ethernetif_set_link+0x48>
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d005      	beq.n	800a39c <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4618      	mov	r0, r3
 800a396:	f008 fe7d 	bl	8013094 <netif_set_link_up>
 800a39a:	e011      	b.n	800a3c0 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a3a4:	089b      	lsrs	r3, r3, #2
 800a3a6:	f003 0301 	and.w	r3, r3, #1
 800a3aa:	b2db      	uxtb	r3, r3
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d007      	beq.n	800a3c0 <ethernetif_set_link+0x6c>
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d104      	bne.n	800a3c0 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f008 fea2 	bl	8013104 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 800a3c0:	20c8      	movs	r0, #200	; 0xc8
 800a3c2:	f004 f834 	bl	800e42e <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800a3c6:	e7cd      	b.n	800a364 <ethernetif_set_link+0x10>
 800a3c8:	20004064 	.word	0x20004064

0800a3cc <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a3e2:	089b      	lsrs	r3, r3, #2
 800a3e4:	f003 0301 	and.w	r3, r3, #1
 800a3e8:	b2db      	uxtb	r3, r3
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d05d      	beq.n	800a4aa <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800a3ee:	4b34      	ldr	r3, [pc, #208]	; (800a4c0 <ethernetif_update_config+0xf4>)
 800a3f0:	685b      	ldr	r3, [r3, #4]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d03f      	beq.n	800a476 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800a3f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a3fa:	2100      	movs	r1, #0
 800a3fc:	4830      	ldr	r0, [pc, #192]	; (800a4c0 <ethernetif_update_config+0xf4>)
 800a3fe:	f7fa fb09 	bl	8004a14 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800a402:	f7f8 faaf 	bl	8002964 <HAL_GetTick>
 800a406:	4603      	mov	r3, r0
 800a408:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800a40a:	f107 0308 	add.w	r3, r7, #8
 800a40e:	461a      	mov	r2, r3
 800a410:	2101      	movs	r1, #1
 800a412:	482b      	ldr	r0, [pc, #172]	; (800a4c0 <ethernetif_update_config+0xf4>)
 800a414:	f7fa fa96 	bl	8004944 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800a418:	f7f8 faa4 	bl	8002964 <HAL_GetTick>
 800a41c:	4602      	mov	r2, r0
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	1ad3      	subs	r3, r2, r3
 800a422:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a426:	d828      	bhi.n	800a47a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	f003 0320 	and.w	r3, r3, #32
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d0eb      	beq.n	800a40a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800a432:	f107 0308 	add.w	r3, r7, #8
 800a436:	461a      	mov	r2, r3
 800a438:	2110      	movs	r1, #16
 800a43a:	4821      	ldr	r0, [pc, #132]	; (800a4c0 <ethernetif_update_config+0xf4>)
 800a43c:	f7fa fa82 	bl	8004944 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	f003 0304 	and.w	r3, r3, #4
 800a446:	2b00      	cmp	r3, #0
 800a448:	d004      	beq.n	800a454 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800a44a:	4b1d      	ldr	r3, [pc, #116]	; (800a4c0 <ethernetif_update_config+0xf4>)
 800a44c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a450:	60da      	str	r2, [r3, #12]
 800a452:	e002      	b.n	800a45a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800a454:	4b1a      	ldr	r3, [pc, #104]	; (800a4c0 <ethernetif_update_config+0xf4>)
 800a456:	2200      	movs	r2, #0
 800a458:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	f003 0302 	and.w	r3, r3, #2
 800a460:	2b00      	cmp	r3, #0
 800a462:	d003      	beq.n	800a46c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800a464:	4b16      	ldr	r3, [pc, #88]	; (800a4c0 <ethernetif_update_config+0xf4>)
 800a466:	2200      	movs	r2, #0
 800a468:	609a      	str	r2, [r3, #8]
 800a46a:	e016      	b.n	800a49a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800a46c:	4b14      	ldr	r3, [pc, #80]	; (800a4c0 <ethernetif_update_config+0xf4>)
 800a46e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a472:	609a      	str	r2, [r3, #8]
 800a474:	e011      	b.n	800a49a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800a476:	bf00      	nop
 800a478:	e000      	b.n	800a47c <ethernetif_update_config+0xb0>
          goto error;
 800a47a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800a47c:	4b10      	ldr	r3, [pc, #64]	; (800a4c0 <ethernetif_update_config+0xf4>)
 800a47e:	68db      	ldr	r3, [r3, #12]
 800a480:	08db      	lsrs	r3, r3, #3
 800a482:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800a484:	4b0e      	ldr	r3, [pc, #56]	; (800a4c0 <ethernetif_update_config+0xf4>)
 800a486:	689b      	ldr	r3, [r3, #8]
 800a488:	085b      	lsrs	r3, r3, #1
 800a48a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800a48c:	4313      	orrs	r3, r2
 800a48e:	b29b      	uxth	r3, r3
 800a490:	461a      	mov	r2, r3
 800a492:	2100      	movs	r1, #0
 800a494:	480a      	ldr	r0, [pc, #40]	; (800a4c0 <ethernetif_update_config+0xf4>)
 800a496:	f7fa fabd 	bl	8004a14 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800a49a:	2100      	movs	r1, #0
 800a49c:	4808      	ldr	r0, [pc, #32]	; (800a4c0 <ethernetif_update_config+0xf4>)
 800a49e:	f7fa fb7d 	bl	8004b9c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800a4a2:	4807      	ldr	r0, [pc, #28]	; (800a4c0 <ethernetif_update_config+0xf4>)
 800a4a4:	f7fa fb1c 	bl	8004ae0 <HAL_ETH_Start>
 800a4a8:	e002      	b.n	800a4b0 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800a4aa:	4805      	ldr	r0, [pc, #20]	; (800a4c0 <ethernetif_update_config+0xf4>)
 800a4ac:	f7fa fb47 	bl	8004b3e <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f000 f807 	bl	800a4c4 <ethernetif_notify_conn_changed>
}
 800a4b6:	bf00      	nop
 800a4b8:	3710      	adds	r7, #16
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	20004064 	.word	0x20004064

0800a4c4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800a4cc:	bf00      	nop
 800a4ce:	370c      	adds	r7, #12
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b084      	sub	sp, #16
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	4603      	mov	r3, r0
 800a4e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a4e2:	79fb      	ldrb	r3, [r7, #7]
 800a4e4:	4a08      	ldr	r2, [pc, #32]	; (800a508 <disk_status+0x30>)
 800a4e6:	009b      	lsls	r3, r3, #2
 800a4e8:	4413      	add	r3, r2
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	79fa      	ldrb	r2, [r7, #7]
 800a4f0:	4905      	ldr	r1, [pc, #20]	; (800a508 <disk_status+0x30>)
 800a4f2:	440a      	add	r2, r1
 800a4f4:	7a12      	ldrb	r2, [r2, #8]
 800a4f6:	4610      	mov	r0, r2
 800a4f8:	4798      	blx	r3
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a4fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800a500:	4618      	mov	r0, r3
 800a502:	3710      	adds	r7, #16
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}
 800a508:	200040d4 	.word	0x200040d4

0800a50c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b084      	sub	sp, #16
 800a510:	af00      	add	r7, sp, #0
 800a512:	4603      	mov	r3, r0
 800a514:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a516:	2300      	movs	r3, #0
 800a518:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a51a:	79fb      	ldrb	r3, [r7, #7]
 800a51c:	4a0d      	ldr	r2, [pc, #52]	; (800a554 <disk_initialize+0x48>)
 800a51e:	5cd3      	ldrb	r3, [r2, r3]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d111      	bne.n	800a548 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a524:	79fb      	ldrb	r3, [r7, #7]
 800a526:	4a0b      	ldr	r2, [pc, #44]	; (800a554 <disk_initialize+0x48>)
 800a528:	2101      	movs	r1, #1
 800a52a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a52c:	79fb      	ldrb	r3, [r7, #7]
 800a52e:	4a09      	ldr	r2, [pc, #36]	; (800a554 <disk_initialize+0x48>)
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	4413      	add	r3, r2
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	79fa      	ldrb	r2, [r7, #7]
 800a53a:	4906      	ldr	r1, [pc, #24]	; (800a554 <disk_initialize+0x48>)
 800a53c:	440a      	add	r2, r1
 800a53e:	7a12      	ldrb	r2, [r2, #8]
 800a540:	4610      	mov	r0, r2
 800a542:	4798      	blx	r3
 800a544:	4603      	mov	r3, r0
 800a546:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a548:	7bfb      	ldrb	r3, [r7, #15]
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3710      	adds	r7, #16
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop
 800a554:	200040d4 	.word	0x200040d4

0800a558 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a558:	b590      	push	{r4, r7, lr}
 800a55a:	b087      	sub	sp, #28
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	60b9      	str	r1, [r7, #8]
 800a560:	607a      	str	r2, [r7, #4]
 800a562:	603b      	str	r3, [r7, #0]
 800a564:	4603      	mov	r3, r0
 800a566:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a568:	7bfb      	ldrb	r3, [r7, #15]
 800a56a:	4a0a      	ldr	r2, [pc, #40]	; (800a594 <disk_read+0x3c>)
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	4413      	add	r3, r2
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	689c      	ldr	r4, [r3, #8]
 800a574:	7bfb      	ldrb	r3, [r7, #15]
 800a576:	4a07      	ldr	r2, [pc, #28]	; (800a594 <disk_read+0x3c>)
 800a578:	4413      	add	r3, r2
 800a57a:	7a18      	ldrb	r0, [r3, #8]
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	687a      	ldr	r2, [r7, #4]
 800a580:	68b9      	ldr	r1, [r7, #8]
 800a582:	47a0      	blx	r4
 800a584:	4603      	mov	r3, r0
 800a586:	75fb      	strb	r3, [r7, #23]
  return res;
 800a588:	7dfb      	ldrb	r3, [r7, #23]
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	371c      	adds	r7, #28
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd90      	pop	{r4, r7, pc}
 800a592:	bf00      	nop
 800a594:	200040d4 	.word	0x200040d4

0800a598 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a598:	b590      	push	{r4, r7, lr}
 800a59a:	b087      	sub	sp, #28
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	60b9      	str	r1, [r7, #8]
 800a5a0:	607a      	str	r2, [r7, #4]
 800a5a2:	603b      	str	r3, [r7, #0]
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a5a8:	7bfb      	ldrb	r3, [r7, #15]
 800a5aa:	4a0a      	ldr	r2, [pc, #40]	; (800a5d4 <disk_write+0x3c>)
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	4413      	add	r3, r2
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	68dc      	ldr	r4, [r3, #12]
 800a5b4:	7bfb      	ldrb	r3, [r7, #15]
 800a5b6:	4a07      	ldr	r2, [pc, #28]	; (800a5d4 <disk_write+0x3c>)
 800a5b8:	4413      	add	r3, r2
 800a5ba:	7a18      	ldrb	r0, [r3, #8]
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	687a      	ldr	r2, [r7, #4]
 800a5c0:	68b9      	ldr	r1, [r7, #8]
 800a5c2:	47a0      	blx	r4
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	75fb      	strb	r3, [r7, #23]
  return res;
 800a5c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	371c      	adds	r7, #28
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd90      	pop	{r4, r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	200040d4 	.word	0x200040d4

0800a5d8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b084      	sub	sp, #16
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	4603      	mov	r3, r0
 800a5e0:	603a      	str	r2, [r7, #0]
 800a5e2:	71fb      	strb	r3, [r7, #7]
 800a5e4:	460b      	mov	r3, r1
 800a5e6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a5e8:	79fb      	ldrb	r3, [r7, #7]
 800a5ea:	4a09      	ldr	r2, [pc, #36]	; (800a610 <disk_ioctl+0x38>)
 800a5ec:	009b      	lsls	r3, r3, #2
 800a5ee:	4413      	add	r3, r2
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	691b      	ldr	r3, [r3, #16]
 800a5f4:	79fa      	ldrb	r2, [r7, #7]
 800a5f6:	4906      	ldr	r1, [pc, #24]	; (800a610 <disk_ioctl+0x38>)
 800a5f8:	440a      	add	r2, r1
 800a5fa:	7a10      	ldrb	r0, [r2, #8]
 800a5fc:	79b9      	ldrb	r1, [r7, #6]
 800a5fe:	683a      	ldr	r2, [r7, #0]
 800a600:	4798      	blx	r3
 800a602:	4603      	mov	r3, r0
 800a604:	73fb      	strb	r3, [r7, #15]
  return res;
 800a606:	7bfb      	ldrb	r3, [r7, #15]
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3710      	adds	r7, #16
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}
 800a610:	200040d4 	.word	0x200040d4

0800a614 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a614:	b480      	push	{r7}
 800a616:	b085      	sub	sp, #20
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	3301      	adds	r3, #1
 800a620:	781b      	ldrb	r3, [r3, #0]
 800a622:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a624:	89fb      	ldrh	r3, [r7, #14]
 800a626:	021b      	lsls	r3, r3, #8
 800a628:	b21a      	sxth	r2, r3
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	781b      	ldrb	r3, [r3, #0]
 800a62e:	b21b      	sxth	r3, r3
 800a630:	4313      	orrs	r3, r2
 800a632:	b21b      	sxth	r3, r3
 800a634:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a636:	89fb      	ldrh	r3, [r7, #14]
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3714      	adds	r7, #20
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr

0800a644 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a644:	b480      	push	{r7}
 800a646:	b085      	sub	sp, #20
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	3303      	adds	r3, #3
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	021b      	lsls	r3, r3, #8
 800a658:	687a      	ldr	r2, [r7, #4]
 800a65a:	3202      	adds	r2, #2
 800a65c:	7812      	ldrb	r2, [r2, #0]
 800a65e:	4313      	orrs	r3, r2
 800a660:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	021b      	lsls	r3, r3, #8
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	3201      	adds	r2, #1
 800a66a:	7812      	ldrb	r2, [r2, #0]
 800a66c:	4313      	orrs	r3, r2
 800a66e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	021b      	lsls	r3, r3, #8
 800a674:	687a      	ldr	r2, [r7, #4]
 800a676:	7812      	ldrb	r2, [r2, #0]
 800a678:	4313      	orrs	r3, r2
 800a67a:	60fb      	str	r3, [r7, #12]
	return rv;
 800a67c:	68fb      	ldr	r3, [r7, #12]
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3714      	adds	r7, #20
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr

0800a68a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a68a:	b480      	push	{r7}
 800a68c:	b083      	sub	sp, #12
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
 800a692:	460b      	mov	r3, r1
 800a694:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	1c5a      	adds	r2, r3, #1
 800a69a:	607a      	str	r2, [r7, #4]
 800a69c:	887a      	ldrh	r2, [r7, #2]
 800a69e:	b2d2      	uxtb	r2, r2
 800a6a0:	701a      	strb	r2, [r3, #0]
 800a6a2:	887b      	ldrh	r3, [r7, #2]
 800a6a4:	0a1b      	lsrs	r3, r3, #8
 800a6a6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	1c5a      	adds	r2, r3, #1
 800a6ac:	607a      	str	r2, [r7, #4]
 800a6ae:	887a      	ldrh	r2, [r7, #2]
 800a6b0:	b2d2      	uxtb	r2, r2
 800a6b2:	701a      	strb	r2, [r3, #0]
}
 800a6b4:	bf00      	nop
 800a6b6:	370c      	adds	r7, #12
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr

0800a6c0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b083      	sub	sp, #12
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	1c5a      	adds	r2, r3, #1
 800a6ce:	607a      	str	r2, [r7, #4]
 800a6d0:	683a      	ldr	r2, [r7, #0]
 800a6d2:	b2d2      	uxtb	r2, r2
 800a6d4:	701a      	strb	r2, [r3, #0]
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	0a1b      	lsrs	r3, r3, #8
 800a6da:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	1c5a      	adds	r2, r3, #1
 800a6e0:	607a      	str	r2, [r7, #4]
 800a6e2:	683a      	ldr	r2, [r7, #0]
 800a6e4:	b2d2      	uxtb	r2, r2
 800a6e6:	701a      	strb	r2, [r3, #0]
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	0a1b      	lsrs	r3, r3, #8
 800a6ec:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	1c5a      	adds	r2, r3, #1
 800a6f2:	607a      	str	r2, [r7, #4]
 800a6f4:	683a      	ldr	r2, [r7, #0]
 800a6f6:	b2d2      	uxtb	r2, r2
 800a6f8:	701a      	strb	r2, [r3, #0]
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	0a1b      	lsrs	r3, r3, #8
 800a6fe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	1c5a      	adds	r2, r3, #1
 800a704:	607a      	str	r2, [r7, #4]
 800a706:	683a      	ldr	r2, [r7, #0]
 800a708:	b2d2      	uxtb	r2, r2
 800a70a:	701a      	strb	r2, [r3, #0]
}
 800a70c:	bf00      	nop
 800a70e:	370c      	adds	r7, #12
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr

0800a718 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a718:	b480      	push	{r7}
 800a71a:	b087      	sub	sp, #28
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	60f8      	str	r0, [r7, #12]
 800a720:	60b9      	str	r1, [r7, #8]
 800a722:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d00d      	beq.n	800a74e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a732:	693a      	ldr	r2, [r7, #16]
 800a734:	1c53      	adds	r3, r2, #1
 800a736:	613b      	str	r3, [r7, #16]
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	1c59      	adds	r1, r3, #1
 800a73c:	6179      	str	r1, [r7, #20]
 800a73e:	7812      	ldrb	r2, [r2, #0]
 800a740:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	3b01      	subs	r3, #1
 800a746:	607b      	str	r3, [r7, #4]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d1f1      	bne.n	800a732 <mem_cpy+0x1a>
	}
}
 800a74e:	bf00      	nop
 800a750:	371c      	adds	r7, #28
 800a752:	46bd      	mov	sp, r7
 800a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a758:	4770      	bx	lr

0800a75a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a75a:	b480      	push	{r7}
 800a75c:	b087      	sub	sp, #28
 800a75e:	af00      	add	r7, sp, #0
 800a760:	60f8      	str	r0, [r7, #12]
 800a762:	60b9      	str	r1, [r7, #8]
 800a764:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	1c5a      	adds	r2, r3, #1
 800a76e:	617a      	str	r2, [r7, #20]
 800a770:	68ba      	ldr	r2, [r7, #8]
 800a772:	b2d2      	uxtb	r2, r2
 800a774:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	3b01      	subs	r3, #1
 800a77a:	607b      	str	r3, [r7, #4]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d1f3      	bne.n	800a76a <mem_set+0x10>
}
 800a782:	bf00      	nop
 800a784:	bf00      	nop
 800a786:	371c      	adds	r7, #28
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr

0800a790 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a790:	b480      	push	{r7}
 800a792:	b089      	sub	sp, #36	; 0x24
 800a794:	af00      	add	r7, sp, #0
 800a796:	60f8      	str	r0, [r7, #12]
 800a798:	60b9      	str	r1, [r7, #8]
 800a79a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	61fb      	str	r3, [r7, #28]
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a7a8:	69fb      	ldr	r3, [r7, #28]
 800a7aa:	1c5a      	adds	r2, r3, #1
 800a7ac:	61fa      	str	r2, [r7, #28]
 800a7ae:	781b      	ldrb	r3, [r3, #0]
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	69bb      	ldr	r3, [r7, #24]
 800a7b4:	1c5a      	adds	r2, r3, #1
 800a7b6:	61ba      	str	r2, [r7, #24]
 800a7b8:	781b      	ldrb	r3, [r3, #0]
 800a7ba:	1acb      	subs	r3, r1, r3
 800a7bc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	3b01      	subs	r3, #1
 800a7c2:	607b      	str	r3, [r7, #4]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d002      	beq.n	800a7d0 <mem_cmp+0x40>
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d0eb      	beq.n	800a7a8 <mem_cmp+0x18>

	return r;
 800a7d0:	697b      	ldr	r3, [r7, #20]
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3724      	adds	r7, #36	; 0x24
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr

0800a7de <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a7de:	b480      	push	{r7}
 800a7e0:	b083      	sub	sp, #12
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
 800a7e6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a7e8:	e002      	b.n	800a7f0 <chk_chr+0x12>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	607b      	str	r3, [r7, #4]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d005      	beq.n	800a804 <chk_chr+0x26>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	4293      	cmp	r3, r2
 800a802:	d1f2      	bne.n	800a7ea <chk_chr+0xc>
	return *str;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	781b      	ldrb	r3, [r3, #0]
}
 800a808:	4618      	mov	r0, r3
 800a80a:	370c      	adds	r7, #12
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr

0800a814 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b082      	sub	sp, #8
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d009      	beq.n	800a836 <lock_fs+0x22>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	691b      	ldr	r3, [r3, #16]
 800a826:	4618      	mov	r0, r3
 800a828:	f003 fc99 	bl	800e15e <ff_req_grant>
 800a82c:	4603      	mov	r3, r0
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d001      	beq.n	800a836 <lock_fs+0x22>
 800a832:	2301      	movs	r3, #1
 800a834:	e000      	b.n	800a838 <lock_fs+0x24>
 800a836:	2300      	movs	r3, #0
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3708      	adds	r7, #8
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b082      	sub	sp, #8
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
 800a848:	460b      	mov	r3, r1
 800a84a:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d00d      	beq.n	800a86e <unlock_fs+0x2e>
 800a852:	78fb      	ldrb	r3, [r7, #3]
 800a854:	2b0c      	cmp	r3, #12
 800a856:	d00a      	beq.n	800a86e <unlock_fs+0x2e>
 800a858:	78fb      	ldrb	r3, [r7, #3]
 800a85a:	2b0b      	cmp	r3, #11
 800a85c:	d007      	beq.n	800a86e <unlock_fs+0x2e>
 800a85e:	78fb      	ldrb	r3, [r7, #3]
 800a860:	2b0f      	cmp	r3, #15
 800a862:	d004      	beq.n	800a86e <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	691b      	ldr	r3, [r3, #16]
 800a868:	4618      	mov	r0, r3
 800a86a:	f003 fc8d 	bl	800e188 <ff_rel_grant>
	}
}
 800a86e:	bf00      	nop
 800a870:	3708      	adds	r7, #8
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
	...

0800a878 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a878:	b480      	push	{r7}
 800a87a:	b085      	sub	sp, #20
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a882:	2300      	movs	r3, #0
 800a884:	60bb      	str	r3, [r7, #8]
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	60fb      	str	r3, [r7, #12]
 800a88a:	e029      	b.n	800a8e0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a88c:	4a27      	ldr	r2, [pc, #156]	; (800a92c <chk_lock+0xb4>)
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	011b      	lsls	r3, r3, #4
 800a892:	4413      	add	r3, r2
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d01d      	beq.n	800a8d6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a89a:	4a24      	ldr	r2, [pc, #144]	; (800a92c <chk_lock+0xb4>)
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	011b      	lsls	r3, r3, #4
 800a8a0:	4413      	add	r3, r2
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d116      	bne.n	800a8da <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a8ac:	4a1f      	ldr	r2, [pc, #124]	; (800a92c <chk_lock+0xb4>)
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	011b      	lsls	r3, r3, #4
 800a8b2:	4413      	add	r3, r2
 800a8b4:	3304      	adds	r3, #4
 800a8b6:	681a      	ldr	r2, [r3, #0]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d10c      	bne.n	800a8da <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a8c0:	4a1a      	ldr	r2, [pc, #104]	; (800a92c <chk_lock+0xb4>)
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	011b      	lsls	r3, r3, #4
 800a8c6:	4413      	add	r3, r2
 800a8c8:	3308      	adds	r3, #8
 800a8ca:	681a      	ldr	r2, [r3, #0]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d102      	bne.n	800a8da <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a8d4:	e007      	b.n	800a8e6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	3301      	adds	r3, #1
 800a8de:	60fb      	str	r3, [r7, #12]
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	d9d2      	bls.n	800a88c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2b02      	cmp	r3, #2
 800a8ea:	d109      	bne.n	800a900 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d102      	bne.n	800a8f8 <chk_lock+0x80>
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	2b02      	cmp	r3, #2
 800a8f6:	d101      	bne.n	800a8fc <chk_lock+0x84>
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	e010      	b.n	800a91e <chk_lock+0xa6>
 800a8fc:	2312      	movs	r3, #18
 800a8fe:	e00e      	b.n	800a91e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d108      	bne.n	800a918 <chk_lock+0xa0>
 800a906:	4a09      	ldr	r2, [pc, #36]	; (800a92c <chk_lock+0xb4>)
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	011b      	lsls	r3, r3, #4
 800a90c:	4413      	add	r3, r2
 800a90e:	330c      	adds	r3, #12
 800a910:	881b      	ldrh	r3, [r3, #0]
 800a912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a916:	d101      	bne.n	800a91c <chk_lock+0xa4>
 800a918:	2310      	movs	r3, #16
 800a91a:	e000      	b.n	800a91e <chk_lock+0xa6>
 800a91c:	2300      	movs	r3, #0
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3714      	adds	r7, #20
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr
 800a92a:	bf00      	nop
 800a92c:	200040b4 	.word	0x200040b4

0800a930 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a930:	b480      	push	{r7}
 800a932:	b083      	sub	sp, #12
 800a934:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a936:	2300      	movs	r3, #0
 800a938:	607b      	str	r3, [r7, #4]
 800a93a:	e002      	b.n	800a942 <enq_lock+0x12>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	3301      	adds	r3, #1
 800a940:	607b      	str	r3, [r7, #4]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2b01      	cmp	r3, #1
 800a946:	d806      	bhi.n	800a956 <enq_lock+0x26>
 800a948:	4a09      	ldr	r2, [pc, #36]	; (800a970 <enq_lock+0x40>)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	011b      	lsls	r3, r3, #4
 800a94e:	4413      	add	r3, r2
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d1f2      	bne.n	800a93c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2b02      	cmp	r3, #2
 800a95a:	bf14      	ite	ne
 800a95c:	2301      	movne	r3, #1
 800a95e:	2300      	moveq	r3, #0
 800a960:	b2db      	uxtb	r3, r3
}
 800a962:	4618      	mov	r0, r3
 800a964:	370c      	adds	r7, #12
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr
 800a96e:	bf00      	nop
 800a970:	200040b4 	.word	0x200040b4

0800a974 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a974:	b480      	push	{r7}
 800a976:	b085      	sub	sp, #20
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a97e:	2300      	movs	r3, #0
 800a980:	60fb      	str	r3, [r7, #12]
 800a982:	e01f      	b.n	800a9c4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a984:	4a41      	ldr	r2, [pc, #260]	; (800aa8c <inc_lock+0x118>)
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	011b      	lsls	r3, r3, #4
 800a98a:	4413      	add	r3, r2
 800a98c:	681a      	ldr	r2, [r3, #0]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	429a      	cmp	r2, r3
 800a994:	d113      	bne.n	800a9be <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a996:	4a3d      	ldr	r2, [pc, #244]	; (800aa8c <inc_lock+0x118>)
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	011b      	lsls	r3, r3, #4
 800a99c:	4413      	add	r3, r2
 800a99e:	3304      	adds	r3, #4
 800a9a0:	681a      	ldr	r2, [r3, #0]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d109      	bne.n	800a9be <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a9aa:	4a38      	ldr	r2, [pc, #224]	; (800aa8c <inc_lock+0x118>)
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	011b      	lsls	r3, r3, #4
 800a9b0:	4413      	add	r3, r2
 800a9b2:	3308      	adds	r3, #8
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d006      	beq.n	800a9cc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	3301      	adds	r3, #1
 800a9c2:	60fb      	str	r3, [r7, #12]
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	2b01      	cmp	r3, #1
 800a9c8:	d9dc      	bls.n	800a984 <inc_lock+0x10>
 800a9ca:	e000      	b.n	800a9ce <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a9cc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2b02      	cmp	r3, #2
 800a9d2:	d132      	bne.n	800aa3a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	60fb      	str	r3, [r7, #12]
 800a9d8:	e002      	b.n	800a9e0 <inc_lock+0x6c>
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	3301      	adds	r3, #1
 800a9de:	60fb      	str	r3, [r7, #12]
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2b01      	cmp	r3, #1
 800a9e4:	d806      	bhi.n	800a9f4 <inc_lock+0x80>
 800a9e6:	4a29      	ldr	r2, [pc, #164]	; (800aa8c <inc_lock+0x118>)
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	011b      	lsls	r3, r3, #4
 800a9ec:	4413      	add	r3, r2
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d1f2      	bne.n	800a9da <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2b02      	cmp	r3, #2
 800a9f8:	d101      	bne.n	800a9fe <inc_lock+0x8a>
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	e040      	b.n	800aa80 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681a      	ldr	r2, [r3, #0]
 800aa02:	4922      	ldr	r1, [pc, #136]	; (800aa8c <inc_lock+0x118>)
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	011b      	lsls	r3, r3, #4
 800aa08:	440b      	add	r3, r1
 800aa0a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	689a      	ldr	r2, [r3, #8]
 800aa10:	491e      	ldr	r1, [pc, #120]	; (800aa8c <inc_lock+0x118>)
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	011b      	lsls	r3, r3, #4
 800aa16:	440b      	add	r3, r1
 800aa18:	3304      	adds	r3, #4
 800aa1a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	695a      	ldr	r2, [r3, #20]
 800aa20:	491a      	ldr	r1, [pc, #104]	; (800aa8c <inc_lock+0x118>)
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	011b      	lsls	r3, r3, #4
 800aa26:	440b      	add	r3, r1
 800aa28:	3308      	adds	r3, #8
 800aa2a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800aa2c:	4a17      	ldr	r2, [pc, #92]	; (800aa8c <inc_lock+0x118>)
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	011b      	lsls	r3, r3, #4
 800aa32:	4413      	add	r3, r2
 800aa34:	330c      	adds	r3, #12
 800aa36:	2200      	movs	r2, #0
 800aa38:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d009      	beq.n	800aa54 <inc_lock+0xe0>
 800aa40:	4a12      	ldr	r2, [pc, #72]	; (800aa8c <inc_lock+0x118>)
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	011b      	lsls	r3, r3, #4
 800aa46:	4413      	add	r3, r2
 800aa48:	330c      	adds	r3, #12
 800aa4a:	881b      	ldrh	r3, [r3, #0]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d001      	beq.n	800aa54 <inc_lock+0xe0>
 800aa50:	2300      	movs	r3, #0
 800aa52:	e015      	b.n	800aa80 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d108      	bne.n	800aa6c <inc_lock+0xf8>
 800aa5a:	4a0c      	ldr	r2, [pc, #48]	; (800aa8c <inc_lock+0x118>)
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	011b      	lsls	r3, r3, #4
 800aa60:	4413      	add	r3, r2
 800aa62:	330c      	adds	r3, #12
 800aa64:	881b      	ldrh	r3, [r3, #0]
 800aa66:	3301      	adds	r3, #1
 800aa68:	b29a      	uxth	r2, r3
 800aa6a:	e001      	b.n	800aa70 <inc_lock+0xfc>
 800aa6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aa70:	4906      	ldr	r1, [pc, #24]	; (800aa8c <inc_lock+0x118>)
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	011b      	lsls	r3, r3, #4
 800aa76:	440b      	add	r3, r1
 800aa78:	330c      	adds	r3, #12
 800aa7a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	3301      	adds	r3, #1
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3714      	adds	r7, #20
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr
 800aa8c:	200040b4 	.word	0x200040b4

0800aa90 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b085      	sub	sp, #20
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	3b01      	subs	r3, #1
 800aa9c:	607b      	str	r3, [r7, #4]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	d825      	bhi.n	800aaf0 <dec_lock+0x60>
		n = Files[i].ctr;
 800aaa4:	4a17      	ldr	r2, [pc, #92]	; (800ab04 <dec_lock+0x74>)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	011b      	lsls	r3, r3, #4
 800aaaa:	4413      	add	r3, r2
 800aaac:	330c      	adds	r3, #12
 800aaae:	881b      	ldrh	r3, [r3, #0]
 800aab0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800aab2:	89fb      	ldrh	r3, [r7, #14]
 800aab4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aab8:	d101      	bne.n	800aabe <dec_lock+0x2e>
 800aaba:	2300      	movs	r3, #0
 800aabc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800aabe:	89fb      	ldrh	r3, [r7, #14]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d002      	beq.n	800aaca <dec_lock+0x3a>
 800aac4:	89fb      	ldrh	r3, [r7, #14]
 800aac6:	3b01      	subs	r3, #1
 800aac8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800aaca:	4a0e      	ldr	r2, [pc, #56]	; (800ab04 <dec_lock+0x74>)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	011b      	lsls	r3, r3, #4
 800aad0:	4413      	add	r3, r2
 800aad2:	330c      	adds	r3, #12
 800aad4:	89fa      	ldrh	r2, [r7, #14]
 800aad6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800aad8:	89fb      	ldrh	r3, [r7, #14]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d105      	bne.n	800aaea <dec_lock+0x5a>
 800aade:	4a09      	ldr	r2, [pc, #36]	; (800ab04 <dec_lock+0x74>)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	011b      	lsls	r3, r3, #4
 800aae4:	4413      	add	r3, r2
 800aae6:	2200      	movs	r2, #0
 800aae8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800aaea:	2300      	movs	r3, #0
 800aaec:	737b      	strb	r3, [r7, #13]
 800aaee:	e001      	b.n	800aaf4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800aaf0:	2302      	movs	r3, #2
 800aaf2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800aaf4:	7b7b      	ldrb	r3, [r7, #13]
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3714      	adds	r7, #20
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr
 800ab02:	bf00      	nop
 800ab04:	200040b4 	.word	0x200040b4

0800ab08 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b085      	sub	sp, #20
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ab10:	2300      	movs	r3, #0
 800ab12:	60fb      	str	r3, [r7, #12]
 800ab14:	e010      	b.n	800ab38 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ab16:	4a0d      	ldr	r2, [pc, #52]	; (800ab4c <clear_lock+0x44>)
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	011b      	lsls	r3, r3, #4
 800ab1c:	4413      	add	r3, r2
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	687a      	ldr	r2, [r7, #4]
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d105      	bne.n	800ab32 <clear_lock+0x2a>
 800ab26:	4a09      	ldr	r2, [pc, #36]	; (800ab4c <clear_lock+0x44>)
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	011b      	lsls	r3, r3, #4
 800ab2c:	4413      	add	r3, r2
 800ab2e:	2200      	movs	r2, #0
 800ab30:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	3301      	adds	r3, #1
 800ab36:	60fb      	str	r3, [r7, #12]
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2b01      	cmp	r3, #1
 800ab3c:	d9eb      	bls.n	800ab16 <clear_lock+0xe>
	}
}
 800ab3e:	bf00      	nop
 800ab40:	bf00      	nop
 800ab42:	3714      	adds	r7, #20
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr
 800ab4c:	200040b4 	.word	0x200040b4

0800ab50 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b086      	sub	sp, #24
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	78db      	ldrb	r3, [r3, #3]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d034      	beq.n	800abce <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab68:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	7858      	ldrb	r0, [r3, #1]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ab74:	2301      	movs	r3, #1
 800ab76:	697a      	ldr	r2, [r7, #20]
 800ab78:	f7ff fd0e 	bl	800a598 <disk_write>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d002      	beq.n	800ab88 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ab82:	2301      	movs	r3, #1
 800ab84:	73fb      	strb	r3, [r7, #15]
 800ab86:	e022      	b.n	800abce <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab92:	697a      	ldr	r2, [r7, #20]
 800ab94:	1ad2      	subs	r2, r2, r3
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6a1b      	ldr	r3, [r3, #32]
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d217      	bcs.n	800abce <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	789b      	ldrb	r3, [r3, #2]
 800aba2:	613b      	str	r3, [r7, #16]
 800aba4:	e010      	b.n	800abc8 <sync_window+0x78>
					wsect += fs->fsize;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6a1b      	ldr	r3, [r3, #32]
 800abaa:	697a      	ldr	r2, [r7, #20]
 800abac:	4413      	add	r3, r2
 800abae:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	7858      	ldrb	r0, [r3, #1]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800abba:	2301      	movs	r3, #1
 800abbc:	697a      	ldr	r2, [r7, #20]
 800abbe:	f7ff fceb 	bl	800a598 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	3b01      	subs	r3, #1
 800abc6:	613b      	str	r3, [r7, #16]
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	2b01      	cmp	r3, #1
 800abcc:	d8eb      	bhi.n	800aba6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800abce:	7bfb      	ldrb	r3, [r7, #15]
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3718      	adds	r7, #24
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b084      	sub	sp, #16
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800abe2:	2300      	movs	r3, #0
 800abe4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abea:	683a      	ldr	r2, [r7, #0]
 800abec:	429a      	cmp	r2, r3
 800abee:	d01b      	beq.n	800ac28 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f7ff ffad 	bl	800ab50 <sync_window>
 800abf6:	4603      	mov	r3, r0
 800abf8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800abfa:	7bfb      	ldrb	r3, [r7, #15]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d113      	bne.n	800ac28 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	7858      	ldrb	r0, [r3, #1]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	683a      	ldr	r2, [r7, #0]
 800ac0e:	f7ff fca3 	bl	800a558 <disk_read>
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d004      	beq.n	800ac22 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ac18:	f04f 33ff 	mov.w	r3, #4294967295
 800ac1c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	683a      	ldr	r2, [r7, #0]
 800ac26:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800ac28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3710      	adds	r7, #16
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
	...

0800ac34 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b084      	sub	sp, #16
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f7ff ff87 	bl	800ab50 <sync_window>
 800ac42:	4603      	mov	r3, r0
 800ac44:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ac46:	7bfb      	ldrb	r3, [r7, #15]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d158      	bne.n	800acfe <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	781b      	ldrb	r3, [r3, #0]
 800ac50:	2b03      	cmp	r3, #3
 800ac52:	d148      	bne.n	800ace6 <sync_fs+0xb2>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	791b      	ldrb	r3, [r3, #4]
 800ac58:	2b01      	cmp	r3, #1
 800ac5a:	d144      	bne.n	800ace6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	3338      	adds	r3, #56	; 0x38
 800ac60:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac64:	2100      	movs	r1, #0
 800ac66:	4618      	mov	r0, r3
 800ac68:	f7ff fd77 	bl	800a75a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	3338      	adds	r3, #56	; 0x38
 800ac70:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ac74:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f7ff fd06 	bl	800a68a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	3338      	adds	r3, #56	; 0x38
 800ac82:	4921      	ldr	r1, [pc, #132]	; (800ad08 <sync_fs+0xd4>)
 800ac84:	4618      	mov	r0, r3
 800ac86:	f7ff fd1b 	bl	800a6c0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	3338      	adds	r3, #56	; 0x38
 800ac8e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ac92:	491e      	ldr	r1, [pc, #120]	; (800ad0c <sync_fs+0xd8>)
 800ac94:	4618      	mov	r0, r3
 800ac96:	f7ff fd13 	bl	800a6c0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	3338      	adds	r3, #56	; 0x38
 800ac9e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	699b      	ldr	r3, [r3, #24]
 800aca6:	4619      	mov	r1, r3
 800aca8:	4610      	mov	r0, r2
 800acaa:	f7ff fd09 	bl	800a6c0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	3338      	adds	r3, #56	; 0x38
 800acb2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	695b      	ldr	r3, [r3, #20]
 800acba:	4619      	mov	r1, r3
 800acbc:	4610      	mov	r0, r2
 800acbe:	f7ff fcff 	bl	800a6c0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc6:	1c5a      	adds	r2, r3, #1
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	7858      	ldrb	r0, [r3, #1]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800acda:	2301      	movs	r3, #1
 800acdc:	f7ff fc5c 	bl	800a598 <disk_write>
			fs->fsi_flag = 0;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2200      	movs	r2, #0
 800ace4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	785b      	ldrb	r3, [r3, #1]
 800acea:	2200      	movs	r2, #0
 800acec:	2100      	movs	r1, #0
 800acee:	4618      	mov	r0, r3
 800acf0:	f7ff fc72 	bl	800a5d8 <disk_ioctl>
 800acf4:	4603      	mov	r3, r0
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d001      	beq.n	800acfe <sync_fs+0xca>
 800acfa:	2301      	movs	r3, #1
 800acfc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800acfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3710      	adds	r7, #16
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}
 800ad08:	41615252 	.word	0x41615252
 800ad0c:	61417272 	.word	0x61417272

0800ad10 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b083      	sub	sp, #12
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	3b02      	subs	r3, #2
 800ad1e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	69db      	ldr	r3, [r3, #28]
 800ad24:	3b02      	subs	r3, #2
 800ad26:	683a      	ldr	r2, [r7, #0]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d301      	bcc.n	800ad30 <clust2sect+0x20>
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	e008      	b.n	800ad42 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	895b      	ldrh	r3, [r3, #10]
 800ad34:	461a      	mov	r2, r3
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	fb03 f202 	mul.w	r2, r3, r2
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad40:	4413      	add	r3, r2
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	370c      	adds	r7, #12
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr

0800ad4e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ad4e:	b580      	push	{r7, lr}
 800ad50:	b086      	sub	sp, #24
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]
 800ad56:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	d904      	bls.n	800ad6e <get_fat+0x20>
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	69db      	ldr	r3, [r3, #28]
 800ad68:	683a      	ldr	r2, [r7, #0]
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d302      	bcc.n	800ad74 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ad6e:	2301      	movs	r3, #1
 800ad70:	617b      	str	r3, [r7, #20]
 800ad72:	e08f      	b.n	800ae94 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ad74:	f04f 33ff 	mov.w	r3, #4294967295
 800ad78:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	2b03      	cmp	r3, #3
 800ad80:	d062      	beq.n	800ae48 <get_fat+0xfa>
 800ad82:	2b03      	cmp	r3, #3
 800ad84:	dc7c      	bgt.n	800ae80 <get_fat+0x132>
 800ad86:	2b01      	cmp	r3, #1
 800ad88:	d002      	beq.n	800ad90 <get_fat+0x42>
 800ad8a:	2b02      	cmp	r3, #2
 800ad8c:	d042      	beq.n	800ae14 <get_fat+0xc6>
 800ad8e:	e077      	b.n	800ae80 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	60fb      	str	r3, [r7, #12]
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	085b      	lsrs	r3, r3, #1
 800ad98:	68fa      	ldr	r2, [r7, #12]
 800ad9a:	4413      	add	r3, r2
 800ad9c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	0a5b      	lsrs	r3, r3, #9
 800ada6:	4413      	add	r3, r2
 800ada8:	4619      	mov	r1, r3
 800adaa:	6938      	ldr	r0, [r7, #16]
 800adac:	f7ff ff14 	bl	800abd8 <move_window>
 800adb0:	4603      	mov	r3, r0
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d167      	bne.n	800ae86 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	1c5a      	adds	r2, r3, #1
 800adba:	60fa      	str	r2, [r7, #12]
 800adbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adc0:	693a      	ldr	r2, [r7, #16]
 800adc2:	4413      	add	r3, r2
 800adc4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800adc8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	0a5b      	lsrs	r3, r3, #9
 800add2:	4413      	add	r3, r2
 800add4:	4619      	mov	r1, r3
 800add6:	6938      	ldr	r0, [r7, #16]
 800add8:	f7ff fefe 	bl	800abd8 <move_window>
 800addc:	4603      	mov	r3, r0
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d153      	bne.n	800ae8a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ade8:	693a      	ldr	r2, [r7, #16]
 800adea:	4413      	add	r3, r2
 800adec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800adf0:	021b      	lsls	r3, r3, #8
 800adf2:	461a      	mov	r2, r3
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	4313      	orrs	r3, r2
 800adf8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	f003 0301 	and.w	r3, r3, #1
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d002      	beq.n	800ae0a <get_fat+0xbc>
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	091b      	lsrs	r3, r3, #4
 800ae08:	e002      	b.n	800ae10 <get_fat+0xc2>
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae10:	617b      	str	r3, [r7, #20]
			break;
 800ae12:	e03f      	b.n	800ae94 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	0a1b      	lsrs	r3, r3, #8
 800ae1c:	4413      	add	r3, r2
 800ae1e:	4619      	mov	r1, r3
 800ae20:	6938      	ldr	r0, [r7, #16]
 800ae22:	f7ff fed9 	bl	800abd8 <move_window>
 800ae26:	4603      	mov	r3, r0
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d130      	bne.n	800ae8e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	005b      	lsls	r3, r3, #1
 800ae36:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ae3a:	4413      	add	r3, r2
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f7ff fbe9 	bl	800a614 <ld_word>
 800ae42:	4603      	mov	r3, r0
 800ae44:	617b      	str	r3, [r7, #20]
			break;
 800ae46:	e025      	b.n	800ae94 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	09db      	lsrs	r3, r3, #7
 800ae50:	4413      	add	r3, r2
 800ae52:	4619      	mov	r1, r3
 800ae54:	6938      	ldr	r0, [r7, #16]
 800ae56:	f7ff febf 	bl	800abd8 <move_window>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d118      	bne.n	800ae92 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	009b      	lsls	r3, r3, #2
 800ae6a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ae6e:	4413      	add	r3, r2
 800ae70:	4618      	mov	r0, r3
 800ae72:	f7ff fbe7 	bl	800a644 <ld_dword>
 800ae76:	4603      	mov	r3, r0
 800ae78:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ae7c:	617b      	str	r3, [r7, #20]
			break;
 800ae7e:	e009      	b.n	800ae94 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ae80:	2301      	movs	r3, #1
 800ae82:	617b      	str	r3, [r7, #20]
 800ae84:	e006      	b.n	800ae94 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ae86:	bf00      	nop
 800ae88:	e004      	b.n	800ae94 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ae8a:	bf00      	nop
 800ae8c:	e002      	b.n	800ae94 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ae8e:	bf00      	nop
 800ae90:	e000      	b.n	800ae94 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ae92:	bf00      	nop
		}
	}

	return val;
 800ae94:	697b      	ldr	r3, [r7, #20]
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3718      	adds	r7, #24
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}

0800ae9e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ae9e:	b590      	push	{r4, r7, lr}
 800aea0:	b089      	sub	sp, #36	; 0x24
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	60f8      	str	r0, [r7, #12]
 800aea6:	60b9      	str	r1, [r7, #8]
 800aea8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800aeaa:	2302      	movs	r3, #2
 800aeac:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	f240 80d2 	bls.w	800b05a <put_fat+0x1bc>
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	69db      	ldr	r3, [r3, #28]
 800aeba:	68ba      	ldr	r2, [r7, #8]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	f080 80cc 	bcs.w	800b05a <put_fat+0x1bc>
		switch (fs->fs_type) {
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	2b03      	cmp	r3, #3
 800aec8:	f000 8096 	beq.w	800aff8 <put_fat+0x15a>
 800aecc:	2b03      	cmp	r3, #3
 800aece:	f300 80cd 	bgt.w	800b06c <put_fat+0x1ce>
 800aed2:	2b01      	cmp	r3, #1
 800aed4:	d002      	beq.n	800aedc <put_fat+0x3e>
 800aed6:	2b02      	cmp	r3, #2
 800aed8:	d06e      	beq.n	800afb8 <put_fat+0x11a>
 800aeda:	e0c7      	b.n	800b06c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	61bb      	str	r3, [r7, #24]
 800aee0:	69bb      	ldr	r3, [r7, #24]
 800aee2:	085b      	lsrs	r3, r3, #1
 800aee4:	69ba      	ldr	r2, [r7, #24]
 800aee6:	4413      	add	r3, r2
 800aee8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aeee:	69bb      	ldr	r3, [r7, #24]
 800aef0:	0a5b      	lsrs	r3, r3, #9
 800aef2:	4413      	add	r3, r2
 800aef4:	4619      	mov	r1, r3
 800aef6:	68f8      	ldr	r0, [r7, #12]
 800aef8:	f7ff fe6e 	bl	800abd8 <move_window>
 800aefc:	4603      	mov	r3, r0
 800aefe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800af00:	7ffb      	ldrb	r3, [r7, #31]
 800af02:	2b00      	cmp	r3, #0
 800af04:	f040 80ab 	bne.w	800b05e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800af0e:	69bb      	ldr	r3, [r7, #24]
 800af10:	1c59      	adds	r1, r3, #1
 800af12:	61b9      	str	r1, [r7, #24]
 800af14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af18:	4413      	add	r3, r2
 800af1a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	f003 0301 	and.w	r3, r3, #1
 800af22:	2b00      	cmp	r3, #0
 800af24:	d00d      	beq.n	800af42 <put_fat+0xa4>
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	781b      	ldrb	r3, [r3, #0]
 800af2a:	b25b      	sxtb	r3, r3
 800af2c:	f003 030f 	and.w	r3, r3, #15
 800af30:	b25a      	sxtb	r2, r3
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	b2db      	uxtb	r3, r3
 800af36:	011b      	lsls	r3, r3, #4
 800af38:	b25b      	sxtb	r3, r3
 800af3a:	4313      	orrs	r3, r2
 800af3c:	b25b      	sxtb	r3, r3
 800af3e:	b2db      	uxtb	r3, r3
 800af40:	e001      	b.n	800af46 <put_fat+0xa8>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	b2db      	uxtb	r3, r3
 800af46:	697a      	ldr	r2, [r7, #20]
 800af48:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2201      	movs	r2, #1
 800af4e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800af54:	69bb      	ldr	r3, [r7, #24]
 800af56:	0a5b      	lsrs	r3, r3, #9
 800af58:	4413      	add	r3, r2
 800af5a:	4619      	mov	r1, r3
 800af5c:	68f8      	ldr	r0, [r7, #12]
 800af5e:	f7ff fe3b 	bl	800abd8 <move_window>
 800af62:	4603      	mov	r3, r0
 800af64:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800af66:	7ffb      	ldrb	r3, [r7, #31]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d17a      	bne.n	800b062 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800af72:	69bb      	ldr	r3, [r7, #24]
 800af74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af78:	4413      	add	r3, r2
 800af7a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	f003 0301 	and.w	r3, r3, #1
 800af82:	2b00      	cmp	r3, #0
 800af84:	d003      	beq.n	800af8e <put_fat+0xf0>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	091b      	lsrs	r3, r3, #4
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	e00e      	b.n	800afac <put_fat+0x10e>
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	b25b      	sxtb	r3, r3
 800af94:	f023 030f 	bic.w	r3, r3, #15
 800af98:	b25a      	sxtb	r2, r3
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	0a1b      	lsrs	r3, r3, #8
 800af9e:	b25b      	sxtb	r3, r3
 800afa0:	f003 030f 	and.w	r3, r3, #15
 800afa4:	b25b      	sxtb	r3, r3
 800afa6:	4313      	orrs	r3, r2
 800afa8:	b25b      	sxtb	r3, r3
 800afaa:	b2db      	uxtb	r3, r3
 800afac:	697a      	ldr	r2, [r7, #20]
 800afae:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2201      	movs	r2, #1
 800afb4:	70da      	strb	r2, [r3, #3]
			break;
 800afb6:	e059      	b.n	800b06c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	0a1b      	lsrs	r3, r3, #8
 800afc0:	4413      	add	r3, r2
 800afc2:	4619      	mov	r1, r3
 800afc4:	68f8      	ldr	r0, [r7, #12]
 800afc6:	f7ff fe07 	bl	800abd8 <move_window>
 800afca:	4603      	mov	r3, r0
 800afcc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800afce:	7ffb      	ldrb	r3, [r7, #31]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d148      	bne.n	800b066 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	005b      	lsls	r3, r3, #1
 800afde:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800afe2:	4413      	add	r3, r2
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	b292      	uxth	r2, r2
 800afe8:	4611      	mov	r1, r2
 800afea:	4618      	mov	r0, r3
 800afec:	f7ff fb4d 	bl	800a68a <st_word>
			fs->wflag = 1;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2201      	movs	r2, #1
 800aff4:	70da      	strb	r2, [r3, #3]
			break;
 800aff6:	e039      	b.n	800b06c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	09db      	lsrs	r3, r3, #7
 800b000:	4413      	add	r3, r2
 800b002:	4619      	mov	r1, r3
 800b004:	68f8      	ldr	r0, [r7, #12]
 800b006:	f7ff fde7 	bl	800abd8 <move_window>
 800b00a:	4603      	mov	r3, r0
 800b00c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b00e:	7ffb      	ldrb	r3, [r7, #31]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d12a      	bne.n	800b06a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	009b      	lsls	r3, r3, #2
 800b024:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b028:	4413      	add	r3, r2
 800b02a:	4618      	mov	r0, r3
 800b02c:	f7ff fb0a 	bl	800a644 <ld_dword>
 800b030:	4603      	mov	r3, r0
 800b032:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b036:	4323      	orrs	r3, r4
 800b038:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	009b      	lsls	r3, r3, #2
 800b044:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b048:	4413      	add	r3, r2
 800b04a:	6879      	ldr	r1, [r7, #4]
 800b04c:	4618      	mov	r0, r3
 800b04e:	f7ff fb37 	bl	800a6c0 <st_dword>
			fs->wflag = 1;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2201      	movs	r2, #1
 800b056:	70da      	strb	r2, [r3, #3]
			break;
 800b058:	e008      	b.n	800b06c <put_fat+0x1ce>
		}
	}
 800b05a:	bf00      	nop
 800b05c:	e006      	b.n	800b06c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b05e:	bf00      	nop
 800b060:	e004      	b.n	800b06c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b062:	bf00      	nop
 800b064:	e002      	b.n	800b06c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b066:	bf00      	nop
 800b068:	e000      	b.n	800b06c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b06a:	bf00      	nop
	return res;
 800b06c:	7ffb      	ldrb	r3, [r7, #31]
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3724      	adds	r7, #36	; 0x24
 800b072:	46bd      	mov	sp, r7
 800b074:	bd90      	pop	{r4, r7, pc}

0800b076 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b076:	b580      	push	{r7, lr}
 800b078:	b088      	sub	sp, #32
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	60f8      	str	r0, [r7, #12]
 800b07e:	60b9      	str	r1, [r7, #8]
 800b080:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b082:	2300      	movs	r3, #0
 800b084:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	2b01      	cmp	r3, #1
 800b090:	d904      	bls.n	800b09c <remove_chain+0x26>
 800b092:	69bb      	ldr	r3, [r7, #24]
 800b094:	69db      	ldr	r3, [r3, #28]
 800b096:	68ba      	ldr	r2, [r7, #8]
 800b098:	429a      	cmp	r2, r3
 800b09a:	d301      	bcc.n	800b0a0 <remove_chain+0x2a>
 800b09c:	2302      	movs	r3, #2
 800b09e:	e04b      	b.n	800b138 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d00c      	beq.n	800b0c0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b0a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b0aa:	6879      	ldr	r1, [r7, #4]
 800b0ac:	69b8      	ldr	r0, [r7, #24]
 800b0ae:	f7ff fef6 	bl	800ae9e <put_fat>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b0b6:	7ffb      	ldrb	r3, [r7, #31]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d001      	beq.n	800b0c0 <remove_chain+0x4a>
 800b0bc:	7ffb      	ldrb	r3, [r7, #31]
 800b0be:	e03b      	b.n	800b138 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b0c0:	68b9      	ldr	r1, [r7, #8]
 800b0c2:	68f8      	ldr	r0, [r7, #12]
 800b0c4:	f7ff fe43 	bl	800ad4e <get_fat>
 800b0c8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d031      	beq.n	800b134 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	2b01      	cmp	r3, #1
 800b0d4:	d101      	bne.n	800b0da <remove_chain+0x64>
 800b0d6:	2302      	movs	r3, #2
 800b0d8:	e02e      	b.n	800b138 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0e0:	d101      	bne.n	800b0e6 <remove_chain+0x70>
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	e028      	b.n	800b138 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	68b9      	ldr	r1, [r7, #8]
 800b0ea:	69b8      	ldr	r0, [r7, #24]
 800b0ec:	f7ff fed7 	bl	800ae9e <put_fat>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b0f4:	7ffb      	ldrb	r3, [r7, #31]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d001      	beq.n	800b0fe <remove_chain+0x88>
 800b0fa:	7ffb      	ldrb	r3, [r7, #31]
 800b0fc:	e01c      	b.n	800b138 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b0fe:	69bb      	ldr	r3, [r7, #24]
 800b100:	699a      	ldr	r2, [r3, #24]
 800b102:	69bb      	ldr	r3, [r7, #24]
 800b104:	69db      	ldr	r3, [r3, #28]
 800b106:	3b02      	subs	r3, #2
 800b108:	429a      	cmp	r2, r3
 800b10a:	d20b      	bcs.n	800b124 <remove_chain+0xae>
			fs->free_clst++;
 800b10c:	69bb      	ldr	r3, [r7, #24]
 800b10e:	699b      	ldr	r3, [r3, #24]
 800b110:	1c5a      	adds	r2, r3, #1
 800b112:	69bb      	ldr	r3, [r7, #24]
 800b114:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800b116:	69bb      	ldr	r3, [r7, #24]
 800b118:	791b      	ldrb	r3, [r3, #4]
 800b11a:	f043 0301 	orr.w	r3, r3, #1
 800b11e:	b2da      	uxtb	r2, r3
 800b120:	69bb      	ldr	r3, [r7, #24]
 800b122:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b128:	69bb      	ldr	r3, [r7, #24]
 800b12a:	69db      	ldr	r3, [r3, #28]
 800b12c:	68ba      	ldr	r2, [r7, #8]
 800b12e:	429a      	cmp	r2, r3
 800b130:	d3c6      	bcc.n	800b0c0 <remove_chain+0x4a>
 800b132:	e000      	b.n	800b136 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b134:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b136:	2300      	movs	r3, #0
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3720      	adds	r7, #32
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b088      	sub	sp, #32
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d10d      	bne.n	800b172 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	695b      	ldr	r3, [r3, #20]
 800b15a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b15c:	69bb      	ldr	r3, [r7, #24]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d004      	beq.n	800b16c <create_chain+0x2c>
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	69db      	ldr	r3, [r3, #28]
 800b166:	69ba      	ldr	r2, [r7, #24]
 800b168:	429a      	cmp	r2, r3
 800b16a:	d31b      	bcc.n	800b1a4 <create_chain+0x64>
 800b16c:	2301      	movs	r3, #1
 800b16e:	61bb      	str	r3, [r7, #24]
 800b170:	e018      	b.n	800b1a4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b172:	6839      	ldr	r1, [r7, #0]
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f7ff fdea 	bl	800ad4e <get_fat>
 800b17a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	2b01      	cmp	r3, #1
 800b180:	d801      	bhi.n	800b186 <create_chain+0x46>
 800b182:	2301      	movs	r3, #1
 800b184:	e070      	b.n	800b268 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b18c:	d101      	bne.n	800b192 <create_chain+0x52>
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	e06a      	b.n	800b268 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	69db      	ldr	r3, [r3, #28]
 800b196:	68fa      	ldr	r2, [r7, #12]
 800b198:	429a      	cmp	r2, r3
 800b19a:	d201      	bcs.n	800b1a0 <create_chain+0x60>
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	e063      	b.n	800b268 <create_chain+0x128>
		scl = clst;
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b1a4:	69bb      	ldr	r3, [r7, #24]
 800b1a6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b1a8:	69fb      	ldr	r3, [r7, #28]
 800b1aa:	3301      	adds	r3, #1
 800b1ac:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	69db      	ldr	r3, [r3, #28]
 800b1b2:	69fa      	ldr	r2, [r7, #28]
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d307      	bcc.n	800b1c8 <create_chain+0x88>
				ncl = 2;
 800b1b8:	2302      	movs	r3, #2
 800b1ba:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b1bc:	69fa      	ldr	r2, [r7, #28]
 800b1be:	69bb      	ldr	r3, [r7, #24]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d901      	bls.n	800b1c8 <create_chain+0x88>
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	e04f      	b.n	800b268 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b1c8:	69f9      	ldr	r1, [r7, #28]
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f7ff fdbf 	bl	800ad4e <get_fat>
 800b1d0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d00e      	beq.n	800b1f6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	d003      	beq.n	800b1e6 <create_chain+0xa6>
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1e4:	d101      	bne.n	800b1ea <create_chain+0xaa>
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	e03e      	b.n	800b268 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b1ea:	69fa      	ldr	r2, [r7, #28]
 800b1ec:	69bb      	ldr	r3, [r7, #24]
 800b1ee:	429a      	cmp	r2, r3
 800b1f0:	d1da      	bne.n	800b1a8 <create_chain+0x68>
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	e038      	b.n	800b268 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b1f6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b1f8:	f04f 32ff 	mov.w	r2, #4294967295
 800b1fc:	69f9      	ldr	r1, [r7, #28]
 800b1fe:	6938      	ldr	r0, [r7, #16]
 800b200:	f7ff fe4d 	bl	800ae9e <put_fat>
 800b204:	4603      	mov	r3, r0
 800b206:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b208:	7dfb      	ldrb	r3, [r7, #23]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d109      	bne.n	800b222 <create_chain+0xe2>
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d006      	beq.n	800b222 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b214:	69fa      	ldr	r2, [r7, #28]
 800b216:	6839      	ldr	r1, [r7, #0]
 800b218:	6938      	ldr	r0, [r7, #16]
 800b21a:	f7ff fe40 	bl	800ae9e <put_fat>
 800b21e:	4603      	mov	r3, r0
 800b220:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b222:	7dfb      	ldrb	r3, [r7, #23]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d116      	bne.n	800b256 <create_chain+0x116>
		fs->last_clst = ncl;
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	69fa      	ldr	r2, [r7, #28]
 800b22c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	699a      	ldr	r2, [r3, #24]
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	69db      	ldr	r3, [r3, #28]
 800b236:	3b02      	subs	r3, #2
 800b238:	429a      	cmp	r2, r3
 800b23a:	d804      	bhi.n	800b246 <create_chain+0x106>
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	699b      	ldr	r3, [r3, #24]
 800b240:	1e5a      	subs	r2, r3, #1
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	791b      	ldrb	r3, [r3, #4]
 800b24a:	f043 0301 	orr.w	r3, r3, #1
 800b24e:	b2da      	uxtb	r2, r3
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	711a      	strb	r2, [r3, #4]
 800b254:	e007      	b.n	800b266 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b256:	7dfb      	ldrb	r3, [r7, #23]
 800b258:	2b01      	cmp	r3, #1
 800b25a:	d102      	bne.n	800b262 <create_chain+0x122>
 800b25c:	f04f 33ff 	mov.w	r3, #4294967295
 800b260:	e000      	b.n	800b264 <create_chain+0x124>
 800b262:	2301      	movs	r3, #1
 800b264:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b266:	69fb      	ldr	r3, [r7, #28]
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3720      	adds	r7, #32
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b270:	b480      	push	{r7}
 800b272:	b087      	sub	sp, #28
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b284:	3304      	adds	r3, #4
 800b286:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	0a5b      	lsrs	r3, r3, #9
 800b28c:	68fa      	ldr	r2, [r7, #12]
 800b28e:	8952      	ldrh	r2, [r2, #10]
 800b290:	fbb3 f3f2 	udiv	r3, r3, r2
 800b294:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	1d1a      	adds	r2, r3, #4
 800b29a:	613a      	str	r2, [r7, #16]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d101      	bne.n	800b2aa <clmt_clust+0x3a>
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	e010      	b.n	800b2cc <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b2aa:	697a      	ldr	r2, [r7, #20]
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	d307      	bcc.n	800b2c2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b2b2:	697a      	ldr	r2, [r7, #20]
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	1ad3      	subs	r3, r2, r3
 800b2b8:	617b      	str	r3, [r7, #20]
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	3304      	adds	r3, #4
 800b2be:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b2c0:	e7e9      	b.n	800b296 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b2c2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	681a      	ldr	r2, [r3, #0]
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	4413      	add	r3, r2
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	371c      	adds	r7, #28
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr

0800b2d8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b086      	sub	sp, #24
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b2ee:	d204      	bcs.n	800b2fa <dir_sdi+0x22>
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	f003 031f 	and.w	r3, r3, #31
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d001      	beq.n	800b2fe <dir_sdi+0x26>
		return FR_INT_ERR;
 800b2fa:	2302      	movs	r3, #2
 800b2fc:	e063      	b.n	800b3c6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	683a      	ldr	r2, [r7, #0]
 800b302:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	689b      	ldr	r3, [r3, #8]
 800b308:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d106      	bne.n	800b31e <dir_sdi+0x46>
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	2b02      	cmp	r3, #2
 800b316:	d902      	bls.n	800b31e <dir_sdi+0x46>
		clst = fs->dirbase;
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b31c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d10c      	bne.n	800b33e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	095b      	lsrs	r3, r3, #5
 800b328:	693a      	ldr	r2, [r7, #16]
 800b32a:	8912      	ldrh	r2, [r2, #8]
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d301      	bcc.n	800b334 <dir_sdi+0x5c>
 800b330:	2302      	movs	r3, #2
 800b332:	e048      	b.n	800b3c6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	61da      	str	r2, [r3, #28]
 800b33c:	e029      	b.n	800b392 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	895b      	ldrh	r3, [r3, #10]
 800b342:	025b      	lsls	r3, r3, #9
 800b344:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b346:	e019      	b.n	800b37c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6979      	ldr	r1, [r7, #20]
 800b34c:	4618      	mov	r0, r3
 800b34e:	f7ff fcfe 	bl	800ad4e <get_fat>
 800b352:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b35a:	d101      	bne.n	800b360 <dir_sdi+0x88>
 800b35c:	2301      	movs	r3, #1
 800b35e:	e032      	b.n	800b3c6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	2b01      	cmp	r3, #1
 800b364:	d904      	bls.n	800b370 <dir_sdi+0x98>
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	69db      	ldr	r3, [r3, #28]
 800b36a:	697a      	ldr	r2, [r7, #20]
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d301      	bcc.n	800b374 <dir_sdi+0x9c>
 800b370:	2302      	movs	r3, #2
 800b372:	e028      	b.n	800b3c6 <dir_sdi+0xee>
			ofs -= csz;
 800b374:	683a      	ldr	r2, [r7, #0]
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	1ad3      	subs	r3, r2, r3
 800b37a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b37c:	683a      	ldr	r2, [r7, #0]
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	429a      	cmp	r2, r3
 800b382:	d2e1      	bcs.n	800b348 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b384:	6979      	ldr	r1, [r7, #20]
 800b386:	6938      	ldr	r0, [r7, #16]
 800b388:	f7ff fcc2 	bl	800ad10 <clust2sect>
 800b38c:	4602      	mov	r2, r0
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	697a      	ldr	r2, [r7, #20]
 800b396:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	69db      	ldr	r3, [r3, #28]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d101      	bne.n	800b3a4 <dir_sdi+0xcc>
 800b3a0:	2302      	movs	r3, #2
 800b3a2:	e010      	b.n	800b3c6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	69da      	ldr	r2, [r3, #28]
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	0a5b      	lsrs	r3, r3, #9
 800b3ac:	441a      	add	r2, r3
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3be:	441a      	add	r2, r3
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b3c4:	2300      	movs	r3, #0
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3718      	adds	r7, #24
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}

0800b3ce <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b3ce:	b580      	push	{r7, lr}
 800b3d0:	b086      	sub	sp, #24
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	6078      	str	r0, [r7, #4]
 800b3d6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	695b      	ldr	r3, [r3, #20]
 800b3e2:	3320      	adds	r3, #32
 800b3e4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	69db      	ldr	r3, [r3, #28]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d003      	beq.n	800b3f6 <dir_next+0x28>
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b3f4:	d301      	bcc.n	800b3fa <dir_next+0x2c>
 800b3f6:	2304      	movs	r3, #4
 800b3f8:	e0aa      	b.n	800b550 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b400:	2b00      	cmp	r3, #0
 800b402:	f040 8098 	bne.w	800b536 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	69db      	ldr	r3, [r3, #28]
 800b40a:	1c5a      	adds	r2, r3, #1
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	699b      	ldr	r3, [r3, #24]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d10b      	bne.n	800b430 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	095b      	lsrs	r3, r3, #5
 800b41c:	68fa      	ldr	r2, [r7, #12]
 800b41e:	8912      	ldrh	r2, [r2, #8]
 800b420:	4293      	cmp	r3, r2
 800b422:	f0c0 8088 	bcc.w	800b536 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2200      	movs	r2, #0
 800b42a:	61da      	str	r2, [r3, #28]
 800b42c:	2304      	movs	r3, #4
 800b42e:	e08f      	b.n	800b550 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	0a5b      	lsrs	r3, r3, #9
 800b434:	68fa      	ldr	r2, [r7, #12]
 800b436:	8952      	ldrh	r2, [r2, #10]
 800b438:	3a01      	subs	r2, #1
 800b43a:	4013      	ands	r3, r2
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d17a      	bne.n	800b536 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b440:	687a      	ldr	r2, [r7, #4]
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	699b      	ldr	r3, [r3, #24]
 800b446:	4619      	mov	r1, r3
 800b448:	4610      	mov	r0, r2
 800b44a:	f7ff fc80 	bl	800ad4e <get_fat>
 800b44e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	2b01      	cmp	r3, #1
 800b454:	d801      	bhi.n	800b45a <dir_next+0x8c>
 800b456:	2302      	movs	r3, #2
 800b458:	e07a      	b.n	800b550 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b460:	d101      	bne.n	800b466 <dir_next+0x98>
 800b462:	2301      	movs	r3, #1
 800b464:	e074      	b.n	800b550 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	69db      	ldr	r3, [r3, #28]
 800b46a:	697a      	ldr	r2, [r7, #20]
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d358      	bcc.n	800b522 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d104      	bne.n	800b480 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2200      	movs	r2, #0
 800b47a:	61da      	str	r2, [r3, #28]
 800b47c:	2304      	movs	r3, #4
 800b47e:	e067      	b.n	800b550 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b480:	687a      	ldr	r2, [r7, #4]
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	699b      	ldr	r3, [r3, #24]
 800b486:	4619      	mov	r1, r3
 800b488:	4610      	mov	r0, r2
 800b48a:	f7ff fe59 	bl	800b140 <create_chain>
 800b48e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d101      	bne.n	800b49a <dir_next+0xcc>
 800b496:	2307      	movs	r3, #7
 800b498:	e05a      	b.n	800b550 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	d101      	bne.n	800b4a4 <dir_next+0xd6>
 800b4a0:	2302      	movs	r3, #2
 800b4a2:	e055      	b.n	800b550 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4aa:	d101      	bne.n	800b4b0 <dir_next+0xe2>
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	e04f      	b.n	800b550 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b4b0:	68f8      	ldr	r0, [r7, #12]
 800b4b2:	f7ff fb4d 	bl	800ab50 <sync_window>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d001      	beq.n	800b4c0 <dir_next+0xf2>
 800b4bc:	2301      	movs	r3, #1
 800b4be:	e047      	b.n	800b550 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	3338      	adds	r3, #56	; 0x38
 800b4c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b4c8:	2100      	movs	r1, #0
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f7ff f945 	bl	800a75a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	613b      	str	r3, [r7, #16]
 800b4d4:	6979      	ldr	r1, [r7, #20]
 800b4d6:	68f8      	ldr	r0, [r7, #12]
 800b4d8:	f7ff fc1a 	bl	800ad10 <clust2sect>
 800b4dc:	4602      	mov	r2, r0
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	635a      	str	r2, [r3, #52]	; 0x34
 800b4e2:	e012      	b.n	800b50a <dir_next+0x13c>
						fs->wflag = 1;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b4ea:	68f8      	ldr	r0, [r7, #12]
 800b4ec:	f7ff fb30 	bl	800ab50 <sync_window>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d001      	beq.n	800b4fa <dir_next+0x12c>
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e02a      	b.n	800b550 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	3301      	adds	r3, #1
 800b4fe:	613b      	str	r3, [r7, #16]
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b504:	1c5a      	adds	r2, r3, #1
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	635a      	str	r2, [r3, #52]	; 0x34
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	895b      	ldrh	r3, [r3, #10]
 800b50e:	461a      	mov	r2, r3
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	4293      	cmp	r3, r2
 800b514:	d3e6      	bcc.n	800b4e4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	1ad2      	subs	r2, r2, r3
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	697a      	ldr	r2, [r7, #20]
 800b526:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b528:	6979      	ldr	r1, [r7, #20]
 800b52a:	68f8      	ldr	r0, [r7, #12]
 800b52c:	f7ff fbf0 	bl	800ad10 <clust2sect>
 800b530:	4602      	mov	r2, r0
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	68ba      	ldr	r2, [r7, #8]
 800b53a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b548:	441a      	add	r2, r3
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b54e:	2300      	movs	r3, #0
}
 800b550:	4618      	mov	r0, r3
 800b552:	3718      	adds	r7, #24
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}

0800b558 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b086      	sub	sp, #24
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b568:	2100      	movs	r1, #0
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f7ff feb4 	bl	800b2d8 <dir_sdi>
 800b570:	4603      	mov	r3, r0
 800b572:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b574:	7dfb      	ldrb	r3, [r7, #23]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d12b      	bne.n	800b5d2 <dir_alloc+0x7a>
		n = 0;
 800b57a:	2300      	movs	r3, #0
 800b57c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	69db      	ldr	r3, [r3, #28]
 800b582:	4619      	mov	r1, r3
 800b584:	68f8      	ldr	r0, [r7, #12]
 800b586:	f7ff fb27 	bl	800abd8 <move_window>
 800b58a:	4603      	mov	r3, r0
 800b58c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b58e:	7dfb      	ldrb	r3, [r7, #23]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d11d      	bne.n	800b5d0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6a1b      	ldr	r3, [r3, #32]
 800b598:	781b      	ldrb	r3, [r3, #0]
 800b59a:	2be5      	cmp	r3, #229	; 0xe5
 800b59c:	d004      	beq.n	800b5a8 <dir_alloc+0x50>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6a1b      	ldr	r3, [r3, #32]
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d107      	bne.n	800b5b8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	613b      	str	r3, [r7, #16]
 800b5ae:	693a      	ldr	r2, [r7, #16]
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d102      	bne.n	800b5bc <dir_alloc+0x64>
 800b5b6:	e00c      	b.n	800b5d2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b5bc:	2101      	movs	r1, #1
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f7ff ff05 	bl	800b3ce <dir_next>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b5c8:	7dfb      	ldrb	r3, [r7, #23]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d0d7      	beq.n	800b57e <dir_alloc+0x26>
 800b5ce:	e000      	b.n	800b5d2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b5d0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b5d2:	7dfb      	ldrb	r3, [r7, #23]
 800b5d4:	2b04      	cmp	r3, #4
 800b5d6:	d101      	bne.n	800b5dc <dir_alloc+0x84>
 800b5d8:	2307      	movs	r3, #7
 800b5da:	75fb      	strb	r3, [r7, #23]
	return res;
 800b5dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3718      	adds	r7, #24
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}

0800b5e6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b5e6:	b580      	push	{r7, lr}
 800b5e8:	b084      	sub	sp, #16
 800b5ea:	af00      	add	r7, sp, #0
 800b5ec:	6078      	str	r0, [r7, #4]
 800b5ee:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	331a      	adds	r3, #26
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f7ff f80d 	bl	800a614 <ld_word>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	781b      	ldrb	r3, [r3, #0]
 800b602:	2b03      	cmp	r3, #3
 800b604:	d109      	bne.n	800b61a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	3314      	adds	r3, #20
 800b60a:	4618      	mov	r0, r3
 800b60c:	f7ff f802 	bl	800a614 <ld_word>
 800b610:	4603      	mov	r3, r0
 800b612:	041b      	lsls	r3, r3, #16
 800b614:	68fa      	ldr	r2, [r7, #12]
 800b616:	4313      	orrs	r3, r2
 800b618:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b61a:	68fb      	ldr	r3, [r7, #12]
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3710      	adds	r7, #16
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
 800b62a:	60f8      	str	r0, [r7, #12]
 800b62c:	60b9      	str	r1, [r7, #8]
 800b62e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	331a      	adds	r3, #26
 800b634:	687a      	ldr	r2, [r7, #4]
 800b636:	b292      	uxth	r2, r2
 800b638:	4611      	mov	r1, r2
 800b63a:	4618      	mov	r0, r3
 800b63c:	f7ff f825 	bl	800a68a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	781b      	ldrb	r3, [r3, #0]
 800b644:	2b03      	cmp	r3, #3
 800b646:	d109      	bne.n	800b65c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	f103 0214 	add.w	r2, r3, #20
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	0c1b      	lsrs	r3, r3, #16
 800b652:	b29b      	uxth	r3, r3
 800b654:	4619      	mov	r1, r3
 800b656:	4610      	mov	r0, r2
 800b658:	f7ff f817 	bl	800a68a <st_word>
	}
}
 800b65c:	bf00      	nop
 800b65e:	3710      	adds	r7, #16
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}

0800b664 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800b664:	b590      	push	{r4, r7, lr}
 800b666:	b087      	sub	sp, #28
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	331a      	adds	r3, #26
 800b672:	4618      	mov	r0, r3
 800b674:	f7fe ffce 	bl	800a614 <ld_word>
 800b678:	4603      	mov	r3, r0
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d001      	beq.n	800b682 <cmp_lfn+0x1e>
 800b67e:	2300      	movs	r3, #0
 800b680:	e059      	b.n	800b736 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b68a:	1e5a      	subs	r2, r3, #1
 800b68c:	4613      	mov	r3, r2
 800b68e:	005b      	lsls	r3, r3, #1
 800b690:	4413      	add	r3, r2
 800b692:	009b      	lsls	r3, r3, #2
 800b694:	4413      	add	r3, r2
 800b696:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b698:	2301      	movs	r3, #1
 800b69a:	81fb      	strh	r3, [r7, #14]
 800b69c:	2300      	movs	r3, #0
 800b69e:	613b      	str	r3, [r7, #16]
 800b6a0:	e033      	b.n	800b70a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b6a2:	4a27      	ldr	r2, [pc, #156]	; (800b740 <cmp_lfn+0xdc>)
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	4413      	add	r3, r2
 800b6a8:	781b      	ldrb	r3, [r3, #0]
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	4413      	add	r3, r2
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f7fe ffaf 	bl	800a614 <ld_word>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b6ba:	89fb      	ldrh	r3, [r7, #14]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d01a      	beq.n	800b6f6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	2bfe      	cmp	r3, #254	; 0xfe
 800b6c4:	d812      	bhi.n	800b6ec <cmp_lfn+0x88>
 800b6c6:	89bb      	ldrh	r3, [r7, #12]
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f002 fc97 	bl	800dffc <ff_wtoupper>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	461c      	mov	r4, r3
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	1c5a      	adds	r2, r3, #1
 800b6d6:	617a      	str	r2, [r7, #20]
 800b6d8:	005b      	lsls	r3, r3, #1
 800b6da:	687a      	ldr	r2, [r7, #4]
 800b6dc:	4413      	add	r3, r2
 800b6de:	881b      	ldrh	r3, [r3, #0]
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f002 fc8b 	bl	800dffc <ff_wtoupper>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	429c      	cmp	r4, r3
 800b6ea:	d001      	beq.n	800b6f0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	e022      	b.n	800b736 <cmp_lfn+0xd2>
			}
			wc = uc;
 800b6f0:	89bb      	ldrh	r3, [r7, #12]
 800b6f2:	81fb      	strh	r3, [r7, #14]
 800b6f4:	e006      	b.n	800b704 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b6f6:	89bb      	ldrh	r3, [r7, #12]
 800b6f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d001      	beq.n	800b704 <cmp_lfn+0xa0>
 800b700:	2300      	movs	r3, #0
 800b702:	e018      	b.n	800b736 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	3301      	adds	r3, #1
 800b708:	613b      	str	r3, [r7, #16]
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	2b0c      	cmp	r3, #12
 800b70e:	d9c8      	bls.n	800b6a2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	781b      	ldrb	r3, [r3, #0]
 800b714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d00b      	beq.n	800b734 <cmp_lfn+0xd0>
 800b71c:	89fb      	ldrh	r3, [r7, #14]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d008      	beq.n	800b734 <cmp_lfn+0xd0>
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	005b      	lsls	r3, r3, #1
 800b726:	687a      	ldr	r2, [r7, #4]
 800b728:	4413      	add	r3, r2
 800b72a:	881b      	ldrh	r3, [r3, #0]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d001      	beq.n	800b734 <cmp_lfn+0xd0>
 800b730:	2300      	movs	r3, #0
 800b732:	e000      	b.n	800b736 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b734:	2301      	movs	r3, #1
}
 800b736:	4618      	mov	r0, r3
 800b738:	371c      	adds	r7, #28
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd90      	pop	{r4, r7, pc}
 800b73e:	bf00      	nop
 800b740:	08044944 	.word	0x08044944

0800b744 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b088      	sub	sp, #32
 800b748:	af00      	add	r7, sp, #0
 800b74a:	60f8      	str	r0, [r7, #12]
 800b74c:	60b9      	str	r1, [r7, #8]
 800b74e:	4611      	mov	r1, r2
 800b750:	461a      	mov	r2, r3
 800b752:	460b      	mov	r3, r1
 800b754:	71fb      	strb	r3, [r7, #7]
 800b756:	4613      	mov	r3, r2
 800b758:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	330d      	adds	r3, #13
 800b75e:	79ba      	ldrb	r2, [r7, #6]
 800b760:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	330b      	adds	r3, #11
 800b766:	220f      	movs	r2, #15
 800b768:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	330c      	adds	r3, #12
 800b76e:	2200      	movs	r2, #0
 800b770:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	331a      	adds	r3, #26
 800b776:	2100      	movs	r1, #0
 800b778:	4618      	mov	r0, r3
 800b77a:	f7fe ff86 	bl	800a68a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800b77e:	79fb      	ldrb	r3, [r7, #7]
 800b780:	1e5a      	subs	r2, r3, #1
 800b782:	4613      	mov	r3, r2
 800b784:	005b      	lsls	r3, r3, #1
 800b786:	4413      	add	r3, r2
 800b788:	009b      	lsls	r3, r3, #2
 800b78a:	4413      	add	r3, r2
 800b78c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b78e:	2300      	movs	r3, #0
 800b790:	82fb      	strh	r3, [r7, #22]
 800b792:	2300      	movs	r3, #0
 800b794:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800b796:	8afb      	ldrh	r3, [r7, #22]
 800b798:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d007      	beq.n	800b7b0 <put_lfn+0x6c>
 800b7a0:	69fb      	ldr	r3, [r7, #28]
 800b7a2:	1c5a      	adds	r2, r3, #1
 800b7a4:	61fa      	str	r2, [r7, #28]
 800b7a6:	005b      	lsls	r3, r3, #1
 800b7a8:	68fa      	ldr	r2, [r7, #12]
 800b7aa:	4413      	add	r3, r2
 800b7ac:	881b      	ldrh	r3, [r3, #0]
 800b7ae:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800b7b0:	4a17      	ldr	r2, [pc, #92]	; (800b810 <put_lfn+0xcc>)
 800b7b2:	69bb      	ldr	r3, [r7, #24]
 800b7b4:	4413      	add	r3, r2
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	4413      	add	r3, r2
 800b7be:	8afa      	ldrh	r2, [r7, #22]
 800b7c0:	4611      	mov	r1, r2
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f7fe ff61 	bl	800a68a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800b7c8:	8afb      	ldrh	r3, [r7, #22]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d102      	bne.n	800b7d4 <put_lfn+0x90>
 800b7ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b7d2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b7d4:	69bb      	ldr	r3, [r7, #24]
 800b7d6:	3301      	adds	r3, #1
 800b7d8:	61bb      	str	r3, [r7, #24]
 800b7da:	69bb      	ldr	r3, [r7, #24]
 800b7dc:	2b0c      	cmp	r3, #12
 800b7de:	d9da      	bls.n	800b796 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800b7e0:	8afb      	ldrh	r3, [r7, #22]
 800b7e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d006      	beq.n	800b7f8 <put_lfn+0xb4>
 800b7ea:	69fb      	ldr	r3, [r7, #28]
 800b7ec:	005b      	lsls	r3, r3, #1
 800b7ee:	68fa      	ldr	r2, [r7, #12]
 800b7f0:	4413      	add	r3, r2
 800b7f2:	881b      	ldrh	r3, [r3, #0]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d103      	bne.n	800b800 <put_lfn+0xbc>
 800b7f8:	79fb      	ldrb	r3, [r7, #7]
 800b7fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7fe:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	79fa      	ldrb	r2, [r7, #7]
 800b804:	701a      	strb	r2, [r3, #0]
}
 800b806:	bf00      	nop
 800b808:	3720      	adds	r7, #32
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}
 800b80e:	bf00      	nop
 800b810:	08044944 	.word	0x08044944

0800b814 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b08c      	sub	sp, #48	; 0x30
 800b818:	af00      	add	r7, sp, #0
 800b81a:	60f8      	str	r0, [r7, #12]
 800b81c:	60b9      	str	r1, [r7, #8]
 800b81e:	607a      	str	r2, [r7, #4]
 800b820:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b822:	220b      	movs	r2, #11
 800b824:	68b9      	ldr	r1, [r7, #8]
 800b826:	68f8      	ldr	r0, [r7, #12]
 800b828:	f7fe ff76 	bl	800a718 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	2b05      	cmp	r3, #5
 800b830:	d92b      	bls.n	800b88a <gen_numname+0x76>
		sr = seq;
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b836:	e022      	b.n	800b87e <gen_numname+0x6a>
			wc = *lfn++;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	1c9a      	adds	r2, r3, #2
 800b83c:	607a      	str	r2, [r7, #4]
 800b83e:	881b      	ldrh	r3, [r3, #0]
 800b840:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800b842:	2300      	movs	r3, #0
 800b844:	62bb      	str	r3, [r7, #40]	; 0x28
 800b846:	e017      	b.n	800b878 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800b848:	69fb      	ldr	r3, [r7, #28]
 800b84a:	005a      	lsls	r2, r3, #1
 800b84c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b84e:	f003 0301 	and.w	r3, r3, #1
 800b852:	4413      	add	r3, r2
 800b854:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800b856:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b858:	085b      	lsrs	r3, r3, #1
 800b85a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800b85c:	69fb      	ldr	r3, [r7, #28]
 800b85e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b862:	2b00      	cmp	r3, #0
 800b864:	d005      	beq.n	800b872 <gen_numname+0x5e>
 800b866:	69fb      	ldr	r3, [r7, #28]
 800b868:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800b86c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800b870:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800b872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b874:	3301      	adds	r3, #1
 800b876:	62bb      	str	r3, [r7, #40]	; 0x28
 800b878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b87a:	2b0f      	cmp	r3, #15
 800b87c:	d9e4      	bls.n	800b848 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	881b      	ldrh	r3, [r3, #0]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d1d8      	bne.n	800b838 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800b886:	69fb      	ldr	r3, [r7, #28]
 800b888:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800b88a:	2307      	movs	r3, #7
 800b88c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	b2db      	uxtb	r3, r3
 800b892:	f003 030f 	and.w	r3, r3, #15
 800b896:	b2db      	uxtb	r3, r3
 800b898:	3330      	adds	r3, #48	; 0x30
 800b89a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800b89e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b8a2:	2b39      	cmp	r3, #57	; 0x39
 800b8a4:	d904      	bls.n	800b8b0 <gen_numname+0x9c>
 800b8a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b8aa:	3307      	adds	r3, #7
 800b8ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800b8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b2:	1e5a      	subs	r2, r3, #1
 800b8b4:	62ba      	str	r2, [r7, #40]	; 0x28
 800b8b6:	3330      	adds	r3, #48	; 0x30
 800b8b8:	443b      	add	r3, r7
 800b8ba:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b8be:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	091b      	lsrs	r3, r3, #4
 800b8c6:	603b      	str	r3, [r7, #0]
	} while (seq);
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d1df      	bne.n	800b88e <gen_numname+0x7a>
	ns[i] = '~';
 800b8ce:	f107 0214 	add.w	r2, r7, #20
 800b8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d4:	4413      	add	r3, r2
 800b8d6:	227e      	movs	r2, #126	; 0x7e
 800b8d8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800b8da:	2300      	movs	r3, #0
 800b8dc:	627b      	str	r3, [r7, #36]	; 0x24
 800b8de:	e016      	b.n	800b90e <gen_numname+0xfa>
		if (IsDBCS1(dst[j])) {
 800b8e0:	68fa      	ldr	r2, [r7, #12]
 800b8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e4:	4413      	add	r3, r2
 800b8e6:	781b      	ldrb	r3, [r3, #0]
 800b8e8:	2b80      	cmp	r3, #128	; 0x80
 800b8ea:	d90d      	bls.n	800b908 <gen_numname+0xf4>
 800b8ec:	68fa      	ldr	r2, [r7, #12]
 800b8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f0:	4413      	add	r3, r2
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	2bff      	cmp	r3, #255	; 0xff
 800b8f6:	d007      	beq.n	800b908 <gen_numname+0xf4>
			if (j == i - 1) break;
 800b8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8fa:	3b01      	subs	r3, #1
 800b8fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d010      	beq.n	800b924 <gen_numname+0x110>
			j++;
 800b902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b904:	3301      	adds	r3, #1
 800b906:	627b      	str	r3, [r7, #36]	; 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800b908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b90a:	3301      	adds	r3, #1
 800b90c:	627b      	str	r3, [r7, #36]	; 0x24
 800b90e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b912:	429a      	cmp	r2, r3
 800b914:	d207      	bcs.n	800b926 <gen_numname+0x112>
 800b916:	68fa      	ldr	r2, [r7, #12]
 800b918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b91a:	4413      	add	r3, r2
 800b91c:	781b      	ldrb	r3, [r3, #0]
 800b91e:	2b20      	cmp	r3, #32
 800b920:	d1de      	bne.n	800b8e0 <gen_numname+0xcc>
 800b922:	e000      	b.n	800b926 <gen_numname+0x112>
			if (j == i - 1) break;
 800b924:	bf00      	nop
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800b926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b928:	2b07      	cmp	r3, #7
 800b92a:	d807      	bhi.n	800b93c <gen_numname+0x128>
 800b92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b92e:	1c5a      	adds	r2, r3, #1
 800b930:	62ba      	str	r2, [r7, #40]	; 0x28
 800b932:	3330      	adds	r3, #48	; 0x30
 800b934:	443b      	add	r3, r7
 800b936:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800b93a:	e000      	b.n	800b93e <gen_numname+0x12a>
 800b93c:	2120      	movs	r1, #32
 800b93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b940:	1c5a      	adds	r2, r3, #1
 800b942:	627a      	str	r2, [r7, #36]	; 0x24
 800b944:	68fa      	ldr	r2, [r7, #12]
 800b946:	4413      	add	r3, r2
 800b948:	460a      	mov	r2, r1
 800b94a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800b94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94e:	2b07      	cmp	r3, #7
 800b950:	d9e9      	bls.n	800b926 <gen_numname+0x112>
}
 800b952:	bf00      	nop
 800b954:	bf00      	nop
 800b956:	3730      	adds	r7, #48	; 0x30
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}

0800b95c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b085      	sub	sp, #20
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800b964:	2300      	movs	r3, #0
 800b966:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800b968:	230b      	movs	r3, #11
 800b96a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800b96c:	7bfb      	ldrb	r3, [r7, #15]
 800b96e:	b2da      	uxtb	r2, r3
 800b970:	0852      	lsrs	r2, r2, #1
 800b972:	01db      	lsls	r3, r3, #7
 800b974:	4313      	orrs	r3, r2
 800b976:	b2da      	uxtb	r2, r3
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	1c59      	adds	r1, r3, #1
 800b97c:	6079      	str	r1, [r7, #4]
 800b97e:	781b      	ldrb	r3, [r3, #0]
 800b980:	4413      	add	r3, r2
 800b982:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	3b01      	subs	r3, #1
 800b988:	60bb      	str	r3, [r7, #8]
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d1ed      	bne.n	800b96c <sum_sfn+0x10>
	return sum;
 800b990:	7bfb      	ldrb	r3, [r7, #15]
}
 800b992:	4618      	mov	r0, r3
 800b994:	3714      	adds	r7, #20
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr

0800b99e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b99e:	b580      	push	{r7, lr}
 800b9a0:	b086      	sub	sp, #24
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b9ac:	2100      	movs	r1, #0
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f7ff fc92 	bl	800b2d8 <dir_sdi>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b9b8:	7dfb      	ldrb	r3, [r7, #23]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d001      	beq.n	800b9c2 <dir_find+0x24>
 800b9be:	7dfb      	ldrb	r3, [r7, #23]
 800b9c0:	e0a9      	b.n	800bb16 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b9c2:	23ff      	movs	r3, #255	; 0xff
 800b9c4:	753b      	strb	r3, [r7, #20]
 800b9c6:	7d3b      	ldrb	r3, [r7, #20]
 800b9c8:	757b      	strb	r3, [r7, #21]
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f04f 32ff 	mov.w	r2, #4294967295
 800b9d0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	69db      	ldr	r3, [r3, #28]
 800b9d6:	4619      	mov	r1, r3
 800b9d8:	6938      	ldr	r0, [r7, #16]
 800b9da:	f7ff f8fd 	bl	800abd8 <move_window>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b9e2:	7dfb      	ldrb	r3, [r7, #23]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	f040 8090 	bne.w	800bb0a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6a1b      	ldr	r3, [r3, #32]
 800b9ee:	781b      	ldrb	r3, [r3, #0]
 800b9f0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b9f2:	7dbb      	ldrb	r3, [r7, #22]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d102      	bne.n	800b9fe <dir_find+0x60>
 800b9f8:	2304      	movs	r3, #4
 800b9fa:	75fb      	strb	r3, [r7, #23]
 800b9fc:	e08a      	b.n	800bb14 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6a1b      	ldr	r3, [r3, #32]
 800ba02:	330b      	adds	r3, #11
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba0a:	73fb      	strb	r3, [r7, #15]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	7bfa      	ldrb	r2, [r7, #15]
 800ba10:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ba12:	7dbb      	ldrb	r3, [r7, #22]
 800ba14:	2be5      	cmp	r3, #229	; 0xe5
 800ba16:	d007      	beq.n	800ba28 <dir_find+0x8a>
 800ba18:	7bfb      	ldrb	r3, [r7, #15]
 800ba1a:	f003 0308 	and.w	r3, r3, #8
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d009      	beq.n	800ba36 <dir_find+0x98>
 800ba22:	7bfb      	ldrb	r3, [r7, #15]
 800ba24:	2b0f      	cmp	r3, #15
 800ba26:	d006      	beq.n	800ba36 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ba28:	23ff      	movs	r3, #255	; 0xff
 800ba2a:	757b      	strb	r3, [r7, #21]
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ba32:	631a      	str	r2, [r3, #48]	; 0x30
 800ba34:	e05e      	b.n	800baf4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ba36:	7bfb      	ldrb	r3, [r7, #15]
 800ba38:	2b0f      	cmp	r3, #15
 800ba3a:	d136      	bne.n	800baaa <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ba42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d154      	bne.n	800baf4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ba4a:	7dbb      	ldrb	r3, [r7, #22]
 800ba4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d00d      	beq.n	800ba70 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6a1b      	ldr	r3, [r3, #32]
 800ba58:	7b5b      	ldrb	r3, [r3, #13]
 800ba5a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800ba5c:	7dbb      	ldrb	r3, [r7, #22]
 800ba5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba62:	75bb      	strb	r3, [r7, #22]
 800ba64:	7dbb      	ldrb	r3, [r7, #22]
 800ba66:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	695a      	ldr	r2, [r3, #20]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ba70:	7dba      	ldrb	r2, [r7, #22]
 800ba72:	7d7b      	ldrb	r3, [r7, #21]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d115      	bne.n	800baa4 <dir_find+0x106>
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6a1b      	ldr	r3, [r3, #32]
 800ba7c:	330d      	adds	r3, #13
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	7d3a      	ldrb	r2, [r7, #20]
 800ba82:	429a      	cmp	r2, r3
 800ba84:	d10e      	bne.n	800baa4 <dir_find+0x106>
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	68da      	ldr	r2, [r3, #12]
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6a1b      	ldr	r3, [r3, #32]
 800ba8e:	4619      	mov	r1, r3
 800ba90:	4610      	mov	r0, r2
 800ba92:	f7ff fde7 	bl	800b664 <cmp_lfn>
 800ba96:	4603      	mov	r3, r0
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d003      	beq.n	800baa4 <dir_find+0x106>
 800ba9c:	7d7b      	ldrb	r3, [r7, #21]
 800ba9e:	3b01      	subs	r3, #1
 800baa0:	b2db      	uxtb	r3, r3
 800baa2:	e000      	b.n	800baa6 <dir_find+0x108>
 800baa4:	23ff      	movs	r3, #255	; 0xff
 800baa6:	757b      	strb	r3, [r7, #21]
 800baa8:	e024      	b.n	800baf4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800baaa:	7d7b      	ldrb	r3, [r7, #21]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d109      	bne.n	800bac4 <dir_find+0x126>
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6a1b      	ldr	r3, [r3, #32]
 800bab4:	4618      	mov	r0, r3
 800bab6:	f7ff ff51 	bl	800b95c <sum_sfn>
 800baba:	4603      	mov	r3, r0
 800babc:	461a      	mov	r2, r3
 800babe:	7d3b      	ldrb	r3, [r7, #20]
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d024      	beq.n	800bb0e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800baca:	f003 0301 	and.w	r3, r3, #1
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d10a      	bne.n	800bae8 <dir_find+0x14a>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6a18      	ldr	r0, [r3, #32]
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	3324      	adds	r3, #36	; 0x24
 800bada:	220b      	movs	r2, #11
 800badc:	4619      	mov	r1, r3
 800bade:	f7fe fe57 	bl	800a790 <mem_cmp>
 800bae2:	4603      	mov	r3, r0
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d014      	beq.n	800bb12 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bae8:	23ff      	movs	r3, #255	; 0xff
 800baea:	757b      	strb	r3, [r7, #21]
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f04f 32ff 	mov.w	r2, #4294967295
 800baf2:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800baf4:	2100      	movs	r1, #0
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f7ff fc69 	bl	800b3ce <dir_next>
 800bafc:	4603      	mov	r3, r0
 800bafe:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bb00:	7dfb      	ldrb	r3, [r7, #23]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	f43f af65 	beq.w	800b9d2 <dir_find+0x34>
 800bb08:	e004      	b.n	800bb14 <dir_find+0x176>
		if (res != FR_OK) break;
 800bb0a:	bf00      	nop
 800bb0c:	e002      	b.n	800bb14 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bb0e:	bf00      	nop
 800bb10:	e000      	b.n	800bb14 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bb12:	bf00      	nop

	return res;
 800bb14:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3718      	adds	r7, #24
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}
	...

0800bb20 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b08c      	sub	sp, #48	; 0x30
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bb34:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d001      	beq.n	800bb40 <dir_register+0x20>
 800bb3c:	2306      	movs	r3, #6
 800bb3e:	e0e0      	b.n	800bd02 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800bb40:	2300      	movs	r3, #0
 800bb42:	627b      	str	r3, [r7, #36]	; 0x24
 800bb44:	e002      	b.n	800bb4c <dir_register+0x2c>
 800bb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb48:	3301      	adds	r3, #1
 800bb4a:	627b      	str	r3, [r7, #36]	; 0x24
 800bb4c:	69fb      	ldr	r3, [r7, #28]
 800bb4e:	68da      	ldr	r2, [r3, #12]
 800bb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb52:	005b      	lsls	r3, r3, #1
 800bb54:	4413      	add	r3, r2
 800bb56:	881b      	ldrh	r3, [r3, #0]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d1f4      	bne.n	800bb46 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800bb62:	f107 030c 	add.w	r3, r7, #12
 800bb66:	220c      	movs	r2, #12
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f7fe fdd5 	bl	800a718 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800bb6e:	7dfb      	ldrb	r3, [r7, #23]
 800bb70:	f003 0301 	and.w	r3, r3, #1
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d032      	beq.n	800bbde <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2240      	movs	r2, #64	; 0x40
 800bb7c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800bb80:	2301      	movs	r3, #1
 800bb82:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb84:	e016      	b.n	800bbb4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800bb8c:	69fb      	ldr	r3, [r7, #28]
 800bb8e:	68da      	ldr	r2, [r3, #12]
 800bb90:	f107 010c 	add.w	r1, r7, #12
 800bb94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb96:	f7ff fe3d 	bl	800b814 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f7ff feff 	bl	800b99e <dir_find>
 800bba0:	4603      	mov	r3, r0
 800bba2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800bba6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d106      	bne.n	800bbbc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800bbae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	62bb      	str	r3, [r7, #40]	; 0x28
 800bbb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb6:	2b63      	cmp	r3, #99	; 0x63
 800bbb8:	d9e5      	bls.n	800bb86 <dir_register+0x66>
 800bbba:	e000      	b.n	800bbbe <dir_register+0x9e>
			if (res != FR_OK) break;
 800bbbc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800bbbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc0:	2b64      	cmp	r3, #100	; 0x64
 800bbc2:	d101      	bne.n	800bbc8 <dir_register+0xa8>
 800bbc4:	2307      	movs	r3, #7
 800bbc6:	e09c      	b.n	800bd02 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800bbc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbcc:	2b04      	cmp	r3, #4
 800bbce:	d002      	beq.n	800bbd6 <dir_register+0xb6>
 800bbd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbd4:	e095      	b.n	800bd02 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800bbd6:	7dfa      	ldrb	r2, [r7, #23]
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800bbde:	7dfb      	ldrb	r3, [r7, #23]
 800bbe0:	f003 0302 	and.w	r3, r3, #2
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d007      	beq.n	800bbf8 <dir_register+0xd8>
 800bbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbea:	330c      	adds	r3, #12
 800bbec:	4a47      	ldr	r2, [pc, #284]	; (800bd0c <dir_register+0x1ec>)
 800bbee:	fba2 2303 	umull	r2, r3, r2, r3
 800bbf2:	089b      	lsrs	r3, r3, #2
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	e000      	b.n	800bbfa <dir_register+0xda>
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800bbfc:	6a39      	ldr	r1, [r7, #32]
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f7ff fcaa 	bl	800b558 <dir_alloc>
 800bc04:	4603      	mov	r3, r0
 800bc06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800bc0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d148      	bne.n	800bca4 <dir_register+0x184>
 800bc12:	6a3b      	ldr	r3, [r7, #32]
 800bc14:	3b01      	subs	r3, #1
 800bc16:	623b      	str	r3, [r7, #32]
 800bc18:	6a3b      	ldr	r3, [r7, #32]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d042      	beq.n	800bca4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	695a      	ldr	r2, [r3, #20]
 800bc22:	6a3b      	ldr	r3, [r7, #32]
 800bc24:	015b      	lsls	r3, r3, #5
 800bc26:	1ad3      	subs	r3, r2, r3
 800bc28:	4619      	mov	r1, r3
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f7ff fb54 	bl	800b2d8 <dir_sdi>
 800bc30:	4603      	mov	r3, r0
 800bc32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800bc36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d132      	bne.n	800bca4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	3324      	adds	r3, #36	; 0x24
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7ff fe8a 	bl	800b95c <sum_sfn>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	69db      	ldr	r3, [r3, #28]
 800bc50:	4619      	mov	r1, r3
 800bc52:	69f8      	ldr	r0, [r7, #28]
 800bc54:	f7fe ffc0 	bl	800abd8 <move_window>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800bc5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d11d      	bne.n	800bca2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800bc66:	69fb      	ldr	r3, [r7, #28]
 800bc68:	68d8      	ldr	r0, [r3, #12]
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6a19      	ldr	r1, [r3, #32]
 800bc6e:	6a3b      	ldr	r3, [r7, #32]
 800bc70:	b2da      	uxtb	r2, r3
 800bc72:	7efb      	ldrb	r3, [r7, #27]
 800bc74:	f7ff fd66 	bl	800b744 <put_lfn>
				fs->wflag = 1;
 800bc78:	69fb      	ldr	r3, [r7, #28]
 800bc7a:	2201      	movs	r2, #1
 800bc7c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800bc7e:	2100      	movs	r1, #0
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f7ff fba4 	bl	800b3ce <dir_next>
 800bc86:	4603      	mov	r3, r0
 800bc88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800bc8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d107      	bne.n	800bca4 <dir_register+0x184>
 800bc94:	6a3b      	ldr	r3, [r7, #32]
 800bc96:	3b01      	subs	r3, #1
 800bc98:	623b      	str	r3, [r7, #32]
 800bc9a:	6a3b      	ldr	r3, [r7, #32]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d1d5      	bne.n	800bc4c <dir_register+0x12c>
 800bca0:	e000      	b.n	800bca4 <dir_register+0x184>
				if (res != FR_OK) break;
 800bca2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800bca4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d128      	bne.n	800bcfe <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	69db      	ldr	r3, [r3, #28]
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	69f8      	ldr	r0, [r7, #28]
 800bcb4:	f7fe ff90 	bl	800abd8 <move_window>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800bcbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d11b      	bne.n	800bcfe <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6a1b      	ldr	r3, [r3, #32]
 800bcca:	2220      	movs	r2, #32
 800bccc:	2100      	movs	r1, #0
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f7fe fd43 	bl	800a75a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6a18      	ldr	r0, [r3, #32]
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	3324      	adds	r3, #36	; 0x24
 800bcdc:	220b      	movs	r2, #11
 800bcde:	4619      	mov	r1, r3
 800bce0:	f7fe fd1a 	bl	800a718 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6a1b      	ldr	r3, [r3, #32]
 800bcee:	330c      	adds	r3, #12
 800bcf0:	f002 0218 	and.w	r2, r2, #24
 800bcf4:	b2d2      	uxtb	r2, r2
 800bcf6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800bcf8:	69fb      	ldr	r3, [r7, #28]
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bcfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	3730      	adds	r7, #48	; 0x30
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}
 800bd0a:	bf00      	nop
 800bd0c:	4ec4ec4f 	.word	0x4ec4ec4f

0800bd10 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b08a      	sub	sp, #40	; 0x28
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	613b      	str	r3, [r7, #16]
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	68db      	ldr	r3, [r3, #12]
 800bd26:	60fb      	str	r3, [r7, #12]
 800bd28:	2300      	movs	r3, #0
 800bd2a:	617b      	str	r3, [r7, #20]
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800bd30:	69bb      	ldr	r3, [r7, #24]
 800bd32:	1c5a      	adds	r2, r3, #1
 800bd34:	61ba      	str	r2, [r7, #24]
 800bd36:	693a      	ldr	r2, [r7, #16]
 800bd38:	4413      	add	r3, r2
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800bd3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd40:	2b1f      	cmp	r3, #31
 800bd42:	d96a      	bls.n	800be1a <create_name+0x10a>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800bd44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd46:	2b2f      	cmp	r3, #47	; 0x2f
 800bd48:	d006      	beq.n	800bd58 <create_name+0x48>
 800bd4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd4c:	2b5c      	cmp	r3, #92	; 0x5c
 800bd4e:	d110      	bne.n	800bd72 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800bd50:	e002      	b.n	800bd58 <create_name+0x48>
 800bd52:	69bb      	ldr	r3, [r7, #24]
 800bd54:	3301      	adds	r3, #1
 800bd56:	61bb      	str	r3, [r7, #24]
 800bd58:	693a      	ldr	r2, [r7, #16]
 800bd5a:	69bb      	ldr	r3, [r7, #24]
 800bd5c:	4413      	add	r3, r2
 800bd5e:	781b      	ldrb	r3, [r3, #0]
 800bd60:	2b2f      	cmp	r3, #47	; 0x2f
 800bd62:	d0f6      	beq.n	800bd52 <create_name+0x42>
 800bd64:	693a      	ldr	r2, [r7, #16]
 800bd66:	69bb      	ldr	r3, [r7, #24]
 800bd68:	4413      	add	r3, r2
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	2b5c      	cmp	r3, #92	; 0x5c
 800bd6e:	d0f0      	beq.n	800bd52 <create_name+0x42>
			break;
 800bd70:	e054      	b.n	800be1c <create_name+0x10c>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	2bfe      	cmp	r3, #254	; 0xfe
 800bd76:	d901      	bls.n	800bd7c <create_name+0x6c>
 800bd78:	2306      	movs	r3, #6
 800bd7a:	e1bf      	b.n	800c0fc <create_name+0x3ec>
#if !_LFN_UNICODE
		w &= 0xFF;
 800bd7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd7e:	b2db      	uxtb	r3, r3
 800bd80:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 800bd82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd84:	b2db      	uxtb	r3, r3
 800bd86:	2b80      	cmp	r3, #128	; 0x80
 800bd88:	d925      	bls.n	800bdd6 <create_name+0xc6>
 800bd8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd8c:	b2db      	uxtb	r3, r3
 800bd8e:	2bff      	cmp	r3, #255	; 0xff
 800bd90:	d021      	beq.n	800bdd6 <create_name+0xc6>
			b = (BYTE)p[si++];			/* Get 2nd byte */
 800bd92:	69bb      	ldr	r3, [r7, #24]
 800bd94:	1c5a      	adds	r2, r3, #1
 800bd96:	61ba      	str	r2, [r7, #24]
 800bd98:	693a      	ldr	r2, [r7, #16]
 800bd9a:	4413      	add	r3, r2
 800bd9c:	781b      	ldrb	r3, [r3, #0]
 800bd9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			w = (w << 8) + b;			/* Create a DBC */
 800bda2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bda4:	021b      	lsls	r3, r3, #8
 800bda6:	b29a      	uxth	r2, r3
 800bda8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdac:	b29b      	uxth	r3, r3
 800bdae:	4413      	add	r3, r2
 800bdb0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
 800bdb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdb6:	2b3f      	cmp	r3, #63	; 0x3f
 800bdb8:	d903      	bls.n	800bdc2 <create_name+0xb2>
 800bdba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdbe:	2b7e      	cmp	r3, #126	; 0x7e
 800bdc0:	d909      	bls.n	800bdd6 <create_name+0xc6>
 800bdc2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	da03      	bge.n	800bdd2 <create_name+0xc2>
 800bdca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdce:	2bff      	cmp	r3, #255	; 0xff
 800bdd0:	d101      	bne.n	800bdd6 <create_name+0xc6>
 800bdd2:	2306      	movs	r3, #6
 800bdd4:	e192      	b.n	800c0fc <create_name+0x3ec>
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800bdd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bdd8:	2101      	movs	r1, #1
 800bdda:	4618      	mov	r0, r3
 800bddc:	f002 f8b0 	bl	800df40 <ff_convert>
 800bde0:	4603      	mov	r3, r0
 800bde2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800bde4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d101      	bne.n	800bdee <create_name+0xde>
 800bdea:	2306      	movs	r3, #6
 800bdec:	e186      	b.n	800c0fc <create_name+0x3ec>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800bdee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bdf0:	2b7f      	cmp	r3, #127	; 0x7f
 800bdf2:	d809      	bhi.n	800be08 <create_name+0xf8>
 800bdf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	489a      	ldr	r0, [pc, #616]	; (800c064 <create_name+0x354>)
 800bdfa:	f7fe fcf0 	bl	800a7de <chk_chr>
 800bdfe:	4603      	mov	r3, r0
 800be00:	2b00      	cmp	r3, #0
 800be02:	d001      	beq.n	800be08 <create_name+0xf8>
 800be04:	2306      	movs	r3, #6
 800be06:	e179      	b.n	800c0fc <create_name+0x3ec>
		lfn[di++] = w;					/* Store the Unicode character */
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	1c5a      	adds	r2, r3, #1
 800be0c:	617a      	str	r2, [r7, #20]
 800be0e:	005b      	lsls	r3, r3, #1
 800be10:	68fa      	ldr	r2, [r7, #12]
 800be12:	4413      	add	r3, r2
 800be14:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800be16:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800be18:	e78a      	b.n	800bd30 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800be1a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800be1c:	693a      	ldr	r2, [r7, #16]
 800be1e:	69bb      	ldr	r3, [r7, #24]
 800be20:	441a      	add	r2, r3
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800be26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be28:	2b1f      	cmp	r3, #31
 800be2a:	d801      	bhi.n	800be30 <create_name+0x120>
 800be2c:	2304      	movs	r3, #4
 800be2e:	e000      	b.n	800be32 <create_name+0x122>
 800be30:	2300      	movs	r3, #0
 800be32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800be36:	e011      	b.n	800be5c <create_name+0x14c>
		w = lfn[di - 1];
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800be3e:	3b01      	subs	r3, #1
 800be40:	005b      	lsls	r3, r3, #1
 800be42:	68fa      	ldr	r2, [r7, #12]
 800be44:	4413      	add	r3, r2
 800be46:	881b      	ldrh	r3, [r3, #0]
 800be48:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800be4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be4c:	2b20      	cmp	r3, #32
 800be4e:	d002      	beq.n	800be56 <create_name+0x146>
 800be50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be52:	2b2e      	cmp	r3, #46	; 0x2e
 800be54:	d106      	bne.n	800be64 <create_name+0x154>
		di--;
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	3b01      	subs	r3, #1
 800be5a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d1ea      	bne.n	800be38 <create_name+0x128>
 800be62:	e000      	b.n	800be66 <create_name+0x156>
		if (w != ' ' && w != '.') break;
 800be64:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	005b      	lsls	r3, r3, #1
 800be6a:	68fa      	ldr	r2, [r7, #12]
 800be6c:	4413      	add	r3, r2
 800be6e:	2200      	movs	r2, #0
 800be70:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d101      	bne.n	800be7c <create_name+0x16c>
 800be78:	2306      	movs	r3, #6
 800be7a:	e13f      	b.n	800c0fc <create_name+0x3ec>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	3324      	adds	r3, #36	; 0x24
 800be80:	220b      	movs	r2, #11
 800be82:	2120      	movs	r1, #32
 800be84:	4618      	mov	r0, r3
 800be86:	f7fe fc68 	bl	800a75a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800be8a:	2300      	movs	r3, #0
 800be8c:	61bb      	str	r3, [r7, #24]
 800be8e:	e002      	b.n	800be96 <create_name+0x186>
 800be90:	69bb      	ldr	r3, [r7, #24]
 800be92:	3301      	adds	r3, #1
 800be94:	61bb      	str	r3, [r7, #24]
 800be96:	69bb      	ldr	r3, [r7, #24]
 800be98:	005b      	lsls	r3, r3, #1
 800be9a:	68fa      	ldr	r2, [r7, #12]
 800be9c:	4413      	add	r3, r2
 800be9e:	881b      	ldrh	r3, [r3, #0]
 800bea0:	2b20      	cmp	r3, #32
 800bea2:	d0f5      	beq.n	800be90 <create_name+0x180>
 800bea4:	69bb      	ldr	r3, [r7, #24]
 800bea6:	005b      	lsls	r3, r3, #1
 800bea8:	68fa      	ldr	r2, [r7, #12]
 800beaa:	4413      	add	r3, r2
 800beac:	881b      	ldrh	r3, [r3, #0]
 800beae:	2b2e      	cmp	r3, #46	; 0x2e
 800beb0:	d0ee      	beq.n	800be90 <create_name+0x180>
	if (si) cf |= NS_LOSS | NS_LFN;
 800beb2:	69bb      	ldr	r3, [r7, #24]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d009      	beq.n	800becc <create_name+0x1bc>
 800beb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bebc:	f043 0303 	orr.w	r3, r3, #3
 800bec0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800bec4:	e002      	b.n	800becc <create_name+0x1bc>
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	3b01      	subs	r3, #1
 800beca:	617b      	str	r3, [r7, #20]
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d009      	beq.n	800bee6 <create_name+0x1d6>
 800bed2:	697b      	ldr	r3, [r7, #20]
 800bed4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bed8:	3b01      	subs	r3, #1
 800beda:	005b      	lsls	r3, r3, #1
 800bedc:	68fa      	ldr	r2, [r7, #12]
 800bede:	4413      	add	r3, r2
 800bee0:	881b      	ldrh	r3, [r3, #0]
 800bee2:	2b2e      	cmp	r3, #46	; 0x2e
 800bee4:	d1ef      	bne.n	800bec6 <create_name+0x1b6>

	i = b = 0; ni = 8;
 800bee6:	2300      	movs	r3, #0
 800bee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800beec:	2300      	movs	r3, #0
 800beee:	623b      	str	r3, [r7, #32]
 800bef0:	2308      	movs	r3, #8
 800bef2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800bef4:	69bb      	ldr	r3, [r7, #24]
 800bef6:	1c5a      	adds	r2, r3, #1
 800bef8:	61ba      	str	r2, [r7, #24]
 800befa:	005b      	lsls	r3, r3, #1
 800befc:	68fa      	ldr	r2, [r7, #12]
 800befe:	4413      	add	r3, r2
 800bf00:	881b      	ldrh	r3, [r3, #0]
 800bf02:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800bf04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	f000 80aa 	beq.w	800c060 <create_name+0x350>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800bf0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf0e:	2b20      	cmp	r3, #32
 800bf10:	d006      	beq.n	800bf20 <create_name+0x210>
 800bf12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf14:	2b2e      	cmp	r3, #46	; 0x2e
 800bf16:	d10a      	bne.n	800bf2e <create_name+0x21e>
 800bf18:	69ba      	ldr	r2, [r7, #24]
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d006      	beq.n	800bf2e <create_name+0x21e>
			cf |= NS_LOSS | NS_LFN; continue;
 800bf20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bf24:	f043 0303 	orr.w	r3, r3, #3
 800bf28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bf2c:	e097      	b.n	800c05e <create_name+0x34e>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800bf2e:	6a3a      	ldr	r2, [r7, #32]
 800bf30:	69fb      	ldr	r3, [r7, #28]
 800bf32:	429a      	cmp	r2, r3
 800bf34:	d203      	bcs.n	800bf3e <create_name+0x22e>
 800bf36:	69ba      	ldr	r2, [r7, #24]
 800bf38:	697b      	ldr	r3, [r7, #20]
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	d123      	bne.n	800bf86 <create_name+0x276>
			if (ni == 11) {				/* Long extension */
 800bf3e:	69fb      	ldr	r3, [r7, #28]
 800bf40:	2b0b      	cmp	r3, #11
 800bf42:	d106      	bne.n	800bf52 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
 800bf44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bf48:	f043 0303 	orr.w	r3, r3, #3
 800bf4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bf50:	e08d      	b.n	800c06e <create_name+0x35e>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800bf52:	69ba      	ldr	r2, [r7, #24]
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d005      	beq.n	800bf66 <create_name+0x256>
 800bf5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bf5e:	f043 0303 	orr.w	r3, r3, #3
 800bf62:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 800bf66:	69ba      	ldr	r2, [r7, #24]
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	d87e      	bhi.n	800c06c <create_name+0x35c>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	61bb      	str	r3, [r7, #24]
 800bf72:	2308      	movs	r3, #8
 800bf74:	623b      	str	r3, [r7, #32]
 800bf76:	230b      	movs	r3, #11
 800bf78:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800bf7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf7e:	009b      	lsls	r3, r3, #2
 800bf80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bf84:	e06b      	b.n	800c05e <create_name+0x34e>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800bf86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf88:	2b7f      	cmp	r3, #127	; 0x7f
 800bf8a:	d910      	bls.n	800bfae <create_name+0x29e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
 800bf8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f002 f834 	bl	800dffc <ff_wtoupper>
 800bf94:	4603      	mov	r3, r0
 800bf96:	2100      	movs	r1, #0
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f001 ffd1 	bl	800df40 <ff_convert>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	84bb      	strh	r3, [r7, #36]	; 0x24
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800bfa2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bfa6:	f043 0302 	orr.w	r3, r3, #2
 800bfaa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}

		if (_DF1S && w >= 0x100) {		/* Is this DBC? (always false at SBCS cfg) */
 800bfae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfb0:	2bff      	cmp	r3, #255	; 0xff
 800bfb2:	d91a      	bls.n	800bfea <create_name+0x2da>
			if (i >= ni - 1) {
 800bfb4:	69fb      	ldr	r3, [r7, #28]
 800bfb6:	3b01      	subs	r3, #1
 800bfb8:	6a3a      	ldr	r2, [r7, #32]
 800bfba:	429a      	cmp	r2, r3
 800bfbc:	d308      	bcc.n	800bfd0 <create_name+0x2c0>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 800bfbe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bfc2:	f043 0303 	orr.w	r3, r3, #3
 800bfc6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bfca:	69fb      	ldr	r3, [r7, #28]
 800bfcc:	623b      	str	r3, [r7, #32]
 800bfce:	e046      	b.n	800c05e <create_name+0x34e>
			}
			dp->fn[i++] = (BYTE)(w >> 8);
 800bfd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfd2:	0a1b      	lsrs	r3, r3, #8
 800bfd4:	b299      	uxth	r1, r3
 800bfd6:	6a3b      	ldr	r3, [r7, #32]
 800bfd8:	1c5a      	adds	r2, r3, #1
 800bfda:	623a      	str	r2, [r7, #32]
 800bfdc:	b2c9      	uxtb	r1, r1
 800bfde:	687a      	ldr	r2, [r7, #4]
 800bfe0:	4413      	add	r3, r2
 800bfe2:	460a      	mov	r2, r1
 800bfe4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800bfe8:	e02f      	b.n	800c04a <create_name+0x33a>
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800bfea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d007      	beq.n	800c000 <create_name+0x2f0>
 800bff0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bff2:	4619      	mov	r1, r3
 800bff4:	481c      	ldr	r0, [pc, #112]	; (800c068 <create_name+0x358>)
 800bff6:	f7fe fbf2 	bl	800a7de <chk_chr>
 800bffa:	4603      	mov	r3, r0
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d008      	beq.n	800c012 <create_name+0x302>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c000:	235f      	movs	r3, #95	; 0x5f
 800c002:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c004:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c008:	f043 0303 	orr.w	r3, r3, #3
 800c00c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c010:	e01b      	b.n	800c04a <create_name+0x33a>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c012:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c014:	2b40      	cmp	r3, #64	; 0x40
 800c016:	d909      	bls.n	800c02c <create_name+0x31c>
 800c018:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c01a:	2b5a      	cmp	r3, #90	; 0x5a
 800c01c:	d806      	bhi.n	800c02c <create_name+0x31c>
					b |= 2;
 800c01e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c022:	f043 0302 	orr.w	r3, r3, #2
 800c026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c02a:	e00e      	b.n	800c04a <create_name+0x33a>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c02c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c02e:	2b60      	cmp	r3, #96	; 0x60
 800c030:	d90b      	bls.n	800c04a <create_name+0x33a>
 800c032:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c034:	2b7a      	cmp	r3, #122	; 0x7a
 800c036:	d808      	bhi.n	800c04a <create_name+0x33a>
						b |= 1; w -= 0x20;
 800c038:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c03c:	f043 0301 	orr.w	r3, r3, #1
 800c040:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c044:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c046:	3b20      	subs	r3, #32
 800c048:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c04a:	6a3b      	ldr	r3, [r7, #32]
 800c04c:	1c5a      	adds	r2, r3, #1
 800c04e:	623a      	str	r2, [r7, #32]
 800c050:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c052:	b2d1      	uxtb	r1, r2
 800c054:	687a      	ldr	r2, [r7, #4]
 800c056:	4413      	add	r3, r2
 800c058:	460a      	mov	r2, r1
 800c05a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800c05e:	e749      	b.n	800bef4 <create_name+0x1e4>
		if (!w) break;					/* Break on end of the LFN */
 800c060:	bf00      	nop
 800c062:	e004      	b.n	800c06e <create_name+0x35e>
 800c064:	0802455c 	.word	0x0802455c
 800c068:	08024568 	.word	0x08024568
			if (si > di) break;			/* No extension */
 800c06c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c074:	2be5      	cmp	r3, #229	; 0xe5
 800c076:	d103      	bne.n	800c080 <create_name+0x370>
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2205      	movs	r2, #5
 800c07c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800c080:	69fb      	ldr	r3, [r7, #28]
 800c082:	2b08      	cmp	r3, #8
 800c084:	d104      	bne.n	800c090 <create_name+0x380>
 800c086:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c08a:	009b      	lsls	r3, r3, #2
 800c08c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c094:	f003 030c 	and.w	r3, r3, #12
 800c098:	2b0c      	cmp	r3, #12
 800c09a:	d005      	beq.n	800c0a8 <create_name+0x398>
 800c09c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0a0:	f003 0303 	and.w	r3, r3, #3
 800c0a4:	2b03      	cmp	r3, #3
 800c0a6:	d105      	bne.n	800c0b4 <create_name+0x3a4>
 800c0a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c0ac:	f043 0302 	orr.w	r3, r3, #2
 800c0b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c0b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c0b8:	f003 0302 	and.w	r3, r3, #2
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d117      	bne.n	800c0f0 <create_name+0x3e0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c0c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0c4:	f003 0303 	and.w	r3, r3, #3
 800c0c8:	2b01      	cmp	r3, #1
 800c0ca:	d105      	bne.n	800c0d8 <create_name+0x3c8>
 800c0cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c0d0:	f043 0310 	orr.w	r3, r3, #16
 800c0d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c0d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0dc:	f003 030c 	and.w	r3, r3, #12
 800c0e0:	2b04      	cmp	r3, #4
 800c0e2:	d105      	bne.n	800c0f0 <create_name+0x3e0>
 800c0e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c0e8:	f043 0308 	orr.w	r3, r3, #8
 800c0ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c0f6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800c0fa:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3728      	adds	r7, #40	; 0x28
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}

0800c104 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b086      	sub	sp, #24
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c118:	e002      	b.n	800c120 <follow_path+0x1c>
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	3301      	adds	r3, #1
 800c11e:	603b      	str	r3, [r7, #0]
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	781b      	ldrb	r3, [r3, #0]
 800c124:	2b2f      	cmp	r3, #47	; 0x2f
 800c126:	d0f8      	beq.n	800c11a <follow_path+0x16>
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	2b5c      	cmp	r3, #92	; 0x5c
 800c12e:	d0f4      	beq.n	800c11a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	2200      	movs	r2, #0
 800c134:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	781b      	ldrb	r3, [r3, #0]
 800c13a:	2b1f      	cmp	r3, #31
 800c13c:	d80a      	bhi.n	800c154 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2280      	movs	r2, #128	; 0x80
 800c142:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c146:	2100      	movs	r1, #0
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f7ff f8c5 	bl	800b2d8 <dir_sdi>
 800c14e:	4603      	mov	r3, r0
 800c150:	75fb      	strb	r3, [r7, #23]
 800c152:	e043      	b.n	800c1dc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c154:	463b      	mov	r3, r7
 800c156:	4619      	mov	r1, r3
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f7ff fdd9 	bl	800bd10 <create_name>
 800c15e:	4603      	mov	r3, r0
 800c160:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c162:	7dfb      	ldrb	r3, [r7, #23]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d134      	bne.n	800c1d2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f7ff fc18 	bl	800b99e <dir_find>
 800c16e:	4603      	mov	r3, r0
 800c170:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c178:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c17a:	7dfb      	ldrb	r3, [r7, #23]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d00a      	beq.n	800c196 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c180:	7dfb      	ldrb	r3, [r7, #23]
 800c182:	2b04      	cmp	r3, #4
 800c184:	d127      	bne.n	800c1d6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c186:	7afb      	ldrb	r3, [r7, #11]
 800c188:	f003 0304 	and.w	r3, r3, #4
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d122      	bne.n	800c1d6 <follow_path+0xd2>
 800c190:	2305      	movs	r3, #5
 800c192:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c194:	e01f      	b.n	800c1d6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c196:	7afb      	ldrb	r3, [r7, #11]
 800c198:	f003 0304 	and.w	r3, r3, #4
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d11c      	bne.n	800c1da <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c1a0:	693b      	ldr	r3, [r7, #16]
 800c1a2:	799b      	ldrb	r3, [r3, #6]
 800c1a4:	f003 0310 	and.w	r3, r3, #16
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d102      	bne.n	800c1b2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c1ac:	2305      	movs	r3, #5
 800c1ae:	75fb      	strb	r3, [r7, #23]
 800c1b0:	e014      	b.n	800c1dc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	695b      	ldr	r3, [r3, #20]
 800c1bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1c0:	4413      	add	r3, r2
 800c1c2:	4619      	mov	r1, r3
 800c1c4:	68f8      	ldr	r0, [r7, #12]
 800c1c6:	f7ff fa0e 	bl	800b5e6 <ld_clust>
 800c1ca:	4602      	mov	r2, r0
 800c1cc:	693b      	ldr	r3, [r7, #16]
 800c1ce:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c1d0:	e7c0      	b.n	800c154 <follow_path+0x50>
			if (res != FR_OK) break;
 800c1d2:	bf00      	nop
 800c1d4:	e002      	b.n	800c1dc <follow_path+0xd8>
				break;
 800c1d6:	bf00      	nop
 800c1d8:	e000      	b.n	800c1dc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c1da:	bf00      	nop
			}
		}
	}

	return res;
 800c1dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3718      	adds	r7, #24
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}

0800c1e6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c1e6:	b480      	push	{r7}
 800c1e8:	b087      	sub	sp, #28
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c1ee:	f04f 33ff 	mov.w	r3, #4294967295
 800c1f2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d031      	beq.n	800c260 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	617b      	str	r3, [r7, #20]
 800c202:	e002      	b.n	800c20a <get_ldnumber+0x24>
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	3301      	adds	r3, #1
 800c208:	617b      	str	r3, [r7, #20]
 800c20a:	697b      	ldr	r3, [r7, #20]
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	2b1f      	cmp	r3, #31
 800c210:	d903      	bls.n	800c21a <get_ldnumber+0x34>
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	781b      	ldrb	r3, [r3, #0]
 800c216:	2b3a      	cmp	r3, #58	; 0x3a
 800c218:	d1f4      	bne.n	800c204 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	781b      	ldrb	r3, [r3, #0]
 800c21e:	2b3a      	cmp	r3, #58	; 0x3a
 800c220:	d11c      	bne.n	800c25c <get_ldnumber+0x76>
			tp = *path;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	1c5a      	adds	r2, r3, #1
 800c22c:	60fa      	str	r2, [r7, #12]
 800c22e:	781b      	ldrb	r3, [r3, #0]
 800c230:	3b30      	subs	r3, #48	; 0x30
 800c232:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	2b09      	cmp	r3, #9
 800c238:	d80e      	bhi.n	800c258 <get_ldnumber+0x72>
 800c23a:	68fa      	ldr	r2, [r7, #12]
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	429a      	cmp	r2, r3
 800c240:	d10a      	bne.n	800c258 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d107      	bne.n	800c258 <get_ldnumber+0x72>
					vol = (int)i;
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	3301      	adds	r3, #1
 800c250:	617b      	str	r3, [r7, #20]
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	697a      	ldr	r2, [r7, #20]
 800c256:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	e002      	b.n	800c262 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c25c:	2300      	movs	r3, #0
 800c25e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c260:	693b      	ldr	r3, [r7, #16]
}
 800c262:	4618      	mov	r0, r3
 800c264:	371c      	adds	r7, #28
 800c266:	46bd      	mov	sp, r7
 800c268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26c:	4770      	bx	lr
	...

0800c270 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b082      	sub	sp, #8
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2200      	movs	r2, #0
 800c27e:	70da      	strb	r2, [r3, #3]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f04f 32ff 	mov.w	r2, #4294967295
 800c286:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c288:	6839      	ldr	r1, [r7, #0]
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f7fe fca4 	bl	800abd8 <move_window>
 800c290:	4603      	mov	r3, r0
 800c292:	2b00      	cmp	r3, #0
 800c294:	d001      	beq.n	800c29a <check_fs+0x2a>
 800c296:	2304      	movs	r3, #4
 800c298:	e038      	b.n	800c30c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	3338      	adds	r3, #56	; 0x38
 800c29e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f7fe f9b6 	bl	800a614 <ld_word>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	d001      	beq.n	800c2b8 <check_fs+0x48>
 800c2b4:	2303      	movs	r3, #3
 800c2b6:	e029      	b.n	800c30c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c2be:	2be9      	cmp	r3, #233	; 0xe9
 800c2c0:	d009      	beq.n	800c2d6 <check_fs+0x66>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c2c8:	2beb      	cmp	r3, #235	; 0xeb
 800c2ca:	d11e      	bne.n	800c30a <check_fs+0x9a>
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c2d2:	2b90      	cmp	r3, #144	; 0x90
 800c2d4:	d119      	bne.n	800c30a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	3338      	adds	r3, #56	; 0x38
 800c2da:	3336      	adds	r3, #54	; 0x36
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f7fe f9b1 	bl	800a644 <ld_dword>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c2e8:	4a0a      	ldr	r2, [pc, #40]	; (800c314 <check_fs+0xa4>)
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d101      	bne.n	800c2f2 <check_fs+0x82>
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	e00c      	b.n	800c30c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	3338      	adds	r3, #56	; 0x38
 800c2f6:	3352      	adds	r3, #82	; 0x52
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f7fe f9a3 	bl	800a644 <ld_dword>
 800c2fe:	4603      	mov	r3, r0
 800c300:	4a05      	ldr	r2, [pc, #20]	; (800c318 <check_fs+0xa8>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d101      	bne.n	800c30a <check_fs+0x9a>
 800c306:	2300      	movs	r3, #0
 800c308:	e000      	b.n	800c30c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c30a:	2302      	movs	r3, #2
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3708      	adds	r7, #8
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}
 800c314:	00544146 	.word	0x00544146
 800c318:	33544146 	.word	0x33544146

0800c31c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b096      	sub	sp, #88	; 0x58
 800c320:	af00      	add	r7, sp, #0
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	60b9      	str	r1, [r7, #8]
 800c326:	4613      	mov	r3, r2
 800c328:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	2200      	movs	r2, #0
 800c32e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c330:	68f8      	ldr	r0, [r7, #12]
 800c332:	f7ff ff58 	bl	800c1e6 <get_ldnumber>
 800c336:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	da01      	bge.n	800c342 <find_volume+0x26>
 800c33e:	230b      	movs	r3, #11
 800c340:	e235      	b.n	800c7ae <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c342:	4aa5      	ldr	r2, [pc, #660]	; (800c5d8 <find_volume+0x2bc>)
 800c344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c34a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d101      	bne.n	800c356 <find_volume+0x3a>
 800c352:	230c      	movs	r3, #12
 800c354:	e22b      	b.n	800c7ae <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800c356:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c358:	f7fe fa5c 	bl	800a814 <lock_fs>
 800c35c:	4603      	mov	r3, r0
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d101      	bne.n	800c366 <find_volume+0x4a>
 800c362:	230f      	movs	r3, #15
 800c364:	e223      	b.n	800c7ae <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c36a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c36c:	79fb      	ldrb	r3, [r7, #7]
 800c36e:	f023 0301 	bic.w	r3, r3, #1
 800c372:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c376:	781b      	ldrb	r3, [r3, #0]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d01a      	beq.n	800c3b2 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800c37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c37e:	785b      	ldrb	r3, [r3, #1]
 800c380:	4618      	mov	r0, r3
 800c382:	f7fe f8a9 	bl	800a4d8 <disk_status>
 800c386:	4603      	mov	r3, r0
 800c388:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c38c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c390:	f003 0301 	and.w	r3, r3, #1
 800c394:	2b00      	cmp	r3, #0
 800c396:	d10c      	bne.n	800c3b2 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c398:	79fb      	ldrb	r3, [r7, #7]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d007      	beq.n	800c3ae <find_volume+0x92>
 800c39e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c3a2:	f003 0304 	and.w	r3, r3, #4
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d001      	beq.n	800c3ae <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800c3aa:	230a      	movs	r3, #10
 800c3ac:	e1ff      	b.n	800c7ae <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	e1fd      	b.n	800c7ae <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c3b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3ba:	b2da      	uxtb	r2, r3
 800c3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3be:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c2:	785b      	ldrb	r3, [r3, #1]
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f7fe f8a1 	bl	800a50c <disk_initialize>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c3d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c3d4:	f003 0301 	and.w	r3, r3, #1
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d001      	beq.n	800c3e0 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c3dc:	2303      	movs	r3, #3
 800c3de:	e1e6      	b.n	800c7ae <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c3e0:	79fb      	ldrb	r3, [r7, #7]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d007      	beq.n	800c3f6 <find_volume+0xda>
 800c3e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c3ea:	f003 0304 	and.w	r3, r3, #4
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d001      	beq.n	800c3f6 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800c3f2:	230a      	movs	r3, #10
 800c3f4:	e1db      	b.n	800c7ae <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c3fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c3fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c3fe:	f7ff ff37 	bl	800c270 <check_fs>
 800c402:	4603      	mov	r3, r0
 800c404:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c408:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c40c:	2b02      	cmp	r3, #2
 800c40e:	d149      	bne.n	800c4a4 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c410:	2300      	movs	r3, #0
 800c412:	643b      	str	r3, [r7, #64]	; 0x40
 800c414:	e01e      	b.n	800c454 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c418:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c41c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c41e:	011b      	lsls	r3, r3, #4
 800c420:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c424:	4413      	add	r3, r2
 800c426:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c42a:	3304      	adds	r3, #4
 800c42c:	781b      	ldrb	r3, [r3, #0]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d006      	beq.n	800c440 <find_volume+0x124>
 800c432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c434:	3308      	adds	r3, #8
 800c436:	4618      	mov	r0, r3
 800c438:	f7fe f904 	bl	800a644 <ld_dword>
 800c43c:	4602      	mov	r2, r0
 800c43e:	e000      	b.n	800c442 <find_volume+0x126>
 800c440:	2200      	movs	r2, #0
 800c442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c444:	009b      	lsls	r3, r3, #2
 800c446:	3358      	adds	r3, #88	; 0x58
 800c448:	443b      	add	r3, r7
 800c44a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c44e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c450:	3301      	adds	r3, #1
 800c452:	643b      	str	r3, [r7, #64]	; 0x40
 800c454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c456:	2b03      	cmp	r3, #3
 800c458:	d9dd      	bls.n	800c416 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c45a:	2300      	movs	r3, #0
 800c45c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c45e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c460:	2b00      	cmp	r3, #0
 800c462:	d002      	beq.n	800c46a <find_volume+0x14e>
 800c464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c466:	3b01      	subs	r3, #1
 800c468:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c46a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c46c:	009b      	lsls	r3, r3, #2
 800c46e:	3358      	adds	r3, #88	; 0x58
 800c470:	443b      	add	r3, r7
 800c472:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c476:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c478:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d005      	beq.n	800c48a <find_volume+0x16e>
 800c47e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c480:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c482:	f7ff fef5 	bl	800c270 <check_fs>
 800c486:	4603      	mov	r3, r0
 800c488:	e000      	b.n	800c48c <find_volume+0x170>
 800c48a:	2303      	movs	r3, #3
 800c48c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c490:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c494:	2b01      	cmp	r3, #1
 800c496:	d905      	bls.n	800c4a4 <find_volume+0x188>
 800c498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c49a:	3301      	adds	r3, #1
 800c49c:	643b      	str	r3, [r7, #64]	; 0x40
 800c49e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4a0:	2b03      	cmp	r3, #3
 800c4a2:	d9e2      	bls.n	800c46a <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c4a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c4a8:	2b04      	cmp	r3, #4
 800c4aa:	d101      	bne.n	800c4b0 <find_volume+0x194>
 800c4ac:	2301      	movs	r3, #1
 800c4ae:	e17e      	b.n	800c7ae <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c4b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c4b4:	2b01      	cmp	r3, #1
 800c4b6:	d901      	bls.n	800c4bc <find_volume+0x1a0>
 800c4b8:	230d      	movs	r3, #13
 800c4ba:	e178      	b.n	800c7ae <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4be:	3338      	adds	r3, #56	; 0x38
 800c4c0:	330b      	adds	r3, #11
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7fe f8a6 	bl	800a614 <ld_word>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4ce:	d001      	beq.n	800c4d4 <find_volume+0x1b8>
 800c4d0:	230d      	movs	r3, #13
 800c4d2:	e16c      	b.n	800c7ae <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4d6:	3338      	adds	r3, #56	; 0x38
 800c4d8:	3316      	adds	r3, #22
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f7fe f89a 	bl	800a614 <ld_word>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c4e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d106      	bne.n	800c4f8 <find_volume+0x1dc>
 800c4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ec:	3338      	adds	r3, #56	; 0x38
 800c4ee:	3324      	adds	r3, #36	; 0x24
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f7fe f8a7 	bl	800a644 <ld_dword>
 800c4f6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c4fc:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c500:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800c504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c506:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c50a:	789b      	ldrb	r3, [r3, #2]
 800c50c:	2b01      	cmp	r3, #1
 800c50e:	d005      	beq.n	800c51c <find_volume+0x200>
 800c510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c512:	789b      	ldrb	r3, [r3, #2]
 800c514:	2b02      	cmp	r3, #2
 800c516:	d001      	beq.n	800c51c <find_volume+0x200>
 800c518:	230d      	movs	r3, #13
 800c51a:	e148      	b.n	800c7ae <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c51e:	789b      	ldrb	r3, [r3, #2]
 800c520:	461a      	mov	r2, r3
 800c522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c524:	fb02 f303 	mul.w	r3, r2, r3
 800c528:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c52a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c52c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c530:	b29a      	uxth	r2, r3
 800c532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c534:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c538:	895b      	ldrh	r3, [r3, #10]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d008      	beq.n	800c550 <find_volume+0x234>
 800c53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c540:	895b      	ldrh	r3, [r3, #10]
 800c542:	461a      	mov	r2, r3
 800c544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c546:	895b      	ldrh	r3, [r3, #10]
 800c548:	3b01      	subs	r3, #1
 800c54a:	4013      	ands	r3, r2
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d001      	beq.n	800c554 <find_volume+0x238>
 800c550:	230d      	movs	r3, #13
 800c552:	e12c      	b.n	800c7ae <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c556:	3338      	adds	r3, #56	; 0x38
 800c558:	3311      	adds	r3, #17
 800c55a:	4618      	mov	r0, r3
 800c55c:	f7fe f85a 	bl	800a614 <ld_word>
 800c560:	4603      	mov	r3, r0
 800c562:	461a      	mov	r2, r3
 800c564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c566:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c56a:	891b      	ldrh	r3, [r3, #8]
 800c56c:	f003 030f 	and.w	r3, r3, #15
 800c570:	b29b      	uxth	r3, r3
 800c572:	2b00      	cmp	r3, #0
 800c574:	d001      	beq.n	800c57a <find_volume+0x25e>
 800c576:	230d      	movs	r3, #13
 800c578:	e119      	b.n	800c7ae <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c57c:	3338      	adds	r3, #56	; 0x38
 800c57e:	3313      	adds	r3, #19
 800c580:	4618      	mov	r0, r3
 800c582:	f7fe f847 	bl	800a614 <ld_word>
 800c586:	4603      	mov	r3, r0
 800c588:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c58a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d106      	bne.n	800c59e <find_volume+0x282>
 800c590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c592:	3338      	adds	r3, #56	; 0x38
 800c594:	3320      	adds	r3, #32
 800c596:	4618      	mov	r0, r3
 800c598:	f7fe f854 	bl	800a644 <ld_dword>
 800c59c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a0:	3338      	adds	r3, #56	; 0x38
 800c5a2:	330e      	adds	r3, #14
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f7fe f835 	bl	800a614 <ld_word>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c5ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d101      	bne.n	800c5b8 <find_volume+0x29c>
 800c5b4:	230d      	movs	r3, #13
 800c5b6:	e0fa      	b.n	800c7ae <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c5b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c5ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5bc:	4413      	add	r3, r2
 800c5be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c5c0:	8912      	ldrh	r2, [r2, #8]
 800c5c2:	0912      	lsrs	r2, r2, #4
 800c5c4:	b292      	uxth	r2, r2
 800c5c6:	4413      	add	r3, r2
 800c5c8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c5ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d204      	bcs.n	800c5dc <find_volume+0x2c0>
 800c5d2:	230d      	movs	r3, #13
 800c5d4:	e0eb      	b.n	800c7ae <find_volume+0x492>
 800c5d6:	bf00      	nop
 800c5d8:	200040ac 	.word	0x200040ac
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c5dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e0:	1ad3      	subs	r3, r2, r3
 800c5e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c5e4:	8952      	ldrh	r2, [r2, #10]
 800c5e6:	fbb3 f3f2 	udiv	r3, r3, r2
 800c5ea:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d101      	bne.n	800c5f6 <find_volume+0x2da>
 800c5f2:	230d      	movs	r3, #13
 800c5f4:	e0db      	b.n	800c7ae <find_volume+0x492>
		fmt = FS_FAT32;
 800c5f6:	2303      	movs	r3, #3
 800c5f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5fe:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c602:	4293      	cmp	r3, r2
 800c604:	d802      	bhi.n	800c60c <find_volume+0x2f0>
 800c606:	2302      	movs	r3, #2
 800c608:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c60e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c612:	4293      	cmp	r3, r2
 800c614:	d802      	bhi.n	800c61c <find_volume+0x300>
 800c616:	2301      	movs	r3, #1
 800c618:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c61e:	1c9a      	adds	r2, r3, #2
 800c620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c622:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800c624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c626:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c628:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c62a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c62c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c62e:	441a      	add	r2, r3
 800c630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c632:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800c634:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c638:	441a      	add	r2, r3
 800c63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c63c:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800c63e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c642:	2b03      	cmp	r3, #3
 800c644:	d11e      	bne.n	800c684 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c648:	3338      	adds	r3, #56	; 0x38
 800c64a:	332a      	adds	r3, #42	; 0x2a
 800c64c:	4618      	mov	r0, r3
 800c64e:	f7fd ffe1 	bl	800a614 <ld_word>
 800c652:	4603      	mov	r3, r0
 800c654:	2b00      	cmp	r3, #0
 800c656:	d001      	beq.n	800c65c <find_volume+0x340>
 800c658:	230d      	movs	r3, #13
 800c65a:	e0a8      	b.n	800c7ae <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c65e:	891b      	ldrh	r3, [r3, #8]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d001      	beq.n	800c668 <find_volume+0x34c>
 800c664:	230d      	movs	r3, #13
 800c666:	e0a2      	b.n	800c7ae <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c66a:	3338      	adds	r3, #56	; 0x38
 800c66c:	332c      	adds	r3, #44	; 0x2c
 800c66e:	4618      	mov	r0, r3
 800c670:	f7fd ffe8 	bl	800a644 <ld_dword>
 800c674:	4602      	mov	r2, r0
 800c676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c678:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c67c:	69db      	ldr	r3, [r3, #28]
 800c67e:	009b      	lsls	r3, r3, #2
 800c680:	647b      	str	r3, [r7, #68]	; 0x44
 800c682:	e01f      	b.n	800c6c4 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c686:	891b      	ldrh	r3, [r3, #8]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d101      	bne.n	800c690 <find_volume+0x374>
 800c68c:	230d      	movs	r3, #13
 800c68e:	e08e      	b.n	800c7ae <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c692:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c696:	441a      	add	r2, r3
 800c698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c69a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c69c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c6a0:	2b02      	cmp	r3, #2
 800c6a2:	d103      	bne.n	800c6ac <find_volume+0x390>
 800c6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6a6:	69db      	ldr	r3, [r3, #28]
 800c6a8:	005b      	lsls	r3, r3, #1
 800c6aa:	e00a      	b.n	800c6c2 <find_volume+0x3a6>
 800c6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ae:	69da      	ldr	r2, [r3, #28]
 800c6b0:	4613      	mov	r3, r2
 800c6b2:	005b      	lsls	r3, r3, #1
 800c6b4:	4413      	add	r3, r2
 800c6b6:	085a      	lsrs	r2, r3, #1
 800c6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ba:	69db      	ldr	r3, [r3, #28]
 800c6bc:	f003 0301 	and.w	r3, r3, #1
 800c6c0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c6c2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6c6:	6a1a      	ldr	r2, [r3, #32]
 800c6c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6ca:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c6ce:	0a5b      	lsrs	r3, r3, #9
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d201      	bcs.n	800c6d8 <find_volume+0x3bc>
 800c6d4:	230d      	movs	r3, #13
 800c6d6:	e06a      	b.n	800c7ae <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6da:	f04f 32ff 	mov.w	r2, #4294967295
 800c6de:	619a      	str	r2, [r3, #24]
 800c6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6e2:	699a      	ldr	r2, [r3, #24]
 800c6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6e6:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800c6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ea:	2280      	movs	r2, #128	; 0x80
 800c6ec:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c6ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c6f2:	2b03      	cmp	r3, #3
 800c6f4:	d149      	bne.n	800c78a <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6f8:	3338      	adds	r3, #56	; 0x38
 800c6fa:	3330      	adds	r3, #48	; 0x30
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f7fd ff89 	bl	800a614 <ld_word>
 800c702:	4603      	mov	r3, r0
 800c704:	2b01      	cmp	r3, #1
 800c706:	d140      	bne.n	800c78a <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c70a:	3301      	adds	r3, #1
 800c70c:	4619      	mov	r1, r3
 800c70e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c710:	f7fe fa62 	bl	800abd8 <move_window>
 800c714:	4603      	mov	r3, r0
 800c716:	2b00      	cmp	r3, #0
 800c718:	d137      	bne.n	800c78a <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800c71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c71c:	2200      	movs	r2, #0
 800c71e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c722:	3338      	adds	r3, #56	; 0x38
 800c724:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c728:	4618      	mov	r0, r3
 800c72a:	f7fd ff73 	bl	800a614 <ld_word>
 800c72e:	4603      	mov	r3, r0
 800c730:	461a      	mov	r2, r3
 800c732:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c736:	429a      	cmp	r2, r3
 800c738:	d127      	bne.n	800c78a <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c73c:	3338      	adds	r3, #56	; 0x38
 800c73e:	4618      	mov	r0, r3
 800c740:	f7fd ff80 	bl	800a644 <ld_dword>
 800c744:	4603      	mov	r3, r0
 800c746:	4a1c      	ldr	r2, [pc, #112]	; (800c7b8 <find_volume+0x49c>)
 800c748:	4293      	cmp	r3, r2
 800c74a:	d11e      	bne.n	800c78a <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c74e:	3338      	adds	r3, #56	; 0x38
 800c750:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c754:	4618      	mov	r0, r3
 800c756:	f7fd ff75 	bl	800a644 <ld_dword>
 800c75a:	4603      	mov	r3, r0
 800c75c:	4a17      	ldr	r2, [pc, #92]	; (800c7bc <find_volume+0x4a0>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d113      	bne.n	800c78a <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c764:	3338      	adds	r3, #56	; 0x38
 800c766:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c76a:	4618      	mov	r0, r3
 800c76c:	f7fd ff6a 	bl	800a644 <ld_dword>
 800c770:	4602      	mov	r2, r0
 800c772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c774:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c778:	3338      	adds	r3, #56	; 0x38
 800c77a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c77e:	4618      	mov	r0, r3
 800c780:	f7fd ff60 	bl	800a644 <ld_dword>
 800c784:	4602      	mov	r2, r0
 800c786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c788:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c78a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c78c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c790:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c792:	4b0b      	ldr	r3, [pc, #44]	; (800c7c0 <find_volume+0x4a4>)
 800c794:	881b      	ldrh	r3, [r3, #0]
 800c796:	3301      	adds	r3, #1
 800c798:	b29a      	uxth	r2, r3
 800c79a:	4b09      	ldr	r3, [pc, #36]	; (800c7c0 <find_volume+0x4a4>)
 800c79c:	801a      	strh	r2, [r3, #0]
 800c79e:	4b08      	ldr	r3, [pc, #32]	; (800c7c0 <find_volume+0x4a4>)
 800c7a0:	881a      	ldrh	r2, [r3, #0]
 800c7a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c7a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c7a8:	f7fe f9ae 	bl	800ab08 <clear_lock>
#endif
	return FR_OK;
 800c7ac:	2300      	movs	r3, #0
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3758      	adds	r7, #88	; 0x58
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
 800c7b6:	bf00      	nop
 800c7b8:	41615252 	.word	0x41615252
 800c7bc:	61417272 	.word	0x61417272
 800c7c0:	200040b0 	.word	0x200040b0

0800c7c4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b084      	sub	sp, #16
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c7ce:	2309      	movs	r3, #9
 800c7d0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d02e      	beq.n	800c836 <validate+0x72>
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d02a      	beq.n	800c836 <validate+0x72>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	781b      	ldrb	r3, [r3, #0]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d025      	beq.n	800c836 <validate+0x72>
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	889a      	ldrh	r2, [r3, #4]
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	88db      	ldrh	r3, [r3, #6]
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d11e      	bne.n	800c836 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f7fe f809 	bl	800a814 <lock_fs>
 800c802:	4603      	mov	r3, r0
 800c804:	2b00      	cmp	r3, #0
 800c806:	d014      	beq.n	800c832 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	785b      	ldrb	r3, [r3, #1]
 800c80e:	4618      	mov	r0, r3
 800c810:	f7fd fe62 	bl	800a4d8 <disk_status>
 800c814:	4603      	mov	r3, r0
 800c816:	f003 0301 	and.w	r3, r3, #1
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d102      	bne.n	800c824 <validate+0x60>
				res = FR_OK;
 800c81e:	2300      	movs	r3, #0
 800c820:	73fb      	strb	r3, [r7, #15]
 800c822:	e008      	b.n	800c836 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	2100      	movs	r1, #0
 800c82a:	4618      	mov	r0, r3
 800c82c:	f7fe f808 	bl	800a840 <unlock_fs>
 800c830:	e001      	b.n	800c836 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800c832:	230f      	movs	r3, #15
 800c834:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c836:	7bfb      	ldrb	r3, [r7, #15]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d102      	bne.n	800c842 <validate+0x7e>
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	e000      	b.n	800c844 <validate+0x80>
 800c842:	2300      	movs	r3, #0
 800c844:	683a      	ldr	r2, [r7, #0]
 800c846:	6013      	str	r3, [r2, #0]
	return res;
 800c848:	7bfb      	ldrb	r3, [r7, #15]
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	3710      	adds	r7, #16
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}
	...

0800c854 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b088      	sub	sp, #32
 800c858:	af00      	add	r7, sp, #0
 800c85a:	60f8      	str	r0, [r7, #12]
 800c85c:	60b9      	str	r1, [r7, #8]
 800c85e:	4613      	mov	r3, r2
 800c860:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c866:	f107 0310 	add.w	r3, r7, #16
 800c86a:	4618      	mov	r0, r3
 800c86c:	f7ff fcbb 	bl	800c1e6 <get_ldnumber>
 800c870:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c872:	69fb      	ldr	r3, [r7, #28]
 800c874:	2b00      	cmp	r3, #0
 800c876:	da01      	bge.n	800c87c <f_mount+0x28>
 800c878:	230b      	movs	r3, #11
 800c87a:	e048      	b.n	800c90e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c87c:	4a26      	ldr	r2, [pc, #152]	; (800c918 <f_mount+0xc4>)
 800c87e:	69fb      	ldr	r3, [r7, #28]
 800c880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c884:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c886:	69bb      	ldr	r3, [r7, #24]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d00f      	beq.n	800c8ac <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c88c:	69b8      	ldr	r0, [r7, #24]
 800c88e:	f7fe f93b 	bl	800ab08 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800c892:	69bb      	ldr	r3, [r7, #24]
 800c894:	691b      	ldr	r3, [r3, #16]
 800c896:	4618      	mov	r0, r3
 800c898:	f001 fc55 	bl	800e146 <ff_del_syncobj>
 800c89c:	4603      	mov	r3, r0
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d101      	bne.n	800c8a6 <f_mount+0x52>
 800c8a2:	2302      	movs	r3, #2
 800c8a4:	e033      	b.n	800c90e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c8a6:	69bb      	ldr	r3, [r7, #24]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d00f      	beq.n	800c8d2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800c8b8:	69fb      	ldr	r3, [r7, #28]
 800c8ba:	b2da      	uxtb	r2, r3
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	3310      	adds	r3, #16
 800c8c0:	4619      	mov	r1, r3
 800c8c2:	4610      	mov	r0, r2
 800c8c4:	f001 fc24 	bl	800e110 <ff_cre_syncobj>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d101      	bne.n	800c8d2 <f_mount+0x7e>
 800c8ce:	2302      	movs	r3, #2
 800c8d0:	e01d      	b.n	800c90e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c8d2:	68fa      	ldr	r2, [r7, #12]
 800c8d4:	4910      	ldr	r1, [pc, #64]	; (800c918 <f_mount+0xc4>)
 800c8d6:	69fb      	ldr	r3, [r7, #28]
 800c8d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d002      	beq.n	800c8e8 <f_mount+0x94>
 800c8e2:	79fb      	ldrb	r3, [r7, #7]
 800c8e4:	2b01      	cmp	r3, #1
 800c8e6:	d001      	beq.n	800c8ec <f_mount+0x98>
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	e010      	b.n	800c90e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c8ec:	f107 010c 	add.w	r1, r7, #12
 800c8f0:	f107 0308 	add.w	r3, r7, #8
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f7ff fd10 	bl	800c31c <find_volume>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	7dfa      	ldrb	r2, [r7, #23]
 800c904:	4611      	mov	r1, r2
 800c906:	4618      	mov	r0, r3
 800c908:	f7fd ff9a 	bl	800a840 <unlock_fs>
 800c90c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3720      	adds	r7, #32
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}
 800c916:	bf00      	nop
 800c918:	200040ac 	.word	0x200040ac

0800c91c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800c922:	af00      	add	r7, sp, #0
 800c924:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c928:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c92c:	6018      	str	r0, [r3, #0]
 800c92e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c932:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800c936:	6019      	str	r1, [r3, #0]
 800c938:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c93c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800c940:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c942:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c946:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d101      	bne.n	800c954 <f_open+0x38>
 800c950:	2309      	movs	r3, #9
 800c952:	e29d      	b.n	800ce90 <f_open+0x574>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c954:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c958:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800c95c:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800c960:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800c964:	7812      	ldrb	r2, [r2, #0]
 800c966:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800c96a:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800c96c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c970:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800c974:	781a      	ldrb	r2, [r3, #0]
 800c976:	f507 7105 	add.w	r1, r7, #532	; 0x214
 800c97a:	f107 0308 	add.w	r3, r7, #8
 800c97e:	4618      	mov	r0, r3
 800c980:	f7ff fccc 	bl	800c31c <find_volume>
 800c984:	4603      	mov	r3, r0
 800c986:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 800c98a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800c98e:	2b00      	cmp	r3, #0
 800c990:	f040 8269 	bne.w	800ce66 <f_open+0x54a>
		dj.obj.fs = fs;
 800c994:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c998:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 800c99c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c9a0:	f107 0214 	add.w	r2, r7, #20
 800c9a4:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800c9a6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c9aa:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800c9ae:	681a      	ldr	r2, [r3, #0]
 800c9b0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800c9b4:	4611      	mov	r1, r2
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f7ff fba4 	bl	800c104 <follow_path>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c9c2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d11e      	bne.n	800ca08 <f_open+0xec>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c9ca:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 800c9ce:	b25b      	sxtb	r3, r3
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	da03      	bge.n	800c9dc <f_open+0xc0>
				res = FR_INVALID_NAME;
 800c9d4:	2306      	movs	r3, #6
 800c9d6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800c9da:	e015      	b.n	800ca08 <f_open+0xec>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c9dc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800c9e0:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800c9e4:	781b      	ldrb	r3, [r3, #0]
 800c9e6:	f023 0301 	bic.w	r3, r3, #1
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	bf14      	ite	ne
 800c9ee:	2301      	movne	r3, #1
 800c9f0:	2300      	moveq	r3, #0
 800c9f2:	b2db      	uxtb	r3, r3
 800c9f4:	461a      	mov	r2, r3
 800c9f6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800c9fa:	4611      	mov	r1, r2
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	f7fd ff3b 	bl	800a878 <chk_lock>
 800ca02:	4603      	mov	r3, r0
 800ca04:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ca08:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ca0c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800ca10:	781b      	ldrb	r3, [r3, #0]
 800ca12:	f003 031c 	and.w	r3, r3, #28
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	f000 80a7 	beq.w	800cb6a <f_open+0x24e>
			if (res != FR_OK) {					/* No file, create new */
 800ca1c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d01f      	beq.n	800ca64 <f_open+0x148>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ca24:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800ca28:	2b04      	cmp	r3, #4
 800ca2a:	d10e      	bne.n	800ca4a <f_open+0x12e>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ca2c:	f7fd ff80 	bl	800a930 <enq_lock>
 800ca30:	4603      	mov	r3, r0
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d006      	beq.n	800ca44 <f_open+0x128>
 800ca36:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f7ff f870 	bl	800bb20 <dir_register>
 800ca40:	4603      	mov	r3, r0
 800ca42:	e000      	b.n	800ca46 <f_open+0x12a>
 800ca44:	2312      	movs	r3, #18
 800ca46:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ca4a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ca4e:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800ca52:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800ca56:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800ca5a:	7812      	ldrb	r2, [r2, #0]
 800ca5c:	f042 0208 	orr.w	r2, r2, #8
 800ca60:	701a      	strb	r2, [r3, #0]
 800ca62:	e015      	b.n	800ca90 <f_open+0x174>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ca64:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800ca68:	f003 0311 	and.w	r3, r3, #17
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d003      	beq.n	800ca78 <f_open+0x15c>
					res = FR_DENIED;
 800ca70:	2307      	movs	r3, #7
 800ca72:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800ca76:	e00b      	b.n	800ca90 <f_open+0x174>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ca78:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ca7c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800ca80:	781b      	ldrb	r3, [r3, #0]
 800ca82:	f003 0304 	and.w	r3, r3, #4
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d002      	beq.n	800ca90 <f_open+0x174>
 800ca8a:	2308      	movs	r3, #8
 800ca8c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ca90:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	f040 8088 	bne.w	800cbaa <f_open+0x28e>
 800ca9a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ca9e:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800caa2:	781b      	ldrb	r3, [r3, #0]
 800caa4:	f003 0308 	and.w	r3, r3, #8
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d07e      	beq.n	800cbaa <f_open+0x28e>
				dw = GET_FATTIME();
 800caac:	f7fc fe2a 	bl	8009704 <get_fattime>
 800cab0:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800cab4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800cab8:	330e      	adds	r3, #14
 800caba:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800cabe:	4618      	mov	r0, r3
 800cac0:	f7fd fdfe 	bl	800a6c0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cac4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800cac8:	3316      	adds	r3, #22
 800caca:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800cace:	4618      	mov	r0, r3
 800cad0:	f7fd fdf6 	bl	800a6c0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cad4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800cad8:	330b      	adds	r3, #11
 800cada:	2220      	movs	r2, #32
 800cadc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cade:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800cae2:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800cae6:	4611      	mov	r1, r2
 800cae8:	4618      	mov	r0, r3
 800caea:	f7fe fd7c 	bl	800b5e6 <ld_clust>
 800caee:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800caf2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800caf6:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 800cafa:	2200      	movs	r2, #0
 800cafc:	4618      	mov	r0, r3
 800cafe:	f7fe fd91 	bl	800b624 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cb02:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800cb06:	331c      	adds	r3, #28
 800cb08:	2100      	movs	r1, #0
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f7fd fdd8 	bl	800a6c0 <st_dword>
					fs->wflag = 1;
 800cb10:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800cb14:	2201      	movs	r2, #1
 800cb16:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800cb18:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d044      	beq.n	800cbaa <f_open+0x28e>
						dw = fs->winsect;
 800cb20:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800cb24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb26:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 800cb2a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800cb2e:	2200      	movs	r2, #0
 800cb30:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 800cb34:	4618      	mov	r0, r3
 800cb36:	f7fe fa9e 	bl	800b076 <remove_chain>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 800cb40:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d130      	bne.n	800cbaa <f_open+0x28e>
							res = move_window(fs, dw);
 800cb48:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800cb4c:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800cb50:	4618      	mov	r0, r3
 800cb52:	f7fe f841 	bl	800abd8 <move_window>
 800cb56:	4603      	mov	r3, r0
 800cb58:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800cb5c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800cb60:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 800cb64:	3a01      	subs	r2, #1
 800cb66:	615a      	str	r2, [r3, #20]
 800cb68:	e01f      	b.n	800cbaa <f_open+0x28e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800cb6a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d11b      	bne.n	800cbaa <f_open+0x28e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800cb72:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800cb76:	f003 0310 	and.w	r3, r3, #16
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d003      	beq.n	800cb86 <f_open+0x26a>
					res = FR_NO_FILE;
 800cb7e:	2304      	movs	r3, #4
 800cb80:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800cb84:	e011      	b.n	800cbaa <f_open+0x28e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cb86:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800cb8a:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800cb8e:	781b      	ldrb	r3, [r3, #0]
 800cb90:	f003 0302 	and.w	r3, r3, #2
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d008      	beq.n	800cbaa <f_open+0x28e>
 800cb98:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800cb9c:	f003 0301 	and.w	r3, r3, #1
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d002      	beq.n	800cbaa <f_open+0x28e>
						res = FR_DENIED;
 800cba4:	2307      	movs	r3, #7
 800cba6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 800cbaa:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d14a      	bne.n	800cc48 <f_open+0x32c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cbb2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800cbb6:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	f003 0308 	and.w	r3, r3, #8
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d00b      	beq.n	800cbdc <f_open+0x2c0>
				mode |= FA_MODIFIED;
 800cbc4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800cbc8:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800cbcc:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800cbd0:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800cbd4:	7812      	ldrb	r2, [r2, #0]
 800cbd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cbda:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800cbdc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800cbe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cbe2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800cbe6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800cbee:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800cbf2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800cbf6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cbfe:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800cc02:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800cc06:	781b      	ldrb	r3, [r3, #0]
 800cc08:	f023 0301 	bic.w	r3, r3, #1
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	bf14      	ite	ne
 800cc10:	2301      	movne	r3, #1
 800cc12:	2300      	moveq	r3, #0
 800cc14:	b2db      	uxtb	r3, r3
 800cc16:	461a      	mov	r2, r3
 800cc18:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800cc1c:	4611      	mov	r1, r2
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f7fd fea8 	bl	800a974 <inc_lock>
 800cc24:	4602      	mov	r2, r0
 800cc26:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800cc2a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800cc32:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800cc36:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	691b      	ldr	r3, [r3, #16]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d102      	bne.n	800cc48 <f_open+0x32c>
 800cc42:	2302      	movs	r3, #2
 800cc44:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 800cc48:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	f040 810a 	bne.w	800ce66 <f_open+0x54a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800cc52:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800cc56:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800cc5a:	4611      	mov	r1, r2
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f7fe fcc2 	bl	800b5e6 <ld_clust>
 800cc62:	4602      	mov	r2, r0
 800cc64:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800cc68:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800cc70:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800cc74:	331c      	adds	r3, #28
 800cc76:	4618      	mov	r0, r3
 800cc78:	f7fd fce4 	bl	800a644 <ld_dword>
 800cc7c:	4602      	mov	r2, r0
 800cc7e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800cc82:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800cc8a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800cc8e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	2200      	movs	r2, #0
 800cc96:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800cc98:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800cc9c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800cca0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800cca8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ccac:	88da      	ldrh	r2, [r3, #6]
 800ccae:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ccb2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ccba:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ccbe:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800ccc8:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800cccc:	7812      	ldrb	r2, [r2, #0]
 800ccce:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ccd0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ccd4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ccde:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800cce2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	2200      	movs	r2, #0
 800ccea:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ccec:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ccf0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ccfa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ccfe:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	3330      	adds	r3, #48	; 0x30
 800cd06:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cd0a:	2100      	movs	r1, #0
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f7fd fd24 	bl	800a75a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800cd12:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800cd16:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800cd1a:	781b      	ldrb	r3, [r3, #0]
 800cd1c:	f003 0320 	and.w	r3, r3, #32
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	f000 80a0 	beq.w	800ce66 <f_open+0x54a>
 800cd26:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800cd2a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	68db      	ldr	r3, [r3, #12]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	f000 8097 	beq.w	800ce66 <f_open+0x54a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800cd38:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800cd3c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	68da      	ldr	r2, [r3, #12]
 800cd44:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800cd48:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800cd50:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800cd54:	895b      	ldrh	r3, [r3, #10]
 800cd56:	025b      	lsls	r3, r3, #9
 800cd58:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800cd5c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800cd60:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	689b      	ldr	r3, [r3, #8]
 800cd68:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cd6c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800cd70:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	68db      	ldr	r3, [r3, #12]
 800cd78:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800cd7c:	e021      	b.n	800cdc2 <f_open+0x4a6>
					clst = get_fat(&fp->obj, clst);
 800cd7e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800cd82:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f7fd ffde 	bl	800ad4e <get_fat>
 800cd92:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 800cd96:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800cd9a:	2b01      	cmp	r3, #1
 800cd9c:	d802      	bhi.n	800cda4 <f_open+0x488>
 800cd9e:	2302      	movs	r3, #2
 800cda0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800cda4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800cda8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdac:	d102      	bne.n	800cdb4 <f_open+0x498>
 800cdae:	2301      	movs	r3, #1
 800cdb0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cdb4:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800cdb8:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800cdbc:	1ad3      	subs	r3, r2, r3
 800cdbe:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800cdc2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d105      	bne.n	800cdd6 <f_open+0x4ba>
 800cdca:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800cdce:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	d8d3      	bhi.n	800cd7e <f_open+0x462>
				}
				fp->clust = clst;
 800cdd6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800cdda:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 800cde4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800cde6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d13b      	bne.n	800ce66 <f_open+0x54a>
 800cdee:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800cdf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d035      	beq.n	800ce66 <f_open+0x54a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800cdfa:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800cdfe:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800ce02:	4618      	mov	r0, r3
 800ce04:	f7fd ff84 	bl	800ad10 <clust2sect>
 800ce08:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 800ce0c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d103      	bne.n	800ce1c <f_open+0x500>
						res = FR_INT_ERR;
 800ce14:	2302      	movs	r3, #2
 800ce16:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800ce1a:	e024      	b.n	800ce66 <f_open+0x54a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ce1c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800ce20:	0a5a      	lsrs	r2, r3, #9
 800ce22:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800ce26:	441a      	add	r2, r3
 800ce28:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ce2c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ce34:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ce38:	7858      	ldrb	r0, [r3, #1]
 800ce3a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ce3e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ce48:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ce4c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	6a1a      	ldr	r2, [r3, #32]
 800ce54:	2301      	movs	r3, #1
 800ce56:	f7fd fb7f 	bl	800a558 <disk_read>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d002      	beq.n	800ce66 <f_open+0x54a>
 800ce60:	2301      	movs	r3, #1
 800ce62:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ce66:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d006      	beq.n	800ce7c <f_open+0x560>
 800ce6e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ce72:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ce7c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ce80:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 800ce84:	4611      	mov	r1, r2
 800ce86:	4618      	mov	r0, r3
 800ce88:	f7fd fcda 	bl	800a840 <unlock_fs>
 800ce8c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 800ce90:	4618      	mov	r0, r3
 800ce92:	f507 771a 	add.w	r7, r7, #616	; 0x268
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}

0800ce9a <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ce9a:	b580      	push	{r7, lr}
 800ce9c:	b08e      	sub	sp, #56	; 0x38
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	60f8      	str	r0, [r7, #12]
 800cea2:	60b9      	str	r1, [r7, #8]
 800cea4:	607a      	str	r2, [r7, #4]
 800cea6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	2200      	movs	r2, #0
 800ceb0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	f107 0214 	add.w	r2, r7, #20
 800ceb8:	4611      	mov	r1, r2
 800ceba:	4618      	mov	r0, r3
 800cebc:	f7ff fc82 	bl	800c7c4 <validate>
 800cec0:	4603      	mov	r3, r0
 800cec2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cec6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d107      	bne.n	800cede <f_read+0x44>
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	7d5b      	ldrb	r3, [r3, #21]
 800ced2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ced6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d009      	beq.n	800cef2 <f_read+0x58>
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800cee4:	4611      	mov	r1, r2
 800cee6:	4618      	mov	r0, r3
 800cee8:	f7fd fcaa 	bl	800a840 <unlock_fs>
 800ceec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cef0:	e13d      	b.n	800d16e <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	7d1b      	ldrb	r3, [r3, #20]
 800cef6:	f003 0301 	and.w	r3, r3, #1
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d106      	bne.n	800cf0c <f_read+0x72>
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	2107      	movs	r1, #7
 800cf02:	4618      	mov	r0, r3
 800cf04:	f7fd fc9c 	bl	800a840 <unlock_fs>
 800cf08:	2307      	movs	r3, #7
 800cf0a:	e130      	b.n	800d16e <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	68da      	ldr	r2, [r3, #12]
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	699b      	ldr	r3, [r3, #24]
 800cf14:	1ad3      	subs	r3, r2, r3
 800cf16:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800cf18:	687a      	ldr	r2, [r7, #4]
 800cf1a:	6a3b      	ldr	r3, [r7, #32]
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	f240 811c 	bls.w	800d15a <f_read+0x2c0>
 800cf22:	6a3b      	ldr	r3, [r7, #32]
 800cf24:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800cf26:	e118      	b.n	800d15a <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	699b      	ldr	r3, [r3, #24]
 800cf2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	f040 80e4 	bne.w	800d0fe <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	699b      	ldr	r3, [r3, #24]
 800cf3a:	0a5b      	lsrs	r3, r3, #9
 800cf3c:	697a      	ldr	r2, [r7, #20]
 800cf3e:	8952      	ldrh	r2, [r2, #10]
 800cf40:	3a01      	subs	r2, #1
 800cf42:	4013      	ands	r3, r2
 800cf44:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800cf46:	69fb      	ldr	r3, [r7, #28]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d139      	bne.n	800cfc0 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	699b      	ldr	r3, [r3, #24]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d103      	bne.n	800cf5c <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	689b      	ldr	r3, [r3, #8]
 800cf58:	633b      	str	r3, [r7, #48]	; 0x30
 800cf5a:	e013      	b.n	800cf84 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d007      	beq.n	800cf74 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	699b      	ldr	r3, [r3, #24]
 800cf68:	4619      	mov	r1, r3
 800cf6a:	68f8      	ldr	r0, [r7, #12]
 800cf6c:	f7fe f980 	bl	800b270 <clmt_clust>
 800cf70:	6338      	str	r0, [r7, #48]	; 0x30
 800cf72:	e007      	b.n	800cf84 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800cf74:	68fa      	ldr	r2, [r7, #12]
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	69db      	ldr	r3, [r3, #28]
 800cf7a:	4619      	mov	r1, r3
 800cf7c:	4610      	mov	r0, r2
 800cf7e:	f7fd fee6 	bl	800ad4e <get_fat>
 800cf82:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800cf84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf86:	2b01      	cmp	r3, #1
 800cf88:	d809      	bhi.n	800cf9e <f_read+0x104>
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	2202      	movs	r2, #2
 800cf8e:	755a      	strb	r2, [r3, #21]
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	2102      	movs	r1, #2
 800cf94:	4618      	mov	r0, r3
 800cf96:	f7fd fc53 	bl	800a840 <unlock_fs>
 800cf9a:	2302      	movs	r3, #2
 800cf9c:	e0e7      	b.n	800d16e <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cf9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfa4:	d109      	bne.n	800cfba <f_read+0x120>
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	2201      	movs	r2, #1
 800cfaa:	755a      	strb	r2, [r3, #21]
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	2101      	movs	r1, #1
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f7fd fc45 	bl	800a840 <unlock_fs>
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	e0d9      	b.n	800d16e <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfbe:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cfc0:	697a      	ldr	r2, [r7, #20]
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	69db      	ldr	r3, [r3, #28]
 800cfc6:	4619      	mov	r1, r3
 800cfc8:	4610      	mov	r0, r2
 800cfca:	f7fd fea1 	bl	800ad10 <clust2sect>
 800cfce:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800cfd0:	69bb      	ldr	r3, [r7, #24]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d109      	bne.n	800cfea <f_read+0x150>
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	2202      	movs	r2, #2
 800cfda:	755a      	strb	r2, [r3, #21]
 800cfdc:	697b      	ldr	r3, [r7, #20]
 800cfde:	2102      	movs	r1, #2
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f7fd fc2d 	bl	800a840 <unlock_fs>
 800cfe6:	2302      	movs	r3, #2
 800cfe8:	e0c1      	b.n	800d16e <f_read+0x2d4>
			sect += csect;
 800cfea:	69ba      	ldr	r2, [r7, #24]
 800cfec:	69fb      	ldr	r3, [r7, #28]
 800cfee:	4413      	add	r3, r2
 800cff0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	0a5b      	lsrs	r3, r3, #9
 800cff6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800cff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d03e      	beq.n	800d07c <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cffe:	69fa      	ldr	r2, [r7, #28]
 800d000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d002:	4413      	add	r3, r2
 800d004:	697a      	ldr	r2, [r7, #20]
 800d006:	8952      	ldrh	r2, [r2, #10]
 800d008:	4293      	cmp	r3, r2
 800d00a:	d905      	bls.n	800d018 <f_read+0x17e>
					cc = fs->csize - csect;
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	895b      	ldrh	r3, [r3, #10]
 800d010:	461a      	mov	r2, r3
 800d012:	69fb      	ldr	r3, [r7, #28]
 800d014:	1ad3      	subs	r3, r2, r3
 800d016:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	7858      	ldrb	r0, [r3, #1]
 800d01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d01e:	69ba      	ldr	r2, [r7, #24]
 800d020:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d022:	f7fd fa99 	bl	800a558 <disk_read>
 800d026:	4603      	mov	r3, r0
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d009      	beq.n	800d040 <f_read+0x1a6>
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	2201      	movs	r2, #1
 800d030:	755a      	strb	r2, [r3, #21]
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	2101      	movs	r1, #1
 800d036:	4618      	mov	r0, r3
 800d038:	f7fd fc02 	bl	800a840 <unlock_fs>
 800d03c:	2301      	movs	r3, #1
 800d03e:	e096      	b.n	800d16e <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	7d1b      	ldrb	r3, [r3, #20]
 800d044:	b25b      	sxtb	r3, r3
 800d046:	2b00      	cmp	r3, #0
 800d048:	da14      	bge.n	800d074 <f_read+0x1da>
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	6a1a      	ldr	r2, [r3, #32]
 800d04e:	69bb      	ldr	r3, [r7, #24]
 800d050:	1ad3      	subs	r3, r2, r3
 800d052:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d054:	429a      	cmp	r2, r3
 800d056:	d90d      	bls.n	800d074 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	6a1a      	ldr	r2, [r3, #32]
 800d05c:	69bb      	ldr	r3, [r7, #24]
 800d05e:	1ad3      	subs	r3, r2, r3
 800d060:	025b      	lsls	r3, r3, #9
 800d062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d064:	18d0      	adds	r0, r2, r3
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	3330      	adds	r3, #48	; 0x30
 800d06a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d06e:	4619      	mov	r1, r3
 800d070:	f7fd fb52 	bl	800a718 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d076:	025b      	lsls	r3, r3, #9
 800d078:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800d07a:	e05a      	b.n	800d132 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	6a1b      	ldr	r3, [r3, #32]
 800d080:	69ba      	ldr	r2, [r7, #24]
 800d082:	429a      	cmp	r2, r3
 800d084:	d038      	beq.n	800d0f8 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	7d1b      	ldrb	r3, [r3, #20]
 800d08a:	b25b      	sxtb	r3, r3
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	da1d      	bge.n	800d0cc <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	7858      	ldrb	r0, [r3, #1]
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	6a1a      	ldr	r2, [r3, #32]
 800d09e:	2301      	movs	r3, #1
 800d0a0:	f7fd fa7a 	bl	800a598 <disk_write>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d009      	beq.n	800d0be <f_read+0x224>
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	2201      	movs	r2, #1
 800d0ae:	755a      	strb	r2, [r3, #21]
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	2101      	movs	r1, #1
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f7fd fbc3 	bl	800a840 <unlock_fs>
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	e057      	b.n	800d16e <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	7d1b      	ldrb	r3, [r3, #20]
 800d0c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0c6:	b2da      	uxtb	r2, r3
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d0cc:	697b      	ldr	r3, [r7, #20]
 800d0ce:	7858      	ldrb	r0, [r3, #1]
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	69ba      	ldr	r2, [r7, #24]
 800d0da:	f7fd fa3d 	bl	800a558 <disk_read>
 800d0de:	4603      	mov	r3, r0
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d009      	beq.n	800d0f8 <f_read+0x25e>
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	2201      	movs	r2, #1
 800d0e8:	755a      	strb	r2, [r3, #21]
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	2101      	movs	r1, #1
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f7fd fba6 	bl	800a840 <unlock_fs>
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	e03a      	b.n	800d16e <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	69ba      	ldr	r2, [r7, #24]
 800d0fc:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	699b      	ldr	r3, [r3, #24]
 800d102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d106:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d10a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d10c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	429a      	cmp	r2, r3
 800d112:	d901      	bls.n	800d118 <f_read+0x27e>
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	699b      	ldr	r3, [r3, #24]
 800d122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d126:	4413      	add	r3, r2
 800d128:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d12a:	4619      	mov	r1, r3
 800d12c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d12e:	f7fd faf3 	bl	800a718 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d136:	4413      	add	r3, r2
 800d138:	627b      	str	r3, [r7, #36]	; 0x24
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	699a      	ldr	r2, [r3, #24]
 800d13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d140:	441a      	add	r2, r3
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	619a      	str	r2, [r3, #24]
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	681a      	ldr	r2, [r3, #0]
 800d14a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d14c:	441a      	add	r2, r3
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	601a      	str	r2, [r3, #0]
 800d152:	687a      	ldr	r2, [r7, #4]
 800d154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d156:	1ad3      	subs	r3, r2, r3
 800d158:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	f47f aee3 	bne.w	800cf28 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	2100      	movs	r1, #0
 800d166:	4618      	mov	r0, r3
 800d168:	f7fd fb6a 	bl	800a840 <unlock_fs>
 800d16c:	2300      	movs	r3, #0
}
 800d16e:	4618      	mov	r0, r3
 800d170:	3738      	adds	r7, #56	; 0x38
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}

0800d176 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d176:	b580      	push	{r7, lr}
 800d178:	b08c      	sub	sp, #48	; 0x30
 800d17a:	af00      	add	r7, sp, #0
 800d17c:	60f8      	str	r0, [r7, #12]
 800d17e:	60b9      	str	r1, [r7, #8]
 800d180:	607a      	str	r2, [r7, #4]
 800d182:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	2200      	movs	r2, #0
 800d18c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	f107 0210 	add.w	r2, r7, #16
 800d194:	4611      	mov	r1, r2
 800d196:	4618      	mov	r0, r3
 800d198:	f7ff fb14 	bl	800c7c4 <validate>
 800d19c:	4603      	mov	r3, r0
 800d19e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d1a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d107      	bne.n	800d1ba <f_write+0x44>
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	7d5b      	ldrb	r3, [r3, #21]
 800d1ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d1b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d009      	beq.n	800d1ce <f_write+0x58>
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d1c0:	4611      	mov	r1, r2
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f7fd fb3c 	bl	800a840 <unlock_fs>
 800d1c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d1cc:	e173      	b.n	800d4b6 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	7d1b      	ldrb	r3, [r3, #20]
 800d1d2:	f003 0302 	and.w	r3, r3, #2
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d106      	bne.n	800d1e8 <f_write+0x72>
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	2107      	movs	r1, #7
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f7fd fb2e 	bl	800a840 <unlock_fs>
 800d1e4:	2307      	movs	r3, #7
 800d1e6:	e166      	b.n	800d4b6 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	699a      	ldr	r2, [r3, #24]
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	441a      	add	r2, r3
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	699b      	ldr	r3, [r3, #24]
 800d1f4:	429a      	cmp	r2, r3
 800d1f6:	f080 814b 	bcs.w	800d490 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	699b      	ldr	r3, [r3, #24]
 800d1fe:	43db      	mvns	r3, r3
 800d200:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d202:	e145      	b.n	800d490 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	699b      	ldr	r3, [r3, #24]
 800d208:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	f040 8101 	bne.w	800d414 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	699b      	ldr	r3, [r3, #24]
 800d216:	0a5b      	lsrs	r3, r3, #9
 800d218:	693a      	ldr	r2, [r7, #16]
 800d21a:	8952      	ldrh	r2, [r2, #10]
 800d21c:	3a01      	subs	r2, #1
 800d21e:	4013      	ands	r3, r2
 800d220:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d222:	69bb      	ldr	r3, [r7, #24]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d14d      	bne.n	800d2c4 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	699b      	ldr	r3, [r3, #24]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d10c      	bne.n	800d24a <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	689b      	ldr	r3, [r3, #8]
 800d234:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d11a      	bne.n	800d272 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	2100      	movs	r1, #0
 800d240:	4618      	mov	r0, r3
 800d242:	f7fd ff7d 	bl	800b140 <create_chain>
 800d246:	62b8      	str	r0, [r7, #40]	; 0x28
 800d248:	e013      	b.n	800d272 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d007      	beq.n	800d262 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	699b      	ldr	r3, [r3, #24]
 800d256:	4619      	mov	r1, r3
 800d258:	68f8      	ldr	r0, [r7, #12]
 800d25a:	f7fe f809 	bl	800b270 <clmt_clust>
 800d25e:	62b8      	str	r0, [r7, #40]	; 0x28
 800d260:	e007      	b.n	800d272 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d262:	68fa      	ldr	r2, [r7, #12]
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	69db      	ldr	r3, [r3, #28]
 800d268:	4619      	mov	r1, r3
 800d26a:	4610      	mov	r0, r2
 800d26c:	f7fd ff68 	bl	800b140 <create_chain>
 800d270:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d274:	2b00      	cmp	r3, #0
 800d276:	f000 8110 	beq.w	800d49a <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d27c:	2b01      	cmp	r3, #1
 800d27e:	d109      	bne.n	800d294 <f_write+0x11e>
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	2202      	movs	r2, #2
 800d284:	755a      	strb	r2, [r3, #21]
 800d286:	693b      	ldr	r3, [r7, #16]
 800d288:	2102      	movs	r1, #2
 800d28a:	4618      	mov	r0, r3
 800d28c:	f7fd fad8 	bl	800a840 <unlock_fs>
 800d290:	2302      	movs	r3, #2
 800d292:	e110      	b.n	800d4b6 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d29a:	d109      	bne.n	800d2b0 <f_write+0x13a>
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	2201      	movs	r2, #1
 800d2a0:	755a      	strb	r2, [r3, #21]
 800d2a2:	693b      	ldr	r3, [r7, #16]
 800d2a4:	2101      	movs	r1, #1
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f7fd faca 	bl	800a840 <unlock_fs>
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	e102      	b.n	800d4b6 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2b4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	689b      	ldr	r3, [r3, #8]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d102      	bne.n	800d2c4 <f_write+0x14e>
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2c2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	7d1b      	ldrb	r3, [r3, #20]
 800d2c8:	b25b      	sxtb	r3, r3
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	da1d      	bge.n	800d30a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d2ce:	693b      	ldr	r3, [r7, #16]
 800d2d0:	7858      	ldrb	r0, [r3, #1]
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	6a1a      	ldr	r2, [r3, #32]
 800d2dc:	2301      	movs	r3, #1
 800d2de:	f7fd f95b 	bl	800a598 <disk_write>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d009      	beq.n	800d2fc <f_write+0x186>
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	755a      	strb	r2, [r3, #21]
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	2101      	movs	r1, #1
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f7fd faa4 	bl	800a840 <unlock_fs>
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	e0dc      	b.n	800d4b6 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	7d1b      	ldrb	r3, [r3, #20]
 800d300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d304:	b2da      	uxtb	r2, r3
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d30a:	693a      	ldr	r2, [r7, #16]
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	69db      	ldr	r3, [r3, #28]
 800d310:	4619      	mov	r1, r3
 800d312:	4610      	mov	r0, r2
 800d314:	f7fd fcfc 	bl	800ad10 <clust2sect>
 800d318:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d31a:	697b      	ldr	r3, [r7, #20]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d109      	bne.n	800d334 <f_write+0x1be>
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	2202      	movs	r2, #2
 800d324:	755a      	strb	r2, [r3, #21]
 800d326:	693b      	ldr	r3, [r7, #16]
 800d328:	2102      	movs	r1, #2
 800d32a:	4618      	mov	r0, r3
 800d32c:	f7fd fa88 	bl	800a840 <unlock_fs>
 800d330:	2302      	movs	r3, #2
 800d332:	e0c0      	b.n	800d4b6 <f_write+0x340>
			sect += csect;
 800d334:	697a      	ldr	r2, [r7, #20]
 800d336:	69bb      	ldr	r3, [r7, #24]
 800d338:	4413      	add	r3, r2
 800d33a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	0a5b      	lsrs	r3, r3, #9
 800d340:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d342:	6a3b      	ldr	r3, [r7, #32]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d041      	beq.n	800d3cc <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d348:	69ba      	ldr	r2, [r7, #24]
 800d34a:	6a3b      	ldr	r3, [r7, #32]
 800d34c:	4413      	add	r3, r2
 800d34e:	693a      	ldr	r2, [r7, #16]
 800d350:	8952      	ldrh	r2, [r2, #10]
 800d352:	4293      	cmp	r3, r2
 800d354:	d905      	bls.n	800d362 <f_write+0x1ec>
					cc = fs->csize - csect;
 800d356:	693b      	ldr	r3, [r7, #16]
 800d358:	895b      	ldrh	r3, [r3, #10]
 800d35a:	461a      	mov	r2, r3
 800d35c:	69bb      	ldr	r3, [r7, #24]
 800d35e:	1ad3      	subs	r3, r2, r3
 800d360:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d362:	693b      	ldr	r3, [r7, #16]
 800d364:	7858      	ldrb	r0, [r3, #1]
 800d366:	6a3b      	ldr	r3, [r7, #32]
 800d368:	697a      	ldr	r2, [r7, #20]
 800d36a:	69f9      	ldr	r1, [r7, #28]
 800d36c:	f7fd f914 	bl	800a598 <disk_write>
 800d370:	4603      	mov	r3, r0
 800d372:	2b00      	cmp	r3, #0
 800d374:	d009      	beq.n	800d38a <f_write+0x214>
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	2201      	movs	r2, #1
 800d37a:	755a      	strb	r2, [r3, #21]
 800d37c:	693b      	ldr	r3, [r7, #16]
 800d37e:	2101      	movs	r1, #1
 800d380:	4618      	mov	r0, r3
 800d382:	f7fd fa5d 	bl	800a840 <unlock_fs>
 800d386:	2301      	movs	r3, #1
 800d388:	e095      	b.n	800d4b6 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	6a1a      	ldr	r2, [r3, #32]
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	1ad3      	subs	r3, r2, r3
 800d392:	6a3a      	ldr	r2, [r7, #32]
 800d394:	429a      	cmp	r2, r3
 800d396:	d915      	bls.n	800d3c4 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	6a1a      	ldr	r2, [r3, #32]
 800d3a2:	697b      	ldr	r3, [r7, #20]
 800d3a4:	1ad3      	subs	r3, r2, r3
 800d3a6:	025b      	lsls	r3, r3, #9
 800d3a8:	69fa      	ldr	r2, [r7, #28]
 800d3aa:	4413      	add	r3, r2
 800d3ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d3b0:	4619      	mov	r1, r3
 800d3b2:	f7fd f9b1 	bl	800a718 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	7d1b      	ldrb	r3, [r3, #20]
 800d3ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3be:	b2da      	uxtb	r2, r3
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d3c4:	6a3b      	ldr	r3, [r7, #32]
 800d3c6:	025b      	lsls	r3, r3, #9
 800d3c8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d3ca:	e044      	b.n	800d456 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	6a1b      	ldr	r3, [r3, #32]
 800d3d0:	697a      	ldr	r2, [r7, #20]
 800d3d2:	429a      	cmp	r2, r3
 800d3d4:	d01b      	beq.n	800d40e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	699a      	ldr	r2, [r3, #24]
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	d215      	bcs.n	800d40e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	7858      	ldrb	r0, [r3, #1]
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	697a      	ldr	r2, [r7, #20]
 800d3f0:	f7fd f8b2 	bl	800a558 <disk_read>
 800d3f4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d009      	beq.n	800d40e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	2201      	movs	r2, #1
 800d3fe:	755a      	strb	r2, [r3, #21]
 800d400:	693b      	ldr	r3, [r7, #16]
 800d402:	2101      	movs	r1, #1
 800d404:	4618      	mov	r0, r3
 800d406:	f7fd fa1b 	bl	800a840 <unlock_fs>
 800d40a:	2301      	movs	r3, #1
 800d40c:	e053      	b.n	800d4b6 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	697a      	ldr	r2, [r7, #20]
 800d412:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	699b      	ldr	r3, [r3, #24]
 800d418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d41c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d420:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	429a      	cmp	r2, r3
 800d428:	d901      	bls.n	800d42e <f_write+0x2b8>
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	699b      	ldr	r3, [r3, #24]
 800d438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d43c:	4413      	add	r3, r2
 800d43e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d440:	69f9      	ldr	r1, [r7, #28]
 800d442:	4618      	mov	r0, r3
 800d444:	f7fd f968 	bl	800a718 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	7d1b      	ldrb	r3, [r3, #20]
 800d44c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d450:	b2da      	uxtb	r2, r3
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d456:	69fa      	ldr	r2, [r7, #28]
 800d458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d45a:	4413      	add	r3, r2
 800d45c:	61fb      	str	r3, [r7, #28]
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	699a      	ldr	r2, [r3, #24]
 800d462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d464:	441a      	add	r2, r3
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	619a      	str	r2, [r3, #24]
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	68da      	ldr	r2, [r3, #12]
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	699b      	ldr	r3, [r3, #24]
 800d472:	429a      	cmp	r2, r3
 800d474:	bf38      	it	cc
 800d476:	461a      	movcc	r2, r3
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	60da      	str	r2, [r3, #12]
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	681a      	ldr	r2, [r3, #0]
 800d480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d482:	441a      	add	r2, r3
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	601a      	str	r2, [r3, #0]
 800d488:	687a      	ldr	r2, [r7, #4]
 800d48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d48c:	1ad3      	subs	r3, r2, r3
 800d48e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2b00      	cmp	r3, #0
 800d494:	f47f aeb6 	bne.w	800d204 <f_write+0x8e>
 800d498:	e000      	b.n	800d49c <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d49a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	7d1b      	ldrb	r3, [r3, #20]
 800d4a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4a4:	b2da      	uxtb	r2, r3
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d4aa:	693b      	ldr	r3, [r7, #16]
 800d4ac:	2100      	movs	r1, #0
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f7fd f9c6 	bl	800a840 <unlock_fs>
 800d4b4:	2300      	movs	r3, #0
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3730      	adds	r7, #48	; 0x30
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}

0800d4be <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d4be:	b580      	push	{r7, lr}
 800d4c0:	b086      	sub	sp, #24
 800d4c2:	af00      	add	r7, sp, #0
 800d4c4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	f107 0208 	add.w	r2, r7, #8
 800d4cc:	4611      	mov	r1, r2
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	f7ff f978 	bl	800c7c4 <validate>
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d4d8:	7dfb      	ldrb	r3, [r7, #23]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d16d      	bne.n	800d5ba <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	7d1b      	ldrb	r3, [r3, #20]
 800d4e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d067      	beq.n	800d5ba <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	7d1b      	ldrb	r3, [r3, #20]
 800d4ee:	b25b      	sxtb	r3, r3
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	da1a      	bge.n	800d52a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	7858      	ldrb	r0, [r3, #1]
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6a1a      	ldr	r2, [r3, #32]
 800d502:	2301      	movs	r3, #1
 800d504:	f7fd f848 	bl	800a598 <disk_write>
 800d508:	4603      	mov	r3, r0
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d006      	beq.n	800d51c <f_sync+0x5e>
 800d50e:	68bb      	ldr	r3, [r7, #8]
 800d510:	2101      	movs	r1, #1
 800d512:	4618      	mov	r0, r3
 800d514:	f7fd f994 	bl	800a840 <unlock_fs>
 800d518:	2301      	movs	r3, #1
 800d51a:	e055      	b.n	800d5c8 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	7d1b      	ldrb	r3, [r3, #20]
 800d520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d524:	b2da      	uxtb	r2, r3
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d52a:	f7fc f8eb 	bl	8009704 <get_fattime>
 800d52e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d530:	68ba      	ldr	r2, [r7, #8]
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d536:	4619      	mov	r1, r3
 800d538:	4610      	mov	r0, r2
 800d53a:	f7fd fb4d 	bl	800abd8 <move_window>
 800d53e:	4603      	mov	r3, r0
 800d540:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d542:	7dfb      	ldrb	r3, [r7, #23]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d138      	bne.n	800d5ba <f_sync+0xfc>
					dir = fp->dir_ptr;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d54c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	330b      	adds	r3, #11
 800d552:	781a      	ldrb	r2, [r3, #0]
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	330b      	adds	r3, #11
 800d558:	f042 0220 	orr.w	r2, r2, #32
 800d55c:	b2d2      	uxtb	r2, r2
 800d55e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	6818      	ldr	r0, [r3, #0]
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	689b      	ldr	r3, [r3, #8]
 800d568:	461a      	mov	r2, r3
 800d56a:	68f9      	ldr	r1, [r7, #12]
 800d56c:	f7fe f85a 	bl	800b624 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	f103 021c 	add.w	r2, r3, #28
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	68db      	ldr	r3, [r3, #12]
 800d57a:	4619      	mov	r1, r3
 800d57c:	4610      	mov	r0, r2
 800d57e:	f7fd f89f 	bl	800a6c0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	3316      	adds	r3, #22
 800d586:	6939      	ldr	r1, [r7, #16]
 800d588:	4618      	mov	r0, r3
 800d58a:	f7fd f899 	bl	800a6c0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	3312      	adds	r3, #18
 800d592:	2100      	movs	r1, #0
 800d594:	4618      	mov	r0, r3
 800d596:	f7fd f878 	bl	800a68a <st_word>
					fs->wflag = 1;
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	2201      	movs	r2, #1
 800d59e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f7fd fb46 	bl	800ac34 <sync_fs>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	7d1b      	ldrb	r3, [r3, #20]
 800d5b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d5b4:	b2da      	uxtb	r2, r3
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	7dfa      	ldrb	r2, [r7, #23]
 800d5be:	4611      	mov	r1, r2
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	f7fd f93d 	bl	800a840 <unlock_fs>
 800d5c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	3718      	adds	r7, #24
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}

0800d5d0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b084      	sub	sp, #16
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d5d8:	6878      	ldr	r0, [r7, #4]
 800d5da:	f7ff ff70 	bl	800d4be <f_sync>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d5e2:	7bfb      	ldrb	r3, [r7, #15]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d11d      	bne.n	800d624 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f107 0208 	add.w	r2, r7, #8
 800d5ee:	4611      	mov	r1, r2
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	f7ff f8e7 	bl	800c7c4 <validate>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d5fa:	7bfb      	ldrb	r3, [r7, #15]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d111      	bne.n	800d624 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	691b      	ldr	r3, [r3, #16]
 800d604:	4618      	mov	r0, r3
 800d606:	f7fd fa43 	bl	800aa90 <dec_lock>
 800d60a:	4603      	mov	r3, r0
 800d60c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d60e:	7bfb      	ldrb	r3, [r7, #15]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d102      	bne.n	800d61a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2200      	movs	r2, #0
 800d618:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	2100      	movs	r1, #0
 800d61e:	4618      	mov	r0, r3
 800d620:	f7fd f90e 	bl	800a840 <unlock_fs>
#endif
		}
	}
	return res;
 800d624:	7bfb      	ldrb	r3, [r7, #15]
}
 800d626:	4618      	mov	r0, r3
 800d628:	3710      	adds	r7, #16
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}
	...

0800d630 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800d630:	b590      	push	{r4, r7, lr}
 800d632:	b09d      	sub	sp, #116	; 0x74
 800d634:	af00      	add	r7, sp, #0
 800d636:	60f8      	str	r0, [r7, #12]
 800d638:	607a      	str	r2, [r7, #4]
 800d63a:	603b      	str	r3, [r7, #0]
 800d63c:	460b      	mov	r3, r1
 800d63e:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800d640:	2301      	movs	r3, #1
 800d642:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800d644:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d648:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800d64a:	f107 030c 	add.w	r3, r7, #12
 800d64e:	4618      	mov	r0, r3
 800d650:	f7fe fdc9 	bl	800c1e6 <get_ldnumber>
 800d654:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d658:	2b00      	cmp	r3, #0
 800d65a:	da02      	bge.n	800d662 <f_mkfs+0x32>
 800d65c:	230b      	movs	r3, #11
 800d65e:	f000 bc0d 	b.w	800de7c <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800d662:	4a94      	ldr	r2, [pc, #592]	; (800d8b4 <f_mkfs+0x284>)
 800d664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d005      	beq.n	800d67a <f_mkfs+0x4a>
 800d66e:	4a91      	ldr	r2, [pc, #580]	; (800d8b4 <f_mkfs+0x284>)
 800d670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d676:	2200      	movs	r2, #0
 800d678:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800d67a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d67c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800d680:	2300      	movs	r3, #0
 800d682:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800d686:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d68a:	4618      	mov	r0, r3
 800d68c:	f7fc ff3e 	bl	800a50c <disk_initialize>
 800d690:	4603      	mov	r3, r0
 800d692:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800d696:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800d69a:	f003 0301 	and.w	r3, r3, #1
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d001      	beq.n	800d6a6 <f_mkfs+0x76>
 800d6a2:	2303      	movs	r3, #3
 800d6a4:	e3ea      	b.n	800de7c <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800d6a6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800d6aa:	f003 0304 	and.w	r3, r3, #4
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d001      	beq.n	800d6b6 <f_mkfs+0x86>
 800d6b2:	230a      	movs	r3, #10
 800d6b4:	e3e2      	b.n	800de7c <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800d6b6:	f107 0214 	add.w	r2, r7, #20
 800d6ba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d6be:	2103      	movs	r1, #3
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f7fc ff89 	bl	800a5d8 <disk_ioctl>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d10c      	bne.n	800d6e6 <f_mkfs+0xb6>
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d009      	beq.n	800d6e6 <f_mkfs+0xb6>
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d6d8:	d805      	bhi.n	800d6e6 <f_mkfs+0xb6>
 800d6da:	697b      	ldr	r3, [r7, #20]
 800d6dc:	1e5a      	subs	r2, r3, #1
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	4013      	ands	r3, r2
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d001      	beq.n	800d6ea <f_mkfs+0xba>
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800d6ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d6ee:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d003      	beq.n	800d6fe <f_mkfs+0xce>
 800d6f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d6f8:	687a      	ldr	r2, [r7, #4]
 800d6fa:	429a      	cmp	r2, r3
 800d6fc:	d309      	bcc.n	800d712 <f_mkfs+0xe2>
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d704:	d805      	bhi.n	800d712 <f_mkfs+0xe2>
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	1e5a      	subs	r2, r3, #1
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	4013      	ands	r3, r2
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d001      	beq.n	800d716 <f_mkfs+0xe6>
 800d712:	2313      	movs	r3, #19
 800d714:	e3b2      	b.n	800de7c <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800d716:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d718:	687a      	ldr	r2, [r7, #4]
 800d71a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d71e:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800d724:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d726:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d72a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d72e:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800d730:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d734:	fb02 f303 	mul.w	r3, r2, r3
 800d738:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800d73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d101      	bne.n	800d744 <f_mkfs+0x114>
 800d740:	230e      	movs	r3, #14
 800d742:	e39b      	b.n	800de7c <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800d744:	f107 0210 	add.w	r2, r7, #16
 800d748:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d74c:	2101      	movs	r1, #1
 800d74e:	4618      	mov	r0, r3
 800d750:	f7fc ff42 	bl	800a5d8 <disk_ioctl>
 800d754:	4603      	mov	r3, r0
 800d756:	2b00      	cmp	r3, #0
 800d758:	d001      	beq.n	800d75e <f_mkfs+0x12e>
 800d75a:	2301      	movs	r3, #1
 800d75c:	e38e      	b.n	800de7c <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800d75e:	7afb      	ldrb	r3, [r7, #11]
 800d760:	f003 0308 	and.w	r3, r3, #8
 800d764:	2b00      	cmp	r3, #0
 800d766:	d001      	beq.n	800d76c <f_mkfs+0x13c>
 800d768:	2300      	movs	r3, #0
 800d76a:	e000      	b.n	800d76e <f_mkfs+0x13e>
 800d76c:	233f      	movs	r3, #63	; 0x3f
 800d76e:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d774:	429a      	cmp	r2, r3
 800d776:	d901      	bls.n	800d77c <f_mkfs+0x14c>
 800d778:	230e      	movs	r3, #14
 800d77a:	e37f      	b.n	800de7c <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800d77c:	693a      	ldr	r2, [r7, #16]
 800d77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d780:	1ad3      	subs	r3, r2, r3
 800d782:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800d784:	693b      	ldr	r3, [r7, #16]
 800d786:	2b7f      	cmp	r3, #127	; 0x7f
 800d788:	d801      	bhi.n	800d78e <f_mkfs+0x15e>
 800d78a:	230e      	movs	r3, #14
 800d78c:	e376      	b.n	800de7c <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2b80      	cmp	r3, #128	; 0x80
 800d792:	d901      	bls.n	800d798 <f_mkfs+0x168>
 800d794:	2313      	movs	r3, #19
 800d796:	e371      	b.n	800de7c <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800d798:	7afb      	ldrb	r3, [r7, #11]
 800d79a:	f003 0302 	and.w	r3, r3, #2
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d00d      	beq.n	800d7be <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800d7a2:	7afb      	ldrb	r3, [r7, #11]
 800d7a4:	f003 0307 	and.w	r3, r3, #7
 800d7a8:	2b02      	cmp	r3, #2
 800d7aa:	d004      	beq.n	800d7b6 <f_mkfs+0x186>
 800d7ac:	7afb      	ldrb	r3, [r7, #11]
 800d7ae:	f003 0301 	and.w	r3, r3, #1
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d103      	bne.n	800d7be <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800d7b6:	2303      	movs	r3, #3
 800d7b8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800d7bc:	e009      	b.n	800d7d2 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800d7be:	7afb      	ldrb	r3, [r7, #11]
 800d7c0:	f003 0301 	and.w	r3, r3, #1
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d101      	bne.n	800d7cc <f_mkfs+0x19c>
 800d7c8:	2313      	movs	r3, #19
 800d7ca:	e357      	b.n	800de7c <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800d7cc:	2302      	movs	r3, #2
 800d7ce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800d7d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d7da:	2b03      	cmp	r3, #3
 800d7dc:	d13c      	bne.n	800d858 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800d7de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d11b      	bne.n	800d81c <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800d7e4:	693b      	ldr	r3, [r7, #16]
 800d7e6:	0c5b      	lsrs	r3, r3, #17
 800d7e8:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	64bb      	str	r3, [r7, #72]	; 0x48
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	653b      	str	r3, [r7, #80]	; 0x50
 800d7f2:	e005      	b.n	800d800 <f_mkfs+0x1d0>
 800d7f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7f6:	3301      	adds	r3, #1
 800d7f8:	64bb      	str	r3, [r7, #72]	; 0x48
 800d7fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7fc:	005b      	lsls	r3, r3, #1
 800d7fe:	653b      	str	r3, [r7, #80]	; 0x50
 800d800:	4a2d      	ldr	r2, [pc, #180]	; (800d8b8 <f_mkfs+0x288>)
 800d802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d804:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d007      	beq.n	800d81c <f_mkfs+0x1ec>
 800d80c:	4a2a      	ldr	r2, [pc, #168]	; (800d8b8 <f_mkfs+0x288>)
 800d80e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d810:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d814:	461a      	mov	r2, r3
 800d816:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d818:	4293      	cmp	r3, r2
 800d81a:	d2eb      	bcs.n	800d7f4 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800d81c:	693a      	ldr	r2, [r7, #16]
 800d81e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d820:	fbb2 f3f3 	udiv	r3, r2, r3
 800d824:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800d826:	6a3b      	ldr	r3, [r7, #32]
 800d828:	3302      	adds	r3, #2
 800d82a:	009a      	lsls	r2, r3, #2
 800d82c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d82e:	4413      	add	r3, r2
 800d830:	1e5a      	subs	r2, r3, #1
 800d832:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d834:	fbb2 f3f3 	udiv	r3, r2, r3
 800d838:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800d83a:	2320      	movs	r3, #32
 800d83c:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800d83e:	2300      	movs	r3, #0
 800d840:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800d842:	6a3b      	ldr	r3, [r7, #32]
 800d844:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d848:	4293      	cmp	r3, r2
 800d84a:	d903      	bls.n	800d854 <f_mkfs+0x224>
 800d84c:	6a3b      	ldr	r3, [r7, #32]
 800d84e:	4a1b      	ldr	r2, [pc, #108]	; (800d8bc <f_mkfs+0x28c>)
 800d850:	4293      	cmp	r3, r2
 800d852:	d952      	bls.n	800d8fa <f_mkfs+0x2ca>
 800d854:	230e      	movs	r3, #14
 800d856:	e311      	b.n	800de7c <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800d858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d11b      	bne.n	800d896 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800d85e:	693b      	ldr	r3, [r7, #16]
 800d860:	0b1b      	lsrs	r3, r3, #12
 800d862:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800d864:	2300      	movs	r3, #0
 800d866:	64bb      	str	r3, [r7, #72]	; 0x48
 800d868:	2301      	movs	r3, #1
 800d86a:	653b      	str	r3, [r7, #80]	; 0x50
 800d86c:	e005      	b.n	800d87a <f_mkfs+0x24a>
 800d86e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d870:	3301      	adds	r3, #1
 800d872:	64bb      	str	r3, [r7, #72]	; 0x48
 800d874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d876:	005b      	lsls	r3, r3, #1
 800d878:	653b      	str	r3, [r7, #80]	; 0x50
 800d87a:	4a11      	ldr	r2, [pc, #68]	; (800d8c0 <f_mkfs+0x290>)
 800d87c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d87e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d007      	beq.n	800d896 <f_mkfs+0x266>
 800d886:	4a0e      	ldr	r2, [pc, #56]	; (800d8c0 <f_mkfs+0x290>)
 800d888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d88a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d88e:	461a      	mov	r2, r3
 800d890:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d892:	4293      	cmp	r3, r2
 800d894:	d2eb      	bcs.n	800d86e <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800d896:	693a      	ldr	r2, [r7, #16]
 800d898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d89a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d89e:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800d8a0:	6a3b      	ldr	r3, [r7, #32]
 800d8a2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d8a6:	4293      	cmp	r3, r2
 800d8a8:	d90c      	bls.n	800d8c4 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800d8aa:	6a3b      	ldr	r3, [r7, #32]
 800d8ac:	3302      	adds	r3, #2
 800d8ae:	005b      	lsls	r3, r3, #1
 800d8b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d8b2:	e012      	b.n	800d8da <f_mkfs+0x2aa>
 800d8b4:	200040ac 	.word	0x200040ac
 800d8b8:	08044954 	.word	0x08044954
 800d8bc:	0ffffff5 	.word	0x0ffffff5
 800d8c0:	08044964 	.word	0x08044964
				} else {
					fmt = FS_FAT12;
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800d8ca:	6a3a      	ldr	r2, [r7, #32]
 800d8cc:	4613      	mov	r3, r2
 800d8ce:	005b      	lsls	r3, r3, #1
 800d8d0:	4413      	add	r3, r2
 800d8d2:	3301      	adds	r3, #1
 800d8d4:	085b      	lsrs	r3, r3, #1
 800d8d6:	3303      	adds	r3, #3
 800d8d8:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800d8da:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d8dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d8de:	4413      	add	r3, r2
 800d8e0:	1e5a      	subs	r2, r3, #1
 800d8e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d8e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8e8:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800d8ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8f0:	015a      	lsls	r2, r3, #5
 800d8f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d8f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8f8:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800d8fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d8fe:	4413      	add	r3, r2
 800d900:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800d902:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d904:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d906:	fb03 f202 	mul.w	r2, r3, r2
 800d90a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d90c:	4413      	add	r3, r2
 800d90e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d910:	4413      	add	r3, r2
 800d912:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800d914:	697a      	ldr	r2, [r7, #20]
 800d916:	69fb      	ldr	r3, [r7, #28]
 800d918:	4413      	add	r3, r2
 800d91a:	1e5a      	subs	r2, r3, #1
 800d91c:	697b      	ldr	r3, [r7, #20]
 800d91e:	425b      	negs	r3, r3
 800d920:	401a      	ands	r2, r3
 800d922:	69fb      	ldr	r3, [r7, #28]
 800d924:	1ad3      	subs	r3, r2, r3
 800d926:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800d928:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d92c:	2b03      	cmp	r3, #3
 800d92e:	d108      	bne.n	800d942 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800d930:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d934:	4413      	add	r3, r2
 800d936:	657b      	str	r3, [r7, #84]	; 0x54
 800d938:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d93a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d93c:	4413      	add	r3, r2
 800d93e:	65bb      	str	r3, [r7, #88]	; 0x58
 800d940:	e006      	b.n	800d950 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800d942:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d946:	fbb2 f3f3 	udiv	r3, r2, r3
 800d94a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d94c:	4413      	add	r3, r2
 800d94e:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800d950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d952:	011a      	lsls	r2, r3, #4
 800d954:	69fb      	ldr	r3, [r7, #28]
 800d956:	441a      	add	r2, r3
 800d958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d95a:	1ad2      	subs	r2, r2, r3
 800d95c:	693b      	ldr	r3, [r7, #16]
 800d95e:	429a      	cmp	r2, r3
 800d960:	d901      	bls.n	800d966 <f_mkfs+0x336>
 800d962:	230e      	movs	r3, #14
 800d964:	e28a      	b.n	800de7c <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800d966:	693a      	ldr	r2, [r7, #16]
 800d968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d96a:	1ad2      	subs	r2, r2, r3
 800d96c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d96e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d970:	fb01 f303 	mul.w	r3, r1, r3
 800d974:	1ad2      	subs	r2, r2, r3
 800d976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d978:	1ad2      	subs	r2, r2, r3
 800d97a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d97c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d980:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800d982:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d986:	2b03      	cmp	r3, #3
 800d988:	d10f      	bne.n	800d9aa <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800d98a:	6a3b      	ldr	r3, [r7, #32]
 800d98c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d990:	4293      	cmp	r3, r2
 800d992:	d80a      	bhi.n	800d9aa <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d105      	bne.n	800d9a6 <f_mkfs+0x376>
 800d99a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d99c:	085b      	lsrs	r3, r3, #1
 800d99e:	607b      	str	r3, [r7, #4]
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d144      	bne.n	800da30 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800d9a6:	230e      	movs	r3, #14
 800d9a8:	e268      	b.n	800de7c <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800d9aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d9ae:	2b02      	cmp	r3, #2
 800d9b0:	d133      	bne.n	800da1a <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800d9b2:	6a3b      	ldr	r3, [r7, #32]
 800d9b4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d9b8:	4293      	cmp	r3, r2
 800d9ba:	d91e      	bls.n	800d9fa <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d107      	bne.n	800d9d2 <f_mkfs+0x3a2>
 800d9c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9c4:	005b      	lsls	r3, r3, #1
 800d9c6:	2b40      	cmp	r3, #64	; 0x40
 800d9c8:	d803      	bhi.n	800d9d2 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800d9ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9cc:	005b      	lsls	r3, r3, #1
 800d9ce:	607b      	str	r3, [r7, #4]
 800d9d0:	e033      	b.n	800da3a <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800d9d2:	7afb      	ldrb	r3, [r7, #11]
 800d9d4:	f003 0302 	and.w	r3, r3, #2
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d003      	beq.n	800d9e4 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800d9dc:	2303      	movs	r3, #3
 800d9de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800d9e2:	e02a      	b.n	800da3a <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d105      	bne.n	800d9f6 <f_mkfs+0x3c6>
 800d9ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9ec:	005b      	lsls	r3, r3, #1
 800d9ee:	607b      	str	r3, [r7, #4]
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2b80      	cmp	r3, #128	; 0x80
 800d9f4:	d91e      	bls.n	800da34 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800d9f6:	230e      	movs	r3, #14
 800d9f8:	e240      	b.n	800de7c <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800d9fa:	6a3b      	ldr	r3, [r7, #32]
 800d9fc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800da00:	4293      	cmp	r3, r2
 800da02:	d80a      	bhi.n	800da1a <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d105      	bne.n	800da16 <f_mkfs+0x3e6>
 800da0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da0c:	005b      	lsls	r3, r3, #1
 800da0e:	607b      	str	r3, [r7, #4]
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2b80      	cmp	r3, #128	; 0x80
 800da14:	d910      	bls.n	800da38 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800da16:	230e      	movs	r3, #14
 800da18:	e230      	b.n	800de7c <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800da1a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800da1e:	2b01      	cmp	r3, #1
 800da20:	d10c      	bne.n	800da3c <f_mkfs+0x40c>
 800da22:	6a3b      	ldr	r3, [r7, #32]
 800da24:	f640 72f5 	movw	r2, #4085	; 0xff5
 800da28:	4293      	cmp	r3, r2
 800da2a:	d907      	bls.n	800da3c <f_mkfs+0x40c>
 800da2c:	230e      	movs	r3, #14
 800da2e:	e225      	b.n	800de7c <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800da30:	bf00      	nop
 800da32:	e6ce      	b.n	800d7d2 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800da34:	bf00      	nop
 800da36:	e6cc      	b.n	800d7d2 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800da38:	bf00      	nop
			pau = au;
 800da3a:	e6ca      	b.n	800d7d2 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800da3c:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800da3e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800da40:	461a      	mov	r2, r3
 800da42:	2100      	movs	r1, #0
 800da44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da46:	f7fc fe88 	bl	800a75a <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800da4a:	220b      	movs	r2, #11
 800da4c:	49b2      	ldr	r1, [pc, #712]	; (800dd18 <f_mkfs+0x6e8>)
 800da4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da50:	f7fc fe62 	bl	800a718 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800da54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da56:	330b      	adds	r3, #11
 800da58:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800da5a:	4611      	mov	r1, r2
 800da5c:	4618      	mov	r0, r3
 800da5e:	f7fc fe14 	bl	800a68a <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800da62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da64:	330d      	adds	r3, #13
 800da66:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800da68:	b2d2      	uxtb	r2, r2
 800da6a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800da6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da6e:	330e      	adds	r3, #14
 800da70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800da72:	b292      	uxth	r2, r2
 800da74:	4611      	mov	r1, r2
 800da76:	4618      	mov	r0, r3
 800da78:	f7fc fe07 	bl	800a68a <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800da7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da7e:	3310      	adds	r3, #16
 800da80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da82:	b2d2      	uxtb	r2, r2
 800da84:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800da86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da88:	f103 0211 	add.w	r2, r3, #17
 800da8c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800da90:	2b03      	cmp	r3, #3
 800da92:	d002      	beq.n	800da9a <f_mkfs+0x46a>
 800da94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da96:	b29b      	uxth	r3, r3
 800da98:	e000      	b.n	800da9c <f_mkfs+0x46c>
 800da9a:	2300      	movs	r3, #0
 800da9c:	4619      	mov	r1, r3
 800da9e:	4610      	mov	r0, r2
 800daa0:	f7fc fdf3 	bl	800a68a <st_word>
		if (sz_vol < 0x10000) {
 800daa4:	693b      	ldr	r3, [r7, #16]
 800daa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800daaa:	d208      	bcs.n	800dabe <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800daac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daae:	3313      	adds	r3, #19
 800dab0:	693a      	ldr	r2, [r7, #16]
 800dab2:	b292      	uxth	r2, r2
 800dab4:	4611      	mov	r1, r2
 800dab6:	4618      	mov	r0, r3
 800dab8:	f7fc fde7 	bl	800a68a <st_word>
 800dabc:	e006      	b.n	800dacc <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800dabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac0:	3320      	adds	r3, #32
 800dac2:	693a      	ldr	r2, [r7, #16]
 800dac4:	4611      	mov	r1, r2
 800dac6:	4618      	mov	r0, r3
 800dac8:	f7fc fdfa 	bl	800a6c0 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800dacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dace:	3315      	adds	r3, #21
 800dad0:	22f8      	movs	r2, #248	; 0xf8
 800dad2:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800dad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad6:	3318      	adds	r3, #24
 800dad8:	213f      	movs	r1, #63	; 0x3f
 800dada:	4618      	mov	r0, r3
 800dadc:	f7fc fdd5 	bl	800a68a <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800dae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dae2:	331a      	adds	r3, #26
 800dae4:	21ff      	movs	r1, #255	; 0xff
 800dae6:	4618      	mov	r0, r3
 800dae8:	f7fc fdcf 	bl	800a68a <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800daec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daee:	331c      	adds	r3, #28
 800daf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800daf2:	4618      	mov	r0, r3
 800daf4:	f7fc fde4 	bl	800a6c0 <st_dword>
		if (fmt == FS_FAT32) {
 800daf8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dafc:	2b03      	cmp	r3, #3
 800dafe:	d131      	bne.n	800db64 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800db00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db02:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800db06:	f7fb fdfd 	bl	8009704 <get_fattime>
 800db0a:	4603      	mov	r3, r0
 800db0c:	4619      	mov	r1, r3
 800db0e:	4620      	mov	r0, r4
 800db10:	f7fc fdd6 	bl	800a6c0 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800db14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db16:	3324      	adds	r3, #36	; 0x24
 800db18:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800db1a:	4618      	mov	r0, r3
 800db1c:	f7fc fdd0 	bl	800a6c0 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800db20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db22:	332c      	adds	r3, #44	; 0x2c
 800db24:	2102      	movs	r1, #2
 800db26:	4618      	mov	r0, r3
 800db28:	f7fc fdca 	bl	800a6c0 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800db2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db2e:	3330      	adds	r3, #48	; 0x30
 800db30:	2101      	movs	r1, #1
 800db32:	4618      	mov	r0, r3
 800db34:	f7fc fda9 	bl	800a68a <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800db38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db3a:	3332      	adds	r3, #50	; 0x32
 800db3c:	2106      	movs	r1, #6
 800db3e:	4618      	mov	r0, r3
 800db40:	f7fc fda3 	bl	800a68a <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800db44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db46:	3340      	adds	r3, #64	; 0x40
 800db48:	2280      	movs	r2, #128	; 0x80
 800db4a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800db4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db4e:	3342      	adds	r3, #66	; 0x42
 800db50:	2229      	movs	r2, #41	; 0x29
 800db52:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800db54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db56:	3347      	adds	r3, #71	; 0x47
 800db58:	2213      	movs	r2, #19
 800db5a:	4970      	ldr	r1, [pc, #448]	; (800dd1c <f_mkfs+0x6ec>)
 800db5c:	4618      	mov	r0, r3
 800db5e:	f7fc fddb 	bl	800a718 <mem_cpy>
 800db62:	e020      	b.n	800dba6 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800db64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db66:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800db6a:	f7fb fdcb 	bl	8009704 <get_fattime>
 800db6e:	4603      	mov	r3, r0
 800db70:	4619      	mov	r1, r3
 800db72:	4620      	mov	r0, r4
 800db74:	f7fc fda4 	bl	800a6c0 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800db78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db7a:	3316      	adds	r3, #22
 800db7c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800db7e:	b292      	uxth	r2, r2
 800db80:	4611      	mov	r1, r2
 800db82:	4618      	mov	r0, r3
 800db84:	f7fc fd81 	bl	800a68a <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800db88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db8a:	3324      	adds	r3, #36	; 0x24
 800db8c:	2280      	movs	r2, #128	; 0x80
 800db8e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800db90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db92:	3326      	adds	r3, #38	; 0x26
 800db94:	2229      	movs	r2, #41	; 0x29
 800db96:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800db98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db9a:	332b      	adds	r3, #43	; 0x2b
 800db9c:	2213      	movs	r2, #19
 800db9e:	4960      	ldr	r1, [pc, #384]	; (800dd20 <f_mkfs+0x6f0>)
 800dba0:	4618      	mov	r0, r3
 800dba2:	f7fc fdb9 	bl	800a718 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800dba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dba8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dbac:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f7fc fd6a 	bl	800a68a <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800dbb6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800dbba:	2301      	movs	r3, #1
 800dbbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dbc0:	f7fc fcea 	bl	800a598 <disk_write>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d001      	beq.n	800dbce <f_mkfs+0x59e>
 800dbca:	2301      	movs	r3, #1
 800dbcc:	e156      	b.n	800de7c <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800dbce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dbd2:	2b03      	cmp	r3, #3
 800dbd4:	d140      	bne.n	800dc58 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800dbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd8:	1d9a      	adds	r2, r3, #6
 800dbda:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800dbde:	2301      	movs	r3, #1
 800dbe0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dbe2:	f7fc fcd9 	bl	800a598 <disk_write>
			mem_set(buf, 0, ss);
 800dbe6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800dbe8:	461a      	mov	r2, r3
 800dbea:	2100      	movs	r1, #0
 800dbec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dbee:	f7fc fdb4 	bl	800a75a <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800dbf2:	494c      	ldr	r1, [pc, #304]	; (800dd24 <f_mkfs+0x6f4>)
 800dbf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dbf6:	f7fc fd63 	bl	800a6c0 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800dbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbfc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800dc00:	4949      	ldr	r1, [pc, #292]	; (800dd28 <f_mkfs+0x6f8>)
 800dc02:	4618      	mov	r0, r3
 800dc04:	f7fc fd5c 	bl	800a6c0 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800dc08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc0a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800dc0e:	6a3b      	ldr	r3, [r7, #32]
 800dc10:	3b01      	subs	r3, #1
 800dc12:	4619      	mov	r1, r3
 800dc14:	4610      	mov	r0, r2
 800dc16:	f7fc fd53 	bl	800a6c0 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800dc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc1c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800dc20:	2102      	movs	r1, #2
 800dc22:	4618      	mov	r0, r3
 800dc24:	f7fc fd4c 	bl	800a6c0 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800dc28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc2a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dc2e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800dc32:	4618      	mov	r0, r3
 800dc34:	f7fc fd29 	bl	800a68a <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800dc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc3a:	1dda      	adds	r2, r3, #7
 800dc3c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800dc40:	2301      	movs	r3, #1
 800dc42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dc44:	f7fc fca8 	bl	800a598 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800dc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc4a:	1c5a      	adds	r2, r3, #1
 800dc4c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800dc50:	2301      	movs	r3, #1
 800dc52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dc54:	f7fc fca0 	bl	800a598 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800dc58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc5a:	2100      	movs	r1, #0
 800dc5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc5e:	f7fc fd7c 	bl	800a75a <mem_set>
		sect = b_fat;		/* FAT start sector */
 800dc62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dc64:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800dc66:	2300      	movs	r3, #0
 800dc68:	64bb      	str	r3, [r7, #72]	; 0x48
 800dc6a:	e04b      	b.n	800dd04 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800dc6c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dc70:	2b03      	cmp	r3, #3
 800dc72:	d113      	bne.n	800dc9c <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800dc74:	f06f 0107 	mvn.w	r1, #7
 800dc78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc7a:	f7fc fd21 	bl	800a6c0 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800dc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc80:	3304      	adds	r3, #4
 800dc82:	f04f 31ff 	mov.w	r1, #4294967295
 800dc86:	4618      	mov	r0, r3
 800dc88:	f7fc fd1a 	bl	800a6c0 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800dc8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc8e:	3308      	adds	r3, #8
 800dc90:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800dc94:	4618      	mov	r0, r3
 800dc96:	f7fc fd13 	bl	800a6c0 <st_dword>
 800dc9a:	e00b      	b.n	800dcb4 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800dc9c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dca0:	2b01      	cmp	r3, #1
 800dca2:	d101      	bne.n	800dca8 <f_mkfs+0x678>
 800dca4:	4b21      	ldr	r3, [pc, #132]	; (800dd2c <f_mkfs+0x6fc>)
 800dca6:	e001      	b.n	800dcac <f_mkfs+0x67c>
 800dca8:	f06f 0307 	mvn.w	r3, #7
 800dcac:	4619      	mov	r1, r3
 800dcae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dcb0:	f7fc fd06 	bl	800a6c0 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800dcb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dcb6:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800dcb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dcba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcbc:	4293      	cmp	r3, r2
 800dcbe:	bf28      	it	cs
 800dcc0:	4613      	movcs	r3, r2
 800dcc2:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800dcc4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800dcc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dcca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800dccc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dcce:	f7fc fc63 	bl	800a598 <disk_write>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d001      	beq.n	800dcdc <f_mkfs+0x6ac>
 800dcd8:	2301      	movs	r3, #1
 800dcda:	e0cf      	b.n	800de7c <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800dcdc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800dcde:	461a      	mov	r2, r3
 800dce0:	2100      	movs	r1, #0
 800dce2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dce4:	f7fc fd39 	bl	800a75a <mem_set>
				sect += n; nsect -= n;
 800dce8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800dcea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dcec:	4413      	add	r3, r2
 800dcee:	667b      	str	r3, [r7, #100]	; 0x64
 800dcf0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dcf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dcf4:	1ad3      	subs	r3, r2, r3
 800dcf6:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800dcf8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d1dc      	bne.n	800dcb8 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800dcfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd00:	3301      	adds	r3, #1
 800dd02:	64bb      	str	r3, [r7, #72]	; 0x48
 800dd04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd08:	429a      	cmp	r2, r3
 800dd0a:	d3af      	bcc.n	800dc6c <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800dd0c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dd10:	2b03      	cmp	r3, #3
 800dd12:	d10d      	bne.n	800dd30 <f_mkfs+0x700>
 800dd14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd16:	e00c      	b.n	800dd32 <f_mkfs+0x702>
 800dd18:	08024570 	.word	0x08024570
 800dd1c:	0802457c 	.word	0x0802457c
 800dd20:	08024590 	.word	0x08024590
 800dd24:	41615252 	.word	0x41615252
 800dd28:	61417272 	.word	0x61417272
 800dd2c:	00fffff8 	.word	0x00fffff8
 800dd30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd32:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800dd34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dd36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd38:	4293      	cmp	r3, r2
 800dd3a:	bf28      	it	cs
 800dd3c:	4613      	movcs	r3, r2
 800dd3e:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800dd40:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800dd44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd46:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800dd48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dd4a:	f7fc fc25 	bl	800a598 <disk_write>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d001      	beq.n	800dd58 <f_mkfs+0x728>
 800dd54:	2301      	movs	r3, #1
 800dd56:	e091      	b.n	800de7c <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800dd58:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800dd5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd5c:	4413      	add	r3, r2
 800dd5e:	667b      	str	r3, [r7, #100]	; 0x64
 800dd60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dd62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd64:	1ad3      	subs	r3, r2, r3
 800dd66:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800dd68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d1e2      	bne.n	800dd34 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800dd6e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dd72:	2b03      	cmp	r3, #3
 800dd74:	d103      	bne.n	800dd7e <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800dd76:	230c      	movs	r3, #12
 800dd78:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800dd7c:	e010      	b.n	800dda0 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800dd7e:	693b      	ldr	r3, [r7, #16]
 800dd80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd84:	d303      	bcc.n	800dd8e <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800dd86:	2306      	movs	r3, #6
 800dd88:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800dd8c:	e008      	b.n	800dda0 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800dd8e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dd92:	2b02      	cmp	r3, #2
 800dd94:	d101      	bne.n	800dd9a <f_mkfs+0x76a>
 800dd96:	2304      	movs	r3, #4
 800dd98:	e000      	b.n	800dd9c <f_mkfs+0x76c>
 800dd9a:	2301      	movs	r3, #1
 800dd9c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800dda0:	7afb      	ldrb	r3, [r7, #11]
 800dda2:	f003 0308 	and.w	r3, r3, #8
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d15b      	bne.n	800de62 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800ddaa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ddac:	461a      	mov	r2, r3
 800ddae:	2100      	movs	r1, #0
 800ddb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ddb2:	f7fc fcd2 	bl	800a75a <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800ddb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ddbc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f7fc fc62 	bl	800a68a <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800ddc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddc8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ddcc:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800ddce:	69bb      	ldr	r3, [r7, #24]
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800ddd4:	69bb      	ldr	r3, [r7, #24]
 800ddd6:	3301      	adds	r3, #1
 800ddd8:	2201      	movs	r2, #1
 800ddda:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800dddc:	69bb      	ldr	r3, [r7, #24]
 800ddde:	3302      	adds	r3, #2
 800dde0:	2201      	movs	r2, #1
 800dde2:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800dde4:	69bb      	ldr	r3, [r7, #24]
 800dde6:	3303      	adds	r3, #3
 800dde8:	2200      	movs	r2, #0
 800ddea:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800ddec:	69bb      	ldr	r3, [r7, #24]
 800ddee:	3304      	adds	r3, #4
 800ddf0:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800ddf4:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800ddf6:	693a      	ldr	r2, [r7, #16]
 800ddf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddfa:	441a      	add	r2, r3
 800ddfc:	4b21      	ldr	r3, [pc, #132]	; (800de84 <f_mkfs+0x854>)
 800ddfe:	fba3 1302 	umull	r1, r3, r3, r2
 800de02:	1ad2      	subs	r2, r2, r3
 800de04:	0852      	lsrs	r2, r2, #1
 800de06:	4413      	add	r3, r2
 800de08:	0b5b      	lsrs	r3, r3, #13
 800de0a:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800de0c:	69bb      	ldr	r3, [r7, #24]
 800de0e:	3305      	adds	r3, #5
 800de10:	22fe      	movs	r2, #254	; 0xfe
 800de12:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800de14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de16:	089b      	lsrs	r3, r3, #2
 800de18:	b2da      	uxtb	r2, r3
 800de1a:	69bb      	ldr	r3, [r7, #24]
 800de1c:	3306      	adds	r3, #6
 800de1e:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800de22:	b2d2      	uxtb	r2, r2
 800de24:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800de26:	69bb      	ldr	r3, [r7, #24]
 800de28:	3307      	adds	r3, #7
 800de2a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800de2c:	b2d2      	uxtb	r2, r2
 800de2e:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800de30:	69bb      	ldr	r3, [r7, #24]
 800de32:	3308      	adds	r3, #8
 800de34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800de36:	4618      	mov	r0, r3
 800de38:	f7fc fc42 	bl	800a6c0 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800de3c:	69bb      	ldr	r3, [r7, #24]
 800de3e:	330c      	adds	r3, #12
 800de40:	693a      	ldr	r2, [r7, #16]
 800de42:	4611      	mov	r1, r2
 800de44:	4618      	mov	r0, r3
 800de46:	f7fc fc3b 	bl	800a6c0 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800de4a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800de4e:	2301      	movs	r3, #1
 800de50:	2200      	movs	r2, #0
 800de52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800de54:	f7fc fba0 	bl	800a598 <disk_write>
 800de58:	4603      	mov	r3, r0
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d001      	beq.n	800de62 <f_mkfs+0x832>
 800de5e:	2301      	movs	r3, #1
 800de60:	e00c      	b.n	800de7c <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800de62:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800de66:	2200      	movs	r2, #0
 800de68:	2100      	movs	r1, #0
 800de6a:	4618      	mov	r0, r3
 800de6c:	f7fc fbb4 	bl	800a5d8 <disk_ioctl>
 800de70:	4603      	mov	r3, r0
 800de72:	2b00      	cmp	r3, #0
 800de74:	d001      	beq.n	800de7a <f_mkfs+0x84a>
 800de76:	2301      	movs	r3, #1
 800de78:	e000      	b.n	800de7c <f_mkfs+0x84c>

	return FR_OK;
 800de7a:	2300      	movs	r3, #0
}
 800de7c:	4618      	mov	r0, r3
 800de7e:	3774      	adds	r7, #116	; 0x74
 800de80:	46bd      	mov	sp, r7
 800de82:	bd90      	pop	{r4, r7, pc}
 800de84:	0515565b 	.word	0x0515565b

0800de88 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800de88:	b480      	push	{r7}
 800de8a:	b087      	sub	sp, #28
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	60f8      	str	r0, [r7, #12]
 800de90:	60b9      	str	r1, [r7, #8]
 800de92:	4613      	mov	r3, r2
 800de94:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800de96:	2301      	movs	r3, #1
 800de98:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800de9a:	2300      	movs	r3, #0
 800de9c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800de9e:	4b1f      	ldr	r3, [pc, #124]	; (800df1c <FATFS_LinkDriverEx+0x94>)
 800dea0:	7a5b      	ldrb	r3, [r3, #9]
 800dea2:	b2db      	uxtb	r3, r3
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d131      	bne.n	800df0c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800dea8:	4b1c      	ldr	r3, [pc, #112]	; (800df1c <FATFS_LinkDriverEx+0x94>)
 800deaa:	7a5b      	ldrb	r3, [r3, #9]
 800deac:	b2db      	uxtb	r3, r3
 800deae:	461a      	mov	r2, r3
 800deb0:	4b1a      	ldr	r3, [pc, #104]	; (800df1c <FATFS_LinkDriverEx+0x94>)
 800deb2:	2100      	movs	r1, #0
 800deb4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800deb6:	4b19      	ldr	r3, [pc, #100]	; (800df1c <FATFS_LinkDriverEx+0x94>)
 800deb8:	7a5b      	ldrb	r3, [r3, #9]
 800deba:	b2db      	uxtb	r3, r3
 800debc:	4a17      	ldr	r2, [pc, #92]	; (800df1c <FATFS_LinkDriverEx+0x94>)
 800debe:	009b      	lsls	r3, r3, #2
 800dec0:	4413      	add	r3, r2
 800dec2:	68fa      	ldr	r2, [r7, #12]
 800dec4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800dec6:	4b15      	ldr	r3, [pc, #84]	; (800df1c <FATFS_LinkDriverEx+0x94>)
 800dec8:	7a5b      	ldrb	r3, [r3, #9]
 800deca:	b2db      	uxtb	r3, r3
 800decc:	461a      	mov	r2, r3
 800dece:	4b13      	ldr	r3, [pc, #76]	; (800df1c <FATFS_LinkDriverEx+0x94>)
 800ded0:	4413      	add	r3, r2
 800ded2:	79fa      	ldrb	r2, [r7, #7]
 800ded4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ded6:	4b11      	ldr	r3, [pc, #68]	; (800df1c <FATFS_LinkDriverEx+0x94>)
 800ded8:	7a5b      	ldrb	r3, [r3, #9]
 800deda:	b2db      	uxtb	r3, r3
 800dedc:	1c5a      	adds	r2, r3, #1
 800dede:	b2d1      	uxtb	r1, r2
 800dee0:	4a0e      	ldr	r2, [pc, #56]	; (800df1c <FATFS_LinkDriverEx+0x94>)
 800dee2:	7251      	strb	r1, [r2, #9]
 800dee4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800dee6:	7dbb      	ldrb	r3, [r7, #22]
 800dee8:	3330      	adds	r3, #48	; 0x30
 800deea:	b2da      	uxtb	r2, r3
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	3301      	adds	r3, #1
 800def4:	223a      	movs	r2, #58	; 0x3a
 800def6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800def8:	68bb      	ldr	r3, [r7, #8]
 800defa:	3302      	adds	r3, #2
 800defc:	222f      	movs	r2, #47	; 0x2f
 800defe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	3303      	adds	r3, #3
 800df04:	2200      	movs	r2, #0
 800df06:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800df08:	2300      	movs	r3, #0
 800df0a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800df0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800df0e:	4618      	mov	r0, r3
 800df10:	371c      	adds	r7, #28
 800df12:	46bd      	mov	sp, r7
 800df14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df18:	4770      	bx	lr
 800df1a:	bf00      	nop
 800df1c:	200040d4 	.word	0x200040d4

0800df20 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b082      	sub	sp, #8
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
 800df28:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800df2a:	2200      	movs	r2, #0
 800df2c:	6839      	ldr	r1, [r7, #0]
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f7ff ffaa 	bl	800de88 <FATFS_LinkDriverEx>
 800df34:	4603      	mov	r3, r0
}
 800df36:	4618      	mov	r0, r3
 800df38:	3708      	adds	r7, #8
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}
	...

0800df40 <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800df40:	b480      	push	{r7}
 800df42:	b089      	sub	sp, #36	; 0x24
 800df44:	af00      	add	r7, sp, #0
 800df46:	4603      	mov	r3, r0
 800df48:	6039      	str	r1, [r7, #0]
 800df4a:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (chr < 0x80) {	/* ASCII */
 800df4c:	88fb      	ldrh	r3, [r7, #6]
 800df4e:	2b7f      	cmp	r3, #127	; 0x7f
 800df50:	d802      	bhi.n	800df58 <ff_convert+0x18>
		c = chr;
 800df52:	88fb      	ldrh	r3, [r7, #6]
 800df54:	837b      	strh	r3, [r7, #26]
 800df56:	e045      	b.n	800dfe4 <ff_convert+0xa4>
	} else {
		if (dir) {		/* OEM code to unicode */
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d005      	beq.n	800df6a <ff_convert+0x2a>
			p = oem2uni;
 800df5e:	4b25      	ldr	r3, [pc, #148]	; (800dff4 <ff_convert+0xb4>)
 800df60:	61fb      	str	r3, [r7, #28]
			hi = sizeof oem2uni / 4 - 1;
 800df62:	f245 5320 	movw	r3, #21792	; 0x5520
 800df66:	60bb      	str	r3, [r7, #8]
 800df68:	e004      	b.n	800df74 <ff_convert+0x34>
		} else {		/* Unicode to OEM code */
			p = uni2oem;
 800df6a:	4b23      	ldr	r3, [pc, #140]	; (800dff8 <ff_convert+0xb8>)
 800df6c:	61fb      	str	r3, [r7, #28]
			hi = sizeof uni2oem / 4 - 1;
 800df6e:	f245 5320 	movw	r3, #21792	; 0x5520
 800df72:	60bb      	str	r3, [r7, #8]
		}
		li = 0;
 800df74:	2300      	movs	r3, #0
 800df76:	60fb      	str	r3, [r7, #12]
		for (n = 16; n; n--) {
 800df78:	2310      	movs	r3, #16
 800df7a:	613b      	str	r3, [r7, #16]
 800df7c:	e021      	b.n	800dfc2 <ff_convert+0x82>
			i = li + (hi - li) / 2;
 800df7e:	68ba      	ldr	r2, [r7, #8]
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	1ad3      	subs	r3, r2, r3
 800df84:	0fda      	lsrs	r2, r3, #31
 800df86:	4413      	add	r3, r2
 800df88:	105b      	asrs	r3, r3, #1
 800df8a:	461a      	mov	r2, r3
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	4413      	add	r3, r2
 800df90:	617b      	str	r3, [r7, #20]
			if (chr == p[i * 2]) break;
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	009b      	lsls	r3, r3, #2
 800df96:	69fa      	ldr	r2, [r7, #28]
 800df98:	4413      	add	r3, r2
 800df9a:	881b      	ldrh	r3, [r3, #0]
 800df9c:	88fa      	ldrh	r2, [r7, #6]
 800df9e:	429a      	cmp	r2, r3
 800dfa0:	d013      	beq.n	800dfca <ff_convert+0x8a>
			if (chr > p[i * 2])
 800dfa2:	697b      	ldr	r3, [r7, #20]
 800dfa4:	009b      	lsls	r3, r3, #2
 800dfa6:	69fa      	ldr	r2, [r7, #28]
 800dfa8:	4413      	add	r3, r2
 800dfaa:	881b      	ldrh	r3, [r3, #0]
 800dfac:	88fa      	ldrh	r2, [r7, #6]
 800dfae:	429a      	cmp	r2, r3
 800dfb0:	d902      	bls.n	800dfb8 <ff_convert+0x78>
				li = i;
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	60fb      	str	r3, [r7, #12]
 800dfb6:	e001      	b.n	800dfbc <ff_convert+0x7c>
			else
				hi = i;
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	60bb      	str	r3, [r7, #8]
		for (n = 16; n; n--) {
 800dfbc:	693b      	ldr	r3, [r7, #16]
 800dfbe:	3b01      	subs	r3, #1
 800dfc0:	613b      	str	r3, [r7, #16]
 800dfc2:	693b      	ldr	r3, [r7, #16]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d1da      	bne.n	800df7e <ff_convert+0x3e>
 800dfc8:	e000      	b.n	800dfcc <ff_convert+0x8c>
			if (chr == p[i * 2]) break;
 800dfca:	bf00      	nop
		}
		c = n ? p[i * 2 + 1] : 0;
 800dfcc:	693b      	ldr	r3, [r7, #16]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d006      	beq.n	800dfe0 <ff_convert+0xa0>
 800dfd2:	697b      	ldr	r3, [r7, #20]
 800dfd4:	009b      	lsls	r3, r3, #2
 800dfd6:	3302      	adds	r3, #2
 800dfd8:	69fa      	ldr	r2, [r7, #28]
 800dfda:	4413      	add	r3, r2
 800dfdc:	881b      	ldrh	r3, [r3, #0]
 800dfde:	e000      	b.n	800dfe2 <ff_convert+0xa2>
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	837b      	strh	r3, [r7, #26]
	}

	return c;
 800dfe4:	8b7b      	ldrh	r3, [r7, #26]
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	3724      	adds	r7, #36	; 0x24
 800dfea:	46bd      	mov	sp, r7
 800dfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff0:	4770      	bx	lr
 800dff2:	bf00      	nop
 800dff4:	08059df8 	.word	0x08059df8
 800dff8:	08044974 	.word	0x08044974

0800dffc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800dffc:	b480      	push	{r7}
 800dffe:	b087      	sub	sp, #28
 800e000:	af00      	add	r7, sp, #0
 800e002:	4603      	mov	r3, r0
 800e004:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800e006:	88fb      	ldrh	r3, [r7, #6]
 800e008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e00c:	d201      	bcs.n	800e012 <ff_wtoupper+0x16>
 800e00e:	4b3e      	ldr	r3, [pc, #248]	; (800e108 <ff_wtoupper+0x10c>)
 800e010:	e000      	b.n	800e014 <ff_wtoupper+0x18>
 800e012:	4b3e      	ldr	r3, [pc, #248]	; (800e10c <ff_wtoupper+0x110>)
 800e014:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800e016:	697b      	ldr	r3, [r7, #20]
 800e018:	1c9a      	adds	r2, r3, #2
 800e01a:	617a      	str	r2, [r7, #20]
 800e01c:	881b      	ldrh	r3, [r3, #0]
 800e01e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800e020:	8a7b      	ldrh	r3, [r7, #18]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d068      	beq.n	800e0f8 <ff_wtoupper+0xfc>
 800e026:	88fa      	ldrh	r2, [r7, #6]
 800e028:	8a7b      	ldrh	r3, [r7, #18]
 800e02a:	429a      	cmp	r2, r3
 800e02c:	d364      	bcc.n	800e0f8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800e02e:	697b      	ldr	r3, [r7, #20]
 800e030:	1c9a      	adds	r2, r3, #2
 800e032:	617a      	str	r2, [r7, #20]
 800e034:	881b      	ldrh	r3, [r3, #0]
 800e036:	823b      	strh	r3, [r7, #16]
 800e038:	8a3b      	ldrh	r3, [r7, #16]
 800e03a:	0a1b      	lsrs	r3, r3, #8
 800e03c:	81fb      	strh	r3, [r7, #14]
 800e03e:	8a3b      	ldrh	r3, [r7, #16]
 800e040:	b2db      	uxtb	r3, r3
 800e042:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800e044:	88fa      	ldrh	r2, [r7, #6]
 800e046:	8a79      	ldrh	r1, [r7, #18]
 800e048:	8a3b      	ldrh	r3, [r7, #16]
 800e04a:	440b      	add	r3, r1
 800e04c:	429a      	cmp	r2, r3
 800e04e:	da49      	bge.n	800e0e4 <ff_wtoupper+0xe8>
			switch (cmd) {
 800e050:	89fb      	ldrh	r3, [r7, #14]
 800e052:	2b08      	cmp	r3, #8
 800e054:	d84f      	bhi.n	800e0f6 <ff_wtoupper+0xfa>
 800e056:	a201      	add	r2, pc, #4	; (adr r2, 800e05c <ff_wtoupper+0x60>)
 800e058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e05c:	0800e081 	.word	0x0800e081
 800e060:	0800e093 	.word	0x0800e093
 800e064:	0800e0a9 	.word	0x0800e0a9
 800e068:	0800e0b1 	.word	0x0800e0b1
 800e06c:	0800e0b9 	.word	0x0800e0b9
 800e070:	0800e0c1 	.word	0x0800e0c1
 800e074:	0800e0c9 	.word	0x0800e0c9
 800e078:	0800e0d1 	.word	0x0800e0d1
 800e07c:	0800e0d9 	.word	0x0800e0d9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800e080:	88fa      	ldrh	r2, [r7, #6]
 800e082:	8a7b      	ldrh	r3, [r7, #18]
 800e084:	1ad3      	subs	r3, r2, r3
 800e086:	005b      	lsls	r3, r3, #1
 800e088:	697a      	ldr	r2, [r7, #20]
 800e08a:	4413      	add	r3, r2
 800e08c:	881b      	ldrh	r3, [r3, #0]
 800e08e:	80fb      	strh	r3, [r7, #6]
 800e090:	e027      	b.n	800e0e2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800e092:	88fa      	ldrh	r2, [r7, #6]
 800e094:	8a7b      	ldrh	r3, [r7, #18]
 800e096:	1ad3      	subs	r3, r2, r3
 800e098:	b29b      	uxth	r3, r3
 800e09a:	f003 0301 	and.w	r3, r3, #1
 800e09e:	b29b      	uxth	r3, r3
 800e0a0:	88fa      	ldrh	r2, [r7, #6]
 800e0a2:	1ad3      	subs	r3, r2, r3
 800e0a4:	80fb      	strh	r3, [r7, #6]
 800e0a6:	e01c      	b.n	800e0e2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800e0a8:	88fb      	ldrh	r3, [r7, #6]
 800e0aa:	3b10      	subs	r3, #16
 800e0ac:	80fb      	strh	r3, [r7, #6]
 800e0ae:	e018      	b.n	800e0e2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800e0b0:	88fb      	ldrh	r3, [r7, #6]
 800e0b2:	3b20      	subs	r3, #32
 800e0b4:	80fb      	strh	r3, [r7, #6]
 800e0b6:	e014      	b.n	800e0e2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800e0b8:	88fb      	ldrh	r3, [r7, #6]
 800e0ba:	3b30      	subs	r3, #48	; 0x30
 800e0bc:	80fb      	strh	r3, [r7, #6]
 800e0be:	e010      	b.n	800e0e2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800e0c0:	88fb      	ldrh	r3, [r7, #6]
 800e0c2:	3b1a      	subs	r3, #26
 800e0c4:	80fb      	strh	r3, [r7, #6]
 800e0c6:	e00c      	b.n	800e0e2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800e0c8:	88fb      	ldrh	r3, [r7, #6]
 800e0ca:	3308      	adds	r3, #8
 800e0cc:	80fb      	strh	r3, [r7, #6]
 800e0ce:	e008      	b.n	800e0e2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800e0d0:	88fb      	ldrh	r3, [r7, #6]
 800e0d2:	3b50      	subs	r3, #80	; 0x50
 800e0d4:	80fb      	strh	r3, [r7, #6]
 800e0d6:	e004      	b.n	800e0e2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800e0d8:	88fb      	ldrh	r3, [r7, #6]
 800e0da:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800e0de:	80fb      	strh	r3, [r7, #6]
 800e0e0:	bf00      	nop
			}
			break;
 800e0e2:	e008      	b.n	800e0f6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800e0e4:	89fb      	ldrh	r3, [r7, #14]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d195      	bne.n	800e016 <ff_wtoupper+0x1a>
 800e0ea:	8a3b      	ldrh	r3, [r7, #16]
 800e0ec:	005b      	lsls	r3, r3, #1
 800e0ee:	697a      	ldr	r2, [r7, #20]
 800e0f0:	4413      	add	r3, r2
 800e0f2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800e0f4:	e78f      	b.n	800e016 <ff_wtoupper+0x1a>
			break;
 800e0f6:	bf00      	nop
	}

	return chr;
 800e0f8:	88fb      	ldrh	r3, [r7, #6]
}
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	371c      	adds	r7, #28
 800e0fe:	46bd      	mov	sp, r7
 800e100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e104:	4770      	bx	lr
 800e106:	bf00      	nop
 800e108:	0806f27c 	.word	0x0806f27c
 800e10c:	0806f470 	.word	0x0806f470

0800e110 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b084      	sub	sp, #16
 800e114:	af00      	add	r7, sp, #0
 800e116:	4603      	mov	r3, r0
 800e118:	6039      	str	r1, [r7, #0]
 800e11a:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800e11c:	2200      	movs	r2, #0
 800e11e:	2101      	movs	r1, #1
 800e120:	2001      	movs	r0, #1
 800e122:	f000 faad 	bl	800e680 <osSemaphoreNew>
 800e126:	4602      	mov	r2, r0
 800e128:	683b      	ldr	r3, [r7, #0]
 800e12a:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800e12c:	683b      	ldr	r3, [r7, #0]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	2b00      	cmp	r3, #0
 800e132:	bf14      	ite	ne
 800e134:	2301      	movne	r3, #1
 800e136:	2300      	moveq	r3, #0
 800e138:	b2db      	uxtb	r3, r3
 800e13a:	60fb      	str	r3, [r7, #12]

    return ret;
 800e13c:	68fb      	ldr	r3, [r7, #12]
}
 800e13e:	4618      	mov	r0, r3
 800e140:	3710      	adds	r7, #16
 800e142:	46bd      	mov	sp, r7
 800e144:	bd80      	pop	{r7, pc}

0800e146 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800e146:	b580      	push	{r7, lr}
 800e148:	b082      	sub	sp, #8
 800e14a:	af00      	add	r7, sp, #0
 800e14c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800e14e:	6878      	ldr	r0, [r7, #4]
 800e150:	f000 fbb6 	bl	800e8c0 <osSemaphoreDelete>
#endif
    return 1;
 800e154:	2301      	movs	r3, #1
}
 800e156:	4618      	mov	r0, r3
 800e158:	3708      	adds	r7, #8
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}

0800e15e <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800e15e:	b580      	push	{r7, lr}
 800e160:	b084      	sub	sp, #16
 800e162:	af00      	add	r7, sp, #0
 800e164:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800e166:	2300      	movs	r3, #0
 800e168:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800e16a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e16e:	6878      	ldr	r0, [r7, #4]
 800e170:	f000 fb10 	bl	800e794 <osSemaphoreAcquire>
 800e174:	4603      	mov	r3, r0
 800e176:	2b00      	cmp	r3, #0
 800e178:	d101      	bne.n	800e17e <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800e17a:	2301      	movs	r3, #1
 800e17c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800e17e:	68fb      	ldr	r3, [r7, #12]
}
 800e180:	4618      	mov	r0, r3
 800e182:	3710      	adds	r7, #16
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}

0800e188 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b082      	sub	sp, #8
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f000 fb51 	bl	800e838 <osSemaphoreRelease>
#endif
}
 800e196:	bf00      	nop
 800e198:	3708      	adds	r7, #8
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}
	...

0800e1a0 <__NVIC_SetPriority>:
{
 800e1a0:	b480      	push	{r7}
 800e1a2:	b083      	sub	sp, #12
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	6039      	str	r1, [r7, #0]
 800e1aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e1ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	db0a      	blt.n	800e1ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	b2da      	uxtb	r2, r3
 800e1b8:	490c      	ldr	r1, [pc, #48]	; (800e1ec <__NVIC_SetPriority+0x4c>)
 800e1ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e1be:	0112      	lsls	r2, r2, #4
 800e1c0:	b2d2      	uxtb	r2, r2
 800e1c2:	440b      	add	r3, r1
 800e1c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e1c8:	e00a      	b.n	800e1e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	b2da      	uxtb	r2, r3
 800e1ce:	4908      	ldr	r1, [pc, #32]	; (800e1f0 <__NVIC_SetPriority+0x50>)
 800e1d0:	79fb      	ldrb	r3, [r7, #7]
 800e1d2:	f003 030f 	and.w	r3, r3, #15
 800e1d6:	3b04      	subs	r3, #4
 800e1d8:	0112      	lsls	r2, r2, #4
 800e1da:	b2d2      	uxtb	r2, r2
 800e1dc:	440b      	add	r3, r1
 800e1de:	761a      	strb	r2, [r3, #24]
}
 800e1e0:	bf00      	nop
 800e1e2:	370c      	adds	r7, #12
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ea:	4770      	bx	lr
 800e1ec:	e000e100 	.word	0xe000e100
 800e1f0:	e000ed00 	.word	0xe000ed00

0800e1f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e1f8:	2100      	movs	r1, #0
 800e1fa:	f06f 0004 	mvn.w	r0, #4
 800e1fe:	f7ff ffcf 	bl	800e1a0 <__NVIC_SetPriority>
#endif
}
 800e202:	bf00      	nop
 800e204:	bd80      	pop	{r7, pc}
	...

0800e208 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e208:	b480      	push	{r7}
 800e20a:	b083      	sub	sp, #12
 800e20c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e20e:	f3ef 8305 	mrs	r3, IPSR
 800e212:	603b      	str	r3, [r7, #0]
  return(result);
 800e214:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e216:	2b00      	cmp	r3, #0
 800e218:	d003      	beq.n	800e222 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e21a:	f06f 0305 	mvn.w	r3, #5
 800e21e:	607b      	str	r3, [r7, #4]
 800e220:	e00c      	b.n	800e23c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e222:	4b0a      	ldr	r3, [pc, #40]	; (800e24c <osKernelInitialize+0x44>)
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d105      	bne.n	800e236 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e22a:	4b08      	ldr	r3, [pc, #32]	; (800e24c <osKernelInitialize+0x44>)
 800e22c:	2201      	movs	r2, #1
 800e22e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e230:	2300      	movs	r3, #0
 800e232:	607b      	str	r3, [r7, #4]
 800e234:	e002      	b.n	800e23c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800e236:	f04f 33ff 	mov.w	r3, #4294967295
 800e23a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e23c:	687b      	ldr	r3, [r7, #4]
}
 800e23e:	4618      	mov	r0, r3
 800e240:	370c      	adds	r7, #12
 800e242:	46bd      	mov	sp, r7
 800e244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e248:	4770      	bx	lr
 800e24a:	bf00      	nop
 800e24c:	200040e0 	.word	0x200040e0

0800e250 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800e250:	b580      	push	{r7, lr}
 800e252:	b082      	sub	sp, #8
 800e254:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800e256:	f002 fc75 	bl	8010b44 <xTaskGetSchedulerState>
 800e25a:	4603      	mov	r3, r0
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d004      	beq.n	800e26a <osKernelGetState+0x1a>
 800e260:	2b02      	cmp	r3, #2
 800e262:	d105      	bne.n	800e270 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800e264:	2302      	movs	r3, #2
 800e266:	607b      	str	r3, [r7, #4]
      break;
 800e268:	e00c      	b.n	800e284 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800e26a:	2303      	movs	r3, #3
 800e26c:	607b      	str	r3, [r7, #4]
      break;
 800e26e:	e009      	b.n	800e284 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800e270:	4b07      	ldr	r3, [pc, #28]	; (800e290 <osKernelGetState+0x40>)
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	2b01      	cmp	r3, #1
 800e276:	d102      	bne.n	800e27e <osKernelGetState+0x2e>
        state = osKernelReady;
 800e278:	2301      	movs	r3, #1
 800e27a:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800e27c:	e001      	b.n	800e282 <osKernelGetState+0x32>
        state = osKernelInactive;
 800e27e:	2300      	movs	r3, #0
 800e280:	607b      	str	r3, [r7, #4]
      break;
 800e282:	bf00      	nop
  }

  return (state);
 800e284:	687b      	ldr	r3, [r7, #4]
}
 800e286:	4618      	mov	r0, r3
 800e288:	3708      	adds	r7, #8
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd80      	pop	{r7, pc}
 800e28e:	bf00      	nop
 800e290:	200040e0 	.word	0x200040e0

0800e294 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800e294:	b580      	push	{r7, lr}
 800e296:	b082      	sub	sp, #8
 800e298:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e29a:	f3ef 8305 	mrs	r3, IPSR
 800e29e:	603b      	str	r3, [r7, #0]
  return(result);
 800e2a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d003      	beq.n	800e2ae <osKernelStart+0x1a>
    stat = osErrorISR;
 800e2a6:	f06f 0305 	mvn.w	r3, #5
 800e2aa:	607b      	str	r3, [r7, #4]
 800e2ac:	e010      	b.n	800e2d0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e2ae:	4b0b      	ldr	r3, [pc, #44]	; (800e2dc <osKernelStart+0x48>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	2b01      	cmp	r3, #1
 800e2b4:	d109      	bne.n	800e2ca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e2b6:	f7ff ff9d 	bl	800e1f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e2ba:	4b08      	ldr	r3, [pc, #32]	; (800e2dc <osKernelStart+0x48>)
 800e2bc:	2202      	movs	r2, #2
 800e2be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e2c0:	f001 ffd6 	bl	8010270 <vTaskStartScheduler>
      stat = osOK;
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	607b      	str	r3, [r7, #4]
 800e2c8:	e002      	b.n	800e2d0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e2ca:	f04f 33ff 	mov.w	r3, #4294967295
 800e2ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e2d0:	687b      	ldr	r3, [r7, #4]
}
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	3708      	adds	r7, #8
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	bd80      	pop	{r7, pc}
 800e2da:	bf00      	nop
 800e2dc:	200040e0 	.word	0x200040e0

0800e2e0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b082      	sub	sp, #8
 800e2e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e2e6:	f3ef 8305 	mrs	r3, IPSR
 800e2ea:	603b      	str	r3, [r7, #0]
  return(result);
 800e2ec:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d003      	beq.n	800e2fa <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800e2f2:	f002 f8df 	bl	80104b4 <xTaskGetTickCountFromISR>
 800e2f6:	6078      	str	r0, [r7, #4]
 800e2f8:	e002      	b.n	800e300 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800e2fa:	f002 f8cb 	bl	8010494 <xTaskGetTickCount>
 800e2fe:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800e300:	687b      	ldr	r3, [r7, #4]
}
 800e302:	4618      	mov	r0, r3
 800e304:	3708      	adds	r7, #8
 800e306:	46bd      	mov	sp, r7
 800e308:	bd80      	pop	{r7, pc}

0800e30a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e30a:	b580      	push	{r7, lr}
 800e30c:	b08e      	sub	sp, #56	; 0x38
 800e30e:	af04      	add	r7, sp, #16
 800e310:	60f8      	str	r0, [r7, #12]
 800e312:	60b9      	str	r1, [r7, #8]
 800e314:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e316:	2300      	movs	r3, #0
 800e318:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e31a:	f3ef 8305 	mrs	r3, IPSR
 800e31e:	617b      	str	r3, [r7, #20]
  return(result);
 800e320:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e322:	2b00      	cmp	r3, #0
 800e324:	d17e      	bne.n	800e424 <osThreadNew+0x11a>
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d07b      	beq.n	800e424 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800e32c:	2380      	movs	r3, #128	; 0x80
 800e32e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e330:	2318      	movs	r3, #24
 800e332:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e334:	2300      	movs	r3, #0
 800e336:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800e338:	f04f 33ff 	mov.w	r3, #4294967295
 800e33c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d045      	beq.n	800e3d0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d002      	beq.n	800e352 <osThreadNew+0x48>
        name = attr->name;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	699b      	ldr	r3, [r3, #24]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d002      	beq.n	800e360 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	699b      	ldr	r3, [r3, #24]
 800e35e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e360:	69fb      	ldr	r3, [r7, #28]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d008      	beq.n	800e378 <osThreadNew+0x6e>
 800e366:	69fb      	ldr	r3, [r7, #28]
 800e368:	2b38      	cmp	r3, #56	; 0x38
 800e36a:	d805      	bhi.n	800e378 <osThreadNew+0x6e>
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	685b      	ldr	r3, [r3, #4]
 800e370:	f003 0301 	and.w	r3, r3, #1
 800e374:	2b00      	cmp	r3, #0
 800e376:	d001      	beq.n	800e37c <osThreadNew+0x72>
        return (NULL);
 800e378:	2300      	movs	r3, #0
 800e37a:	e054      	b.n	800e426 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	695b      	ldr	r3, [r3, #20]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d003      	beq.n	800e38c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	695b      	ldr	r3, [r3, #20]
 800e388:	089b      	lsrs	r3, r3, #2
 800e38a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	689b      	ldr	r3, [r3, #8]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d00e      	beq.n	800e3b2 <osThreadNew+0xa8>
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	68db      	ldr	r3, [r3, #12]
 800e398:	2b5b      	cmp	r3, #91	; 0x5b
 800e39a:	d90a      	bls.n	800e3b2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d006      	beq.n	800e3b2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	695b      	ldr	r3, [r3, #20]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d002      	beq.n	800e3b2 <osThreadNew+0xa8>
        mem = 1;
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	61bb      	str	r3, [r7, #24]
 800e3b0:	e010      	b.n	800e3d4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	689b      	ldr	r3, [r3, #8]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d10c      	bne.n	800e3d4 <osThreadNew+0xca>
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	68db      	ldr	r3, [r3, #12]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d108      	bne.n	800e3d4 <osThreadNew+0xca>
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	691b      	ldr	r3, [r3, #16]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d104      	bne.n	800e3d4 <osThreadNew+0xca>
          mem = 0;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	61bb      	str	r3, [r7, #24]
 800e3ce:	e001      	b.n	800e3d4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e3d4:	69bb      	ldr	r3, [r7, #24]
 800e3d6:	2b01      	cmp	r3, #1
 800e3d8:	d110      	bne.n	800e3fc <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e3de:	687a      	ldr	r2, [r7, #4]
 800e3e0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e3e2:	9202      	str	r2, [sp, #8]
 800e3e4:	9301      	str	r3, [sp, #4]
 800e3e6:	69fb      	ldr	r3, [r7, #28]
 800e3e8:	9300      	str	r3, [sp, #0]
 800e3ea:	68bb      	ldr	r3, [r7, #8]
 800e3ec:	6a3a      	ldr	r2, [r7, #32]
 800e3ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e3f0:	68f8      	ldr	r0, [r7, #12]
 800e3f2:	f001 fd67 	bl	800fec4 <xTaskCreateStatic>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	613b      	str	r3, [r7, #16]
 800e3fa:	e013      	b.n	800e424 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e3fc:	69bb      	ldr	r3, [r7, #24]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d110      	bne.n	800e424 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e402:	6a3b      	ldr	r3, [r7, #32]
 800e404:	b29a      	uxth	r2, r3
 800e406:	f107 0310 	add.w	r3, r7, #16
 800e40a:	9301      	str	r3, [sp, #4]
 800e40c:	69fb      	ldr	r3, [r7, #28]
 800e40e:	9300      	str	r3, [sp, #0]
 800e410:	68bb      	ldr	r3, [r7, #8]
 800e412:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e414:	68f8      	ldr	r0, [r7, #12]
 800e416:	f001 fdb2 	bl	800ff7e <xTaskCreate>
 800e41a:	4603      	mov	r3, r0
 800e41c:	2b01      	cmp	r3, #1
 800e41e:	d001      	beq.n	800e424 <osThreadNew+0x11a>
            hTask = NULL;
 800e420:	2300      	movs	r3, #0
 800e422:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e424:	693b      	ldr	r3, [r7, #16]
}
 800e426:	4618      	mov	r0, r3
 800e428:	3728      	adds	r7, #40	; 0x28
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}

0800e42e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800e42e:	b580      	push	{r7, lr}
 800e430:	b084      	sub	sp, #16
 800e432:	af00      	add	r7, sp, #0
 800e434:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e436:	f3ef 8305 	mrs	r3, IPSR
 800e43a:	60bb      	str	r3, [r7, #8]
  return(result);
 800e43c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d003      	beq.n	800e44a <osDelay+0x1c>
    stat = osErrorISR;
 800e442:	f06f 0305 	mvn.w	r3, #5
 800e446:	60fb      	str	r3, [r7, #12]
 800e448:	e007      	b.n	800e45a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800e44a:	2300      	movs	r3, #0
 800e44c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d002      	beq.n	800e45a <osDelay+0x2c>
      vTaskDelay(ticks);
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f001 fed7 	bl	8010208 <vTaskDelay>
    }
  }

  return (stat);
 800e45a:	68fb      	ldr	r3, [r7, #12]
}
 800e45c:	4618      	mov	r0, r3
 800e45e:	3710      	adds	r7, #16
 800e460:	46bd      	mov	sp, r7
 800e462:	bd80      	pop	{r7, pc}

0800e464 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800e464:	b580      	push	{r7, lr}
 800e466:	b088      	sub	sp, #32
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800e46c:	2300      	movs	r3, #0
 800e46e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e470:	f3ef 8305 	mrs	r3, IPSR
 800e474:	60bb      	str	r3, [r7, #8]
  return(result);
 800e476:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d174      	bne.n	800e566 <osMutexNew+0x102>
    if (attr != NULL) {
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d003      	beq.n	800e48a <osMutexNew+0x26>
      type = attr->attr_bits;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	685b      	ldr	r3, [r3, #4]
 800e486:	61bb      	str	r3, [r7, #24]
 800e488:	e001      	b.n	800e48e <osMutexNew+0x2a>
    } else {
      type = 0U;
 800e48a:	2300      	movs	r3, #0
 800e48c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800e48e:	69bb      	ldr	r3, [r7, #24]
 800e490:	f003 0301 	and.w	r3, r3, #1
 800e494:	2b00      	cmp	r3, #0
 800e496:	d002      	beq.n	800e49e <osMutexNew+0x3a>
      rmtx = 1U;
 800e498:	2301      	movs	r3, #1
 800e49a:	617b      	str	r3, [r7, #20]
 800e49c:	e001      	b.n	800e4a2 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800e4a2:	69bb      	ldr	r3, [r7, #24]
 800e4a4:	f003 0308 	and.w	r3, r3, #8
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d15c      	bne.n	800e566 <osMutexNew+0x102>
      mem = -1;
 800e4ac:	f04f 33ff 	mov.w	r3, #4294967295
 800e4b0:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d015      	beq.n	800e4e4 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	689b      	ldr	r3, [r3, #8]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d006      	beq.n	800e4ce <osMutexNew+0x6a>
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	68db      	ldr	r3, [r3, #12]
 800e4c4:	2b4f      	cmp	r3, #79	; 0x4f
 800e4c6:	d902      	bls.n	800e4ce <osMutexNew+0x6a>
          mem = 1;
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	613b      	str	r3, [r7, #16]
 800e4cc:	e00c      	b.n	800e4e8 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	689b      	ldr	r3, [r3, #8]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d108      	bne.n	800e4e8 <osMutexNew+0x84>
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	68db      	ldr	r3, [r3, #12]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d104      	bne.n	800e4e8 <osMutexNew+0x84>
            mem = 0;
 800e4de:	2300      	movs	r3, #0
 800e4e0:	613b      	str	r3, [r7, #16]
 800e4e2:	e001      	b.n	800e4e8 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800e4e8:	693b      	ldr	r3, [r7, #16]
 800e4ea:	2b01      	cmp	r3, #1
 800e4ec:	d112      	bne.n	800e514 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800e4ee:	697b      	ldr	r3, [r7, #20]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d007      	beq.n	800e504 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	689b      	ldr	r3, [r3, #8]
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	2004      	movs	r0, #4
 800e4fc:	f000 fd8d 	bl	800f01a <xQueueCreateMutexStatic>
 800e500:	61f8      	str	r0, [r7, #28]
 800e502:	e016      	b.n	800e532 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	689b      	ldr	r3, [r3, #8]
 800e508:	4619      	mov	r1, r3
 800e50a:	2001      	movs	r0, #1
 800e50c:	f000 fd85 	bl	800f01a <xQueueCreateMutexStatic>
 800e510:	61f8      	str	r0, [r7, #28]
 800e512:	e00e      	b.n	800e532 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800e514:	693b      	ldr	r3, [r7, #16]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d10b      	bne.n	800e532 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800e51a:	697b      	ldr	r3, [r7, #20]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d004      	beq.n	800e52a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800e520:	2004      	movs	r0, #4
 800e522:	f000 fd62 	bl	800efea <xQueueCreateMutex>
 800e526:	61f8      	str	r0, [r7, #28]
 800e528:	e003      	b.n	800e532 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800e52a:	2001      	movs	r0, #1
 800e52c:	f000 fd5d 	bl	800efea <xQueueCreateMutex>
 800e530:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800e532:	69fb      	ldr	r3, [r7, #28]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d00c      	beq.n	800e552 <osMutexNew+0xee>
        if (attr != NULL) {
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d003      	beq.n	800e546 <osMutexNew+0xe2>
          name = attr->name;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	60fb      	str	r3, [r7, #12]
 800e544:	e001      	b.n	800e54a <osMutexNew+0xe6>
        } else {
          name = NULL;
 800e546:	2300      	movs	r3, #0
 800e548:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800e54a:	68f9      	ldr	r1, [r7, #12]
 800e54c:	69f8      	ldr	r0, [r7, #28]
 800e54e:	f001 fc31 	bl	800fdb4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800e552:	69fb      	ldr	r3, [r7, #28]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d006      	beq.n	800e566 <osMutexNew+0x102>
 800e558:	697b      	ldr	r3, [r7, #20]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d003      	beq.n	800e566 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800e55e:	69fb      	ldr	r3, [r7, #28]
 800e560:	f043 0301 	orr.w	r3, r3, #1
 800e564:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800e566:	69fb      	ldr	r3, [r7, #28]
}
 800e568:	4618      	mov	r0, r3
 800e56a:	3720      	adds	r7, #32
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd80      	pop	{r7, pc}

0800e570 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800e570:	b580      	push	{r7, lr}
 800e572:	b086      	sub	sp, #24
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
 800e578:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	f023 0301 	bic.w	r3, r3, #1
 800e580:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	f003 0301 	and.w	r3, r3, #1
 800e588:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800e58a:	2300      	movs	r3, #0
 800e58c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e58e:	f3ef 8305 	mrs	r3, IPSR
 800e592:	60bb      	str	r3, [r7, #8]
  return(result);
 800e594:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800e596:	2b00      	cmp	r3, #0
 800e598:	d003      	beq.n	800e5a2 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800e59a:	f06f 0305 	mvn.w	r3, #5
 800e59e:	617b      	str	r3, [r7, #20]
 800e5a0:	e02c      	b.n	800e5fc <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800e5a2:	693b      	ldr	r3, [r7, #16]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d103      	bne.n	800e5b0 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800e5a8:	f06f 0303 	mvn.w	r3, #3
 800e5ac:	617b      	str	r3, [r7, #20]
 800e5ae:	e025      	b.n	800e5fc <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d011      	beq.n	800e5da <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800e5b6:	6839      	ldr	r1, [r7, #0]
 800e5b8:	6938      	ldr	r0, [r7, #16]
 800e5ba:	f000 fd7d 	bl	800f0b8 <xQueueTakeMutexRecursive>
 800e5be:	4603      	mov	r3, r0
 800e5c0:	2b01      	cmp	r3, #1
 800e5c2:	d01b      	beq.n	800e5fc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d003      	beq.n	800e5d2 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800e5ca:	f06f 0301 	mvn.w	r3, #1
 800e5ce:	617b      	str	r3, [r7, #20]
 800e5d0:	e014      	b.n	800e5fc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800e5d2:	f06f 0302 	mvn.w	r3, #2
 800e5d6:	617b      	str	r3, [r7, #20]
 800e5d8:	e010      	b.n	800e5fc <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800e5da:	6839      	ldr	r1, [r7, #0]
 800e5dc:	6938      	ldr	r0, [r7, #16]
 800e5de:	f001 f911 	bl	800f804 <xQueueSemaphoreTake>
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	2b01      	cmp	r3, #1
 800e5e6:	d009      	beq.n	800e5fc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d003      	beq.n	800e5f6 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800e5ee:	f06f 0301 	mvn.w	r3, #1
 800e5f2:	617b      	str	r3, [r7, #20]
 800e5f4:	e002      	b.n	800e5fc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800e5f6:	f06f 0302 	mvn.w	r3, #2
 800e5fa:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800e5fc:	697b      	ldr	r3, [r7, #20]
}
 800e5fe:	4618      	mov	r0, r3
 800e600:	3718      	adds	r7, #24
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}

0800e606 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800e606:	b580      	push	{r7, lr}
 800e608:	b086      	sub	sp, #24
 800e60a:	af00      	add	r7, sp, #0
 800e60c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	f023 0301 	bic.w	r3, r3, #1
 800e614:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	f003 0301 	and.w	r3, r3, #1
 800e61c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800e61e:	2300      	movs	r3, #0
 800e620:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e622:	f3ef 8305 	mrs	r3, IPSR
 800e626:	60bb      	str	r3, [r7, #8]
  return(result);
 800e628:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d003      	beq.n	800e636 <osMutexRelease+0x30>
    stat = osErrorISR;
 800e62e:	f06f 0305 	mvn.w	r3, #5
 800e632:	617b      	str	r3, [r7, #20]
 800e634:	e01f      	b.n	800e676 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800e636:	693b      	ldr	r3, [r7, #16]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d103      	bne.n	800e644 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800e63c:	f06f 0303 	mvn.w	r3, #3
 800e640:	617b      	str	r3, [r7, #20]
 800e642:	e018      	b.n	800e676 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d009      	beq.n	800e65e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800e64a:	6938      	ldr	r0, [r7, #16]
 800e64c:	f000 fd00 	bl	800f050 <xQueueGiveMutexRecursive>
 800e650:	4603      	mov	r3, r0
 800e652:	2b01      	cmp	r3, #1
 800e654:	d00f      	beq.n	800e676 <osMutexRelease+0x70>
        stat = osErrorResource;
 800e656:	f06f 0302 	mvn.w	r3, #2
 800e65a:	617b      	str	r3, [r7, #20]
 800e65c:	e00b      	b.n	800e676 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800e65e:	2300      	movs	r3, #0
 800e660:	2200      	movs	r2, #0
 800e662:	2100      	movs	r1, #0
 800e664:	6938      	ldr	r0, [r7, #16]
 800e666:	f000 fdc7 	bl	800f1f8 <xQueueGenericSend>
 800e66a:	4603      	mov	r3, r0
 800e66c:	2b01      	cmp	r3, #1
 800e66e:	d002      	beq.n	800e676 <osMutexRelease+0x70>
        stat = osErrorResource;
 800e670:	f06f 0302 	mvn.w	r3, #2
 800e674:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800e676:	697b      	ldr	r3, [r7, #20]
}
 800e678:	4618      	mov	r0, r3
 800e67a:	3718      	adds	r7, #24
 800e67c:	46bd      	mov	sp, r7
 800e67e:	bd80      	pop	{r7, pc}

0800e680 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800e680:	b580      	push	{r7, lr}
 800e682:	b08a      	sub	sp, #40	; 0x28
 800e684:	af02      	add	r7, sp, #8
 800e686:	60f8      	str	r0, [r7, #12]
 800e688:	60b9      	str	r1, [r7, #8]
 800e68a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800e68c:	2300      	movs	r3, #0
 800e68e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e690:	f3ef 8305 	mrs	r3, IPSR
 800e694:	613b      	str	r3, [r7, #16]
  return(result);
 800e696:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d175      	bne.n	800e788 <osSemaphoreNew+0x108>
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d072      	beq.n	800e788 <osSemaphoreNew+0x108>
 800e6a2:	68ba      	ldr	r2, [r7, #8]
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	429a      	cmp	r2, r3
 800e6a8:	d86e      	bhi.n	800e788 <osSemaphoreNew+0x108>
    mem = -1;
 800e6aa:	f04f 33ff 	mov.w	r3, #4294967295
 800e6ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d015      	beq.n	800e6e2 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	689b      	ldr	r3, [r3, #8]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d006      	beq.n	800e6cc <osSemaphoreNew+0x4c>
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	68db      	ldr	r3, [r3, #12]
 800e6c2:	2b4f      	cmp	r3, #79	; 0x4f
 800e6c4:	d902      	bls.n	800e6cc <osSemaphoreNew+0x4c>
        mem = 1;
 800e6c6:	2301      	movs	r3, #1
 800e6c8:	61bb      	str	r3, [r7, #24]
 800e6ca:	e00c      	b.n	800e6e6 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	689b      	ldr	r3, [r3, #8]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d108      	bne.n	800e6e6 <osSemaphoreNew+0x66>
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	68db      	ldr	r3, [r3, #12]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d104      	bne.n	800e6e6 <osSemaphoreNew+0x66>
          mem = 0;
 800e6dc:	2300      	movs	r3, #0
 800e6de:	61bb      	str	r3, [r7, #24]
 800e6e0:	e001      	b.n	800e6e6 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800e6e6:	69bb      	ldr	r3, [r7, #24]
 800e6e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6ec:	d04c      	beq.n	800e788 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	2b01      	cmp	r3, #1
 800e6f2:	d128      	bne.n	800e746 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800e6f4:	69bb      	ldr	r3, [r7, #24]
 800e6f6:	2b01      	cmp	r3, #1
 800e6f8:	d10a      	bne.n	800e710 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	689b      	ldr	r3, [r3, #8]
 800e6fe:	2203      	movs	r2, #3
 800e700:	9200      	str	r2, [sp, #0]
 800e702:	2200      	movs	r2, #0
 800e704:	2100      	movs	r1, #0
 800e706:	2001      	movs	r0, #1
 800e708:	f000 fb80 	bl	800ee0c <xQueueGenericCreateStatic>
 800e70c:	61f8      	str	r0, [r7, #28]
 800e70e:	e005      	b.n	800e71c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800e710:	2203      	movs	r2, #3
 800e712:	2100      	movs	r1, #0
 800e714:	2001      	movs	r0, #1
 800e716:	f000 fbf1 	bl	800eefc <xQueueGenericCreate>
 800e71a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800e71c:	69fb      	ldr	r3, [r7, #28]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d022      	beq.n	800e768 <osSemaphoreNew+0xe8>
 800e722:	68bb      	ldr	r3, [r7, #8]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d01f      	beq.n	800e768 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e728:	2300      	movs	r3, #0
 800e72a:	2200      	movs	r2, #0
 800e72c:	2100      	movs	r1, #0
 800e72e:	69f8      	ldr	r0, [r7, #28]
 800e730:	f000 fd62 	bl	800f1f8 <xQueueGenericSend>
 800e734:	4603      	mov	r3, r0
 800e736:	2b01      	cmp	r3, #1
 800e738:	d016      	beq.n	800e768 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800e73a:	69f8      	ldr	r0, [r7, #28]
 800e73c:	f001 f9ee 	bl	800fb1c <vQueueDelete>
            hSemaphore = NULL;
 800e740:	2300      	movs	r3, #0
 800e742:	61fb      	str	r3, [r7, #28]
 800e744:	e010      	b.n	800e768 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800e746:	69bb      	ldr	r3, [r7, #24]
 800e748:	2b01      	cmp	r3, #1
 800e74a:	d108      	bne.n	800e75e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	689b      	ldr	r3, [r3, #8]
 800e750:	461a      	mov	r2, r3
 800e752:	68b9      	ldr	r1, [r7, #8]
 800e754:	68f8      	ldr	r0, [r7, #12]
 800e756:	f000 fce5 	bl	800f124 <xQueueCreateCountingSemaphoreStatic>
 800e75a:	61f8      	str	r0, [r7, #28]
 800e75c:	e004      	b.n	800e768 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800e75e:	68b9      	ldr	r1, [r7, #8]
 800e760:	68f8      	ldr	r0, [r7, #12]
 800e762:	f000 fd16 	bl	800f192 <xQueueCreateCountingSemaphore>
 800e766:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800e768:	69fb      	ldr	r3, [r7, #28]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d00c      	beq.n	800e788 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d003      	beq.n	800e77c <osSemaphoreNew+0xfc>
          name = attr->name;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	617b      	str	r3, [r7, #20]
 800e77a:	e001      	b.n	800e780 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800e77c:	2300      	movs	r3, #0
 800e77e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800e780:	6979      	ldr	r1, [r7, #20]
 800e782:	69f8      	ldr	r0, [r7, #28]
 800e784:	f001 fb16 	bl	800fdb4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800e788:	69fb      	ldr	r3, [r7, #28]
}
 800e78a:	4618      	mov	r0, r3
 800e78c:	3720      	adds	r7, #32
 800e78e:	46bd      	mov	sp, r7
 800e790:	bd80      	pop	{r7, pc}
	...

0800e794 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800e794:	b580      	push	{r7, lr}
 800e796:	b086      	sub	sp, #24
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
 800e79c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800e7a6:	693b      	ldr	r3, [r7, #16]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d103      	bne.n	800e7b4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800e7ac:	f06f 0303 	mvn.w	r3, #3
 800e7b0:	617b      	str	r3, [r7, #20]
 800e7b2:	e039      	b.n	800e828 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e7b4:	f3ef 8305 	mrs	r3, IPSR
 800e7b8:	60fb      	str	r3, [r7, #12]
  return(result);
 800e7ba:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d022      	beq.n	800e806 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d003      	beq.n	800e7ce <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800e7c6:	f06f 0303 	mvn.w	r3, #3
 800e7ca:	617b      	str	r3, [r7, #20]
 800e7cc:	e02c      	b.n	800e828 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800e7d2:	f107 0308 	add.w	r3, r7, #8
 800e7d6:	461a      	mov	r2, r3
 800e7d8:	2100      	movs	r1, #0
 800e7da:	6938      	ldr	r0, [r7, #16]
 800e7dc:	f001 f91e 	bl	800fa1c <xQueueReceiveFromISR>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	2b01      	cmp	r3, #1
 800e7e4:	d003      	beq.n	800e7ee <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800e7e6:	f06f 0302 	mvn.w	r3, #2
 800e7ea:	617b      	str	r3, [r7, #20]
 800e7ec:	e01c      	b.n	800e828 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800e7ee:	68bb      	ldr	r3, [r7, #8]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d019      	beq.n	800e828 <osSemaphoreAcquire+0x94>
 800e7f4:	4b0f      	ldr	r3, [pc, #60]	; (800e834 <osSemaphoreAcquire+0xa0>)
 800e7f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7fa:	601a      	str	r2, [r3, #0]
 800e7fc:	f3bf 8f4f 	dsb	sy
 800e800:	f3bf 8f6f 	isb	sy
 800e804:	e010      	b.n	800e828 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800e806:	6839      	ldr	r1, [r7, #0]
 800e808:	6938      	ldr	r0, [r7, #16]
 800e80a:	f000 fffb 	bl	800f804 <xQueueSemaphoreTake>
 800e80e:	4603      	mov	r3, r0
 800e810:	2b01      	cmp	r3, #1
 800e812:	d009      	beq.n	800e828 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800e814:	683b      	ldr	r3, [r7, #0]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d003      	beq.n	800e822 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800e81a:	f06f 0301 	mvn.w	r3, #1
 800e81e:	617b      	str	r3, [r7, #20]
 800e820:	e002      	b.n	800e828 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800e822:	f06f 0302 	mvn.w	r3, #2
 800e826:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800e828:	697b      	ldr	r3, [r7, #20]
}
 800e82a:	4618      	mov	r0, r3
 800e82c:	3718      	adds	r7, #24
 800e82e:	46bd      	mov	sp, r7
 800e830:	bd80      	pop	{r7, pc}
 800e832:	bf00      	nop
 800e834:	e000ed04 	.word	0xe000ed04

0800e838 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800e838:	b580      	push	{r7, lr}
 800e83a:	b086      	sub	sp, #24
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e844:	2300      	movs	r3, #0
 800e846:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800e848:	693b      	ldr	r3, [r7, #16]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d103      	bne.n	800e856 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800e84e:	f06f 0303 	mvn.w	r3, #3
 800e852:	617b      	str	r3, [r7, #20]
 800e854:	e02c      	b.n	800e8b0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e856:	f3ef 8305 	mrs	r3, IPSR
 800e85a:	60fb      	str	r3, [r7, #12]
  return(result);
 800e85c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d01a      	beq.n	800e898 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800e862:	2300      	movs	r3, #0
 800e864:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e866:	f107 0308 	add.w	r3, r7, #8
 800e86a:	4619      	mov	r1, r3
 800e86c:	6938      	ldr	r0, [r7, #16]
 800e86e:	f000 fe5c 	bl	800f52a <xQueueGiveFromISR>
 800e872:	4603      	mov	r3, r0
 800e874:	2b01      	cmp	r3, #1
 800e876:	d003      	beq.n	800e880 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800e878:	f06f 0302 	mvn.w	r3, #2
 800e87c:	617b      	str	r3, [r7, #20]
 800e87e:	e017      	b.n	800e8b0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d014      	beq.n	800e8b0 <osSemaphoreRelease+0x78>
 800e886:	4b0d      	ldr	r3, [pc, #52]	; (800e8bc <osSemaphoreRelease+0x84>)
 800e888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e88c:	601a      	str	r2, [r3, #0]
 800e88e:	f3bf 8f4f 	dsb	sy
 800e892:	f3bf 8f6f 	isb	sy
 800e896:	e00b      	b.n	800e8b0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e898:	2300      	movs	r3, #0
 800e89a:	2200      	movs	r2, #0
 800e89c:	2100      	movs	r1, #0
 800e89e:	6938      	ldr	r0, [r7, #16]
 800e8a0:	f000 fcaa 	bl	800f1f8 <xQueueGenericSend>
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	2b01      	cmp	r3, #1
 800e8a8:	d002      	beq.n	800e8b0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800e8aa:	f06f 0302 	mvn.w	r3, #2
 800e8ae:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800e8b0:	697b      	ldr	r3, [r7, #20]
}
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	3718      	adds	r7, #24
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}
 800e8ba:	bf00      	nop
 800e8bc:	e000ed04 	.word	0xe000ed04

0800e8c0 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b086      	sub	sp, #24
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e8cc:	f3ef 8305 	mrs	r3, IPSR
 800e8d0:	60fb      	str	r3, [r7, #12]
  return(result);
 800e8d2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d003      	beq.n	800e8e0 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800e8d8:	f06f 0305 	mvn.w	r3, #5
 800e8dc:	617b      	str	r3, [r7, #20]
 800e8de:	e00e      	b.n	800e8fe <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800e8e0:	693b      	ldr	r3, [r7, #16]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d103      	bne.n	800e8ee <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800e8e6:	f06f 0303 	mvn.w	r3, #3
 800e8ea:	617b      	str	r3, [r7, #20]
 800e8ec:	e007      	b.n	800e8fe <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800e8ee:	6938      	ldr	r0, [r7, #16]
 800e8f0:	f001 fa8a 	bl	800fe08 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800e8f8:	6938      	ldr	r0, [r7, #16]
 800e8fa:	f001 f90f 	bl	800fb1c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800e8fe:	697b      	ldr	r3, [r7, #20]
}
 800e900:	4618      	mov	r0, r3
 800e902:	3718      	adds	r7, #24
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}

0800e908 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800e908:	b580      	push	{r7, lr}
 800e90a:	b08a      	sub	sp, #40	; 0x28
 800e90c:	af02      	add	r7, sp, #8
 800e90e:	60f8      	str	r0, [r7, #12]
 800e910:	60b9      	str	r1, [r7, #8]
 800e912:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800e914:	2300      	movs	r3, #0
 800e916:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e918:	f3ef 8305 	mrs	r3, IPSR
 800e91c:	613b      	str	r3, [r7, #16]
  return(result);
 800e91e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e920:	2b00      	cmp	r3, #0
 800e922:	d15f      	bne.n	800e9e4 <osMessageQueueNew+0xdc>
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d05c      	beq.n	800e9e4 <osMessageQueueNew+0xdc>
 800e92a:	68bb      	ldr	r3, [r7, #8]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d059      	beq.n	800e9e4 <osMessageQueueNew+0xdc>
    mem = -1;
 800e930:	f04f 33ff 	mov.w	r3, #4294967295
 800e934:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d029      	beq.n	800e990 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	689b      	ldr	r3, [r3, #8]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d012      	beq.n	800e96a <osMessageQueueNew+0x62>
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	68db      	ldr	r3, [r3, #12]
 800e948:	2b4f      	cmp	r3, #79	; 0x4f
 800e94a:	d90e      	bls.n	800e96a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e950:	2b00      	cmp	r3, #0
 800e952:	d00a      	beq.n	800e96a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	695a      	ldr	r2, [r3, #20]
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	68b9      	ldr	r1, [r7, #8]
 800e95c:	fb01 f303 	mul.w	r3, r1, r3
 800e960:	429a      	cmp	r2, r3
 800e962:	d302      	bcc.n	800e96a <osMessageQueueNew+0x62>
        mem = 1;
 800e964:	2301      	movs	r3, #1
 800e966:	61bb      	str	r3, [r7, #24]
 800e968:	e014      	b.n	800e994 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	689b      	ldr	r3, [r3, #8]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d110      	bne.n	800e994 <osMessageQueueNew+0x8c>
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	68db      	ldr	r3, [r3, #12]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d10c      	bne.n	800e994 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d108      	bne.n	800e994 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	695b      	ldr	r3, [r3, #20]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d104      	bne.n	800e994 <osMessageQueueNew+0x8c>
          mem = 0;
 800e98a:	2300      	movs	r3, #0
 800e98c:	61bb      	str	r3, [r7, #24]
 800e98e:	e001      	b.n	800e994 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800e990:	2300      	movs	r3, #0
 800e992:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e994:	69bb      	ldr	r3, [r7, #24]
 800e996:	2b01      	cmp	r3, #1
 800e998:	d10b      	bne.n	800e9b2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	691a      	ldr	r2, [r3, #16]
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	689b      	ldr	r3, [r3, #8]
 800e9a2:	2100      	movs	r1, #0
 800e9a4:	9100      	str	r1, [sp, #0]
 800e9a6:	68b9      	ldr	r1, [r7, #8]
 800e9a8:	68f8      	ldr	r0, [r7, #12]
 800e9aa:	f000 fa2f 	bl	800ee0c <xQueueGenericCreateStatic>
 800e9ae:	61f8      	str	r0, [r7, #28]
 800e9b0:	e008      	b.n	800e9c4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800e9b2:	69bb      	ldr	r3, [r7, #24]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d105      	bne.n	800e9c4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	68b9      	ldr	r1, [r7, #8]
 800e9bc:	68f8      	ldr	r0, [r7, #12]
 800e9be:	f000 fa9d 	bl	800eefc <xQueueGenericCreate>
 800e9c2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800e9c4:	69fb      	ldr	r3, [r7, #28]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d00c      	beq.n	800e9e4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d003      	beq.n	800e9d8 <osMessageQueueNew+0xd0>
        name = attr->name;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	617b      	str	r3, [r7, #20]
 800e9d6:	e001      	b.n	800e9dc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800e9d8:	2300      	movs	r3, #0
 800e9da:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800e9dc:	6979      	ldr	r1, [r7, #20]
 800e9de:	69f8      	ldr	r0, [r7, #28]
 800e9e0:	f001 f9e8 	bl	800fdb4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800e9e4:	69fb      	ldr	r3, [r7, #28]
}
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	3720      	adds	r7, #32
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}
	...

0800e9f0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b088      	sub	sp, #32
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	60f8      	str	r0, [r7, #12]
 800e9f8:	60b9      	str	r1, [r7, #8]
 800e9fa:	603b      	str	r3, [r7, #0]
 800e9fc:	4613      	mov	r3, r2
 800e9fe:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ea04:	2300      	movs	r3, #0
 800ea06:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea08:	f3ef 8305 	mrs	r3, IPSR
 800ea0c:	617b      	str	r3, [r7, #20]
  return(result);
 800ea0e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d028      	beq.n	800ea66 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ea14:	69bb      	ldr	r3, [r7, #24]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d005      	beq.n	800ea26 <osMessageQueuePut+0x36>
 800ea1a:	68bb      	ldr	r3, [r7, #8]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d002      	beq.n	800ea26 <osMessageQueuePut+0x36>
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d003      	beq.n	800ea2e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800ea26:	f06f 0303 	mvn.w	r3, #3
 800ea2a:	61fb      	str	r3, [r7, #28]
 800ea2c:	e038      	b.n	800eaa0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800ea2e:	2300      	movs	r3, #0
 800ea30:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ea32:	f107 0210 	add.w	r2, r7, #16
 800ea36:	2300      	movs	r3, #0
 800ea38:	68b9      	ldr	r1, [r7, #8]
 800ea3a:	69b8      	ldr	r0, [r7, #24]
 800ea3c:	f000 fcda 	bl	800f3f4 <xQueueGenericSendFromISR>
 800ea40:	4603      	mov	r3, r0
 800ea42:	2b01      	cmp	r3, #1
 800ea44:	d003      	beq.n	800ea4e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800ea46:	f06f 0302 	mvn.w	r3, #2
 800ea4a:	61fb      	str	r3, [r7, #28]
 800ea4c:	e028      	b.n	800eaa0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800ea4e:	693b      	ldr	r3, [r7, #16]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d025      	beq.n	800eaa0 <osMessageQueuePut+0xb0>
 800ea54:	4b15      	ldr	r3, [pc, #84]	; (800eaac <osMessageQueuePut+0xbc>)
 800ea56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea5a:	601a      	str	r2, [r3, #0]
 800ea5c:	f3bf 8f4f 	dsb	sy
 800ea60:	f3bf 8f6f 	isb	sy
 800ea64:	e01c      	b.n	800eaa0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ea66:	69bb      	ldr	r3, [r7, #24]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d002      	beq.n	800ea72 <osMessageQueuePut+0x82>
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d103      	bne.n	800ea7a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800ea72:	f06f 0303 	mvn.w	r3, #3
 800ea76:	61fb      	str	r3, [r7, #28]
 800ea78:	e012      	b.n	800eaa0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	683a      	ldr	r2, [r7, #0]
 800ea7e:	68b9      	ldr	r1, [r7, #8]
 800ea80:	69b8      	ldr	r0, [r7, #24]
 800ea82:	f000 fbb9 	bl	800f1f8 <xQueueGenericSend>
 800ea86:	4603      	mov	r3, r0
 800ea88:	2b01      	cmp	r3, #1
 800ea8a:	d009      	beq.n	800eaa0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d003      	beq.n	800ea9a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800ea92:	f06f 0301 	mvn.w	r3, #1
 800ea96:	61fb      	str	r3, [r7, #28]
 800ea98:	e002      	b.n	800eaa0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800ea9a:	f06f 0302 	mvn.w	r3, #2
 800ea9e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800eaa0:	69fb      	ldr	r3, [r7, #28]
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	3720      	adds	r7, #32
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd80      	pop	{r7, pc}
 800eaaa:	bf00      	nop
 800eaac:	e000ed04 	.word	0xe000ed04

0800eab0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b088      	sub	sp, #32
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	60f8      	str	r0, [r7, #12]
 800eab8:	60b9      	str	r1, [r7, #8]
 800eaba:	607a      	str	r2, [r7, #4]
 800eabc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800eac2:	2300      	movs	r3, #0
 800eac4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eac6:	f3ef 8305 	mrs	r3, IPSR
 800eaca:	617b      	str	r3, [r7, #20]
  return(result);
 800eacc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d028      	beq.n	800eb24 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ead2:	69bb      	ldr	r3, [r7, #24]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d005      	beq.n	800eae4 <osMessageQueueGet+0x34>
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d002      	beq.n	800eae4 <osMessageQueueGet+0x34>
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d003      	beq.n	800eaec <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800eae4:	f06f 0303 	mvn.w	r3, #3
 800eae8:	61fb      	str	r3, [r7, #28]
 800eaea:	e037      	b.n	800eb5c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800eaec:	2300      	movs	r3, #0
 800eaee:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800eaf0:	f107 0310 	add.w	r3, r7, #16
 800eaf4:	461a      	mov	r2, r3
 800eaf6:	68b9      	ldr	r1, [r7, #8]
 800eaf8:	69b8      	ldr	r0, [r7, #24]
 800eafa:	f000 ff8f 	bl	800fa1c <xQueueReceiveFromISR>
 800eafe:	4603      	mov	r3, r0
 800eb00:	2b01      	cmp	r3, #1
 800eb02:	d003      	beq.n	800eb0c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800eb04:	f06f 0302 	mvn.w	r3, #2
 800eb08:	61fb      	str	r3, [r7, #28]
 800eb0a:	e027      	b.n	800eb5c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800eb0c:	693b      	ldr	r3, [r7, #16]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d024      	beq.n	800eb5c <osMessageQueueGet+0xac>
 800eb12:	4b15      	ldr	r3, [pc, #84]	; (800eb68 <osMessageQueueGet+0xb8>)
 800eb14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb18:	601a      	str	r2, [r3, #0]
 800eb1a:	f3bf 8f4f 	dsb	sy
 800eb1e:	f3bf 8f6f 	isb	sy
 800eb22:	e01b      	b.n	800eb5c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800eb24:	69bb      	ldr	r3, [r7, #24]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d002      	beq.n	800eb30 <osMessageQueueGet+0x80>
 800eb2a:	68bb      	ldr	r3, [r7, #8]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d103      	bne.n	800eb38 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800eb30:	f06f 0303 	mvn.w	r3, #3
 800eb34:	61fb      	str	r3, [r7, #28]
 800eb36:	e011      	b.n	800eb5c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800eb38:	683a      	ldr	r2, [r7, #0]
 800eb3a:	68b9      	ldr	r1, [r7, #8]
 800eb3c:	69b8      	ldr	r0, [r7, #24]
 800eb3e:	f000 fd81 	bl	800f644 <xQueueReceive>
 800eb42:	4603      	mov	r3, r0
 800eb44:	2b01      	cmp	r3, #1
 800eb46:	d009      	beq.n	800eb5c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d003      	beq.n	800eb56 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800eb4e:	f06f 0301 	mvn.w	r3, #1
 800eb52:	61fb      	str	r3, [r7, #28]
 800eb54:	e002      	b.n	800eb5c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800eb56:	f06f 0302 	mvn.w	r3, #2
 800eb5a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800eb5c:	69fb      	ldr	r3, [r7, #28]
}
 800eb5e:	4618      	mov	r0, r3
 800eb60:	3720      	adds	r7, #32
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}
 800eb66:	bf00      	nop
 800eb68:	e000ed04 	.word	0xe000ed04

0800eb6c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800eb6c:	b480      	push	{r7}
 800eb6e:	b085      	sub	sp, #20
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	60f8      	str	r0, [r7, #12]
 800eb74:	60b9      	str	r1, [r7, #8]
 800eb76:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	4a07      	ldr	r2, [pc, #28]	; (800eb98 <vApplicationGetIdleTaskMemory+0x2c>)
 800eb7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	4a06      	ldr	r2, [pc, #24]	; (800eb9c <vApplicationGetIdleTaskMemory+0x30>)
 800eb82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2280      	movs	r2, #128	; 0x80
 800eb88:	601a      	str	r2, [r3, #0]
}
 800eb8a:	bf00      	nop
 800eb8c:	3714      	adds	r7, #20
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb94:	4770      	bx	lr
 800eb96:	bf00      	nop
 800eb98:	200040e4 	.word	0x200040e4
 800eb9c:	20004140 	.word	0x20004140

0800eba0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800eba0:	b480      	push	{r7}
 800eba2:	b085      	sub	sp, #20
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	60f8      	str	r0, [r7, #12]
 800eba8:	60b9      	str	r1, [r7, #8]
 800ebaa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	4a07      	ldr	r2, [pc, #28]	; (800ebcc <vApplicationGetTimerTaskMemory+0x2c>)
 800ebb0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ebb2:	68bb      	ldr	r3, [r7, #8]
 800ebb4:	4a06      	ldr	r2, [pc, #24]	; (800ebd0 <vApplicationGetTimerTaskMemory+0x30>)
 800ebb6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ebbe:	601a      	str	r2, [r3, #0]
}
 800ebc0:	bf00      	nop
 800ebc2:	3714      	adds	r7, #20
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebca:	4770      	bx	lr
 800ebcc:	20004340 	.word	0x20004340
 800ebd0:	2000439c 	.word	0x2000439c

0800ebd4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ebd4:	b480      	push	{r7}
 800ebd6:	b083      	sub	sp, #12
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	f103 0208 	add.w	r2, r3, #8
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	f04f 32ff 	mov.w	r2, #4294967295
 800ebec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	f103 0208 	add.w	r2, r3, #8
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f103 0208 	add.w	r2, r3, #8
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	2200      	movs	r2, #0
 800ec06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ec08:	bf00      	nop
 800ec0a:	370c      	adds	r7, #12
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec12:	4770      	bx	lr

0800ec14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ec14:	b480      	push	{r7}
 800ec16:	b083      	sub	sp, #12
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	2200      	movs	r2, #0
 800ec20:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ec22:	bf00      	nop
 800ec24:	370c      	adds	r7, #12
 800ec26:	46bd      	mov	sp, r7
 800ec28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2c:	4770      	bx	lr

0800ec2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ec2e:	b480      	push	{r7}
 800ec30:	b085      	sub	sp, #20
 800ec32:	af00      	add	r7, sp, #0
 800ec34:	6078      	str	r0, [r7, #4]
 800ec36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	685b      	ldr	r3, [r3, #4]
 800ec3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	68fa      	ldr	r2, [r7, #12]
 800ec42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	689a      	ldr	r2, [r3, #8]
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	689b      	ldr	r3, [r3, #8]
 800ec50:	683a      	ldr	r2, [r7, #0]
 800ec52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	683a      	ldr	r2, [r7, #0]
 800ec58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	687a      	ldr	r2, [r7, #4]
 800ec5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	1c5a      	adds	r2, r3, #1
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	601a      	str	r2, [r3, #0]
}
 800ec6a:	bf00      	nop
 800ec6c:	3714      	adds	r7, #20
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec74:	4770      	bx	lr

0800ec76 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ec76:	b480      	push	{r7}
 800ec78:	b085      	sub	sp, #20
 800ec7a:	af00      	add	r7, sp, #0
 800ec7c:	6078      	str	r0, [r7, #4]
 800ec7e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ec80:	683b      	ldr	r3, [r7, #0]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ec86:	68bb      	ldr	r3, [r7, #8]
 800ec88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec8c:	d103      	bne.n	800ec96 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	691b      	ldr	r3, [r3, #16]
 800ec92:	60fb      	str	r3, [r7, #12]
 800ec94:	e00c      	b.n	800ecb0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	3308      	adds	r3, #8
 800ec9a:	60fb      	str	r3, [r7, #12]
 800ec9c:	e002      	b.n	800eca4 <vListInsert+0x2e>
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	685b      	ldr	r3, [r3, #4]
 800eca2:	60fb      	str	r3, [r7, #12]
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	685b      	ldr	r3, [r3, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	68ba      	ldr	r2, [r7, #8]
 800ecac:	429a      	cmp	r2, r3
 800ecae:	d2f6      	bcs.n	800ec9e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	685a      	ldr	r2, [r3, #4]
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	685b      	ldr	r3, [r3, #4]
 800ecbc:	683a      	ldr	r2, [r7, #0]
 800ecbe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	68fa      	ldr	r2, [r7, #12]
 800ecc4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	683a      	ldr	r2, [r7, #0]
 800ecca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	687a      	ldr	r2, [r7, #4]
 800ecd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	1c5a      	adds	r2, r3, #1
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	601a      	str	r2, [r3, #0]
}
 800ecdc:	bf00      	nop
 800ecde:	3714      	adds	r7, #20
 800ece0:	46bd      	mov	sp, r7
 800ece2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece6:	4770      	bx	lr

0800ece8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ece8:	b480      	push	{r7}
 800ecea:	b085      	sub	sp, #20
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	691b      	ldr	r3, [r3, #16]
 800ecf4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	685b      	ldr	r3, [r3, #4]
 800ecfa:	687a      	ldr	r2, [r7, #4]
 800ecfc:	6892      	ldr	r2, [r2, #8]
 800ecfe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	689b      	ldr	r3, [r3, #8]
 800ed04:	687a      	ldr	r2, [r7, #4]
 800ed06:	6852      	ldr	r2, [r2, #4]
 800ed08:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	685b      	ldr	r3, [r3, #4]
 800ed0e:	687a      	ldr	r2, [r7, #4]
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d103      	bne.n	800ed1c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	689a      	ldr	r2, [r3, #8]
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2200      	movs	r2, #0
 800ed20:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	1e5a      	subs	r2, r3, #1
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	681b      	ldr	r3, [r3, #0]
}
 800ed30:	4618      	mov	r0, r3
 800ed32:	3714      	adds	r7, #20
 800ed34:	46bd      	mov	sp, r7
 800ed36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3a:	4770      	bx	lr

0800ed3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b084      	sub	sp, #16
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
 800ed44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d10a      	bne.n	800ed66 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ed50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed54:	f383 8811 	msr	BASEPRI, r3
 800ed58:	f3bf 8f6f 	isb	sy
 800ed5c:	f3bf 8f4f 	dsb	sy
 800ed60:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ed62:	bf00      	nop
 800ed64:	e7fe      	b.n	800ed64 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ed66:	f002 fd45 	bl	80117f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	681a      	ldr	r2, [r3, #0]
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed72:	68f9      	ldr	r1, [r7, #12]
 800ed74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ed76:	fb01 f303 	mul.w	r3, r1, r3
 800ed7a:	441a      	add	r2, r3
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	2200      	movs	r2, #0
 800ed84:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	681a      	ldr	r2, [r3, #0]
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	681a      	ldr	r2, [r3, #0]
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed96:	3b01      	subs	r3, #1
 800ed98:	68f9      	ldr	r1, [r7, #12]
 800ed9a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ed9c:	fb01 f303 	mul.w	r3, r1, r3
 800eda0:	441a      	add	r2, r3
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	22ff      	movs	r2, #255	; 0xff
 800edaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	22ff      	movs	r2, #255	; 0xff
 800edb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d114      	bne.n	800ede6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	691b      	ldr	r3, [r3, #16]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d01a      	beq.n	800edfa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	3310      	adds	r3, #16
 800edc8:	4618      	mov	r0, r3
 800edca:	f001 fced 	bl	80107a8 <xTaskRemoveFromEventList>
 800edce:	4603      	mov	r3, r0
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d012      	beq.n	800edfa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800edd4:	4b0c      	ldr	r3, [pc, #48]	; (800ee08 <xQueueGenericReset+0xcc>)
 800edd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edda:	601a      	str	r2, [r3, #0]
 800eddc:	f3bf 8f4f 	dsb	sy
 800ede0:	f3bf 8f6f 	isb	sy
 800ede4:	e009      	b.n	800edfa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	3310      	adds	r3, #16
 800edea:	4618      	mov	r0, r3
 800edec:	f7ff fef2 	bl	800ebd4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	3324      	adds	r3, #36	; 0x24
 800edf4:	4618      	mov	r0, r3
 800edf6:	f7ff feed 	bl	800ebd4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800edfa:	f002 fd2b 	bl	8011854 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800edfe:	2301      	movs	r3, #1
}
 800ee00:	4618      	mov	r0, r3
 800ee02:	3710      	adds	r7, #16
 800ee04:	46bd      	mov	sp, r7
 800ee06:	bd80      	pop	{r7, pc}
 800ee08:	e000ed04 	.word	0xe000ed04

0800ee0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b08e      	sub	sp, #56	; 0x38
 800ee10:	af02      	add	r7, sp, #8
 800ee12:	60f8      	str	r0, [r7, #12]
 800ee14:	60b9      	str	r1, [r7, #8]
 800ee16:	607a      	str	r2, [r7, #4]
 800ee18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d10a      	bne.n	800ee36 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ee20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee24:	f383 8811 	msr	BASEPRI, r3
 800ee28:	f3bf 8f6f 	isb	sy
 800ee2c:	f3bf 8f4f 	dsb	sy
 800ee30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ee32:	bf00      	nop
 800ee34:	e7fe      	b.n	800ee34 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d10a      	bne.n	800ee52 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ee3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee40:	f383 8811 	msr	BASEPRI, r3
 800ee44:	f3bf 8f6f 	isb	sy
 800ee48:	f3bf 8f4f 	dsb	sy
 800ee4c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ee4e:	bf00      	nop
 800ee50:	e7fe      	b.n	800ee50 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d002      	beq.n	800ee5e <xQueueGenericCreateStatic+0x52>
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d001      	beq.n	800ee62 <xQueueGenericCreateStatic+0x56>
 800ee5e:	2301      	movs	r3, #1
 800ee60:	e000      	b.n	800ee64 <xQueueGenericCreateStatic+0x58>
 800ee62:	2300      	movs	r3, #0
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d10a      	bne.n	800ee7e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ee68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee6c:	f383 8811 	msr	BASEPRI, r3
 800ee70:	f3bf 8f6f 	isb	sy
 800ee74:	f3bf 8f4f 	dsb	sy
 800ee78:	623b      	str	r3, [r7, #32]
}
 800ee7a:	bf00      	nop
 800ee7c:	e7fe      	b.n	800ee7c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d102      	bne.n	800ee8a <xQueueGenericCreateStatic+0x7e>
 800ee84:	68bb      	ldr	r3, [r7, #8]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d101      	bne.n	800ee8e <xQueueGenericCreateStatic+0x82>
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	e000      	b.n	800ee90 <xQueueGenericCreateStatic+0x84>
 800ee8e:	2300      	movs	r3, #0
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d10a      	bne.n	800eeaa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ee94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee98:	f383 8811 	msr	BASEPRI, r3
 800ee9c:	f3bf 8f6f 	isb	sy
 800eea0:	f3bf 8f4f 	dsb	sy
 800eea4:	61fb      	str	r3, [r7, #28]
}
 800eea6:	bf00      	nop
 800eea8:	e7fe      	b.n	800eea8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800eeaa:	2350      	movs	r3, #80	; 0x50
 800eeac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800eeae:	697b      	ldr	r3, [r7, #20]
 800eeb0:	2b50      	cmp	r3, #80	; 0x50
 800eeb2:	d00a      	beq.n	800eeca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800eeb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeb8:	f383 8811 	msr	BASEPRI, r3
 800eebc:	f3bf 8f6f 	isb	sy
 800eec0:	f3bf 8f4f 	dsb	sy
 800eec4:	61bb      	str	r3, [r7, #24]
}
 800eec6:	bf00      	nop
 800eec8:	e7fe      	b.n	800eec8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800eeca:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800eecc:	683b      	ldr	r3, [r7, #0]
 800eece:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800eed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d00d      	beq.n	800eef2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800eed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eed8:	2201      	movs	r2, #1
 800eeda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800eede:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800eee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eee4:	9300      	str	r3, [sp, #0]
 800eee6:	4613      	mov	r3, r2
 800eee8:	687a      	ldr	r2, [r7, #4]
 800eeea:	68b9      	ldr	r1, [r7, #8]
 800eeec:	68f8      	ldr	r0, [r7, #12]
 800eeee:	f000 f83f 	bl	800ef70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800eef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800eef4:	4618      	mov	r0, r3
 800eef6:	3730      	adds	r7, #48	; 0x30
 800eef8:	46bd      	mov	sp, r7
 800eefa:	bd80      	pop	{r7, pc}

0800eefc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b08a      	sub	sp, #40	; 0x28
 800ef00:	af02      	add	r7, sp, #8
 800ef02:	60f8      	str	r0, [r7, #12]
 800ef04:	60b9      	str	r1, [r7, #8]
 800ef06:	4613      	mov	r3, r2
 800ef08:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d10a      	bne.n	800ef26 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ef10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef14:	f383 8811 	msr	BASEPRI, r3
 800ef18:	f3bf 8f6f 	isb	sy
 800ef1c:	f3bf 8f4f 	dsb	sy
 800ef20:	613b      	str	r3, [r7, #16]
}
 800ef22:	bf00      	nop
 800ef24:	e7fe      	b.n	800ef24 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	68ba      	ldr	r2, [r7, #8]
 800ef2a:	fb02 f303 	mul.w	r3, r2, r3
 800ef2e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ef30:	69fb      	ldr	r3, [r7, #28]
 800ef32:	3350      	adds	r3, #80	; 0x50
 800ef34:	4618      	mov	r0, r3
 800ef36:	f002 fd7f 	bl	8011a38 <pvPortMalloc>
 800ef3a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ef3c:	69bb      	ldr	r3, [r7, #24]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d011      	beq.n	800ef66 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ef42:	69bb      	ldr	r3, [r7, #24]
 800ef44:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ef46:	697b      	ldr	r3, [r7, #20]
 800ef48:	3350      	adds	r3, #80	; 0x50
 800ef4a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ef4c:	69bb      	ldr	r3, [r7, #24]
 800ef4e:	2200      	movs	r2, #0
 800ef50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ef54:	79fa      	ldrb	r2, [r7, #7]
 800ef56:	69bb      	ldr	r3, [r7, #24]
 800ef58:	9300      	str	r3, [sp, #0]
 800ef5a:	4613      	mov	r3, r2
 800ef5c:	697a      	ldr	r2, [r7, #20]
 800ef5e:	68b9      	ldr	r1, [r7, #8]
 800ef60:	68f8      	ldr	r0, [r7, #12]
 800ef62:	f000 f805 	bl	800ef70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ef66:	69bb      	ldr	r3, [r7, #24]
	}
 800ef68:	4618      	mov	r0, r3
 800ef6a:	3720      	adds	r7, #32
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}

0800ef70 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b084      	sub	sp, #16
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	60f8      	str	r0, [r7, #12]
 800ef78:	60b9      	str	r1, [r7, #8]
 800ef7a:	607a      	str	r2, [r7, #4]
 800ef7c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ef7e:	68bb      	ldr	r3, [r7, #8]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d103      	bne.n	800ef8c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ef84:	69bb      	ldr	r3, [r7, #24]
 800ef86:	69ba      	ldr	r2, [r7, #24]
 800ef88:	601a      	str	r2, [r3, #0]
 800ef8a:	e002      	b.n	800ef92 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ef8c:	69bb      	ldr	r3, [r7, #24]
 800ef8e:	687a      	ldr	r2, [r7, #4]
 800ef90:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ef92:	69bb      	ldr	r3, [r7, #24]
 800ef94:	68fa      	ldr	r2, [r7, #12]
 800ef96:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ef98:	69bb      	ldr	r3, [r7, #24]
 800ef9a:	68ba      	ldr	r2, [r7, #8]
 800ef9c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ef9e:	2101      	movs	r1, #1
 800efa0:	69b8      	ldr	r0, [r7, #24]
 800efa2:	f7ff fecb 	bl	800ed3c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800efa6:	69bb      	ldr	r3, [r7, #24]
 800efa8:	78fa      	ldrb	r2, [r7, #3]
 800efaa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800efae:	bf00      	nop
 800efb0:	3710      	adds	r7, #16
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}

0800efb6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800efb6:	b580      	push	{r7, lr}
 800efb8:	b082      	sub	sp, #8
 800efba:	af00      	add	r7, sp, #0
 800efbc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d00e      	beq.n	800efe2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2200      	movs	r2, #0
 800efc8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2200      	movs	r2, #0
 800efce:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2200      	movs	r2, #0
 800efd4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800efd6:	2300      	movs	r3, #0
 800efd8:	2200      	movs	r2, #0
 800efda:	2100      	movs	r1, #0
 800efdc:	6878      	ldr	r0, [r7, #4]
 800efde:	f000 f90b 	bl	800f1f8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800efe2:	bf00      	nop
 800efe4:	3708      	adds	r7, #8
 800efe6:	46bd      	mov	sp, r7
 800efe8:	bd80      	pop	{r7, pc}

0800efea <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800efea:	b580      	push	{r7, lr}
 800efec:	b086      	sub	sp, #24
 800efee:	af00      	add	r7, sp, #0
 800eff0:	4603      	mov	r3, r0
 800eff2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800eff4:	2301      	movs	r3, #1
 800eff6:	617b      	str	r3, [r7, #20]
 800eff8:	2300      	movs	r3, #0
 800effa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800effc:	79fb      	ldrb	r3, [r7, #7]
 800effe:	461a      	mov	r2, r3
 800f000:	6939      	ldr	r1, [r7, #16]
 800f002:	6978      	ldr	r0, [r7, #20]
 800f004:	f7ff ff7a 	bl	800eefc <xQueueGenericCreate>
 800f008:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f00a:	68f8      	ldr	r0, [r7, #12]
 800f00c:	f7ff ffd3 	bl	800efb6 <prvInitialiseMutex>

		return xNewQueue;
 800f010:	68fb      	ldr	r3, [r7, #12]
	}
 800f012:	4618      	mov	r0, r3
 800f014:	3718      	adds	r7, #24
 800f016:	46bd      	mov	sp, r7
 800f018:	bd80      	pop	{r7, pc}

0800f01a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800f01a:	b580      	push	{r7, lr}
 800f01c:	b088      	sub	sp, #32
 800f01e:	af02      	add	r7, sp, #8
 800f020:	4603      	mov	r3, r0
 800f022:	6039      	str	r1, [r7, #0]
 800f024:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f026:	2301      	movs	r3, #1
 800f028:	617b      	str	r3, [r7, #20]
 800f02a:	2300      	movs	r3, #0
 800f02c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800f02e:	79fb      	ldrb	r3, [r7, #7]
 800f030:	9300      	str	r3, [sp, #0]
 800f032:	683b      	ldr	r3, [r7, #0]
 800f034:	2200      	movs	r2, #0
 800f036:	6939      	ldr	r1, [r7, #16]
 800f038:	6978      	ldr	r0, [r7, #20]
 800f03a:	f7ff fee7 	bl	800ee0c <xQueueGenericCreateStatic>
 800f03e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f040:	68f8      	ldr	r0, [r7, #12]
 800f042:	f7ff ffb8 	bl	800efb6 <prvInitialiseMutex>

		return xNewQueue;
 800f046:	68fb      	ldr	r3, [r7, #12]
	}
 800f048:	4618      	mov	r0, r3
 800f04a:	3718      	adds	r7, #24
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd80      	pop	{r7, pc}

0800f050 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800f050:	b590      	push	{r4, r7, lr}
 800f052:	b087      	sub	sp, #28
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800f05c:	693b      	ldr	r3, [r7, #16]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d10a      	bne.n	800f078 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800f062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f066:	f383 8811 	msr	BASEPRI, r3
 800f06a:	f3bf 8f6f 	isb	sy
 800f06e:	f3bf 8f4f 	dsb	sy
 800f072:	60fb      	str	r3, [r7, #12]
}
 800f074:	bf00      	nop
 800f076:	e7fe      	b.n	800f076 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f078:	693b      	ldr	r3, [r7, #16]
 800f07a:	689c      	ldr	r4, [r3, #8]
 800f07c:	f001 fd52 	bl	8010b24 <xTaskGetCurrentTaskHandle>
 800f080:	4603      	mov	r3, r0
 800f082:	429c      	cmp	r4, r3
 800f084:	d111      	bne.n	800f0aa <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800f086:	693b      	ldr	r3, [r7, #16]
 800f088:	68db      	ldr	r3, [r3, #12]
 800f08a:	1e5a      	subs	r2, r3, #1
 800f08c:	693b      	ldr	r3, [r7, #16]
 800f08e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800f090:	693b      	ldr	r3, [r7, #16]
 800f092:	68db      	ldr	r3, [r3, #12]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d105      	bne.n	800f0a4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800f098:	2300      	movs	r3, #0
 800f09a:	2200      	movs	r2, #0
 800f09c:	2100      	movs	r1, #0
 800f09e:	6938      	ldr	r0, [r7, #16]
 800f0a0:	f000 f8aa 	bl	800f1f8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800f0a4:	2301      	movs	r3, #1
 800f0a6:	617b      	str	r3, [r7, #20]
 800f0a8:	e001      	b.n	800f0ae <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800f0ae:	697b      	ldr	r3, [r7, #20]
	}
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	371c      	adds	r7, #28
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	bd90      	pop	{r4, r7, pc}

0800f0b8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800f0b8:	b590      	push	{r4, r7, lr}
 800f0ba:	b087      	sub	sp, #28
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
 800f0c0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800f0c6:	693b      	ldr	r3, [r7, #16]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d10a      	bne.n	800f0e2 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800f0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0d0:	f383 8811 	msr	BASEPRI, r3
 800f0d4:	f3bf 8f6f 	isb	sy
 800f0d8:	f3bf 8f4f 	dsb	sy
 800f0dc:	60fb      	str	r3, [r7, #12]
}
 800f0de:	bf00      	nop
 800f0e0:	e7fe      	b.n	800f0e0 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f0e2:	693b      	ldr	r3, [r7, #16]
 800f0e4:	689c      	ldr	r4, [r3, #8]
 800f0e6:	f001 fd1d 	bl	8010b24 <xTaskGetCurrentTaskHandle>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	429c      	cmp	r4, r3
 800f0ee:	d107      	bne.n	800f100 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f0f0:	693b      	ldr	r3, [r7, #16]
 800f0f2:	68db      	ldr	r3, [r3, #12]
 800f0f4:	1c5a      	adds	r2, r3, #1
 800f0f6:	693b      	ldr	r3, [r7, #16]
 800f0f8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800f0fa:	2301      	movs	r3, #1
 800f0fc:	617b      	str	r3, [r7, #20]
 800f0fe:	e00c      	b.n	800f11a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800f100:	6839      	ldr	r1, [r7, #0]
 800f102:	6938      	ldr	r0, [r7, #16]
 800f104:	f000 fb7e 	bl	800f804 <xQueueSemaphoreTake>
 800f108:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800f10a:	697b      	ldr	r3, [r7, #20]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d004      	beq.n	800f11a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f110:	693b      	ldr	r3, [r7, #16]
 800f112:	68db      	ldr	r3, [r3, #12]
 800f114:	1c5a      	adds	r2, r3, #1
 800f116:	693b      	ldr	r3, [r7, #16]
 800f118:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800f11a:	697b      	ldr	r3, [r7, #20]
	}
 800f11c:	4618      	mov	r0, r3
 800f11e:	371c      	adds	r7, #28
 800f120:	46bd      	mov	sp, r7
 800f122:	bd90      	pop	{r4, r7, pc}

0800f124 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800f124:	b580      	push	{r7, lr}
 800f126:	b08a      	sub	sp, #40	; 0x28
 800f128:	af02      	add	r7, sp, #8
 800f12a:	60f8      	str	r0, [r7, #12]
 800f12c:	60b9      	str	r1, [r7, #8]
 800f12e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d10a      	bne.n	800f14c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800f136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f13a:	f383 8811 	msr	BASEPRI, r3
 800f13e:	f3bf 8f6f 	isb	sy
 800f142:	f3bf 8f4f 	dsb	sy
 800f146:	61bb      	str	r3, [r7, #24]
}
 800f148:	bf00      	nop
 800f14a:	e7fe      	b.n	800f14a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f14c:	68ba      	ldr	r2, [r7, #8]
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	429a      	cmp	r2, r3
 800f152:	d90a      	bls.n	800f16a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800f154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f158:	f383 8811 	msr	BASEPRI, r3
 800f15c:	f3bf 8f6f 	isb	sy
 800f160:	f3bf 8f4f 	dsb	sy
 800f164:	617b      	str	r3, [r7, #20]
}
 800f166:	bf00      	nop
 800f168:	e7fe      	b.n	800f168 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f16a:	2302      	movs	r3, #2
 800f16c:	9300      	str	r3, [sp, #0]
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	2200      	movs	r2, #0
 800f172:	2100      	movs	r1, #0
 800f174:	68f8      	ldr	r0, [r7, #12]
 800f176:	f7ff fe49 	bl	800ee0c <xQueueGenericCreateStatic>
 800f17a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800f17c:	69fb      	ldr	r3, [r7, #28]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d002      	beq.n	800f188 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f182:	69fb      	ldr	r3, [r7, #28]
 800f184:	68ba      	ldr	r2, [r7, #8]
 800f186:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f188:	69fb      	ldr	r3, [r7, #28]
	}
 800f18a:	4618      	mov	r0, r3
 800f18c:	3720      	adds	r7, #32
 800f18e:	46bd      	mov	sp, r7
 800f190:	bd80      	pop	{r7, pc}

0800f192 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800f192:	b580      	push	{r7, lr}
 800f194:	b086      	sub	sp, #24
 800f196:	af00      	add	r7, sp, #0
 800f198:	6078      	str	r0, [r7, #4]
 800f19a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d10a      	bne.n	800f1b8 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800f1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1a6:	f383 8811 	msr	BASEPRI, r3
 800f1aa:	f3bf 8f6f 	isb	sy
 800f1ae:	f3bf 8f4f 	dsb	sy
 800f1b2:	613b      	str	r3, [r7, #16]
}
 800f1b4:	bf00      	nop
 800f1b6:	e7fe      	b.n	800f1b6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f1b8:	683a      	ldr	r2, [r7, #0]
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	429a      	cmp	r2, r3
 800f1be:	d90a      	bls.n	800f1d6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800f1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1c4:	f383 8811 	msr	BASEPRI, r3
 800f1c8:	f3bf 8f6f 	isb	sy
 800f1cc:	f3bf 8f4f 	dsb	sy
 800f1d0:	60fb      	str	r3, [r7, #12]
}
 800f1d2:	bf00      	nop
 800f1d4:	e7fe      	b.n	800f1d4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f1d6:	2202      	movs	r2, #2
 800f1d8:	2100      	movs	r1, #0
 800f1da:	6878      	ldr	r0, [r7, #4]
 800f1dc:	f7ff fe8e 	bl	800eefc <xQueueGenericCreate>
 800f1e0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800f1e2:	697b      	ldr	r3, [r7, #20]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d002      	beq.n	800f1ee <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f1e8:	697b      	ldr	r3, [r7, #20]
 800f1ea:	683a      	ldr	r2, [r7, #0]
 800f1ec:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f1ee:	697b      	ldr	r3, [r7, #20]
	}
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	3718      	adds	r7, #24
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	bd80      	pop	{r7, pc}

0800f1f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b08e      	sub	sp, #56	; 0x38
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	60f8      	str	r0, [r7, #12]
 800f200:	60b9      	str	r1, [r7, #8]
 800f202:	607a      	str	r2, [r7, #4]
 800f204:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f206:	2300      	movs	r3, #0
 800f208:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f210:	2b00      	cmp	r3, #0
 800f212:	d10a      	bne.n	800f22a <xQueueGenericSend+0x32>
	__asm volatile
 800f214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f218:	f383 8811 	msr	BASEPRI, r3
 800f21c:	f3bf 8f6f 	isb	sy
 800f220:	f3bf 8f4f 	dsb	sy
 800f224:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f226:	bf00      	nop
 800f228:	e7fe      	b.n	800f228 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d103      	bne.n	800f238 <xQueueGenericSend+0x40>
 800f230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f234:	2b00      	cmp	r3, #0
 800f236:	d101      	bne.n	800f23c <xQueueGenericSend+0x44>
 800f238:	2301      	movs	r3, #1
 800f23a:	e000      	b.n	800f23e <xQueueGenericSend+0x46>
 800f23c:	2300      	movs	r3, #0
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d10a      	bne.n	800f258 <xQueueGenericSend+0x60>
	__asm volatile
 800f242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f246:	f383 8811 	msr	BASEPRI, r3
 800f24a:	f3bf 8f6f 	isb	sy
 800f24e:	f3bf 8f4f 	dsb	sy
 800f252:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f254:	bf00      	nop
 800f256:	e7fe      	b.n	800f256 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f258:	683b      	ldr	r3, [r7, #0]
 800f25a:	2b02      	cmp	r3, #2
 800f25c:	d103      	bne.n	800f266 <xQueueGenericSend+0x6e>
 800f25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f262:	2b01      	cmp	r3, #1
 800f264:	d101      	bne.n	800f26a <xQueueGenericSend+0x72>
 800f266:	2301      	movs	r3, #1
 800f268:	e000      	b.n	800f26c <xQueueGenericSend+0x74>
 800f26a:	2300      	movs	r3, #0
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d10a      	bne.n	800f286 <xQueueGenericSend+0x8e>
	__asm volatile
 800f270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f274:	f383 8811 	msr	BASEPRI, r3
 800f278:	f3bf 8f6f 	isb	sy
 800f27c:	f3bf 8f4f 	dsb	sy
 800f280:	623b      	str	r3, [r7, #32]
}
 800f282:	bf00      	nop
 800f284:	e7fe      	b.n	800f284 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f286:	f001 fc5d 	bl	8010b44 <xTaskGetSchedulerState>
 800f28a:	4603      	mov	r3, r0
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d102      	bne.n	800f296 <xQueueGenericSend+0x9e>
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d101      	bne.n	800f29a <xQueueGenericSend+0xa2>
 800f296:	2301      	movs	r3, #1
 800f298:	e000      	b.n	800f29c <xQueueGenericSend+0xa4>
 800f29a:	2300      	movs	r3, #0
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d10a      	bne.n	800f2b6 <xQueueGenericSend+0xbe>
	__asm volatile
 800f2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2a4:	f383 8811 	msr	BASEPRI, r3
 800f2a8:	f3bf 8f6f 	isb	sy
 800f2ac:	f3bf 8f4f 	dsb	sy
 800f2b0:	61fb      	str	r3, [r7, #28]
}
 800f2b2:	bf00      	nop
 800f2b4:	e7fe      	b.n	800f2b4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f2b6:	f002 fa9d 	bl	80117f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2c2:	429a      	cmp	r2, r3
 800f2c4:	d302      	bcc.n	800f2cc <xQueueGenericSend+0xd4>
 800f2c6:	683b      	ldr	r3, [r7, #0]
 800f2c8:	2b02      	cmp	r3, #2
 800f2ca:	d129      	bne.n	800f320 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f2cc:	683a      	ldr	r2, [r7, #0]
 800f2ce:	68b9      	ldr	r1, [r7, #8]
 800f2d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f2d2:	f000 fc5e 	bl	800fb92 <prvCopyDataToQueue>
 800f2d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d010      	beq.n	800f302 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2e2:	3324      	adds	r3, #36	; 0x24
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f001 fa5f 	bl	80107a8 <xTaskRemoveFromEventList>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d013      	beq.n	800f318 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f2f0:	4b3f      	ldr	r3, [pc, #252]	; (800f3f0 <xQueueGenericSend+0x1f8>)
 800f2f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2f6:	601a      	str	r2, [r3, #0]
 800f2f8:	f3bf 8f4f 	dsb	sy
 800f2fc:	f3bf 8f6f 	isb	sy
 800f300:	e00a      	b.n	800f318 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f304:	2b00      	cmp	r3, #0
 800f306:	d007      	beq.n	800f318 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f308:	4b39      	ldr	r3, [pc, #228]	; (800f3f0 <xQueueGenericSend+0x1f8>)
 800f30a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f30e:	601a      	str	r2, [r3, #0]
 800f310:	f3bf 8f4f 	dsb	sy
 800f314:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f318:	f002 fa9c 	bl	8011854 <vPortExitCritical>
				return pdPASS;
 800f31c:	2301      	movs	r3, #1
 800f31e:	e063      	b.n	800f3e8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d103      	bne.n	800f32e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f326:	f002 fa95 	bl	8011854 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f32a:	2300      	movs	r3, #0
 800f32c:	e05c      	b.n	800f3e8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f32e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f330:	2b00      	cmp	r3, #0
 800f332:	d106      	bne.n	800f342 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f334:	f107 0314 	add.w	r3, r7, #20
 800f338:	4618      	mov	r0, r3
 800f33a:	f001 fa99 	bl	8010870 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f33e:	2301      	movs	r3, #1
 800f340:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f342:	f002 fa87 	bl	8011854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f346:	f000 fff9 	bl	801033c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f34a:	f002 fa53 	bl	80117f4 <vPortEnterCritical>
 800f34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f350:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f354:	b25b      	sxtb	r3, r3
 800f356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f35a:	d103      	bne.n	800f364 <xQueueGenericSend+0x16c>
 800f35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f35e:	2200      	movs	r2, #0
 800f360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f366:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f36a:	b25b      	sxtb	r3, r3
 800f36c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f370:	d103      	bne.n	800f37a <xQueueGenericSend+0x182>
 800f372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f374:	2200      	movs	r2, #0
 800f376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f37a:	f002 fa6b 	bl	8011854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f37e:	1d3a      	adds	r2, r7, #4
 800f380:	f107 0314 	add.w	r3, r7, #20
 800f384:	4611      	mov	r1, r2
 800f386:	4618      	mov	r0, r3
 800f388:	f001 fa88 	bl	801089c <xTaskCheckForTimeOut>
 800f38c:	4603      	mov	r3, r0
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d124      	bne.n	800f3dc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f392:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f394:	f000 fcf5 	bl	800fd82 <prvIsQueueFull>
 800f398:	4603      	mov	r3, r0
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d018      	beq.n	800f3d0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3a0:	3310      	adds	r3, #16
 800f3a2:	687a      	ldr	r2, [r7, #4]
 800f3a4:	4611      	mov	r1, r2
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f001 f9ae 	bl	8010708 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f3ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f3ae:	f000 fc80 	bl	800fcb2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f3b2:	f000 ffd1 	bl	8010358 <xTaskResumeAll>
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	f47f af7c 	bne.w	800f2b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f3be:	4b0c      	ldr	r3, [pc, #48]	; (800f3f0 <xQueueGenericSend+0x1f8>)
 800f3c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3c4:	601a      	str	r2, [r3, #0]
 800f3c6:	f3bf 8f4f 	dsb	sy
 800f3ca:	f3bf 8f6f 	isb	sy
 800f3ce:	e772      	b.n	800f2b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f3d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f3d2:	f000 fc6e 	bl	800fcb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f3d6:	f000 ffbf 	bl	8010358 <xTaskResumeAll>
 800f3da:	e76c      	b.n	800f2b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f3dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f3de:	f000 fc68 	bl	800fcb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f3e2:	f000 ffb9 	bl	8010358 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f3e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	3738      	adds	r7, #56	; 0x38
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	bd80      	pop	{r7, pc}
 800f3f0:	e000ed04 	.word	0xe000ed04

0800f3f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b090      	sub	sp, #64	; 0x40
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	60f8      	str	r0, [r7, #12]
 800f3fc:	60b9      	str	r1, [r7, #8]
 800f3fe:	607a      	str	r2, [r7, #4]
 800f400:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800f406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d10a      	bne.n	800f422 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800f40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f410:	f383 8811 	msr	BASEPRI, r3
 800f414:	f3bf 8f6f 	isb	sy
 800f418:	f3bf 8f4f 	dsb	sy
 800f41c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f41e:	bf00      	nop
 800f420:	e7fe      	b.n	800f420 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f422:	68bb      	ldr	r3, [r7, #8]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d103      	bne.n	800f430 <xQueueGenericSendFromISR+0x3c>
 800f428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f42a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d101      	bne.n	800f434 <xQueueGenericSendFromISR+0x40>
 800f430:	2301      	movs	r3, #1
 800f432:	e000      	b.n	800f436 <xQueueGenericSendFromISR+0x42>
 800f434:	2300      	movs	r3, #0
 800f436:	2b00      	cmp	r3, #0
 800f438:	d10a      	bne.n	800f450 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800f43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f43e:	f383 8811 	msr	BASEPRI, r3
 800f442:	f3bf 8f6f 	isb	sy
 800f446:	f3bf 8f4f 	dsb	sy
 800f44a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f44c:	bf00      	nop
 800f44e:	e7fe      	b.n	800f44e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	2b02      	cmp	r3, #2
 800f454:	d103      	bne.n	800f45e <xQueueGenericSendFromISR+0x6a>
 800f456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f45a:	2b01      	cmp	r3, #1
 800f45c:	d101      	bne.n	800f462 <xQueueGenericSendFromISR+0x6e>
 800f45e:	2301      	movs	r3, #1
 800f460:	e000      	b.n	800f464 <xQueueGenericSendFromISR+0x70>
 800f462:	2300      	movs	r3, #0
 800f464:	2b00      	cmp	r3, #0
 800f466:	d10a      	bne.n	800f47e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800f468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f46c:	f383 8811 	msr	BASEPRI, r3
 800f470:	f3bf 8f6f 	isb	sy
 800f474:	f3bf 8f4f 	dsb	sy
 800f478:	623b      	str	r3, [r7, #32]
}
 800f47a:	bf00      	nop
 800f47c:	e7fe      	b.n	800f47c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f47e:	f002 fa9b 	bl	80119b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f482:	f3ef 8211 	mrs	r2, BASEPRI
 800f486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f48a:	f383 8811 	msr	BASEPRI, r3
 800f48e:	f3bf 8f6f 	isb	sy
 800f492:	f3bf 8f4f 	dsb	sy
 800f496:	61fa      	str	r2, [r7, #28]
 800f498:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f49a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f49c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4a6:	429a      	cmp	r2, r3
 800f4a8:	d302      	bcc.n	800f4b0 <xQueueGenericSendFromISR+0xbc>
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	2b02      	cmp	r3, #2
 800f4ae:	d12f      	bne.n	800f510 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f4b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4be:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f4c0:	683a      	ldr	r2, [r7, #0]
 800f4c2:	68b9      	ldr	r1, [r7, #8]
 800f4c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f4c6:	f000 fb64 	bl	800fb92 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f4ca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800f4ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4d2:	d112      	bne.n	800f4fa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d016      	beq.n	800f50a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4de:	3324      	adds	r3, #36	; 0x24
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	f001 f961 	bl	80107a8 <xTaskRemoveFromEventList>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d00e      	beq.n	800f50a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d00b      	beq.n	800f50a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	2201      	movs	r2, #1
 800f4f6:	601a      	str	r2, [r3, #0]
 800f4f8:	e007      	b.n	800f50a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f4fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f4fe:	3301      	adds	r3, #1
 800f500:	b2db      	uxtb	r3, r3
 800f502:	b25a      	sxtb	r2, r3
 800f504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f50a:	2301      	movs	r3, #1
 800f50c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800f50e:	e001      	b.n	800f514 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f510:	2300      	movs	r3, #0
 800f512:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f516:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f518:	697b      	ldr	r3, [r7, #20]
 800f51a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f51e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f522:	4618      	mov	r0, r3
 800f524:	3740      	adds	r7, #64	; 0x40
 800f526:	46bd      	mov	sp, r7
 800f528:	bd80      	pop	{r7, pc}

0800f52a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f52a:	b580      	push	{r7, lr}
 800f52c:	b08e      	sub	sp, #56	; 0x38
 800f52e:	af00      	add	r7, sp, #0
 800f530:	6078      	str	r0, [r7, #4]
 800f532:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800f538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d10a      	bne.n	800f554 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800f53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f542:	f383 8811 	msr	BASEPRI, r3
 800f546:	f3bf 8f6f 	isb	sy
 800f54a:	f3bf 8f4f 	dsb	sy
 800f54e:	623b      	str	r3, [r7, #32]
}
 800f550:	bf00      	nop
 800f552:	e7fe      	b.n	800f552 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d00a      	beq.n	800f572 <xQueueGiveFromISR+0x48>
	__asm volatile
 800f55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f560:	f383 8811 	msr	BASEPRI, r3
 800f564:	f3bf 8f6f 	isb	sy
 800f568:	f3bf 8f4f 	dsb	sy
 800f56c:	61fb      	str	r3, [r7, #28]
}
 800f56e:	bf00      	nop
 800f570:	e7fe      	b.n	800f570 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800f572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d103      	bne.n	800f582 <xQueueGiveFromISR+0x58>
 800f57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f57c:	689b      	ldr	r3, [r3, #8]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d101      	bne.n	800f586 <xQueueGiveFromISR+0x5c>
 800f582:	2301      	movs	r3, #1
 800f584:	e000      	b.n	800f588 <xQueueGiveFromISR+0x5e>
 800f586:	2300      	movs	r3, #0
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d10a      	bne.n	800f5a2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800f58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f590:	f383 8811 	msr	BASEPRI, r3
 800f594:	f3bf 8f6f 	isb	sy
 800f598:	f3bf 8f4f 	dsb	sy
 800f59c:	61bb      	str	r3, [r7, #24]
}
 800f59e:	bf00      	nop
 800f5a0:	e7fe      	b.n	800f5a0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f5a2:	f002 fa09 	bl	80119b8 <vPortValidateInterruptPriority>
	__asm volatile
 800f5a6:	f3ef 8211 	mrs	r2, BASEPRI
 800f5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ae:	f383 8811 	msr	BASEPRI, r3
 800f5b2:	f3bf 8f6f 	isb	sy
 800f5b6:	f3bf 8f4f 	dsb	sy
 800f5ba:	617a      	str	r2, [r7, #20]
 800f5bc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800f5be:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f5c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f5ce:	429a      	cmp	r2, r3
 800f5d0:	d22b      	bcs.n	800f62a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f5d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5de:	1c5a      	adds	r2, r3, #1
 800f5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5e2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f5e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f5e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5ec:	d112      	bne.n	800f614 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d016      	beq.n	800f624 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5f8:	3324      	adds	r3, #36	; 0x24
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f001 f8d4 	bl	80107a8 <xTaskRemoveFromEventList>
 800f600:	4603      	mov	r3, r0
 800f602:	2b00      	cmp	r3, #0
 800f604:	d00e      	beq.n	800f624 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d00b      	beq.n	800f624 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	2201      	movs	r2, #1
 800f610:	601a      	str	r2, [r3, #0]
 800f612:	e007      	b.n	800f624 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f618:	3301      	adds	r3, #1
 800f61a:	b2db      	uxtb	r3, r3
 800f61c:	b25a      	sxtb	r2, r3
 800f61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f624:	2301      	movs	r3, #1
 800f626:	637b      	str	r3, [r7, #52]	; 0x34
 800f628:	e001      	b.n	800f62e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f62a:	2300      	movs	r3, #0
 800f62c:	637b      	str	r3, [r7, #52]	; 0x34
 800f62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f630:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	f383 8811 	msr	BASEPRI, r3
}
 800f638:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f63a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f63c:	4618      	mov	r0, r3
 800f63e:	3738      	adds	r7, #56	; 0x38
 800f640:	46bd      	mov	sp, r7
 800f642:	bd80      	pop	{r7, pc}

0800f644 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b08c      	sub	sp, #48	; 0x30
 800f648:	af00      	add	r7, sp, #0
 800f64a:	60f8      	str	r0, [r7, #12]
 800f64c:	60b9      	str	r1, [r7, #8]
 800f64e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f650:	2300      	movs	r3, #0
 800f652:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d10a      	bne.n	800f674 <xQueueReceive+0x30>
	__asm volatile
 800f65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f662:	f383 8811 	msr	BASEPRI, r3
 800f666:	f3bf 8f6f 	isb	sy
 800f66a:	f3bf 8f4f 	dsb	sy
 800f66e:	623b      	str	r3, [r7, #32]
}
 800f670:	bf00      	nop
 800f672:	e7fe      	b.n	800f672 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d103      	bne.n	800f682 <xQueueReceive+0x3e>
 800f67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f67c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d101      	bne.n	800f686 <xQueueReceive+0x42>
 800f682:	2301      	movs	r3, #1
 800f684:	e000      	b.n	800f688 <xQueueReceive+0x44>
 800f686:	2300      	movs	r3, #0
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d10a      	bne.n	800f6a2 <xQueueReceive+0x5e>
	__asm volatile
 800f68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f690:	f383 8811 	msr	BASEPRI, r3
 800f694:	f3bf 8f6f 	isb	sy
 800f698:	f3bf 8f4f 	dsb	sy
 800f69c:	61fb      	str	r3, [r7, #28]
}
 800f69e:	bf00      	nop
 800f6a0:	e7fe      	b.n	800f6a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f6a2:	f001 fa4f 	bl	8010b44 <xTaskGetSchedulerState>
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d102      	bne.n	800f6b2 <xQueueReceive+0x6e>
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d101      	bne.n	800f6b6 <xQueueReceive+0x72>
 800f6b2:	2301      	movs	r3, #1
 800f6b4:	e000      	b.n	800f6b8 <xQueueReceive+0x74>
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d10a      	bne.n	800f6d2 <xQueueReceive+0x8e>
	__asm volatile
 800f6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6c0:	f383 8811 	msr	BASEPRI, r3
 800f6c4:	f3bf 8f6f 	isb	sy
 800f6c8:	f3bf 8f4f 	dsb	sy
 800f6cc:	61bb      	str	r3, [r7, #24]
}
 800f6ce:	bf00      	nop
 800f6d0:	e7fe      	b.n	800f6d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f6d2:	f002 f88f 	bl	80117f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d01f      	beq.n	800f722 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f6e2:	68b9      	ldr	r1, [r7, #8]
 800f6e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f6e6:	f000 fabe 	bl	800fc66 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ec:	1e5a      	subs	r2, r3, #1
 800f6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6f4:	691b      	ldr	r3, [r3, #16]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d00f      	beq.n	800f71a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6fc:	3310      	adds	r3, #16
 800f6fe:	4618      	mov	r0, r3
 800f700:	f001 f852 	bl	80107a8 <xTaskRemoveFromEventList>
 800f704:	4603      	mov	r3, r0
 800f706:	2b00      	cmp	r3, #0
 800f708:	d007      	beq.n	800f71a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f70a:	4b3d      	ldr	r3, [pc, #244]	; (800f800 <xQueueReceive+0x1bc>)
 800f70c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f710:	601a      	str	r2, [r3, #0]
 800f712:	f3bf 8f4f 	dsb	sy
 800f716:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f71a:	f002 f89b 	bl	8011854 <vPortExitCritical>
				return pdPASS;
 800f71e:	2301      	movs	r3, #1
 800f720:	e069      	b.n	800f7f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d103      	bne.n	800f730 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f728:	f002 f894 	bl	8011854 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f72c:	2300      	movs	r3, #0
 800f72e:	e062      	b.n	800f7f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f732:	2b00      	cmp	r3, #0
 800f734:	d106      	bne.n	800f744 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f736:	f107 0310 	add.w	r3, r7, #16
 800f73a:	4618      	mov	r0, r3
 800f73c:	f001 f898 	bl	8010870 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f740:	2301      	movs	r3, #1
 800f742:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f744:	f002 f886 	bl	8011854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f748:	f000 fdf8 	bl	801033c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f74c:	f002 f852 	bl	80117f4 <vPortEnterCritical>
 800f750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f752:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f756:	b25b      	sxtb	r3, r3
 800f758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f75c:	d103      	bne.n	800f766 <xQueueReceive+0x122>
 800f75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f760:	2200      	movs	r2, #0
 800f762:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f768:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f76c:	b25b      	sxtb	r3, r3
 800f76e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f772:	d103      	bne.n	800f77c <xQueueReceive+0x138>
 800f774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f776:	2200      	movs	r2, #0
 800f778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f77c:	f002 f86a 	bl	8011854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f780:	1d3a      	adds	r2, r7, #4
 800f782:	f107 0310 	add.w	r3, r7, #16
 800f786:	4611      	mov	r1, r2
 800f788:	4618      	mov	r0, r3
 800f78a:	f001 f887 	bl	801089c <xTaskCheckForTimeOut>
 800f78e:	4603      	mov	r3, r0
 800f790:	2b00      	cmp	r3, #0
 800f792:	d123      	bne.n	800f7dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f794:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f796:	f000 fade 	bl	800fd56 <prvIsQueueEmpty>
 800f79a:	4603      	mov	r3, r0
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d017      	beq.n	800f7d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7a2:	3324      	adds	r3, #36	; 0x24
 800f7a4:	687a      	ldr	r2, [r7, #4]
 800f7a6:	4611      	mov	r1, r2
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	f000 ffad 	bl	8010708 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f7ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f7b0:	f000 fa7f 	bl	800fcb2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f7b4:	f000 fdd0 	bl	8010358 <xTaskResumeAll>
 800f7b8:	4603      	mov	r3, r0
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d189      	bne.n	800f6d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f7be:	4b10      	ldr	r3, [pc, #64]	; (800f800 <xQueueReceive+0x1bc>)
 800f7c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7c4:	601a      	str	r2, [r3, #0]
 800f7c6:	f3bf 8f4f 	dsb	sy
 800f7ca:	f3bf 8f6f 	isb	sy
 800f7ce:	e780      	b.n	800f6d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f7d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f7d2:	f000 fa6e 	bl	800fcb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f7d6:	f000 fdbf 	bl	8010358 <xTaskResumeAll>
 800f7da:	e77a      	b.n	800f6d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f7dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f7de:	f000 fa68 	bl	800fcb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f7e2:	f000 fdb9 	bl	8010358 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f7e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f7e8:	f000 fab5 	bl	800fd56 <prvIsQueueEmpty>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	f43f af6f 	beq.w	800f6d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f7f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	3730      	adds	r7, #48	; 0x30
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bd80      	pop	{r7, pc}
 800f7fe:	bf00      	nop
 800f800:	e000ed04 	.word	0xe000ed04

0800f804 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f804:	b580      	push	{r7, lr}
 800f806:	b08e      	sub	sp, #56	; 0x38
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
 800f80c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f80e:	2300      	movs	r3, #0
 800f810:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f816:	2300      	movs	r3, #0
 800f818:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d10a      	bne.n	800f836 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800f820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f824:	f383 8811 	msr	BASEPRI, r3
 800f828:	f3bf 8f6f 	isb	sy
 800f82c:	f3bf 8f4f 	dsb	sy
 800f830:	623b      	str	r3, [r7, #32]
}
 800f832:	bf00      	nop
 800f834:	e7fe      	b.n	800f834 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d00a      	beq.n	800f854 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800f83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f842:	f383 8811 	msr	BASEPRI, r3
 800f846:	f3bf 8f6f 	isb	sy
 800f84a:	f3bf 8f4f 	dsb	sy
 800f84e:	61fb      	str	r3, [r7, #28]
}
 800f850:	bf00      	nop
 800f852:	e7fe      	b.n	800f852 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f854:	f001 f976 	bl	8010b44 <xTaskGetSchedulerState>
 800f858:	4603      	mov	r3, r0
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d102      	bne.n	800f864 <xQueueSemaphoreTake+0x60>
 800f85e:	683b      	ldr	r3, [r7, #0]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d101      	bne.n	800f868 <xQueueSemaphoreTake+0x64>
 800f864:	2301      	movs	r3, #1
 800f866:	e000      	b.n	800f86a <xQueueSemaphoreTake+0x66>
 800f868:	2300      	movs	r3, #0
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d10a      	bne.n	800f884 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800f86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f872:	f383 8811 	msr	BASEPRI, r3
 800f876:	f3bf 8f6f 	isb	sy
 800f87a:	f3bf 8f4f 	dsb	sy
 800f87e:	61bb      	str	r3, [r7, #24]
}
 800f880:	bf00      	nop
 800f882:	e7fe      	b.n	800f882 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f884:	f001 ffb6 	bl	80117f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f88a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f88c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f890:	2b00      	cmp	r3, #0
 800f892:	d024      	beq.n	800f8de <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f896:	1e5a      	subs	r2, r3, #1
 800f898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f89a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d104      	bne.n	800f8ae <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f8a4:	f001 fac4 	bl	8010e30 <pvTaskIncrementMutexHeldCount>
 800f8a8:	4602      	mov	r2, r0
 800f8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ac:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8b0:	691b      	ldr	r3, [r3, #16]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d00f      	beq.n	800f8d6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8b8:	3310      	adds	r3, #16
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f000 ff74 	bl	80107a8 <xTaskRemoveFromEventList>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d007      	beq.n	800f8d6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f8c6:	4b54      	ldr	r3, [pc, #336]	; (800fa18 <xQueueSemaphoreTake+0x214>)
 800f8c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8cc:	601a      	str	r2, [r3, #0]
 800f8ce:	f3bf 8f4f 	dsb	sy
 800f8d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f8d6:	f001 ffbd 	bl	8011854 <vPortExitCritical>
				return pdPASS;
 800f8da:	2301      	movs	r3, #1
 800f8dc:	e097      	b.n	800fa0e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d111      	bne.n	800f908 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d00a      	beq.n	800f900 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800f8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8ee:	f383 8811 	msr	BASEPRI, r3
 800f8f2:	f3bf 8f6f 	isb	sy
 800f8f6:	f3bf 8f4f 	dsb	sy
 800f8fa:	617b      	str	r3, [r7, #20]
}
 800f8fc:	bf00      	nop
 800f8fe:	e7fe      	b.n	800f8fe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f900:	f001 ffa8 	bl	8011854 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f904:	2300      	movs	r3, #0
 800f906:	e082      	b.n	800fa0e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d106      	bne.n	800f91c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f90e:	f107 030c 	add.w	r3, r7, #12
 800f912:	4618      	mov	r0, r3
 800f914:	f000 ffac 	bl	8010870 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f918:	2301      	movs	r3, #1
 800f91a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f91c:	f001 ff9a 	bl	8011854 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f920:	f000 fd0c 	bl	801033c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f924:	f001 ff66 	bl	80117f4 <vPortEnterCritical>
 800f928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f92a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f92e:	b25b      	sxtb	r3, r3
 800f930:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f934:	d103      	bne.n	800f93e <xQueueSemaphoreTake+0x13a>
 800f936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f938:	2200      	movs	r2, #0
 800f93a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f940:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f944:	b25b      	sxtb	r3, r3
 800f946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f94a:	d103      	bne.n	800f954 <xQueueSemaphoreTake+0x150>
 800f94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f94e:	2200      	movs	r2, #0
 800f950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f954:	f001 ff7e 	bl	8011854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f958:	463a      	mov	r2, r7
 800f95a:	f107 030c 	add.w	r3, r7, #12
 800f95e:	4611      	mov	r1, r2
 800f960:	4618      	mov	r0, r3
 800f962:	f000 ff9b 	bl	801089c <xTaskCheckForTimeOut>
 800f966:	4603      	mov	r3, r0
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d132      	bne.n	800f9d2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f96c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f96e:	f000 f9f2 	bl	800fd56 <prvIsQueueEmpty>
 800f972:	4603      	mov	r3, r0
 800f974:	2b00      	cmp	r3, #0
 800f976:	d026      	beq.n	800f9c6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d109      	bne.n	800f994 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800f980:	f001 ff38 	bl	80117f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f986:	689b      	ldr	r3, [r3, #8]
 800f988:	4618      	mov	r0, r3
 800f98a:	f001 f8f9 	bl	8010b80 <xTaskPriorityInherit>
 800f98e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f990:	f001 ff60 	bl	8011854 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f996:	3324      	adds	r3, #36	; 0x24
 800f998:	683a      	ldr	r2, [r7, #0]
 800f99a:	4611      	mov	r1, r2
 800f99c:	4618      	mov	r0, r3
 800f99e:	f000 feb3 	bl	8010708 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f9a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9a4:	f000 f985 	bl	800fcb2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f9a8:	f000 fcd6 	bl	8010358 <xTaskResumeAll>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	f47f af68 	bne.w	800f884 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800f9b4:	4b18      	ldr	r3, [pc, #96]	; (800fa18 <xQueueSemaphoreTake+0x214>)
 800f9b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9ba:	601a      	str	r2, [r3, #0]
 800f9bc:	f3bf 8f4f 	dsb	sy
 800f9c0:	f3bf 8f6f 	isb	sy
 800f9c4:	e75e      	b.n	800f884 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f9c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9c8:	f000 f973 	bl	800fcb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f9cc:	f000 fcc4 	bl	8010358 <xTaskResumeAll>
 800f9d0:	e758      	b.n	800f884 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f9d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9d4:	f000 f96d 	bl	800fcb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f9d8:	f000 fcbe 	bl	8010358 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f9dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9de:	f000 f9ba 	bl	800fd56 <prvIsQueueEmpty>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	f43f af4d 	beq.w	800f884 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d00d      	beq.n	800fa0c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800f9f0:	f001 ff00 	bl	80117f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f9f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9f6:	f000 f8b4 	bl	800fb62 <prvGetDisinheritPriorityAfterTimeout>
 800f9fa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9fe:	689b      	ldr	r3, [r3, #8]
 800fa00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fa02:	4618      	mov	r0, r3
 800fa04:	f001 f992 	bl	8010d2c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800fa08:	f001 ff24 	bl	8011854 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fa0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	3738      	adds	r7, #56	; 0x38
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}
 800fa16:	bf00      	nop
 800fa18:	e000ed04 	.word	0xe000ed04

0800fa1c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b08e      	sub	sp, #56	; 0x38
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	60f8      	str	r0, [r7, #12]
 800fa24:	60b9      	str	r1, [r7, #8]
 800fa26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fa2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d10a      	bne.n	800fa48 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800fa32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa36:	f383 8811 	msr	BASEPRI, r3
 800fa3a:	f3bf 8f6f 	isb	sy
 800fa3e:	f3bf 8f4f 	dsb	sy
 800fa42:	623b      	str	r3, [r7, #32]
}
 800fa44:	bf00      	nop
 800fa46:	e7fe      	b.n	800fa46 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d103      	bne.n	800fa56 <xQueueReceiveFromISR+0x3a>
 800fa4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d101      	bne.n	800fa5a <xQueueReceiveFromISR+0x3e>
 800fa56:	2301      	movs	r3, #1
 800fa58:	e000      	b.n	800fa5c <xQueueReceiveFromISR+0x40>
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d10a      	bne.n	800fa76 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800fa60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa64:	f383 8811 	msr	BASEPRI, r3
 800fa68:	f3bf 8f6f 	isb	sy
 800fa6c:	f3bf 8f4f 	dsb	sy
 800fa70:	61fb      	str	r3, [r7, #28]
}
 800fa72:	bf00      	nop
 800fa74:	e7fe      	b.n	800fa74 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fa76:	f001 ff9f 	bl	80119b8 <vPortValidateInterruptPriority>
	__asm volatile
 800fa7a:	f3ef 8211 	mrs	r2, BASEPRI
 800fa7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa82:	f383 8811 	msr	BASEPRI, r3
 800fa86:	f3bf 8f6f 	isb	sy
 800fa8a:	f3bf 8f4f 	dsb	sy
 800fa8e:	61ba      	str	r2, [r7, #24]
 800fa90:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800fa92:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fa94:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fa96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa9a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fa9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d02f      	beq.n	800fb02 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800faa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800faa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800faac:	68b9      	ldr	r1, [r7, #8]
 800faae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fab0:	f000 f8d9 	bl	800fc66 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fab6:	1e5a      	subs	r2, r3, #1
 800fab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800fabc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fac4:	d112      	bne.n	800faec <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fac8:	691b      	ldr	r3, [r3, #16]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d016      	beq.n	800fafc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800face:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fad0:	3310      	adds	r3, #16
 800fad2:	4618      	mov	r0, r3
 800fad4:	f000 fe68 	bl	80107a8 <xTaskRemoveFromEventList>
 800fad8:	4603      	mov	r3, r0
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d00e      	beq.n	800fafc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d00b      	beq.n	800fafc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2201      	movs	r2, #1
 800fae8:	601a      	str	r2, [r3, #0]
 800faea:	e007      	b.n	800fafc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800faec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800faf0:	3301      	adds	r3, #1
 800faf2:	b2db      	uxtb	r3, r3
 800faf4:	b25a      	sxtb	r2, r3
 800faf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800fafc:	2301      	movs	r3, #1
 800fafe:	637b      	str	r3, [r7, #52]	; 0x34
 800fb00:	e001      	b.n	800fb06 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800fb02:	2300      	movs	r3, #0
 800fb04:	637b      	str	r3, [r7, #52]	; 0x34
 800fb06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb08:	613b      	str	r3, [r7, #16]
	__asm volatile
 800fb0a:	693b      	ldr	r3, [r7, #16]
 800fb0c:	f383 8811 	msr	BASEPRI, r3
}
 800fb10:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fb12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fb14:	4618      	mov	r0, r3
 800fb16:	3738      	adds	r7, #56	; 0x38
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	bd80      	pop	{r7, pc}

0800fb1c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b084      	sub	sp, #16
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d10a      	bne.n	800fb44 <vQueueDelete+0x28>
	__asm volatile
 800fb2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb32:	f383 8811 	msr	BASEPRI, r3
 800fb36:	f3bf 8f6f 	isb	sy
 800fb3a:	f3bf 8f4f 	dsb	sy
 800fb3e:	60bb      	str	r3, [r7, #8]
}
 800fb40:	bf00      	nop
 800fb42:	e7fe      	b.n	800fb42 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800fb44:	68f8      	ldr	r0, [r7, #12]
 800fb46:	f000 f95f 	bl	800fe08 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d102      	bne.n	800fb5a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800fb54:	68f8      	ldr	r0, [r7, #12]
 800fb56:	f002 f83b 	bl	8011bd0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800fb5a:	bf00      	nop
 800fb5c:	3710      	adds	r7, #16
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	bd80      	pop	{r7, pc}

0800fb62 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800fb62:	b480      	push	{r7}
 800fb64:	b085      	sub	sp, #20
 800fb66:	af00      	add	r7, sp, #0
 800fb68:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d006      	beq.n	800fb80 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800fb7c:	60fb      	str	r3, [r7, #12]
 800fb7e:	e001      	b.n	800fb84 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800fb80:	2300      	movs	r3, #0
 800fb82:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800fb84:	68fb      	ldr	r3, [r7, #12]
	}
 800fb86:	4618      	mov	r0, r3
 800fb88:	3714      	adds	r7, #20
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb90:	4770      	bx	lr

0800fb92 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fb92:	b580      	push	{r7, lr}
 800fb94:	b086      	sub	sp, #24
 800fb96:	af00      	add	r7, sp, #0
 800fb98:	60f8      	str	r0, [r7, #12]
 800fb9a:	60b9      	str	r1, [r7, #8]
 800fb9c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fb9e:	2300      	movs	r3, #0
 800fba0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fba6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d10d      	bne.n	800fbcc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d14d      	bne.n	800fc54 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	689b      	ldr	r3, [r3, #8]
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	f001 f847 	bl	8010c50 <xTaskPriorityDisinherit>
 800fbc2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	609a      	str	r2, [r3, #8]
 800fbca:	e043      	b.n	800fc54 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d119      	bne.n	800fc06 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	6858      	ldr	r0, [r3, #4]
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbda:	461a      	mov	r2, r3
 800fbdc:	68b9      	ldr	r1, [r7, #8]
 800fbde:	f00e fb4b 	bl	801e278 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	685a      	ldr	r2, [r3, #4]
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbea:	441a      	add	r2, r3
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	685a      	ldr	r2, [r3, #4]
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	689b      	ldr	r3, [r3, #8]
 800fbf8:	429a      	cmp	r2, r3
 800fbfa:	d32b      	bcc.n	800fc54 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	681a      	ldr	r2, [r3, #0]
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	605a      	str	r2, [r3, #4]
 800fc04:	e026      	b.n	800fc54 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	68d8      	ldr	r0, [r3, #12]
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc0e:	461a      	mov	r2, r3
 800fc10:	68b9      	ldr	r1, [r7, #8]
 800fc12:	f00e fb31 	bl	801e278 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	68da      	ldr	r2, [r3, #12]
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc1e:	425b      	negs	r3, r3
 800fc20:	441a      	add	r2, r3
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	68da      	ldr	r2, [r3, #12]
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	429a      	cmp	r2, r3
 800fc30:	d207      	bcs.n	800fc42 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	689a      	ldr	r2, [r3, #8]
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc3a:	425b      	negs	r3, r3
 800fc3c:	441a      	add	r2, r3
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	2b02      	cmp	r3, #2
 800fc46:	d105      	bne.n	800fc54 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fc48:	693b      	ldr	r3, [r7, #16]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d002      	beq.n	800fc54 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800fc4e:	693b      	ldr	r3, [r7, #16]
 800fc50:	3b01      	subs	r3, #1
 800fc52:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fc54:	693b      	ldr	r3, [r7, #16]
 800fc56:	1c5a      	adds	r2, r3, #1
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800fc5c:	697b      	ldr	r3, [r7, #20]
}
 800fc5e:	4618      	mov	r0, r3
 800fc60:	3718      	adds	r7, #24
 800fc62:	46bd      	mov	sp, r7
 800fc64:	bd80      	pop	{r7, pc}

0800fc66 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800fc66:	b580      	push	{r7, lr}
 800fc68:	b082      	sub	sp, #8
 800fc6a:	af00      	add	r7, sp, #0
 800fc6c:	6078      	str	r0, [r7, #4]
 800fc6e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d018      	beq.n	800fcaa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	68da      	ldr	r2, [r3, #12]
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc80:	441a      	add	r2, r3
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	68da      	ldr	r2, [r3, #12]
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	689b      	ldr	r3, [r3, #8]
 800fc8e:	429a      	cmp	r2, r3
 800fc90:	d303      	bcc.n	800fc9a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	681a      	ldr	r2, [r3, #0]
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	68d9      	ldr	r1, [r3, #12]
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fca2:	461a      	mov	r2, r3
 800fca4:	6838      	ldr	r0, [r7, #0]
 800fca6:	f00e fae7 	bl	801e278 <memcpy>
	}
}
 800fcaa:	bf00      	nop
 800fcac:	3708      	adds	r7, #8
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	bd80      	pop	{r7, pc}

0800fcb2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fcb2:	b580      	push	{r7, lr}
 800fcb4:	b084      	sub	sp, #16
 800fcb6:	af00      	add	r7, sp, #0
 800fcb8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800fcba:	f001 fd9b 	bl	80117f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fcc4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fcc6:	e011      	b.n	800fcec <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d012      	beq.n	800fcf6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	3324      	adds	r3, #36	; 0x24
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	f000 fd67 	bl	80107a8 <xTaskRemoveFromEventList>
 800fcda:	4603      	mov	r3, r0
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d001      	beq.n	800fce4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800fce0:	f000 fe3e 	bl	8010960 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800fce4:	7bfb      	ldrb	r3, [r7, #15]
 800fce6:	3b01      	subs	r3, #1
 800fce8:	b2db      	uxtb	r3, r3
 800fcea:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fcec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	dce9      	bgt.n	800fcc8 <prvUnlockQueue+0x16>
 800fcf4:	e000      	b.n	800fcf8 <prvUnlockQueue+0x46>
					break;
 800fcf6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	22ff      	movs	r2, #255	; 0xff
 800fcfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800fd00:	f001 fda8 	bl	8011854 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800fd04:	f001 fd76 	bl	80117f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fd0e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fd10:	e011      	b.n	800fd36 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	691b      	ldr	r3, [r3, #16]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d012      	beq.n	800fd40 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	3310      	adds	r3, #16
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f000 fd42 	bl	80107a8 <xTaskRemoveFromEventList>
 800fd24:	4603      	mov	r3, r0
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d001      	beq.n	800fd2e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800fd2a:	f000 fe19 	bl	8010960 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800fd2e:	7bbb      	ldrb	r3, [r7, #14]
 800fd30:	3b01      	subs	r3, #1
 800fd32:	b2db      	uxtb	r3, r3
 800fd34:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fd36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	dce9      	bgt.n	800fd12 <prvUnlockQueue+0x60>
 800fd3e:	e000      	b.n	800fd42 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800fd40:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	22ff      	movs	r2, #255	; 0xff
 800fd46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800fd4a:	f001 fd83 	bl	8011854 <vPortExitCritical>
}
 800fd4e:	bf00      	nop
 800fd50:	3710      	adds	r7, #16
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}

0800fd56 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fd56:	b580      	push	{r7, lr}
 800fd58:	b084      	sub	sp, #16
 800fd5a:	af00      	add	r7, sp, #0
 800fd5c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fd5e:	f001 fd49 	bl	80117f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d102      	bne.n	800fd70 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800fd6a:	2301      	movs	r3, #1
 800fd6c:	60fb      	str	r3, [r7, #12]
 800fd6e:	e001      	b.n	800fd74 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800fd70:	2300      	movs	r3, #0
 800fd72:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fd74:	f001 fd6e 	bl	8011854 <vPortExitCritical>

	return xReturn;
 800fd78:	68fb      	ldr	r3, [r7, #12]
}
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	3710      	adds	r7, #16
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	bd80      	pop	{r7, pc}

0800fd82 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800fd82:	b580      	push	{r7, lr}
 800fd84:	b084      	sub	sp, #16
 800fd86:	af00      	add	r7, sp, #0
 800fd88:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fd8a:	f001 fd33 	bl	80117f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd96:	429a      	cmp	r2, r3
 800fd98:	d102      	bne.n	800fda0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fd9a:	2301      	movs	r3, #1
 800fd9c:	60fb      	str	r3, [r7, #12]
 800fd9e:	e001      	b.n	800fda4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fda0:	2300      	movs	r3, #0
 800fda2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fda4:	f001 fd56 	bl	8011854 <vPortExitCritical>

	return xReturn;
 800fda8:	68fb      	ldr	r3, [r7, #12]
}
 800fdaa:	4618      	mov	r0, r3
 800fdac:	3710      	adds	r7, #16
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	bd80      	pop	{r7, pc}
	...

0800fdb4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800fdb4:	b480      	push	{r7}
 800fdb6:	b085      	sub	sp, #20
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
 800fdbc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	60fb      	str	r3, [r7, #12]
 800fdc2:	e014      	b.n	800fdee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800fdc4:	4a0f      	ldr	r2, [pc, #60]	; (800fe04 <vQueueAddToRegistry+0x50>)
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d10b      	bne.n	800fde8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800fdd0:	490c      	ldr	r1, [pc, #48]	; (800fe04 <vQueueAddToRegistry+0x50>)
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	683a      	ldr	r2, [r7, #0]
 800fdd6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800fdda:	4a0a      	ldr	r2, [pc, #40]	; (800fe04 <vQueueAddToRegistry+0x50>)
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	00db      	lsls	r3, r3, #3
 800fde0:	4413      	add	r3, r2
 800fde2:	687a      	ldr	r2, [r7, #4]
 800fde4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800fde6:	e006      	b.n	800fdf6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	3301      	adds	r3, #1
 800fdec:	60fb      	str	r3, [r7, #12]
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	2b07      	cmp	r3, #7
 800fdf2:	d9e7      	bls.n	800fdc4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800fdf4:	bf00      	nop
 800fdf6:	bf00      	nop
 800fdf8:	3714      	adds	r7, #20
 800fdfa:	46bd      	mov	sp, r7
 800fdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe00:	4770      	bx	lr
 800fe02:	bf00      	nop
 800fe04:	2000479c 	.word	0x2000479c

0800fe08 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800fe08:	b480      	push	{r7}
 800fe0a:	b085      	sub	sp, #20
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fe10:	2300      	movs	r3, #0
 800fe12:	60fb      	str	r3, [r7, #12]
 800fe14:	e016      	b.n	800fe44 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800fe16:	4a10      	ldr	r2, [pc, #64]	; (800fe58 <vQueueUnregisterQueue+0x50>)
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	00db      	lsls	r3, r3, #3
 800fe1c:	4413      	add	r3, r2
 800fe1e:	685b      	ldr	r3, [r3, #4]
 800fe20:	687a      	ldr	r2, [r7, #4]
 800fe22:	429a      	cmp	r2, r3
 800fe24:	d10b      	bne.n	800fe3e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800fe26:	4a0c      	ldr	r2, [pc, #48]	; (800fe58 <vQueueUnregisterQueue+0x50>)
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	2100      	movs	r1, #0
 800fe2c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800fe30:	4a09      	ldr	r2, [pc, #36]	; (800fe58 <vQueueUnregisterQueue+0x50>)
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	00db      	lsls	r3, r3, #3
 800fe36:	4413      	add	r3, r2
 800fe38:	2200      	movs	r2, #0
 800fe3a:	605a      	str	r2, [r3, #4]
				break;
 800fe3c:	e006      	b.n	800fe4c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	3301      	adds	r3, #1
 800fe42:	60fb      	str	r3, [r7, #12]
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	2b07      	cmp	r3, #7
 800fe48:	d9e5      	bls.n	800fe16 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800fe4a:	bf00      	nop
 800fe4c:	bf00      	nop
 800fe4e:	3714      	adds	r7, #20
 800fe50:	46bd      	mov	sp, r7
 800fe52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe56:	4770      	bx	lr
 800fe58:	2000479c 	.word	0x2000479c

0800fe5c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b086      	sub	sp, #24
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	60f8      	str	r0, [r7, #12]
 800fe64:	60b9      	str	r1, [r7, #8]
 800fe66:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800fe6c:	f001 fcc2 	bl	80117f4 <vPortEnterCritical>
 800fe70:	697b      	ldr	r3, [r7, #20]
 800fe72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fe76:	b25b      	sxtb	r3, r3
 800fe78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe7c:	d103      	bne.n	800fe86 <vQueueWaitForMessageRestricted+0x2a>
 800fe7e:	697b      	ldr	r3, [r7, #20]
 800fe80:	2200      	movs	r2, #0
 800fe82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fe86:	697b      	ldr	r3, [r7, #20]
 800fe88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fe8c:	b25b      	sxtb	r3, r3
 800fe8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe92:	d103      	bne.n	800fe9c <vQueueWaitForMessageRestricted+0x40>
 800fe94:	697b      	ldr	r3, [r7, #20]
 800fe96:	2200      	movs	r2, #0
 800fe98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fe9c:	f001 fcda 	bl	8011854 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800fea0:	697b      	ldr	r3, [r7, #20]
 800fea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d106      	bne.n	800feb6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800fea8:	697b      	ldr	r3, [r7, #20]
 800feaa:	3324      	adds	r3, #36	; 0x24
 800feac:	687a      	ldr	r2, [r7, #4]
 800feae:	68b9      	ldr	r1, [r7, #8]
 800feb0:	4618      	mov	r0, r3
 800feb2:	f000 fc4d 	bl	8010750 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800feb6:	6978      	ldr	r0, [r7, #20]
 800feb8:	f7ff fefb 	bl	800fcb2 <prvUnlockQueue>
	}
 800febc:	bf00      	nop
 800febe:	3718      	adds	r7, #24
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd80      	pop	{r7, pc}

0800fec4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b08e      	sub	sp, #56	; 0x38
 800fec8:	af04      	add	r7, sp, #16
 800feca:	60f8      	str	r0, [r7, #12]
 800fecc:	60b9      	str	r1, [r7, #8]
 800fece:	607a      	str	r2, [r7, #4]
 800fed0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800fed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d10a      	bne.n	800feee <xTaskCreateStatic+0x2a>
	__asm volatile
 800fed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fedc:	f383 8811 	msr	BASEPRI, r3
 800fee0:	f3bf 8f6f 	isb	sy
 800fee4:	f3bf 8f4f 	dsb	sy
 800fee8:	623b      	str	r3, [r7, #32]
}
 800feea:	bf00      	nop
 800feec:	e7fe      	b.n	800feec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800feee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d10a      	bne.n	800ff0a <xTaskCreateStatic+0x46>
	__asm volatile
 800fef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fef8:	f383 8811 	msr	BASEPRI, r3
 800fefc:	f3bf 8f6f 	isb	sy
 800ff00:	f3bf 8f4f 	dsb	sy
 800ff04:	61fb      	str	r3, [r7, #28]
}
 800ff06:	bf00      	nop
 800ff08:	e7fe      	b.n	800ff08 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ff0a:	235c      	movs	r3, #92	; 0x5c
 800ff0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ff0e:	693b      	ldr	r3, [r7, #16]
 800ff10:	2b5c      	cmp	r3, #92	; 0x5c
 800ff12:	d00a      	beq.n	800ff2a <xTaskCreateStatic+0x66>
	__asm volatile
 800ff14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff18:	f383 8811 	msr	BASEPRI, r3
 800ff1c:	f3bf 8f6f 	isb	sy
 800ff20:	f3bf 8f4f 	dsb	sy
 800ff24:	61bb      	str	r3, [r7, #24]
}
 800ff26:	bf00      	nop
 800ff28:	e7fe      	b.n	800ff28 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ff2a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ff2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d01e      	beq.n	800ff70 <xTaskCreateStatic+0xac>
 800ff32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d01b      	beq.n	800ff70 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ff38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff3a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ff3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff40:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ff42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff44:	2202      	movs	r2, #2
 800ff46:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	9303      	str	r3, [sp, #12]
 800ff4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff50:	9302      	str	r3, [sp, #8]
 800ff52:	f107 0314 	add.w	r3, r7, #20
 800ff56:	9301      	str	r3, [sp, #4]
 800ff58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff5a:	9300      	str	r3, [sp, #0]
 800ff5c:	683b      	ldr	r3, [r7, #0]
 800ff5e:	687a      	ldr	r2, [r7, #4]
 800ff60:	68b9      	ldr	r1, [r7, #8]
 800ff62:	68f8      	ldr	r0, [r7, #12]
 800ff64:	f000 f850 	bl	8010008 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ff68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ff6a:	f000 f8dd 	bl	8010128 <prvAddNewTaskToReadyList>
 800ff6e:	e001      	b.n	800ff74 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ff70:	2300      	movs	r3, #0
 800ff72:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ff74:	697b      	ldr	r3, [r7, #20]
	}
 800ff76:	4618      	mov	r0, r3
 800ff78:	3728      	adds	r7, #40	; 0x28
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}

0800ff7e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ff7e:	b580      	push	{r7, lr}
 800ff80:	b08c      	sub	sp, #48	; 0x30
 800ff82:	af04      	add	r7, sp, #16
 800ff84:	60f8      	str	r0, [r7, #12]
 800ff86:	60b9      	str	r1, [r7, #8]
 800ff88:	603b      	str	r3, [r7, #0]
 800ff8a:	4613      	mov	r3, r2
 800ff8c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ff8e:	88fb      	ldrh	r3, [r7, #6]
 800ff90:	009b      	lsls	r3, r3, #2
 800ff92:	4618      	mov	r0, r3
 800ff94:	f001 fd50 	bl	8011a38 <pvPortMalloc>
 800ff98:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ff9a:	697b      	ldr	r3, [r7, #20]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d00e      	beq.n	800ffbe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ffa0:	205c      	movs	r0, #92	; 0x5c
 800ffa2:	f001 fd49 	bl	8011a38 <pvPortMalloc>
 800ffa6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ffa8:	69fb      	ldr	r3, [r7, #28]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d003      	beq.n	800ffb6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ffae:	69fb      	ldr	r3, [r7, #28]
 800ffb0:	697a      	ldr	r2, [r7, #20]
 800ffb2:	631a      	str	r2, [r3, #48]	; 0x30
 800ffb4:	e005      	b.n	800ffc2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ffb6:	6978      	ldr	r0, [r7, #20]
 800ffb8:	f001 fe0a 	bl	8011bd0 <vPortFree>
 800ffbc:	e001      	b.n	800ffc2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ffc2:	69fb      	ldr	r3, [r7, #28]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d017      	beq.n	800fff8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ffc8:	69fb      	ldr	r3, [r7, #28]
 800ffca:	2200      	movs	r2, #0
 800ffcc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ffd0:	88fa      	ldrh	r2, [r7, #6]
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	9303      	str	r3, [sp, #12]
 800ffd6:	69fb      	ldr	r3, [r7, #28]
 800ffd8:	9302      	str	r3, [sp, #8]
 800ffda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffdc:	9301      	str	r3, [sp, #4]
 800ffde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffe0:	9300      	str	r3, [sp, #0]
 800ffe2:	683b      	ldr	r3, [r7, #0]
 800ffe4:	68b9      	ldr	r1, [r7, #8]
 800ffe6:	68f8      	ldr	r0, [r7, #12]
 800ffe8:	f000 f80e 	bl	8010008 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ffec:	69f8      	ldr	r0, [r7, #28]
 800ffee:	f000 f89b 	bl	8010128 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fff2:	2301      	movs	r3, #1
 800fff4:	61bb      	str	r3, [r7, #24]
 800fff6:	e002      	b.n	800fffe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fff8:	f04f 33ff 	mov.w	r3, #4294967295
 800fffc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fffe:	69bb      	ldr	r3, [r7, #24]
	}
 8010000:	4618      	mov	r0, r3
 8010002:	3720      	adds	r7, #32
 8010004:	46bd      	mov	sp, r7
 8010006:	bd80      	pop	{r7, pc}

08010008 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b088      	sub	sp, #32
 801000c:	af00      	add	r7, sp, #0
 801000e:	60f8      	str	r0, [r7, #12]
 8010010:	60b9      	str	r1, [r7, #8]
 8010012:	607a      	str	r2, [r7, #4]
 8010014:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010018:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	009b      	lsls	r3, r3, #2
 801001e:	461a      	mov	r2, r3
 8010020:	21a5      	movs	r1, #165	; 0xa5
 8010022:	f00e f951 	bl	801e2c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010030:	3b01      	subs	r3, #1
 8010032:	009b      	lsls	r3, r3, #2
 8010034:	4413      	add	r3, r2
 8010036:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010038:	69bb      	ldr	r3, [r7, #24]
 801003a:	f023 0307 	bic.w	r3, r3, #7
 801003e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010040:	69bb      	ldr	r3, [r7, #24]
 8010042:	f003 0307 	and.w	r3, r3, #7
 8010046:	2b00      	cmp	r3, #0
 8010048:	d00a      	beq.n	8010060 <prvInitialiseNewTask+0x58>
	__asm volatile
 801004a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801004e:	f383 8811 	msr	BASEPRI, r3
 8010052:	f3bf 8f6f 	isb	sy
 8010056:	f3bf 8f4f 	dsb	sy
 801005a:	617b      	str	r3, [r7, #20]
}
 801005c:	bf00      	nop
 801005e:	e7fe      	b.n	801005e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010060:	68bb      	ldr	r3, [r7, #8]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d01f      	beq.n	80100a6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010066:	2300      	movs	r3, #0
 8010068:	61fb      	str	r3, [r7, #28]
 801006a:	e012      	b.n	8010092 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801006c:	68ba      	ldr	r2, [r7, #8]
 801006e:	69fb      	ldr	r3, [r7, #28]
 8010070:	4413      	add	r3, r2
 8010072:	7819      	ldrb	r1, [r3, #0]
 8010074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010076:	69fb      	ldr	r3, [r7, #28]
 8010078:	4413      	add	r3, r2
 801007a:	3334      	adds	r3, #52	; 0x34
 801007c:	460a      	mov	r2, r1
 801007e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010080:	68ba      	ldr	r2, [r7, #8]
 8010082:	69fb      	ldr	r3, [r7, #28]
 8010084:	4413      	add	r3, r2
 8010086:	781b      	ldrb	r3, [r3, #0]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d006      	beq.n	801009a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801008c:	69fb      	ldr	r3, [r7, #28]
 801008e:	3301      	adds	r3, #1
 8010090:	61fb      	str	r3, [r7, #28]
 8010092:	69fb      	ldr	r3, [r7, #28]
 8010094:	2b0f      	cmp	r3, #15
 8010096:	d9e9      	bls.n	801006c <prvInitialiseNewTask+0x64>
 8010098:	e000      	b.n	801009c <prvInitialiseNewTask+0x94>
			{
				break;
 801009a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801009c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801009e:	2200      	movs	r2, #0
 80100a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80100a4:	e003      	b.n	80100ae <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80100a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100a8:	2200      	movs	r2, #0
 80100aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80100ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100b0:	2b37      	cmp	r3, #55	; 0x37
 80100b2:	d901      	bls.n	80100b8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80100b4:	2337      	movs	r3, #55	; 0x37
 80100b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80100b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80100bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80100be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80100c2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80100c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100c6:	2200      	movs	r2, #0
 80100c8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80100ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100cc:	3304      	adds	r3, #4
 80100ce:	4618      	mov	r0, r3
 80100d0:	f7fe fda0 	bl	800ec14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80100d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100d6:	3318      	adds	r3, #24
 80100d8:	4618      	mov	r0, r3
 80100da:	f7fe fd9b 	bl	800ec14 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80100de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80100e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80100e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80100ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80100ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80100f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80100f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100f6:	2200      	movs	r2, #0
 80100f8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80100fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100fc:	2200      	movs	r2, #0
 80100fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010102:	683a      	ldr	r2, [r7, #0]
 8010104:	68f9      	ldr	r1, [r7, #12]
 8010106:	69b8      	ldr	r0, [r7, #24]
 8010108:	f001 fa48 	bl	801159c <pxPortInitialiseStack>
 801010c:	4602      	mov	r2, r0
 801010e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010110:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010114:	2b00      	cmp	r3, #0
 8010116:	d002      	beq.n	801011e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801011a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801011c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801011e:	bf00      	nop
 8010120:	3720      	adds	r7, #32
 8010122:	46bd      	mov	sp, r7
 8010124:	bd80      	pop	{r7, pc}
	...

08010128 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b082      	sub	sp, #8
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010130:	f001 fb60 	bl	80117f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010134:	4b2d      	ldr	r3, [pc, #180]	; (80101ec <prvAddNewTaskToReadyList+0xc4>)
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	3301      	adds	r3, #1
 801013a:	4a2c      	ldr	r2, [pc, #176]	; (80101ec <prvAddNewTaskToReadyList+0xc4>)
 801013c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801013e:	4b2c      	ldr	r3, [pc, #176]	; (80101f0 <prvAddNewTaskToReadyList+0xc8>)
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d109      	bne.n	801015a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010146:	4a2a      	ldr	r2, [pc, #168]	; (80101f0 <prvAddNewTaskToReadyList+0xc8>)
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801014c:	4b27      	ldr	r3, [pc, #156]	; (80101ec <prvAddNewTaskToReadyList+0xc4>)
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	2b01      	cmp	r3, #1
 8010152:	d110      	bne.n	8010176 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010154:	f000 fc28 	bl	80109a8 <prvInitialiseTaskLists>
 8010158:	e00d      	b.n	8010176 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801015a:	4b26      	ldr	r3, [pc, #152]	; (80101f4 <prvAddNewTaskToReadyList+0xcc>)
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d109      	bne.n	8010176 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010162:	4b23      	ldr	r3, [pc, #140]	; (80101f0 <prvAddNewTaskToReadyList+0xc8>)
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801016c:	429a      	cmp	r2, r3
 801016e:	d802      	bhi.n	8010176 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010170:	4a1f      	ldr	r2, [pc, #124]	; (80101f0 <prvAddNewTaskToReadyList+0xc8>)
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010176:	4b20      	ldr	r3, [pc, #128]	; (80101f8 <prvAddNewTaskToReadyList+0xd0>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	3301      	adds	r3, #1
 801017c:	4a1e      	ldr	r2, [pc, #120]	; (80101f8 <prvAddNewTaskToReadyList+0xd0>)
 801017e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010180:	4b1d      	ldr	r3, [pc, #116]	; (80101f8 <prvAddNewTaskToReadyList+0xd0>)
 8010182:	681a      	ldr	r2, [r3, #0]
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801018c:	4b1b      	ldr	r3, [pc, #108]	; (80101fc <prvAddNewTaskToReadyList+0xd4>)
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	429a      	cmp	r2, r3
 8010192:	d903      	bls.n	801019c <prvAddNewTaskToReadyList+0x74>
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010198:	4a18      	ldr	r2, [pc, #96]	; (80101fc <prvAddNewTaskToReadyList+0xd4>)
 801019a:	6013      	str	r3, [r2, #0]
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101a0:	4613      	mov	r3, r2
 80101a2:	009b      	lsls	r3, r3, #2
 80101a4:	4413      	add	r3, r2
 80101a6:	009b      	lsls	r3, r3, #2
 80101a8:	4a15      	ldr	r2, [pc, #84]	; (8010200 <prvAddNewTaskToReadyList+0xd8>)
 80101aa:	441a      	add	r2, r3
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	3304      	adds	r3, #4
 80101b0:	4619      	mov	r1, r3
 80101b2:	4610      	mov	r0, r2
 80101b4:	f7fe fd3b 	bl	800ec2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80101b8:	f001 fb4c 	bl	8011854 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80101bc:	4b0d      	ldr	r3, [pc, #52]	; (80101f4 <prvAddNewTaskToReadyList+0xcc>)
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d00e      	beq.n	80101e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80101c4:	4b0a      	ldr	r3, [pc, #40]	; (80101f0 <prvAddNewTaskToReadyList+0xc8>)
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101ce:	429a      	cmp	r2, r3
 80101d0:	d207      	bcs.n	80101e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80101d2:	4b0c      	ldr	r3, [pc, #48]	; (8010204 <prvAddNewTaskToReadyList+0xdc>)
 80101d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101d8:	601a      	str	r2, [r3, #0]
 80101da:	f3bf 8f4f 	dsb	sy
 80101de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80101e2:	bf00      	nop
 80101e4:	3708      	adds	r7, #8
 80101e6:	46bd      	mov	sp, r7
 80101e8:	bd80      	pop	{r7, pc}
 80101ea:	bf00      	nop
 80101ec:	20004cb0 	.word	0x20004cb0
 80101f0:	200047dc 	.word	0x200047dc
 80101f4:	20004cbc 	.word	0x20004cbc
 80101f8:	20004ccc 	.word	0x20004ccc
 80101fc:	20004cb8 	.word	0x20004cb8
 8010200:	200047e0 	.word	0x200047e0
 8010204:	e000ed04 	.word	0xe000ed04

08010208 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010208:	b580      	push	{r7, lr}
 801020a:	b084      	sub	sp, #16
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010210:	2300      	movs	r3, #0
 8010212:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d017      	beq.n	801024a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801021a:	4b13      	ldr	r3, [pc, #76]	; (8010268 <vTaskDelay+0x60>)
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d00a      	beq.n	8010238 <vTaskDelay+0x30>
	__asm volatile
 8010222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010226:	f383 8811 	msr	BASEPRI, r3
 801022a:	f3bf 8f6f 	isb	sy
 801022e:	f3bf 8f4f 	dsb	sy
 8010232:	60bb      	str	r3, [r7, #8]
}
 8010234:	bf00      	nop
 8010236:	e7fe      	b.n	8010236 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010238:	f000 f880 	bl	801033c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801023c:	2100      	movs	r1, #0
 801023e:	6878      	ldr	r0, [r7, #4]
 8010240:	f000 fe0a 	bl	8010e58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010244:	f000 f888 	bl	8010358 <xTaskResumeAll>
 8010248:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d107      	bne.n	8010260 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8010250:	4b06      	ldr	r3, [pc, #24]	; (801026c <vTaskDelay+0x64>)
 8010252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010256:	601a      	str	r2, [r3, #0]
 8010258:	f3bf 8f4f 	dsb	sy
 801025c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010260:	bf00      	nop
 8010262:	3710      	adds	r7, #16
 8010264:	46bd      	mov	sp, r7
 8010266:	bd80      	pop	{r7, pc}
 8010268:	20004cd8 	.word	0x20004cd8
 801026c:	e000ed04 	.word	0xe000ed04

08010270 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010270:	b580      	push	{r7, lr}
 8010272:	b08a      	sub	sp, #40	; 0x28
 8010274:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010276:	2300      	movs	r3, #0
 8010278:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801027a:	2300      	movs	r3, #0
 801027c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801027e:	463a      	mov	r2, r7
 8010280:	1d39      	adds	r1, r7, #4
 8010282:	f107 0308 	add.w	r3, r7, #8
 8010286:	4618      	mov	r0, r3
 8010288:	f7fe fc70 	bl	800eb6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801028c:	6839      	ldr	r1, [r7, #0]
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	68ba      	ldr	r2, [r7, #8]
 8010292:	9202      	str	r2, [sp, #8]
 8010294:	9301      	str	r3, [sp, #4]
 8010296:	2300      	movs	r3, #0
 8010298:	9300      	str	r3, [sp, #0]
 801029a:	2300      	movs	r3, #0
 801029c:	460a      	mov	r2, r1
 801029e:	4921      	ldr	r1, [pc, #132]	; (8010324 <vTaskStartScheduler+0xb4>)
 80102a0:	4821      	ldr	r0, [pc, #132]	; (8010328 <vTaskStartScheduler+0xb8>)
 80102a2:	f7ff fe0f 	bl	800fec4 <xTaskCreateStatic>
 80102a6:	4603      	mov	r3, r0
 80102a8:	4a20      	ldr	r2, [pc, #128]	; (801032c <vTaskStartScheduler+0xbc>)
 80102aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80102ac:	4b1f      	ldr	r3, [pc, #124]	; (801032c <vTaskStartScheduler+0xbc>)
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d002      	beq.n	80102ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80102b4:	2301      	movs	r3, #1
 80102b6:	617b      	str	r3, [r7, #20]
 80102b8:	e001      	b.n	80102be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80102ba:	2300      	movs	r3, #0
 80102bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80102be:	697b      	ldr	r3, [r7, #20]
 80102c0:	2b01      	cmp	r3, #1
 80102c2:	d102      	bne.n	80102ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80102c4:	f000 fe1c 	bl	8010f00 <xTimerCreateTimerTask>
 80102c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80102ca:	697b      	ldr	r3, [r7, #20]
 80102cc:	2b01      	cmp	r3, #1
 80102ce:	d116      	bne.n	80102fe <vTaskStartScheduler+0x8e>
	__asm volatile
 80102d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102d4:	f383 8811 	msr	BASEPRI, r3
 80102d8:	f3bf 8f6f 	isb	sy
 80102dc:	f3bf 8f4f 	dsb	sy
 80102e0:	613b      	str	r3, [r7, #16]
}
 80102e2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80102e4:	4b12      	ldr	r3, [pc, #72]	; (8010330 <vTaskStartScheduler+0xc0>)
 80102e6:	f04f 32ff 	mov.w	r2, #4294967295
 80102ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80102ec:	4b11      	ldr	r3, [pc, #68]	; (8010334 <vTaskStartScheduler+0xc4>)
 80102ee:	2201      	movs	r2, #1
 80102f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80102f2:	4b11      	ldr	r3, [pc, #68]	; (8010338 <vTaskStartScheduler+0xc8>)
 80102f4:	2200      	movs	r2, #0
 80102f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80102f8:	f001 f9da 	bl	80116b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80102fc:	e00e      	b.n	801031c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80102fe:	697b      	ldr	r3, [r7, #20]
 8010300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010304:	d10a      	bne.n	801031c <vTaskStartScheduler+0xac>
	__asm volatile
 8010306:	f04f 0350 	mov.w	r3, #80	; 0x50
 801030a:	f383 8811 	msr	BASEPRI, r3
 801030e:	f3bf 8f6f 	isb	sy
 8010312:	f3bf 8f4f 	dsb	sy
 8010316:	60fb      	str	r3, [r7, #12]
}
 8010318:	bf00      	nop
 801031a:	e7fe      	b.n	801031a <vTaskStartScheduler+0xaa>
}
 801031c:	bf00      	nop
 801031e:	3718      	adds	r7, #24
 8010320:	46bd      	mov	sp, r7
 8010322:	bd80      	pop	{r7, pc}
 8010324:	080245a4 	.word	0x080245a4
 8010328:	08010979 	.word	0x08010979
 801032c:	20004cd4 	.word	0x20004cd4
 8010330:	20004cd0 	.word	0x20004cd0
 8010334:	20004cbc 	.word	0x20004cbc
 8010338:	20004cb4 	.word	0x20004cb4

0801033c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801033c:	b480      	push	{r7}
 801033e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010340:	4b04      	ldr	r3, [pc, #16]	; (8010354 <vTaskSuspendAll+0x18>)
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	3301      	adds	r3, #1
 8010346:	4a03      	ldr	r2, [pc, #12]	; (8010354 <vTaskSuspendAll+0x18>)
 8010348:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801034a:	bf00      	nop
 801034c:	46bd      	mov	sp, r7
 801034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010352:	4770      	bx	lr
 8010354:	20004cd8 	.word	0x20004cd8

08010358 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b084      	sub	sp, #16
 801035c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801035e:	2300      	movs	r3, #0
 8010360:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010362:	2300      	movs	r3, #0
 8010364:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010366:	4b42      	ldr	r3, [pc, #264]	; (8010470 <xTaskResumeAll+0x118>)
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d10a      	bne.n	8010384 <xTaskResumeAll+0x2c>
	__asm volatile
 801036e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010372:	f383 8811 	msr	BASEPRI, r3
 8010376:	f3bf 8f6f 	isb	sy
 801037a:	f3bf 8f4f 	dsb	sy
 801037e:	603b      	str	r3, [r7, #0]
}
 8010380:	bf00      	nop
 8010382:	e7fe      	b.n	8010382 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010384:	f001 fa36 	bl	80117f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010388:	4b39      	ldr	r3, [pc, #228]	; (8010470 <xTaskResumeAll+0x118>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	3b01      	subs	r3, #1
 801038e:	4a38      	ldr	r2, [pc, #224]	; (8010470 <xTaskResumeAll+0x118>)
 8010390:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010392:	4b37      	ldr	r3, [pc, #220]	; (8010470 <xTaskResumeAll+0x118>)
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d162      	bne.n	8010460 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801039a:	4b36      	ldr	r3, [pc, #216]	; (8010474 <xTaskResumeAll+0x11c>)
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d05e      	beq.n	8010460 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80103a2:	e02f      	b.n	8010404 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80103a4:	4b34      	ldr	r3, [pc, #208]	; (8010478 <xTaskResumeAll+0x120>)
 80103a6:	68db      	ldr	r3, [r3, #12]
 80103a8:	68db      	ldr	r3, [r3, #12]
 80103aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	3318      	adds	r3, #24
 80103b0:	4618      	mov	r0, r3
 80103b2:	f7fe fc99 	bl	800ece8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	3304      	adds	r3, #4
 80103ba:	4618      	mov	r0, r3
 80103bc:	f7fe fc94 	bl	800ece8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103c4:	4b2d      	ldr	r3, [pc, #180]	; (801047c <xTaskResumeAll+0x124>)
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	429a      	cmp	r2, r3
 80103ca:	d903      	bls.n	80103d4 <xTaskResumeAll+0x7c>
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103d0:	4a2a      	ldr	r2, [pc, #168]	; (801047c <xTaskResumeAll+0x124>)
 80103d2:	6013      	str	r3, [r2, #0]
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103d8:	4613      	mov	r3, r2
 80103da:	009b      	lsls	r3, r3, #2
 80103dc:	4413      	add	r3, r2
 80103de:	009b      	lsls	r3, r3, #2
 80103e0:	4a27      	ldr	r2, [pc, #156]	; (8010480 <xTaskResumeAll+0x128>)
 80103e2:	441a      	add	r2, r3
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	3304      	adds	r3, #4
 80103e8:	4619      	mov	r1, r3
 80103ea:	4610      	mov	r0, r2
 80103ec:	f7fe fc1f 	bl	800ec2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103f4:	4b23      	ldr	r3, [pc, #140]	; (8010484 <xTaskResumeAll+0x12c>)
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103fa:	429a      	cmp	r2, r3
 80103fc:	d302      	bcc.n	8010404 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80103fe:	4b22      	ldr	r3, [pc, #136]	; (8010488 <xTaskResumeAll+0x130>)
 8010400:	2201      	movs	r2, #1
 8010402:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010404:	4b1c      	ldr	r3, [pc, #112]	; (8010478 <xTaskResumeAll+0x120>)
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d1cb      	bne.n	80103a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d001      	beq.n	8010416 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010412:	f000 fb67 	bl	8010ae4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010416:	4b1d      	ldr	r3, [pc, #116]	; (801048c <xTaskResumeAll+0x134>)
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d010      	beq.n	8010444 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010422:	f000 f859 	bl	80104d8 <xTaskIncrementTick>
 8010426:	4603      	mov	r3, r0
 8010428:	2b00      	cmp	r3, #0
 801042a:	d002      	beq.n	8010432 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801042c:	4b16      	ldr	r3, [pc, #88]	; (8010488 <xTaskResumeAll+0x130>)
 801042e:	2201      	movs	r2, #1
 8010430:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	3b01      	subs	r3, #1
 8010436:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d1f1      	bne.n	8010422 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801043e:	4b13      	ldr	r3, [pc, #76]	; (801048c <xTaskResumeAll+0x134>)
 8010440:	2200      	movs	r2, #0
 8010442:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010444:	4b10      	ldr	r3, [pc, #64]	; (8010488 <xTaskResumeAll+0x130>)
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d009      	beq.n	8010460 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801044c:	2301      	movs	r3, #1
 801044e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010450:	4b0f      	ldr	r3, [pc, #60]	; (8010490 <xTaskResumeAll+0x138>)
 8010452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010456:	601a      	str	r2, [r3, #0]
 8010458:	f3bf 8f4f 	dsb	sy
 801045c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010460:	f001 f9f8 	bl	8011854 <vPortExitCritical>

	return xAlreadyYielded;
 8010464:	68bb      	ldr	r3, [r7, #8]
}
 8010466:	4618      	mov	r0, r3
 8010468:	3710      	adds	r7, #16
 801046a:	46bd      	mov	sp, r7
 801046c:	bd80      	pop	{r7, pc}
 801046e:	bf00      	nop
 8010470:	20004cd8 	.word	0x20004cd8
 8010474:	20004cb0 	.word	0x20004cb0
 8010478:	20004c70 	.word	0x20004c70
 801047c:	20004cb8 	.word	0x20004cb8
 8010480:	200047e0 	.word	0x200047e0
 8010484:	200047dc 	.word	0x200047dc
 8010488:	20004cc4 	.word	0x20004cc4
 801048c:	20004cc0 	.word	0x20004cc0
 8010490:	e000ed04 	.word	0xe000ed04

08010494 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010494:	b480      	push	{r7}
 8010496:	b083      	sub	sp, #12
 8010498:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801049a:	4b05      	ldr	r3, [pc, #20]	; (80104b0 <xTaskGetTickCount+0x1c>)
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80104a0:	687b      	ldr	r3, [r7, #4]
}
 80104a2:	4618      	mov	r0, r3
 80104a4:	370c      	adds	r7, #12
 80104a6:	46bd      	mov	sp, r7
 80104a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ac:	4770      	bx	lr
 80104ae:	bf00      	nop
 80104b0:	20004cb4 	.word	0x20004cb4

080104b4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b082      	sub	sp, #8
 80104b8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80104ba:	f001 fa7d 	bl	80119b8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80104be:	2300      	movs	r3, #0
 80104c0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80104c2:	4b04      	ldr	r3, [pc, #16]	; (80104d4 <xTaskGetTickCountFromISR+0x20>)
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80104c8:	683b      	ldr	r3, [r7, #0]
}
 80104ca:	4618      	mov	r0, r3
 80104cc:	3708      	adds	r7, #8
 80104ce:	46bd      	mov	sp, r7
 80104d0:	bd80      	pop	{r7, pc}
 80104d2:	bf00      	nop
 80104d4:	20004cb4 	.word	0x20004cb4

080104d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b086      	sub	sp, #24
 80104dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80104de:	2300      	movs	r3, #0
 80104e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80104e2:	4b4f      	ldr	r3, [pc, #316]	; (8010620 <xTaskIncrementTick+0x148>)
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	f040 808f 	bne.w	801060a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80104ec:	4b4d      	ldr	r3, [pc, #308]	; (8010624 <xTaskIncrementTick+0x14c>)
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	3301      	adds	r3, #1
 80104f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80104f4:	4a4b      	ldr	r2, [pc, #300]	; (8010624 <xTaskIncrementTick+0x14c>)
 80104f6:	693b      	ldr	r3, [r7, #16]
 80104f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80104fa:	693b      	ldr	r3, [r7, #16]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d120      	bne.n	8010542 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010500:	4b49      	ldr	r3, [pc, #292]	; (8010628 <xTaskIncrementTick+0x150>)
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d00a      	beq.n	8010520 <xTaskIncrementTick+0x48>
	__asm volatile
 801050a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801050e:	f383 8811 	msr	BASEPRI, r3
 8010512:	f3bf 8f6f 	isb	sy
 8010516:	f3bf 8f4f 	dsb	sy
 801051a:	603b      	str	r3, [r7, #0]
}
 801051c:	bf00      	nop
 801051e:	e7fe      	b.n	801051e <xTaskIncrementTick+0x46>
 8010520:	4b41      	ldr	r3, [pc, #260]	; (8010628 <xTaskIncrementTick+0x150>)
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	60fb      	str	r3, [r7, #12]
 8010526:	4b41      	ldr	r3, [pc, #260]	; (801062c <xTaskIncrementTick+0x154>)
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	4a3f      	ldr	r2, [pc, #252]	; (8010628 <xTaskIncrementTick+0x150>)
 801052c:	6013      	str	r3, [r2, #0]
 801052e:	4a3f      	ldr	r2, [pc, #252]	; (801062c <xTaskIncrementTick+0x154>)
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	6013      	str	r3, [r2, #0]
 8010534:	4b3e      	ldr	r3, [pc, #248]	; (8010630 <xTaskIncrementTick+0x158>)
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	3301      	adds	r3, #1
 801053a:	4a3d      	ldr	r2, [pc, #244]	; (8010630 <xTaskIncrementTick+0x158>)
 801053c:	6013      	str	r3, [r2, #0]
 801053e:	f000 fad1 	bl	8010ae4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010542:	4b3c      	ldr	r3, [pc, #240]	; (8010634 <xTaskIncrementTick+0x15c>)
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	693a      	ldr	r2, [r7, #16]
 8010548:	429a      	cmp	r2, r3
 801054a:	d349      	bcc.n	80105e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801054c:	4b36      	ldr	r3, [pc, #216]	; (8010628 <xTaskIncrementTick+0x150>)
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d104      	bne.n	8010560 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010556:	4b37      	ldr	r3, [pc, #220]	; (8010634 <xTaskIncrementTick+0x15c>)
 8010558:	f04f 32ff 	mov.w	r2, #4294967295
 801055c:	601a      	str	r2, [r3, #0]
					break;
 801055e:	e03f      	b.n	80105e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010560:	4b31      	ldr	r3, [pc, #196]	; (8010628 <xTaskIncrementTick+0x150>)
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	68db      	ldr	r3, [r3, #12]
 8010566:	68db      	ldr	r3, [r3, #12]
 8010568:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801056a:	68bb      	ldr	r3, [r7, #8]
 801056c:	685b      	ldr	r3, [r3, #4]
 801056e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010570:	693a      	ldr	r2, [r7, #16]
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	429a      	cmp	r2, r3
 8010576:	d203      	bcs.n	8010580 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010578:	4a2e      	ldr	r2, [pc, #184]	; (8010634 <xTaskIncrementTick+0x15c>)
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801057e:	e02f      	b.n	80105e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010580:	68bb      	ldr	r3, [r7, #8]
 8010582:	3304      	adds	r3, #4
 8010584:	4618      	mov	r0, r3
 8010586:	f7fe fbaf 	bl	800ece8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801058a:	68bb      	ldr	r3, [r7, #8]
 801058c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801058e:	2b00      	cmp	r3, #0
 8010590:	d004      	beq.n	801059c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010592:	68bb      	ldr	r3, [r7, #8]
 8010594:	3318      	adds	r3, #24
 8010596:	4618      	mov	r0, r3
 8010598:	f7fe fba6 	bl	800ece8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801059c:	68bb      	ldr	r3, [r7, #8]
 801059e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105a0:	4b25      	ldr	r3, [pc, #148]	; (8010638 <xTaskIncrementTick+0x160>)
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	429a      	cmp	r2, r3
 80105a6:	d903      	bls.n	80105b0 <xTaskIncrementTick+0xd8>
 80105a8:	68bb      	ldr	r3, [r7, #8]
 80105aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105ac:	4a22      	ldr	r2, [pc, #136]	; (8010638 <xTaskIncrementTick+0x160>)
 80105ae:	6013      	str	r3, [r2, #0]
 80105b0:	68bb      	ldr	r3, [r7, #8]
 80105b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105b4:	4613      	mov	r3, r2
 80105b6:	009b      	lsls	r3, r3, #2
 80105b8:	4413      	add	r3, r2
 80105ba:	009b      	lsls	r3, r3, #2
 80105bc:	4a1f      	ldr	r2, [pc, #124]	; (801063c <xTaskIncrementTick+0x164>)
 80105be:	441a      	add	r2, r3
 80105c0:	68bb      	ldr	r3, [r7, #8]
 80105c2:	3304      	adds	r3, #4
 80105c4:	4619      	mov	r1, r3
 80105c6:	4610      	mov	r0, r2
 80105c8:	f7fe fb31 	bl	800ec2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80105cc:	68bb      	ldr	r3, [r7, #8]
 80105ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105d0:	4b1b      	ldr	r3, [pc, #108]	; (8010640 <xTaskIncrementTick+0x168>)
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105d6:	429a      	cmp	r2, r3
 80105d8:	d3b8      	bcc.n	801054c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80105da:	2301      	movs	r3, #1
 80105dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80105de:	e7b5      	b.n	801054c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80105e0:	4b17      	ldr	r3, [pc, #92]	; (8010640 <xTaskIncrementTick+0x168>)
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105e6:	4915      	ldr	r1, [pc, #84]	; (801063c <xTaskIncrementTick+0x164>)
 80105e8:	4613      	mov	r3, r2
 80105ea:	009b      	lsls	r3, r3, #2
 80105ec:	4413      	add	r3, r2
 80105ee:	009b      	lsls	r3, r3, #2
 80105f0:	440b      	add	r3, r1
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	2b01      	cmp	r3, #1
 80105f6:	d901      	bls.n	80105fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80105f8:	2301      	movs	r3, #1
 80105fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80105fc:	4b11      	ldr	r3, [pc, #68]	; (8010644 <xTaskIncrementTick+0x16c>)
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d007      	beq.n	8010614 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8010604:	2301      	movs	r3, #1
 8010606:	617b      	str	r3, [r7, #20]
 8010608:	e004      	b.n	8010614 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801060a:	4b0f      	ldr	r3, [pc, #60]	; (8010648 <xTaskIncrementTick+0x170>)
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	3301      	adds	r3, #1
 8010610:	4a0d      	ldr	r2, [pc, #52]	; (8010648 <xTaskIncrementTick+0x170>)
 8010612:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010614:	697b      	ldr	r3, [r7, #20]
}
 8010616:	4618      	mov	r0, r3
 8010618:	3718      	adds	r7, #24
 801061a:	46bd      	mov	sp, r7
 801061c:	bd80      	pop	{r7, pc}
 801061e:	bf00      	nop
 8010620:	20004cd8 	.word	0x20004cd8
 8010624:	20004cb4 	.word	0x20004cb4
 8010628:	20004c68 	.word	0x20004c68
 801062c:	20004c6c 	.word	0x20004c6c
 8010630:	20004cc8 	.word	0x20004cc8
 8010634:	20004cd0 	.word	0x20004cd0
 8010638:	20004cb8 	.word	0x20004cb8
 801063c:	200047e0 	.word	0x200047e0
 8010640:	200047dc 	.word	0x200047dc
 8010644:	20004cc4 	.word	0x20004cc4
 8010648:	20004cc0 	.word	0x20004cc0

0801064c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801064c:	b480      	push	{r7}
 801064e:	b085      	sub	sp, #20
 8010650:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010652:	4b28      	ldr	r3, [pc, #160]	; (80106f4 <vTaskSwitchContext+0xa8>)
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d003      	beq.n	8010662 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801065a:	4b27      	ldr	r3, [pc, #156]	; (80106f8 <vTaskSwitchContext+0xac>)
 801065c:	2201      	movs	r2, #1
 801065e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010660:	e041      	b.n	80106e6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8010662:	4b25      	ldr	r3, [pc, #148]	; (80106f8 <vTaskSwitchContext+0xac>)
 8010664:	2200      	movs	r2, #0
 8010666:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010668:	4b24      	ldr	r3, [pc, #144]	; (80106fc <vTaskSwitchContext+0xb0>)
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	60fb      	str	r3, [r7, #12]
 801066e:	e010      	b.n	8010692 <vTaskSwitchContext+0x46>
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d10a      	bne.n	801068c <vTaskSwitchContext+0x40>
	__asm volatile
 8010676:	f04f 0350 	mov.w	r3, #80	; 0x50
 801067a:	f383 8811 	msr	BASEPRI, r3
 801067e:	f3bf 8f6f 	isb	sy
 8010682:	f3bf 8f4f 	dsb	sy
 8010686:	607b      	str	r3, [r7, #4]
}
 8010688:	bf00      	nop
 801068a:	e7fe      	b.n	801068a <vTaskSwitchContext+0x3e>
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	3b01      	subs	r3, #1
 8010690:	60fb      	str	r3, [r7, #12]
 8010692:	491b      	ldr	r1, [pc, #108]	; (8010700 <vTaskSwitchContext+0xb4>)
 8010694:	68fa      	ldr	r2, [r7, #12]
 8010696:	4613      	mov	r3, r2
 8010698:	009b      	lsls	r3, r3, #2
 801069a:	4413      	add	r3, r2
 801069c:	009b      	lsls	r3, r3, #2
 801069e:	440b      	add	r3, r1
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d0e4      	beq.n	8010670 <vTaskSwitchContext+0x24>
 80106a6:	68fa      	ldr	r2, [r7, #12]
 80106a8:	4613      	mov	r3, r2
 80106aa:	009b      	lsls	r3, r3, #2
 80106ac:	4413      	add	r3, r2
 80106ae:	009b      	lsls	r3, r3, #2
 80106b0:	4a13      	ldr	r2, [pc, #76]	; (8010700 <vTaskSwitchContext+0xb4>)
 80106b2:	4413      	add	r3, r2
 80106b4:	60bb      	str	r3, [r7, #8]
 80106b6:	68bb      	ldr	r3, [r7, #8]
 80106b8:	685b      	ldr	r3, [r3, #4]
 80106ba:	685a      	ldr	r2, [r3, #4]
 80106bc:	68bb      	ldr	r3, [r7, #8]
 80106be:	605a      	str	r2, [r3, #4]
 80106c0:	68bb      	ldr	r3, [r7, #8]
 80106c2:	685a      	ldr	r2, [r3, #4]
 80106c4:	68bb      	ldr	r3, [r7, #8]
 80106c6:	3308      	adds	r3, #8
 80106c8:	429a      	cmp	r2, r3
 80106ca:	d104      	bne.n	80106d6 <vTaskSwitchContext+0x8a>
 80106cc:	68bb      	ldr	r3, [r7, #8]
 80106ce:	685b      	ldr	r3, [r3, #4]
 80106d0:	685a      	ldr	r2, [r3, #4]
 80106d2:	68bb      	ldr	r3, [r7, #8]
 80106d4:	605a      	str	r2, [r3, #4]
 80106d6:	68bb      	ldr	r3, [r7, #8]
 80106d8:	685b      	ldr	r3, [r3, #4]
 80106da:	68db      	ldr	r3, [r3, #12]
 80106dc:	4a09      	ldr	r2, [pc, #36]	; (8010704 <vTaskSwitchContext+0xb8>)
 80106de:	6013      	str	r3, [r2, #0]
 80106e0:	4a06      	ldr	r2, [pc, #24]	; (80106fc <vTaskSwitchContext+0xb0>)
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	6013      	str	r3, [r2, #0]
}
 80106e6:	bf00      	nop
 80106e8:	3714      	adds	r7, #20
 80106ea:	46bd      	mov	sp, r7
 80106ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f0:	4770      	bx	lr
 80106f2:	bf00      	nop
 80106f4:	20004cd8 	.word	0x20004cd8
 80106f8:	20004cc4 	.word	0x20004cc4
 80106fc:	20004cb8 	.word	0x20004cb8
 8010700:	200047e0 	.word	0x200047e0
 8010704:	200047dc 	.word	0x200047dc

08010708 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b084      	sub	sp, #16
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
 8010710:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d10a      	bne.n	801072e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8010718:	f04f 0350 	mov.w	r3, #80	; 0x50
 801071c:	f383 8811 	msr	BASEPRI, r3
 8010720:	f3bf 8f6f 	isb	sy
 8010724:	f3bf 8f4f 	dsb	sy
 8010728:	60fb      	str	r3, [r7, #12]
}
 801072a:	bf00      	nop
 801072c:	e7fe      	b.n	801072c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801072e:	4b07      	ldr	r3, [pc, #28]	; (801074c <vTaskPlaceOnEventList+0x44>)
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	3318      	adds	r3, #24
 8010734:	4619      	mov	r1, r3
 8010736:	6878      	ldr	r0, [r7, #4]
 8010738:	f7fe fa9d 	bl	800ec76 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801073c:	2101      	movs	r1, #1
 801073e:	6838      	ldr	r0, [r7, #0]
 8010740:	f000 fb8a 	bl	8010e58 <prvAddCurrentTaskToDelayedList>
}
 8010744:	bf00      	nop
 8010746:	3710      	adds	r7, #16
 8010748:	46bd      	mov	sp, r7
 801074a:	bd80      	pop	{r7, pc}
 801074c:	200047dc 	.word	0x200047dc

08010750 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010750:	b580      	push	{r7, lr}
 8010752:	b086      	sub	sp, #24
 8010754:	af00      	add	r7, sp, #0
 8010756:	60f8      	str	r0, [r7, #12]
 8010758:	60b9      	str	r1, [r7, #8]
 801075a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d10a      	bne.n	8010778 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8010762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010766:	f383 8811 	msr	BASEPRI, r3
 801076a:	f3bf 8f6f 	isb	sy
 801076e:	f3bf 8f4f 	dsb	sy
 8010772:	617b      	str	r3, [r7, #20]
}
 8010774:	bf00      	nop
 8010776:	e7fe      	b.n	8010776 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010778:	4b0a      	ldr	r3, [pc, #40]	; (80107a4 <vTaskPlaceOnEventListRestricted+0x54>)
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	3318      	adds	r3, #24
 801077e:	4619      	mov	r1, r3
 8010780:	68f8      	ldr	r0, [r7, #12]
 8010782:	f7fe fa54 	bl	800ec2e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d002      	beq.n	8010792 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801078c:	f04f 33ff 	mov.w	r3, #4294967295
 8010790:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010792:	6879      	ldr	r1, [r7, #4]
 8010794:	68b8      	ldr	r0, [r7, #8]
 8010796:	f000 fb5f 	bl	8010e58 <prvAddCurrentTaskToDelayedList>
	}
 801079a:	bf00      	nop
 801079c:	3718      	adds	r7, #24
 801079e:	46bd      	mov	sp, r7
 80107a0:	bd80      	pop	{r7, pc}
 80107a2:	bf00      	nop
 80107a4:	200047dc 	.word	0x200047dc

080107a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b086      	sub	sp, #24
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	68db      	ldr	r3, [r3, #12]
 80107b4:	68db      	ldr	r3, [r3, #12]
 80107b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80107b8:	693b      	ldr	r3, [r7, #16]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d10a      	bne.n	80107d4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80107be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107c2:	f383 8811 	msr	BASEPRI, r3
 80107c6:	f3bf 8f6f 	isb	sy
 80107ca:	f3bf 8f4f 	dsb	sy
 80107ce:	60fb      	str	r3, [r7, #12]
}
 80107d0:	bf00      	nop
 80107d2:	e7fe      	b.n	80107d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80107d4:	693b      	ldr	r3, [r7, #16]
 80107d6:	3318      	adds	r3, #24
 80107d8:	4618      	mov	r0, r3
 80107da:	f7fe fa85 	bl	800ece8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80107de:	4b1e      	ldr	r3, [pc, #120]	; (8010858 <xTaskRemoveFromEventList+0xb0>)
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d11d      	bne.n	8010822 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80107e6:	693b      	ldr	r3, [r7, #16]
 80107e8:	3304      	adds	r3, #4
 80107ea:	4618      	mov	r0, r3
 80107ec:	f7fe fa7c 	bl	800ece8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80107f0:	693b      	ldr	r3, [r7, #16]
 80107f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107f4:	4b19      	ldr	r3, [pc, #100]	; (801085c <xTaskRemoveFromEventList+0xb4>)
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	429a      	cmp	r2, r3
 80107fa:	d903      	bls.n	8010804 <xTaskRemoveFromEventList+0x5c>
 80107fc:	693b      	ldr	r3, [r7, #16]
 80107fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010800:	4a16      	ldr	r2, [pc, #88]	; (801085c <xTaskRemoveFromEventList+0xb4>)
 8010802:	6013      	str	r3, [r2, #0]
 8010804:	693b      	ldr	r3, [r7, #16]
 8010806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010808:	4613      	mov	r3, r2
 801080a:	009b      	lsls	r3, r3, #2
 801080c:	4413      	add	r3, r2
 801080e:	009b      	lsls	r3, r3, #2
 8010810:	4a13      	ldr	r2, [pc, #76]	; (8010860 <xTaskRemoveFromEventList+0xb8>)
 8010812:	441a      	add	r2, r3
 8010814:	693b      	ldr	r3, [r7, #16]
 8010816:	3304      	adds	r3, #4
 8010818:	4619      	mov	r1, r3
 801081a:	4610      	mov	r0, r2
 801081c:	f7fe fa07 	bl	800ec2e <vListInsertEnd>
 8010820:	e005      	b.n	801082e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010822:	693b      	ldr	r3, [r7, #16]
 8010824:	3318      	adds	r3, #24
 8010826:	4619      	mov	r1, r3
 8010828:	480e      	ldr	r0, [pc, #56]	; (8010864 <xTaskRemoveFromEventList+0xbc>)
 801082a:	f7fe fa00 	bl	800ec2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801082e:	693b      	ldr	r3, [r7, #16]
 8010830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010832:	4b0d      	ldr	r3, [pc, #52]	; (8010868 <xTaskRemoveFromEventList+0xc0>)
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010838:	429a      	cmp	r2, r3
 801083a:	d905      	bls.n	8010848 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801083c:	2301      	movs	r3, #1
 801083e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010840:	4b0a      	ldr	r3, [pc, #40]	; (801086c <xTaskRemoveFromEventList+0xc4>)
 8010842:	2201      	movs	r2, #1
 8010844:	601a      	str	r2, [r3, #0]
 8010846:	e001      	b.n	801084c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8010848:	2300      	movs	r3, #0
 801084a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801084c:	697b      	ldr	r3, [r7, #20]
}
 801084e:	4618      	mov	r0, r3
 8010850:	3718      	adds	r7, #24
 8010852:	46bd      	mov	sp, r7
 8010854:	bd80      	pop	{r7, pc}
 8010856:	bf00      	nop
 8010858:	20004cd8 	.word	0x20004cd8
 801085c:	20004cb8 	.word	0x20004cb8
 8010860:	200047e0 	.word	0x200047e0
 8010864:	20004c70 	.word	0x20004c70
 8010868:	200047dc 	.word	0x200047dc
 801086c:	20004cc4 	.word	0x20004cc4

08010870 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010870:	b480      	push	{r7}
 8010872:	b083      	sub	sp, #12
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010878:	4b06      	ldr	r3, [pc, #24]	; (8010894 <vTaskInternalSetTimeOutState+0x24>)
 801087a:	681a      	ldr	r2, [r3, #0]
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010880:	4b05      	ldr	r3, [pc, #20]	; (8010898 <vTaskInternalSetTimeOutState+0x28>)
 8010882:	681a      	ldr	r2, [r3, #0]
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	605a      	str	r2, [r3, #4]
}
 8010888:	bf00      	nop
 801088a:	370c      	adds	r7, #12
 801088c:	46bd      	mov	sp, r7
 801088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010892:	4770      	bx	lr
 8010894:	20004cc8 	.word	0x20004cc8
 8010898:	20004cb4 	.word	0x20004cb4

0801089c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801089c:	b580      	push	{r7, lr}
 801089e:	b088      	sub	sp, #32
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	6078      	str	r0, [r7, #4]
 80108a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d10a      	bne.n	80108c2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80108ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108b0:	f383 8811 	msr	BASEPRI, r3
 80108b4:	f3bf 8f6f 	isb	sy
 80108b8:	f3bf 8f4f 	dsb	sy
 80108bc:	613b      	str	r3, [r7, #16]
}
 80108be:	bf00      	nop
 80108c0:	e7fe      	b.n	80108c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80108c2:	683b      	ldr	r3, [r7, #0]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d10a      	bne.n	80108de <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80108c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108cc:	f383 8811 	msr	BASEPRI, r3
 80108d0:	f3bf 8f6f 	isb	sy
 80108d4:	f3bf 8f4f 	dsb	sy
 80108d8:	60fb      	str	r3, [r7, #12]
}
 80108da:	bf00      	nop
 80108dc:	e7fe      	b.n	80108dc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80108de:	f000 ff89 	bl	80117f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80108e2:	4b1d      	ldr	r3, [pc, #116]	; (8010958 <xTaskCheckForTimeOut+0xbc>)
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	685b      	ldr	r3, [r3, #4]
 80108ec:	69ba      	ldr	r2, [r7, #24]
 80108ee:	1ad3      	subs	r3, r2, r3
 80108f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80108f2:	683b      	ldr	r3, [r7, #0]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108fa:	d102      	bne.n	8010902 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80108fc:	2300      	movs	r3, #0
 80108fe:	61fb      	str	r3, [r7, #28]
 8010900:	e023      	b.n	801094a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	681a      	ldr	r2, [r3, #0]
 8010906:	4b15      	ldr	r3, [pc, #84]	; (801095c <xTaskCheckForTimeOut+0xc0>)
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	429a      	cmp	r2, r3
 801090c:	d007      	beq.n	801091e <xTaskCheckForTimeOut+0x82>
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	685b      	ldr	r3, [r3, #4]
 8010912:	69ba      	ldr	r2, [r7, #24]
 8010914:	429a      	cmp	r2, r3
 8010916:	d302      	bcc.n	801091e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010918:	2301      	movs	r3, #1
 801091a:	61fb      	str	r3, [r7, #28]
 801091c:	e015      	b.n	801094a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801091e:	683b      	ldr	r3, [r7, #0]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	697a      	ldr	r2, [r7, #20]
 8010924:	429a      	cmp	r2, r3
 8010926:	d20b      	bcs.n	8010940 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010928:	683b      	ldr	r3, [r7, #0]
 801092a:	681a      	ldr	r2, [r3, #0]
 801092c:	697b      	ldr	r3, [r7, #20]
 801092e:	1ad2      	subs	r2, r2, r3
 8010930:	683b      	ldr	r3, [r7, #0]
 8010932:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010934:	6878      	ldr	r0, [r7, #4]
 8010936:	f7ff ff9b 	bl	8010870 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801093a:	2300      	movs	r3, #0
 801093c:	61fb      	str	r3, [r7, #28]
 801093e:	e004      	b.n	801094a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8010940:	683b      	ldr	r3, [r7, #0]
 8010942:	2200      	movs	r2, #0
 8010944:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010946:	2301      	movs	r3, #1
 8010948:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801094a:	f000 ff83 	bl	8011854 <vPortExitCritical>

	return xReturn;
 801094e:	69fb      	ldr	r3, [r7, #28]
}
 8010950:	4618      	mov	r0, r3
 8010952:	3720      	adds	r7, #32
 8010954:	46bd      	mov	sp, r7
 8010956:	bd80      	pop	{r7, pc}
 8010958:	20004cb4 	.word	0x20004cb4
 801095c:	20004cc8 	.word	0x20004cc8

08010960 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010960:	b480      	push	{r7}
 8010962:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010964:	4b03      	ldr	r3, [pc, #12]	; (8010974 <vTaskMissedYield+0x14>)
 8010966:	2201      	movs	r2, #1
 8010968:	601a      	str	r2, [r3, #0]
}
 801096a:	bf00      	nop
 801096c:	46bd      	mov	sp, r7
 801096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010972:	4770      	bx	lr
 8010974:	20004cc4 	.word	0x20004cc4

08010978 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b082      	sub	sp, #8
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010980:	f000 f852 	bl	8010a28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010984:	4b06      	ldr	r3, [pc, #24]	; (80109a0 <prvIdleTask+0x28>)
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	2b01      	cmp	r3, #1
 801098a:	d9f9      	bls.n	8010980 <prvIdleTask+0x8>
			{
				taskYIELD();
 801098c:	4b05      	ldr	r3, [pc, #20]	; (80109a4 <prvIdleTask+0x2c>)
 801098e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010992:	601a      	str	r2, [r3, #0]
 8010994:	f3bf 8f4f 	dsb	sy
 8010998:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801099c:	e7f0      	b.n	8010980 <prvIdleTask+0x8>
 801099e:	bf00      	nop
 80109a0:	200047e0 	.word	0x200047e0
 80109a4:	e000ed04 	.word	0xe000ed04

080109a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b082      	sub	sp, #8
 80109ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80109ae:	2300      	movs	r3, #0
 80109b0:	607b      	str	r3, [r7, #4]
 80109b2:	e00c      	b.n	80109ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80109b4:	687a      	ldr	r2, [r7, #4]
 80109b6:	4613      	mov	r3, r2
 80109b8:	009b      	lsls	r3, r3, #2
 80109ba:	4413      	add	r3, r2
 80109bc:	009b      	lsls	r3, r3, #2
 80109be:	4a12      	ldr	r2, [pc, #72]	; (8010a08 <prvInitialiseTaskLists+0x60>)
 80109c0:	4413      	add	r3, r2
 80109c2:	4618      	mov	r0, r3
 80109c4:	f7fe f906 	bl	800ebd4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	3301      	adds	r3, #1
 80109cc:	607b      	str	r3, [r7, #4]
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	2b37      	cmp	r3, #55	; 0x37
 80109d2:	d9ef      	bls.n	80109b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80109d4:	480d      	ldr	r0, [pc, #52]	; (8010a0c <prvInitialiseTaskLists+0x64>)
 80109d6:	f7fe f8fd 	bl	800ebd4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80109da:	480d      	ldr	r0, [pc, #52]	; (8010a10 <prvInitialiseTaskLists+0x68>)
 80109dc:	f7fe f8fa 	bl	800ebd4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80109e0:	480c      	ldr	r0, [pc, #48]	; (8010a14 <prvInitialiseTaskLists+0x6c>)
 80109e2:	f7fe f8f7 	bl	800ebd4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80109e6:	480c      	ldr	r0, [pc, #48]	; (8010a18 <prvInitialiseTaskLists+0x70>)
 80109e8:	f7fe f8f4 	bl	800ebd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80109ec:	480b      	ldr	r0, [pc, #44]	; (8010a1c <prvInitialiseTaskLists+0x74>)
 80109ee:	f7fe f8f1 	bl	800ebd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80109f2:	4b0b      	ldr	r3, [pc, #44]	; (8010a20 <prvInitialiseTaskLists+0x78>)
 80109f4:	4a05      	ldr	r2, [pc, #20]	; (8010a0c <prvInitialiseTaskLists+0x64>)
 80109f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80109f8:	4b0a      	ldr	r3, [pc, #40]	; (8010a24 <prvInitialiseTaskLists+0x7c>)
 80109fa:	4a05      	ldr	r2, [pc, #20]	; (8010a10 <prvInitialiseTaskLists+0x68>)
 80109fc:	601a      	str	r2, [r3, #0]
}
 80109fe:	bf00      	nop
 8010a00:	3708      	adds	r7, #8
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd80      	pop	{r7, pc}
 8010a06:	bf00      	nop
 8010a08:	200047e0 	.word	0x200047e0
 8010a0c:	20004c40 	.word	0x20004c40
 8010a10:	20004c54 	.word	0x20004c54
 8010a14:	20004c70 	.word	0x20004c70
 8010a18:	20004c84 	.word	0x20004c84
 8010a1c:	20004c9c 	.word	0x20004c9c
 8010a20:	20004c68 	.word	0x20004c68
 8010a24:	20004c6c 	.word	0x20004c6c

08010a28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b082      	sub	sp, #8
 8010a2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010a2e:	e019      	b.n	8010a64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010a30:	f000 fee0 	bl	80117f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a34:	4b10      	ldr	r3, [pc, #64]	; (8010a78 <prvCheckTasksWaitingTermination+0x50>)
 8010a36:	68db      	ldr	r3, [r3, #12]
 8010a38:	68db      	ldr	r3, [r3, #12]
 8010a3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	3304      	adds	r3, #4
 8010a40:	4618      	mov	r0, r3
 8010a42:	f7fe f951 	bl	800ece8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010a46:	4b0d      	ldr	r3, [pc, #52]	; (8010a7c <prvCheckTasksWaitingTermination+0x54>)
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	3b01      	subs	r3, #1
 8010a4c:	4a0b      	ldr	r2, [pc, #44]	; (8010a7c <prvCheckTasksWaitingTermination+0x54>)
 8010a4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010a50:	4b0b      	ldr	r3, [pc, #44]	; (8010a80 <prvCheckTasksWaitingTermination+0x58>)
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	3b01      	subs	r3, #1
 8010a56:	4a0a      	ldr	r2, [pc, #40]	; (8010a80 <prvCheckTasksWaitingTermination+0x58>)
 8010a58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010a5a:	f000 fefb 	bl	8011854 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010a5e:	6878      	ldr	r0, [r7, #4]
 8010a60:	f000 f810 	bl	8010a84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010a64:	4b06      	ldr	r3, [pc, #24]	; (8010a80 <prvCheckTasksWaitingTermination+0x58>)
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d1e1      	bne.n	8010a30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010a6c:	bf00      	nop
 8010a6e:	bf00      	nop
 8010a70:	3708      	adds	r7, #8
 8010a72:	46bd      	mov	sp, r7
 8010a74:	bd80      	pop	{r7, pc}
 8010a76:	bf00      	nop
 8010a78:	20004c84 	.word	0x20004c84
 8010a7c:	20004cb0 	.word	0x20004cb0
 8010a80:	20004c98 	.word	0x20004c98

08010a84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b084      	sub	sp, #16
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d108      	bne.n	8010aa8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	f001 f898 	bl	8011bd0 <vPortFree>
				vPortFree( pxTCB );
 8010aa0:	6878      	ldr	r0, [r7, #4]
 8010aa2:	f001 f895 	bl	8011bd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010aa6:	e018      	b.n	8010ada <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010aae:	2b01      	cmp	r3, #1
 8010ab0:	d103      	bne.n	8010aba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8010ab2:	6878      	ldr	r0, [r7, #4]
 8010ab4:	f001 f88c 	bl	8011bd0 <vPortFree>
	}
 8010ab8:	e00f      	b.n	8010ada <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010ac0:	2b02      	cmp	r3, #2
 8010ac2:	d00a      	beq.n	8010ada <prvDeleteTCB+0x56>
	__asm volatile
 8010ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ac8:	f383 8811 	msr	BASEPRI, r3
 8010acc:	f3bf 8f6f 	isb	sy
 8010ad0:	f3bf 8f4f 	dsb	sy
 8010ad4:	60fb      	str	r3, [r7, #12]
}
 8010ad6:	bf00      	nop
 8010ad8:	e7fe      	b.n	8010ad8 <prvDeleteTCB+0x54>
	}
 8010ada:	bf00      	nop
 8010adc:	3710      	adds	r7, #16
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	bd80      	pop	{r7, pc}
	...

08010ae4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010ae4:	b480      	push	{r7}
 8010ae6:	b083      	sub	sp, #12
 8010ae8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010aea:	4b0c      	ldr	r3, [pc, #48]	; (8010b1c <prvResetNextTaskUnblockTime+0x38>)
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d104      	bne.n	8010afe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010af4:	4b0a      	ldr	r3, [pc, #40]	; (8010b20 <prvResetNextTaskUnblockTime+0x3c>)
 8010af6:	f04f 32ff 	mov.w	r2, #4294967295
 8010afa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010afc:	e008      	b.n	8010b10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010afe:	4b07      	ldr	r3, [pc, #28]	; (8010b1c <prvResetNextTaskUnblockTime+0x38>)
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	68db      	ldr	r3, [r3, #12]
 8010b04:	68db      	ldr	r3, [r3, #12]
 8010b06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	685b      	ldr	r3, [r3, #4]
 8010b0c:	4a04      	ldr	r2, [pc, #16]	; (8010b20 <prvResetNextTaskUnblockTime+0x3c>)
 8010b0e:	6013      	str	r3, [r2, #0]
}
 8010b10:	bf00      	nop
 8010b12:	370c      	adds	r7, #12
 8010b14:	46bd      	mov	sp, r7
 8010b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b1a:	4770      	bx	lr
 8010b1c:	20004c68 	.word	0x20004c68
 8010b20:	20004cd0 	.word	0x20004cd0

08010b24 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8010b24:	b480      	push	{r7}
 8010b26:	b083      	sub	sp, #12
 8010b28:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8010b2a:	4b05      	ldr	r3, [pc, #20]	; (8010b40 <xTaskGetCurrentTaskHandle+0x1c>)
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8010b30:	687b      	ldr	r3, [r7, #4]
	}
 8010b32:	4618      	mov	r0, r3
 8010b34:	370c      	adds	r7, #12
 8010b36:	46bd      	mov	sp, r7
 8010b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b3c:	4770      	bx	lr
 8010b3e:	bf00      	nop
 8010b40:	200047dc 	.word	0x200047dc

08010b44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010b44:	b480      	push	{r7}
 8010b46:	b083      	sub	sp, #12
 8010b48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010b4a:	4b0b      	ldr	r3, [pc, #44]	; (8010b78 <xTaskGetSchedulerState+0x34>)
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d102      	bne.n	8010b58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010b52:	2301      	movs	r3, #1
 8010b54:	607b      	str	r3, [r7, #4]
 8010b56:	e008      	b.n	8010b6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010b58:	4b08      	ldr	r3, [pc, #32]	; (8010b7c <xTaskGetSchedulerState+0x38>)
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d102      	bne.n	8010b66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010b60:	2302      	movs	r3, #2
 8010b62:	607b      	str	r3, [r7, #4]
 8010b64:	e001      	b.n	8010b6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010b66:	2300      	movs	r3, #0
 8010b68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010b6a:	687b      	ldr	r3, [r7, #4]
	}
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	370c      	adds	r7, #12
 8010b70:	46bd      	mov	sp, r7
 8010b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b76:	4770      	bx	lr
 8010b78:	20004cbc 	.word	0x20004cbc
 8010b7c:	20004cd8 	.word	0x20004cd8

08010b80 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010b80:	b580      	push	{r7, lr}
 8010b82:	b084      	sub	sp, #16
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d051      	beq.n	8010c3a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010b96:	68bb      	ldr	r3, [r7, #8]
 8010b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b9a:	4b2a      	ldr	r3, [pc, #168]	; (8010c44 <xTaskPriorityInherit+0xc4>)
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ba0:	429a      	cmp	r2, r3
 8010ba2:	d241      	bcs.n	8010c28 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010ba4:	68bb      	ldr	r3, [r7, #8]
 8010ba6:	699b      	ldr	r3, [r3, #24]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	db06      	blt.n	8010bba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010bac:	4b25      	ldr	r3, [pc, #148]	; (8010c44 <xTaskPriorityInherit+0xc4>)
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bb2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010bb6:	68bb      	ldr	r3, [r7, #8]
 8010bb8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010bba:	68bb      	ldr	r3, [r7, #8]
 8010bbc:	6959      	ldr	r1, [r3, #20]
 8010bbe:	68bb      	ldr	r3, [r7, #8]
 8010bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010bc2:	4613      	mov	r3, r2
 8010bc4:	009b      	lsls	r3, r3, #2
 8010bc6:	4413      	add	r3, r2
 8010bc8:	009b      	lsls	r3, r3, #2
 8010bca:	4a1f      	ldr	r2, [pc, #124]	; (8010c48 <xTaskPriorityInherit+0xc8>)
 8010bcc:	4413      	add	r3, r2
 8010bce:	4299      	cmp	r1, r3
 8010bd0:	d122      	bne.n	8010c18 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010bd2:	68bb      	ldr	r3, [r7, #8]
 8010bd4:	3304      	adds	r3, #4
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	f7fe f886 	bl	800ece8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010bdc:	4b19      	ldr	r3, [pc, #100]	; (8010c44 <xTaskPriorityInherit+0xc4>)
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010be2:	68bb      	ldr	r3, [r7, #8]
 8010be4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010be6:	68bb      	ldr	r3, [r7, #8]
 8010be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010bea:	4b18      	ldr	r3, [pc, #96]	; (8010c4c <xTaskPriorityInherit+0xcc>)
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	429a      	cmp	r2, r3
 8010bf0:	d903      	bls.n	8010bfa <xTaskPriorityInherit+0x7a>
 8010bf2:	68bb      	ldr	r3, [r7, #8]
 8010bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bf6:	4a15      	ldr	r2, [pc, #84]	; (8010c4c <xTaskPriorityInherit+0xcc>)
 8010bf8:	6013      	str	r3, [r2, #0]
 8010bfa:	68bb      	ldr	r3, [r7, #8]
 8010bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010bfe:	4613      	mov	r3, r2
 8010c00:	009b      	lsls	r3, r3, #2
 8010c02:	4413      	add	r3, r2
 8010c04:	009b      	lsls	r3, r3, #2
 8010c06:	4a10      	ldr	r2, [pc, #64]	; (8010c48 <xTaskPriorityInherit+0xc8>)
 8010c08:	441a      	add	r2, r3
 8010c0a:	68bb      	ldr	r3, [r7, #8]
 8010c0c:	3304      	adds	r3, #4
 8010c0e:	4619      	mov	r1, r3
 8010c10:	4610      	mov	r0, r2
 8010c12:	f7fe f80c 	bl	800ec2e <vListInsertEnd>
 8010c16:	e004      	b.n	8010c22 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010c18:	4b0a      	ldr	r3, [pc, #40]	; (8010c44 <xTaskPriorityInherit+0xc4>)
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c1e:	68bb      	ldr	r3, [r7, #8]
 8010c20:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010c22:	2301      	movs	r3, #1
 8010c24:	60fb      	str	r3, [r7, #12]
 8010c26:	e008      	b.n	8010c3a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010c28:	68bb      	ldr	r3, [r7, #8]
 8010c2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010c2c:	4b05      	ldr	r3, [pc, #20]	; (8010c44 <xTaskPriorityInherit+0xc4>)
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c32:	429a      	cmp	r2, r3
 8010c34:	d201      	bcs.n	8010c3a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010c36:	2301      	movs	r3, #1
 8010c38:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010c3a:	68fb      	ldr	r3, [r7, #12]
	}
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	3710      	adds	r7, #16
 8010c40:	46bd      	mov	sp, r7
 8010c42:	bd80      	pop	{r7, pc}
 8010c44:	200047dc 	.word	0x200047dc
 8010c48:	200047e0 	.word	0x200047e0
 8010c4c:	20004cb8 	.word	0x20004cb8

08010c50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b086      	sub	sp, #24
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d056      	beq.n	8010d14 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010c66:	4b2e      	ldr	r3, [pc, #184]	; (8010d20 <xTaskPriorityDisinherit+0xd0>)
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	693a      	ldr	r2, [r7, #16]
 8010c6c:	429a      	cmp	r2, r3
 8010c6e:	d00a      	beq.n	8010c86 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c74:	f383 8811 	msr	BASEPRI, r3
 8010c78:	f3bf 8f6f 	isb	sy
 8010c7c:	f3bf 8f4f 	dsb	sy
 8010c80:	60fb      	str	r3, [r7, #12]
}
 8010c82:	bf00      	nop
 8010c84:	e7fe      	b.n	8010c84 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010c86:	693b      	ldr	r3, [r7, #16]
 8010c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d10a      	bne.n	8010ca4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8010c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c92:	f383 8811 	msr	BASEPRI, r3
 8010c96:	f3bf 8f6f 	isb	sy
 8010c9a:	f3bf 8f4f 	dsb	sy
 8010c9e:	60bb      	str	r3, [r7, #8]
}
 8010ca0:	bf00      	nop
 8010ca2:	e7fe      	b.n	8010ca2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010ca4:	693b      	ldr	r3, [r7, #16]
 8010ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ca8:	1e5a      	subs	r2, r3, #1
 8010caa:	693b      	ldr	r3, [r7, #16]
 8010cac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010cae:	693b      	ldr	r3, [r7, #16]
 8010cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cb2:	693b      	ldr	r3, [r7, #16]
 8010cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010cb6:	429a      	cmp	r2, r3
 8010cb8:	d02c      	beq.n	8010d14 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010cba:	693b      	ldr	r3, [r7, #16]
 8010cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d128      	bne.n	8010d14 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010cc2:	693b      	ldr	r3, [r7, #16]
 8010cc4:	3304      	adds	r3, #4
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	f7fe f80e 	bl	800ece8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010ccc:	693b      	ldr	r3, [r7, #16]
 8010cce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010cd0:	693b      	ldr	r3, [r7, #16]
 8010cd2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010cd4:	693b      	ldr	r3, [r7, #16]
 8010cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cd8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010cdc:	693b      	ldr	r3, [r7, #16]
 8010cde:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010ce0:	693b      	ldr	r3, [r7, #16]
 8010ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ce4:	4b0f      	ldr	r3, [pc, #60]	; (8010d24 <xTaskPriorityDisinherit+0xd4>)
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	429a      	cmp	r2, r3
 8010cea:	d903      	bls.n	8010cf4 <xTaskPriorityDisinherit+0xa4>
 8010cec:	693b      	ldr	r3, [r7, #16]
 8010cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cf0:	4a0c      	ldr	r2, [pc, #48]	; (8010d24 <xTaskPriorityDisinherit+0xd4>)
 8010cf2:	6013      	str	r3, [r2, #0]
 8010cf4:	693b      	ldr	r3, [r7, #16]
 8010cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cf8:	4613      	mov	r3, r2
 8010cfa:	009b      	lsls	r3, r3, #2
 8010cfc:	4413      	add	r3, r2
 8010cfe:	009b      	lsls	r3, r3, #2
 8010d00:	4a09      	ldr	r2, [pc, #36]	; (8010d28 <xTaskPriorityDisinherit+0xd8>)
 8010d02:	441a      	add	r2, r3
 8010d04:	693b      	ldr	r3, [r7, #16]
 8010d06:	3304      	adds	r3, #4
 8010d08:	4619      	mov	r1, r3
 8010d0a:	4610      	mov	r0, r2
 8010d0c:	f7fd ff8f 	bl	800ec2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010d10:	2301      	movs	r3, #1
 8010d12:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010d14:	697b      	ldr	r3, [r7, #20]
	}
 8010d16:	4618      	mov	r0, r3
 8010d18:	3718      	adds	r7, #24
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	bd80      	pop	{r7, pc}
 8010d1e:	bf00      	nop
 8010d20:	200047dc 	.word	0x200047dc
 8010d24:	20004cb8 	.word	0x20004cb8
 8010d28:	200047e0 	.word	0x200047e0

08010d2c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	b088      	sub	sp, #32
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]
 8010d34:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010d3a:	2301      	movs	r3, #1
 8010d3c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d06a      	beq.n	8010e1a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010d44:	69bb      	ldr	r3, [r7, #24]
 8010d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d10a      	bne.n	8010d62 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8010d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d50:	f383 8811 	msr	BASEPRI, r3
 8010d54:	f3bf 8f6f 	isb	sy
 8010d58:	f3bf 8f4f 	dsb	sy
 8010d5c:	60fb      	str	r3, [r7, #12]
}
 8010d5e:	bf00      	nop
 8010d60:	e7fe      	b.n	8010d60 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010d62:	69bb      	ldr	r3, [r7, #24]
 8010d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010d66:	683a      	ldr	r2, [r7, #0]
 8010d68:	429a      	cmp	r2, r3
 8010d6a:	d902      	bls.n	8010d72 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010d6c:	683b      	ldr	r3, [r7, #0]
 8010d6e:	61fb      	str	r3, [r7, #28]
 8010d70:	e002      	b.n	8010d78 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010d72:	69bb      	ldr	r3, [r7, #24]
 8010d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010d76:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010d78:	69bb      	ldr	r3, [r7, #24]
 8010d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d7c:	69fa      	ldr	r2, [r7, #28]
 8010d7e:	429a      	cmp	r2, r3
 8010d80:	d04b      	beq.n	8010e1a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010d82:	69bb      	ldr	r3, [r7, #24]
 8010d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d86:	697a      	ldr	r2, [r7, #20]
 8010d88:	429a      	cmp	r2, r3
 8010d8a:	d146      	bne.n	8010e1a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010d8c:	4b25      	ldr	r3, [pc, #148]	; (8010e24 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	69ba      	ldr	r2, [r7, #24]
 8010d92:	429a      	cmp	r2, r3
 8010d94:	d10a      	bne.n	8010dac <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8010d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d9a:	f383 8811 	msr	BASEPRI, r3
 8010d9e:	f3bf 8f6f 	isb	sy
 8010da2:	f3bf 8f4f 	dsb	sy
 8010da6:	60bb      	str	r3, [r7, #8]
}
 8010da8:	bf00      	nop
 8010daa:	e7fe      	b.n	8010daa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010dac:	69bb      	ldr	r3, [r7, #24]
 8010dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010db0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010db2:	69bb      	ldr	r3, [r7, #24]
 8010db4:	69fa      	ldr	r2, [r7, #28]
 8010db6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010db8:	69bb      	ldr	r3, [r7, #24]
 8010dba:	699b      	ldr	r3, [r3, #24]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	db04      	blt.n	8010dca <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010dc0:	69fb      	ldr	r3, [r7, #28]
 8010dc2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010dc6:	69bb      	ldr	r3, [r7, #24]
 8010dc8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010dca:	69bb      	ldr	r3, [r7, #24]
 8010dcc:	6959      	ldr	r1, [r3, #20]
 8010dce:	693a      	ldr	r2, [r7, #16]
 8010dd0:	4613      	mov	r3, r2
 8010dd2:	009b      	lsls	r3, r3, #2
 8010dd4:	4413      	add	r3, r2
 8010dd6:	009b      	lsls	r3, r3, #2
 8010dd8:	4a13      	ldr	r2, [pc, #76]	; (8010e28 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010dda:	4413      	add	r3, r2
 8010ddc:	4299      	cmp	r1, r3
 8010dde:	d11c      	bne.n	8010e1a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010de0:	69bb      	ldr	r3, [r7, #24]
 8010de2:	3304      	adds	r3, #4
 8010de4:	4618      	mov	r0, r3
 8010de6:	f7fd ff7f 	bl	800ece8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010dea:	69bb      	ldr	r3, [r7, #24]
 8010dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dee:	4b0f      	ldr	r3, [pc, #60]	; (8010e2c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	429a      	cmp	r2, r3
 8010df4:	d903      	bls.n	8010dfe <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8010df6:	69bb      	ldr	r3, [r7, #24]
 8010df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dfa:	4a0c      	ldr	r2, [pc, #48]	; (8010e2c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010dfc:	6013      	str	r3, [r2, #0]
 8010dfe:	69bb      	ldr	r3, [r7, #24]
 8010e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e02:	4613      	mov	r3, r2
 8010e04:	009b      	lsls	r3, r3, #2
 8010e06:	4413      	add	r3, r2
 8010e08:	009b      	lsls	r3, r3, #2
 8010e0a:	4a07      	ldr	r2, [pc, #28]	; (8010e28 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010e0c:	441a      	add	r2, r3
 8010e0e:	69bb      	ldr	r3, [r7, #24]
 8010e10:	3304      	adds	r3, #4
 8010e12:	4619      	mov	r1, r3
 8010e14:	4610      	mov	r0, r2
 8010e16:	f7fd ff0a 	bl	800ec2e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010e1a:	bf00      	nop
 8010e1c:	3720      	adds	r7, #32
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bd80      	pop	{r7, pc}
 8010e22:	bf00      	nop
 8010e24:	200047dc 	.word	0x200047dc
 8010e28:	200047e0 	.word	0x200047e0
 8010e2c:	20004cb8 	.word	0x20004cb8

08010e30 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010e30:	b480      	push	{r7}
 8010e32:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010e34:	4b07      	ldr	r3, [pc, #28]	; (8010e54 <pvTaskIncrementMutexHeldCount+0x24>)
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d004      	beq.n	8010e46 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010e3c:	4b05      	ldr	r3, [pc, #20]	; (8010e54 <pvTaskIncrementMutexHeldCount+0x24>)
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010e42:	3201      	adds	r2, #1
 8010e44:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8010e46:	4b03      	ldr	r3, [pc, #12]	; (8010e54 <pvTaskIncrementMutexHeldCount+0x24>)
 8010e48:	681b      	ldr	r3, [r3, #0]
	}
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e52:	4770      	bx	lr
 8010e54:	200047dc 	.word	0x200047dc

08010e58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b084      	sub	sp, #16
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
 8010e60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010e62:	4b21      	ldr	r3, [pc, #132]	; (8010ee8 <prvAddCurrentTaskToDelayedList+0x90>)
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010e68:	4b20      	ldr	r3, [pc, #128]	; (8010eec <prvAddCurrentTaskToDelayedList+0x94>)
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	3304      	adds	r3, #4
 8010e6e:	4618      	mov	r0, r3
 8010e70:	f7fd ff3a 	bl	800ece8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e7a:	d10a      	bne.n	8010e92 <prvAddCurrentTaskToDelayedList+0x3a>
 8010e7c:	683b      	ldr	r3, [r7, #0]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d007      	beq.n	8010e92 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010e82:	4b1a      	ldr	r3, [pc, #104]	; (8010eec <prvAddCurrentTaskToDelayedList+0x94>)
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	3304      	adds	r3, #4
 8010e88:	4619      	mov	r1, r3
 8010e8a:	4819      	ldr	r0, [pc, #100]	; (8010ef0 <prvAddCurrentTaskToDelayedList+0x98>)
 8010e8c:	f7fd fecf 	bl	800ec2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010e90:	e026      	b.n	8010ee0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010e92:	68fa      	ldr	r2, [r7, #12]
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	4413      	add	r3, r2
 8010e98:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010e9a:	4b14      	ldr	r3, [pc, #80]	; (8010eec <prvAddCurrentTaskToDelayedList+0x94>)
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	68ba      	ldr	r2, [r7, #8]
 8010ea0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010ea2:	68ba      	ldr	r2, [r7, #8]
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	429a      	cmp	r2, r3
 8010ea8:	d209      	bcs.n	8010ebe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010eaa:	4b12      	ldr	r3, [pc, #72]	; (8010ef4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010eac:	681a      	ldr	r2, [r3, #0]
 8010eae:	4b0f      	ldr	r3, [pc, #60]	; (8010eec <prvAddCurrentTaskToDelayedList+0x94>)
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	3304      	adds	r3, #4
 8010eb4:	4619      	mov	r1, r3
 8010eb6:	4610      	mov	r0, r2
 8010eb8:	f7fd fedd 	bl	800ec76 <vListInsert>
}
 8010ebc:	e010      	b.n	8010ee0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010ebe:	4b0e      	ldr	r3, [pc, #56]	; (8010ef8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010ec0:	681a      	ldr	r2, [r3, #0]
 8010ec2:	4b0a      	ldr	r3, [pc, #40]	; (8010eec <prvAddCurrentTaskToDelayedList+0x94>)
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	3304      	adds	r3, #4
 8010ec8:	4619      	mov	r1, r3
 8010eca:	4610      	mov	r0, r2
 8010ecc:	f7fd fed3 	bl	800ec76 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010ed0:	4b0a      	ldr	r3, [pc, #40]	; (8010efc <prvAddCurrentTaskToDelayedList+0xa4>)
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	68ba      	ldr	r2, [r7, #8]
 8010ed6:	429a      	cmp	r2, r3
 8010ed8:	d202      	bcs.n	8010ee0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010eda:	4a08      	ldr	r2, [pc, #32]	; (8010efc <prvAddCurrentTaskToDelayedList+0xa4>)
 8010edc:	68bb      	ldr	r3, [r7, #8]
 8010ede:	6013      	str	r3, [r2, #0]
}
 8010ee0:	bf00      	nop
 8010ee2:	3710      	adds	r7, #16
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	bd80      	pop	{r7, pc}
 8010ee8:	20004cb4 	.word	0x20004cb4
 8010eec:	200047dc 	.word	0x200047dc
 8010ef0:	20004c9c 	.word	0x20004c9c
 8010ef4:	20004c6c 	.word	0x20004c6c
 8010ef8:	20004c68 	.word	0x20004c68
 8010efc:	20004cd0 	.word	0x20004cd0

08010f00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b08a      	sub	sp, #40	; 0x28
 8010f04:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010f06:	2300      	movs	r3, #0
 8010f08:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010f0a:	f000 fb07 	bl	801151c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010f0e:	4b1c      	ldr	r3, [pc, #112]	; (8010f80 <xTimerCreateTimerTask+0x80>)
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d021      	beq.n	8010f5a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010f16:	2300      	movs	r3, #0
 8010f18:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010f1e:	1d3a      	adds	r2, r7, #4
 8010f20:	f107 0108 	add.w	r1, r7, #8
 8010f24:	f107 030c 	add.w	r3, r7, #12
 8010f28:	4618      	mov	r0, r3
 8010f2a:	f7fd fe39 	bl	800eba0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010f2e:	6879      	ldr	r1, [r7, #4]
 8010f30:	68bb      	ldr	r3, [r7, #8]
 8010f32:	68fa      	ldr	r2, [r7, #12]
 8010f34:	9202      	str	r2, [sp, #8]
 8010f36:	9301      	str	r3, [sp, #4]
 8010f38:	2302      	movs	r3, #2
 8010f3a:	9300      	str	r3, [sp, #0]
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	460a      	mov	r2, r1
 8010f40:	4910      	ldr	r1, [pc, #64]	; (8010f84 <xTimerCreateTimerTask+0x84>)
 8010f42:	4811      	ldr	r0, [pc, #68]	; (8010f88 <xTimerCreateTimerTask+0x88>)
 8010f44:	f7fe ffbe 	bl	800fec4 <xTaskCreateStatic>
 8010f48:	4603      	mov	r3, r0
 8010f4a:	4a10      	ldr	r2, [pc, #64]	; (8010f8c <xTimerCreateTimerTask+0x8c>)
 8010f4c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010f4e:	4b0f      	ldr	r3, [pc, #60]	; (8010f8c <xTimerCreateTimerTask+0x8c>)
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d001      	beq.n	8010f5a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010f56:	2301      	movs	r3, #1
 8010f58:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010f5a:	697b      	ldr	r3, [r7, #20]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d10a      	bne.n	8010f76 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8010f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f64:	f383 8811 	msr	BASEPRI, r3
 8010f68:	f3bf 8f6f 	isb	sy
 8010f6c:	f3bf 8f4f 	dsb	sy
 8010f70:	613b      	str	r3, [r7, #16]
}
 8010f72:	bf00      	nop
 8010f74:	e7fe      	b.n	8010f74 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010f76:	697b      	ldr	r3, [r7, #20]
}
 8010f78:	4618      	mov	r0, r3
 8010f7a:	3718      	adds	r7, #24
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	bd80      	pop	{r7, pc}
 8010f80:	20004d0c 	.word	0x20004d0c
 8010f84:	080245ac 	.word	0x080245ac
 8010f88:	080110c5 	.word	0x080110c5
 8010f8c:	20004d10 	.word	0x20004d10

08010f90 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b08a      	sub	sp, #40	; 0x28
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	60f8      	str	r0, [r7, #12]
 8010f98:	60b9      	str	r1, [r7, #8]
 8010f9a:	607a      	str	r2, [r7, #4]
 8010f9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d10a      	bne.n	8010fbe <xTimerGenericCommand+0x2e>
	__asm volatile
 8010fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fac:	f383 8811 	msr	BASEPRI, r3
 8010fb0:	f3bf 8f6f 	isb	sy
 8010fb4:	f3bf 8f4f 	dsb	sy
 8010fb8:	623b      	str	r3, [r7, #32]
}
 8010fba:	bf00      	nop
 8010fbc:	e7fe      	b.n	8010fbc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010fbe:	4b1a      	ldr	r3, [pc, #104]	; (8011028 <xTimerGenericCommand+0x98>)
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d02a      	beq.n	801101c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010fc6:	68bb      	ldr	r3, [r7, #8]
 8010fc8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010fd2:	68bb      	ldr	r3, [r7, #8]
 8010fd4:	2b05      	cmp	r3, #5
 8010fd6:	dc18      	bgt.n	801100a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010fd8:	f7ff fdb4 	bl	8010b44 <xTaskGetSchedulerState>
 8010fdc:	4603      	mov	r3, r0
 8010fde:	2b02      	cmp	r3, #2
 8010fe0:	d109      	bne.n	8010ff6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010fe2:	4b11      	ldr	r3, [pc, #68]	; (8011028 <xTimerGenericCommand+0x98>)
 8010fe4:	6818      	ldr	r0, [r3, #0]
 8010fe6:	f107 0110 	add.w	r1, r7, #16
 8010fea:	2300      	movs	r3, #0
 8010fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010fee:	f7fe f903 	bl	800f1f8 <xQueueGenericSend>
 8010ff2:	6278      	str	r0, [r7, #36]	; 0x24
 8010ff4:	e012      	b.n	801101c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010ff6:	4b0c      	ldr	r3, [pc, #48]	; (8011028 <xTimerGenericCommand+0x98>)
 8010ff8:	6818      	ldr	r0, [r3, #0]
 8010ffa:	f107 0110 	add.w	r1, r7, #16
 8010ffe:	2300      	movs	r3, #0
 8011000:	2200      	movs	r2, #0
 8011002:	f7fe f8f9 	bl	800f1f8 <xQueueGenericSend>
 8011006:	6278      	str	r0, [r7, #36]	; 0x24
 8011008:	e008      	b.n	801101c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801100a:	4b07      	ldr	r3, [pc, #28]	; (8011028 <xTimerGenericCommand+0x98>)
 801100c:	6818      	ldr	r0, [r3, #0]
 801100e:	f107 0110 	add.w	r1, r7, #16
 8011012:	2300      	movs	r3, #0
 8011014:	683a      	ldr	r2, [r7, #0]
 8011016:	f7fe f9ed 	bl	800f3f4 <xQueueGenericSendFromISR>
 801101a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801101c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801101e:	4618      	mov	r0, r3
 8011020:	3728      	adds	r7, #40	; 0x28
 8011022:	46bd      	mov	sp, r7
 8011024:	bd80      	pop	{r7, pc}
 8011026:	bf00      	nop
 8011028:	20004d0c 	.word	0x20004d0c

0801102c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801102c:	b580      	push	{r7, lr}
 801102e:	b088      	sub	sp, #32
 8011030:	af02      	add	r7, sp, #8
 8011032:	6078      	str	r0, [r7, #4]
 8011034:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011036:	4b22      	ldr	r3, [pc, #136]	; (80110c0 <prvProcessExpiredTimer+0x94>)
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	68db      	ldr	r3, [r3, #12]
 801103c:	68db      	ldr	r3, [r3, #12]
 801103e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011040:	697b      	ldr	r3, [r7, #20]
 8011042:	3304      	adds	r3, #4
 8011044:	4618      	mov	r0, r3
 8011046:	f7fd fe4f 	bl	800ece8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801104a:	697b      	ldr	r3, [r7, #20]
 801104c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011050:	f003 0304 	and.w	r3, r3, #4
 8011054:	2b00      	cmp	r3, #0
 8011056:	d022      	beq.n	801109e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011058:	697b      	ldr	r3, [r7, #20]
 801105a:	699a      	ldr	r2, [r3, #24]
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	18d1      	adds	r1, r2, r3
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	683a      	ldr	r2, [r7, #0]
 8011064:	6978      	ldr	r0, [r7, #20]
 8011066:	f000 f8d1 	bl	801120c <prvInsertTimerInActiveList>
 801106a:	4603      	mov	r3, r0
 801106c:	2b00      	cmp	r3, #0
 801106e:	d01f      	beq.n	80110b0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011070:	2300      	movs	r3, #0
 8011072:	9300      	str	r3, [sp, #0]
 8011074:	2300      	movs	r3, #0
 8011076:	687a      	ldr	r2, [r7, #4]
 8011078:	2100      	movs	r1, #0
 801107a:	6978      	ldr	r0, [r7, #20]
 801107c:	f7ff ff88 	bl	8010f90 <xTimerGenericCommand>
 8011080:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011082:	693b      	ldr	r3, [r7, #16]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d113      	bne.n	80110b0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8011088:	f04f 0350 	mov.w	r3, #80	; 0x50
 801108c:	f383 8811 	msr	BASEPRI, r3
 8011090:	f3bf 8f6f 	isb	sy
 8011094:	f3bf 8f4f 	dsb	sy
 8011098:	60fb      	str	r3, [r7, #12]
}
 801109a:	bf00      	nop
 801109c:	e7fe      	b.n	801109c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801109e:	697b      	ldr	r3, [r7, #20]
 80110a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80110a4:	f023 0301 	bic.w	r3, r3, #1
 80110a8:	b2da      	uxtb	r2, r3
 80110aa:	697b      	ldr	r3, [r7, #20]
 80110ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80110b0:	697b      	ldr	r3, [r7, #20]
 80110b2:	6a1b      	ldr	r3, [r3, #32]
 80110b4:	6978      	ldr	r0, [r7, #20]
 80110b6:	4798      	blx	r3
}
 80110b8:	bf00      	nop
 80110ba:	3718      	adds	r7, #24
 80110bc:	46bd      	mov	sp, r7
 80110be:	bd80      	pop	{r7, pc}
 80110c0:	20004d04 	.word	0x20004d04

080110c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b084      	sub	sp, #16
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80110cc:	f107 0308 	add.w	r3, r7, #8
 80110d0:	4618      	mov	r0, r3
 80110d2:	f000 f857 	bl	8011184 <prvGetNextExpireTime>
 80110d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80110d8:	68bb      	ldr	r3, [r7, #8]
 80110da:	4619      	mov	r1, r3
 80110dc:	68f8      	ldr	r0, [r7, #12]
 80110de:	f000 f803 	bl	80110e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80110e2:	f000 f8d5 	bl	8011290 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80110e6:	e7f1      	b.n	80110cc <prvTimerTask+0x8>

080110e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	b084      	sub	sp, #16
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	6078      	str	r0, [r7, #4]
 80110f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80110f2:	f7ff f923 	bl	801033c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80110f6:	f107 0308 	add.w	r3, r7, #8
 80110fa:	4618      	mov	r0, r3
 80110fc:	f000 f866 	bl	80111cc <prvSampleTimeNow>
 8011100:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011102:	68bb      	ldr	r3, [r7, #8]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d130      	bne.n	801116a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011108:	683b      	ldr	r3, [r7, #0]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d10a      	bne.n	8011124 <prvProcessTimerOrBlockTask+0x3c>
 801110e:	687a      	ldr	r2, [r7, #4]
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	429a      	cmp	r2, r3
 8011114:	d806      	bhi.n	8011124 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011116:	f7ff f91f 	bl	8010358 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801111a:	68f9      	ldr	r1, [r7, #12]
 801111c:	6878      	ldr	r0, [r7, #4]
 801111e:	f7ff ff85 	bl	801102c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011122:	e024      	b.n	801116e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011124:	683b      	ldr	r3, [r7, #0]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d008      	beq.n	801113c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801112a:	4b13      	ldr	r3, [pc, #76]	; (8011178 <prvProcessTimerOrBlockTask+0x90>)
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d101      	bne.n	8011138 <prvProcessTimerOrBlockTask+0x50>
 8011134:	2301      	movs	r3, #1
 8011136:	e000      	b.n	801113a <prvProcessTimerOrBlockTask+0x52>
 8011138:	2300      	movs	r3, #0
 801113a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801113c:	4b0f      	ldr	r3, [pc, #60]	; (801117c <prvProcessTimerOrBlockTask+0x94>)
 801113e:	6818      	ldr	r0, [r3, #0]
 8011140:	687a      	ldr	r2, [r7, #4]
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	1ad3      	subs	r3, r2, r3
 8011146:	683a      	ldr	r2, [r7, #0]
 8011148:	4619      	mov	r1, r3
 801114a:	f7fe fe87 	bl	800fe5c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801114e:	f7ff f903 	bl	8010358 <xTaskResumeAll>
 8011152:	4603      	mov	r3, r0
 8011154:	2b00      	cmp	r3, #0
 8011156:	d10a      	bne.n	801116e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011158:	4b09      	ldr	r3, [pc, #36]	; (8011180 <prvProcessTimerOrBlockTask+0x98>)
 801115a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801115e:	601a      	str	r2, [r3, #0]
 8011160:	f3bf 8f4f 	dsb	sy
 8011164:	f3bf 8f6f 	isb	sy
}
 8011168:	e001      	b.n	801116e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801116a:	f7ff f8f5 	bl	8010358 <xTaskResumeAll>
}
 801116e:	bf00      	nop
 8011170:	3710      	adds	r7, #16
 8011172:	46bd      	mov	sp, r7
 8011174:	bd80      	pop	{r7, pc}
 8011176:	bf00      	nop
 8011178:	20004d08 	.word	0x20004d08
 801117c:	20004d0c 	.word	0x20004d0c
 8011180:	e000ed04 	.word	0xe000ed04

08011184 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011184:	b480      	push	{r7}
 8011186:	b085      	sub	sp, #20
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801118c:	4b0e      	ldr	r3, [pc, #56]	; (80111c8 <prvGetNextExpireTime+0x44>)
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	2b00      	cmp	r3, #0
 8011194:	d101      	bne.n	801119a <prvGetNextExpireTime+0x16>
 8011196:	2201      	movs	r2, #1
 8011198:	e000      	b.n	801119c <prvGetNextExpireTime+0x18>
 801119a:	2200      	movs	r2, #0
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d105      	bne.n	80111b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80111a8:	4b07      	ldr	r3, [pc, #28]	; (80111c8 <prvGetNextExpireTime+0x44>)
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	68db      	ldr	r3, [r3, #12]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	60fb      	str	r3, [r7, #12]
 80111b2:	e001      	b.n	80111b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80111b4:	2300      	movs	r3, #0
 80111b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80111b8:	68fb      	ldr	r3, [r7, #12]
}
 80111ba:	4618      	mov	r0, r3
 80111bc:	3714      	adds	r7, #20
 80111be:	46bd      	mov	sp, r7
 80111c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c4:	4770      	bx	lr
 80111c6:	bf00      	nop
 80111c8:	20004d04 	.word	0x20004d04

080111cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80111cc:	b580      	push	{r7, lr}
 80111ce:	b084      	sub	sp, #16
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80111d4:	f7ff f95e 	bl	8010494 <xTaskGetTickCount>
 80111d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80111da:	4b0b      	ldr	r3, [pc, #44]	; (8011208 <prvSampleTimeNow+0x3c>)
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	68fa      	ldr	r2, [r7, #12]
 80111e0:	429a      	cmp	r2, r3
 80111e2:	d205      	bcs.n	80111f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80111e4:	f000 f936 	bl	8011454 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	2201      	movs	r2, #1
 80111ec:	601a      	str	r2, [r3, #0]
 80111ee:	e002      	b.n	80111f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	2200      	movs	r2, #0
 80111f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80111f6:	4a04      	ldr	r2, [pc, #16]	; (8011208 <prvSampleTimeNow+0x3c>)
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80111fc:	68fb      	ldr	r3, [r7, #12]
}
 80111fe:	4618      	mov	r0, r3
 8011200:	3710      	adds	r7, #16
 8011202:	46bd      	mov	sp, r7
 8011204:	bd80      	pop	{r7, pc}
 8011206:	bf00      	nop
 8011208:	20004d14 	.word	0x20004d14

0801120c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801120c:	b580      	push	{r7, lr}
 801120e:	b086      	sub	sp, #24
 8011210:	af00      	add	r7, sp, #0
 8011212:	60f8      	str	r0, [r7, #12]
 8011214:	60b9      	str	r1, [r7, #8]
 8011216:	607a      	str	r2, [r7, #4]
 8011218:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801121a:	2300      	movs	r3, #0
 801121c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	68ba      	ldr	r2, [r7, #8]
 8011222:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	68fa      	ldr	r2, [r7, #12]
 8011228:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801122a:	68ba      	ldr	r2, [r7, #8]
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	429a      	cmp	r2, r3
 8011230:	d812      	bhi.n	8011258 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011232:	687a      	ldr	r2, [r7, #4]
 8011234:	683b      	ldr	r3, [r7, #0]
 8011236:	1ad2      	subs	r2, r2, r3
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	699b      	ldr	r3, [r3, #24]
 801123c:	429a      	cmp	r2, r3
 801123e:	d302      	bcc.n	8011246 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011240:	2301      	movs	r3, #1
 8011242:	617b      	str	r3, [r7, #20]
 8011244:	e01b      	b.n	801127e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011246:	4b10      	ldr	r3, [pc, #64]	; (8011288 <prvInsertTimerInActiveList+0x7c>)
 8011248:	681a      	ldr	r2, [r3, #0]
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	3304      	adds	r3, #4
 801124e:	4619      	mov	r1, r3
 8011250:	4610      	mov	r0, r2
 8011252:	f7fd fd10 	bl	800ec76 <vListInsert>
 8011256:	e012      	b.n	801127e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011258:	687a      	ldr	r2, [r7, #4]
 801125a:	683b      	ldr	r3, [r7, #0]
 801125c:	429a      	cmp	r2, r3
 801125e:	d206      	bcs.n	801126e <prvInsertTimerInActiveList+0x62>
 8011260:	68ba      	ldr	r2, [r7, #8]
 8011262:	683b      	ldr	r3, [r7, #0]
 8011264:	429a      	cmp	r2, r3
 8011266:	d302      	bcc.n	801126e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011268:	2301      	movs	r3, #1
 801126a:	617b      	str	r3, [r7, #20]
 801126c:	e007      	b.n	801127e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801126e:	4b07      	ldr	r3, [pc, #28]	; (801128c <prvInsertTimerInActiveList+0x80>)
 8011270:	681a      	ldr	r2, [r3, #0]
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	3304      	adds	r3, #4
 8011276:	4619      	mov	r1, r3
 8011278:	4610      	mov	r0, r2
 801127a:	f7fd fcfc 	bl	800ec76 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801127e:	697b      	ldr	r3, [r7, #20]
}
 8011280:	4618      	mov	r0, r3
 8011282:	3718      	adds	r7, #24
 8011284:	46bd      	mov	sp, r7
 8011286:	bd80      	pop	{r7, pc}
 8011288:	20004d08 	.word	0x20004d08
 801128c:	20004d04 	.word	0x20004d04

08011290 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011290:	b580      	push	{r7, lr}
 8011292:	b08e      	sub	sp, #56	; 0x38
 8011294:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011296:	e0ca      	b.n	801142e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	2b00      	cmp	r3, #0
 801129c:	da18      	bge.n	80112d0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801129e:	1d3b      	adds	r3, r7, #4
 80112a0:	3304      	adds	r3, #4
 80112a2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80112a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d10a      	bne.n	80112c0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80112aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112ae:	f383 8811 	msr	BASEPRI, r3
 80112b2:	f3bf 8f6f 	isb	sy
 80112b6:	f3bf 8f4f 	dsb	sy
 80112ba:	61fb      	str	r3, [r7, #28]
}
 80112bc:	bf00      	nop
 80112be:	e7fe      	b.n	80112be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80112c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80112c6:	6850      	ldr	r0, [r2, #4]
 80112c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80112ca:	6892      	ldr	r2, [r2, #8]
 80112cc:	4611      	mov	r1, r2
 80112ce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	f2c0 80aa 	blt.w	801142c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80112dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112de:	695b      	ldr	r3, [r3, #20]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d004      	beq.n	80112ee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80112e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112e6:	3304      	adds	r3, #4
 80112e8:	4618      	mov	r0, r3
 80112ea:	f7fd fcfd 	bl	800ece8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80112ee:	463b      	mov	r3, r7
 80112f0:	4618      	mov	r0, r3
 80112f2:	f7ff ff6b 	bl	80111cc <prvSampleTimeNow>
 80112f6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	2b09      	cmp	r3, #9
 80112fc:	f200 8097 	bhi.w	801142e <prvProcessReceivedCommands+0x19e>
 8011300:	a201      	add	r2, pc, #4	; (adr r2, 8011308 <prvProcessReceivedCommands+0x78>)
 8011302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011306:	bf00      	nop
 8011308:	08011331 	.word	0x08011331
 801130c:	08011331 	.word	0x08011331
 8011310:	08011331 	.word	0x08011331
 8011314:	080113a5 	.word	0x080113a5
 8011318:	080113b9 	.word	0x080113b9
 801131c:	08011403 	.word	0x08011403
 8011320:	08011331 	.word	0x08011331
 8011324:	08011331 	.word	0x08011331
 8011328:	080113a5 	.word	0x080113a5
 801132c:	080113b9 	.word	0x080113b9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011332:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011336:	f043 0301 	orr.w	r3, r3, #1
 801133a:	b2da      	uxtb	r2, r3
 801133c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801133e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011342:	68ba      	ldr	r2, [r7, #8]
 8011344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011346:	699b      	ldr	r3, [r3, #24]
 8011348:	18d1      	adds	r1, r2, r3
 801134a:	68bb      	ldr	r3, [r7, #8]
 801134c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801134e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011350:	f7ff ff5c 	bl	801120c <prvInsertTimerInActiveList>
 8011354:	4603      	mov	r3, r0
 8011356:	2b00      	cmp	r3, #0
 8011358:	d069      	beq.n	801142e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801135a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801135c:	6a1b      	ldr	r3, [r3, #32]
 801135e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011360:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011364:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011368:	f003 0304 	and.w	r3, r3, #4
 801136c:	2b00      	cmp	r3, #0
 801136e:	d05e      	beq.n	801142e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011370:	68ba      	ldr	r2, [r7, #8]
 8011372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011374:	699b      	ldr	r3, [r3, #24]
 8011376:	441a      	add	r2, r3
 8011378:	2300      	movs	r3, #0
 801137a:	9300      	str	r3, [sp, #0]
 801137c:	2300      	movs	r3, #0
 801137e:	2100      	movs	r1, #0
 8011380:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011382:	f7ff fe05 	bl	8010f90 <xTimerGenericCommand>
 8011386:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011388:	6a3b      	ldr	r3, [r7, #32]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d14f      	bne.n	801142e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801138e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011392:	f383 8811 	msr	BASEPRI, r3
 8011396:	f3bf 8f6f 	isb	sy
 801139a:	f3bf 8f4f 	dsb	sy
 801139e:	61bb      	str	r3, [r7, #24]
}
 80113a0:	bf00      	nop
 80113a2:	e7fe      	b.n	80113a2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80113a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80113aa:	f023 0301 	bic.w	r3, r3, #1
 80113ae:	b2da      	uxtb	r2, r3
 80113b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80113b6:	e03a      	b.n	801142e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80113b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80113be:	f043 0301 	orr.w	r3, r3, #1
 80113c2:	b2da      	uxtb	r2, r3
 80113c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80113ca:	68ba      	ldr	r2, [r7, #8]
 80113cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80113d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113d2:	699b      	ldr	r3, [r3, #24]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d10a      	bne.n	80113ee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80113d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113dc:	f383 8811 	msr	BASEPRI, r3
 80113e0:	f3bf 8f6f 	isb	sy
 80113e4:	f3bf 8f4f 	dsb	sy
 80113e8:	617b      	str	r3, [r7, #20]
}
 80113ea:	bf00      	nop
 80113ec:	e7fe      	b.n	80113ec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80113ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113f0:	699a      	ldr	r2, [r3, #24]
 80113f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113f4:	18d1      	adds	r1, r2, r3
 80113f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80113fc:	f7ff ff06 	bl	801120c <prvInsertTimerInActiveList>
					break;
 8011400:	e015      	b.n	801142e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011404:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011408:	f003 0302 	and.w	r3, r3, #2
 801140c:	2b00      	cmp	r3, #0
 801140e:	d103      	bne.n	8011418 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8011410:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011412:	f000 fbdd 	bl	8011bd0 <vPortFree>
 8011416:	e00a      	b.n	801142e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801141a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801141e:	f023 0301 	bic.w	r3, r3, #1
 8011422:	b2da      	uxtb	r2, r3
 8011424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011426:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801142a:	e000      	b.n	801142e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801142c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801142e:	4b08      	ldr	r3, [pc, #32]	; (8011450 <prvProcessReceivedCommands+0x1c0>)
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	1d39      	adds	r1, r7, #4
 8011434:	2200      	movs	r2, #0
 8011436:	4618      	mov	r0, r3
 8011438:	f7fe f904 	bl	800f644 <xQueueReceive>
 801143c:	4603      	mov	r3, r0
 801143e:	2b00      	cmp	r3, #0
 8011440:	f47f af2a 	bne.w	8011298 <prvProcessReceivedCommands+0x8>
	}
}
 8011444:	bf00      	nop
 8011446:	bf00      	nop
 8011448:	3730      	adds	r7, #48	; 0x30
 801144a:	46bd      	mov	sp, r7
 801144c:	bd80      	pop	{r7, pc}
 801144e:	bf00      	nop
 8011450:	20004d0c 	.word	0x20004d0c

08011454 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011454:	b580      	push	{r7, lr}
 8011456:	b088      	sub	sp, #32
 8011458:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801145a:	e048      	b.n	80114ee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801145c:	4b2d      	ldr	r3, [pc, #180]	; (8011514 <prvSwitchTimerLists+0xc0>)
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	68db      	ldr	r3, [r3, #12]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011466:	4b2b      	ldr	r3, [pc, #172]	; (8011514 <prvSwitchTimerLists+0xc0>)
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	68db      	ldr	r3, [r3, #12]
 801146c:	68db      	ldr	r3, [r3, #12]
 801146e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	3304      	adds	r3, #4
 8011474:	4618      	mov	r0, r3
 8011476:	f7fd fc37 	bl	800ece8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	6a1b      	ldr	r3, [r3, #32]
 801147e:	68f8      	ldr	r0, [r7, #12]
 8011480:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011488:	f003 0304 	and.w	r3, r3, #4
 801148c:	2b00      	cmp	r3, #0
 801148e:	d02e      	beq.n	80114ee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	699b      	ldr	r3, [r3, #24]
 8011494:	693a      	ldr	r2, [r7, #16]
 8011496:	4413      	add	r3, r2
 8011498:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801149a:	68ba      	ldr	r2, [r7, #8]
 801149c:	693b      	ldr	r3, [r7, #16]
 801149e:	429a      	cmp	r2, r3
 80114a0:	d90e      	bls.n	80114c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	68ba      	ldr	r2, [r7, #8]
 80114a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	68fa      	ldr	r2, [r7, #12]
 80114ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80114ae:	4b19      	ldr	r3, [pc, #100]	; (8011514 <prvSwitchTimerLists+0xc0>)
 80114b0:	681a      	ldr	r2, [r3, #0]
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	3304      	adds	r3, #4
 80114b6:	4619      	mov	r1, r3
 80114b8:	4610      	mov	r0, r2
 80114ba:	f7fd fbdc 	bl	800ec76 <vListInsert>
 80114be:	e016      	b.n	80114ee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80114c0:	2300      	movs	r3, #0
 80114c2:	9300      	str	r3, [sp, #0]
 80114c4:	2300      	movs	r3, #0
 80114c6:	693a      	ldr	r2, [r7, #16]
 80114c8:	2100      	movs	r1, #0
 80114ca:	68f8      	ldr	r0, [r7, #12]
 80114cc:	f7ff fd60 	bl	8010f90 <xTimerGenericCommand>
 80114d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d10a      	bne.n	80114ee <prvSwitchTimerLists+0x9a>
	__asm volatile
 80114d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114dc:	f383 8811 	msr	BASEPRI, r3
 80114e0:	f3bf 8f6f 	isb	sy
 80114e4:	f3bf 8f4f 	dsb	sy
 80114e8:	603b      	str	r3, [r7, #0]
}
 80114ea:	bf00      	nop
 80114ec:	e7fe      	b.n	80114ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80114ee:	4b09      	ldr	r3, [pc, #36]	; (8011514 <prvSwitchTimerLists+0xc0>)
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d1b1      	bne.n	801145c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80114f8:	4b06      	ldr	r3, [pc, #24]	; (8011514 <prvSwitchTimerLists+0xc0>)
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80114fe:	4b06      	ldr	r3, [pc, #24]	; (8011518 <prvSwitchTimerLists+0xc4>)
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	4a04      	ldr	r2, [pc, #16]	; (8011514 <prvSwitchTimerLists+0xc0>)
 8011504:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011506:	4a04      	ldr	r2, [pc, #16]	; (8011518 <prvSwitchTimerLists+0xc4>)
 8011508:	697b      	ldr	r3, [r7, #20]
 801150a:	6013      	str	r3, [r2, #0]
}
 801150c:	bf00      	nop
 801150e:	3718      	adds	r7, #24
 8011510:	46bd      	mov	sp, r7
 8011512:	bd80      	pop	{r7, pc}
 8011514:	20004d04 	.word	0x20004d04
 8011518:	20004d08 	.word	0x20004d08

0801151c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801151c:	b580      	push	{r7, lr}
 801151e:	b082      	sub	sp, #8
 8011520:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011522:	f000 f967 	bl	80117f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011526:	4b15      	ldr	r3, [pc, #84]	; (801157c <prvCheckForValidListAndQueue+0x60>)
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d120      	bne.n	8011570 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801152e:	4814      	ldr	r0, [pc, #80]	; (8011580 <prvCheckForValidListAndQueue+0x64>)
 8011530:	f7fd fb50 	bl	800ebd4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011534:	4813      	ldr	r0, [pc, #76]	; (8011584 <prvCheckForValidListAndQueue+0x68>)
 8011536:	f7fd fb4d 	bl	800ebd4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801153a:	4b13      	ldr	r3, [pc, #76]	; (8011588 <prvCheckForValidListAndQueue+0x6c>)
 801153c:	4a10      	ldr	r2, [pc, #64]	; (8011580 <prvCheckForValidListAndQueue+0x64>)
 801153e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011540:	4b12      	ldr	r3, [pc, #72]	; (801158c <prvCheckForValidListAndQueue+0x70>)
 8011542:	4a10      	ldr	r2, [pc, #64]	; (8011584 <prvCheckForValidListAndQueue+0x68>)
 8011544:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011546:	2300      	movs	r3, #0
 8011548:	9300      	str	r3, [sp, #0]
 801154a:	4b11      	ldr	r3, [pc, #68]	; (8011590 <prvCheckForValidListAndQueue+0x74>)
 801154c:	4a11      	ldr	r2, [pc, #68]	; (8011594 <prvCheckForValidListAndQueue+0x78>)
 801154e:	2110      	movs	r1, #16
 8011550:	200a      	movs	r0, #10
 8011552:	f7fd fc5b 	bl	800ee0c <xQueueGenericCreateStatic>
 8011556:	4603      	mov	r3, r0
 8011558:	4a08      	ldr	r2, [pc, #32]	; (801157c <prvCheckForValidListAndQueue+0x60>)
 801155a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801155c:	4b07      	ldr	r3, [pc, #28]	; (801157c <prvCheckForValidListAndQueue+0x60>)
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d005      	beq.n	8011570 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011564:	4b05      	ldr	r3, [pc, #20]	; (801157c <prvCheckForValidListAndQueue+0x60>)
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	490b      	ldr	r1, [pc, #44]	; (8011598 <prvCheckForValidListAndQueue+0x7c>)
 801156a:	4618      	mov	r0, r3
 801156c:	f7fe fc22 	bl	800fdb4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011570:	f000 f970 	bl	8011854 <vPortExitCritical>
}
 8011574:	bf00      	nop
 8011576:	46bd      	mov	sp, r7
 8011578:	bd80      	pop	{r7, pc}
 801157a:	bf00      	nop
 801157c:	20004d0c 	.word	0x20004d0c
 8011580:	20004cdc 	.word	0x20004cdc
 8011584:	20004cf0 	.word	0x20004cf0
 8011588:	20004d04 	.word	0x20004d04
 801158c:	20004d08 	.word	0x20004d08
 8011590:	20004db8 	.word	0x20004db8
 8011594:	20004d18 	.word	0x20004d18
 8011598:	080245b4 	.word	0x080245b4

0801159c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801159c:	b480      	push	{r7}
 801159e:	b085      	sub	sp, #20
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	60f8      	str	r0, [r7, #12]
 80115a4:	60b9      	str	r1, [r7, #8]
 80115a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	3b04      	subs	r3, #4
 80115ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80115b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	3b04      	subs	r3, #4
 80115ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80115bc:	68bb      	ldr	r3, [r7, #8]
 80115be:	f023 0201 	bic.w	r2, r3, #1
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	3b04      	subs	r3, #4
 80115ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80115cc:	4a0c      	ldr	r2, [pc, #48]	; (8011600 <pxPortInitialiseStack+0x64>)
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	3b14      	subs	r3, #20
 80115d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80115d8:	687a      	ldr	r2, [r7, #4]
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	3b04      	subs	r3, #4
 80115e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	f06f 0202 	mvn.w	r2, #2
 80115ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	3b20      	subs	r3, #32
 80115f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80115f2:	68fb      	ldr	r3, [r7, #12]
}
 80115f4:	4618      	mov	r0, r3
 80115f6:	3714      	adds	r7, #20
 80115f8:	46bd      	mov	sp, r7
 80115fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115fe:	4770      	bx	lr
 8011600:	08011605 	.word	0x08011605

08011604 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011604:	b480      	push	{r7}
 8011606:	b085      	sub	sp, #20
 8011608:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801160a:	2300      	movs	r3, #0
 801160c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801160e:	4b12      	ldr	r3, [pc, #72]	; (8011658 <prvTaskExitError+0x54>)
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011616:	d00a      	beq.n	801162e <prvTaskExitError+0x2a>
	__asm volatile
 8011618:	f04f 0350 	mov.w	r3, #80	; 0x50
 801161c:	f383 8811 	msr	BASEPRI, r3
 8011620:	f3bf 8f6f 	isb	sy
 8011624:	f3bf 8f4f 	dsb	sy
 8011628:	60fb      	str	r3, [r7, #12]
}
 801162a:	bf00      	nop
 801162c:	e7fe      	b.n	801162c <prvTaskExitError+0x28>
	__asm volatile
 801162e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011632:	f383 8811 	msr	BASEPRI, r3
 8011636:	f3bf 8f6f 	isb	sy
 801163a:	f3bf 8f4f 	dsb	sy
 801163e:	60bb      	str	r3, [r7, #8]
}
 8011640:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011642:	bf00      	nop
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d0fc      	beq.n	8011644 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801164a:	bf00      	nop
 801164c:	bf00      	nop
 801164e:	3714      	adds	r7, #20
 8011650:	46bd      	mov	sp, r7
 8011652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011656:	4770      	bx	lr
 8011658:	2000000c 	.word	0x2000000c
 801165c:	00000000 	.word	0x00000000

08011660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011660:	4b07      	ldr	r3, [pc, #28]	; (8011680 <pxCurrentTCBConst2>)
 8011662:	6819      	ldr	r1, [r3, #0]
 8011664:	6808      	ldr	r0, [r1, #0]
 8011666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801166a:	f380 8809 	msr	PSP, r0
 801166e:	f3bf 8f6f 	isb	sy
 8011672:	f04f 0000 	mov.w	r0, #0
 8011676:	f380 8811 	msr	BASEPRI, r0
 801167a:	4770      	bx	lr
 801167c:	f3af 8000 	nop.w

08011680 <pxCurrentTCBConst2>:
 8011680:	200047dc 	.word	0x200047dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011684:	bf00      	nop
 8011686:	bf00      	nop

08011688 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011688:	4808      	ldr	r0, [pc, #32]	; (80116ac <prvPortStartFirstTask+0x24>)
 801168a:	6800      	ldr	r0, [r0, #0]
 801168c:	6800      	ldr	r0, [r0, #0]
 801168e:	f380 8808 	msr	MSP, r0
 8011692:	f04f 0000 	mov.w	r0, #0
 8011696:	f380 8814 	msr	CONTROL, r0
 801169a:	b662      	cpsie	i
 801169c:	b661      	cpsie	f
 801169e:	f3bf 8f4f 	dsb	sy
 80116a2:	f3bf 8f6f 	isb	sy
 80116a6:	df00      	svc	0
 80116a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80116aa:	bf00      	nop
 80116ac:	e000ed08 	.word	0xe000ed08

080116b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80116b0:	b580      	push	{r7, lr}
 80116b2:	b086      	sub	sp, #24
 80116b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80116b6:	4b46      	ldr	r3, [pc, #280]	; (80117d0 <xPortStartScheduler+0x120>)
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	4a46      	ldr	r2, [pc, #280]	; (80117d4 <xPortStartScheduler+0x124>)
 80116bc:	4293      	cmp	r3, r2
 80116be:	d10a      	bne.n	80116d6 <xPortStartScheduler+0x26>
	__asm volatile
 80116c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116c4:	f383 8811 	msr	BASEPRI, r3
 80116c8:	f3bf 8f6f 	isb	sy
 80116cc:	f3bf 8f4f 	dsb	sy
 80116d0:	613b      	str	r3, [r7, #16]
}
 80116d2:	bf00      	nop
 80116d4:	e7fe      	b.n	80116d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80116d6:	4b3e      	ldr	r3, [pc, #248]	; (80117d0 <xPortStartScheduler+0x120>)
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	4a3f      	ldr	r2, [pc, #252]	; (80117d8 <xPortStartScheduler+0x128>)
 80116dc:	4293      	cmp	r3, r2
 80116de:	d10a      	bne.n	80116f6 <xPortStartScheduler+0x46>
	__asm volatile
 80116e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116e4:	f383 8811 	msr	BASEPRI, r3
 80116e8:	f3bf 8f6f 	isb	sy
 80116ec:	f3bf 8f4f 	dsb	sy
 80116f0:	60fb      	str	r3, [r7, #12]
}
 80116f2:	bf00      	nop
 80116f4:	e7fe      	b.n	80116f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80116f6:	4b39      	ldr	r3, [pc, #228]	; (80117dc <xPortStartScheduler+0x12c>)
 80116f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80116fa:	697b      	ldr	r3, [r7, #20]
 80116fc:	781b      	ldrb	r3, [r3, #0]
 80116fe:	b2db      	uxtb	r3, r3
 8011700:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011702:	697b      	ldr	r3, [r7, #20]
 8011704:	22ff      	movs	r2, #255	; 0xff
 8011706:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011708:	697b      	ldr	r3, [r7, #20]
 801170a:	781b      	ldrb	r3, [r3, #0]
 801170c:	b2db      	uxtb	r3, r3
 801170e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011710:	78fb      	ldrb	r3, [r7, #3]
 8011712:	b2db      	uxtb	r3, r3
 8011714:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011718:	b2da      	uxtb	r2, r3
 801171a:	4b31      	ldr	r3, [pc, #196]	; (80117e0 <xPortStartScheduler+0x130>)
 801171c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801171e:	4b31      	ldr	r3, [pc, #196]	; (80117e4 <xPortStartScheduler+0x134>)
 8011720:	2207      	movs	r2, #7
 8011722:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011724:	e009      	b.n	801173a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8011726:	4b2f      	ldr	r3, [pc, #188]	; (80117e4 <xPortStartScheduler+0x134>)
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	3b01      	subs	r3, #1
 801172c:	4a2d      	ldr	r2, [pc, #180]	; (80117e4 <xPortStartScheduler+0x134>)
 801172e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011730:	78fb      	ldrb	r3, [r7, #3]
 8011732:	b2db      	uxtb	r3, r3
 8011734:	005b      	lsls	r3, r3, #1
 8011736:	b2db      	uxtb	r3, r3
 8011738:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801173a:	78fb      	ldrb	r3, [r7, #3]
 801173c:	b2db      	uxtb	r3, r3
 801173e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011742:	2b80      	cmp	r3, #128	; 0x80
 8011744:	d0ef      	beq.n	8011726 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011746:	4b27      	ldr	r3, [pc, #156]	; (80117e4 <xPortStartScheduler+0x134>)
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	f1c3 0307 	rsb	r3, r3, #7
 801174e:	2b04      	cmp	r3, #4
 8011750:	d00a      	beq.n	8011768 <xPortStartScheduler+0xb8>
	__asm volatile
 8011752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011756:	f383 8811 	msr	BASEPRI, r3
 801175a:	f3bf 8f6f 	isb	sy
 801175e:	f3bf 8f4f 	dsb	sy
 8011762:	60bb      	str	r3, [r7, #8]
}
 8011764:	bf00      	nop
 8011766:	e7fe      	b.n	8011766 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011768:	4b1e      	ldr	r3, [pc, #120]	; (80117e4 <xPortStartScheduler+0x134>)
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	021b      	lsls	r3, r3, #8
 801176e:	4a1d      	ldr	r2, [pc, #116]	; (80117e4 <xPortStartScheduler+0x134>)
 8011770:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011772:	4b1c      	ldr	r3, [pc, #112]	; (80117e4 <xPortStartScheduler+0x134>)
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801177a:	4a1a      	ldr	r2, [pc, #104]	; (80117e4 <xPortStartScheduler+0x134>)
 801177c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	b2da      	uxtb	r2, r3
 8011782:	697b      	ldr	r3, [r7, #20]
 8011784:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011786:	4b18      	ldr	r3, [pc, #96]	; (80117e8 <xPortStartScheduler+0x138>)
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	4a17      	ldr	r2, [pc, #92]	; (80117e8 <xPortStartScheduler+0x138>)
 801178c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011790:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011792:	4b15      	ldr	r3, [pc, #84]	; (80117e8 <xPortStartScheduler+0x138>)
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	4a14      	ldr	r2, [pc, #80]	; (80117e8 <xPortStartScheduler+0x138>)
 8011798:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801179c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801179e:	f000 f8dd 	bl	801195c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80117a2:	4b12      	ldr	r3, [pc, #72]	; (80117ec <xPortStartScheduler+0x13c>)
 80117a4:	2200      	movs	r2, #0
 80117a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80117a8:	f000 f8fc 	bl	80119a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80117ac:	4b10      	ldr	r3, [pc, #64]	; (80117f0 <xPortStartScheduler+0x140>)
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	4a0f      	ldr	r2, [pc, #60]	; (80117f0 <xPortStartScheduler+0x140>)
 80117b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80117b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80117b8:	f7ff ff66 	bl	8011688 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80117bc:	f7fe ff46 	bl	801064c <vTaskSwitchContext>
	prvTaskExitError();
 80117c0:	f7ff ff20 	bl	8011604 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80117c4:	2300      	movs	r3, #0
}
 80117c6:	4618      	mov	r0, r3
 80117c8:	3718      	adds	r7, #24
 80117ca:	46bd      	mov	sp, r7
 80117cc:	bd80      	pop	{r7, pc}
 80117ce:	bf00      	nop
 80117d0:	e000ed00 	.word	0xe000ed00
 80117d4:	410fc271 	.word	0x410fc271
 80117d8:	410fc270 	.word	0x410fc270
 80117dc:	e000e400 	.word	0xe000e400
 80117e0:	20004e08 	.word	0x20004e08
 80117e4:	20004e0c 	.word	0x20004e0c
 80117e8:	e000ed20 	.word	0xe000ed20
 80117ec:	2000000c 	.word	0x2000000c
 80117f0:	e000ef34 	.word	0xe000ef34

080117f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80117f4:	b480      	push	{r7}
 80117f6:	b083      	sub	sp, #12
 80117f8:	af00      	add	r7, sp, #0
	__asm volatile
 80117fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117fe:	f383 8811 	msr	BASEPRI, r3
 8011802:	f3bf 8f6f 	isb	sy
 8011806:	f3bf 8f4f 	dsb	sy
 801180a:	607b      	str	r3, [r7, #4]
}
 801180c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801180e:	4b0f      	ldr	r3, [pc, #60]	; (801184c <vPortEnterCritical+0x58>)
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	3301      	adds	r3, #1
 8011814:	4a0d      	ldr	r2, [pc, #52]	; (801184c <vPortEnterCritical+0x58>)
 8011816:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011818:	4b0c      	ldr	r3, [pc, #48]	; (801184c <vPortEnterCritical+0x58>)
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	2b01      	cmp	r3, #1
 801181e:	d10f      	bne.n	8011840 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011820:	4b0b      	ldr	r3, [pc, #44]	; (8011850 <vPortEnterCritical+0x5c>)
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	b2db      	uxtb	r3, r3
 8011826:	2b00      	cmp	r3, #0
 8011828:	d00a      	beq.n	8011840 <vPortEnterCritical+0x4c>
	__asm volatile
 801182a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801182e:	f383 8811 	msr	BASEPRI, r3
 8011832:	f3bf 8f6f 	isb	sy
 8011836:	f3bf 8f4f 	dsb	sy
 801183a:	603b      	str	r3, [r7, #0]
}
 801183c:	bf00      	nop
 801183e:	e7fe      	b.n	801183e <vPortEnterCritical+0x4a>
	}
}
 8011840:	bf00      	nop
 8011842:	370c      	adds	r7, #12
 8011844:	46bd      	mov	sp, r7
 8011846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184a:	4770      	bx	lr
 801184c:	2000000c 	.word	0x2000000c
 8011850:	e000ed04 	.word	0xe000ed04

08011854 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011854:	b480      	push	{r7}
 8011856:	b083      	sub	sp, #12
 8011858:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801185a:	4b12      	ldr	r3, [pc, #72]	; (80118a4 <vPortExitCritical+0x50>)
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d10a      	bne.n	8011878 <vPortExitCritical+0x24>
	__asm volatile
 8011862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011866:	f383 8811 	msr	BASEPRI, r3
 801186a:	f3bf 8f6f 	isb	sy
 801186e:	f3bf 8f4f 	dsb	sy
 8011872:	607b      	str	r3, [r7, #4]
}
 8011874:	bf00      	nop
 8011876:	e7fe      	b.n	8011876 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011878:	4b0a      	ldr	r3, [pc, #40]	; (80118a4 <vPortExitCritical+0x50>)
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	3b01      	subs	r3, #1
 801187e:	4a09      	ldr	r2, [pc, #36]	; (80118a4 <vPortExitCritical+0x50>)
 8011880:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011882:	4b08      	ldr	r3, [pc, #32]	; (80118a4 <vPortExitCritical+0x50>)
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d105      	bne.n	8011896 <vPortExitCritical+0x42>
 801188a:	2300      	movs	r3, #0
 801188c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801188e:	683b      	ldr	r3, [r7, #0]
 8011890:	f383 8811 	msr	BASEPRI, r3
}
 8011894:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011896:	bf00      	nop
 8011898:	370c      	adds	r7, #12
 801189a:	46bd      	mov	sp, r7
 801189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a0:	4770      	bx	lr
 80118a2:	bf00      	nop
 80118a4:	2000000c 	.word	0x2000000c
	...

080118b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80118b0:	f3ef 8009 	mrs	r0, PSP
 80118b4:	f3bf 8f6f 	isb	sy
 80118b8:	4b15      	ldr	r3, [pc, #84]	; (8011910 <pxCurrentTCBConst>)
 80118ba:	681a      	ldr	r2, [r3, #0]
 80118bc:	f01e 0f10 	tst.w	lr, #16
 80118c0:	bf08      	it	eq
 80118c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80118c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118ca:	6010      	str	r0, [r2, #0]
 80118cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80118d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80118d4:	f380 8811 	msr	BASEPRI, r0
 80118d8:	f3bf 8f4f 	dsb	sy
 80118dc:	f3bf 8f6f 	isb	sy
 80118e0:	f7fe feb4 	bl	801064c <vTaskSwitchContext>
 80118e4:	f04f 0000 	mov.w	r0, #0
 80118e8:	f380 8811 	msr	BASEPRI, r0
 80118ec:	bc09      	pop	{r0, r3}
 80118ee:	6819      	ldr	r1, [r3, #0]
 80118f0:	6808      	ldr	r0, [r1, #0]
 80118f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118f6:	f01e 0f10 	tst.w	lr, #16
 80118fa:	bf08      	it	eq
 80118fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011900:	f380 8809 	msr	PSP, r0
 8011904:	f3bf 8f6f 	isb	sy
 8011908:	4770      	bx	lr
 801190a:	bf00      	nop
 801190c:	f3af 8000 	nop.w

08011910 <pxCurrentTCBConst>:
 8011910:	200047dc 	.word	0x200047dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011914:	bf00      	nop
 8011916:	bf00      	nop

08011918 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011918:	b580      	push	{r7, lr}
 801191a:	b082      	sub	sp, #8
 801191c:	af00      	add	r7, sp, #0
	__asm volatile
 801191e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011922:	f383 8811 	msr	BASEPRI, r3
 8011926:	f3bf 8f6f 	isb	sy
 801192a:	f3bf 8f4f 	dsb	sy
 801192e:	607b      	str	r3, [r7, #4]
}
 8011930:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011932:	f7fe fdd1 	bl	80104d8 <xTaskIncrementTick>
 8011936:	4603      	mov	r3, r0
 8011938:	2b00      	cmp	r3, #0
 801193a:	d003      	beq.n	8011944 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801193c:	4b06      	ldr	r3, [pc, #24]	; (8011958 <xPortSysTickHandler+0x40>)
 801193e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011942:	601a      	str	r2, [r3, #0]
 8011944:	2300      	movs	r3, #0
 8011946:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011948:	683b      	ldr	r3, [r7, #0]
 801194a:	f383 8811 	msr	BASEPRI, r3
}
 801194e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011950:	bf00      	nop
 8011952:	3708      	adds	r7, #8
 8011954:	46bd      	mov	sp, r7
 8011956:	bd80      	pop	{r7, pc}
 8011958:	e000ed04 	.word	0xe000ed04

0801195c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801195c:	b480      	push	{r7}
 801195e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011960:	4b0b      	ldr	r3, [pc, #44]	; (8011990 <vPortSetupTimerInterrupt+0x34>)
 8011962:	2200      	movs	r2, #0
 8011964:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011966:	4b0b      	ldr	r3, [pc, #44]	; (8011994 <vPortSetupTimerInterrupt+0x38>)
 8011968:	2200      	movs	r2, #0
 801196a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801196c:	4b0a      	ldr	r3, [pc, #40]	; (8011998 <vPortSetupTimerInterrupt+0x3c>)
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	4a0a      	ldr	r2, [pc, #40]	; (801199c <vPortSetupTimerInterrupt+0x40>)
 8011972:	fba2 2303 	umull	r2, r3, r2, r3
 8011976:	099b      	lsrs	r3, r3, #6
 8011978:	4a09      	ldr	r2, [pc, #36]	; (80119a0 <vPortSetupTimerInterrupt+0x44>)
 801197a:	3b01      	subs	r3, #1
 801197c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801197e:	4b04      	ldr	r3, [pc, #16]	; (8011990 <vPortSetupTimerInterrupt+0x34>)
 8011980:	2207      	movs	r2, #7
 8011982:	601a      	str	r2, [r3, #0]
}
 8011984:	bf00      	nop
 8011986:	46bd      	mov	sp, r7
 8011988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801198c:	4770      	bx	lr
 801198e:	bf00      	nop
 8011990:	e000e010 	.word	0xe000e010
 8011994:	e000e018 	.word	0xe000e018
 8011998:	20000000 	.word	0x20000000
 801199c:	10624dd3 	.word	0x10624dd3
 80119a0:	e000e014 	.word	0xe000e014

080119a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80119a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80119b4 <vPortEnableVFP+0x10>
 80119a8:	6801      	ldr	r1, [r0, #0]
 80119aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80119ae:	6001      	str	r1, [r0, #0]
 80119b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80119b2:	bf00      	nop
 80119b4:	e000ed88 	.word	0xe000ed88

080119b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80119b8:	b480      	push	{r7}
 80119ba:	b085      	sub	sp, #20
 80119bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80119be:	f3ef 8305 	mrs	r3, IPSR
 80119c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	2b0f      	cmp	r3, #15
 80119c8:	d914      	bls.n	80119f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80119ca:	4a17      	ldr	r2, [pc, #92]	; (8011a28 <vPortValidateInterruptPriority+0x70>)
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	4413      	add	r3, r2
 80119d0:	781b      	ldrb	r3, [r3, #0]
 80119d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80119d4:	4b15      	ldr	r3, [pc, #84]	; (8011a2c <vPortValidateInterruptPriority+0x74>)
 80119d6:	781b      	ldrb	r3, [r3, #0]
 80119d8:	7afa      	ldrb	r2, [r7, #11]
 80119da:	429a      	cmp	r2, r3
 80119dc:	d20a      	bcs.n	80119f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80119de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119e2:	f383 8811 	msr	BASEPRI, r3
 80119e6:	f3bf 8f6f 	isb	sy
 80119ea:	f3bf 8f4f 	dsb	sy
 80119ee:	607b      	str	r3, [r7, #4]
}
 80119f0:	bf00      	nop
 80119f2:	e7fe      	b.n	80119f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80119f4:	4b0e      	ldr	r3, [pc, #56]	; (8011a30 <vPortValidateInterruptPriority+0x78>)
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80119fc:	4b0d      	ldr	r3, [pc, #52]	; (8011a34 <vPortValidateInterruptPriority+0x7c>)
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	429a      	cmp	r2, r3
 8011a02:	d90a      	bls.n	8011a1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a08:	f383 8811 	msr	BASEPRI, r3
 8011a0c:	f3bf 8f6f 	isb	sy
 8011a10:	f3bf 8f4f 	dsb	sy
 8011a14:	603b      	str	r3, [r7, #0]
}
 8011a16:	bf00      	nop
 8011a18:	e7fe      	b.n	8011a18 <vPortValidateInterruptPriority+0x60>
	}
 8011a1a:	bf00      	nop
 8011a1c:	3714      	adds	r7, #20
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a24:	4770      	bx	lr
 8011a26:	bf00      	nop
 8011a28:	e000e3f0 	.word	0xe000e3f0
 8011a2c:	20004e08 	.word	0x20004e08
 8011a30:	e000ed0c 	.word	0xe000ed0c
 8011a34:	20004e0c 	.word	0x20004e0c

08011a38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b08a      	sub	sp, #40	; 0x28
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011a40:	2300      	movs	r3, #0
 8011a42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011a44:	f7fe fc7a 	bl	801033c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011a48:	4b5b      	ldr	r3, [pc, #364]	; (8011bb8 <pvPortMalloc+0x180>)
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d101      	bne.n	8011a54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011a50:	f000 f920 	bl	8011c94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011a54:	4b59      	ldr	r3, [pc, #356]	; (8011bbc <pvPortMalloc+0x184>)
 8011a56:	681a      	ldr	r2, [r3, #0]
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	4013      	ands	r3, r2
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	f040 8093 	bne.w	8011b88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d01d      	beq.n	8011aa4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011a68:	2208      	movs	r2, #8
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	4413      	add	r3, r2
 8011a6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	f003 0307 	and.w	r3, r3, #7
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d014      	beq.n	8011aa4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	f023 0307 	bic.w	r3, r3, #7
 8011a80:	3308      	adds	r3, #8
 8011a82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	f003 0307 	and.w	r3, r3, #7
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d00a      	beq.n	8011aa4 <pvPortMalloc+0x6c>
	__asm volatile
 8011a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a92:	f383 8811 	msr	BASEPRI, r3
 8011a96:	f3bf 8f6f 	isb	sy
 8011a9a:	f3bf 8f4f 	dsb	sy
 8011a9e:	617b      	str	r3, [r7, #20]
}
 8011aa0:	bf00      	nop
 8011aa2:	e7fe      	b.n	8011aa2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d06e      	beq.n	8011b88 <pvPortMalloc+0x150>
 8011aaa:	4b45      	ldr	r3, [pc, #276]	; (8011bc0 <pvPortMalloc+0x188>)
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	687a      	ldr	r2, [r7, #4]
 8011ab0:	429a      	cmp	r2, r3
 8011ab2:	d869      	bhi.n	8011b88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011ab4:	4b43      	ldr	r3, [pc, #268]	; (8011bc4 <pvPortMalloc+0x18c>)
 8011ab6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011ab8:	4b42      	ldr	r3, [pc, #264]	; (8011bc4 <pvPortMalloc+0x18c>)
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011abe:	e004      	b.n	8011aca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ac2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011acc:	685b      	ldr	r3, [r3, #4]
 8011ace:	687a      	ldr	r2, [r7, #4]
 8011ad0:	429a      	cmp	r2, r3
 8011ad2:	d903      	bls.n	8011adc <pvPortMalloc+0xa4>
 8011ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d1f1      	bne.n	8011ac0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011adc:	4b36      	ldr	r3, [pc, #216]	; (8011bb8 <pvPortMalloc+0x180>)
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ae2:	429a      	cmp	r2, r3
 8011ae4:	d050      	beq.n	8011b88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011ae6:	6a3b      	ldr	r3, [r7, #32]
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	2208      	movs	r2, #8
 8011aec:	4413      	add	r3, r2
 8011aee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011af2:	681a      	ldr	r2, [r3, #0]
 8011af4:	6a3b      	ldr	r3, [r7, #32]
 8011af6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011afa:	685a      	ldr	r2, [r3, #4]
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	1ad2      	subs	r2, r2, r3
 8011b00:	2308      	movs	r3, #8
 8011b02:	005b      	lsls	r3, r3, #1
 8011b04:	429a      	cmp	r2, r3
 8011b06:	d91f      	bls.n	8011b48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	4413      	add	r3, r2
 8011b0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011b10:	69bb      	ldr	r3, [r7, #24]
 8011b12:	f003 0307 	and.w	r3, r3, #7
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d00a      	beq.n	8011b30 <pvPortMalloc+0xf8>
	__asm volatile
 8011b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b1e:	f383 8811 	msr	BASEPRI, r3
 8011b22:	f3bf 8f6f 	isb	sy
 8011b26:	f3bf 8f4f 	dsb	sy
 8011b2a:	613b      	str	r3, [r7, #16]
}
 8011b2c:	bf00      	nop
 8011b2e:	e7fe      	b.n	8011b2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b32:	685a      	ldr	r2, [r3, #4]
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	1ad2      	subs	r2, r2, r3
 8011b38:	69bb      	ldr	r3, [r7, #24]
 8011b3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b3e:	687a      	ldr	r2, [r7, #4]
 8011b40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011b42:	69b8      	ldr	r0, [r7, #24]
 8011b44:	f000 f908 	bl	8011d58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011b48:	4b1d      	ldr	r3, [pc, #116]	; (8011bc0 <pvPortMalloc+0x188>)
 8011b4a:	681a      	ldr	r2, [r3, #0]
 8011b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b4e:	685b      	ldr	r3, [r3, #4]
 8011b50:	1ad3      	subs	r3, r2, r3
 8011b52:	4a1b      	ldr	r2, [pc, #108]	; (8011bc0 <pvPortMalloc+0x188>)
 8011b54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011b56:	4b1a      	ldr	r3, [pc, #104]	; (8011bc0 <pvPortMalloc+0x188>)
 8011b58:	681a      	ldr	r2, [r3, #0]
 8011b5a:	4b1b      	ldr	r3, [pc, #108]	; (8011bc8 <pvPortMalloc+0x190>)
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	429a      	cmp	r2, r3
 8011b60:	d203      	bcs.n	8011b6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011b62:	4b17      	ldr	r3, [pc, #92]	; (8011bc0 <pvPortMalloc+0x188>)
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	4a18      	ldr	r2, [pc, #96]	; (8011bc8 <pvPortMalloc+0x190>)
 8011b68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b6c:	685a      	ldr	r2, [r3, #4]
 8011b6e:	4b13      	ldr	r3, [pc, #76]	; (8011bbc <pvPortMalloc+0x184>)
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	431a      	orrs	r2, r3
 8011b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b7a:	2200      	movs	r2, #0
 8011b7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011b7e:	4b13      	ldr	r3, [pc, #76]	; (8011bcc <pvPortMalloc+0x194>)
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	3301      	adds	r3, #1
 8011b84:	4a11      	ldr	r2, [pc, #68]	; (8011bcc <pvPortMalloc+0x194>)
 8011b86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011b88:	f7fe fbe6 	bl	8010358 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011b8c:	69fb      	ldr	r3, [r7, #28]
 8011b8e:	f003 0307 	and.w	r3, r3, #7
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d00a      	beq.n	8011bac <pvPortMalloc+0x174>
	__asm volatile
 8011b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b9a:	f383 8811 	msr	BASEPRI, r3
 8011b9e:	f3bf 8f6f 	isb	sy
 8011ba2:	f3bf 8f4f 	dsb	sy
 8011ba6:	60fb      	str	r3, [r7, #12]
}
 8011ba8:	bf00      	nop
 8011baa:	e7fe      	b.n	8011baa <pvPortMalloc+0x172>
	return pvReturn;
 8011bac:	69fb      	ldr	r3, [r7, #28]
}
 8011bae:	4618      	mov	r0, r3
 8011bb0:	3728      	adds	r7, #40	; 0x28
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	bd80      	pop	{r7, pc}
 8011bb6:	bf00      	nop
 8011bb8:	20008a18 	.word	0x20008a18
 8011bbc:	20008a2c 	.word	0x20008a2c
 8011bc0:	20008a1c 	.word	0x20008a1c
 8011bc4:	20008a10 	.word	0x20008a10
 8011bc8:	20008a20 	.word	0x20008a20
 8011bcc:	20008a24 	.word	0x20008a24

08011bd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b086      	sub	sp, #24
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d04d      	beq.n	8011c7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011be2:	2308      	movs	r3, #8
 8011be4:	425b      	negs	r3, r3
 8011be6:	697a      	ldr	r2, [r7, #20]
 8011be8:	4413      	add	r3, r2
 8011bea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011bec:	697b      	ldr	r3, [r7, #20]
 8011bee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011bf0:	693b      	ldr	r3, [r7, #16]
 8011bf2:	685a      	ldr	r2, [r3, #4]
 8011bf4:	4b24      	ldr	r3, [pc, #144]	; (8011c88 <vPortFree+0xb8>)
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	4013      	ands	r3, r2
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d10a      	bne.n	8011c14 <vPortFree+0x44>
	__asm volatile
 8011bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c02:	f383 8811 	msr	BASEPRI, r3
 8011c06:	f3bf 8f6f 	isb	sy
 8011c0a:	f3bf 8f4f 	dsb	sy
 8011c0e:	60fb      	str	r3, [r7, #12]
}
 8011c10:	bf00      	nop
 8011c12:	e7fe      	b.n	8011c12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011c14:	693b      	ldr	r3, [r7, #16]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d00a      	beq.n	8011c32 <vPortFree+0x62>
	__asm volatile
 8011c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c20:	f383 8811 	msr	BASEPRI, r3
 8011c24:	f3bf 8f6f 	isb	sy
 8011c28:	f3bf 8f4f 	dsb	sy
 8011c2c:	60bb      	str	r3, [r7, #8]
}
 8011c2e:	bf00      	nop
 8011c30:	e7fe      	b.n	8011c30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011c32:	693b      	ldr	r3, [r7, #16]
 8011c34:	685a      	ldr	r2, [r3, #4]
 8011c36:	4b14      	ldr	r3, [pc, #80]	; (8011c88 <vPortFree+0xb8>)
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	4013      	ands	r3, r2
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d01e      	beq.n	8011c7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011c40:	693b      	ldr	r3, [r7, #16]
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d11a      	bne.n	8011c7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011c48:	693b      	ldr	r3, [r7, #16]
 8011c4a:	685a      	ldr	r2, [r3, #4]
 8011c4c:	4b0e      	ldr	r3, [pc, #56]	; (8011c88 <vPortFree+0xb8>)
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	43db      	mvns	r3, r3
 8011c52:	401a      	ands	r2, r3
 8011c54:	693b      	ldr	r3, [r7, #16]
 8011c56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011c58:	f7fe fb70 	bl	801033c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011c5c:	693b      	ldr	r3, [r7, #16]
 8011c5e:	685a      	ldr	r2, [r3, #4]
 8011c60:	4b0a      	ldr	r3, [pc, #40]	; (8011c8c <vPortFree+0xbc>)
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	4413      	add	r3, r2
 8011c66:	4a09      	ldr	r2, [pc, #36]	; (8011c8c <vPortFree+0xbc>)
 8011c68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011c6a:	6938      	ldr	r0, [r7, #16]
 8011c6c:	f000 f874 	bl	8011d58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011c70:	4b07      	ldr	r3, [pc, #28]	; (8011c90 <vPortFree+0xc0>)
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	3301      	adds	r3, #1
 8011c76:	4a06      	ldr	r2, [pc, #24]	; (8011c90 <vPortFree+0xc0>)
 8011c78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011c7a:	f7fe fb6d 	bl	8010358 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011c7e:	bf00      	nop
 8011c80:	3718      	adds	r7, #24
 8011c82:	46bd      	mov	sp, r7
 8011c84:	bd80      	pop	{r7, pc}
 8011c86:	bf00      	nop
 8011c88:	20008a2c 	.word	0x20008a2c
 8011c8c:	20008a1c 	.word	0x20008a1c
 8011c90:	20008a28 	.word	0x20008a28

08011c94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011c94:	b480      	push	{r7}
 8011c96:	b085      	sub	sp, #20
 8011c98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011c9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8011c9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011ca0:	4b27      	ldr	r3, [pc, #156]	; (8011d40 <prvHeapInit+0xac>)
 8011ca2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	f003 0307 	and.w	r3, r3, #7
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d00c      	beq.n	8011cc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	3307      	adds	r3, #7
 8011cb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	f023 0307 	bic.w	r3, r3, #7
 8011cba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011cbc:	68ba      	ldr	r2, [r7, #8]
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	1ad3      	subs	r3, r2, r3
 8011cc2:	4a1f      	ldr	r2, [pc, #124]	; (8011d40 <prvHeapInit+0xac>)
 8011cc4:	4413      	add	r3, r2
 8011cc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011ccc:	4a1d      	ldr	r2, [pc, #116]	; (8011d44 <prvHeapInit+0xb0>)
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011cd2:	4b1c      	ldr	r3, [pc, #112]	; (8011d44 <prvHeapInit+0xb0>)
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	68ba      	ldr	r2, [r7, #8]
 8011cdc:	4413      	add	r3, r2
 8011cde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011ce0:	2208      	movs	r2, #8
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	1a9b      	subs	r3, r3, r2
 8011ce6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	f023 0307 	bic.w	r3, r3, #7
 8011cee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	4a15      	ldr	r2, [pc, #84]	; (8011d48 <prvHeapInit+0xb4>)
 8011cf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011cf6:	4b14      	ldr	r3, [pc, #80]	; (8011d48 <prvHeapInit+0xb4>)
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	2200      	movs	r2, #0
 8011cfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011cfe:	4b12      	ldr	r3, [pc, #72]	; (8011d48 <prvHeapInit+0xb4>)
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	2200      	movs	r2, #0
 8011d04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011d0a:	683b      	ldr	r3, [r7, #0]
 8011d0c:	68fa      	ldr	r2, [r7, #12]
 8011d0e:	1ad2      	subs	r2, r2, r3
 8011d10:	683b      	ldr	r3, [r7, #0]
 8011d12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011d14:	4b0c      	ldr	r3, [pc, #48]	; (8011d48 <prvHeapInit+0xb4>)
 8011d16:	681a      	ldr	r2, [r3, #0]
 8011d18:	683b      	ldr	r3, [r7, #0]
 8011d1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011d1c:	683b      	ldr	r3, [r7, #0]
 8011d1e:	685b      	ldr	r3, [r3, #4]
 8011d20:	4a0a      	ldr	r2, [pc, #40]	; (8011d4c <prvHeapInit+0xb8>)
 8011d22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011d24:	683b      	ldr	r3, [r7, #0]
 8011d26:	685b      	ldr	r3, [r3, #4]
 8011d28:	4a09      	ldr	r2, [pc, #36]	; (8011d50 <prvHeapInit+0xbc>)
 8011d2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011d2c:	4b09      	ldr	r3, [pc, #36]	; (8011d54 <prvHeapInit+0xc0>)
 8011d2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011d32:	601a      	str	r2, [r3, #0]
}
 8011d34:	bf00      	nop
 8011d36:	3714      	adds	r7, #20
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3e:	4770      	bx	lr
 8011d40:	20004e10 	.word	0x20004e10
 8011d44:	20008a10 	.word	0x20008a10
 8011d48:	20008a18 	.word	0x20008a18
 8011d4c:	20008a20 	.word	0x20008a20
 8011d50:	20008a1c 	.word	0x20008a1c
 8011d54:	20008a2c 	.word	0x20008a2c

08011d58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011d58:	b480      	push	{r7}
 8011d5a:	b085      	sub	sp, #20
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011d60:	4b28      	ldr	r3, [pc, #160]	; (8011e04 <prvInsertBlockIntoFreeList+0xac>)
 8011d62:	60fb      	str	r3, [r7, #12]
 8011d64:	e002      	b.n	8011d6c <prvInsertBlockIntoFreeList+0x14>
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	60fb      	str	r3, [r7, #12]
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	687a      	ldr	r2, [r7, #4]
 8011d72:	429a      	cmp	r2, r3
 8011d74:	d8f7      	bhi.n	8011d66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	685b      	ldr	r3, [r3, #4]
 8011d7e:	68ba      	ldr	r2, [r7, #8]
 8011d80:	4413      	add	r3, r2
 8011d82:	687a      	ldr	r2, [r7, #4]
 8011d84:	429a      	cmp	r2, r3
 8011d86:	d108      	bne.n	8011d9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	685a      	ldr	r2, [r3, #4]
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	685b      	ldr	r3, [r3, #4]
 8011d90:	441a      	add	r2, r3
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	685b      	ldr	r3, [r3, #4]
 8011da2:	68ba      	ldr	r2, [r7, #8]
 8011da4:	441a      	add	r2, r3
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	429a      	cmp	r2, r3
 8011dac:	d118      	bne.n	8011de0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	681a      	ldr	r2, [r3, #0]
 8011db2:	4b15      	ldr	r3, [pc, #84]	; (8011e08 <prvInsertBlockIntoFreeList+0xb0>)
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	429a      	cmp	r2, r3
 8011db8:	d00d      	beq.n	8011dd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	685a      	ldr	r2, [r3, #4]
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	685b      	ldr	r3, [r3, #4]
 8011dc4:	441a      	add	r2, r3
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	681a      	ldr	r2, [r3, #0]
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	601a      	str	r2, [r3, #0]
 8011dd4:	e008      	b.n	8011de8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011dd6:	4b0c      	ldr	r3, [pc, #48]	; (8011e08 <prvInsertBlockIntoFreeList+0xb0>)
 8011dd8:	681a      	ldr	r2, [r3, #0]
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	601a      	str	r2, [r3, #0]
 8011dde:	e003      	b.n	8011de8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	681a      	ldr	r2, [r3, #0]
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011de8:	68fa      	ldr	r2, [r7, #12]
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	429a      	cmp	r2, r3
 8011dee:	d002      	beq.n	8011df6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	687a      	ldr	r2, [r7, #4]
 8011df4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011df6:	bf00      	nop
 8011df8:	3714      	adds	r7, #20
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e00:	4770      	bx	lr
 8011e02:	bf00      	nop
 8011e04:	20008a10 	.word	0x20008a10
 8011e08:	20008a18 	.word	0x20008a18

08011e0c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b084      	sub	sp, #16
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
 8011e14:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8011e16:	f007 fa9b 	bl	8019350 <sys_timeouts_sleeptime>
 8011e1a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e22:	d10b      	bne.n	8011e3c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8011e24:	4813      	ldr	r0, [pc, #76]	; (8011e74 <tcpip_timeouts_mbox_fetch+0x68>)
 8011e26:	f00c f9a8 	bl	801e17a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8011e2a:	2200      	movs	r2, #0
 8011e2c:	6839      	ldr	r1, [r7, #0]
 8011e2e:	6878      	ldr	r0, [r7, #4]
 8011e30:	f00c f930 	bl	801e094 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8011e34:	480f      	ldr	r0, [pc, #60]	; (8011e74 <tcpip_timeouts_mbox_fetch+0x68>)
 8011e36:	f00c f991 	bl	801e15c <sys_mutex_lock>
    return;
 8011e3a:	e018      	b.n	8011e6e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d102      	bne.n	8011e48 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8011e42:	f007 fa4b 	bl	80192dc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8011e46:	e7e6      	b.n	8011e16 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8011e48:	480a      	ldr	r0, [pc, #40]	; (8011e74 <tcpip_timeouts_mbox_fetch+0x68>)
 8011e4a:	f00c f996 	bl	801e17a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8011e4e:	68fa      	ldr	r2, [r7, #12]
 8011e50:	6839      	ldr	r1, [r7, #0]
 8011e52:	6878      	ldr	r0, [r7, #4]
 8011e54:	f00c f91e 	bl	801e094 <sys_arch_mbox_fetch>
 8011e58:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8011e5a:	4806      	ldr	r0, [pc, #24]	; (8011e74 <tcpip_timeouts_mbox_fetch+0x68>)
 8011e5c:	f00c f97e 	bl	801e15c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8011e60:	68bb      	ldr	r3, [r7, #8]
 8011e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e66:	d102      	bne.n	8011e6e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8011e68:	f007 fa38 	bl	80192dc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8011e6c:	e7d3      	b.n	8011e16 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8011e6e:	3710      	adds	r7, #16
 8011e70:	46bd      	mov	sp, r7
 8011e72:	bd80      	pop	{r7, pc}
 8011e74:	20008a3c 	.word	0x20008a3c

08011e78 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8011e78:	b580      	push	{r7, lr}
 8011e7a:	b084      	sub	sp, #16
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8011e80:	4810      	ldr	r0, [pc, #64]	; (8011ec4 <tcpip_thread+0x4c>)
 8011e82:	f00c f96b 	bl	801e15c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8011e86:	4b10      	ldr	r3, [pc, #64]	; (8011ec8 <tcpip_thread+0x50>)
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d005      	beq.n	8011e9a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8011e8e:	4b0e      	ldr	r3, [pc, #56]	; (8011ec8 <tcpip_thread+0x50>)
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	4a0e      	ldr	r2, [pc, #56]	; (8011ecc <tcpip_thread+0x54>)
 8011e94:	6812      	ldr	r2, [r2, #0]
 8011e96:	4610      	mov	r0, r2
 8011e98:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8011e9a:	f107 030c 	add.w	r3, r7, #12
 8011e9e:	4619      	mov	r1, r3
 8011ea0:	480b      	ldr	r0, [pc, #44]	; (8011ed0 <tcpip_thread+0x58>)
 8011ea2:	f7ff ffb3 	bl	8011e0c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d106      	bne.n	8011eba <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8011eac:	4b09      	ldr	r3, [pc, #36]	; (8011ed4 <tcpip_thread+0x5c>)
 8011eae:	2291      	movs	r2, #145	; 0x91
 8011eb0:	4909      	ldr	r1, [pc, #36]	; (8011ed8 <tcpip_thread+0x60>)
 8011eb2:	480a      	ldr	r0, [pc, #40]	; (8011edc <tcpip_thread+0x64>)
 8011eb4:	f00c fa10 	bl	801e2d8 <printf>
      continue;
 8011eb8:	e003      	b.n	8011ec2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	f000 f80f 	bl	8011ee0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8011ec2:	e7ea      	b.n	8011e9a <tcpip_thread+0x22>
 8011ec4:	20008a3c 	.word	0x20008a3c
 8011ec8:	20008a30 	.word	0x20008a30
 8011ecc:	20008a34 	.word	0x20008a34
 8011ed0:	20008a38 	.word	0x20008a38
 8011ed4:	080245bc 	.word	0x080245bc
 8011ed8:	080245ec 	.word	0x080245ec
 8011edc:	0802460c 	.word	0x0802460c

08011ee0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b082      	sub	sp, #8
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	781b      	ldrb	r3, [r3, #0]
 8011eec:	2b02      	cmp	r3, #2
 8011eee:	d026      	beq.n	8011f3e <tcpip_thread_handle_msg+0x5e>
 8011ef0:	2b02      	cmp	r3, #2
 8011ef2:	dc2b      	bgt.n	8011f4c <tcpip_thread_handle_msg+0x6c>
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d002      	beq.n	8011efe <tcpip_thread_handle_msg+0x1e>
 8011ef8:	2b01      	cmp	r3, #1
 8011efa:	d015      	beq.n	8011f28 <tcpip_thread_handle_msg+0x48>
 8011efc:	e026      	b.n	8011f4c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	68db      	ldr	r3, [r3, #12]
 8011f02:	687a      	ldr	r2, [r7, #4]
 8011f04:	6850      	ldr	r0, [r2, #4]
 8011f06:	687a      	ldr	r2, [r7, #4]
 8011f08:	6892      	ldr	r2, [r2, #8]
 8011f0a:	4611      	mov	r1, r2
 8011f0c:	4798      	blx	r3
 8011f0e:	4603      	mov	r3, r0
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d004      	beq.n	8011f1e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	685b      	ldr	r3, [r3, #4]
 8011f18:	4618      	mov	r0, r3
 8011f1a:	f001 fcd1 	bl	80138c0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8011f1e:	6879      	ldr	r1, [r7, #4]
 8011f20:	2009      	movs	r0, #9
 8011f22:	f000 fe1d 	bl	8012b60 <memp_free>
      break;
 8011f26:	e018      	b.n	8011f5a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	685b      	ldr	r3, [r3, #4]
 8011f2c:	687a      	ldr	r2, [r7, #4]
 8011f2e:	6892      	ldr	r2, [r2, #8]
 8011f30:	4610      	mov	r0, r2
 8011f32:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8011f34:	6879      	ldr	r1, [r7, #4]
 8011f36:	2008      	movs	r0, #8
 8011f38:	f000 fe12 	bl	8012b60 <memp_free>
      break;
 8011f3c:	e00d      	b.n	8011f5a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	685b      	ldr	r3, [r3, #4]
 8011f42:	687a      	ldr	r2, [r7, #4]
 8011f44:	6892      	ldr	r2, [r2, #8]
 8011f46:	4610      	mov	r0, r2
 8011f48:	4798      	blx	r3
      break;
 8011f4a:	e006      	b.n	8011f5a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8011f4c:	4b05      	ldr	r3, [pc, #20]	; (8011f64 <tcpip_thread_handle_msg+0x84>)
 8011f4e:	22cf      	movs	r2, #207	; 0xcf
 8011f50:	4905      	ldr	r1, [pc, #20]	; (8011f68 <tcpip_thread_handle_msg+0x88>)
 8011f52:	4806      	ldr	r0, [pc, #24]	; (8011f6c <tcpip_thread_handle_msg+0x8c>)
 8011f54:	f00c f9c0 	bl	801e2d8 <printf>
      break;
 8011f58:	bf00      	nop
  }
}
 8011f5a:	bf00      	nop
 8011f5c:	3708      	adds	r7, #8
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	bd80      	pop	{r7, pc}
 8011f62:	bf00      	nop
 8011f64:	080245bc 	.word	0x080245bc
 8011f68:	080245ec 	.word	0x080245ec
 8011f6c:	0802460c 	.word	0x0802460c

08011f70 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8011f70:	b580      	push	{r7, lr}
 8011f72:	b086      	sub	sp, #24
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	60f8      	str	r0, [r7, #12]
 8011f78:	60b9      	str	r1, [r7, #8]
 8011f7a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8011f7c:	481a      	ldr	r0, [pc, #104]	; (8011fe8 <tcpip_inpkt+0x78>)
 8011f7e:	f00c f8ba 	bl	801e0f6 <sys_mbox_valid>
 8011f82:	4603      	mov	r3, r0
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d105      	bne.n	8011f94 <tcpip_inpkt+0x24>
 8011f88:	4b18      	ldr	r3, [pc, #96]	; (8011fec <tcpip_inpkt+0x7c>)
 8011f8a:	22fc      	movs	r2, #252	; 0xfc
 8011f8c:	4918      	ldr	r1, [pc, #96]	; (8011ff0 <tcpip_inpkt+0x80>)
 8011f8e:	4819      	ldr	r0, [pc, #100]	; (8011ff4 <tcpip_inpkt+0x84>)
 8011f90:	f00c f9a2 	bl	801e2d8 <printf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8011f94:	2009      	movs	r0, #9
 8011f96:	f000 fd91 	bl	8012abc <memp_malloc>
 8011f9a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8011f9c:	697b      	ldr	r3, [r7, #20]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d102      	bne.n	8011fa8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8011fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8011fa6:	e01a      	b.n	8011fde <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8011fa8:	697b      	ldr	r3, [r7, #20]
 8011faa:	2200      	movs	r2, #0
 8011fac:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8011fae:	697b      	ldr	r3, [r7, #20]
 8011fb0:	68fa      	ldr	r2, [r7, #12]
 8011fb2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8011fb4:	697b      	ldr	r3, [r7, #20]
 8011fb6:	68ba      	ldr	r2, [r7, #8]
 8011fb8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8011fba:	697b      	ldr	r3, [r7, #20]
 8011fbc:	687a      	ldr	r2, [r7, #4]
 8011fbe:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8011fc0:	6979      	ldr	r1, [r7, #20]
 8011fc2:	4809      	ldr	r0, [pc, #36]	; (8011fe8 <tcpip_inpkt+0x78>)
 8011fc4:	f00c f84c 	bl	801e060 <sys_mbox_trypost>
 8011fc8:	4603      	mov	r3, r0
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d006      	beq.n	8011fdc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8011fce:	6979      	ldr	r1, [r7, #20]
 8011fd0:	2009      	movs	r0, #9
 8011fd2:	f000 fdc5 	bl	8012b60 <memp_free>
    return ERR_MEM;
 8011fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8011fda:	e000      	b.n	8011fde <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8011fdc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8011fde:	4618      	mov	r0, r3
 8011fe0:	3718      	adds	r7, #24
 8011fe2:	46bd      	mov	sp, r7
 8011fe4:	bd80      	pop	{r7, pc}
 8011fe6:	bf00      	nop
 8011fe8:	20008a38 	.word	0x20008a38
 8011fec:	080245bc 	.word	0x080245bc
 8011ff0:	08024634 	.word	0x08024634
 8011ff4:	0802460c 	.word	0x0802460c

08011ff8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8011ff8:	b580      	push	{r7, lr}
 8011ffa:	b082      	sub	sp, #8
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	6078      	str	r0, [r7, #4]
 8012000:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8012002:	683b      	ldr	r3, [r7, #0]
 8012004:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012008:	f003 0318 	and.w	r3, r3, #24
 801200c:	2b00      	cmp	r3, #0
 801200e:	d006      	beq.n	801201e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8012010:	4a08      	ldr	r2, [pc, #32]	; (8012034 <tcpip_input+0x3c>)
 8012012:	6839      	ldr	r1, [r7, #0]
 8012014:	6878      	ldr	r0, [r7, #4]
 8012016:	f7ff ffab 	bl	8011f70 <tcpip_inpkt>
 801201a:	4603      	mov	r3, r0
 801201c:	e005      	b.n	801202a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801201e:	4a06      	ldr	r2, [pc, #24]	; (8012038 <tcpip_input+0x40>)
 8012020:	6839      	ldr	r1, [r7, #0]
 8012022:	6878      	ldr	r0, [r7, #4]
 8012024:	f7ff ffa4 	bl	8011f70 <tcpip_inpkt>
 8012028:	4603      	mov	r3, r0
}
 801202a:	4618      	mov	r0, r3
 801202c:	3708      	adds	r7, #8
 801202e:	46bd      	mov	sp, r7
 8012030:	bd80      	pop	{r7, pc}
 8012032:	bf00      	nop
 8012034:	0801de81 	.word	0x0801de81
 8012038:	0801cd4d 	.word	0x0801cd4d

0801203c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b084      	sub	sp, #16
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
 8012044:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012046:	4819      	ldr	r0, [pc, #100]	; (80120ac <tcpip_try_callback+0x70>)
 8012048:	f00c f855 	bl	801e0f6 <sys_mbox_valid>
 801204c:	4603      	mov	r3, r0
 801204e:	2b00      	cmp	r3, #0
 8012050:	d106      	bne.n	8012060 <tcpip_try_callback+0x24>
 8012052:	4b17      	ldr	r3, [pc, #92]	; (80120b0 <tcpip_try_callback+0x74>)
 8012054:	f240 125d 	movw	r2, #349	; 0x15d
 8012058:	4916      	ldr	r1, [pc, #88]	; (80120b4 <tcpip_try_callback+0x78>)
 801205a:	4817      	ldr	r0, [pc, #92]	; (80120b8 <tcpip_try_callback+0x7c>)
 801205c:	f00c f93c 	bl	801e2d8 <printf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8012060:	2008      	movs	r0, #8
 8012062:	f000 fd2b 	bl	8012abc <memp_malloc>
 8012066:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d102      	bne.n	8012074 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801206e:	f04f 33ff 	mov.w	r3, #4294967295
 8012072:	e017      	b.n	80120a4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	2201      	movs	r2, #1
 8012078:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	687a      	ldr	r2, [r7, #4]
 801207e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	683a      	ldr	r2, [r7, #0]
 8012084:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012086:	68f9      	ldr	r1, [r7, #12]
 8012088:	4808      	ldr	r0, [pc, #32]	; (80120ac <tcpip_try_callback+0x70>)
 801208a:	f00b ffe9 	bl	801e060 <sys_mbox_trypost>
 801208e:	4603      	mov	r3, r0
 8012090:	2b00      	cmp	r3, #0
 8012092:	d006      	beq.n	80120a2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8012094:	68f9      	ldr	r1, [r7, #12]
 8012096:	2008      	movs	r0, #8
 8012098:	f000 fd62 	bl	8012b60 <memp_free>
    return ERR_MEM;
 801209c:	f04f 33ff 	mov.w	r3, #4294967295
 80120a0:	e000      	b.n	80120a4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80120a2:	2300      	movs	r3, #0
}
 80120a4:	4618      	mov	r0, r3
 80120a6:	3710      	adds	r7, #16
 80120a8:	46bd      	mov	sp, r7
 80120aa:	bd80      	pop	{r7, pc}
 80120ac:	20008a38 	.word	0x20008a38
 80120b0:	080245bc 	.word	0x080245bc
 80120b4:	08024634 	.word	0x08024634
 80120b8:	0802460c 	.word	0x0802460c

080120bc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80120bc:	b580      	push	{r7, lr}
 80120be:	b084      	sub	sp, #16
 80120c0:	af02      	add	r7, sp, #8
 80120c2:	6078      	str	r0, [r7, #4]
 80120c4:	6039      	str	r1, [r7, #0]
  lwip_init();
 80120c6:	f000 f871 	bl	80121ac <lwip_init>

  tcpip_init_done = initfunc;
 80120ca:	4a17      	ldr	r2, [pc, #92]	; (8012128 <tcpip_init+0x6c>)
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80120d0:	4a16      	ldr	r2, [pc, #88]	; (801212c <tcpip_init+0x70>)
 80120d2:	683b      	ldr	r3, [r7, #0]
 80120d4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80120d6:	2106      	movs	r1, #6
 80120d8:	4815      	ldr	r0, [pc, #84]	; (8012130 <tcpip_init+0x74>)
 80120da:	f00b ffa7 	bl	801e02c <sys_mbox_new>
 80120de:	4603      	mov	r3, r0
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d006      	beq.n	80120f2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80120e4:	4b13      	ldr	r3, [pc, #76]	; (8012134 <tcpip_init+0x78>)
 80120e6:	f240 2261 	movw	r2, #609	; 0x261
 80120ea:	4913      	ldr	r1, [pc, #76]	; (8012138 <tcpip_init+0x7c>)
 80120ec:	4813      	ldr	r0, [pc, #76]	; (801213c <tcpip_init+0x80>)
 80120ee:	f00c f8f3 	bl	801e2d8 <printf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80120f2:	4813      	ldr	r0, [pc, #76]	; (8012140 <tcpip_init+0x84>)
 80120f4:	f00c f81c 	bl	801e130 <sys_mutex_new>
 80120f8:	4603      	mov	r3, r0
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d006      	beq.n	801210c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80120fe:	4b0d      	ldr	r3, [pc, #52]	; (8012134 <tcpip_init+0x78>)
 8012100:	f240 2265 	movw	r2, #613	; 0x265
 8012104:	490f      	ldr	r1, [pc, #60]	; (8012144 <tcpip_init+0x88>)
 8012106:	480d      	ldr	r0, [pc, #52]	; (801213c <tcpip_init+0x80>)
 8012108:	f00c f8e6 	bl	801e2d8 <printf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801210c:	2318      	movs	r3, #24
 801210e:	9300      	str	r3, [sp, #0]
 8012110:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012114:	2200      	movs	r2, #0
 8012116:	490c      	ldr	r1, [pc, #48]	; (8012148 <tcpip_init+0x8c>)
 8012118:	480c      	ldr	r0, [pc, #48]	; (801214c <tcpip_init+0x90>)
 801211a:	f00c f83b 	bl	801e194 <sys_thread_new>
}
 801211e:	bf00      	nop
 8012120:	3708      	adds	r7, #8
 8012122:	46bd      	mov	sp, r7
 8012124:	bd80      	pop	{r7, pc}
 8012126:	bf00      	nop
 8012128:	20008a30 	.word	0x20008a30
 801212c:	20008a34 	.word	0x20008a34
 8012130:	20008a38 	.word	0x20008a38
 8012134:	080245bc 	.word	0x080245bc
 8012138:	08024644 	.word	0x08024644
 801213c:	0802460c 	.word	0x0802460c
 8012140:	20008a3c 	.word	0x20008a3c
 8012144:	08024668 	.word	0x08024668
 8012148:	08011e79 	.word	0x08011e79
 801214c:	0802468c 	.word	0x0802468c

08012150 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8012150:	b480      	push	{r7}
 8012152:	b083      	sub	sp, #12
 8012154:	af00      	add	r7, sp, #0
 8012156:	4603      	mov	r3, r0
 8012158:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 801215a:	88fb      	ldrh	r3, [r7, #6]
 801215c:	021b      	lsls	r3, r3, #8
 801215e:	b21a      	sxth	r2, r3
 8012160:	88fb      	ldrh	r3, [r7, #6]
 8012162:	0a1b      	lsrs	r3, r3, #8
 8012164:	b29b      	uxth	r3, r3
 8012166:	b21b      	sxth	r3, r3
 8012168:	4313      	orrs	r3, r2
 801216a:	b21b      	sxth	r3, r3
 801216c:	b29b      	uxth	r3, r3
}
 801216e:	4618      	mov	r0, r3
 8012170:	370c      	adds	r7, #12
 8012172:	46bd      	mov	sp, r7
 8012174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012178:	4770      	bx	lr

0801217a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 801217a:	b480      	push	{r7}
 801217c:	b083      	sub	sp, #12
 801217e:	af00      	add	r7, sp, #0
 8012180:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	061a      	lsls	r2, r3, #24
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	021b      	lsls	r3, r3, #8
 801218a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801218e:	431a      	orrs	r2, r3
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	0a1b      	lsrs	r3, r3, #8
 8012194:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8012198:	431a      	orrs	r2, r3
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	0e1b      	lsrs	r3, r3, #24
 801219e:	4313      	orrs	r3, r2
}
 80121a0:	4618      	mov	r0, r3
 80121a2:	370c      	adds	r7, #12
 80121a4:	46bd      	mov	sp, r7
 80121a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121aa:	4770      	bx	lr

080121ac <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80121ac:	b580      	push	{r7, lr}
 80121ae:	b082      	sub	sp, #8
 80121b0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80121b2:	2300      	movs	r3, #0
 80121b4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80121b6:	f00b ffaf 	bl	801e118 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80121ba:	f000 f8d5 	bl	8012368 <mem_init>
  memp_init();
 80121be:	f000 fc31 	bl	8012a24 <memp_init>
  pbuf_init();
  netif_init();
 80121c2:	f000 fcf7 	bl	8012bb4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80121c6:	f007 f8fb 	bl	80193c0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80121ca:	f001 fe23 	bl	8013e14 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80121ce:	f007 f83d 	bl	801924c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80121d2:	bf00      	nop
 80121d4:	3708      	adds	r7, #8
 80121d6:	46bd      	mov	sp, r7
 80121d8:	bd80      	pop	{r7, pc}
	...

080121dc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80121dc:	b480      	push	{r7}
 80121de:	b083      	sub	sp, #12
 80121e0:	af00      	add	r7, sp, #0
 80121e2:	4603      	mov	r3, r0
 80121e4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80121e6:	4b05      	ldr	r3, [pc, #20]	; (80121fc <ptr_to_mem+0x20>)
 80121e8:	681a      	ldr	r2, [r3, #0]
 80121ea:	88fb      	ldrh	r3, [r7, #6]
 80121ec:	4413      	add	r3, r2
}
 80121ee:	4618      	mov	r0, r3
 80121f0:	370c      	adds	r7, #12
 80121f2:	46bd      	mov	sp, r7
 80121f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f8:	4770      	bx	lr
 80121fa:	bf00      	nop
 80121fc:	200090ac 	.word	0x200090ac

08012200 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8012200:	b480      	push	{r7}
 8012202:	b083      	sub	sp, #12
 8012204:	af00      	add	r7, sp, #0
 8012206:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8012208:	4b05      	ldr	r3, [pc, #20]	; (8012220 <mem_to_ptr+0x20>)
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	687a      	ldr	r2, [r7, #4]
 801220e:	1ad3      	subs	r3, r2, r3
 8012210:	b29b      	uxth	r3, r3
}
 8012212:	4618      	mov	r0, r3
 8012214:	370c      	adds	r7, #12
 8012216:	46bd      	mov	sp, r7
 8012218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221c:	4770      	bx	lr
 801221e:	bf00      	nop
 8012220:	200090ac 	.word	0x200090ac

08012224 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8012224:	b590      	push	{r4, r7, lr}
 8012226:	b085      	sub	sp, #20
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801222c:	4b45      	ldr	r3, [pc, #276]	; (8012344 <plug_holes+0x120>)
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	687a      	ldr	r2, [r7, #4]
 8012232:	429a      	cmp	r2, r3
 8012234:	d206      	bcs.n	8012244 <plug_holes+0x20>
 8012236:	4b44      	ldr	r3, [pc, #272]	; (8012348 <plug_holes+0x124>)
 8012238:	f240 12df 	movw	r2, #479	; 0x1df
 801223c:	4943      	ldr	r1, [pc, #268]	; (801234c <plug_holes+0x128>)
 801223e:	4844      	ldr	r0, [pc, #272]	; (8012350 <plug_holes+0x12c>)
 8012240:	f00c f84a 	bl	801e2d8 <printf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8012244:	4b43      	ldr	r3, [pc, #268]	; (8012354 <plug_holes+0x130>)
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	687a      	ldr	r2, [r7, #4]
 801224a:	429a      	cmp	r2, r3
 801224c:	d306      	bcc.n	801225c <plug_holes+0x38>
 801224e:	4b3e      	ldr	r3, [pc, #248]	; (8012348 <plug_holes+0x124>)
 8012250:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8012254:	4940      	ldr	r1, [pc, #256]	; (8012358 <plug_holes+0x134>)
 8012256:	483e      	ldr	r0, [pc, #248]	; (8012350 <plug_holes+0x12c>)
 8012258:	f00c f83e 	bl	801e2d8 <printf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	791b      	ldrb	r3, [r3, #4]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d006      	beq.n	8012272 <plug_holes+0x4e>
 8012264:	4b38      	ldr	r3, [pc, #224]	; (8012348 <plug_holes+0x124>)
 8012266:	f240 12e1 	movw	r2, #481	; 0x1e1
 801226a:	493c      	ldr	r1, [pc, #240]	; (801235c <plug_holes+0x138>)
 801226c:	4838      	ldr	r0, [pc, #224]	; (8012350 <plug_holes+0x12c>)
 801226e:	f00c f833 	bl	801e2d8 <printf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	881b      	ldrh	r3, [r3, #0]
 8012276:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801227a:	d906      	bls.n	801228a <plug_holes+0x66>
 801227c:	4b32      	ldr	r3, [pc, #200]	; (8012348 <plug_holes+0x124>)
 801227e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8012282:	4937      	ldr	r1, [pc, #220]	; (8012360 <plug_holes+0x13c>)
 8012284:	4832      	ldr	r0, [pc, #200]	; (8012350 <plug_holes+0x12c>)
 8012286:	f00c f827 	bl	801e2d8 <printf>

  nmem = ptr_to_mem(mem->next);
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	881b      	ldrh	r3, [r3, #0]
 801228e:	4618      	mov	r0, r3
 8012290:	f7ff ffa4 	bl	80121dc <ptr_to_mem>
 8012294:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8012296:	687a      	ldr	r2, [r7, #4]
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	429a      	cmp	r2, r3
 801229c:	d024      	beq.n	80122e8 <plug_holes+0xc4>
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	791b      	ldrb	r3, [r3, #4]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d120      	bne.n	80122e8 <plug_holes+0xc4>
 80122a6:	4b2b      	ldr	r3, [pc, #172]	; (8012354 <plug_holes+0x130>)
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	68fa      	ldr	r2, [r7, #12]
 80122ac:	429a      	cmp	r2, r3
 80122ae:	d01b      	beq.n	80122e8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80122b0:	4b2c      	ldr	r3, [pc, #176]	; (8012364 <plug_holes+0x140>)
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	68fa      	ldr	r2, [r7, #12]
 80122b6:	429a      	cmp	r2, r3
 80122b8:	d102      	bne.n	80122c0 <plug_holes+0x9c>
      lfree = mem;
 80122ba:	4a2a      	ldr	r2, [pc, #168]	; (8012364 <plug_holes+0x140>)
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	881a      	ldrh	r2, [r3, #0]
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	881b      	ldrh	r3, [r3, #0]
 80122cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80122d0:	d00a      	beq.n	80122e8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	881b      	ldrh	r3, [r3, #0]
 80122d6:	4618      	mov	r0, r3
 80122d8:	f7ff ff80 	bl	80121dc <ptr_to_mem>
 80122dc:	4604      	mov	r4, r0
 80122de:	6878      	ldr	r0, [r7, #4]
 80122e0:	f7ff ff8e 	bl	8012200 <mem_to_ptr>
 80122e4:	4603      	mov	r3, r0
 80122e6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	885b      	ldrh	r3, [r3, #2]
 80122ec:	4618      	mov	r0, r3
 80122ee:	f7ff ff75 	bl	80121dc <ptr_to_mem>
 80122f2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80122f4:	68ba      	ldr	r2, [r7, #8]
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	429a      	cmp	r2, r3
 80122fa:	d01f      	beq.n	801233c <plug_holes+0x118>
 80122fc:	68bb      	ldr	r3, [r7, #8]
 80122fe:	791b      	ldrb	r3, [r3, #4]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d11b      	bne.n	801233c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8012304:	4b17      	ldr	r3, [pc, #92]	; (8012364 <plug_holes+0x140>)
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	687a      	ldr	r2, [r7, #4]
 801230a:	429a      	cmp	r2, r3
 801230c:	d102      	bne.n	8012314 <plug_holes+0xf0>
      lfree = pmem;
 801230e:	4a15      	ldr	r2, [pc, #84]	; (8012364 <plug_holes+0x140>)
 8012310:	68bb      	ldr	r3, [r7, #8]
 8012312:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	881a      	ldrh	r2, [r3, #0]
 8012318:	68bb      	ldr	r3, [r7, #8]
 801231a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	881b      	ldrh	r3, [r3, #0]
 8012320:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012324:	d00a      	beq.n	801233c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	881b      	ldrh	r3, [r3, #0]
 801232a:	4618      	mov	r0, r3
 801232c:	f7ff ff56 	bl	80121dc <ptr_to_mem>
 8012330:	4604      	mov	r4, r0
 8012332:	68b8      	ldr	r0, [r7, #8]
 8012334:	f7ff ff64 	bl	8012200 <mem_to_ptr>
 8012338:	4603      	mov	r3, r0
 801233a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 801233c:	bf00      	nop
 801233e:	3714      	adds	r7, #20
 8012340:	46bd      	mov	sp, r7
 8012342:	bd90      	pop	{r4, r7, pc}
 8012344:	200090ac 	.word	0x200090ac
 8012348:	0802469c 	.word	0x0802469c
 801234c:	080246cc 	.word	0x080246cc
 8012350:	080246e4 	.word	0x080246e4
 8012354:	200090b0 	.word	0x200090b0
 8012358:	0802470c 	.word	0x0802470c
 801235c:	08024728 	.word	0x08024728
 8012360:	08024744 	.word	0x08024744
 8012364:	200090b8 	.word	0x200090b8

08012368 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8012368:	b580      	push	{r7, lr}
 801236a:	b082      	sub	sp, #8
 801236c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801236e:	4b1f      	ldr	r3, [pc, #124]	; (80123ec <mem_init+0x84>)
 8012370:	3303      	adds	r3, #3
 8012372:	f023 0303 	bic.w	r3, r3, #3
 8012376:	461a      	mov	r2, r3
 8012378:	4b1d      	ldr	r3, [pc, #116]	; (80123f0 <mem_init+0x88>)
 801237a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 801237c:	4b1c      	ldr	r3, [pc, #112]	; (80123f0 <mem_init+0x88>)
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8012388:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	2200      	movs	r2, #0
 801238e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	2200      	movs	r2, #0
 8012394:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8012396:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 801239a:	f7ff ff1f 	bl	80121dc <ptr_to_mem>
 801239e:	4603      	mov	r3, r0
 80123a0:	4a14      	ldr	r2, [pc, #80]	; (80123f4 <mem_init+0x8c>)
 80123a2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80123a4:	4b13      	ldr	r3, [pc, #76]	; (80123f4 <mem_init+0x8c>)
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	2201      	movs	r2, #1
 80123aa:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80123ac:	4b11      	ldr	r3, [pc, #68]	; (80123f4 <mem_init+0x8c>)
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80123b4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80123b6:	4b0f      	ldr	r3, [pc, #60]	; (80123f4 <mem_init+0x8c>)
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80123be:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80123c0:	4b0b      	ldr	r3, [pc, #44]	; (80123f0 <mem_init+0x88>)
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	4a0c      	ldr	r2, [pc, #48]	; (80123f8 <mem_init+0x90>)
 80123c6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80123c8:	480c      	ldr	r0, [pc, #48]	; (80123fc <mem_init+0x94>)
 80123ca:	f00b feb1 	bl	801e130 <sys_mutex_new>
 80123ce:	4603      	mov	r3, r0
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d006      	beq.n	80123e2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80123d4:	4b0a      	ldr	r3, [pc, #40]	; (8012400 <mem_init+0x98>)
 80123d6:	f240 221f 	movw	r2, #543	; 0x21f
 80123da:	490a      	ldr	r1, [pc, #40]	; (8012404 <mem_init+0x9c>)
 80123dc:	480a      	ldr	r0, [pc, #40]	; (8012408 <mem_init+0xa0>)
 80123de:	f00b ff7b 	bl	801e2d8 <printf>
  }
}
 80123e2:	bf00      	nop
 80123e4:	3708      	adds	r7, #8
 80123e6:	46bd      	mov	sp, r7
 80123e8:	bd80      	pop	{r7, pc}
 80123ea:	bf00      	nop
 80123ec:	20008a58 	.word	0x20008a58
 80123f0:	200090ac 	.word	0x200090ac
 80123f4:	200090b0 	.word	0x200090b0
 80123f8:	200090b8 	.word	0x200090b8
 80123fc:	200090b4 	.word	0x200090b4
 8012400:	0802469c 	.word	0x0802469c
 8012404:	08024770 	.word	0x08024770
 8012408:	080246e4 	.word	0x080246e4

0801240c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 801240c:	b580      	push	{r7, lr}
 801240e:	b086      	sub	sp, #24
 8012410:	af00      	add	r7, sp, #0
 8012412:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8012414:	6878      	ldr	r0, [r7, #4]
 8012416:	f7ff fef3 	bl	8012200 <mem_to_ptr>
 801241a:	4603      	mov	r3, r0
 801241c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	881b      	ldrh	r3, [r3, #0]
 8012422:	4618      	mov	r0, r3
 8012424:	f7ff feda 	bl	80121dc <ptr_to_mem>
 8012428:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	885b      	ldrh	r3, [r3, #2]
 801242e:	4618      	mov	r0, r3
 8012430:	f7ff fed4 	bl	80121dc <ptr_to_mem>
 8012434:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	881b      	ldrh	r3, [r3, #0]
 801243a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801243e:	d818      	bhi.n	8012472 <mem_link_valid+0x66>
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	885b      	ldrh	r3, [r3, #2]
 8012444:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012448:	d813      	bhi.n	8012472 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801244e:	8afa      	ldrh	r2, [r7, #22]
 8012450:	429a      	cmp	r2, r3
 8012452:	d004      	beq.n	801245e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	881b      	ldrh	r3, [r3, #0]
 8012458:	8afa      	ldrh	r2, [r7, #22]
 801245a:	429a      	cmp	r2, r3
 801245c:	d109      	bne.n	8012472 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801245e:	4b08      	ldr	r3, [pc, #32]	; (8012480 <mem_link_valid+0x74>)
 8012460:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012462:	693a      	ldr	r2, [r7, #16]
 8012464:	429a      	cmp	r2, r3
 8012466:	d006      	beq.n	8012476 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8012468:	693b      	ldr	r3, [r7, #16]
 801246a:	885b      	ldrh	r3, [r3, #2]
 801246c:	8afa      	ldrh	r2, [r7, #22]
 801246e:	429a      	cmp	r2, r3
 8012470:	d001      	beq.n	8012476 <mem_link_valid+0x6a>
    return 0;
 8012472:	2300      	movs	r3, #0
 8012474:	e000      	b.n	8012478 <mem_link_valid+0x6c>
  }
  return 1;
 8012476:	2301      	movs	r3, #1
}
 8012478:	4618      	mov	r0, r3
 801247a:	3718      	adds	r7, #24
 801247c:	46bd      	mov	sp, r7
 801247e:	bd80      	pop	{r7, pc}
 8012480:	200090b0 	.word	0x200090b0

08012484 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8012484:	b580      	push	{r7, lr}
 8012486:	b088      	sub	sp, #32
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	2b00      	cmp	r3, #0
 8012490:	d070      	beq.n	8012574 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	f003 0303 	and.w	r3, r3, #3
 8012498:	2b00      	cmp	r3, #0
 801249a:	d00d      	beq.n	80124b8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801249c:	4b37      	ldr	r3, [pc, #220]	; (801257c <mem_free+0xf8>)
 801249e:	f240 2273 	movw	r2, #627	; 0x273
 80124a2:	4937      	ldr	r1, [pc, #220]	; (8012580 <mem_free+0xfc>)
 80124a4:	4837      	ldr	r0, [pc, #220]	; (8012584 <mem_free+0x100>)
 80124a6:	f00b ff17 	bl	801e2d8 <printf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80124aa:	f00b fe93 	bl	801e1d4 <sys_arch_protect>
 80124ae:	60f8      	str	r0, [r7, #12]
 80124b0:	68f8      	ldr	r0, [r7, #12]
 80124b2:	f00b fe9d 	bl	801e1f0 <sys_arch_unprotect>
    return;
 80124b6:	e05e      	b.n	8012576 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	3b08      	subs	r3, #8
 80124bc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80124be:	4b32      	ldr	r3, [pc, #200]	; (8012588 <mem_free+0x104>)
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	69fa      	ldr	r2, [r7, #28]
 80124c4:	429a      	cmp	r2, r3
 80124c6:	d306      	bcc.n	80124d6 <mem_free+0x52>
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	f103 020c 	add.w	r2, r3, #12
 80124ce:	4b2f      	ldr	r3, [pc, #188]	; (801258c <mem_free+0x108>)
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	429a      	cmp	r2, r3
 80124d4:	d90d      	bls.n	80124f2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80124d6:	4b29      	ldr	r3, [pc, #164]	; (801257c <mem_free+0xf8>)
 80124d8:	f240 227f 	movw	r2, #639	; 0x27f
 80124dc:	492c      	ldr	r1, [pc, #176]	; (8012590 <mem_free+0x10c>)
 80124de:	4829      	ldr	r0, [pc, #164]	; (8012584 <mem_free+0x100>)
 80124e0:	f00b fefa 	bl	801e2d8 <printf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80124e4:	f00b fe76 	bl	801e1d4 <sys_arch_protect>
 80124e8:	6138      	str	r0, [r7, #16]
 80124ea:	6938      	ldr	r0, [r7, #16]
 80124ec:	f00b fe80 	bl	801e1f0 <sys_arch_unprotect>
    return;
 80124f0:	e041      	b.n	8012576 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80124f2:	4828      	ldr	r0, [pc, #160]	; (8012594 <mem_free+0x110>)
 80124f4:	f00b fe32 	bl	801e15c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80124f8:	69fb      	ldr	r3, [r7, #28]
 80124fa:	791b      	ldrb	r3, [r3, #4]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d110      	bne.n	8012522 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8012500:	4b1e      	ldr	r3, [pc, #120]	; (801257c <mem_free+0xf8>)
 8012502:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8012506:	4924      	ldr	r1, [pc, #144]	; (8012598 <mem_free+0x114>)
 8012508:	481e      	ldr	r0, [pc, #120]	; (8012584 <mem_free+0x100>)
 801250a:	f00b fee5 	bl	801e2d8 <printf>
    LWIP_MEM_FREE_UNPROTECT();
 801250e:	4821      	ldr	r0, [pc, #132]	; (8012594 <mem_free+0x110>)
 8012510:	f00b fe33 	bl	801e17a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012514:	f00b fe5e 	bl	801e1d4 <sys_arch_protect>
 8012518:	6178      	str	r0, [r7, #20]
 801251a:	6978      	ldr	r0, [r7, #20]
 801251c:	f00b fe68 	bl	801e1f0 <sys_arch_unprotect>
    return;
 8012520:	e029      	b.n	8012576 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8012522:	69f8      	ldr	r0, [r7, #28]
 8012524:	f7ff ff72 	bl	801240c <mem_link_valid>
 8012528:	4603      	mov	r3, r0
 801252a:	2b00      	cmp	r3, #0
 801252c:	d110      	bne.n	8012550 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801252e:	4b13      	ldr	r3, [pc, #76]	; (801257c <mem_free+0xf8>)
 8012530:	f240 2295 	movw	r2, #661	; 0x295
 8012534:	4919      	ldr	r1, [pc, #100]	; (801259c <mem_free+0x118>)
 8012536:	4813      	ldr	r0, [pc, #76]	; (8012584 <mem_free+0x100>)
 8012538:	f00b fece 	bl	801e2d8 <printf>
    LWIP_MEM_FREE_UNPROTECT();
 801253c:	4815      	ldr	r0, [pc, #84]	; (8012594 <mem_free+0x110>)
 801253e:	f00b fe1c 	bl	801e17a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012542:	f00b fe47 	bl	801e1d4 <sys_arch_protect>
 8012546:	61b8      	str	r0, [r7, #24]
 8012548:	69b8      	ldr	r0, [r7, #24]
 801254a:	f00b fe51 	bl	801e1f0 <sys_arch_unprotect>
    return;
 801254e:	e012      	b.n	8012576 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8012550:	69fb      	ldr	r3, [r7, #28]
 8012552:	2200      	movs	r2, #0
 8012554:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8012556:	4b12      	ldr	r3, [pc, #72]	; (80125a0 <mem_free+0x11c>)
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	69fa      	ldr	r2, [r7, #28]
 801255c:	429a      	cmp	r2, r3
 801255e:	d202      	bcs.n	8012566 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8012560:	4a0f      	ldr	r2, [pc, #60]	; (80125a0 <mem_free+0x11c>)
 8012562:	69fb      	ldr	r3, [r7, #28]
 8012564:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8012566:	69f8      	ldr	r0, [r7, #28]
 8012568:	f7ff fe5c 	bl	8012224 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801256c:	4809      	ldr	r0, [pc, #36]	; (8012594 <mem_free+0x110>)
 801256e:	f00b fe04 	bl	801e17a <sys_mutex_unlock>
 8012572:	e000      	b.n	8012576 <mem_free+0xf2>
    return;
 8012574:	bf00      	nop
}
 8012576:	3720      	adds	r7, #32
 8012578:	46bd      	mov	sp, r7
 801257a:	bd80      	pop	{r7, pc}
 801257c:	0802469c 	.word	0x0802469c
 8012580:	0802478c 	.word	0x0802478c
 8012584:	080246e4 	.word	0x080246e4
 8012588:	200090ac 	.word	0x200090ac
 801258c:	200090b0 	.word	0x200090b0
 8012590:	080247b0 	.word	0x080247b0
 8012594:	200090b4 	.word	0x200090b4
 8012598:	080247cc 	.word	0x080247cc
 801259c:	080247f4 	.word	0x080247f4
 80125a0:	200090b8 	.word	0x200090b8

080125a4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80125a4:	b580      	push	{r7, lr}
 80125a6:	b088      	sub	sp, #32
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	6078      	str	r0, [r7, #4]
 80125ac:	460b      	mov	r3, r1
 80125ae:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80125b0:	887b      	ldrh	r3, [r7, #2]
 80125b2:	3303      	adds	r3, #3
 80125b4:	b29b      	uxth	r3, r3
 80125b6:	f023 0303 	bic.w	r3, r3, #3
 80125ba:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80125bc:	8bfb      	ldrh	r3, [r7, #30]
 80125be:	2b0b      	cmp	r3, #11
 80125c0:	d801      	bhi.n	80125c6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80125c2:	230c      	movs	r3, #12
 80125c4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80125c6:	8bfb      	ldrh	r3, [r7, #30]
 80125c8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80125cc:	d803      	bhi.n	80125d6 <mem_trim+0x32>
 80125ce:	8bfa      	ldrh	r2, [r7, #30]
 80125d0:	887b      	ldrh	r3, [r7, #2]
 80125d2:	429a      	cmp	r2, r3
 80125d4:	d201      	bcs.n	80125da <mem_trim+0x36>
    return NULL;
 80125d6:	2300      	movs	r3, #0
 80125d8:	e0d8      	b.n	801278c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80125da:	4b6e      	ldr	r3, [pc, #440]	; (8012794 <mem_trim+0x1f0>)
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	687a      	ldr	r2, [r7, #4]
 80125e0:	429a      	cmp	r2, r3
 80125e2:	d304      	bcc.n	80125ee <mem_trim+0x4a>
 80125e4:	4b6c      	ldr	r3, [pc, #432]	; (8012798 <mem_trim+0x1f4>)
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	687a      	ldr	r2, [r7, #4]
 80125ea:	429a      	cmp	r2, r3
 80125ec:	d306      	bcc.n	80125fc <mem_trim+0x58>
 80125ee:	4b6b      	ldr	r3, [pc, #428]	; (801279c <mem_trim+0x1f8>)
 80125f0:	f240 22d1 	movw	r2, #721	; 0x2d1
 80125f4:	496a      	ldr	r1, [pc, #424]	; (80127a0 <mem_trim+0x1fc>)
 80125f6:	486b      	ldr	r0, [pc, #428]	; (80127a4 <mem_trim+0x200>)
 80125f8:	f00b fe6e 	bl	801e2d8 <printf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80125fc:	4b65      	ldr	r3, [pc, #404]	; (8012794 <mem_trim+0x1f0>)
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	687a      	ldr	r2, [r7, #4]
 8012602:	429a      	cmp	r2, r3
 8012604:	d304      	bcc.n	8012610 <mem_trim+0x6c>
 8012606:	4b64      	ldr	r3, [pc, #400]	; (8012798 <mem_trim+0x1f4>)
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	687a      	ldr	r2, [r7, #4]
 801260c:	429a      	cmp	r2, r3
 801260e:	d307      	bcc.n	8012620 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012610:	f00b fde0 	bl	801e1d4 <sys_arch_protect>
 8012614:	60b8      	str	r0, [r7, #8]
 8012616:	68b8      	ldr	r0, [r7, #8]
 8012618:	f00b fdea 	bl	801e1f0 <sys_arch_unprotect>
    return rmem;
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	e0b5      	b.n	801278c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	3b08      	subs	r3, #8
 8012624:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8012626:	69b8      	ldr	r0, [r7, #24]
 8012628:	f7ff fdea 	bl	8012200 <mem_to_ptr>
 801262c:	4603      	mov	r3, r0
 801262e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8012630:	69bb      	ldr	r3, [r7, #24]
 8012632:	881a      	ldrh	r2, [r3, #0]
 8012634:	8afb      	ldrh	r3, [r7, #22]
 8012636:	1ad3      	subs	r3, r2, r3
 8012638:	b29b      	uxth	r3, r3
 801263a:	3b08      	subs	r3, #8
 801263c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801263e:	8bfa      	ldrh	r2, [r7, #30]
 8012640:	8abb      	ldrh	r3, [r7, #20]
 8012642:	429a      	cmp	r2, r3
 8012644:	d906      	bls.n	8012654 <mem_trim+0xb0>
 8012646:	4b55      	ldr	r3, [pc, #340]	; (801279c <mem_trim+0x1f8>)
 8012648:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 801264c:	4956      	ldr	r1, [pc, #344]	; (80127a8 <mem_trim+0x204>)
 801264e:	4855      	ldr	r0, [pc, #340]	; (80127a4 <mem_trim+0x200>)
 8012650:	f00b fe42 	bl	801e2d8 <printf>
  if (newsize > size) {
 8012654:	8bfa      	ldrh	r2, [r7, #30]
 8012656:	8abb      	ldrh	r3, [r7, #20]
 8012658:	429a      	cmp	r2, r3
 801265a:	d901      	bls.n	8012660 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 801265c:	2300      	movs	r3, #0
 801265e:	e095      	b.n	801278c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8012660:	8bfa      	ldrh	r2, [r7, #30]
 8012662:	8abb      	ldrh	r3, [r7, #20]
 8012664:	429a      	cmp	r2, r3
 8012666:	d101      	bne.n	801266c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	e08f      	b.n	801278c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801266c:	484f      	ldr	r0, [pc, #316]	; (80127ac <mem_trim+0x208>)
 801266e:	f00b fd75 	bl	801e15c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8012672:	69bb      	ldr	r3, [r7, #24]
 8012674:	881b      	ldrh	r3, [r3, #0]
 8012676:	4618      	mov	r0, r3
 8012678:	f7ff fdb0 	bl	80121dc <ptr_to_mem>
 801267c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801267e:	693b      	ldr	r3, [r7, #16]
 8012680:	791b      	ldrb	r3, [r3, #4]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d13f      	bne.n	8012706 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8012686:	69bb      	ldr	r3, [r7, #24]
 8012688:	881b      	ldrh	r3, [r3, #0]
 801268a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801268e:	d106      	bne.n	801269e <mem_trim+0xfa>
 8012690:	4b42      	ldr	r3, [pc, #264]	; (801279c <mem_trim+0x1f8>)
 8012692:	f240 22f5 	movw	r2, #757	; 0x2f5
 8012696:	4946      	ldr	r1, [pc, #280]	; (80127b0 <mem_trim+0x20c>)
 8012698:	4842      	ldr	r0, [pc, #264]	; (80127a4 <mem_trim+0x200>)
 801269a:	f00b fe1d 	bl	801e2d8 <printf>
    /* remember the old next pointer */
    next = mem2->next;
 801269e:	693b      	ldr	r3, [r7, #16]
 80126a0:	881b      	ldrh	r3, [r3, #0]
 80126a2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80126a4:	8afa      	ldrh	r2, [r7, #22]
 80126a6:	8bfb      	ldrh	r3, [r7, #30]
 80126a8:	4413      	add	r3, r2
 80126aa:	b29b      	uxth	r3, r3
 80126ac:	3308      	adds	r3, #8
 80126ae:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80126b0:	4b40      	ldr	r3, [pc, #256]	; (80127b4 <mem_trim+0x210>)
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	693a      	ldr	r2, [r7, #16]
 80126b6:	429a      	cmp	r2, r3
 80126b8:	d106      	bne.n	80126c8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80126ba:	89fb      	ldrh	r3, [r7, #14]
 80126bc:	4618      	mov	r0, r3
 80126be:	f7ff fd8d 	bl	80121dc <ptr_to_mem>
 80126c2:	4603      	mov	r3, r0
 80126c4:	4a3b      	ldr	r2, [pc, #236]	; (80127b4 <mem_trim+0x210>)
 80126c6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80126c8:	89fb      	ldrh	r3, [r7, #14]
 80126ca:	4618      	mov	r0, r3
 80126cc:	f7ff fd86 	bl	80121dc <ptr_to_mem>
 80126d0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80126d2:	693b      	ldr	r3, [r7, #16]
 80126d4:	2200      	movs	r2, #0
 80126d6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80126d8:	693b      	ldr	r3, [r7, #16]
 80126da:	89ba      	ldrh	r2, [r7, #12]
 80126dc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80126de:	693b      	ldr	r3, [r7, #16]
 80126e0:	8afa      	ldrh	r2, [r7, #22]
 80126e2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80126e4:	69bb      	ldr	r3, [r7, #24]
 80126e6:	89fa      	ldrh	r2, [r7, #14]
 80126e8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80126ea:	693b      	ldr	r3, [r7, #16]
 80126ec:	881b      	ldrh	r3, [r3, #0]
 80126ee:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80126f2:	d047      	beq.n	8012784 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80126f4:	693b      	ldr	r3, [r7, #16]
 80126f6:	881b      	ldrh	r3, [r3, #0]
 80126f8:	4618      	mov	r0, r3
 80126fa:	f7ff fd6f 	bl	80121dc <ptr_to_mem>
 80126fe:	4602      	mov	r2, r0
 8012700:	89fb      	ldrh	r3, [r7, #14]
 8012702:	8053      	strh	r3, [r2, #2]
 8012704:	e03e      	b.n	8012784 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8012706:	8bfb      	ldrh	r3, [r7, #30]
 8012708:	f103 0214 	add.w	r2, r3, #20
 801270c:	8abb      	ldrh	r3, [r7, #20]
 801270e:	429a      	cmp	r2, r3
 8012710:	d838      	bhi.n	8012784 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8012712:	8afa      	ldrh	r2, [r7, #22]
 8012714:	8bfb      	ldrh	r3, [r7, #30]
 8012716:	4413      	add	r3, r2
 8012718:	b29b      	uxth	r3, r3
 801271a:	3308      	adds	r3, #8
 801271c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801271e:	69bb      	ldr	r3, [r7, #24]
 8012720:	881b      	ldrh	r3, [r3, #0]
 8012722:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012726:	d106      	bne.n	8012736 <mem_trim+0x192>
 8012728:	4b1c      	ldr	r3, [pc, #112]	; (801279c <mem_trim+0x1f8>)
 801272a:	f240 3216 	movw	r2, #790	; 0x316
 801272e:	4920      	ldr	r1, [pc, #128]	; (80127b0 <mem_trim+0x20c>)
 8012730:	481c      	ldr	r0, [pc, #112]	; (80127a4 <mem_trim+0x200>)
 8012732:	f00b fdd1 	bl	801e2d8 <printf>
    mem2 = ptr_to_mem(ptr2);
 8012736:	89fb      	ldrh	r3, [r7, #14]
 8012738:	4618      	mov	r0, r3
 801273a:	f7ff fd4f 	bl	80121dc <ptr_to_mem>
 801273e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8012740:	4b1c      	ldr	r3, [pc, #112]	; (80127b4 <mem_trim+0x210>)
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	693a      	ldr	r2, [r7, #16]
 8012746:	429a      	cmp	r2, r3
 8012748:	d202      	bcs.n	8012750 <mem_trim+0x1ac>
      lfree = mem2;
 801274a:	4a1a      	ldr	r2, [pc, #104]	; (80127b4 <mem_trim+0x210>)
 801274c:	693b      	ldr	r3, [r7, #16]
 801274e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8012750:	693b      	ldr	r3, [r7, #16]
 8012752:	2200      	movs	r2, #0
 8012754:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8012756:	69bb      	ldr	r3, [r7, #24]
 8012758:	881a      	ldrh	r2, [r3, #0]
 801275a:	693b      	ldr	r3, [r7, #16]
 801275c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801275e:	693b      	ldr	r3, [r7, #16]
 8012760:	8afa      	ldrh	r2, [r7, #22]
 8012762:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8012764:	69bb      	ldr	r3, [r7, #24]
 8012766:	89fa      	ldrh	r2, [r7, #14]
 8012768:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801276a:	693b      	ldr	r3, [r7, #16]
 801276c:	881b      	ldrh	r3, [r3, #0]
 801276e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012772:	d007      	beq.n	8012784 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8012774:	693b      	ldr	r3, [r7, #16]
 8012776:	881b      	ldrh	r3, [r3, #0]
 8012778:	4618      	mov	r0, r3
 801277a:	f7ff fd2f 	bl	80121dc <ptr_to_mem>
 801277e:	4602      	mov	r2, r0
 8012780:	89fb      	ldrh	r3, [r7, #14]
 8012782:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8012784:	4809      	ldr	r0, [pc, #36]	; (80127ac <mem_trim+0x208>)
 8012786:	f00b fcf8 	bl	801e17a <sys_mutex_unlock>
  return rmem;
 801278a:	687b      	ldr	r3, [r7, #4]
}
 801278c:	4618      	mov	r0, r3
 801278e:	3720      	adds	r7, #32
 8012790:	46bd      	mov	sp, r7
 8012792:	bd80      	pop	{r7, pc}
 8012794:	200090ac 	.word	0x200090ac
 8012798:	200090b0 	.word	0x200090b0
 801279c:	0802469c 	.word	0x0802469c
 80127a0:	08024828 	.word	0x08024828
 80127a4:	080246e4 	.word	0x080246e4
 80127a8:	08024840 	.word	0x08024840
 80127ac:	200090b4 	.word	0x200090b4
 80127b0:	08024860 	.word	0x08024860
 80127b4:	200090b8 	.word	0x200090b8

080127b8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80127b8:	b580      	push	{r7, lr}
 80127ba:	b088      	sub	sp, #32
 80127bc:	af00      	add	r7, sp, #0
 80127be:	4603      	mov	r3, r0
 80127c0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80127c2:	88fb      	ldrh	r3, [r7, #6]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d101      	bne.n	80127cc <mem_malloc+0x14>
    return NULL;
 80127c8:	2300      	movs	r3, #0
 80127ca:	e0e2      	b.n	8012992 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80127cc:	88fb      	ldrh	r3, [r7, #6]
 80127ce:	3303      	adds	r3, #3
 80127d0:	b29b      	uxth	r3, r3
 80127d2:	f023 0303 	bic.w	r3, r3, #3
 80127d6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80127d8:	8bbb      	ldrh	r3, [r7, #28]
 80127da:	2b0b      	cmp	r3, #11
 80127dc:	d801      	bhi.n	80127e2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80127de:	230c      	movs	r3, #12
 80127e0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80127e2:	8bbb      	ldrh	r3, [r7, #28]
 80127e4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80127e8:	d803      	bhi.n	80127f2 <mem_malloc+0x3a>
 80127ea:	8bba      	ldrh	r2, [r7, #28]
 80127ec:	88fb      	ldrh	r3, [r7, #6]
 80127ee:	429a      	cmp	r2, r3
 80127f0:	d201      	bcs.n	80127f6 <mem_malloc+0x3e>
    return NULL;
 80127f2:	2300      	movs	r3, #0
 80127f4:	e0cd      	b.n	8012992 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80127f6:	4869      	ldr	r0, [pc, #420]	; (801299c <mem_malloc+0x1e4>)
 80127f8:	f00b fcb0 	bl	801e15c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80127fc:	4b68      	ldr	r3, [pc, #416]	; (80129a0 <mem_malloc+0x1e8>)
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	4618      	mov	r0, r3
 8012802:	f7ff fcfd 	bl	8012200 <mem_to_ptr>
 8012806:	4603      	mov	r3, r0
 8012808:	83fb      	strh	r3, [r7, #30]
 801280a:	e0b7      	b.n	801297c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 801280c:	8bfb      	ldrh	r3, [r7, #30]
 801280e:	4618      	mov	r0, r3
 8012810:	f7ff fce4 	bl	80121dc <ptr_to_mem>
 8012814:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8012816:	697b      	ldr	r3, [r7, #20]
 8012818:	791b      	ldrb	r3, [r3, #4]
 801281a:	2b00      	cmp	r3, #0
 801281c:	f040 80a7 	bne.w	801296e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8012820:	697b      	ldr	r3, [r7, #20]
 8012822:	881b      	ldrh	r3, [r3, #0]
 8012824:	461a      	mov	r2, r3
 8012826:	8bfb      	ldrh	r3, [r7, #30]
 8012828:	1ad3      	subs	r3, r2, r3
 801282a:	f1a3 0208 	sub.w	r2, r3, #8
 801282e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8012830:	429a      	cmp	r2, r3
 8012832:	f0c0 809c 	bcc.w	801296e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8012836:	697b      	ldr	r3, [r7, #20]
 8012838:	881b      	ldrh	r3, [r3, #0]
 801283a:	461a      	mov	r2, r3
 801283c:	8bfb      	ldrh	r3, [r7, #30]
 801283e:	1ad3      	subs	r3, r2, r3
 8012840:	f1a3 0208 	sub.w	r2, r3, #8
 8012844:	8bbb      	ldrh	r3, [r7, #28]
 8012846:	3314      	adds	r3, #20
 8012848:	429a      	cmp	r2, r3
 801284a:	d333      	bcc.n	80128b4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801284c:	8bfa      	ldrh	r2, [r7, #30]
 801284e:	8bbb      	ldrh	r3, [r7, #28]
 8012850:	4413      	add	r3, r2
 8012852:	b29b      	uxth	r3, r3
 8012854:	3308      	adds	r3, #8
 8012856:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8012858:	8a7b      	ldrh	r3, [r7, #18]
 801285a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801285e:	d106      	bne.n	801286e <mem_malloc+0xb6>
 8012860:	4b50      	ldr	r3, [pc, #320]	; (80129a4 <mem_malloc+0x1ec>)
 8012862:	f240 3287 	movw	r2, #903	; 0x387
 8012866:	4950      	ldr	r1, [pc, #320]	; (80129a8 <mem_malloc+0x1f0>)
 8012868:	4850      	ldr	r0, [pc, #320]	; (80129ac <mem_malloc+0x1f4>)
 801286a:	f00b fd35 	bl	801e2d8 <printf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801286e:	8a7b      	ldrh	r3, [r7, #18]
 8012870:	4618      	mov	r0, r3
 8012872:	f7ff fcb3 	bl	80121dc <ptr_to_mem>
 8012876:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	2200      	movs	r2, #0
 801287c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801287e:	697b      	ldr	r3, [r7, #20]
 8012880:	881a      	ldrh	r2, [r3, #0]
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	8bfa      	ldrh	r2, [r7, #30]
 801288a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801288c:	697b      	ldr	r3, [r7, #20]
 801288e:	8a7a      	ldrh	r2, [r7, #18]
 8012890:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8012892:	697b      	ldr	r3, [r7, #20]
 8012894:	2201      	movs	r2, #1
 8012896:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	881b      	ldrh	r3, [r3, #0]
 801289c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80128a0:	d00b      	beq.n	80128ba <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	881b      	ldrh	r3, [r3, #0]
 80128a6:	4618      	mov	r0, r3
 80128a8:	f7ff fc98 	bl	80121dc <ptr_to_mem>
 80128ac:	4602      	mov	r2, r0
 80128ae:	8a7b      	ldrh	r3, [r7, #18]
 80128b0:	8053      	strh	r3, [r2, #2]
 80128b2:	e002      	b.n	80128ba <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80128b4:	697b      	ldr	r3, [r7, #20]
 80128b6:	2201      	movs	r2, #1
 80128b8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80128ba:	4b39      	ldr	r3, [pc, #228]	; (80129a0 <mem_malloc+0x1e8>)
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	697a      	ldr	r2, [r7, #20]
 80128c0:	429a      	cmp	r2, r3
 80128c2:	d127      	bne.n	8012914 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80128c4:	4b36      	ldr	r3, [pc, #216]	; (80129a0 <mem_malloc+0x1e8>)
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80128ca:	e005      	b.n	80128d8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80128cc:	69bb      	ldr	r3, [r7, #24]
 80128ce:	881b      	ldrh	r3, [r3, #0]
 80128d0:	4618      	mov	r0, r3
 80128d2:	f7ff fc83 	bl	80121dc <ptr_to_mem>
 80128d6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80128d8:	69bb      	ldr	r3, [r7, #24]
 80128da:	791b      	ldrb	r3, [r3, #4]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d004      	beq.n	80128ea <mem_malloc+0x132>
 80128e0:	4b33      	ldr	r3, [pc, #204]	; (80129b0 <mem_malloc+0x1f8>)
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	69ba      	ldr	r2, [r7, #24]
 80128e6:	429a      	cmp	r2, r3
 80128e8:	d1f0      	bne.n	80128cc <mem_malloc+0x114>
          }
          lfree = cur;
 80128ea:	4a2d      	ldr	r2, [pc, #180]	; (80129a0 <mem_malloc+0x1e8>)
 80128ec:	69bb      	ldr	r3, [r7, #24]
 80128ee:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80128f0:	4b2b      	ldr	r3, [pc, #172]	; (80129a0 <mem_malloc+0x1e8>)
 80128f2:	681a      	ldr	r2, [r3, #0]
 80128f4:	4b2e      	ldr	r3, [pc, #184]	; (80129b0 <mem_malloc+0x1f8>)
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	429a      	cmp	r2, r3
 80128fa:	d00b      	beq.n	8012914 <mem_malloc+0x15c>
 80128fc:	4b28      	ldr	r3, [pc, #160]	; (80129a0 <mem_malloc+0x1e8>)
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	791b      	ldrb	r3, [r3, #4]
 8012902:	2b00      	cmp	r3, #0
 8012904:	d006      	beq.n	8012914 <mem_malloc+0x15c>
 8012906:	4b27      	ldr	r3, [pc, #156]	; (80129a4 <mem_malloc+0x1ec>)
 8012908:	f240 32b5 	movw	r2, #949	; 0x3b5
 801290c:	4929      	ldr	r1, [pc, #164]	; (80129b4 <mem_malloc+0x1fc>)
 801290e:	4827      	ldr	r0, [pc, #156]	; (80129ac <mem_malloc+0x1f4>)
 8012910:	f00b fce2 	bl	801e2d8 <printf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8012914:	4821      	ldr	r0, [pc, #132]	; (801299c <mem_malloc+0x1e4>)
 8012916:	f00b fc30 	bl	801e17a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801291a:	8bba      	ldrh	r2, [r7, #28]
 801291c:	697b      	ldr	r3, [r7, #20]
 801291e:	4413      	add	r3, r2
 8012920:	3308      	adds	r3, #8
 8012922:	4a23      	ldr	r2, [pc, #140]	; (80129b0 <mem_malloc+0x1f8>)
 8012924:	6812      	ldr	r2, [r2, #0]
 8012926:	4293      	cmp	r3, r2
 8012928:	d906      	bls.n	8012938 <mem_malloc+0x180>
 801292a:	4b1e      	ldr	r3, [pc, #120]	; (80129a4 <mem_malloc+0x1ec>)
 801292c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8012930:	4921      	ldr	r1, [pc, #132]	; (80129b8 <mem_malloc+0x200>)
 8012932:	481e      	ldr	r0, [pc, #120]	; (80129ac <mem_malloc+0x1f4>)
 8012934:	f00b fcd0 	bl	801e2d8 <printf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8012938:	697b      	ldr	r3, [r7, #20]
 801293a:	f003 0303 	and.w	r3, r3, #3
 801293e:	2b00      	cmp	r3, #0
 8012940:	d006      	beq.n	8012950 <mem_malloc+0x198>
 8012942:	4b18      	ldr	r3, [pc, #96]	; (80129a4 <mem_malloc+0x1ec>)
 8012944:	f240 32bb 	movw	r2, #955	; 0x3bb
 8012948:	491c      	ldr	r1, [pc, #112]	; (80129bc <mem_malloc+0x204>)
 801294a:	4818      	ldr	r0, [pc, #96]	; (80129ac <mem_malloc+0x1f4>)
 801294c:	f00b fcc4 	bl	801e2d8 <printf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8012950:	697b      	ldr	r3, [r7, #20]
 8012952:	f003 0303 	and.w	r3, r3, #3
 8012956:	2b00      	cmp	r3, #0
 8012958:	d006      	beq.n	8012968 <mem_malloc+0x1b0>
 801295a:	4b12      	ldr	r3, [pc, #72]	; (80129a4 <mem_malloc+0x1ec>)
 801295c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8012960:	4917      	ldr	r1, [pc, #92]	; (80129c0 <mem_malloc+0x208>)
 8012962:	4812      	ldr	r0, [pc, #72]	; (80129ac <mem_malloc+0x1f4>)
 8012964:	f00b fcb8 	bl	801e2d8 <printf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8012968:	697b      	ldr	r3, [r7, #20]
 801296a:	3308      	adds	r3, #8
 801296c:	e011      	b.n	8012992 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 801296e:	8bfb      	ldrh	r3, [r7, #30]
 8012970:	4618      	mov	r0, r3
 8012972:	f7ff fc33 	bl	80121dc <ptr_to_mem>
 8012976:	4603      	mov	r3, r0
 8012978:	881b      	ldrh	r3, [r3, #0]
 801297a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801297c:	8bfa      	ldrh	r2, [r7, #30]
 801297e:	8bbb      	ldrh	r3, [r7, #28]
 8012980:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8012984:	429a      	cmp	r2, r3
 8012986:	f4ff af41 	bcc.w	801280c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 801298a:	4804      	ldr	r0, [pc, #16]	; (801299c <mem_malloc+0x1e4>)
 801298c:	f00b fbf5 	bl	801e17a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8012990:	2300      	movs	r3, #0
}
 8012992:	4618      	mov	r0, r3
 8012994:	3720      	adds	r7, #32
 8012996:	46bd      	mov	sp, r7
 8012998:	bd80      	pop	{r7, pc}
 801299a:	bf00      	nop
 801299c:	200090b4 	.word	0x200090b4
 80129a0:	200090b8 	.word	0x200090b8
 80129a4:	0802469c 	.word	0x0802469c
 80129a8:	08024860 	.word	0x08024860
 80129ac:	080246e4 	.word	0x080246e4
 80129b0:	200090b0 	.word	0x200090b0
 80129b4:	08024874 	.word	0x08024874
 80129b8:	08024890 	.word	0x08024890
 80129bc:	080248c0 	.word	0x080248c0
 80129c0:	080248f0 	.word	0x080248f0

080129c4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80129c4:	b480      	push	{r7}
 80129c6:	b085      	sub	sp, #20
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	689b      	ldr	r3, [r3, #8]
 80129d0:	2200      	movs	r2, #0
 80129d2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	685b      	ldr	r3, [r3, #4]
 80129d8:	3303      	adds	r3, #3
 80129da:	f023 0303 	bic.w	r3, r3, #3
 80129de:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80129e0:	2300      	movs	r3, #0
 80129e2:	60fb      	str	r3, [r7, #12]
 80129e4:	e011      	b.n	8012a0a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	689b      	ldr	r3, [r3, #8]
 80129ea:	681a      	ldr	r2, [r3, #0]
 80129ec:	68bb      	ldr	r3, [r7, #8]
 80129ee:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	689b      	ldr	r3, [r3, #8]
 80129f4:	68ba      	ldr	r2, [r7, #8]
 80129f6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	881b      	ldrh	r3, [r3, #0]
 80129fc:	461a      	mov	r2, r3
 80129fe:	68bb      	ldr	r3, [r7, #8]
 8012a00:	4413      	add	r3, r2
 8012a02:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	3301      	adds	r3, #1
 8012a08:	60fb      	str	r3, [r7, #12]
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	885b      	ldrh	r3, [r3, #2]
 8012a0e:	461a      	mov	r2, r3
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	4293      	cmp	r3, r2
 8012a14:	dbe7      	blt.n	80129e6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8012a16:	bf00      	nop
 8012a18:	bf00      	nop
 8012a1a:	3714      	adds	r7, #20
 8012a1c:	46bd      	mov	sp, r7
 8012a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a22:	4770      	bx	lr

08012a24 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8012a24:	b580      	push	{r7, lr}
 8012a26:	b082      	sub	sp, #8
 8012a28:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	80fb      	strh	r3, [r7, #6]
 8012a2e:	e009      	b.n	8012a44 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8012a30:	88fb      	ldrh	r3, [r7, #6]
 8012a32:	4a08      	ldr	r2, [pc, #32]	; (8012a54 <memp_init+0x30>)
 8012a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012a38:	4618      	mov	r0, r3
 8012a3a:	f7ff ffc3 	bl	80129c4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8012a3e:	88fb      	ldrh	r3, [r7, #6]
 8012a40:	3301      	adds	r3, #1
 8012a42:	80fb      	strh	r3, [r7, #6]
 8012a44:	88fb      	ldrh	r3, [r7, #6]
 8012a46:	2b0c      	cmp	r3, #12
 8012a48:	d9f2      	bls.n	8012a30 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8012a4a:	bf00      	nop
 8012a4c:	bf00      	nop
 8012a4e:	3708      	adds	r7, #8
 8012a50:	46bd      	mov	sp, r7
 8012a52:	bd80      	pop	{r7, pc}
 8012a54:	0806f5c8 	.word	0x0806f5c8

08012a58 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	b084      	sub	sp, #16
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8012a60:	f00b fbb8 	bl	801e1d4 <sys_arch_protect>
 8012a64:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	689b      	ldr	r3, [r3, #8]
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8012a6e:	68bb      	ldr	r3, [r7, #8]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d015      	beq.n	8012aa0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	689b      	ldr	r3, [r3, #8]
 8012a78:	68ba      	ldr	r2, [r7, #8]
 8012a7a:	6812      	ldr	r2, [r2, #0]
 8012a7c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8012a7e:	68bb      	ldr	r3, [r7, #8]
 8012a80:	f003 0303 	and.w	r3, r3, #3
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d006      	beq.n	8012a96 <do_memp_malloc_pool+0x3e>
 8012a88:	4b09      	ldr	r3, [pc, #36]	; (8012ab0 <do_memp_malloc_pool+0x58>)
 8012a8a:	f44f 728c 	mov.w	r2, #280	; 0x118
 8012a8e:	4909      	ldr	r1, [pc, #36]	; (8012ab4 <do_memp_malloc_pool+0x5c>)
 8012a90:	4809      	ldr	r0, [pc, #36]	; (8012ab8 <do_memp_malloc_pool+0x60>)
 8012a92:	f00b fc21 	bl	801e2d8 <printf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8012a96:	68f8      	ldr	r0, [r7, #12]
 8012a98:	f00b fbaa 	bl	801e1f0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8012a9c:	68bb      	ldr	r3, [r7, #8]
 8012a9e:	e003      	b.n	8012aa8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8012aa0:	68f8      	ldr	r0, [r7, #12]
 8012aa2:	f00b fba5 	bl	801e1f0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8012aa6:	2300      	movs	r3, #0
}
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	3710      	adds	r7, #16
 8012aac:	46bd      	mov	sp, r7
 8012aae:	bd80      	pop	{r7, pc}
 8012ab0:	08024914 	.word	0x08024914
 8012ab4:	08024944 	.word	0x08024944
 8012ab8:	08024968 	.word	0x08024968

08012abc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8012abc:	b580      	push	{r7, lr}
 8012abe:	b084      	sub	sp, #16
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	4603      	mov	r3, r0
 8012ac4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8012ac6:	79fb      	ldrb	r3, [r7, #7]
 8012ac8:	2b0c      	cmp	r3, #12
 8012aca:	d908      	bls.n	8012ade <memp_malloc+0x22>
 8012acc:	4b0a      	ldr	r3, [pc, #40]	; (8012af8 <memp_malloc+0x3c>)
 8012ace:	f240 1257 	movw	r2, #343	; 0x157
 8012ad2:	490a      	ldr	r1, [pc, #40]	; (8012afc <memp_malloc+0x40>)
 8012ad4:	480a      	ldr	r0, [pc, #40]	; (8012b00 <memp_malloc+0x44>)
 8012ad6:	f00b fbff 	bl	801e2d8 <printf>
 8012ada:	2300      	movs	r3, #0
 8012adc:	e008      	b.n	8012af0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8012ade:	79fb      	ldrb	r3, [r7, #7]
 8012ae0:	4a08      	ldr	r2, [pc, #32]	; (8012b04 <memp_malloc+0x48>)
 8012ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	f7ff ffb6 	bl	8012a58 <do_memp_malloc_pool>
 8012aec:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8012aee:	68fb      	ldr	r3, [r7, #12]
}
 8012af0:	4618      	mov	r0, r3
 8012af2:	3710      	adds	r7, #16
 8012af4:	46bd      	mov	sp, r7
 8012af6:	bd80      	pop	{r7, pc}
 8012af8:	08024914 	.word	0x08024914
 8012afc:	080249a4 	.word	0x080249a4
 8012b00:	08024968 	.word	0x08024968
 8012b04:	0806f5c8 	.word	0x0806f5c8

08012b08 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8012b08:	b580      	push	{r7, lr}
 8012b0a:	b084      	sub	sp, #16
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	6078      	str	r0, [r7, #4]
 8012b10:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8012b12:	683b      	ldr	r3, [r7, #0]
 8012b14:	f003 0303 	and.w	r3, r3, #3
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d006      	beq.n	8012b2a <do_memp_free_pool+0x22>
 8012b1c:	4b0d      	ldr	r3, [pc, #52]	; (8012b54 <do_memp_free_pool+0x4c>)
 8012b1e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8012b22:	490d      	ldr	r1, [pc, #52]	; (8012b58 <do_memp_free_pool+0x50>)
 8012b24:	480d      	ldr	r0, [pc, #52]	; (8012b5c <do_memp_free_pool+0x54>)
 8012b26:	f00b fbd7 	bl	801e2d8 <printf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8012b2a:	683b      	ldr	r3, [r7, #0]
 8012b2c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8012b2e:	f00b fb51 	bl	801e1d4 <sys_arch_protect>
 8012b32:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	689b      	ldr	r3, [r3, #8]
 8012b38:	681a      	ldr	r2, [r3, #0]
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	689b      	ldr	r3, [r3, #8]
 8012b42:	68fa      	ldr	r2, [r7, #12]
 8012b44:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8012b46:	68b8      	ldr	r0, [r7, #8]
 8012b48:	f00b fb52 	bl	801e1f0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8012b4c:	bf00      	nop
 8012b4e:	3710      	adds	r7, #16
 8012b50:	46bd      	mov	sp, r7
 8012b52:	bd80      	pop	{r7, pc}
 8012b54:	08024914 	.word	0x08024914
 8012b58:	080249c4 	.word	0x080249c4
 8012b5c:	08024968 	.word	0x08024968

08012b60 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b082      	sub	sp, #8
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	4603      	mov	r3, r0
 8012b68:	6039      	str	r1, [r7, #0]
 8012b6a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8012b6c:	79fb      	ldrb	r3, [r7, #7]
 8012b6e:	2b0c      	cmp	r3, #12
 8012b70:	d907      	bls.n	8012b82 <memp_free+0x22>
 8012b72:	4b0c      	ldr	r3, [pc, #48]	; (8012ba4 <memp_free+0x44>)
 8012b74:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8012b78:	490b      	ldr	r1, [pc, #44]	; (8012ba8 <memp_free+0x48>)
 8012b7a:	480c      	ldr	r0, [pc, #48]	; (8012bac <memp_free+0x4c>)
 8012b7c:	f00b fbac 	bl	801e2d8 <printf>
 8012b80:	e00c      	b.n	8012b9c <memp_free+0x3c>

  if (mem == NULL) {
 8012b82:	683b      	ldr	r3, [r7, #0]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d008      	beq.n	8012b9a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8012b88:	79fb      	ldrb	r3, [r7, #7]
 8012b8a:	4a09      	ldr	r2, [pc, #36]	; (8012bb0 <memp_free+0x50>)
 8012b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012b90:	6839      	ldr	r1, [r7, #0]
 8012b92:	4618      	mov	r0, r3
 8012b94:	f7ff ffb8 	bl	8012b08 <do_memp_free_pool>
 8012b98:	e000      	b.n	8012b9c <memp_free+0x3c>
    return;
 8012b9a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8012b9c:	3708      	adds	r7, #8
 8012b9e:	46bd      	mov	sp, r7
 8012ba0:	bd80      	pop	{r7, pc}
 8012ba2:	bf00      	nop
 8012ba4:	08024914 	.word	0x08024914
 8012ba8:	080249e4 	.word	0x080249e4
 8012bac:	08024968 	.word	0x08024968
 8012bb0:	0806f5c8 	.word	0x0806f5c8

08012bb4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8012bb4:	b480      	push	{r7}
 8012bb6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8012bb8:	bf00      	nop
 8012bba:	46bd      	mov	sp, r7
 8012bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc0:	4770      	bx	lr
	...

08012bc4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b086      	sub	sp, #24
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	60f8      	str	r0, [r7, #12]
 8012bcc:	60b9      	str	r1, [r7, #8]
 8012bce:	607a      	str	r2, [r7, #4]
 8012bd0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d108      	bne.n	8012bea <netif_add+0x26>
 8012bd8:	4b5b      	ldr	r3, [pc, #364]	; (8012d48 <netif_add+0x184>)
 8012bda:	f240 1227 	movw	r2, #295	; 0x127
 8012bde:	495b      	ldr	r1, [pc, #364]	; (8012d4c <netif_add+0x188>)
 8012be0:	485b      	ldr	r0, [pc, #364]	; (8012d50 <netif_add+0x18c>)
 8012be2:	f00b fb79 	bl	801e2d8 <printf>
 8012be6:	2300      	movs	r3, #0
 8012be8:	e0a9      	b.n	8012d3e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8012bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d108      	bne.n	8012c02 <netif_add+0x3e>
 8012bf0:	4b55      	ldr	r3, [pc, #340]	; (8012d48 <netif_add+0x184>)
 8012bf2:	f44f 7294 	mov.w	r2, #296	; 0x128
 8012bf6:	4957      	ldr	r1, [pc, #348]	; (8012d54 <netif_add+0x190>)
 8012bf8:	4855      	ldr	r0, [pc, #340]	; (8012d50 <netif_add+0x18c>)
 8012bfa:	f00b fb6d 	bl	801e2d8 <printf>
 8012bfe:	2300      	movs	r3, #0
 8012c00:	e09d      	b.n	8012d3e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8012c02:	68bb      	ldr	r3, [r7, #8]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d101      	bne.n	8012c0c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8012c08:	4b53      	ldr	r3, [pc, #332]	; (8012d58 <netif_add+0x194>)
 8012c0a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d101      	bne.n	8012c16 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8012c12:	4b51      	ldr	r3, [pc, #324]	; (8012d58 <netif_add+0x194>)
 8012c14:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8012c16:	683b      	ldr	r3, [r7, #0]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d101      	bne.n	8012c20 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8012c1c:	4b4e      	ldr	r3, [pc, #312]	; (8012d58 <netif_add+0x194>)
 8012c1e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	2200      	movs	r2, #0
 8012c24:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	2200      	movs	r2, #0
 8012c2a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	2200      	movs	r2, #0
 8012c30:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	4a49      	ldr	r2, [pc, #292]	; (8012d5c <netif_add+0x198>)
 8012c36:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8012c3e:	68fb      	ldr	r3, [r7, #12]
 8012c40:	2200      	movs	r2, #0
 8012c42:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	3324      	adds	r3, #36	; 0x24
 8012c4a:	2204      	movs	r2, #4
 8012c4c:	2100      	movs	r1, #0
 8012c4e:	4618      	mov	r0, r3
 8012c50:	f00b fb3a 	bl	801e2c8 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	2200      	movs	r2, #0
 8012c58:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	6a3a      	ldr	r2, [r7, #32]
 8012c5e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8012c60:	4b3f      	ldr	r3, [pc, #252]	; (8012d60 <netif_add+0x19c>)
 8012c62:	781a      	ldrb	r2, [r3, #0]
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012c6e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8012c70:	683b      	ldr	r3, [r7, #0]
 8012c72:	687a      	ldr	r2, [r7, #4]
 8012c74:	68b9      	ldr	r1, [r7, #8]
 8012c76:	68f8      	ldr	r0, [r7, #12]
 8012c78:	f000 f914 	bl	8012ea4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8012c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c7e:	68f8      	ldr	r0, [r7, #12]
 8012c80:	4798      	blx	r3
 8012c82:	4603      	mov	r3, r0
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d001      	beq.n	8012c8c <netif_add+0xc8>
    return NULL;
 8012c88:	2300      	movs	r3, #0
 8012c8a:	e058      	b.n	8012d3e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012c92:	2bff      	cmp	r3, #255	; 0xff
 8012c94:	d103      	bne.n	8012c9e <netif_add+0xda>
        netif->num = 0;
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	2200      	movs	r2, #0
 8012c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8012c9e:	2300      	movs	r3, #0
 8012ca0:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8012ca2:	4b30      	ldr	r3, [pc, #192]	; (8012d64 <netif_add+0x1a0>)
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	617b      	str	r3, [r7, #20]
 8012ca8:	e02b      	b.n	8012d02 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8012caa:	697a      	ldr	r2, [r7, #20]
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	429a      	cmp	r2, r3
 8012cb0:	d106      	bne.n	8012cc0 <netif_add+0xfc>
 8012cb2:	4b25      	ldr	r3, [pc, #148]	; (8012d48 <netif_add+0x184>)
 8012cb4:	f240 128b 	movw	r2, #395	; 0x18b
 8012cb8:	492b      	ldr	r1, [pc, #172]	; (8012d68 <netif_add+0x1a4>)
 8012cba:	4825      	ldr	r0, [pc, #148]	; (8012d50 <netif_add+0x18c>)
 8012cbc:	f00b fb0c 	bl	801e2d8 <printf>
        num_netifs++;
 8012cc0:	693b      	ldr	r3, [r7, #16]
 8012cc2:	3301      	adds	r3, #1
 8012cc4:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8012cc6:	693b      	ldr	r3, [r7, #16]
 8012cc8:	2bff      	cmp	r3, #255	; 0xff
 8012cca:	dd06      	ble.n	8012cda <netif_add+0x116>
 8012ccc:	4b1e      	ldr	r3, [pc, #120]	; (8012d48 <netif_add+0x184>)
 8012cce:	f240 128d 	movw	r2, #397	; 0x18d
 8012cd2:	4926      	ldr	r1, [pc, #152]	; (8012d6c <netif_add+0x1a8>)
 8012cd4:	481e      	ldr	r0, [pc, #120]	; (8012d50 <netif_add+0x18c>)
 8012cd6:	f00b faff 	bl	801e2d8 <printf>
        if (netif2->num == netif->num) {
 8012cda:	697b      	ldr	r3, [r7, #20]
 8012cdc:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012ce6:	429a      	cmp	r2, r3
 8012ce8:	d108      	bne.n	8012cfc <netif_add+0x138>
          netif->num++;
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012cf0:	3301      	adds	r3, #1
 8012cf2:	b2da      	uxtb	r2, r3
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8012cfa:	e005      	b.n	8012d08 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8012cfc:	697b      	ldr	r3, [r7, #20]
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	617b      	str	r3, [r7, #20]
 8012d02:	697b      	ldr	r3, [r7, #20]
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d1d0      	bne.n	8012caa <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8012d08:	697b      	ldr	r3, [r7, #20]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d1be      	bne.n	8012c8c <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012d14:	2bfe      	cmp	r3, #254	; 0xfe
 8012d16:	d103      	bne.n	8012d20 <netif_add+0x15c>
    netif_num = 0;
 8012d18:	4b11      	ldr	r3, [pc, #68]	; (8012d60 <netif_add+0x19c>)
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	701a      	strb	r2, [r3, #0]
 8012d1e:	e006      	b.n	8012d2e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012d26:	3301      	adds	r3, #1
 8012d28:	b2da      	uxtb	r2, r3
 8012d2a:	4b0d      	ldr	r3, [pc, #52]	; (8012d60 <netif_add+0x19c>)
 8012d2c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8012d2e:	4b0d      	ldr	r3, [pc, #52]	; (8012d64 <netif_add+0x1a0>)
 8012d30:	681a      	ldr	r2, [r3, #0]
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8012d36:	4a0b      	ldr	r2, [pc, #44]	; (8012d64 <netif_add+0x1a0>)
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8012d3c:	68fb      	ldr	r3, [r7, #12]
}
 8012d3e:	4618      	mov	r0, r3
 8012d40:	3718      	adds	r7, #24
 8012d42:	46bd      	mov	sp, r7
 8012d44:	bd80      	pop	{r7, pc}
 8012d46:	bf00      	nop
 8012d48:	08024a00 	.word	0x08024a00
 8012d4c:	08024a94 	.word	0x08024a94
 8012d50:	08024a50 	.word	0x08024a50
 8012d54:	08024ab0 	.word	0x08024ab0
 8012d58:	0806f64c 	.word	0x0806f64c
 8012d5c:	08013187 	.word	0x08013187
 8012d60:	2000c1b0 	.word	0x2000c1b0
 8012d64:	2000c1a8 	.word	0x2000c1a8
 8012d68:	08024ad4 	.word	0x08024ad4
 8012d6c:	08024ae8 	.word	0x08024ae8

08012d70 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b082      	sub	sp, #8
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	6078      	str	r0, [r7, #4]
 8012d78:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8012d7a:	6839      	ldr	r1, [r7, #0]
 8012d7c:	6878      	ldr	r0, [r7, #4]
 8012d7e:	f002 fb91 	bl	80154a4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8012d82:	6839      	ldr	r1, [r7, #0]
 8012d84:	6878      	ldr	r0, [r7, #4]
 8012d86:	f006 ffa7 	bl	8019cd8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8012d8a:	bf00      	nop
 8012d8c:	3708      	adds	r7, #8
 8012d8e:	46bd      	mov	sp, r7
 8012d90:	bd80      	pop	{r7, pc}
	...

08012d94 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8012d94:	b580      	push	{r7, lr}
 8012d96:	b086      	sub	sp, #24
 8012d98:	af00      	add	r7, sp, #0
 8012d9a:	60f8      	str	r0, [r7, #12]
 8012d9c:	60b9      	str	r1, [r7, #8]
 8012d9e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8012da0:	68bb      	ldr	r3, [r7, #8]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d106      	bne.n	8012db4 <netif_do_set_ipaddr+0x20>
 8012da6:	4b1d      	ldr	r3, [pc, #116]	; (8012e1c <netif_do_set_ipaddr+0x88>)
 8012da8:	f240 12cb 	movw	r2, #459	; 0x1cb
 8012dac:	491c      	ldr	r1, [pc, #112]	; (8012e20 <netif_do_set_ipaddr+0x8c>)
 8012dae:	481d      	ldr	r0, [pc, #116]	; (8012e24 <netif_do_set_ipaddr+0x90>)
 8012db0:	f00b fa92 	bl	801e2d8 <printf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d106      	bne.n	8012dc8 <netif_do_set_ipaddr+0x34>
 8012dba:	4b18      	ldr	r3, [pc, #96]	; (8012e1c <netif_do_set_ipaddr+0x88>)
 8012dbc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8012dc0:	4917      	ldr	r1, [pc, #92]	; (8012e20 <netif_do_set_ipaddr+0x8c>)
 8012dc2:	4818      	ldr	r0, [pc, #96]	; (8012e24 <netif_do_set_ipaddr+0x90>)
 8012dc4:	f00b fa88 	bl	801e2d8 <printf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8012dc8:	68bb      	ldr	r3, [r7, #8]
 8012dca:	681a      	ldr	r2, [r3, #0]
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	3304      	adds	r3, #4
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	429a      	cmp	r2, r3
 8012dd4:	d01c      	beq.n	8012e10 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8012dd6:	68bb      	ldr	r3, [r7, #8]
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	3304      	adds	r3, #4
 8012de0:	681a      	ldr	r2, [r3, #0]
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8012de6:	f107 0314 	add.w	r3, r7, #20
 8012dea:	4619      	mov	r1, r3
 8012dec:	6878      	ldr	r0, [r7, #4]
 8012dee:	f7ff ffbf 	bl	8012d70 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8012df2:	68bb      	ldr	r3, [r7, #8]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d002      	beq.n	8012dfe <netif_do_set_ipaddr+0x6a>
 8012df8:	68bb      	ldr	r3, [r7, #8]
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	e000      	b.n	8012e00 <netif_do_set_ipaddr+0x6c>
 8012dfe:	2300      	movs	r3, #0
 8012e00:	68fa      	ldr	r2, [r7, #12]
 8012e02:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8012e04:	2101      	movs	r1, #1
 8012e06:	68f8      	ldr	r0, [r7, #12]
 8012e08:	f000 f8d2 	bl	8012fb0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8012e0c:	2301      	movs	r3, #1
 8012e0e:	e000      	b.n	8012e12 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8012e10:	2300      	movs	r3, #0
}
 8012e12:	4618      	mov	r0, r3
 8012e14:	3718      	adds	r7, #24
 8012e16:	46bd      	mov	sp, r7
 8012e18:	bd80      	pop	{r7, pc}
 8012e1a:	bf00      	nop
 8012e1c:	08024a00 	.word	0x08024a00
 8012e20:	08024b18 	.word	0x08024b18
 8012e24:	08024a50 	.word	0x08024a50

08012e28 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8012e28:	b480      	push	{r7}
 8012e2a:	b085      	sub	sp, #20
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	60f8      	str	r0, [r7, #12]
 8012e30:	60b9      	str	r1, [r7, #8]
 8012e32:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8012e34:	68bb      	ldr	r3, [r7, #8]
 8012e36:	681a      	ldr	r2, [r3, #0]
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	3308      	adds	r3, #8
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	429a      	cmp	r2, r3
 8012e40:	d00a      	beq.n	8012e58 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8012e42:	68bb      	ldr	r3, [r7, #8]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d002      	beq.n	8012e4e <netif_do_set_netmask+0x26>
 8012e48:	68bb      	ldr	r3, [r7, #8]
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	e000      	b.n	8012e50 <netif_do_set_netmask+0x28>
 8012e4e:	2300      	movs	r3, #0
 8012e50:	68fa      	ldr	r2, [r7, #12]
 8012e52:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8012e54:	2301      	movs	r3, #1
 8012e56:	e000      	b.n	8012e5a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8012e58:	2300      	movs	r3, #0
}
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	3714      	adds	r7, #20
 8012e5e:	46bd      	mov	sp, r7
 8012e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e64:	4770      	bx	lr

08012e66 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8012e66:	b480      	push	{r7}
 8012e68:	b085      	sub	sp, #20
 8012e6a:	af00      	add	r7, sp, #0
 8012e6c:	60f8      	str	r0, [r7, #12]
 8012e6e:	60b9      	str	r1, [r7, #8]
 8012e70:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8012e72:	68bb      	ldr	r3, [r7, #8]
 8012e74:	681a      	ldr	r2, [r3, #0]
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	330c      	adds	r3, #12
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	429a      	cmp	r2, r3
 8012e7e:	d00a      	beq.n	8012e96 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8012e80:	68bb      	ldr	r3, [r7, #8]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d002      	beq.n	8012e8c <netif_do_set_gw+0x26>
 8012e86:	68bb      	ldr	r3, [r7, #8]
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	e000      	b.n	8012e8e <netif_do_set_gw+0x28>
 8012e8c:	2300      	movs	r3, #0
 8012e8e:	68fa      	ldr	r2, [r7, #12]
 8012e90:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8012e92:	2301      	movs	r3, #1
 8012e94:	e000      	b.n	8012e98 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8012e96:	2300      	movs	r3, #0
}
 8012e98:	4618      	mov	r0, r3
 8012e9a:	3714      	adds	r7, #20
 8012e9c:	46bd      	mov	sp, r7
 8012e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea2:	4770      	bx	lr

08012ea4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8012ea4:	b580      	push	{r7, lr}
 8012ea6:	b088      	sub	sp, #32
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	60f8      	str	r0, [r7, #12]
 8012eac:	60b9      	str	r1, [r7, #8]
 8012eae:	607a      	str	r2, [r7, #4]
 8012eb0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8012eb2:	2300      	movs	r3, #0
 8012eb4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8012eb6:	2300      	movs	r3, #0
 8012eb8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8012eba:	68bb      	ldr	r3, [r7, #8]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d101      	bne.n	8012ec4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8012ec0:	4b1c      	ldr	r3, [pc, #112]	; (8012f34 <netif_set_addr+0x90>)
 8012ec2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d101      	bne.n	8012ece <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8012eca:	4b1a      	ldr	r3, [pc, #104]	; (8012f34 <netif_set_addr+0x90>)
 8012ecc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8012ece:	683b      	ldr	r3, [r7, #0]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d101      	bne.n	8012ed8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8012ed4:	4b17      	ldr	r3, [pc, #92]	; (8012f34 <netif_set_addr+0x90>)
 8012ed6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8012ed8:	68bb      	ldr	r3, [r7, #8]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d003      	beq.n	8012ee6 <netif_set_addr+0x42>
 8012ede:	68bb      	ldr	r3, [r7, #8]
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d101      	bne.n	8012eea <netif_set_addr+0x46>
 8012ee6:	2301      	movs	r3, #1
 8012ee8:	e000      	b.n	8012eec <netif_set_addr+0x48>
 8012eea:	2300      	movs	r3, #0
 8012eec:	617b      	str	r3, [r7, #20]
  if (remove) {
 8012eee:	697b      	ldr	r3, [r7, #20]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d006      	beq.n	8012f02 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8012ef4:	f107 0310 	add.w	r3, r7, #16
 8012ef8:	461a      	mov	r2, r3
 8012efa:	68b9      	ldr	r1, [r7, #8]
 8012efc:	68f8      	ldr	r0, [r7, #12]
 8012efe:	f7ff ff49 	bl	8012d94 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8012f02:	69fa      	ldr	r2, [r7, #28]
 8012f04:	6879      	ldr	r1, [r7, #4]
 8012f06:	68f8      	ldr	r0, [r7, #12]
 8012f08:	f7ff ff8e 	bl	8012e28 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8012f0c:	69ba      	ldr	r2, [r7, #24]
 8012f0e:	6839      	ldr	r1, [r7, #0]
 8012f10:	68f8      	ldr	r0, [r7, #12]
 8012f12:	f7ff ffa8 	bl	8012e66 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8012f16:	697b      	ldr	r3, [r7, #20]
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d106      	bne.n	8012f2a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8012f1c:	f107 0310 	add.w	r3, r7, #16
 8012f20:	461a      	mov	r2, r3
 8012f22:	68b9      	ldr	r1, [r7, #8]
 8012f24:	68f8      	ldr	r0, [r7, #12]
 8012f26:	f7ff ff35 	bl	8012d94 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8012f2a:	bf00      	nop
 8012f2c:	3720      	adds	r7, #32
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	bd80      	pop	{r7, pc}
 8012f32:	bf00      	nop
 8012f34:	0806f64c 	.word	0x0806f64c

08012f38 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8012f38:	b480      	push	{r7}
 8012f3a:	b083      	sub	sp, #12
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8012f40:	4a04      	ldr	r2, [pc, #16]	; (8012f54 <netif_set_default+0x1c>)
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8012f46:	bf00      	nop
 8012f48:	370c      	adds	r7, #12
 8012f4a:	46bd      	mov	sp, r7
 8012f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f50:	4770      	bx	lr
 8012f52:	bf00      	nop
 8012f54:	2000c1ac 	.word	0x2000c1ac

08012f58 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b082      	sub	sp, #8
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d107      	bne.n	8012f76 <netif_set_up+0x1e>
 8012f66:	4b0f      	ldr	r3, [pc, #60]	; (8012fa4 <netif_set_up+0x4c>)
 8012f68:	f44f 7254 	mov.w	r2, #848	; 0x350
 8012f6c:	490e      	ldr	r1, [pc, #56]	; (8012fa8 <netif_set_up+0x50>)
 8012f6e:	480f      	ldr	r0, [pc, #60]	; (8012fac <netif_set_up+0x54>)
 8012f70:	f00b f9b2 	bl	801e2d8 <printf>
 8012f74:	e013      	b.n	8012f9e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012f7c:	f003 0301 	and.w	r3, r3, #1
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d10c      	bne.n	8012f9e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012f8a:	f043 0301 	orr.w	r3, r3, #1
 8012f8e:	b2da      	uxtb	r2, r3
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8012f96:	2103      	movs	r1, #3
 8012f98:	6878      	ldr	r0, [r7, #4]
 8012f9a:	f000 f809 	bl	8012fb0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8012f9e:	3708      	adds	r7, #8
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	bd80      	pop	{r7, pc}
 8012fa4:	08024a00 	.word	0x08024a00
 8012fa8:	08024b88 	.word	0x08024b88
 8012fac:	08024a50 	.word	0x08024a50

08012fb0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8012fb0:	b580      	push	{r7, lr}
 8012fb2:	b082      	sub	sp, #8
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	6078      	str	r0, [r7, #4]
 8012fb8:	460b      	mov	r3, r1
 8012fba:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d106      	bne.n	8012fd0 <netif_issue_reports+0x20>
 8012fc2:	4b18      	ldr	r3, [pc, #96]	; (8013024 <netif_issue_reports+0x74>)
 8012fc4:	f240 326d 	movw	r2, #877	; 0x36d
 8012fc8:	4917      	ldr	r1, [pc, #92]	; (8013028 <netif_issue_reports+0x78>)
 8012fca:	4818      	ldr	r0, [pc, #96]	; (801302c <netif_issue_reports+0x7c>)
 8012fcc:	f00b f984 	bl	801e2d8 <printf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012fd6:	f003 0304 	and.w	r3, r3, #4
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d01e      	beq.n	801301c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012fe4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d017      	beq.n	801301c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8012fec:	78fb      	ldrb	r3, [r7, #3]
 8012fee:	f003 0301 	and.w	r3, r3, #1
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d013      	beq.n	801301e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	3304      	adds	r3, #4
 8012ffa:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d00e      	beq.n	801301e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013006:	f003 0308 	and.w	r3, r3, #8
 801300a:	2b00      	cmp	r3, #0
 801300c:	d007      	beq.n	801301e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	3304      	adds	r3, #4
 8013012:	4619      	mov	r1, r3
 8013014:	6878      	ldr	r0, [r7, #4]
 8013016:	f009 fc5f 	bl	801c8d8 <etharp_request>
 801301a:	e000      	b.n	801301e <netif_issue_reports+0x6e>
    return;
 801301c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801301e:	3708      	adds	r7, #8
 8013020:	46bd      	mov	sp, r7
 8013022:	bd80      	pop	{r7, pc}
 8013024:	08024a00 	.word	0x08024a00
 8013028:	08024ba4 	.word	0x08024ba4
 801302c:	08024a50 	.word	0x08024a50

08013030 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8013030:	b580      	push	{r7, lr}
 8013032:	b082      	sub	sp, #8
 8013034:	af00      	add	r7, sp, #0
 8013036:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d107      	bne.n	801304e <netif_set_down+0x1e>
 801303e:	4b12      	ldr	r3, [pc, #72]	; (8013088 <netif_set_down+0x58>)
 8013040:	f240 329b 	movw	r2, #923	; 0x39b
 8013044:	4911      	ldr	r1, [pc, #68]	; (801308c <netif_set_down+0x5c>)
 8013046:	4812      	ldr	r0, [pc, #72]	; (8013090 <netif_set_down+0x60>)
 8013048:	f00b f946 	bl	801e2d8 <printf>
 801304c:	e019      	b.n	8013082 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013054:	f003 0301 	and.w	r3, r3, #1
 8013058:	2b00      	cmp	r3, #0
 801305a:	d012      	beq.n	8013082 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013062:	f023 0301 	bic.w	r3, r3, #1
 8013066:	b2da      	uxtb	r2, r3
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013074:	f003 0308 	and.w	r3, r3, #8
 8013078:	2b00      	cmp	r3, #0
 801307a:	d002      	beq.n	8013082 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801307c:	6878      	ldr	r0, [r7, #4]
 801307e:	f008 ffe5 	bl	801c04c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8013082:	3708      	adds	r7, #8
 8013084:	46bd      	mov	sp, r7
 8013086:	bd80      	pop	{r7, pc}
 8013088:	08024a00 	.word	0x08024a00
 801308c:	08024bc8 	.word	0x08024bc8
 8013090:	08024a50 	.word	0x08024a50

08013094 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8013094:	b580      	push	{r7, lr}
 8013096:	b082      	sub	sp, #8
 8013098:	af00      	add	r7, sp, #0
 801309a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d107      	bne.n	80130b2 <netif_set_link_up+0x1e>
 80130a2:	4b15      	ldr	r3, [pc, #84]	; (80130f8 <netif_set_link_up+0x64>)
 80130a4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80130a8:	4914      	ldr	r1, [pc, #80]	; (80130fc <netif_set_link_up+0x68>)
 80130aa:	4815      	ldr	r0, [pc, #84]	; (8013100 <netif_set_link_up+0x6c>)
 80130ac:	f00b f914 	bl	801e2d8 <printf>
 80130b0:	e01e      	b.n	80130f0 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80130b8:	f003 0304 	and.w	r3, r3, #4
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d117      	bne.n	80130f0 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80130c6:	f043 0304 	orr.w	r3, r3, #4
 80130ca:	b2da      	uxtb	r2, r3
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 80130d2:	6878      	ldr	r0, [r7, #4]
 80130d4:	f007 fa2a 	bl	801a52c <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80130d8:	2103      	movs	r1, #3
 80130da:	6878      	ldr	r0, [r7, #4]
 80130dc:	f7ff ff68 	bl	8012fb0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	69db      	ldr	r3, [r3, #28]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d003      	beq.n	80130f0 <netif_set_link_up+0x5c>
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	69db      	ldr	r3, [r3, #28]
 80130ec:	6878      	ldr	r0, [r7, #4]
 80130ee:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80130f0:	3708      	adds	r7, #8
 80130f2:	46bd      	mov	sp, r7
 80130f4:	bd80      	pop	{r7, pc}
 80130f6:	bf00      	nop
 80130f8:	08024a00 	.word	0x08024a00
 80130fc:	08024be8 	.word	0x08024be8
 8013100:	08024a50 	.word	0x08024a50

08013104 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8013104:	b580      	push	{r7, lr}
 8013106:	b082      	sub	sp, #8
 8013108:	af00      	add	r7, sp, #0
 801310a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	2b00      	cmp	r3, #0
 8013110:	d107      	bne.n	8013122 <netif_set_link_down+0x1e>
 8013112:	4b11      	ldr	r3, [pc, #68]	; (8013158 <netif_set_link_down+0x54>)
 8013114:	f240 4206 	movw	r2, #1030	; 0x406
 8013118:	4910      	ldr	r1, [pc, #64]	; (801315c <netif_set_link_down+0x58>)
 801311a:	4811      	ldr	r0, [pc, #68]	; (8013160 <netif_set_link_down+0x5c>)
 801311c:	f00b f8dc 	bl	801e2d8 <printf>
 8013120:	e017      	b.n	8013152 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013128:	f003 0304 	and.w	r3, r3, #4
 801312c:	2b00      	cmp	r3, #0
 801312e:	d010      	beq.n	8013152 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013136:	f023 0304 	bic.w	r3, r3, #4
 801313a:	b2da      	uxtb	r2, r3
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	69db      	ldr	r3, [r3, #28]
 8013146:	2b00      	cmp	r3, #0
 8013148:	d003      	beq.n	8013152 <netif_set_link_down+0x4e>
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	69db      	ldr	r3, [r3, #28]
 801314e:	6878      	ldr	r0, [r7, #4]
 8013150:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8013152:	3708      	adds	r7, #8
 8013154:	46bd      	mov	sp, r7
 8013156:	bd80      	pop	{r7, pc}
 8013158:	08024a00 	.word	0x08024a00
 801315c:	08024c0c 	.word	0x08024c0c
 8013160:	08024a50 	.word	0x08024a50

08013164 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8013164:	b480      	push	{r7}
 8013166:	b083      	sub	sp, #12
 8013168:	af00      	add	r7, sp, #0
 801316a:	6078      	str	r0, [r7, #4]
 801316c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d002      	beq.n	801317a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	683a      	ldr	r2, [r7, #0]
 8013178:	61da      	str	r2, [r3, #28]
  }
}
 801317a:	bf00      	nop
 801317c:	370c      	adds	r7, #12
 801317e:	46bd      	mov	sp, r7
 8013180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013184:	4770      	bx	lr

08013186 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8013186:	b480      	push	{r7}
 8013188:	b085      	sub	sp, #20
 801318a:	af00      	add	r7, sp, #0
 801318c:	60f8      	str	r0, [r7, #12]
 801318e:	60b9      	str	r1, [r7, #8]
 8013190:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8013192:	f06f 030b 	mvn.w	r3, #11
}
 8013196:	4618      	mov	r0, r3
 8013198:	3714      	adds	r7, #20
 801319a:	46bd      	mov	sp, r7
 801319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a0:	4770      	bx	lr
	...

080131a4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80131a4:	b480      	push	{r7}
 80131a6:	b085      	sub	sp, #20
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	4603      	mov	r3, r0
 80131ac:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80131ae:	79fb      	ldrb	r3, [r7, #7]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d013      	beq.n	80131dc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80131b4:	4b0d      	ldr	r3, [pc, #52]	; (80131ec <netif_get_by_index+0x48>)
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	60fb      	str	r3, [r7, #12]
 80131ba:	e00c      	b.n	80131d6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80131c2:	3301      	adds	r3, #1
 80131c4:	b2db      	uxtb	r3, r3
 80131c6:	79fa      	ldrb	r2, [r7, #7]
 80131c8:	429a      	cmp	r2, r3
 80131ca:	d101      	bne.n	80131d0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	e006      	b.n	80131de <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80131d0:	68fb      	ldr	r3, [r7, #12]
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	60fb      	str	r3, [r7, #12]
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d1ef      	bne.n	80131bc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80131dc:	2300      	movs	r3, #0
}
 80131de:	4618      	mov	r0, r3
 80131e0:	3714      	adds	r7, #20
 80131e2:	46bd      	mov	sp, r7
 80131e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e8:	4770      	bx	lr
 80131ea:	bf00      	nop
 80131ec:	2000c1a8 	.word	0x2000c1a8

080131f0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80131f0:	b580      	push	{r7, lr}
 80131f2:	b082      	sub	sp, #8
 80131f4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80131f6:	f00a ffed 	bl	801e1d4 <sys_arch_protect>
 80131fa:	6038      	str	r0, [r7, #0]
 80131fc:	4b0d      	ldr	r3, [pc, #52]	; (8013234 <pbuf_free_ooseq+0x44>)
 80131fe:	2200      	movs	r2, #0
 8013200:	701a      	strb	r2, [r3, #0]
 8013202:	6838      	ldr	r0, [r7, #0]
 8013204:	f00a fff4 	bl	801e1f0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013208:	4b0b      	ldr	r3, [pc, #44]	; (8013238 <pbuf_free_ooseq+0x48>)
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	607b      	str	r3, [r7, #4]
 801320e:	e00a      	b.n	8013226 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013214:	2b00      	cmp	r3, #0
 8013216:	d003      	beq.n	8013220 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8013218:	6878      	ldr	r0, [r7, #4]
 801321a:	f002 f981 	bl	8015520 <tcp_free_ooseq>
      return;
 801321e:	e005      	b.n	801322c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	68db      	ldr	r3, [r3, #12]
 8013224:	607b      	str	r3, [r7, #4]
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	2b00      	cmp	r3, #0
 801322a:	d1f1      	bne.n	8013210 <pbuf_free_ooseq+0x20>
    }
  }
}
 801322c:	3708      	adds	r7, #8
 801322e:	46bd      	mov	sp, r7
 8013230:	bd80      	pop	{r7, pc}
 8013232:	bf00      	nop
 8013234:	2000c1b1 	.word	0x2000c1b1
 8013238:	2000c1c0 	.word	0x2000c1c0

0801323c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 801323c:	b580      	push	{r7, lr}
 801323e:	b082      	sub	sp, #8
 8013240:	af00      	add	r7, sp, #0
 8013242:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8013244:	f7ff ffd4 	bl	80131f0 <pbuf_free_ooseq>
}
 8013248:	bf00      	nop
 801324a:	3708      	adds	r7, #8
 801324c:	46bd      	mov	sp, r7
 801324e:	bd80      	pop	{r7, pc}

08013250 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8013250:	b580      	push	{r7, lr}
 8013252:	b082      	sub	sp, #8
 8013254:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8013256:	f00a ffbd 	bl	801e1d4 <sys_arch_protect>
 801325a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 801325c:	4b0f      	ldr	r3, [pc, #60]	; (801329c <pbuf_pool_is_empty+0x4c>)
 801325e:	781b      	ldrb	r3, [r3, #0]
 8013260:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8013262:	4b0e      	ldr	r3, [pc, #56]	; (801329c <pbuf_pool_is_empty+0x4c>)
 8013264:	2201      	movs	r2, #1
 8013266:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8013268:	6878      	ldr	r0, [r7, #4]
 801326a:	f00a ffc1 	bl	801e1f0 <sys_arch_unprotect>

  if (!queued) {
 801326e:	78fb      	ldrb	r3, [r7, #3]
 8013270:	2b00      	cmp	r3, #0
 8013272:	d10f      	bne.n	8013294 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8013274:	2100      	movs	r1, #0
 8013276:	480a      	ldr	r0, [pc, #40]	; (80132a0 <pbuf_pool_is_empty+0x50>)
 8013278:	f7fe fee0 	bl	801203c <tcpip_try_callback>
 801327c:	4603      	mov	r3, r0
 801327e:	2b00      	cmp	r3, #0
 8013280:	d008      	beq.n	8013294 <pbuf_pool_is_empty+0x44>
 8013282:	f00a ffa7 	bl	801e1d4 <sys_arch_protect>
 8013286:	6078      	str	r0, [r7, #4]
 8013288:	4b04      	ldr	r3, [pc, #16]	; (801329c <pbuf_pool_is_empty+0x4c>)
 801328a:	2200      	movs	r2, #0
 801328c:	701a      	strb	r2, [r3, #0]
 801328e:	6878      	ldr	r0, [r7, #4]
 8013290:	f00a ffae 	bl	801e1f0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8013294:	bf00      	nop
 8013296:	3708      	adds	r7, #8
 8013298:	46bd      	mov	sp, r7
 801329a:	bd80      	pop	{r7, pc}
 801329c:	2000c1b1 	.word	0x2000c1b1
 80132a0:	0801323d 	.word	0x0801323d

080132a4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80132a4:	b480      	push	{r7}
 80132a6:	b085      	sub	sp, #20
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	60f8      	str	r0, [r7, #12]
 80132ac:	60b9      	str	r1, [r7, #8]
 80132ae:	4611      	mov	r1, r2
 80132b0:	461a      	mov	r2, r3
 80132b2:	460b      	mov	r3, r1
 80132b4:	80fb      	strh	r3, [r7, #6]
 80132b6:	4613      	mov	r3, r2
 80132b8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	2200      	movs	r2, #0
 80132be:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	68ba      	ldr	r2, [r7, #8]
 80132c4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	88fa      	ldrh	r2, [r7, #6]
 80132ca:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	88ba      	ldrh	r2, [r7, #4]
 80132d0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80132d2:	8b3b      	ldrh	r3, [r7, #24]
 80132d4:	b2da      	uxtb	r2, r3
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	7f3a      	ldrb	r2, [r7, #28]
 80132de:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	2201      	movs	r2, #1
 80132e4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	2200      	movs	r2, #0
 80132ea:	73da      	strb	r2, [r3, #15]
}
 80132ec:	bf00      	nop
 80132ee:	3714      	adds	r7, #20
 80132f0:	46bd      	mov	sp, r7
 80132f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f6:	4770      	bx	lr

080132f8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80132f8:	b580      	push	{r7, lr}
 80132fa:	b08c      	sub	sp, #48	; 0x30
 80132fc:	af02      	add	r7, sp, #8
 80132fe:	4603      	mov	r3, r0
 8013300:	71fb      	strb	r3, [r7, #7]
 8013302:	460b      	mov	r3, r1
 8013304:	80bb      	strh	r3, [r7, #4]
 8013306:	4613      	mov	r3, r2
 8013308:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801330a:	79fb      	ldrb	r3, [r7, #7]
 801330c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801330e:	887b      	ldrh	r3, [r7, #2]
 8013310:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8013314:	d07f      	beq.n	8013416 <pbuf_alloc+0x11e>
 8013316:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801331a:	f300 80c8 	bgt.w	80134ae <pbuf_alloc+0x1b6>
 801331e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8013322:	d010      	beq.n	8013346 <pbuf_alloc+0x4e>
 8013324:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8013328:	f300 80c1 	bgt.w	80134ae <pbuf_alloc+0x1b6>
 801332c:	2b01      	cmp	r3, #1
 801332e:	d002      	beq.n	8013336 <pbuf_alloc+0x3e>
 8013330:	2b41      	cmp	r3, #65	; 0x41
 8013332:	f040 80bc 	bne.w	80134ae <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8013336:	887a      	ldrh	r2, [r7, #2]
 8013338:	88bb      	ldrh	r3, [r7, #4]
 801333a:	4619      	mov	r1, r3
 801333c:	2000      	movs	r0, #0
 801333e:	f000 f8d1 	bl	80134e4 <pbuf_alloc_reference>
 8013342:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8013344:	e0bd      	b.n	80134c2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8013346:	2300      	movs	r3, #0
 8013348:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 801334a:	2300      	movs	r3, #0
 801334c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801334e:	88bb      	ldrh	r3, [r7, #4]
 8013350:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8013352:	200c      	movs	r0, #12
 8013354:	f7ff fbb2 	bl	8012abc <memp_malloc>
 8013358:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801335a:	693b      	ldr	r3, [r7, #16]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d109      	bne.n	8013374 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8013360:	f7ff ff76 	bl	8013250 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8013364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013366:	2b00      	cmp	r3, #0
 8013368:	d002      	beq.n	8013370 <pbuf_alloc+0x78>
            pbuf_free(p);
 801336a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801336c:	f000 faa8 	bl	80138c0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8013370:	2300      	movs	r3, #0
 8013372:	e0a7      	b.n	80134c4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8013374:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013376:	3303      	adds	r3, #3
 8013378:	b29b      	uxth	r3, r3
 801337a:	f023 0303 	bic.w	r3, r3, #3
 801337e:	b29b      	uxth	r3, r3
 8013380:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8013384:	b29b      	uxth	r3, r3
 8013386:	8b7a      	ldrh	r2, [r7, #26]
 8013388:	4293      	cmp	r3, r2
 801338a:	bf28      	it	cs
 801338c:	4613      	movcs	r3, r2
 801338e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8013390:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013392:	3310      	adds	r3, #16
 8013394:	693a      	ldr	r2, [r7, #16]
 8013396:	4413      	add	r3, r2
 8013398:	3303      	adds	r3, #3
 801339a:	f023 0303 	bic.w	r3, r3, #3
 801339e:	4618      	mov	r0, r3
 80133a0:	89f9      	ldrh	r1, [r7, #14]
 80133a2:	8b7a      	ldrh	r2, [r7, #26]
 80133a4:	2300      	movs	r3, #0
 80133a6:	9301      	str	r3, [sp, #4]
 80133a8:	887b      	ldrh	r3, [r7, #2]
 80133aa:	9300      	str	r3, [sp, #0]
 80133ac:	460b      	mov	r3, r1
 80133ae:	4601      	mov	r1, r0
 80133b0:	6938      	ldr	r0, [r7, #16]
 80133b2:	f7ff ff77 	bl	80132a4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80133b6:	693b      	ldr	r3, [r7, #16]
 80133b8:	685b      	ldr	r3, [r3, #4]
 80133ba:	f003 0303 	and.w	r3, r3, #3
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d006      	beq.n	80133d0 <pbuf_alloc+0xd8>
 80133c2:	4b42      	ldr	r3, [pc, #264]	; (80134cc <pbuf_alloc+0x1d4>)
 80133c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80133c8:	4941      	ldr	r1, [pc, #260]	; (80134d0 <pbuf_alloc+0x1d8>)
 80133ca:	4842      	ldr	r0, [pc, #264]	; (80134d4 <pbuf_alloc+0x1dc>)
 80133cc:	f00a ff84 	bl	801e2d8 <printf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80133d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80133d2:	3303      	adds	r3, #3
 80133d4:	f023 0303 	bic.w	r3, r3, #3
 80133d8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80133dc:	d106      	bne.n	80133ec <pbuf_alloc+0xf4>
 80133de:	4b3b      	ldr	r3, [pc, #236]	; (80134cc <pbuf_alloc+0x1d4>)
 80133e0:	f44f 7281 	mov.w	r2, #258	; 0x102
 80133e4:	493c      	ldr	r1, [pc, #240]	; (80134d8 <pbuf_alloc+0x1e0>)
 80133e6:	483b      	ldr	r0, [pc, #236]	; (80134d4 <pbuf_alloc+0x1dc>)
 80133e8:	f00a ff76 	bl	801e2d8 <printf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80133ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d102      	bne.n	80133f8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80133f2:	693b      	ldr	r3, [r7, #16]
 80133f4:	627b      	str	r3, [r7, #36]	; 0x24
 80133f6:	e002      	b.n	80133fe <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80133f8:	69fb      	ldr	r3, [r7, #28]
 80133fa:	693a      	ldr	r2, [r7, #16]
 80133fc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80133fe:	693b      	ldr	r3, [r7, #16]
 8013400:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8013402:	8b7a      	ldrh	r2, [r7, #26]
 8013404:	89fb      	ldrh	r3, [r7, #14]
 8013406:	1ad3      	subs	r3, r2, r3
 8013408:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801340a:	2300      	movs	r3, #0
 801340c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801340e:	8b7b      	ldrh	r3, [r7, #26]
 8013410:	2b00      	cmp	r3, #0
 8013412:	d19e      	bne.n	8013352 <pbuf_alloc+0x5a>
      break;
 8013414:	e055      	b.n	80134c2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8013416:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013418:	3303      	adds	r3, #3
 801341a:	b29b      	uxth	r3, r3
 801341c:	f023 0303 	bic.w	r3, r3, #3
 8013420:	b29a      	uxth	r2, r3
 8013422:	88bb      	ldrh	r3, [r7, #4]
 8013424:	3303      	adds	r3, #3
 8013426:	b29b      	uxth	r3, r3
 8013428:	f023 0303 	bic.w	r3, r3, #3
 801342c:	b29b      	uxth	r3, r3
 801342e:	4413      	add	r3, r2
 8013430:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8013432:	8b3b      	ldrh	r3, [r7, #24]
 8013434:	3310      	adds	r3, #16
 8013436:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013438:	8b3a      	ldrh	r2, [r7, #24]
 801343a:	88bb      	ldrh	r3, [r7, #4]
 801343c:	3303      	adds	r3, #3
 801343e:	f023 0303 	bic.w	r3, r3, #3
 8013442:	429a      	cmp	r2, r3
 8013444:	d306      	bcc.n	8013454 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8013446:	8afa      	ldrh	r2, [r7, #22]
 8013448:	88bb      	ldrh	r3, [r7, #4]
 801344a:	3303      	adds	r3, #3
 801344c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013450:	429a      	cmp	r2, r3
 8013452:	d201      	bcs.n	8013458 <pbuf_alloc+0x160>
        return NULL;
 8013454:	2300      	movs	r3, #0
 8013456:	e035      	b.n	80134c4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8013458:	8afb      	ldrh	r3, [r7, #22]
 801345a:	4618      	mov	r0, r3
 801345c:	f7ff f9ac 	bl	80127b8 <mem_malloc>
 8013460:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8013462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013464:	2b00      	cmp	r3, #0
 8013466:	d101      	bne.n	801346c <pbuf_alloc+0x174>
        return NULL;
 8013468:	2300      	movs	r3, #0
 801346a:	e02b      	b.n	80134c4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801346c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801346e:	3310      	adds	r3, #16
 8013470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013472:	4413      	add	r3, r2
 8013474:	3303      	adds	r3, #3
 8013476:	f023 0303 	bic.w	r3, r3, #3
 801347a:	4618      	mov	r0, r3
 801347c:	88b9      	ldrh	r1, [r7, #4]
 801347e:	88ba      	ldrh	r2, [r7, #4]
 8013480:	2300      	movs	r3, #0
 8013482:	9301      	str	r3, [sp, #4]
 8013484:	887b      	ldrh	r3, [r7, #2]
 8013486:	9300      	str	r3, [sp, #0]
 8013488:	460b      	mov	r3, r1
 801348a:	4601      	mov	r1, r0
 801348c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801348e:	f7ff ff09 	bl	80132a4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8013492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013494:	685b      	ldr	r3, [r3, #4]
 8013496:	f003 0303 	and.w	r3, r3, #3
 801349a:	2b00      	cmp	r3, #0
 801349c:	d010      	beq.n	80134c0 <pbuf_alloc+0x1c8>
 801349e:	4b0b      	ldr	r3, [pc, #44]	; (80134cc <pbuf_alloc+0x1d4>)
 80134a0:	f44f 7291 	mov.w	r2, #290	; 0x122
 80134a4:	490d      	ldr	r1, [pc, #52]	; (80134dc <pbuf_alloc+0x1e4>)
 80134a6:	480b      	ldr	r0, [pc, #44]	; (80134d4 <pbuf_alloc+0x1dc>)
 80134a8:	f00a ff16 	bl	801e2d8 <printf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80134ac:	e008      	b.n	80134c0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80134ae:	4b07      	ldr	r3, [pc, #28]	; (80134cc <pbuf_alloc+0x1d4>)
 80134b0:	f240 1227 	movw	r2, #295	; 0x127
 80134b4:	490a      	ldr	r1, [pc, #40]	; (80134e0 <pbuf_alloc+0x1e8>)
 80134b6:	4807      	ldr	r0, [pc, #28]	; (80134d4 <pbuf_alloc+0x1dc>)
 80134b8:	f00a ff0e 	bl	801e2d8 <printf>
      return NULL;
 80134bc:	2300      	movs	r3, #0
 80134be:	e001      	b.n	80134c4 <pbuf_alloc+0x1cc>
      break;
 80134c0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80134c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80134c4:	4618      	mov	r0, r3
 80134c6:	3728      	adds	r7, #40	; 0x28
 80134c8:	46bd      	mov	sp, r7
 80134ca:	bd80      	pop	{r7, pc}
 80134cc:	08024c30 	.word	0x08024c30
 80134d0:	08024c60 	.word	0x08024c60
 80134d4:	08024c90 	.word	0x08024c90
 80134d8:	08024cb8 	.word	0x08024cb8
 80134dc:	08024cec 	.word	0x08024cec
 80134e0:	08024d18 	.word	0x08024d18

080134e4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b086      	sub	sp, #24
 80134e8:	af02      	add	r7, sp, #8
 80134ea:	6078      	str	r0, [r7, #4]
 80134ec:	460b      	mov	r3, r1
 80134ee:	807b      	strh	r3, [r7, #2]
 80134f0:	4613      	mov	r3, r2
 80134f2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80134f4:	883b      	ldrh	r3, [r7, #0]
 80134f6:	2b41      	cmp	r3, #65	; 0x41
 80134f8:	d009      	beq.n	801350e <pbuf_alloc_reference+0x2a>
 80134fa:	883b      	ldrh	r3, [r7, #0]
 80134fc:	2b01      	cmp	r3, #1
 80134fe:	d006      	beq.n	801350e <pbuf_alloc_reference+0x2a>
 8013500:	4b0f      	ldr	r3, [pc, #60]	; (8013540 <pbuf_alloc_reference+0x5c>)
 8013502:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8013506:	490f      	ldr	r1, [pc, #60]	; (8013544 <pbuf_alloc_reference+0x60>)
 8013508:	480f      	ldr	r0, [pc, #60]	; (8013548 <pbuf_alloc_reference+0x64>)
 801350a:	f00a fee5 	bl	801e2d8 <printf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801350e:	200b      	movs	r0, #11
 8013510:	f7ff fad4 	bl	8012abc <memp_malloc>
 8013514:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	2b00      	cmp	r3, #0
 801351a:	d101      	bne.n	8013520 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801351c:	2300      	movs	r3, #0
 801351e:	e00b      	b.n	8013538 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8013520:	8879      	ldrh	r1, [r7, #2]
 8013522:	887a      	ldrh	r2, [r7, #2]
 8013524:	2300      	movs	r3, #0
 8013526:	9301      	str	r3, [sp, #4]
 8013528:	883b      	ldrh	r3, [r7, #0]
 801352a:	9300      	str	r3, [sp, #0]
 801352c:	460b      	mov	r3, r1
 801352e:	6879      	ldr	r1, [r7, #4]
 8013530:	68f8      	ldr	r0, [r7, #12]
 8013532:	f7ff feb7 	bl	80132a4 <pbuf_init_alloced_pbuf>
  return p;
 8013536:	68fb      	ldr	r3, [r7, #12]
}
 8013538:	4618      	mov	r0, r3
 801353a:	3710      	adds	r7, #16
 801353c:	46bd      	mov	sp, r7
 801353e:	bd80      	pop	{r7, pc}
 8013540:	08024c30 	.word	0x08024c30
 8013544:	08024d34 	.word	0x08024d34
 8013548:	08024c90 	.word	0x08024c90

0801354c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801354c:	b580      	push	{r7, lr}
 801354e:	b088      	sub	sp, #32
 8013550:	af02      	add	r7, sp, #8
 8013552:	607b      	str	r3, [r7, #4]
 8013554:	4603      	mov	r3, r0
 8013556:	73fb      	strb	r3, [r7, #15]
 8013558:	460b      	mov	r3, r1
 801355a:	81bb      	strh	r3, [r7, #12]
 801355c:	4613      	mov	r3, r2
 801355e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8013560:	7bfb      	ldrb	r3, [r7, #15]
 8013562:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8013564:	8a7b      	ldrh	r3, [r7, #18]
 8013566:	3303      	adds	r3, #3
 8013568:	f023 0203 	bic.w	r2, r3, #3
 801356c:	89bb      	ldrh	r3, [r7, #12]
 801356e:	441a      	add	r2, r3
 8013570:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013572:	429a      	cmp	r2, r3
 8013574:	d901      	bls.n	801357a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8013576:	2300      	movs	r3, #0
 8013578:	e018      	b.n	80135ac <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801357a:	6a3b      	ldr	r3, [r7, #32]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d007      	beq.n	8013590 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8013580:	8a7b      	ldrh	r3, [r7, #18]
 8013582:	3303      	adds	r3, #3
 8013584:	f023 0303 	bic.w	r3, r3, #3
 8013588:	6a3a      	ldr	r2, [r7, #32]
 801358a:	4413      	add	r3, r2
 801358c:	617b      	str	r3, [r7, #20]
 801358e:	e001      	b.n	8013594 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8013590:	2300      	movs	r3, #0
 8013592:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8013594:	6878      	ldr	r0, [r7, #4]
 8013596:	89b9      	ldrh	r1, [r7, #12]
 8013598:	89ba      	ldrh	r2, [r7, #12]
 801359a:	2302      	movs	r3, #2
 801359c:	9301      	str	r3, [sp, #4]
 801359e:	897b      	ldrh	r3, [r7, #10]
 80135a0:	9300      	str	r3, [sp, #0]
 80135a2:	460b      	mov	r3, r1
 80135a4:	6979      	ldr	r1, [r7, #20]
 80135a6:	f7ff fe7d 	bl	80132a4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80135aa:	687b      	ldr	r3, [r7, #4]
}
 80135ac:	4618      	mov	r0, r3
 80135ae:	3718      	adds	r7, #24
 80135b0:	46bd      	mov	sp, r7
 80135b2:	bd80      	pop	{r7, pc}

080135b4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80135b4:	b580      	push	{r7, lr}
 80135b6:	b084      	sub	sp, #16
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	6078      	str	r0, [r7, #4]
 80135bc:	460b      	mov	r3, r1
 80135be:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d106      	bne.n	80135d4 <pbuf_realloc+0x20>
 80135c6:	4b3a      	ldr	r3, [pc, #232]	; (80136b0 <pbuf_realloc+0xfc>)
 80135c8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80135cc:	4939      	ldr	r1, [pc, #228]	; (80136b4 <pbuf_realloc+0x100>)
 80135ce:	483a      	ldr	r0, [pc, #232]	; (80136b8 <pbuf_realloc+0x104>)
 80135d0:	f00a fe82 	bl	801e2d8 <printf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	891b      	ldrh	r3, [r3, #8]
 80135d8:	887a      	ldrh	r2, [r7, #2]
 80135da:	429a      	cmp	r2, r3
 80135dc:	d263      	bcs.n	80136a6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	891a      	ldrh	r2, [r3, #8]
 80135e2:	887b      	ldrh	r3, [r7, #2]
 80135e4:	1ad3      	subs	r3, r2, r3
 80135e6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80135e8:	887b      	ldrh	r3, [r7, #2]
 80135ea:	817b      	strh	r3, [r7, #10]
  q = p;
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80135f0:	e018      	b.n	8013624 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	895b      	ldrh	r3, [r3, #10]
 80135f6:	897a      	ldrh	r2, [r7, #10]
 80135f8:	1ad3      	subs	r3, r2, r3
 80135fa:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	891a      	ldrh	r2, [r3, #8]
 8013600:	893b      	ldrh	r3, [r7, #8]
 8013602:	1ad3      	subs	r3, r2, r3
 8013604:	b29a      	uxth	r2, r3
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	2b00      	cmp	r3, #0
 8013614:	d106      	bne.n	8013624 <pbuf_realloc+0x70>
 8013616:	4b26      	ldr	r3, [pc, #152]	; (80136b0 <pbuf_realloc+0xfc>)
 8013618:	f240 12af 	movw	r2, #431	; 0x1af
 801361c:	4927      	ldr	r1, [pc, #156]	; (80136bc <pbuf_realloc+0x108>)
 801361e:	4826      	ldr	r0, [pc, #152]	; (80136b8 <pbuf_realloc+0x104>)
 8013620:	f00a fe5a 	bl	801e2d8 <printf>
  while (rem_len > q->len) {
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	895b      	ldrh	r3, [r3, #10]
 8013628:	897a      	ldrh	r2, [r7, #10]
 801362a:	429a      	cmp	r2, r3
 801362c:	d8e1      	bhi.n	80135f2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	7b1b      	ldrb	r3, [r3, #12]
 8013632:	f003 030f 	and.w	r3, r3, #15
 8013636:	2b00      	cmp	r3, #0
 8013638:	d121      	bne.n	801367e <pbuf_realloc+0xca>
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	895b      	ldrh	r3, [r3, #10]
 801363e:	897a      	ldrh	r2, [r7, #10]
 8013640:	429a      	cmp	r2, r3
 8013642:	d01c      	beq.n	801367e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	7b5b      	ldrb	r3, [r3, #13]
 8013648:	f003 0302 	and.w	r3, r3, #2
 801364c:	2b00      	cmp	r3, #0
 801364e:	d116      	bne.n	801367e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	685a      	ldr	r2, [r3, #4]
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	1ad3      	subs	r3, r2, r3
 8013658:	b29a      	uxth	r2, r3
 801365a:	897b      	ldrh	r3, [r7, #10]
 801365c:	4413      	add	r3, r2
 801365e:	b29b      	uxth	r3, r3
 8013660:	4619      	mov	r1, r3
 8013662:	68f8      	ldr	r0, [r7, #12]
 8013664:	f7fe ff9e 	bl	80125a4 <mem_trim>
 8013668:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	2b00      	cmp	r3, #0
 801366e:	d106      	bne.n	801367e <pbuf_realloc+0xca>
 8013670:	4b0f      	ldr	r3, [pc, #60]	; (80136b0 <pbuf_realloc+0xfc>)
 8013672:	f240 12bd 	movw	r2, #445	; 0x1bd
 8013676:	4912      	ldr	r1, [pc, #72]	; (80136c0 <pbuf_realloc+0x10c>)
 8013678:	480f      	ldr	r0, [pc, #60]	; (80136b8 <pbuf_realloc+0x104>)
 801367a:	f00a fe2d 	bl	801e2d8 <printf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	897a      	ldrh	r2, [r7, #10]
 8013682:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	895a      	ldrh	r2, [r3, #10]
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	2b00      	cmp	r3, #0
 8013692:	d004      	beq.n	801369e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	4618      	mov	r0, r3
 801369a:	f000 f911 	bl	80138c0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	2200      	movs	r2, #0
 80136a2:	601a      	str	r2, [r3, #0]
 80136a4:	e000      	b.n	80136a8 <pbuf_realloc+0xf4>
    return;
 80136a6:	bf00      	nop

}
 80136a8:	3710      	adds	r7, #16
 80136aa:	46bd      	mov	sp, r7
 80136ac:	bd80      	pop	{r7, pc}
 80136ae:	bf00      	nop
 80136b0:	08024c30 	.word	0x08024c30
 80136b4:	08024d48 	.word	0x08024d48
 80136b8:	08024c90 	.word	0x08024c90
 80136bc:	08024d60 	.word	0x08024d60
 80136c0:	08024d78 	.word	0x08024d78

080136c4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80136c4:	b580      	push	{r7, lr}
 80136c6:	b086      	sub	sp, #24
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	60f8      	str	r0, [r7, #12]
 80136cc:	60b9      	str	r1, [r7, #8]
 80136ce:	4613      	mov	r3, r2
 80136d0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d106      	bne.n	80136e6 <pbuf_add_header_impl+0x22>
 80136d8:	4b2b      	ldr	r3, [pc, #172]	; (8013788 <pbuf_add_header_impl+0xc4>)
 80136da:	f240 12df 	movw	r2, #479	; 0x1df
 80136de:	492b      	ldr	r1, [pc, #172]	; (801378c <pbuf_add_header_impl+0xc8>)
 80136e0:	482b      	ldr	r0, [pc, #172]	; (8013790 <pbuf_add_header_impl+0xcc>)
 80136e2:	f00a fdf9 	bl	801e2d8 <printf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d003      	beq.n	80136f4 <pbuf_add_header_impl+0x30>
 80136ec:	68bb      	ldr	r3, [r7, #8]
 80136ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80136f2:	d301      	bcc.n	80136f8 <pbuf_add_header_impl+0x34>
    return 1;
 80136f4:	2301      	movs	r3, #1
 80136f6:	e043      	b.n	8013780 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80136f8:	68bb      	ldr	r3, [r7, #8]
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d101      	bne.n	8013702 <pbuf_add_header_impl+0x3e>
    return 0;
 80136fe:	2300      	movs	r3, #0
 8013700:	e03e      	b.n	8013780 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8013702:	68bb      	ldr	r3, [r7, #8]
 8013704:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	891a      	ldrh	r2, [r3, #8]
 801370a:	8a7b      	ldrh	r3, [r7, #18]
 801370c:	4413      	add	r3, r2
 801370e:	b29b      	uxth	r3, r3
 8013710:	8a7a      	ldrh	r2, [r7, #18]
 8013712:	429a      	cmp	r2, r3
 8013714:	d901      	bls.n	801371a <pbuf_add_header_impl+0x56>
    return 1;
 8013716:	2301      	movs	r3, #1
 8013718:	e032      	b.n	8013780 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801371a:	68fb      	ldr	r3, [r7, #12]
 801371c:	7b1b      	ldrb	r3, [r3, #12]
 801371e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8013720:	8a3b      	ldrh	r3, [r7, #16]
 8013722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013726:	2b00      	cmp	r3, #0
 8013728:	d00c      	beq.n	8013744 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	685a      	ldr	r2, [r3, #4]
 801372e:	68bb      	ldr	r3, [r7, #8]
 8013730:	425b      	negs	r3, r3
 8013732:	4413      	add	r3, r2
 8013734:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	3310      	adds	r3, #16
 801373a:	697a      	ldr	r2, [r7, #20]
 801373c:	429a      	cmp	r2, r3
 801373e:	d20d      	bcs.n	801375c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8013740:	2301      	movs	r3, #1
 8013742:	e01d      	b.n	8013780 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8013744:	79fb      	ldrb	r3, [r7, #7]
 8013746:	2b00      	cmp	r3, #0
 8013748:	d006      	beq.n	8013758 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	685a      	ldr	r2, [r3, #4]
 801374e:	68bb      	ldr	r3, [r7, #8]
 8013750:	425b      	negs	r3, r3
 8013752:	4413      	add	r3, r2
 8013754:	617b      	str	r3, [r7, #20]
 8013756:	e001      	b.n	801375c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8013758:	2301      	movs	r3, #1
 801375a:	e011      	b.n	8013780 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801375c:	68fb      	ldr	r3, [r7, #12]
 801375e:	697a      	ldr	r2, [r7, #20]
 8013760:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	895a      	ldrh	r2, [r3, #10]
 8013766:	8a7b      	ldrh	r3, [r7, #18]
 8013768:	4413      	add	r3, r2
 801376a:	b29a      	uxth	r2, r3
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	891a      	ldrh	r2, [r3, #8]
 8013774:	8a7b      	ldrh	r3, [r7, #18]
 8013776:	4413      	add	r3, r2
 8013778:	b29a      	uxth	r2, r3
 801377a:	68fb      	ldr	r3, [r7, #12]
 801377c:	811a      	strh	r2, [r3, #8]


  return 0;
 801377e:	2300      	movs	r3, #0
}
 8013780:	4618      	mov	r0, r3
 8013782:	3718      	adds	r7, #24
 8013784:	46bd      	mov	sp, r7
 8013786:	bd80      	pop	{r7, pc}
 8013788:	08024c30 	.word	0x08024c30
 801378c:	08024d94 	.word	0x08024d94
 8013790:	08024c90 	.word	0x08024c90

08013794 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8013794:	b580      	push	{r7, lr}
 8013796:	b082      	sub	sp, #8
 8013798:	af00      	add	r7, sp, #0
 801379a:	6078      	str	r0, [r7, #4]
 801379c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801379e:	2200      	movs	r2, #0
 80137a0:	6839      	ldr	r1, [r7, #0]
 80137a2:	6878      	ldr	r0, [r7, #4]
 80137a4:	f7ff ff8e 	bl	80136c4 <pbuf_add_header_impl>
 80137a8:	4603      	mov	r3, r0
}
 80137aa:	4618      	mov	r0, r3
 80137ac:	3708      	adds	r7, #8
 80137ae:	46bd      	mov	sp, r7
 80137b0:	bd80      	pop	{r7, pc}
	...

080137b4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80137b4:	b580      	push	{r7, lr}
 80137b6:	b084      	sub	sp, #16
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	6078      	str	r0, [r7, #4]
 80137bc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d106      	bne.n	80137d2 <pbuf_remove_header+0x1e>
 80137c4:	4b20      	ldr	r3, [pc, #128]	; (8013848 <pbuf_remove_header+0x94>)
 80137c6:	f240 224b 	movw	r2, #587	; 0x24b
 80137ca:	4920      	ldr	r1, [pc, #128]	; (801384c <pbuf_remove_header+0x98>)
 80137cc:	4820      	ldr	r0, [pc, #128]	; (8013850 <pbuf_remove_header+0x9c>)
 80137ce:	f00a fd83 	bl	801e2d8 <printf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d003      	beq.n	80137e0 <pbuf_remove_header+0x2c>
 80137d8:	683b      	ldr	r3, [r7, #0]
 80137da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80137de:	d301      	bcc.n	80137e4 <pbuf_remove_header+0x30>
    return 1;
 80137e0:	2301      	movs	r3, #1
 80137e2:	e02c      	b.n	801383e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80137e4:	683b      	ldr	r3, [r7, #0]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d101      	bne.n	80137ee <pbuf_remove_header+0x3a>
    return 0;
 80137ea:	2300      	movs	r3, #0
 80137ec:	e027      	b.n	801383e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80137ee:	683b      	ldr	r3, [r7, #0]
 80137f0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	895b      	ldrh	r3, [r3, #10]
 80137f6:	89fa      	ldrh	r2, [r7, #14]
 80137f8:	429a      	cmp	r2, r3
 80137fa:	d908      	bls.n	801380e <pbuf_remove_header+0x5a>
 80137fc:	4b12      	ldr	r3, [pc, #72]	; (8013848 <pbuf_remove_header+0x94>)
 80137fe:	f240 2255 	movw	r2, #597	; 0x255
 8013802:	4914      	ldr	r1, [pc, #80]	; (8013854 <pbuf_remove_header+0xa0>)
 8013804:	4812      	ldr	r0, [pc, #72]	; (8013850 <pbuf_remove_header+0x9c>)
 8013806:	f00a fd67 	bl	801e2d8 <printf>
 801380a:	2301      	movs	r3, #1
 801380c:	e017      	b.n	801383e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	685b      	ldr	r3, [r3, #4]
 8013812:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	685a      	ldr	r2, [r3, #4]
 8013818:	683b      	ldr	r3, [r7, #0]
 801381a:	441a      	add	r2, r3
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	895a      	ldrh	r2, [r3, #10]
 8013824:	89fb      	ldrh	r3, [r7, #14]
 8013826:	1ad3      	subs	r3, r2, r3
 8013828:	b29a      	uxth	r2, r3
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	891a      	ldrh	r2, [r3, #8]
 8013832:	89fb      	ldrh	r3, [r7, #14]
 8013834:	1ad3      	subs	r3, r2, r3
 8013836:	b29a      	uxth	r2, r3
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801383c:	2300      	movs	r3, #0
}
 801383e:	4618      	mov	r0, r3
 8013840:	3710      	adds	r7, #16
 8013842:	46bd      	mov	sp, r7
 8013844:	bd80      	pop	{r7, pc}
 8013846:	bf00      	nop
 8013848:	08024c30 	.word	0x08024c30
 801384c:	08024d94 	.word	0x08024d94
 8013850:	08024c90 	.word	0x08024c90
 8013854:	08024da0 	.word	0x08024da0

08013858 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8013858:	b580      	push	{r7, lr}
 801385a:	b082      	sub	sp, #8
 801385c:	af00      	add	r7, sp, #0
 801385e:	6078      	str	r0, [r7, #4]
 8013860:	460b      	mov	r3, r1
 8013862:	807b      	strh	r3, [r7, #2]
 8013864:	4613      	mov	r3, r2
 8013866:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8013868:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801386c:	2b00      	cmp	r3, #0
 801386e:	da08      	bge.n	8013882 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8013870:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013874:	425b      	negs	r3, r3
 8013876:	4619      	mov	r1, r3
 8013878:	6878      	ldr	r0, [r7, #4]
 801387a:	f7ff ff9b 	bl	80137b4 <pbuf_remove_header>
 801387e:	4603      	mov	r3, r0
 8013880:	e007      	b.n	8013892 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8013882:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013886:	787a      	ldrb	r2, [r7, #1]
 8013888:	4619      	mov	r1, r3
 801388a:	6878      	ldr	r0, [r7, #4]
 801388c:	f7ff ff1a 	bl	80136c4 <pbuf_add_header_impl>
 8013890:	4603      	mov	r3, r0
  }
}
 8013892:	4618      	mov	r0, r3
 8013894:	3708      	adds	r7, #8
 8013896:	46bd      	mov	sp, r7
 8013898:	bd80      	pop	{r7, pc}

0801389a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801389a:	b580      	push	{r7, lr}
 801389c:	b082      	sub	sp, #8
 801389e:	af00      	add	r7, sp, #0
 80138a0:	6078      	str	r0, [r7, #4]
 80138a2:	460b      	mov	r3, r1
 80138a4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80138a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80138aa:	2201      	movs	r2, #1
 80138ac:	4619      	mov	r1, r3
 80138ae:	6878      	ldr	r0, [r7, #4]
 80138b0:	f7ff ffd2 	bl	8013858 <pbuf_header_impl>
 80138b4:	4603      	mov	r3, r0
}
 80138b6:	4618      	mov	r0, r3
 80138b8:	3708      	adds	r7, #8
 80138ba:	46bd      	mov	sp, r7
 80138bc:	bd80      	pop	{r7, pc}
	...

080138c0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80138c0:	b580      	push	{r7, lr}
 80138c2:	b088      	sub	sp, #32
 80138c4:	af00      	add	r7, sp, #0
 80138c6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d10b      	bne.n	80138e6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d106      	bne.n	80138e2 <pbuf_free+0x22>
 80138d4:	4b3b      	ldr	r3, [pc, #236]	; (80139c4 <pbuf_free+0x104>)
 80138d6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80138da:	493b      	ldr	r1, [pc, #236]	; (80139c8 <pbuf_free+0x108>)
 80138dc:	483b      	ldr	r0, [pc, #236]	; (80139cc <pbuf_free+0x10c>)
 80138de:	f00a fcfb 	bl	801e2d8 <printf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80138e2:	2300      	movs	r3, #0
 80138e4:	e069      	b.n	80139ba <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80138e6:	2300      	movs	r3, #0
 80138e8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80138ea:	e062      	b.n	80139b2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80138ec:	f00a fc72 	bl	801e1d4 <sys_arch_protect>
 80138f0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	7b9b      	ldrb	r3, [r3, #14]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d106      	bne.n	8013908 <pbuf_free+0x48>
 80138fa:	4b32      	ldr	r3, [pc, #200]	; (80139c4 <pbuf_free+0x104>)
 80138fc:	f240 22f1 	movw	r2, #753	; 0x2f1
 8013900:	4933      	ldr	r1, [pc, #204]	; (80139d0 <pbuf_free+0x110>)
 8013902:	4832      	ldr	r0, [pc, #200]	; (80139cc <pbuf_free+0x10c>)
 8013904:	f00a fce8 	bl	801e2d8 <printf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	7b9b      	ldrb	r3, [r3, #14]
 801390c:	3b01      	subs	r3, #1
 801390e:	b2da      	uxtb	r2, r3
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	739a      	strb	r2, [r3, #14]
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	7b9b      	ldrb	r3, [r3, #14]
 8013918:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801391a:	69b8      	ldr	r0, [r7, #24]
 801391c:	f00a fc68 	bl	801e1f0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8013920:	7dfb      	ldrb	r3, [r7, #23]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d143      	bne.n	80139ae <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	7b1b      	ldrb	r3, [r3, #12]
 8013930:	f003 030f 	and.w	r3, r3, #15
 8013934:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	7b5b      	ldrb	r3, [r3, #13]
 801393a:	f003 0302 	and.w	r3, r3, #2
 801393e:	2b00      	cmp	r3, #0
 8013940:	d011      	beq.n	8013966 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8013946:	68bb      	ldr	r3, [r7, #8]
 8013948:	691b      	ldr	r3, [r3, #16]
 801394a:	2b00      	cmp	r3, #0
 801394c:	d106      	bne.n	801395c <pbuf_free+0x9c>
 801394e:	4b1d      	ldr	r3, [pc, #116]	; (80139c4 <pbuf_free+0x104>)
 8013950:	f240 22ff 	movw	r2, #767	; 0x2ff
 8013954:	491f      	ldr	r1, [pc, #124]	; (80139d4 <pbuf_free+0x114>)
 8013956:	481d      	ldr	r0, [pc, #116]	; (80139cc <pbuf_free+0x10c>)
 8013958:	f00a fcbe 	bl	801e2d8 <printf>
        pc->custom_free_function(p);
 801395c:	68bb      	ldr	r3, [r7, #8]
 801395e:	691b      	ldr	r3, [r3, #16]
 8013960:	6878      	ldr	r0, [r7, #4]
 8013962:	4798      	blx	r3
 8013964:	e01d      	b.n	80139a2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8013966:	7bfb      	ldrb	r3, [r7, #15]
 8013968:	2b02      	cmp	r3, #2
 801396a:	d104      	bne.n	8013976 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 801396c:	6879      	ldr	r1, [r7, #4]
 801396e:	200c      	movs	r0, #12
 8013970:	f7ff f8f6 	bl	8012b60 <memp_free>
 8013974:	e015      	b.n	80139a2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8013976:	7bfb      	ldrb	r3, [r7, #15]
 8013978:	2b01      	cmp	r3, #1
 801397a:	d104      	bne.n	8013986 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 801397c:	6879      	ldr	r1, [r7, #4]
 801397e:	200b      	movs	r0, #11
 8013980:	f7ff f8ee 	bl	8012b60 <memp_free>
 8013984:	e00d      	b.n	80139a2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8013986:	7bfb      	ldrb	r3, [r7, #15]
 8013988:	2b00      	cmp	r3, #0
 801398a:	d103      	bne.n	8013994 <pbuf_free+0xd4>
          mem_free(p);
 801398c:	6878      	ldr	r0, [r7, #4]
 801398e:	f7fe fd79 	bl	8012484 <mem_free>
 8013992:	e006      	b.n	80139a2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8013994:	4b0b      	ldr	r3, [pc, #44]	; (80139c4 <pbuf_free+0x104>)
 8013996:	f240 320f 	movw	r2, #783	; 0x30f
 801399a:	490f      	ldr	r1, [pc, #60]	; (80139d8 <pbuf_free+0x118>)
 801399c:	480b      	ldr	r0, [pc, #44]	; (80139cc <pbuf_free+0x10c>)
 801399e:	f00a fc9b 	bl	801e2d8 <printf>
        }
      }
      count++;
 80139a2:	7ffb      	ldrb	r3, [r7, #31]
 80139a4:	3301      	adds	r3, #1
 80139a6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80139a8:	693b      	ldr	r3, [r7, #16]
 80139aa:	607b      	str	r3, [r7, #4]
 80139ac:	e001      	b.n	80139b2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80139ae:	2300      	movs	r3, #0
 80139b0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d199      	bne.n	80138ec <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80139b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80139ba:	4618      	mov	r0, r3
 80139bc:	3720      	adds	r7, #32
 80139be:	46bd      	mov	sp, r7
 80139c0:	bd80      	pop	{r7, pc}
 80139c2:	bf00      	nop
 80139c4:	08024c30 	.word	0x08024c30
 80139c8:	08024d94 	.word	0x08024d94
 80139cc:	08024c90 	.word	0x08024c90
 80139d0:	08024dc0 	.word	0x08024dc0
 80139d4:	08024dd8 	.word	0x08024dd8
 80139d8:	08024dfc 	.word	0x08024dfc

080139dc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80139dc:	b480      	push	{r7}
 80139de:	b085      	sub	sp, #20
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80139e4:	2300      	movs	r3, #0
 80139e6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80139e8:	e005      	b.n	80139f6 <pbuf_clen+0x1a>
    ++len;
 80139ea:	89fb      	ldrh	r3, [r7, #14]
 80139ec:	3301      	adds	r3, #1
 80139ee:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d1f6      	bne.n	80139ea <pbuf_clen+0xe>
  }
  return len;
 80139fc:	89fb      	ldrh	r3, [r7, #14]
}
 80139fe:	4618      	mov	r0, r3
 8013a00:	3714      	adds	r7, #20
 8013a02:	46bd      	mov	sp, r7
 8013a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a08:	4770      	bx	lr
	...

08013a0c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8013a0c:	b580      	push	{r7, lr}
 8013a0e:	b084      	sub	sp, #16
 8013a10:	af00      	add	r7, sp, #0
 8013a12:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d016      	beq.n	8013a48 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8013a1a:	f00a fbdb 	bl	801e1d4 <sys_arch_protect>
 8013a1e:	60f8      	str	r0, [r7, #12]
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	7b9b      	ldrb	r3, [r3, #14]
 8013a24:	3301      	adds	r3, #1
 8013a26:	b2da      	uxtb	r2, r3
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	739a      	strb	r2, [r3, #14]
 8013a2c:	68f8      	ldr	r0, [r7, #12]
 8013a2e:	f00a fbdf 	bl	801e1f0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	7b9b      	ldrb	r3, [r3, #14]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d106      	bne.n	8013a48 <pbuf_ref+0x3c>
 8013a3a:	4b05      	ldr	r3, [pc, #20]	; (8013a50 <pbuf_ref+0x44>)
 8013a3c:	f240 3242 	movw	r2, #834	; 0x342
 8013a40:	4904      	ldr	r1, [pc, #16]	; (8013a54 <pbuf_ref+0x48>)
 8013a42:	4805      	ldr	r0, [pc, #20]	; (8013a58 <pbuf_ref+0x4c>)
 8013a44:	f00a fc48 	bl	801e2d8 <printf>
  }
}
 8013a48:	bf00      	nop
 8013a4a:	3710      	adds	r7, #16
 8013a4c:	46bd      	mov	sp, r7
 8013a4e:	bd80      	pop	{r7, pc}
 8013a50:	08024c30 	.word	0x08024c30
 8013a54:	08024e10 	.word	0x08024e10
 8013a58:	08024c90 	.word	0x08024c90

08013a5c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8013a5c:	b580      	push	{r7, lr}
 8013a5e:	b084      	sub	sp, #16
 8013a60:	af00      	add	r7, sp, #0
 8013a62:	6078      	str	r0, [r7, #4]
 8013a64:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d002      	beq.n	8013a72 <pbuf_cat+0x16>
 8013a6c:	683b      	ldr	r3, [r7, #0]
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d107      	bne.n	8013a82 <pbuf_cat+0x26>
 8013a72:	4b20      	ldr	r3, [pc, #128]	; (8013af4 <pbuf_cat+0x98>)
 8013a74:	f240 3259 	movw	r2, #857	; 0x359
 8013a78:	491f      	ldr	r1, [pc, #124]	; (8013af8 <pbuf_cat+0x9c>)
 8013a7a:	4820      	ldr	r0, [pc, #128]	; (8013afc <pbuf_cat+0xa0>)
 8013a7c:	f00a fc2c 	bl	801e2d8 <printf>
 8013a80:	e034      	b.n	8013aec <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	60fb      	str	r3, [r7, #12]
 8013a86:	e00a      	b.n	8013a9e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	891a      	ldrh	r2, [r3, #8]
 8013a8c:	683b      	ldr	r3, [r7, #0]
 8013a8e:	891b      	ldrh	r3, [r3, #8]
 8013a90:	4413      	add	r3, r2
 8013a92:	b29a      	uxth	r2, r3
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	60fb      	str	r3, [r7, #12]
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d1f0      	bne.n	8013a88 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	891a      	ldrh	r2, [r3, #8]
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	895b      	ldrh	r3, [r3, #10]
 8013aae:	429a      	cmp	r2, r3
 8013ab0:	d006      	beq.n	8013ac0 <pbuf_cat+0x64>
 8013ab2:	4b10      	ldr	r3, [pc, #64]	; (8013af4 <pbuf_cat+0x98>)
 8013ab4:	f240 3262 	movw	r2, #866	; 0x362
 8013ab8:	4911      	ldr	r1, [pc, #68]	; (8013b00 <pbuf_cat+0xa4>)
 8013aba:	4810      	ldr	r0, [pc, #64]	; (8013afc <pbuf_cat+0xa0>)
 8013abc:	f00a fc0c 	bl	801e2d8 <printf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d006      	beq.n	8013ad6 <pbuf_cat+0x7a>
 8013ac8:	4b0a      	ldr	r3, [pc, #40]	; (8013af4 <pbuf_cat+0x98>)
 8013aca:	f240 3263 	movw	r2, #867	; 0x363
 8013ace:	490d      	ldr	r1, [pc, #52]	; (8013b04 <pbuf_cat+0xa8>)
 8013ad0:	480a      	ldr	r0, [pc, #40]	; (8013afc <pbuf_cat+0xa0>)
 8013ad2:	f00a fc01 	bl	801e2d8 <printf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	891a      	ldrh	r2, [r3, #8]
 8013ada:	683b      	ldr	r3, [r7, #0]
 8013adc:	891b      	ldrh	r3, [r3, #8]
 8013ade:	4413      	add	r3, r2
 8013ae0:	b29a      	uxth	r2, r3
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	683a      	ldr	r2, [r7, #0]
 8013aea:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8013aec:	3710      	adds	r7, #16
 8013aee:	46bd      	mov	sp, r7
 8013af0:	bd80      	pop	{r7, pc}
 8013af2:	bf00      	nop
 8013af4:	08024c30 	.word	0x08024c30
 8013af8:	08024e24 	.word	0x08024e24
 8013afc:	08024c90 	.word	0x08024c90
 8013b00:	08024e5c 	.word	0x08024e5c
 8013b04:	08024e8c 	.word	0x08024e8c

08013b08 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8013b08:	b580      	push	{r7, lr}
 8013b0a:	b082      	sub	sp, #8
 8013b0c:	af00      	add	r7, sp, #0
 8013b0e:	6078      	str	r0, [r7, #4]
 8013b10:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8013b12:	6839      	ldr	r1, [r7, #0]
 8013b14:	6878      	ldr	r0, [r7, #4]
 8013b16:	f7ff ffa1 	bl	8013a5c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8013b1a:	6838      	ldr	r0, [r7, #0]
 8013b1c:	f7ff ff76 	bl	8013a0c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8013b20:	bf00      	nop
 8013b22:	3708      	adds	r7, #8
 8013b24:	46bd      	mov	sp, r7
 8013b26:	bd80      	pop	{r7, pc}

08013b28 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8013b28:	b580      	push	{r7, lr}
 8013b2a:	b086      	sub	sp, #24
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	6078      	str	r0, [r7, #4]
 8013b30:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8013b32:	2300      	movs	r3, #0
 8013b34:	617b      	str	r3, [r7, #20]
 8013b36:	2300      	movs	r3, #0
 8013b38:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d008      	beq.n	8013b52 <pbuf_copy+0x2a>
 8013b40:	683b      	ldr	r3, [r7, #0]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d005      	beq.n	8013b52 <pbuf_copy+0x2a>
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	891a      	ldrh	r2, [r3, #8]
 8013b4a:	683b      	ldr	r3, [r7, #0]
 8013b4c:	891b      	ldrh	r3, [r3, #8]
 8013b4e:	429a      	cmp	r2, r3
 8013b50:	d209      	bcs.n	8013b66 <pbuf_copy+0x3e>
 8013b52:	4b57      	ldr	r3, [pc, #348]	; (8013cb0 <pbuf_copy+0x188>)
 8013b54:	f240 32c9 	movw	r2, #969	; 0x3c9
 8013b58:	4956      	ldr	r1, [pc, #344]	; (8013cb4 <pbuf_copy+0x18c>)
 8013b5a:	4857      	ldr	r0, [pc, #348]	; (8013cb8 <pbuf_copy+0x190>)
 8013b5c:	f00a fbbc 	bl	801e2d8 <printf>
 8013b60:	f06f 030f 	mvn.w	r3, #15
 8013b64:	e09f      	b.n	8013ca6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	895b      	ldrh	r3, [r3, #10]
 8013b6a:	461a      	mov	r2, r3
 8013b6c:	697b      	ldr	r3, [r7, #20]
 8013b6e:	1ad2      	subs	r2, r2, r3
 8013b70:	683b      	ldr	r3, [r7, #0]
 8013b72:	895b      	ldrh	r3, [r3, #10]
 8013b74:	4619      	mov	r1, r3
 8013b76:	693b      	ldr	r3, [r7, #16]
 8013b78:	1acb      	subs	r3, r1, r3
 8013b7a:	429a      	cmp	r2, r3
 8013b7c:	d306      	bcc.n	8013b8c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8013b7e:	683b      	ldr	r3, [r7, #0]
 8013b80:	895b      	ldrh	r3, [r3, #10]
 8013b82:	461a      	mov	r2, r3
 8013b84:	693b      	ldr	r3, [r7, #16]
 8013b86:	1ad3      	subs	r3, r2, r3
 8013b88:	60fb      	str	r3, [r7, #12]
 8013b8a:	e005      	b.n	8013b98 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	895b      	ldrh	r3, [r3, #10]
 8013b90:	461a      	mov	r2, r3
 8013b92:	697b      	ldr	r3, [r7, #20]
 8013b94:	1ad3      	subs	r3, r2, r3
 8013b96:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	685a      	ldr	r2, [r3, #4]
 8013b9c:	697b      	ldr	r3, [r7, #20]
 8013b9e:	18d0      	adds	r0, r2, r3
 8013ba0:	683b      	ldr	r3, [r7, #0]
 8013ba2:	685a      	ldr	r2, [r3, #4]
 8013ba4:	693b      	ldr	r3, [r7, #16]
 8013ba6:	4413      	add	r3, r2
 8013ba8:	68fa      	ldr	r2, [r7, #12]
 8013baa:	4619      	mov	r1, r3
 8013bac:	f00a fb64 	bl	801e278 <memcpy>
    offset_to += len;
 8013bb0:	697a      	ldr	r2, [r7, #20]
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	4413      	add	r3, r2
 8013bb6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8013bb8:	693a      	ldr	r2, [r7, #16]
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	4413      	add	r3, r2
 8013bbe:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	895b      	ldrh	r3, [r3, #10]
 8013bc4:	461a      	mov	r2, r3
 8013bc6:	697b      	ldr	r3, [r7, #20]
 8013bc8:	4293      	cmp	r3, r2
 8013bca:	d906      	bls.n	8013bda <pbuf_copy+0xb2>
 8013bcc:	4b38      	ldr	r3, [pc, #224]	; (8013cb0 <pbuf_copy+0x188>)
 8013bce:	f240 32d9 	movw	r2, #985	; 0x3d9
 8013bd2:	493a      	ldr	r1, [pc, #232]	; (8013cbc <pbuf_copy+0x194>)
 8013bd4:	4838      	ldr	r0, [pc, #224]	; (8013cb8 <pbuf_copy+0x190>)
 8013bd6:	f00a fb7f 	bl	801e2d8 <printf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8013bda:	683b      	ldr	r3, [r7, #0]
 8013bdc:	895b      	ldrh	r3, [r3, #10]
 8013bde:	461a      	mov	r2, r3
 8013be0:	693b      	ldr	r3, [r7, #16]
 8013be2:	4293      	cmp	r3, r2
 8013be4:	d906      	bls.n	8013bf4 <pbuf_copy+0xcc>
 8013be6:	4b32      	ldr	r3, [pc, #200]	; (8013cb0 <pbuf_copy+0x188>)
 8013be8:	f240 32da 	movw	r2, #986	; 0x3da
 8013bec:	4934      	ldr	r1, [pc, #208]	; (8013cc0 <pbuf_copy+0x198>)
 8013bee:	4832      	ldr	r0, [pc, #200]	; (8013cb8 <pbuf_copy+0x190>)
 8013bf0:	f00a fb72 	bl	801e2d8 <printf>
    if (offset_from >= p_from->len) {
 8013bf4:	683b      	ldr	r3, [r7, #0]
 8013bf6:	895b      	ldrh	r3, [r3, #10]
 8013bf8:	461a      	mov	r2, r3
 8013bfa:	693b      	ldr	r3, [r7, #16]
 8013bfc:	4293      	cmp	r3, r2
 8013bfe:	d304      	bcc.n	8013c0a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8013c00:	2300      	movs	r3, #0
 8013c02:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8013c04:	683b      	ldr	r3, [r7, #0]
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	895b      	ldrh	r3, [r3, #10]
 8013c0e:	461a      	mov	r2, r3
 8013c10:	697b      	ldr	r3, [r7, #20]
 8013c12:	4293      	cmp	r3, r2
 8013c14:	d114      	bne.n	8013c40 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8013c16:	2300      	movs	r3, #0
 8013c18:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	681b      	ldr	r3, [r3, #0]
 8013c1e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d10c      	bne.n	8013c40 <pbuf_copy+0x118>
 8013c26:	683b      	ldr	r3, [r7, #0]
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d009      	beq.n	8013c40 <pbuf_copy+0x118>
 8013c2c:	4b20      	ldr	r3, [pc, #128]	; (8013cb0 <pbuf_copy+0x188>)
 8013c2e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8013c32:	4924      	ldr	r1, [pc, #144]	; (8013cc4 <pbuf_copy+0x19c>)
 8013c34:	4820      	ldr	r0, [pc, #128]	; (8013cb8 <pbuf_copy+0x190>)
 8013c36:	f00a fb4f 	bl	801e2d8 <printf>
 8013c3a:	f06f 030f 	mvn.w	r3, #15
 8013c3e:	e032      	b.n	8013ca6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8013c40:	683b      	ldr	r3, [r7, #0]
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d013      	beq.n	8013c6e <pbuf_copy+0x146>
 8013c46:	683b      	ldr	r3, [r7, #0]
 8013c48:	895a      	ldrh	r2, [r3, #10]
 8013c4a:	683b      	ldr	r3, [r7, #0]
 8013c4c:	891b      	ldrh	r3, [r3, #8]
 8013c4e:	429a      	cmp	r2, r3
 8013c50:	d10d      	bne.n	8013c6e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8013c52:	683b      	ldr	r3, [r7, #0]
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d009      	beq.n	8013c6e <pbuf_copy+0x146>
 8013c5a:	4b15      	ldr	r3, [pc, #84]	; (8013cb0 <pbuf_copy+0x188>)
 8013c5c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8013c60:	4919      	ldr	r1, [pc, #100]	; (8013cc8 <pbuf_copy+0x1a0>)
 8013c62:	4815      	ldr	r0, [pc, #84]	; (8013cb8 <pbuf_copy+0x190>)
 8013c64:	f00a fb38 	bl	801e2d8 <printf>
 8013c68:	f06f 0305 	mvn.w	r3, #5
 8013c6c:	e01b      	b.n	8013ca6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d013      	beq.n	8013c9c <pbuf_copy+0x174>
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	895a      	ldrh	r2, [r3, #10]
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	891b      	ldrh	r3, [r3, #8]
 8013c7c:	429a      	cmp	r2, r3
 8013c7e:	d10d      	bne.n	8013c9c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d009      	beq.n	8013c9c <pbuf_copy+0x174>
 8013c88:	4b09      	ldr	r3, [pc, #36]	; (8013cb0 <pbuf_copy+0x188>)
 8013c8a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8013c8e:	490e      	ldr	r1, [pc, #56]	; (8013cc8 <pbuf_copy+0x1a0>)
 8013c90:	4809      	ldr	r0, [pc, #36]	; (8013cb8 <pbuf_copy+0x190>)
 8013c92:	f00a fb21 	bl	801e2d8 <printf>
 8013c96:	f06f 0305 	mvn.w	r3, #5
 8013c9a:	e004      	b.n	8013ca6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8013c9c:	683b      	ldr	r3, [r7, #0]
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	f47f af61 	bne.w	8013b66 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8013ca4:	2300      	movs	r3, #0
}
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	3718      	adds	r7, #24
 8013caa:	46bd      	mov	sp, r7
 8013cac:	bd80      	pop	{r7, pc}
 8013cae:	bf00      	nop
 8013cb0:	08024c30 	.word	0x08024c30
 8013cb4:	08024ed8 	.word	0x08024ed8
 8013cb8:	08024c90 	.word	0x08024c90
 8013cbc:	08024f08 	.word	0x08024f08
 8013cc0:	08024f20 	.word	0x08024f20
 8013cc4:	08024f3c 	.word	0x08024f3c
 8013cc8:	08024f4c 	.word	0x08024f4c

08013ccc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8013ccc:	b580      	push	{r7, lr}
 8013cce:	b088      	sub	sp, #32
 8013cd0:	af00      	add	r7, sp, #0
 8013cd2:	60f8      	str	r0, [r7, #12]
 8013cd4:	60b9      	str	r1, [r7, #8]
 8013cd6:	4611      	mov	r1, r2
 8013cd8:	461a      	mov	r2, r3
 8013cda:	460b      	mov	r3, r1
 8013cdc:	80fb      	strh	r3, [r7, #6]
 8013cde:	4613      	mov	r3, r2
 8013ce0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8013ce2:	2300      	movs	r3, #0
 8013ce4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8013ce6:	2300      	movs	r3, #0
 8013ce8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d108      	bne.n	8013d02 <pbuf_copy_partial+0x36>
 8013cf0:	4b2b      	ldr	r3, [pc, #172]	; (8013da0 <pbuf_copy_partial+0xd4>)
 8013cf2:	f240 420a 	movw	r2, #1034	; 0x40a
 8013cf6:	492b      	ldr	r1, [pc, #172]	; (8013da4 <pbuf_copy_partial+0xd8>)
 8013cf8:	482b      	ldr	r0, [pc, #172]	; (8013da8 <pbuf_copy_partial+0xdc>)
 8013cfa:	f00a faed 	bl	801e2d8 <printf>
 8013cfe:	2300      	movs	r3, #0
 8013d00:	e04a      	b.n	8013d98 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8013d02:	68bb      	ldr	r3, [r7, #8]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d108      	bne.n	8013d1a <pbuf_copy_partial+0x4e>
 8013d08:	4b25      	ldr	r3, [pc, #148]	; (8013da0 <pbuf_copy_partial+0xd4>)
 8013d0a:	f240 420b 	movw	r2, #1035	; 0x40b
 8013d0e:	4927      	ldr	r1, [pc, #156]	; (8013dac <pbuf_copy_partial+0xe0>)
 8013d10:	4825      	ldr	r0, [pc, #148]	; (8013da8 <pbuf_copy_partial+0xdc>)
 8013d12:	f00a fae1 	bl	801e2d8 <printf>
 8013d16:	2300      	movs	r3, #0
 8013d18:	e03e      	b.n	8013d98 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	61fb      	str	r3, [r7, #28]
 8013d1e:	e034      	b.n	8013d8a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8013d20:	88bb      	ldrh	r3, [r7, #4]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d00a      	beq.n	8013d3c <pbuf_copy_partial+0x70>
 8013d26:	69fb      	ldr	r3, [r7, #28]
 8013d28:	895b      	ldrh	r3, [r3, #10]
 8013d2a:	88ba      	ldrh	r2, [r7, #4]
 8013d2c:	429a      	cmp	r2, r3
 8013d2e:	d305      	bcc.n	8013d3c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8013d30:	69fb      	ldr	r3, [r7, #28]
 8013d32:	895b      	ldrh	r3, [r3, #10]
 8013d34:	88ba      	ldrh	r2, [r7, #4]
 8013d36:	1ad3      	subs	r3, r2, r3
 8013d38:	80bb      	strh	r3, [r7, #4]
 8013d3a:	e023      	b.n	8013d84 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8013d3c:	69fb      	ldr	r3, [r7, #28]
 8013d3e:	895a      	ldrh	r2, [r3, #10]
 8013d40:	88bb      	ldrh	r3, [r7, #4]
 8013d42:	1ad3      	subs	r3, r2, r3
 8013d44:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8013d46:	8b3a      	ldrh	r2, [r7, #24]
 8013d48:	88fb      	ldrh	r3, [r7, #6]
 8013d4a:	429a      	cmp	r2, r3
 8013d4c:	d901      	bls.n	8013d52 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8013d4e:	88fb      	ldrh	r3, [r7, #6]
 8013d50:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8013d52:	8b7b      	ldrh	r3, [r7, #26]
 8013d54:	68ba      	ldr	r2, [r7, #8]
 8013d56:	18d0      	adds	r0, r2, r3
 8013d58:	69fb      	ldr	r3, [r7, #28]
 8013d5a:	685a      	ldr	r2, [r3, #4]
 8013d5c:	88bb      	ldrh	r3, [r7, #4]
 8013d5e:	4413      	add	r3, r2
 8013d60:	8b3a      	ldrh	r2, [r7, #24]
 8013d62:	4619      	mov	r1, r3
 8013d64:	f00a fa88 	bl	801e278 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8013d68:	8afa      	ldrh	r2, [r7, #22]
 8013d6a:	8b3b      	ldrh	r3, [r7, #24]
 8013d6c:	4413      	add	r3, r2
 8013d6e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8013d70:	8b7a      	ldrh	r2, [r7, #26]
 8013d72:	8b3b      	ldrh	r3, [r7, #24]
 8013d74:	4413      	add	r3, r2
 8013d76:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8013d78:	88fa      	ldrh	r2, [r7, #6]
 8013d7a:	8b3b      	ldrh	r3, [r7, #24]
 8013d7c:	1ad3      	subs	r3, r2, r3
 8013d7e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8013d80:	2300      	movs	r3, #0
 8013d82:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8013d84:	69fb      	ldr	r3, [r7, #28]
 8013d86:	681b      	ldr	r3, [r3, #0]
 8013d88:	61fb      	str	r3, [r7, #28]
 8013d8a:	88fb      	ldrh	r3, [r7, #6]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d002      	beq.n	8013d96 <pbuf_copy_partial+0xca>
 8013d90:	69fb      	ldr	r3, [r7, #28]
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d1c4      	bne.n	8013d20 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8013d96:	8afb      	ldrh	r3, [r7, #22]
}
 8013d98:	4618      	mov	r0, r3
 8013d9a:	3720      	adds	r7, #32
 8013d9c:	46bd      	mov	sp, r7
 8013d9e:	bd80      	pop	{r7, pc}
 8013da0:	08024c30 	.word	0x08024c30
 8013da4:	08024f78 	.word	0x08024f78
 8013da8:	08024c90 	.word	0x08024c90
 8013dac:	08024f98 	.word	0x08024f98

08013db0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8013db0:	b580      	push	{r7, lr}
 8013db2:	b084      	sub	sp, #16
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	4603      	mov	r3, r0
 8013db8:	603a      	str	r2, [r7, #0]
 8013dba:	71fb      	strb	r3, [r7, #7]
 8013dbc:	460b      	mov	r3, r1
 8013dbe:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8013dc0:	683b      	ldr	r3, [r7, #0]
 8013dc2:	8919      	ldrh	r1, [r3, #8]
 8013dc4:	88ba      	ldrh	r2, [r7, #4]
 8013dc6:	79fb      	ldrb	r3, [r7, #7]
 8013dc8:	4618      	mov	r0, r3
 8013dca:	f7ff fa95 	bl	80132f8 <pbuf_alloc>
 8013dce:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d101      	bne.n	8013dda <pbuf_clone+0x2a>
    return NULL;
 8013dd6:	2300      	movs	r3, #0
 8013dd8:	e011      	b.n	8013dfe <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8013dda:	6839      	ldr	r1, [r7, #0]
 8013ddc:	68f8      	ldr	r0, [r7, #12]
 8013dde:	f7ff fea3 	bl	8013b28 <pbuf_copy>
 8013de2:	4603      	mov	r3, r0
 8013de4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8013de6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d006      	beq.n	8013dfc <pbuf_clone+0x4c>
 8013dee:	4b06      	ldr	r3, [pc, #24]	; (8013e08 <pbuf_clone+0x58>)
 8013df0:	f240 5224 	movw	r2, #1316	; 0x524
 8013df4:	4905      	ldr	r1, [pc, #20]	; (8013e0c <pbuf_clone+0x5c>)
 8013df6:	4806      	ldr	r0, [pc, #24]	; (8013e10 <pbuf_clone+0x60>)
 8013df8:	f00a fa6e 	bl	801e2d8 <printf>
  return q;
 8013dfc:	68fb      	ldr	r3, [r7, #12]
}
 8013dfe:	4618      	mov	r0, r3
 8013e00:	3710      	adds	r7, #16
 8013e02:	46bd      	mov	sp, r7
 8013e04:	bd80      	pop	{r7, pc}
 8013e06:	bf00      	nop
 8013e08:	08024c30 	.word	0x08024c30
 8013e0c:	080250a4 	.word	0x080250a4
 8013e10:	08024c90 	.word	0x08024c90

08013e14 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8013e14:	b580      	push	{r7, lr}
 8013e16:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013e18:	f00a fabe 	bl	801e398 <rand>
 8013e1c:	4603      	mov	r3, r0
 8013e1e:	b29b      	uxth	r3, r3
 8013e20:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013e24:	b29b      	uxth	r3, r3
 8013e26:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013e2a:	b29a      	uxth	r2, r3
 8013e2c:	4b01      	ldr	r3, [pc, #4]	; (8013e34 <tcp_init+0x20>)
 8013e2e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013e30:	bf00      	nop
 8013e32:	bd80      	pop	{r7, pc}
 8013e34:	20000010 	.word	0x20000010

08013e38 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8013e38:	b580      	push	{r7, lr}
 8013e3a:	b082      	sub	sp, #8
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	7d1b      	ldrb	r3, [r3, #20]
 8013e44:	2b01      	cmp	r3, #1
 8013e46:	d105      	bne.n	8013e54 <tcp_free+0x1c>
 8013e48:	4b06      	ldr	r3, [pc, #24]	; (8013e64 <tcp_free+0x2c>)
 8013e4a:	22d4      	movs	r2, #212	; 0xd4
 8013e4c:	4906      	ldr	r1, [pc, #24]	; (8013e68 <tcp_free+0x30>)
 8013e4e:	4807      	ldr	r0, [pc, #28]	; (8013e6c <tcp_free+0x34>)
 8013e50:	f00a fa42 	bl	801e2d8 <printf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8013e54:	6879      	ldr	r1, [r7, #4]
 8013e56:	2001      	movs	r0, #1
 8013e58:	f7fe fe82 	bl	8012b60 <memp_free>
}
 8013e5c:	bf00      	nop
 8013e5e:	3708      	adds	r7, #8
 8013e60:	46bd      	mov	sp, r7
 8013e62:	bd80      	pop	{r7, pc}
 8013e64:	08025130 	.word	0x08025130
 8013e68:	08025160 	.word	0x08025160
 8013e6c:	08025174 	.word	0x08025174

08013e70 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8013e70:	b580      	push	{r7, lr}
 8013e72:	b082      	sub	sp, #8
 8013e74:	af00      	add	r7, sp, #0
 8013e76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	7d1b      	ldrb	r3, [r3, #20]
 8013e7c:	2b01      	cmp	r3, #1
 8013e7e:	d105      	bne.n	8013e8c <tcp_free_listen+0x1c>
 8013e80:	4b06      	ldr	r3, [pc, #24]	; (8013e9c <tcp_free_listen+0x2c>)
 8013e82:	22df      	movs	r2, #223	; 0xdf
 8013e84:	4906      	ldr	r1, [pc, #24]	; (8013ea0 <tcp_free_listen+0x30>)
 8013e86:	4807      	ldr	r0, [pc, #28]	; (8013ea4 <tcp_free_listen+0x34>)
 8013e88:	f00a fa26 	bl	801e2d8 <printf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8013e8c:	6879      	ldr	r1, [r7, #4]
 8013e8e:	2002      	movs	r0, #2
 8013e90:	f7fe fe66 	bl	8012b60 <memp_free>
}
 8013e94:	bf00      	nop
 8013e96:	3708      	adds	r7, #8
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	bd80      	pop	{r7, pc}
 8013e9c:	08025130 	.word	0x08025130
 8013ea0:	0802519c 	.word	0x0802519c
 8013ea4:	08025174 	.word	0x08025174

08013ea8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8013ea8:	b580      	push	{r7, lr}
 8013eaa:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8013eac:	f000 fea2 	bl	8014bf4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8013eb0:	4b07      	ldr	r3, [pc, #28]	; (8013ed0 <tcp_tmr+0x28>)
 8013eb2:	781b      	ldrb	r3, [r3, #0]
 8013eb4:	3301      	adds	r3, #1
 8013eb6:	b2da      	uxtb	r2, r3
 8013eb8:	4b05      	ldr	r3, [pc, #20]	; (8013ed0 <tcp_tmr+0x28>)
 8013eba:	701a      	strb	r2, [r3, #0]
 8013ebc:	4b04      	ldr	r3, [pc, #16]	; (8013ed0 <tcp_tmr+0x28>)
 8013ebe:	781b      	ldrb	r3, [r3, #0]
 8013ec0:	f003 0301 	and.w	r3, r3, #1
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d001      	beq.n	8013ecc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8013ec8:	f000 fb54 	bl	8014574 <tcp_slowtmr>
  }
}
 8013ecc:	bf00      	nop
 8013ece:	bd80      	pop	{r7, pc}
 8013ed0:	2000c1c9 	.word	0x2000c1c9

08013ed4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b084      	sub	sp, #16
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	6078      	str	r0, [r7, #4]
 8013edc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8013ede:	683b      	ldr	r3, [r7, #0]
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d105      	bne.n	8013ef0 <tcp_remove_listener+0x1c>
 8013ee4:	4b0d      	ldr	r3, [pc, #52]	; (8013f1c <tcp_remove_listener+0x48>)
 8013ee6:	22ff      	movs	r2, #255	; 0xff
 8013ee8:	490d      	ldr	r1, [pc, #52]	; (8013f20 <tcp_remove_listener+0x4c>)
 8013eea:	480e      	ldr	r0, [pc, #56]	; (8013f24 <tcp_remove_listener+0x50>)
 8013eec:	f00a f9f4 	bl	801e2d8 <printf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	60fb      	str	r3, [r7, #12]
 8013ef4:	e00a      	b.n	8013f0c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013efa:	683a      	ldr	r2, [r7, #0]
 8013efc:	429a      	cmp	r2, r3
 8013efe:	d102      	bne.n	8013f06 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	2200      	movs	r2, #0
 8013f04:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	68db      	ldr	r3, [r3, #12]
 8013f0a:	60fb      	str	r3, [r7, #12]
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d1f1      	bne.n	8013ef6 <tcp_remove_listener+0x22>
    }
  }
}
 8013f12:	bf00      	nop
 8013f14:	bf00      	nop
 8013f16:	3710      	adds	r7, #16
 8013f18:	46bd      	mov	sp, r7
 8013f1a:	bd80      	pop	{r7, pc}
 8013f1c:	08025130 	.word	0x08025130
 8013f20:	080251b8 	.word	0x080251b8
 8013f24:	08025174 	.word	0x08025174

08013f28 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8013f28:	b580      	push	{r7, lr}
 8013f2a:	b084      	sub	sp, #16
 8013f2c:	af00      	add	r7, sp, #0
 8013f2e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d106      	bne.n	8013f44 <tcp_listen_closed+0x1c>
 8013f36:	4b14      	ldr	r3, [pc, #80]	; (8013f88 <tcp_listen_closed+0x60>)
 8013f38:	f240 1211 	movw	r2, #273	; 0x111
 8013f3c:	4913      	ldr	r1, [pc, #76]	; (8013f8c <tcp_listen_closed+0x64>)
 8013f3e:	4814      	ldr	r0, [pc, #80]	; (8013f90 <tcp_listen_closed+0x68>)
 8013f40:	f00a f9ca 	bl	801e2d8 <printf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	7d1b      	ldrb	r3, [r3, #20]
 8013f48:	2b01      	cmp	r3, #1
 8013f4a:	d006      	beq.n	8013f5a <tcp_listen_closed+0x32>
 8013f4c:	4b0e      	ldr	r3, [pc, #56]	; (8013f88 <tcp_listen_closed+0x60>)
 8013f4e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8013f52:	4910      	ldr	r1, [pc, #64]	; (8013f94 <tcp_listen_closed+0x6c>)
 8013f54:	480e      	ldr	r0, [pc, #56]	; (8013f90 <tcp_listen_closed+0x68>)
 8013f56:	f00a f9bf 	bl	801e2d8 <printf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8013f5a:	2301      	movs	r3, #1
 8013f5c:	60fb      	str	r3, [r7, #12]
 8013f5e:	e00b      	b.n	8013f78 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8013f60:	4a0d      	ldr	r2, [pc, #52]	; (8013f98 <tcp_listen_closed+0x70>)
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	6879      	ldr	r1, [r7, #4]
 8013f6c:	4618      	mov	r0, r3
 8013f6e:	f7ff ffb1 	bl	8013ed4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	3301      	adds	r3, #1
 8013f76:	60fb      	str	r3, [r7, #12]
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	2b03      	cmp	r3, #3
 8013f7c:	d9f0      	bls.n	8013f60 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8013f7e:	bf00      	nop
 8013f80:	bf00      	nop
 8013f82:	3710      	adds	r7, #16
 8013f84:	46bd      	mov	sp, r7
 8013f86:	bd80      	pop	{r7, pc}
 8013f88:	08025130 	.word	0x08025130
 8013f8c:	080251e0 	.word	0x080251e0
 8013f90:	08025174 	.word	0x08025174
 8013f94:	080251ec 	.word	0x080251ec
 8013f98:	0806f614 	.word	0x0806f614

08013f9c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8013f9c:	b5b0      	push	{r4, r5, r7, lr}
 8013f9e:	b088      	sub	sp, #32
 8013fa0:	af04      	add	r7, sp, #16
 8013fa2:	6078      	str	r0, [r7, #4]
 8013fa4:	460b      	mov	r3, r1
 8013fa6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d106      	bne.n	8013fbc <tcp_close_shutdown+0x20>
 8013fae:	4b63      	ldr	r3, [pc, #396]	; (801413c <tcp_close_shutdown+0x1a0>)
 8013fb0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8013fb4:	4962      	ldr	r1, [pc, #392]	; (8014140 <tcp_close_shutdown+0x1a4>)
 8013fb6:	4863      	ldr	r0, [pc, #396]	; (8014144 <tcp_close_shutdown+0x1a8>)
 8013fb8:	f00a f98e 	bl	801e2d8 <printf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8013fbc:	78fb      	ldrb	r3, [r7, #3]
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d066      	beq.n	8014090 <tcp_close_shutdown+0xf4>
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	7d1b      	ldrb	r3, [r3, #20]
 8013fc6:	2b04      	cmp	r3, #4
 8013fc8:	d003      	beq.n	8013fd2 <tcp_close_shutdown+0x36>
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	7d1b      	ldrb	r3, [r3, #20]
 8013fce:	2b07      	cmp	r3, #7
 8013fd0:	d15e      	bne.n	8014090 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d104      	bne.n	8013fe4 <tcp_close_shutdown+0x48>
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013fde:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8013fe2:	d055      	beq.n	8014090 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	8b5b      	ldrh	r3, [r3, #26]
 8013fe8:	f003 0310 	and.w	r3, r3, #16
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d106      	bne.n	8013ffe <tcp_close_shutdown+0x62>
 8013ff0:	4b52      	ldr	r3, [pc, #328]	; (801413c <tcp_close_shutdown+0x1a0>)
 8013ff2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8013ff6:	4954      	ldr	r1, [pc, #336]	; (8014148 <tcp_close_shutdown+0x1ac>)
 8013ff8:	4852      	ldr	r0, [pc, #328]	; (8014144 <tcp_close_shutdown+0x1a8>)
 8013ffa:	f00a f96d 	bl	801e2d8 <printf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8014006:	687d      	ldr	r5, [r7, #4]
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	3304      	adds	r3, #4
 801400c:	687a      	ldr	r2, [r7, #4]
 801400e:	8ad2      	ldrh	r2, [r2, #22]
 8014010:	6879      	ldr	r1, [r7, #4]
 8014012:	8b09      	ldrh	r1, [r1, #24]
 8014014:	9102      	str	r1, [sp, #8]
 8014016:	9201      	str	r2, [sp, #4]
 8014018:	9300      	str	r3, [sp, #0]
 801401a:	462b      	mov	r3, r5
 801401c:	4622      	mov	r2, r4
 801401e:	4601      	mov	r1, r0
 8014020:	6878      	ldr	r0, [r7, #4]
 8014022:	f004 fe91 	bl	8018d48 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8014026:	6878      	ldr	r0, [r7, #4]
 8014028:	f001 f8c6 	bl	80151b8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801402c:	4b47      	ldr	r3, [pc, #284]	; (801414c <tcp_close_shutdown+0x1b0>)
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	687a      	ldr	r2, [r7, #4]
 8014032:	429a      	cmp	r2, r3
 8014034:	d105      	bne.n	8014042 <tcp_close_shutdown+0xa6>
 8014036:	4b45      	ldr	r3, [pc, #276]	; (801414c <tcp_close_shutdown+0x1b0>)
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	68db      	ldr	r3, [r3, #12]
 801403c:	4a43      	ldr	r2, [pc, #268]	; (801414c <tcp_close_shutdown+0x1b0>)
 801403e:	6013      	str	r3, [r2, #0]
 8014040:	e013      	b.n	801406a <tcp_close_shutdown+0xce>
 8014042:	4b42      	ldr	r3, [pc, #264]	; (801414c <tcp_close_shutdown+0x1b0>)
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	60fb      	str	r3, [r7, #12]
 8014048:	e00c      	b.n	8014064 <tcp_close_shutdown+0xc8>
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	68db      	ldr	r3, [r3, #12]
 801404e:	687a      	ldr	r2, [r7, #4]
 8014050:	429a      	cmp	r2, r3
 8014052:	d104      	bne.n	801405e <tcp_close_shutdown+0xc2>
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	68da      	ldr	r2, [r3, #12]
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	60da      	str	r2, [r3, #12]
 801405c:	e005      	b.n	801406a <tcp_close_shutdown+0xce>
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	68db      	ldr	r3, [r3, #12]
 8014062:	60fb      	str	r3, [r7, #12]
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d1ef      	bne.n	801404a <tcp_close_shutdown+0xae>
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	2200      	movs	r2, #0
 801406e:	60da      	str	r2, [r3, #12]
 8014070:	4b37      	ldr	r3, [pc, #220]	; (8014150 <tcp_close_shutdown+0x1b4>)
 8014072:	2201      	movs	r2, #1
 8014074:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8014076:	4b37      	ldr	r3, [pc, #220]	; (8014154 <tcp_close_shutdown+0x1b8>)
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	687a      	ldr	r2, [r7, #4]
 801407c:	429a      	cmp	r2, r3
 801407e:	d102      	bne.n	8014086 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8014080:	f003 fd5e 	bl	8017b40 <tcp_trigger_input_pcb_close>
 8014084:	e002      	b.n	801408c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8014086:	6878      	ldr	r0, [r7, #4]
 8014088:	f7ff fed6 	bl	8013e38 <tcp_free>
      }
      return ERR_OK;
 801408c:	2300      	movs	r3, #0
 801408e:	e050      	b.n	8014132 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	7d1b      	ldrb	r3, [r3, #20]
 8014094:	2b02      	cmp	r3, #2
 8014096:	d03b      	beq.n	8014110 <tcp_close_shutdown+0x174>
 8014098:	2b02      	cmp	r3, #2
 801409a:	dc44      	bgt.n	8014126 <tcp_close_shutdown+0x18a>
 801409c:	2b00      	cmp	r3, #0
 801409e:	d002      	beq.n	80140a6 <tcp_close_shutdown+0x10a>
 80140a0:	2b01      	cmp	r3, #1
 80140a2:	d02a      	beq.n	80140fa <tcp_close_shutdown+0x15e>
 80140a4:	e03f      	b.n	8014126 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	8adb      	ldrh	r3, [r3, #22]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d021      	beq.n	80140f2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80140ae:	4b2a      	ldr	r3, [pc, #168]	; (8014158 <tcp_close_shutdown+0x1bc>)
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	687a      	ldr	r2, [r7, #4]
 80140b4:	429a      	cmp	r2, r3
 80140b6:	d105      	bne.n	80140c4 <tcp_close_shutdown+0x128>
 80140b8:	4b27      	ldr	r3, [pc, #156]	; (8014158 <tcp_close_shutdown+0x1bc>)
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	68db      	ldr	r3, [r3, #12]
 80140be:	4a26      	ldr	r2, [pc, #152]	; (8014158 <tcp_close_shutdown+0x1bc>)
 80140c0:	6013      	str	r3, [r2, #0]
 80140c2:	e013      	b.n	80140ec <tcp_close_shutdown+0x150>
 80140c4:	4b24      	ldr	r3, [pc, #144]	; (8014158 <tcp_close_shutdown+0x1bc>)
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	60bb      	str	r3, [r7, #8]
 80140ca:	e00c      	b.n	80140e6 <tcp_close_shutdown+0x14a>
 80140cc:	68bb      	ldr	r3, [r7, #8]
 80140ce:	68db      	ldr	r3, [r3, #12]
 80140d0:	687a      	ldr	r2, [r7, #4]
 80140d2:	429a      	cmp	r2, r3
 80140d4:	d104      	bne.n	80140e0 <tcp_close_shutdown+0x144>
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	68da      	ldr	r2, [r3, #12]
 80140da:	68bb      	ldr	r3, [r7, #8]
 80140dc:	60da      	str	r2, [r3, #12]
 80140de:	e005      	b.n	80140ec <tcp_close_shutdown+0x150>
 80140e0:	68bb      	ldr	r3, [r7, #8]
 80140e2:	68db      	ldr	r3, [r3, #12]
 80140e4:	60bb      	str	r3, [r7, #8]
 80140e6:	68bb      	ldr	r3, [r7, #8]
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d1ef      	bne.n	80140cc <tcp_close_shutdown+0x130>
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	2200      	movs	r2, #0
 80140f0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80140f2:	6878      	ldr	r0, [r7, #4]
 80140f4:	f7ff fea0 	bl	8013e38 <tcp_free>
      break;
 80140f8:	e01a      	b.n	8014130 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80140fa:	6878      	ldr	r0, [r7, #4]
 80140fc:	f7ff ff14 	bl	8013f28 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8014100:	6879      	ldr	r1, [r7, #4]
 8014102:	4816      	ldr	r0, [pc, #88]	; (801415c <tcp_close_shutdown+0x1c0>)
 8014104:	f001 f8a8 	bl	8015258 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8014108:	6878      	ldr	r0, [r7, #4]
 801410a:	f7ff feb1 	bl	8013e70 <tcp_free_listen>
      break;
 801410e:	e00f      	b.n	8014130 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014110:	6879      	ldr	r1, [r7, #4]
 8014112:	480e      	ldr	r0, [pc, #56]	; (801414c <tcp_close_shutdown+0x1b0>)
 8014114:	f001 f8a0 	bl	8015258 <tcp_pcb_remove>
 8014118:	4b0d      	ldr	r3, [pc, #52]	; (8014150 <tcp_close_shutdown+0x1b4>)
 801411a:	2201      	movs	r2, #1
 801411c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801411e:	6878      	ldr	r0, [r7, #4]
 8014120:	f7ff fe8a 	bl	8013e38 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8014124:	e004      	b.n	8014130 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8014126:	6878      	ldr	r0, [r7, #4]
 8014128:	f000 f81a 	bl	8014160 <tcp_close_shutdown_fin>
 801412c:	4603      	mov	r3, r0
 801412e:	e000      	b.n	8014132 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8014130:	2300      	movs	r3, #0
}
 8014132:	4618      	mov	r0, r3
 8014134:	3710      	adds	r7, #16
 8014136:	46bd      	mov	sp, r7
 8014138:	bdb0      	pop	{r4, r5, r7, pc}
 801413a:	bf00      	nop
 801413c:	08025130 	.word	0x08025130
 8014140:	08025204 	.word	0x08025204
 8014144:	08025174 	.word	0x08025174
 8014148:	08025224 	.word	0x08025224
 801414c:	2000c1c0 	.word	0x2000c1c0
 8014150:	2000c1c8 	.word	0x2000c1c8
 8014154:	2000c200 	.word	0x2000c200
 8014158:	2000c1b8 	.word	0x2000c1b8
 801415c:	2000c1bc 	.word	0x2000c1bc

08014160 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8014160:	b580      	push	{r7, lr}
 8014162:	b084      	sub	sp, #16
 8014164:	af00      	add	r7, sp, #0
 8014166:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	2b00      	cmp	r3, #0
 801416c:	d106      	bne.n	801417c <tcp_close_shutdown_fin+0x1c>
 801416e:	4b2e      	ldr	r3, [pc, #184]	; (8014228 <tcp_close_shutdown_fin+0xc8>)
 8014170:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8014174:	492d      	ldr	r1, [pc, #180]	; (801422c <tcp_close_shutdown_fin+0xcc>)
 8014176:	482e      	ldr	r0, [pc, #184]	; (8014230 <tcp_close_shutdown_fin+0xd0>)
 8014178:	f00a f8ae 	bl	801e2d8 <printf>

  switch (pcb->state) {
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	7d1b      	ldrb	r3, [r3, #20]
 8014180:	2b07      	cmp	r3, #7
 8014182:	d020      	beq.n	80141c6 <tcp_close_shutdown_fin+0x66>
 8014184:	2b07      	cmp	r3, #7
 8014186:	dc2b      	bgt.n	80141e0 <tcp_close_shutdown_fin+0x80>
 8014188:	2b03      	cmp	r3, #3
 801418a:	d002      	beq.n	8014192 <tcp_close_shutdown_fin+0x32>
 801418c:	2b04      	cmp	r3, #4
 801418e:	d00d      	beq.n	80141ac <tcp_close_shutdown_fin+0x4c>
 8014190:	e026      	b.n	80141e0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8014192:	6878      	ldr	r0, [r7, #4]
 8014194:	f003 fee6 	bl	8017f64 <tcp_send_fin>
 8014198:	4603      	mov	r3, r0
 801419a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801419c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d11f      	bne.n	80141e4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	2205      	movs	r2, #5
 80141a8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80141aa:	e01b      	b.n	80141e4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80141ac:	6878      	ldr	r0, [r7, #4]
 80141ae:	f003 fed9 	bl	8017f64 <tcp_send_fin>
 80141b2:	4603      	mov	r3, r0
 80141b4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80141b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d114      	bne.n	80141e8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	2205      	movs	r2, #5
 80141c2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80141c4:	e010      	b.n	80141e8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80141c6:	6878      	ldr	r0, [r7, #4]
 80141c8:	f003 fecc 	bl	8017f64 <tcp_send_fin>
 80141cc:	4603      	mov	r3, r0
 80141ce:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80141d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d109      	bne.n	80141ec <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	2209      	movs	r2, #9
 80141dc:	751a      	strb	r2, [r3, #20]
      }
      break;
 80141de:	e005      	b.n	80141ec <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80141e0:	2300      	movs	r3, #0
 80141e2:	e01c      	b.n	801421e <tcp_close_shutdown_fin+0xbe>
      break;
 80141e4:	bf00      	nop
 80141e6:	e002      	b.n	80141ee <tcp_close_shutdown_fin+0x8e>
      break;
 80141e8:	bf00      	nop
 80141ea:	e000      	b.n	80141ee <tcp_close_shutdown_fin+0x8e>
      break;
 80141ec:	bf00      	nop
  }

  if (err == ERR_OK) {
 80141ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d103      	bne.n	80141fe <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80141f6:	6878      	ldr	r0, [r7, #4]
 80141f8:	f003 fff2 	bl	80181e0 <tcp_output>
 80141fc:	e00d      	b.n	801421a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80141fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014206:	d108      	bne.n	801421a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	8b5b      	ldrh	r3, [r3, #26]
 801420c:	f043 0308 	orr.w	r3, r3, #8
 8014210:	b29a      	uxth	r2, r3
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8014216:	2300      	movs	r3, #0
 8014218:	e001      	b.n	801421e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801421a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801421e:	4618      	mov	r0, r3
 8014220:	3710      	adds	r7, #16
 8014222:	46bd      	mov	sp, r7
 8014224:	bd80      	pop	{r7, pc}
 8014226:	bf00      	nop
 8014228:	08025130 	.word	0x08025130
 801422c:	080251e0 	.word	0x080251e0
 8014230:	08025174 	.word	0x08025174

08014234 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8014234:	b580      	push	{r7, lr}
 8014236:	b082      	sub	sp, #8
 8014238:	af00      	add	r7, sp, #0
 801423a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	2b00      	cmp	r3, #0
 8014240:	d109      	bne.n	8014256 <tcp_close+0x22>
 8014242:	4b0f      	ldr	r3, [pc, #60]	; (8014280 <tcp_close+0x4c>)
 8014244:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8014248:	490e      	ldr	r1, [pc, #56]	; (8014284 <tcp_close+0x50>)
 801424a:	480f      	ldr	r0, [pc, #60]	; (8014288 <tcp_close+0x54>)
 801424c:	f00a f844 	bl	801e2d8 <printf>
 8014250:	f06f 030f 	mvn.w	r3, #15
 8014254:	e00f      	b.n	8014276 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	7d1b      	ldrb	r3, [r3, #20]
 801425a:	2b01      	cmp	r3, #1
 801425c:	d006      	beq.n	801426c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	8b5b      	ldrh	r3, [r3, #26]
 8014262:	f043 0310 	orr.w	r3, r3, #16
 8014266:	b29a      	uxth	r2, r3
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801426c:	2101      	movs	r1, #1
 801426e:	6878      	ldr	r0, [r7, #4]
 8014270:	f7ff fe94 	bl	8013f9c <tcp_close_shutdown>
 8014274:	4603      	mov	r3, r0
}
 8014276:	4618      	mov	r0, r3
 8014278:	3708      	adds	r7, #8
 801427a:	46bd      	mov	sp, r7
 801427c:	bd80      	pop	{r7, pc}
 801427e:	bf00      	nop
 8014280:	08025130 	.word	0x08025130
 8014284:	08025240 	.word	0x08025240
 8014288:	08025174 	.word	0x08025174

0801428c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801428c:	b580      	push	{r7, lr}
 801428e:	b08e      	sub	sp, #56	; 0x38
 8014290:	af04      	add	r7, sp, #16
 8014292:	6078      	str	r0, [r7, #4]
 8014294:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d107      	bne.n	80142ac <tcp_abandon+0x20>
 801429c:	4b52      	ldr	r3, [pc, #328]	; (80143e8 <tcp_abandon+0x15c>)
 801429e:	f240 223d 	movw	r2, #573	; 0x23d
 80142a2:	4952      	ldr	r1, [pc, #328]	; (80143ec <tcp_abandon+0x160>)
 80142a4:	4852      	ldr	r0, [pc, #328]	; (80143f0 <tcp_abandon+0x164>)
 80142a6:	f00a f817 	bl	801e2d8 <printf>
 80142aa:	e099      	b.n	80143e0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	7d1b      	ldrb	r3, [r3, #20]
 80142b0:	2b01      	cmp	r3, #1
 80142b2:	d106      	bne.n	80142c2 <tcp_abandon+0x36>
 80142b4:	4b4c      	ldr	r3, [pc, #304]	; (80143e8 <tcp_abandon+0x15c>)
 80142b6:	f44f 7210 	mov.w	r2, #576	; 0x240
 80142ba:	494e      	ldr	r1, [pc, #312]	; (80143f4 <tcp_abandon+0x168>)
 80142bc:	484c      	ldr	r0, [pc, #304]	; (80143f0 <tcp_abandon+0x164>)
 80142be:	f00a f80b 	bl	801e2d8 <printf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	7d1b      	ldrb	r3, [r3, #20]
 80142c6:	2b0a      	cmp	r3, #10
 80142c8:	d107      	bne.n	80142da <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80142ca:	6879      	ldr	r1, [r7, #4]
 80142cc:	484a      	ldr	r0, [pc, #296]	; (80143f8 <tcp_abandon+0x16c>)
 80142ce:	f000 ffc3 	bl	8015258 <tcp_pcb_remove>
    tcp_free(pcb);
 80142d2:	6878      	ldr	r0, [r7, #4]
 80142d4:	f7ff fdb0 	bl	8013e38 <tcp_free>
 80142d8:	e082      	b.n	80143e0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80142da:	2300      	movs	r3, #0
 80142dc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80142de:	2300      	movs	r3, #0
 80142e0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80142e6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142ec:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80142f4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	691b      	ldr	r3, [r3, #16]
 80142fa:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	7d1b      	ldrb	r3, [r3, #20]
 8014300:	2b00      	cmp	r3, #0
 8014302:	d126      	bne.n	8014352 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	8adb      	ldrh	r3, [r3, #22]
 8014308:	2b00      	cmp	r3, #0
 801430a:	d02e      	beq.n	801436a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801430c:	4b3b      	ldr	r3, [pc, #236]	; (80143fc <tcp_abandon+0x170>)
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	687a      	ldr	r2, [r7, #4]
 8014312:	429a      	cmp	r2, r3
 8014314:	d105      	bne.n	8014322 <tcp_abandon+0x96>
 8014316:	4b39      	ldr	r3, [pc, #228]	; (80143fc <tcp_abandon+0x170>)
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	68db      	ldr	r3, [r3, #12]
 801431c:	4a37      	ldr	r2, [pc, #220]	; (80143fc <tcp_abandon+0x170>)
 801431e:	6013      	str	r3, [r2, #0]
 8014320:	e013      	b.n	801434a <tcp_abandon+0xbe>
 8014322:	4b36      	ldr	r3, [pc, #216]	; (80143fc <tcp_abandon+0x170>)
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	61fb      	str	r3, [r7, #28]
 8014328:	e00c      	b.n	8014344 <tcp_abandon+0xb8>
 801432a:	69fb      	ldr	r3, [r7, #28]
 801432c:	68db      	ldr	r3, [r3, #12]
 801432e:	687a      	ldr	r2, [r7, #4]
 8014330:	429a      	cmp	r2, r3
 8014332:	d104      	bne.n	801433e <tcp_abandon+0xb2>
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	68da      	ldr	r2, [r3, #12]
 8014338:	69fb      	ldr	r3, [r7, #28]
 801433a:	60da      	str	r2, [r3, #12]
 801433c:	e005      	b.n	801434a <tcp_abandon+0xbe>
 801433e:	69fb      	ldr	r3, [r7, #28]
 8014340:	68db      	ldr	r3, [r3, #12]
 8014342:	61fb      	str	r3, [r7, #28]
 8014344:	69fb      	ldr	r3, [r7, #28]
 8014346:	2b00      	cmp	r3, #0
 8014348:	d1ef      	bne.n	801432a <tcp_abandon+0x9e>
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	2200      	movs	r2, #0
 801434e:	60da      	str	r2, [r3, #12]
 8014350:	e00b      	b.n	801436a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8014352:	683b      	ldr	r3, [r7, #0]
 8014354:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	8adb      	ldrh	r3, [r3, #22]
 801435a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801435c:	6879      	ldr	r1, [r7, #4]
 801435e:	4828      	ldr	r0, [pc, #160]	; (8014400 <tcp_abandon+0x174>)
 8014360:	f000 ff7a 	bl	8015258 <tcp_pcb_remove>
 8014364:	4b27      	ldr	r3, [pc, #156]	; (8014404 <tcp_abandon+0x178>)
 8014366:	2201      	movs	r2, #1
 8014368:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801436e:	2b00      	cmp	r3, #0
 8014370:	d004      	beq.n	801437c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014376:	4618      	mov	r0, r3
 8014378:	f000 fd1c 	bl	8014db4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014380:	2b00      	cmp	r3, #0
 8014382:	d004      	beq.n	801438e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014388:	4618      	mov	r0, r3
 801438a:	f000 fd13 	bl	8014db4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014392:	2b00      	cmp	r3, #0
 8014394:	d004      	beq.n	80143a0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801439a:	4618      	mov	r0, r3
 801439c:	f000 fd0a 	bl	8014db4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80143a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d00e      	beq.n	80143c4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80143a6:	6879      	ldr	r1, [r7, #4]
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	3304      	adds	r3, #4
 80143ac:	687a      	ldr	r2, [r7, #4]
 80143ae:	8b12      	ldrh	r2, [r2, #24]
 80143b0:	9202      	str	r2, [sp, #8]
 80143b2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80143b4:	9201      	str	r2, [sp, #4]
 80143b6:	9300      	str	r3, [sp, #0]
 80143b8:	460b      	mov	r3, r1
 80143ba:	697a      	ldr	r2, [r7, #20]
 80143bc:	69b9      	ldr	r1, [r7, #24]
 80143be:	6878      	ldr	r0, [r7, #4]
 80143c0:	f004 fcc2 	bl	8018d48 <tcp_rst>
    }
    last_state = pcb->state;
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	7d1b      	ldrb	r3, [r3, #20]
 80143c8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80143ca:	6878      	ldr	r0, [r7, #4]
 80143cc:	f7ff fd34 	bl	8013e38 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80143d0:	693b      	ldr	r3, [r7, #16]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d004      	beq.n	80143e0 <tcp_abandon+0x154>
 80143d6:	693b      	ldr	r3, [r7, #16]
 80143d8:	f06f 010c 	mvn.w	r1, #12
 80143dc:	68f8      	ldr	r0, [r7, #12]
 80143de:	4798      	blx	r3
  }
}
 80143e0:	3728      	adds	r7, #40	; 0x28
 80143e2:	46bd      	mov	sp, r7
 80143e4:	bd80      	pop	{r7, pc}
 80143e6:	bf00      	nop
 80143e8:	08025130 	.word	0x08025130
 80143ec:	08025274 	.word	0x08025274
 80143f0:	08025174 	.word	0x08025174
 80143f4:	08025290 	.word	0x08025290
 80143f8:	2000c1c4 	.word	0x2000c1c4
 80143fc:	2000c1b8 	.word	0x2000c1b8
 8014400:	2000c1c0 	.word	0x2000c1c0
 8014404:	2000c1c8 	.word	0x2000c1c8

08014408 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8014408:	b580      	push	{r7, lr}
 801440a:	b082      	sub	sp, #8
 801440c:	af00      	add	r7, sp, #0
 801440e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8014410:	2101      	movs	r1, #1
 8014412:	6878      	ldr	r0, [r7, #4]
 8014414:	f7ff ff3a 	bl	801428c <tcp_abandon>
}
 8014418:	bf00      	nop
 801441a:	3708      	adds	r7, #8
 801441c:	46bd      	mov	sp, r7
 801441e:	bd80      	pop	{r7, pc}

08014420 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8014420:	b580      	push	{r7, lr}
 8014422:	b084      	sub	sp, #16
 8014424:	af00      	add	r7, sp, #0
 8014426:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	2b00      	cmp	r3, #0
 801442c:	d106      	bne.n	801443c <tcp_update_rcv_ann_wnd+0x1c>
 801442e:	4b25      	ldr	r3, [pc, #148]	; (80144c4 <tcp_update_rcv_ann_wnd+0xa4>)
 8014430:	f240 32a6 	movw	r2, #934	; 0x3a6
 8014434:	4924      	ldr	r1, [pc, #144]	; (80144c8 <tcp_update_rcv_ann_wnd+0xa8>)
 8014436:	4825      	ldr	r0, [pc, #148]	; (80144cc <tcp_update_rcv_ann_wnd+0xac>)
 8014438:	f009 ff4e 	bl	801e2d8 <printf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014440:	687a      	ldr	r2, [r7, #4]
 8014442:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8014444:	4413      	add	r3, r2
 8014446:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801444c:	687a      	ldr	r2, [r7, #4]
 801444e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8014450:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8014454:	bf28      	it	cs
 8014456:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 801445a:	b292      	uxth	r2, r2
 801445c:	4413      	add	r3, r2
 801445e:	68fa      	ldr	r2, [r7, #12]
 8014460:	1ad3      	subs	r3, r2, r3
 8014462:	2b00      	cmp	r3, #0
 8014464:	db08      	blt.n	8014478 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014472:	68fa      	ldr	r2, [r7, #12]
 8014474:	1ad3      	subs	r3, r2, r3
 8014476:	e020      	b.n	80144ba <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014480:	1ad3      	subs	r3, r2, r3
 8014482:	2b00      	cmp	r3, #0
 8014484:	dd03      	ble.n	801448e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	2200      	movs	r2, #0
 801448a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801448c:	e014      	b.n	80144b8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014496:	1ad3      	subs	r3, r2, r3
 8014498:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801449a:	68bb      	ldr	r3, [r7, #8]
 801449c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80144a0:	d306      	bcc.n	80144b0 <tcp_update_rcv_ann_wnd+0x90>
 80144a2:	4b08      	ldr	r3, [pc, #32]	; (80144c4 <tcp_update_rcv_ann_wnd+0xa4>)
 80144a4:	f240 32b6 	movw	r2, #950	; 0x3b6
 80144a8:	4909      	ldr	r1, [pc, #36]	; (80144d0 <tcp_update_rcv_ann_wnd+0xb0>)
 80144aa:	4808      	ldr	r0, [pc, #32]	; (80144cc <tcp_update_rcv_ann_wnd+0xac>)
 80144ac:	f009 ff14 	bl	801e2d8 <printf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80144b0:	68bb      	ldr	r3, [r7, #8]
 80144b2:	b29a      	uxth	r2, r3
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80144b8:	2300      	movs	r3, #0
  }
}
 80144ba:	4618      	mov	r0, r3
 80144bc:	3710      	adds	r7, #16
 80144be:	46bd      	mov	sp, r7
 80144c0:	bd80      	pop	{r7, pc}
 80144c2:	bf00      	nop
 80144c4:	08025130 	.word	0x08025130
 80144c8:	0802538c 	.word	0x0802538c
 80144cc:	08025174 	.word	0x08025174
 80144d0:	080253b0 	.word	0x080253b0

080144d4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80144d4:	b580      	push	{r7, lr}
 80144d6:	b084      	sub	sp, #16
 80144d8:	af00      	add	r7, sp, #0
 80144da:	6078      	str	r0, [r7, #4]
 80144dc:	460b      	mov	r3, r1
 80144de:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d107      	bne.n	80144f6 <tcp_recved+0x22>
 80144e6:	4b1f      	ldr	r3, [pc, #124]	; (8014564 <tcp_recved+0x90>)
 80144e8:	f240 32cf 	movw	r2, #975	; 0x3cf
 80144ec:	491e      	ldr	r1, [pc, #120]	; (8014568 <tcp_recved+0x94>)
 80144ee:	481f      	ldr	r0, [pc, #124]	; (801456c <tcp_recved+0x98>)
 80144f0:	f009 fef2 	bl	801e2d8 <printf>
 80144f4:	e032      	b.n	801455c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	7d1b      	ldrb	r3, [r3, #20]
 80144fa:	2b01      	cmp	r3, #1
 80144fc:	d106      	bne.n	801450c <tcp_recved+0x38>
 80144fe:	4b19      	ldr	r3, [pc, #100]	; (8014564 <tcp_recved+0x90>)
 8014500:	f240 32d2 	movw	r2, #978	; 0x3d2
 8014504:	491a      	ldr	r1, [pc, #104]	; (8014570 <tcp_recved+0x9c>)
 8014506:	4819      	ldr	r0, [pc, #100]	; (801456c <tcp_recved+0x98>)
 8014508:	f009 fee6 	bl	801e2d8 <printf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014510:	887b      	ldrh	r3, [r7, #2]
 8014512:	4413      	add	r3, r2
 8014514:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8014516:	89fb      	ldrh	r3, [r7, #14]
 8014518:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801451c:	d804      	bhi.n	8014528 <tcp_recved+0x54>
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014522:	89fa      	ldrh	r2, [r7, #14]
 8014524:	429a      	cmp	r2, r3
 8014526:	d204      	bcs.n	8014532 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801452e:	851a      	strh	r2, [r3, #40]	; 0x28
 8014530:	e002      	b.n	8014538 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	89fa      	ldrh	r2, [r7, #14]
 8014536:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8014538:	6878      	ldr	r0, [r7, #4]
 801453a:	f7ff ff71 	bl	8014420 <tcp_update_rcv_ann_wnd>
 801453e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8014540:	68bb      	ldr	r3, [r7, #8]
 8014542:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8014546:	d309      	bcc.n	801455c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	8b5b      	ldrh	r3, [r3, #26]
 801454c:	f043 0302 	orr.w	r3, r3, #2
 8014550:	b29a      	uxth	r2, r3
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014556:	6878      	ldr	r0, [r7, #4]
 8014558:	f003 fe42 	bl	80181e0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801455c:	3710      	adds	r7, #16
 801455e:	46bd      	mov	sp, r7
 8014560:	bd80      	pop	{r7, pc}
 8014562:	bf00      	nop
 8014564:	08025130 	.word	0x08025130
 8014568:	080253cc 	.word	0x080253cc
 801456c:	08025174 	.word	0x08025174
 8014570:	080253e4 	.word	0x080253e4

08014574 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8014574:	b5b0      	push	{r4, r5, r7, lr}
 8014576:	b090      	sub	sp, #64	; 0x40
 8014578:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801457a:	2300      	movs	r3, #0
 801457c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8014580:	4b94      	ldr	r3, [pc, #592]	; (80147d4 <tcp_slowtmr+0x260>)
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	3301      	adds	r3, #1
 8014586:	4a93      	ldr	r2, [pc, #588]	; (80147d4 <tcp_slowtmr+0x260>)
 8014588:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801458a:	4b93      	ldr	r3, [pc, #588]	; (80147d8 <tcp_slowtmr+0x264>)
 801458c:	781b      	ldrb	r3, [r3, #0]
 801458e:	3301      	adds	r3, #1
 8014590:	b2da      	uxtb	r2, r3
 8014592:	4b91      	ldr	r3, [pc, #580]	; (80147d8 <tcp_slowtmr+0x264>)
 8014594:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8014596:	2300      	movs	r3, #0
 8014598:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801459a:	4b90      	ldr	r3, [pc, #576]	; (80147dc <tcp_slowtmr+0x268>)
 801459c:	681b      	ldr	r3, [r3, #0]
 801459e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80145a0:	e29f      	b.n	8014ae2 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80145a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145a4:	7d1b      	ldrb	r3, [r3, #20]
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d106      	bne.n	80145b8 <tcp_slowtmr+0x44>
 80145aa:	4b8d      	ldr	r3, [pc, #564]	; (80147e0 <tcp_slowtmr+0x26c>)
 80145ac:	f240 42be 	movw	r2, #1214	; 0x4be
 80145b0:	498c      	ldr	r1, [pc, #560]	; (80147e4 <tcp_slowtmr+0x270>)
 80145b2:	488d      	ldr	r0, [pc, #564]	; (80147e8 <tcp_slowtmr+0x274>)
 80145b4:	f009 fe90 	bl	801e2d8 <printf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80145b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145ba:	7d1b      	ldrb	r3, [r3, #20]
 80145bc:	2b01      	cmp	r3, #1
 80145be:	d106      	bne.n	80145ce <tcp_slowtmr+0x5a>
 80145c0:	4b87      	ldr	r3, [pc, #540]	; (80147e0 <tcp_slowtmr+0x26c>)
 80145c2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80145c6:	4989      	ldr	r1, [pc, #548]	; (80147ec <tcp_slowtmr+0x278>)
 80145c8:	4887      	ldr	r0, [pc, #540]	; (80147e8 <tcp_slowtmr+0x274>)
 80145ca:	f009 fe85 	bl	801e2d8 <printf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80145ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145d0:	7d1b      	ldrb	r3, [r3, #20]
 80145d2:	2b0a      	cmp	r3, #10
 80145d4:	d106      	bne.n	80145e4 <tcp_slowtmr+0x70>
 80145d6:	4b82      	ldr	r3, [pc, #520]	; (80147e0 <tcp_slowtmr+0x26c>)
 80145d8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80145dc:	4984      	ldr	r1, [pc, #528]	; (80147f0 <tcp_slowtmr+0x27c>)
 80145de:	4882      	ldr	r0, [pc, #520]	; (80147e8 <tcp_slowtmr+0x274>)
 80145e0:	f009 fe7a 	bl	801e2d8 <printf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80145e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145e6:	7f9a      	ldrb	r2, [r3, #30]
 80145e8:	4b7b      	ldr	r3, [pc, #492]	; (80147d8 <tcp_slowtmr+0x264>)
 80145ea:	781b      	ldrb	r3, [r3, #0]
 80145ec:	429a      	cmp	r2, r3
 80145ee:	d105      	bne.n	80145fc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80145f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145f2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80145f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145f6:	68db      	ldr	r3, [r3, #12]
 80145f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80145fa:	e272      	b.n	8014ae2 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80145fc:	4b76      	ldr	r3, [pc, #472]	; (80147d8 <tcp_slowtmr+0x264>)
 80145fe:	781a      	ldrb	r2, [r3, #0]
 8014600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014602:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8014604:	2300      	movs	r3, #0
 8014606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 801460a:	2300      	movs	r3, #0
 801460c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8014610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014612:	7d1b      	ldrb	r3, [r3, #20]
 8014614:	2b02      	cmp	r3, #2
 8014616:	d10a      	bne.n	801462e <tcp_slowtmr+0xba>
 8014618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801461a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801461e:	2b05      	cmp	r3, #5
 8014620:	d905      	bls.n	801462e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8014622:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014626:	3301      	adds	r3, #1
 8014628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801462c:	e11e      	b.n	801486c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801462e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014630:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014634:	2b0b      	cmp	r3, #11
 8014636:	d905      	bls.n	8014644 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8014638:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801463c:	3301      	adds	r3, #1
 801463e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014642:	e113      	b.n	801486c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8014644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014646:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801464a:	2b00      	cmp	r3, #0
 801464c:	d075      	beq.n	801473a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801464e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014652:	2b00      	cmp	r3, #0
 8014654:	d006      	beq.n	8014664 <tcp_slowtmr+0xf0>
 8014656:	4b62      	ldr	r3, [pc, #392]	; (80147e0 <tcp_slowtmr+0x26c>)
 8014658:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801465c:	4965      	ldr	r1, [pc, #404]	; (80147f4 <tcp_slowtmr+0x280>)
 801465e:	4862      	ldr	r0, [pc, #392]	; (80147e8 <tcp_slowtmr+0x274>)
 8014660:	f009 fe3a 	bl	801e2d8 <printf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8014664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014668:	2b00      	cmp	r3, #0
 801466a:	d106      	bne.n	801467a <tcp_slowtmr+0x106>
 801466c:	4b5c      	ldr	r3, [pc, #368]	; (80147e0 <tcp_slowtmr+0x26c>)
 801466e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8014672:	4961      	ldr	r1, [pc, #388]	; (80147f8 <tcp_slowtmr+0x284>)
 8014674:	485c      	ldr	r0, [pc, #368]	; (80147e8 <tcp_slowtmr+0x274>)
 8014676:	f009 fe2f 	bl	801e2d8 <printf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801467a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801467c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014680:	2b0b      	cmp	r3, #11
 8014682:	d905      	bls.n	8014690 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8014684:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014688:	3301      	adds	r3, #1
 801468a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801468e:	e0ed      	b.n	801486c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8014690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014692:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014696:	3b01      	subs	r3, #1
 8014698:	4a58      	ldr	r2, [pc, #352]	; (80147fc <tcp_slowtmr+0x288>)
 801469a:	5cd3      	ldrb	r3, [r2, r3]
 801469c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801469e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146a0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80146a4:	7c7a      	ldrb	r2, [r7, #17]
 80146a6:	429a      	cmp	r2, r3
 80146a8:	d907      	bls.n	80146ba <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80146aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146ac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80146b0:	3301      	adds	r3, #1
 80146b2:	b2da      	uxtb	r2, r3
 80146b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146b6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80146ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146bc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80146c0:	7c7a      	ldrb	r2, [r7, #17]
 80146c2:	429a      	cmp	r2, r3
 80146c4:	f200 80d2 	bhi.w	801486c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80146c8:	2301      	movs	r3, #1
 80146ca:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80146cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d108      	bne.n	80146e8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80146d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80146d8:	f004 fc2a 	bl	8018f30 <tcp_zero_window_probe>
 80146dc:	4603      	mov	r3, r0
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d014      	beq.n	801470c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80146e2:	2300      	movs	r3, #0
 80146e4:	623b      	str	r3, [r7, #32]
 80146e6:	e011      	b.n	801470c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80146e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80146ee:	4619      	mov	r1, r3
 80146f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80146f2:	f003 faef 	bl	8017cd4 <tcp_split_unsent_seg>
 80146f6:	4603      	mov	r3, r0
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d107      	bne.n	801470c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80146fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80146fe:	f003 fd6f 	bl	80181e0 <tcp_output>
 8014702:	4603      	mov	r3, r0
 8014704:	2b00      	cmp	r3, #0
 8014706:	d101      	bne.n	801470c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8014708:	2300      	movs	r3, #0
 801470a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 801470c:	6a3b      	ldr	r3, [r7, #32]
 801470e:	2b00      	cmp	r3, #0
 8014710:	f000 80ac 	beq.w	801486c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8014714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014716:	2200      	movs	r2, #0
 8014718:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801471c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801471e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014722:	2b06      	cmp	r3, #6
 8014724:	f200 80a2 	bhi.w	801486c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8014728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801472a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801472e:	3301      	adds	r3, #1
 8014730:	b2da      	uxtb	r2, r3
 8014732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014734:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8014738:	e098      	b.n	801486c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801473a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801473c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014740:	2b00      	cmp	r3, #0
 8014742:	db0f      	blt.n	8014764 <tcp_slowtmr+0x1f0>
 8014744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014746:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801474a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801474e:	4293      	cmp	r3, r2
 8014750:	d008      	beq.n	8014764 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8014752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014754:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014758:	b29b      	uxth	r3, r3
 801475a:	3301      	adds	r3, #1
 801475c:	b29b      	uxth	r3, r3
 801475e:	b21a      	sxth	r2, r3
 8014760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014762:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8014764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014766:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801476a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801476c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8014770:	429a      	cmp	r2, r3
 8014772:	db7b      	blt.n	801486c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8014774:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014776:	f004 f825 	bl	80187c4 <tcp_rexmit_rto_prepare>
 801477a:	4603      	mov	r3, r0
 801477c:	2b00      	cmp	r3, #0
 801477e:	d007      	beq.n	8014790 <tcp_slowtmr+0x21c>
 8014780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014784:	2b00      	cmp	r3, #0
 8014786:	d171      	bne.n	801486c <tcp_slowtmr+0x2f8>
 8014788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801478a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801478c:	2b00      	cmp	r3, #0
 801478e:	d06d      	beq.n	801486c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8014790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014792:	7d1b      	ldrb	r3, [r3, #20]
 8014794:	2b02      	cmp	r3, #2
 8014796:	d03a      	beq.n	801480e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8014798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801479a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801479e:	2b0c      	cmp	r3, #12
 80147a0:	bf28      	it	cs
 80147a2:	230c      	movcs	r3, #12
 80147a4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80147a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80147ac:	10db      	asrs	r3, r3, #3
 80147ae:	b21b      	sxth	r3, r3
 80147b0:	461a      	mov	r2, r3
 80147b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147b4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80147b8:	4413      	add	r3, r2
 80147ba:	7efa      	ldrb	r2, [r7, #27]
 80147bc:	4910      	ldr	r1, [pc, #64]	; (8014800 <tcp_slowtmr+0x28c>)
 80147be:	5c8a      	ldrb	r2, [r1, r2]
 80147c0:	4093      	lsls	r3, r2
 80147c2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80147c4:	697b      	ldr	r3, [r7, #20]
 80147c6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80147ca:	4293      	cmp	r3, r2
 80147cc:	dc1a      	bgt.n	8014804 <tcp_slowtmr+0x290>
 80147ce:	697b      	ldr	r3, [r7, #20]
 80147d0:	b21a      	sxth	r2, r3
 80147d2:	e019      	b.n	8014808 <tcp_slowtmr+0x294>
 80147d4:	2000c1b4 	.word	0x2000c1b4
 80147d8:	2000c1ca 	.word	0x2000c1ca
 80147dc:	2000c1c0 	.word	0x2000c1c0
 80147e0:	08025130 	.word	0x08025130
 80147e4:	08025474 	.word	0x08025474
 80147e8:	08025174 	.word	0x08025174
 80147ec:	080254a0 	.word	0x080254a0
 80147f0:	080254cc 	.word	0x080254cc
 80147f4:	080254fc 	.word	0x080254fc
 80147f8:	08025530 	.word	0x08025530
 80147fc:	0806f60c 	.word	0x0806f60c
 8014800:	0806f5fc 	.word	0x0806f5fc
 8014804:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8014808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801480a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801480e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014810:	2200      	movs	r2, #0
 8014812:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8014814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014816:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801481a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801481c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014820:	4293      	cmp	r3, r2
 8014822:	bf28      	it	cs
 8014824:	4613      	movcs	r3, r2
 8014826:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8014828:	8a7b      	ldrh	r3, [r7, #18]
 801482a:	085b      	lsrs	r3, r3, #1
 801482c:	b29a      	uxth	r2, r3
 801482e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014830:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8014834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014836:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801483a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801483c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801483e:	005b      	lsls	r3, r3, #1
 8014840:	b29b      	uxth	r3, r3
 8014842:	429a      	cmp	r2, r3
 8014844:	d206      	bcs.n	8014854 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8014846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014848:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801484a:	005b      	lsls	r3, r3, #1
 801484c:	b29a      	uxth	r2, r3
 801484e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014850:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8014854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014856:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8014858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801485a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801485e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014860:	2200      	movs	r2, #0
 8014862:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8014866:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014868:	f004 f81c 	bl	80188a4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801486c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801486e:	7d1b      	ldrb	r3, [r3, #20]
 8014870:	2b06      	cmp	r3, #6
 8014872:	d111      	bne.n	8014898 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8014874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014876:	8b5b      	ldrh	r3, [r3, #26]
 8014878:	f003 0310 	and.w	r3, r3, #16
 801487c:	2b00      	cmp	r3, #0
 801487e:	d00b      	beq.n	8014898 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014880:	4b9d      	ldr	r3, [pc, #628]	; (8014af8 <tcp_slowtmr+0x584>)
 8014882:	681a      	ldr	r2, [r3, #0]
 8014884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014886:	6a1b      	ldr	r3, [r3, #32]
 8014888:	1ad3      	subs	r3, r2, r3
 801488a:	2b28      	cmp	r3, #40	; 0x28
 801488c:	d904      	bls.n	8014898 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801488e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014892:	3301      	adds	r3, #1
 8014894:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8014898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801489a:	7a5b      	ldrb	r3, [r3, #9]
 801489c:	f003 0308 	and.w	r3, r3, #8
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d04c      	beq.n	801493e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80148a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148a6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80148a8:	2b04      	cmp	r3, #4
 80148aa:	d003      	beq.n	80148b4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80148ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148ae:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80148b0:	2b07      	cmp	r3, #7
 80148b2:	d144      	bne.n	801493e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80148b4:	4b90      	ldr	r3, [pc, #576]	; (8014af8 <tcp_slowtmr+0x584>)
 80148b6:	681a      	ldr	r2, [r3, #0]
 80148b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148ba:	6a1b      	ldr	r3, [r3, #32]
 80148bc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80148be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80148c4:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80148c8:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80148cc:	498b      	ldr	r1, [pc, #556]	; (8014afc <tcp_slowtmr+0x588>)
 80148ce:	fba1 1303 	umull	r1, r3, r1, r3
 80148d2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80148d4:	429a      	cmp	r2, r3
 80148d6:	d90a      	bls.n	80148ee <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80148d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80148dc:	3301      	adds	r3, #1
 80148de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80148e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80148e6:	3301      	adds	r3, #1
 80148e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80148ec:	e027      	b.n	801493e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80148ee:	4b82      	ldr	r3, [pc, #520]	; (8014af8 <tcp_slowtmr+0x584>)
 80148f0:	681a      	ldr	r2, [r3, #0]
 80148f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148f4:	6a1b      	ldr	r3, [r3, #32]
 80148f6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80148f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148fa:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80148fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014900:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8014904:	4618      	mov	r0, r3
 8014906:	4b7e      	ldr	r3, [pc, #504]	; (8014b00 <tcp_slowtmr+0x58c>)
 8014908:	fb00 f303 	mul.w	r3, r0, r3
 801490c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801490e:	497b      	ldr	r1, [pc, #492]	; (8014afc <tcp_slowtmr+0x588>)
 8014910:	fba1 1303 	umull	r1, r3, r1, r3
 8014914:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014916:	429a      	cmp	r2, r3
 8014918:	d911      	bls.n	801493e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 801491a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801491c:	f004 fac8 	bl	8018eb0 <tcp_keepalive>
 8014920:	4603      	mov	r3, r0
 8014922:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8014926:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801492a:	2b00      	cmp	r3, #0
 801492c:	d107      	bne.n	801493e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801492e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014930:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8014934:	3301      	adds	r3, #1
 8014936:	b2da      	uxtb	r2, r3
 8014938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801493a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801493e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014940:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014942:	2b00      	cmp	r3, #0
 8014944:	d011      	beq.n	801496a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8014946:	4b6c      	ldr	r3, [pc, #432]	; (8014af8 <tcp_slowtmr+0x584>)
 8014948:	681a      	ldr	r2, [r3, #0]
 801494a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801494c:	6a1b      	ldr	r3, [r3, #32]
 801494e:	1ad2      	subs	r2, r2, r3
 8014950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014952:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8014956:	4619      	mov	r1, r3
 8014958:	460b      	mov	r3, r1
 801495a:	005b      	lsls	r3, r3, #1
 801495c:	440b      	add	r3, r1
 801495e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8014960:	429a      	cmp	r2, r3
 8014962:	d302      	bcc.n	801496a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8014964:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014966:	f000 fddb 	bl	8015520 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801496a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801496c:	7d1b      	ldrb	r3, [r3, #20]
 801496e:	2b03      	cmp	r3, #3
 8014970:	d10b      	bne.n	801498a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014972:	4b61      	ldr	r3, [pc, #388]	; (8014af8 <tcp_slowtmr+0x584>)
 8014974:	681a      	ldr	r2, [r3, #0]
 8014976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014978:	6a1b      	ldr	r3, [r3, #32]
 801497a:	1ad3      	subs	r3, r2, r3
 801497c:	2b28      	cmp	r3, #40	; 0x28
 801497e:	d904      	bls.n	801498a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8014980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014984:	3301      	adds	r3, #1
 8014986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801498a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801498c:	7d1b      	ldrb	r3, [r3, #20]
 801498e:	2b09      	cmp	r3, #9
 8014990:	d10b      	bne.n	80149aa <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8014992:	4b59      	ldr	r3, [pc, #356]	; (8014af8 <tcp_slowtmr+0x584>)
 8014994:	681a      	ldr	r2, [r3, #0]
 8014996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014998:	6a1b      	ldr	r3, [r3, #32]
 801499a:	1ad3      	subs	r3, r2, r3
 801499c:	2bf0      	cmp	r3, #240	; 0xf0
 801499e:	d904      	bls.n	80149aa <tcp_slowtmr+0x436>
        ++pcb_remove;
 80149a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80149a4:	3301      	adds	r3, #1
 80149a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80149aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d060      	beq.n	8014a74 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80149b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80149b8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80149ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80149bc:	f000 fbfc 	bl	80151b8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80149c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d010      	beq.n	80149e8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80149c6:	4b4f      	ldr	r3, [pc, #316]	; (8014b04 <tcp_slowtmr+0x590>)
 80149c8:	681b      	ldr	r3, [r3, #0]
 80149ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80149cc:	429a      	cmp	r2, r3
 80149ce:	d106      	bne.n	80149de <tcp_slowtmr+0x46a>
 80149d0:	4b4d      	ldr	r3, [pc, #308]	; (8014b08 <tcp_slowtmr+0x594>)
 80149d2:	f240 526d 	movw	r2, #1389	; 0x56d
 80149d6:	494d      	ldr	r1, [pc, #308]	; (8014b0c <tcp_slowtmr+0x598>)
 80149d8:	484d      	ldr	r0, [pc, #308]	; (8014b10 <tcp_slowtmr+0x59c>)
 80149da:	f009 fc7d 	bl	801e2d8 <printf>
        prev->next = pcb->next;
 80149de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149e0:	68da      	ldr	r2, [r3, #12]
 80149e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149e4:	60da      	str	r2, [r3, #12]
 80149e6:	e00f      	b.n	8014a08 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80149e8:	4b46      	ldr	r3, [pc, #280]	; (8014b04 <tcp_slowtmr+0x590>)
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80149ee:	429a      	cmp	r2, r3
 80149f0:	d006      	beq.n	8014a00 <tcp_slowtmr+0x48c>
 80149f2:	4b45      	ldr	r3, [pc, #276]	; (8014b08 <tcp_slowtmr+0x594>)
 80149f4:	f240 5271 	movw	r2, #1393	; 0x571
 80149f8:	4946      	ldr	r1, [pc, #280]	; (8014b14 <tcp_slowtmr+0x5a0>)
 80149fa:	4845      	ldr	r0, [pc, #276]	; (8014b10 <tcp_slowtmr+0x59c>)
 80149fc:	f009 fc6c 	bl	801e2d8 <printf>
        tcp_active_pcbs = pcb->next;
 8014a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a02:	68db      	ldr	r3, [r3, #12]
 8014a04:	4a3f      	ldr	r2, [pc, #252]	; (8014b04 <tcp_slowtmr+0x590>)
 8014a06:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8014a08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d013      	beq.n	8014a38 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8014a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a12:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8014a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a16:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8014a18:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8014a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a1c:	3304      	adds	r3, #4
 8014a1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014a20:	8ad2      	ldrh	r2, [r2, #22]
 8014a22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014a24:	8b09      	ldrh	r1, [r1, #24]
 8014a26:	9102      	str	r1, [sp, #8]
 8014a28:	9201      	str	r2, [sp, #4]
 8014a2a:	9300      	str	r3, [sp, #0]
 8014a2c:	462b      	mov	r3, r5
 8014a2e:	4622      	mov	r2, r4
 8014a30:	4601      	mov	r1, r0
 8014a32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014a34:	f004 f988 	bl	8018d48 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8014a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a3a:	691b      	ldr	r3, [r3, #16]
 8014a3c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8014a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a40:	7d1b      	ldrb	r3, [r3, #20]
 8014a42:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8014a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a46:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8014a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a4a:	68db      	ldr	r3, [r3, #12]
 8014a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8014a4e:	6838      	ldr	r0, [r7, #0]
 8014a50:	f7ff f9f2 	bl	8013e38 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8014a54:	4b30      	ldr	r3, [pc, #192]	; (8014b18 <tcp_slowtmr+0x5a4>)
 8014a56:	2200      	movs	r2, #0
 8014a58:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d004      	beq.n	8014a6a <tcp_slowtmr+0x4f6>
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	f06f 010c 	mvn.w	r1, #12
 8014a66:	68b8      	ldr	r0, [r7, #8]
 8014a68:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8014a6a:	4b2b      	ldr	r3, [pc, #172]	; (8014b18 <tcp_slowtmr+0x5a4>)
 8014a6c:	781b      	ldrb	r3, [r3, #0]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d037      	beq.n	8014ae2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8014a72:	e590      	b.n	8014596 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8014a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a76:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8014a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a7a:	68db      	ldr	r3, [r3, #12]
 8014a7c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8014a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a80:	7f1b      	ldrb	r3, [r3, #28]
 8014a82:	3301      	adds	r3, #1
 8014a84:	b2da      	uxtb	r2, r3
 8014a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a88:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8014a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a8c:	7f1a      	ldrb	r2, [r3, #28]
 8014a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a90:	7f5b      	ldrb	r3, [r3, #29]
 8014a92:	429a      	cmp	r2, r3
 8014a94:	d325      	bcc.n	8014ae2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8014a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a98:	2200      	movs	r2, #0
 8014a9a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8014a9c:	4b1e      	ldr	r3, [pc, #120]	; (8014b18 <tcp_slowtmr+0x5a4>)
 8014a9e:	2200      	movs	r2, #0
 8014aa0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8014aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014aa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d00b      	beq.n	8014ac4 <tcp_slowtmr+0x550>
 8014aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014aae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014ab2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014ab4:	6912      	ldr	r2, [r2, #16]
 8014ab6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014ab8:	4610      	mov	r0, r2
 8014aba:	4798      	blx	r3
 8014abc:	4603      	mov	r3, r0
 8014abe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8014ac2:	e002      	b.n	8014aca <tcp_slowtmr+0x556>
 8014ac4:	2300      	movs	r3, #0
 8014ac6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8014aca:	4b13      	ldr	r3, [pc, #76]	; (8014b18 <tcp_slowtmr+0x5a4>)
 8014acc:	781b      	ldrb	r3, [r3, #0]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d000      	beq.n	8014ad4 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8014ad2:	e560      	b.n	8014596 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8014ad4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d102      	bne.n	8014ae2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8014adc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014ade:	f003 fb7f 	bl	80181e0 <tcp_output>
  while (pcb != NULL) {
 8014ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	f47f ad5c 	bne.w	80145a2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8014aea:	2300      	movs	r3, #0
 8014aec:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8014aee:	4b0b      	ldr	r3, [pc, #44]	; (8014b1c <tcp_slowtmr+0x5a8>)
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8014af4:	e067      	b.n	8014bc6 <tcp_slowtmr+0x652>
 8014af6:	bf00      	nop
 8014af8:	2000c1b4 	.word	0x2000c1b4
 8014afc:	10624dd3 	.word	0x10624dd3
 8014b00:	000124f8 	.word	0x000124f8
 8014b04:	2000c1c0 	.word	0x2000c1c0
 8014b08:	08025130 	.word	0x08025130
 8014b0c:	08025568 	.word	0x08025568
 8014b10:	08025174 	.word	0x08025174
 8014b14:	08025594 	.word	0x08025594
 8014b18:	2000c1c8 	.word	0x2000c1c8
 8014b1c:	2000c1c4 	.word	0x2000c1c4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8014b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b22:	7d1b      	ldrb	r3, [r3, #20]
 8014b24:	2b0a      	cmp	r3, #10
 8014b26:	d006      	beq.n	8014b36 <tcp_slowtmr+0x5c2>
 8014b28:	4b2b      	ldr	r3, [pc, #172]	; (8014bd8 <tcp_slowtmr+0x664>)
 8014b2a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8014b2e:	492b      	ldr	r1, [pc, #172]	; (8014bdc <tcp_slowtmr+0x668>)
 8014b30:	482b      	ldr	r0, [pc, #172]	; (8014be0 <tcp_slowtmr+0x66c>)
 8014b32:	f009 fbd1 	bl	801e2d8 <printf>
    pcb_remove = 0;
 8014b36:	2300      	movs	r3, #0
 8014b38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8014b3c:	4b29      	ldr	r3, [pc, #164]	; (8014be4 <tcp_slowtmr+0x670>)
 8014b3e:	681a      	ldr	r2, [r3, #0]
 8014b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b42:	6a1b      	ldr	r3, [r3, #32]
 8014b44:	1ad3      	subs	r3, r2, r3
 8014b46:	2bf0      	cmp	r3, #240	; 0xf0
 8014b48:	d904      	bls.n	8014b54 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8014b4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b4e:	3301      	adds	r3, #1
 8014b50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8014b54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d02f      	beq.n	8014bbc <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8014b5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014b5e:	f000 fb2b 	bl	80151b8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8014b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d010      	beq.n	8014b8a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8014b68:	4b1f      	ldr	r3, [pc, #124]	; (8014be8 <tcp_slowtmr+0x674>)
 8014b6a:	681b      	ldr	r3, [r3, #0]
 8014b6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014b6e:	429a      	cmp	r2, r3
 8014b70:	d106      	bne.n	8014b80 <tcp_slowtmr+0x60c>
 8014b72:	4b19      	ldr	r3, [pc, #100]	; (8014bd8 <tcp_slowtmr+0x664>)
 8014b74:	f240 52af 	movw	r2, #1455	; 0x5af
 8014b78:	491c      	ldr	r1, [pc, #112]	; (8014bec <tcp_slowtmr+0x678>)
 8014b7a:	4819      	ldr	r0, [pc, #100]	; (8014be0 <tcp_slowtmr+0x66c>)
 8014b7c:	f009 fbac 	bl	801e2d8 <printf>
        prev->next = pcb->next;
 8014b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b82:	68da      	ldr	r2, [r3, #12]
 8014b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b86:	60da      	str	r2, [r3, #12]
 8014b88:	e00f      	b.n	8014baa <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8014b8a:	4b17      	ldr	r3, [pc, #92]	; (8014be8 <tcp_slowtmr+0x674>)
 8014b8c:	681b      	ldr	r3, [r3, #0]
 8014b8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014b90:	429a      	cmp	r2, r3
 8014b92:	d006      	beq.n	8014ba2 <tcp_slowtmr+0x62e>
 8014b94:	4b10      	ldr	r3, [pc, #64]	; (8014bd8 <tcp_slowtmr+0x664>)
 8014b96:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8014b9a:	4915      	ldr	r1, [pc, #84]	; (8014bf0 <tcp_slowtmr+0x67c>)
 8014b9c:	4810      	ldr	r0, [pc, #64]	; (8014be0 <tcp_slowtmr+0x66c>)
 8014b9e:	f009 fb9b 	bl	801e2d8 <printf>
        tcp_tw_pcbs = pcb->next;
 8014ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ba4:	68db      	ldr	r3, [r3, #12]
 8014ba6:	4a10      	ldr	r2, [pc, #64]	; (8014be8 <tcp_slowtmr+0x674>)
 8014ba8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8014baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bac:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8014bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bb0:	68db      	ldr	r3, [r3, #12]
 8014bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8014bb4:	69f8      	ldr	r0, [r7, #28]
 8014bb6:	f7ff f93f 	bl	8013e38 <tcp_free>
 8014bba:	e004      	b.n	8014bc6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8014bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bbe:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8014bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bc2:	68db      	ldr	r3, [r3, #12]
 8014bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8014bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d1a9      	bne.n	8014b20 <tcp_slowtmr+0x5ac>
    }
  }
}
 8014bcc:	bf00      	nop
 8014bce:	bf00      	nop
 8014bd0:	3730      	adds	r7, #48	; 0x30
 8014bd2:	46bd      	mov	sp, r7
 8014bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8014bd6:	bf00      	nop
 8014bd8:	08025130 	.word	0x08025130
 8014bdc:	080255c0 	.word	0x080255c0
 8014be0:	08025174 	.word	0x08025174
 8014be4:	2000c1b4 	.word	0x2000c1b4
 8014be8:	2000c1c4 	.word	0x2000c1c4
 8014bec:	080255f0 	.word	0x080255f0
 8014bf0:	08025618 	.word	0x08025618

08014bf4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8014bf4:	b580      	push	{r7, lr}
 8014bf6:	b082      	sub	sp, #8
 8014bf8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8014bfa:	4b2d      	ldr	r3, [pc, #180]	; (8014cb0 <tcp_fasttmr+0xbc>)
 8014bfc:	781b      	ldrb	r3, [r3, #0]
 8014bfe:	3301      	adds	r3, #1
 8014c00:	b2da      	uxtb	r2, r3
 8014c02:	4b2b      	ldr	r3, [pc, #172]	; (8014cb0 <tcp_fasttmr+0xbc>)
 8014c04:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8014c06:	4b2b      	ldr	r3, [pc, #172]	; (8014cb4 <tcp_fasttmr+0xc0>)
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8014c0c:	e048      	b.n	8014ca0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	7f9a      	ldrb	r2, [r3, #30]
 8014c12:	4b27      	ldr	r3, [pc, #156]	; (8014cb0 <tcp_fasttmr+0xbc>)
 8014c14:	781b      	ldrb	r3, [r3, #0]
 8014c16:	429a      	cmp	r2, r3
 8014c18:	d03f      	beq.n	8014c9a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8014c1a:	4b25      	ldr	r3, [pc, #148]	; (8014cb0 <tcp_fasttmr+0xbc>)
 8014c1c:	781a      	ldrb	r2, [r3, #0]
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	8b5b      	ldrh	r3, [r3, #26]
 8014c26:	f003 0301 	and.w	r3, r3, #1
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d010      	beq.n	8014c50 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	8b5b      	ldrh	r3, [r3, #26]
 8014c32:	f043 0302 	orr.w	r3, r3, #2
 8014c36:	b29a      	uxth	r2, r3
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8014c3c:	6878      	ldr	r0, [r7, #4]
 8014c3e:	f003 facf 	bl	80181e0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	8b5b      	ldrh	r3, [r3, #26]
 8014c46:	f023 0303 	bic.w	r3, r3, #3
 8014c4a:	b29a      	uxth	r2, r3
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	8b5b      	ldrh	r3, [r3, #26]
 8014c54:	f003 0308 	and.w	r3, r3, #8
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d009      	beq.n	8014c70 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	8b5b      	ldrh	r3, [r3, #26]
 8014c60:	f023 0308 	bic.w	r3, r3, #8
 8014c64:	b29a      	uxth	r2, r3
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8014c6a:	6878      	ldr	r0, [r7, #4]
 8014c6c:	f7ff fa78 	bl	8014160 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	68db      	ldr	r3, [r3, #12]
 8014c74:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d00a      	beq.n	8014c94 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8014c7e:	4b0e      	ldr	r3, [pc, #56]	; (8014cb8 <tcp_fasttmr+0xc4>)
 8014c80:	2200      	movs	r2, #0
 8014c82:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8014c84:	6878      	ldr	r0, [r7, #4]
 8014c86:	f000 f819 	bl	8014cbc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8014c8a:	4b0b      	ldr	r3, [pc, #44]	; (8014cb8 <tcp_fasttmr+0xc4>)
 8014c8c:	781b      	ldrb	r3, [r3, #0]
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d000      	beq.n	8014c94 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8014c92:	e7b8      	b.n	8014c06 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8014c94:	683b      	ldr	r3, [r7, #0]
 8014c96:	607b      	str	r3, [r7, #4]
 8014c98:	e002      	b.n	8014ca0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	68db      	ldr	r3, [r3, #12]
 8014c9e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d1b3      	bne.n	8014c0e <tcp_fasttmr+0x1a>
    }
  }
}
 8014ca6:	bf00      	nop
 8014ca8:	bf00      	nop
 8014caa:	3708      	adds	r7, #8
 8014cac:	46bd      	mov	sp, r7
 8014cae:	bd80      	pop	{r7, pc}
 8014cb0:	2000c1ca 	.word	0x2000c1ca
 8014cb4:	2000c1c0 	.word	0x2000c1c0
 8014cb8:	2000c1c8 	.word	0x2000c1c8

08014cbc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8014cbc:	b590      	push	{r4, r7, lr}
 8014cbe:	b085      	sub	sp, #20
 8014cc0:	af00      	add	r7, sp, #0
 8014cc2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d109      	bne.n	8014cde <tcp_process_refused_data+0x22>
 8014cca:	4b37      	ldr	r3, [pc, #220]	; (8014da8 <tcp_process_refused_data+0xec>)
 8014ccc:	f240 6209 	movw	r2, #1545	; 0x609
 8014cd0:	4936      	ldr	r1, [pc, #216]	; (8014dac <tcp_process_refused_data+0xf0>)
 8014cd2:	4837      	ldr	r0, [pc, #220]	; (8014db0 <tcp_process_refused_data+0xf4>)
 8014cd4:	f009 fb00 	bl	801e2d8 <printf>
 8014cd8:	f06f 030f 	mvn.w	r3, #15
 8014cdc:	e060      	b.n	8014da0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014ce2:	7b5b      	ldrb	r3, [r3, #13]
 8014ce4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014cea:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	2200      	movs	r2, #0
 8014cf0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d00b      	beq.n	8014d14 <tcp_process_refused_data+0x58>
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	6918      	ldr	r0, [r3, #16]
 8014d06:	2300      	movs	r3, #0
 8014d08:	68ba      	ldr	r2, [r7, #8]
 8014d0a:	6879      	ldr	r1, [r7, #4]
 8014d0c:	47a0      	blx	r4
 8014d0e:	4603      	mov	r3, r0
 8014d10:	73fb      	strb	r3, [r7, #15]
 8014d12:	e007      	b.n	8014d24 <tcp_process_refused_data+0x68>
 8014d14:	2300      	movs	r3, #0
 8014d16:	68ba      	ldr	r2, [r7, #8]
 8014d18:	6879      	ldr	r1, [r7, #4]
 8014d1a:	2000      	movs	r0, #0
 8014d1c:	f000 f8a4 	bl	8014e68 <tcp_recv_null>
 8014d20:	4603      	mov	r3, r0
 8014d22:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8014d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d12a      	bne.n	8014d82 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8014d2c:	7bbb      	ldrb	r3, [r7, #14]
 8014d2e:	f003 0320 	and.w	r3, r3, #32
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d033      	beq.n	8014d9e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014d3a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8014d3e:	d005      	beq.n	8014d4c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014d44:	3301      	adds	r3, #1
 8014d46:	b29a      	uxth	r2, r3
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d00b      	beq.n	8014d6e <tcp_process_refused_data+0xb2>
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	6918      	ldr	r0, [r3, #16]
 8014d60:	2300      	movs	r3, #0
 8014d62:	2200      	movs	r2, #0
 8014d64:	6879      	ldr	r1, [r7, #4]
 8014d66:	47a0      	blx	r4
 8014d68:	4603      	mov	r3, r0
 8014d6a:	73fb      	strb	r3, [r7, #15]
 8014d6c:	e001      	b.n	8014d72 <tcp_process_refused_data+0xb6>
 8014d6e:	2300      	movs	r3, #0
 8014d70:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8014d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d76:	f113 0f0d 	cmn.w	r3, #13
 8014d7a:	d110      	bne.n	8014d9e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8014d7c:	f06f 030c 	mvn.w	r3, #12
 8014d80:	e00e      	b.n	8014da0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8014d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d86:	f113 0f0d 	cmn.w	r3, #13
 8014d8a:	d102      	bne.n	8014d92 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8014d8c:	f06f 030c 	mvn.w	r3, #12
 8014d90:	e006      	b.n	8014da0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	68ba      	ldr	r2, [r7, #8]
 8014d96:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8014d98:	f06f 0304 	mvn.w	r3, #4
 8014d9c:	e000      	b.n	8014da0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8014d9e:	2300      	movs	r3, #0
}
 8014da0:	4618      	mov	r0, r3
 8014da2:	3714      	adds	r7, #20
 8014da4:	46bd      	mov	sp, r7
 8014da6:	bd90      	pop	{r4, r7, pc}
 8014da8:	08025130 	.word	0x08025130
 8014dac:	08025640 	.word	0x08025640
 8014db0:	08025174 	.word	0x08025174

08014db4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8014db4:	b580      	push	{r7, lr}
 8014db6:	b084      	sub	sp, #16
 8014db8:	af00      	add	r7, sp, #0
 8014dba:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8014dbc:	e007      	b.n	8014dce <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8014dc4:	6878      	ldr	r0, [r7, #4]
 8014dc6:	f000 f80a 	bl	8014dde <tcp_seg_free>
    seg = next;
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d1f4      	bne.n	8014dbe <tcp_segs_free+0xa>
  }
}
 8014dd4:	bf00      	nop
 8014dd6:	bf00      	nop
 8014dd8:	3710      	adds	r7, #16
 8014dda:	46bd      	mov	sp, r7
 8014ddc:	bd80      	pop	{r7, pc}

08014dde <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8014dde:	b580      	push	{r7, lr}
 8014de0:	b082      	sub	sp, #8
 8014de2:	af00      	add	r7, sp, #0
 8014de4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d00c      	beq.n	8014e06 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	685b      	ldr	r3, [r3, #4]
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d004      	beq.n	8014dfe <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	685b      	ldr	r3, [r3, #4]
 8014df8:	4618      	mov	r0, r3
 8014dfa:	f7fe fd61 	bl	80138c0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8014dfe:	6879      	ldr	r1, [r7, #4]
 8014e00:	2003      	movs	r0, #3
 8014e02:	f7fd fead 	bl	8012b60 <memp_free>
  }
}
 8014e06:	bf00      	nop
 8014e08:	3708      	adds	r7, #8
 8014e0a:	46bd      	mov	sp, r7
 8014e0c:	bd80      	pop	{r7, pc}
	...

08014e10 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8014e10:	b580      	push	{r7, lr}
 8014e12:	b084      	sub	sp, #16
 8014e14:	af00      	add	r7, sp, #0
 8014e16:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d106      	bne.n	8014e2c <tcp_seg_copy+0x1c>
 8014e1e:	4b0f      	ldr	r3, [pc, #60]	; (8014e5c <tcp_seg_copy+0x4c>)
 8014e20:	f240 6282 	movw	r2, #1666	; 0x682
 8014e24:	490e      	ldr	r1, [pc, #56]	; (8014e60 <tcp_seg_copy+0x50>)
 8014e26:	480f      	ldr	r0, [pc, #60]	; (8014e64 <tcp_seg_copy+0x54>)
 8014e28:	f009 fa56 	bl	801e2d8 <printf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8014e2c:	2003      	movs	r0, #3
 8014e2e:	f7fd fe45 	bl	8012abc <memp_malloc>
 8014e32:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8014e34:	68fb      	ldr	r3, [r7, #12]
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d101      	bne.n	8014e3e <tcp_seg_copy+0x2e>
    return NULL;
 8014e3a:	2300      	movs	r3, #0
 8014e3c:	e00a      	b.n	8014e54 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8014e3e:	2210      	movs	r2, #16
 8014e40:	6879      	ldr	r1, [r7, #4]
 8014e42:	68f8      	ldr	r0, [r7, #12]
 8014e44:	f009 fa18 	bl	801e278 <memcpy>
  pbuf_ref(cseg->p);
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	685b      	ldr	r3, [r3, #4]
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	f7fe fddd 	bl	8013a0c <pbuf_ref>
  return cseg;
 8014e52:	68fb      	ldr	r3, [r7, #12]
}
 8014e54:	4618      	mov	r0, r3
 8014e56:	3710      	adds	r7, #16
 8014e58:	46bd      	mov	sp, r7
 8014e5a:	bd80      	pop	{r7, pc}
 8014e5c:	08025130 	.word	0x08025130
 8014e60:	08025684 	.word	0x08025684
 8014e64:	08025174 	.word	0x08025174

08014e68 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8014e68:	b580      	push	{r7, lr}
 8014e6a:	b084      	sub	sp, #16
 8014e6c:	af00      	add	r7, sp, #0
 8014e6e:	60f8      	str	r0, [r7, #12]
 8014e70:	60b9      	str	r1, [r7, #8]
 8014e72:	607a      	str	r2, [r7, #4]
 8014e74:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8014e76:	68bb      	ldr	r3, [r7, #8]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d109      	bne.n	8014e90 <tcp_recv_null+0x28>
 8014e7c:	4b12      	ldr	r3, [pc, #72]	; (8014ec8 <tcp_recv_null+0x60>)
 8014e7e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8014e82:	4912      	ldr	r1, [pc, #72]	; (8014ecc <tcp_recv_null+0x64>)
 8014e84:	4812      	ldr	r0, [pc, #72]	; (8014ed0 <tcp_recv_null+0x68>)
 8014e86:	f009 fa27 	bl	801e2d8 <printf>
 8014e8a:	f06f 030f 	mvn.w	r3, #15
 8014e8e:	e016      	b.n	8014ebe <tcp_recv_null+0x56>

  if (p != NULL) {
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d009      	beq.n	8014eaa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	891b      	ldrh	r3, [r3, #8]
 8014e9a:	4619      	mov	r1, r3
 8014e9c:	68b8      	ldr	r0, [r7, #8]
 8014e9e:	f7ff fb19 	bl	80144d4 <tcp_recved>
    pbuf_free(p);
 8014ea2:	6878      	ldr	r0, [r7, #4]
 8014ea4:	f7fe fd0c 	bl	80138c0 <pbuf_free>
 8014ea8:	e008      	b.n	8014ebc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8014eaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d104      	bne.n	8014ebc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8014eb2:	68b8      	ldr	r0, [r7, #8]
 8014eb4:	f7ff f9be 	bl	8014234 <tcp_close>
 8014eb8:	4603      	mov	r3, r0
 8014eba:	e000      	b.n	8014ebe <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8014ebc:	2300      	movs	r3, #0
}
 8014ebe:	4618      	mov	r0, r3
 8014ec0:	3710      	adds	r7, #16
 8014ec2:	46bd      	mov	sp, r7
 8014ec4:	bd80      	pop	{r7, pc}
 8014ec6:	bf00      	nop
 8014ec8:	08025130 	.word	0x08025130
 8014ecc:	080256a0 	.word	0x080256a0
 8014ed0:	08025174 	.word	0x08025174

08014ed4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8014ed4:	b580      	push	{r7, lr}
 8014ed6:	b086      	sub	sp, #24
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	4603      	mov	r3, r0
 8014edc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8014ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	db01      	blt.n	8014eea <tcp_kill_prio+0x16>
 8014ee6:	79fb      	ldrb	r3, [r7, #7]
 8014ee8:	e000      	b.n	8014eec <tcp_kill_prio+0x18>
 8014eea:	237f      	movs	r3, #127	; 0x7f
 8014eec:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8014eee:	7afb      	ldrb	r3, [r7, #11]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d034      	beq.n	8014f5e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8014ef4:	7afb      	ldrb	r3, [r7, #11]
 8014ef6:	3b01      	subs	r3, #1
 8014ef8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8014efa:	2300      	movs	r3, #0
 8014efc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8014efe:	2300      	movs	r3, #0
 8014f00:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014f02:	4b19      	ldr	r3, [pc, #100]	; (8014f68 <tcp_kill_prio+0x94>)
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	617b      	str	r3, [r7, #20]
 8014f08:	e01f      	b.n	8014f4a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8014f0a:	697b      	ldr	r3, [r7, #20]
 8014f0c:	7d5b      	ldrb	r3, [r3, #21]
 8014f0e:	7afa      	ldrb	r2, [r7, #11]
 8014f10:	429a      	cmp	r2, r3
 8014f12:	d80c      	bhi.n	8014f2e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8014f14:	697b      	ldr	r3, [r7, #20]
 8014f16:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8014f18:	7afa      	ldrb	r2, [r7, #11]
 8014f1a:	429a      	cmp	r2, r3
 8014f1c:	d112      	bne.n	8014f44 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8014f1e:	4b13      	ldr	r3, [pc, #76]	; (8014f6c <tcp_kill_prio+0x98>)
 8014f20:	681a      	ldr	r2, [r3, #0]
 8014f22:	697b      	ldr	r3, [r7, #20]
 8014f24:	6a1b      	ldr	r3, [r3, #32]
 8014f26:	1ad3      	subs	r3, r2, r3
 8014f28:	68fa      	ldr	r2, [r7, #12]
 8014f2a:	429a      	cmp	r2, r3
 8014f2c:	d80a      	bhi.n	8014f44 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8014f2e:	4b0f      	ldr	r3, [pc, #60]	; (8014f6c <tcp_kill_prio+0x98>)
 8014f30:	681a      	ldr	r2, [r3, #0]
 8014f32:	697b      	ldr	r3, [r7, #20]
 8014f34:	6a1b      	ldr	r3, [r3, #32]
 8014f36:	1ad3      	subs	r3, r2, r3
 8014f38:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8014f3a:	697b      	ldr	r3, [r7, #20]
 8014f3c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8014f3e:	697b      	ldr	r3, [r7, #20]
 8014f40:	7d5b      	ldrb	r3, [r3, #21]
 8014f42:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014f44:	697b      	ldr	r3, [r7, #20]
 8014f46:	68db      	ldr	r3, [r3, #12]
 8014f48:	617b      	str	r3, [r7, #20]
 8014f4a:	697b      	ldr	r3, [r7, #20]
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d1dc      	bne.n	8014f0a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8014f50:	693b      	ldr	r3, [r7, #16]
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d004      	beq.n	8014f60 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8014f56:	6938      	ldr	r0, [r7, #16]
 8014f58:	f7ff fa56 	bl	8014408 <tcp_abort>
 8014f5c:	e000      	b.n	8014f60 <tcp_kill_prio+0x8c>
    return;
 8014f5e:	bf00      	nop
  }
}
 8014f60:	3718      	adds	r7, #24
 8014f62:	46bd      	mov	sp, r7
 8014f64:	bd80      	pop	{r7, pc}
 8014f66:	bf00      	nop
 8014f68:	2000c1c0 	.word	0x2000c1c0
 8014f6c:	2000c1b4 	.word	0x2000c1b4

08014f70 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8014f70:	b580      	push	{r7, lr}
 8014f72:	b086      	sub	sp, #24
 8014f74:	af00      	add	r7, sp, #0
 8014f76:	4603      	mov	r3, r0
 8014f78:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8014f7a:	79fb      	ldrb	r3, [r7, #7]
 8014f7c:	2b08      	cmp	r3, #8
 8014f7e:	d009      	beq.n	8014f94 <tcp_kill_state+0x24>
 8014f80:	79fb      	ldrb	r3, [r7, #7]
 8014f82:	2b09      	cmp	r3, #9
 8014f84:	d006      	beq.n	8014f94 <tcp_kill_state+0x24>
 8014f86:	4b1a      	ldr	r3, [pc, #104]	; (8014ff0 <tcp_kill_state+0x80>)
 8014f88:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8014f8c:	4919      	ldr	r1, [pc, #100]	; (8014ff4 <tcp_kill_state+0x84>)
 8014f8e:	481a      	ldr	r0, [pc, #104]	; (8014ff8 <tcp_kill_state+0x88>)
 8014f90:	f009 f9a2 	bl	801e2d8 <printf>

  inactivity = 0;
 8014f94:	2300      	movs	r3, #0
 8014f96:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8014f98:	2300      	movs	r3, #0
 8014f9a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014f9c:	4b17      	ldr	r3, [pc, #92]	; (8014ffc <tcp_kill_state+0x8c>)
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	617b      	str	r3, [r7, #20]
 8014fa2:	e017      	b.n	8014fd4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8014fa4:	697b      	ldr	r3, [r7, #20]
 8014fa6:	7d1b      	ldrb	r3, [r3, #20]
 8014fa8:	79fa      	ldrb	r2, [r7, #7]
 8014faa:	429a      	cmp	r2, r3
 8014fac:	d10f      	bne.n	8014fce <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8014fae:	4b14      	ldr	r3, [pc, #80]	; (8015000 <tcp_kill_state+0x90>)
 8014fb0:	681a      	ldr	r2, [r3, #0]
 8014fb2:	697b      	ldr	r3, [r7, #20]
 8014fb4:	6a1b      	ldr	r3, [r3, #32]
 8014fb6:	1ad3      	subs	r3, r2, r3
 8014fb8:	68fa      	ldr	r2, [r7, #12]
 8014fba:	429a      	cmp	r2, r3
 8014fbc:	d807      	bhi.n	8014fce <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8014fbe:	4b10      	ldr	r3, [pc, #64]	; (8015000 <tcp_kill_state+0x90>)
 8014fc0:	681a      	ldr	r2, [r3, #0]
 8014fc2:	697b      	ldr	r3, [r7, #20]
 8014fc4:	6a1b      	ldr	r3, [r3, #32]
 8014fc6:	1ad3      	subs	r3, r2, r3
 8014fc8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8014fca:	697b      	ldr	r3, [r7, #20]
 8014fcc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014fce:	697b      	ldr	r3, [r7, #20]
 8014fd0:	68db      	ldr	r3, [r3, #12]
 8014fd2:	617b      	str	r3, [r7, #20]
 8014fd4:	697b      	ldr	r3, [r7, #20]
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d1e4      	bne.n	8014fa4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8014fda:	693b      	ldr	r3, [r7, #16]
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d003      	beq.n	8014fe8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8014fe0:	2100      	movs	r1, #0
 8014fe2:	6938      	ldr	r0, [r7, #16]
 8014fe4:	f7ff f952 	bl	801428c <tcp_abandon>
  }
}
 8014fe8:	bf00      	nop
 8014fea:	3718      	adds	r7, #24
 8014fec:	46bd      	mov	sp, r7
 8014fee:	bd80      	pop	{r7, pc}
 8014ff0:	08025130 	.word	0x08025130
 8014ff4:	080256bc 	.word	0x080256bc
 8014ff8:	08025174 	.word	0x08025174
 8014ffc:	2000c1c0 	.word	0x2000c1c0
 8015000:	2000c1b4 	.word	0x2000c1b4

08015004 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8015004:	b580      	push	{r7, lr}
 8015006:	b084      	sub	sp, #16
 8015008:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801500a:	2300      	movs	r3, #0
 801500c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801500e:	2300      	movs	r3, #0
 8015010:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015012:	4b12      	ldr	r3, [pc, #72]	; (801505c <tcp_kill_timewait+0x58>)
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	60fb      	str	r3, [r7, #12]
 8015018:	e012      	b.n	8015040 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801501a:	4b11      	ldr	r3, [pc, #68]	; (8015060 <tcp_kill_timewait+0x5c>)
 801501c:	681a      	ldr	r2, [r3, #0]
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	6a1b      	ldr	r3, [r3, #32]
 8015022:	1ad3      	subs	r3, r2, r3
 8015024:	687a      	ldr	r2, [r7, #4]
 8015026:	429a      	cmp	r2, r3
 8015028:	d807      	bhi.n	801503a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801502a:	4b0d      	ldr	r3, [pc, #52]	; (8015060 <tcp_kill_timewait+0x5c>)
 801502c:	681a      	ldr	r2, [r3, #0]
 801502e:	68fb      	ldr	r3, [r7, #12]
 8015030:	6a1b      	ldr	r3, [r3, #32]
 8015032:	1ad3      	subs	r3, r2, r3
 8015034:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	68db      	ldr	r3, [r3, #12]
 801503e:	60fb      	str	r3, [r7, #12]
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	2b00      	cmp	r3, #0
 8015044:	d1e9      	bne.n	801501a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8015046:	68bb      	ldr	r3, [r7, #8]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d002      	beq.n	8015052 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801504c:	68b8      	ldr	r0, [r7, #8]
 801504e:	f7ff f9db 	bl	8014408 <tcp_abort>
  }
}
 8015052:	bf00      	nop
 8015054:	3710      	adds	r7, #16
 8015056:	46bd      	mov	sp, r7
 8015058:	bd80      	pop	{r7, pc}
 801505a:	bf00      	nop
 801505c:	2000c1c4 	.word	0x2000c1c4
 8015060:	2000c1b4 	.word	0x2000c1b4

08015064 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8015064:	b580      	push	{r7, lr}
 8015066:	b082      	sub	sp, #8
 8015068:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801506a:	4b10      	ldr	r3, [pc, #64]	; (80150ac <tcp_handle_closepend+0x48>)
 801506c:	681b      	ldr	r3, [r3, #0]
 801506e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8015070:	e014      	b.n	801509c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	68db      	ldr	r3, [r3, #12]
 8015076:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	8b5b      	ldrh	r3, [r3, #26]
 801507c:	f003 0308 	and.w	r3, r3, #8
 8015080:	2b00      	cmp	r3, #0
 8015082:	d009      	beq.n	8015098 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	8b5b      	ldrh	r3, [r3, #26]
 8015088:	f023 0308 	bic.w	r3, r3, #8
 801508c:	b29a      	uxth	r2, r3
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8015092:	6878      	ldr	r0, [r7, #4]
 8015094:	f7ff f864 	bl	8014160 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8015098:	683b      	ldr	r3, [r7, #0]
 801509a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d1e7      	bne.n	8015072 <tcp_handle_closepend+0xe>
  }
}
 80150a2:	bf00      	nop
 80150a4:	bf00      	nop
 80150a6:	3708      	adds	r7, #8
 80150a8:	46bd      	mov	sp, r7
 80150aa:	bd80      	pop	{r7, pc}
 80150ac:	2000c1c0 	.word	0x2000c1c0

080150b0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80150b0:	b580      	push	{r7, lr}
 80150b2:	b084      	sub	sp, #16
 80150b4:	af00      	add	r7, sp, #0
 80150b6:	4603      	mov	r3, r0
 80150b8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80150ba:	2001      	movs	r0, #1
 80150bc:	f7fd fcfe 	bl	8012abc <memp_malloc>
 80150c0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d126      	bne.n	8015116 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80150c8:	f7ff ffcc 	bl	8015064 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80150cc:	f7ff ff9a 	bl	8015004 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80150d0:	2001      	movs	r0, #1
 80150d2:	f7fd fcf3 	bl	8012abc <memp_malloc>
 80150d6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d11b      	bne.n	8015116 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80150de:	2009      	movs	r0, #9
 80150e0:	f7ff ff46 	bl	8014f70 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80150e4:	2001      	movs	r0, #1
 80150e6:	f7fd fce9 	bl	8012abc <memp_malloc>
 80150ea:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d111      	bne.n	8015116 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80150f2:	2008      	movs	r0, #8
 80150f4:	f7ff ff3c 	bl	8014f70 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80150f8:	2001      	movs	r0, #1
 80150fa:	f7fd fcdf 	bl	8012abc <memp_malloc>
 80150fe:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	2b00      	cmp	r3, #0
 8015104:	d107      	bne.n	8015116 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8015106:	79fb      	ldrb	r3, [r7, #7]
 8015108:	4618      	mov	r0, r3
 801510a:	f7ff fee3 	bl	8014ed4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801510e:	2001      	movs	r0, #1
 8015110:	f7fd fcd4 	bl	8012abc <memp_malloc>
 8015114:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8015116:	68fb      	ldr	r3, [r7, #12]
 8015118:	2b00      	cmp	r3, #0
 801511a:	d03f      	beq.n	801519c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801511c:	229c      	movs	r2, #156	; 0x9c
 801511e:	2100      	movs	r1, #0
 8015120:	68f8      	ldr	r0, [r7, #12]
 8015122:	f009 f8d1 	bl	801e2c8 <memset>
    pcb->prio = prio;
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	79fa      	ldrb	r2, [r7, #7]
 801512a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8015132:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8015136:	68fb      	ldr	r3, [r7, #12]
 8015138:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801513c:	855a      	strh	r2, [r3, #42]	; 0x2a
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	22ff      	movs	r2, #255	; 0xff
 801514a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801514c:	68fb      	ldr	r3, [r7, #12]
 801514e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8015152:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8015154:	68fb      	ldr	r3, [r7, #12]
 8015156:	2206      	movs	r2, #6
 8015158:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	2206      	movs	r2, #6
 8015160:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015168:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	2201      	movs	r2, #1
 801516e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8015172:	4b0d      	ldr	r3, [pc, #52]	; (80151a8 <tcp_alloc+0xf8>)
 8015174:	681a      	ldr	r2, [r3, #0]
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801517a:	4b0c      	ldr	r3, [pc, #48]	; (80151ac <tcp_alloc+0xfc>)
 801517c:	781a      	ldrb	r2, [r3, #0]
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8015188:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	4a08      	ldr	r2, [pc, #32]	; (80151b0 <tcp_alloc+0x100>)
 8015190:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	4a07      	ldr	r2, [pc, #28]	; (80151b4 <tcp_alloc+0x104>)
 8015198:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801519c:	68fb      	ldr	r3, [r7, #12]
}
 801519e:	4618      	mov	r0, r3
 80151a0:	3710      	adds	r7, #16
 80151a2:	46bd      	mov	sp, r7
 80151a4:	bd80      	pop	{r7, pc}
 80151a6:	bf00      	nop
 80151a8:	2000c1b4 	.word	0x2000c1b4
 80151ac:	2000c1ca 	.word	0x2000c1ca
 80151b0:	08014e69 	.word	0x08014e69
 80151b4:	006ddd00 	.word	0x006ddd00

080151b8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80151b8:	b580      	push	{r7, lr}
 80151ba:	b082      	sub	sp, #8
 80151bc:	af00      	add	r7, sp, #0
 80151be:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d107      	bne.n	80151d6 <tcp_pcb_purge+0x1e>
 80151c6:	4b21      	ldr	r3, [pc, #132]	; (801524c <tcp_pcb_purge+0x94>)
 80151c8:	f640 0251 	movw	r2, #2129	; 0x851
 80151cc:	4920      	ldr	r1, [pc, #128]	; (8015250 <tcp_pcb_purge+0x98>)
 80151ce:	4821      	ldr	r0, [pc, #132]	; (8015254 <tcp_pcb_purge+0x9c>)
 80151d0:	f009 f882 	bl	801e2d8 <printf>
 80151d4:	e037      	b.n	8015246 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	7d1b      	ldrb	r3, [r3, #20]
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d033      	beq.n	8015246 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80151e2:	2b0a      	cmp	r3, #10
 80151e4:	d02f      	beq.n	8015246 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80151ea:	2b01      	cmp	r3, #1
 80151ec:	d02b      	beq.n	8015246 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d007      	beq.n	8015206 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80151fa:	4618      	mov	r0, r3
 80151fc:	f7fe fb60 	bl	80138c0 <pbuf_free>
      pcb->refused_data = NULL;
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	2200      	movs	r2, #0
 8015204:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801520a:	2b00      	cmp	r3, #0
 801520c:	d002      	beq.n	8015214 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801520e:	6878      	ldr	r0, [r7, #4]
 8015210:	f000 f986 	bl	8015520 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801521a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015220:	4618      	mov	r0, r3
 8015222:	f7ff fdc7 	bl	8014db4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801522a:	4618      	mov	r0, r3
 801522c:	f7ff fdc2 	bl	8014db4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	2200      	movs	r2, #0
 8015234:	66da      	str	r2, [r3, #108]	; 0x6c
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	2200      	movs	r2, #0
 8015242:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8015246:	3708      	adds	r7, #8
 8015248:	46bd      	mov	sp, r7
 801524a:	bd80      	pop	{r7, pc}
 801524c:	08025130 	.word	0x08025130
 8015250:	0802577c 	.word	0x0802577c
 8015254:	08025174 	.word	0x08025174

08015258 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8015258:	b580      	push	{r7, lr}
 801525a:	b084      	sub	sp, #16
 801525c:	af00      	add	r7, sp, #0
 801525e:	6078      	str	r0, [r7, #4]
 8015260:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8015262:	683b      	ldr	r3, [r7, #0]
 8015264:	2b00      	cmp	r3, #0
 8015266:	d106      	bne.n	8015276 <tcp_pcb_remove+0x1e>
 8015268:	4b3e      	ldr	r3, [pc, #248]	; (8015364 <tcp_pcb_remove+0x10c>)
 801526a:	f640 0283 	movw	r2, #2179	; 0x883
 801526e:	493e      	ldr	r1, [pc, #248]	; (8015368 <tcp_pcb_remove+0x110>)
 8015270:	483e      	ldr	r0, [pc, #248]	; (801536c <tcp_pcb_remove+0x114>)
 8015272:	f009 f831 	bl	801e2d8 <printf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	2b00      	cmp	r3, #0
 801527a:	d106      	bne.n	801528a <tcp_pcb_remove+0x32>
 801527c:	4b39      	ldr	r3, [pc, #228]	; (8015364 <tcp_pcb_remove+0x10c>)
 801527e:	f640 0284 	movw	r2, #2180	; 0x884
 8015282:	493b      	ldr	r1, [pc, #236]	; (8015370 <tcp_pcb_remove+0x118>)
 8015284:	4839      	ldr	r0, [pc, #228]	; (801536c <tcp_pcb_remove+0x114>)
 8015286:	f009 f827 	bl	801e2d8 <printf>

  TCP_RMV(pcblist, pcb);
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	683a      	ldr	r2, [r7, #0]
 8015290:	429a      	cmp	r2, r3
 8015292:	d105      	bne.n	80152a0 <tcp_pcb_remove+0x48>
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	68da      	ldr	r2, [r3, #12]
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	601a      	str	r2, [r3, #0]
 801529e:	e013      	b.n	80152c8 <tcp_pcb_remove+0x70>
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	60fb      	str	r3, [r7, #12]
 80152a6:	e00c      	b.n	80152c2 <tcp_pcb_remove+0x6a>
 80152a8:	68fb      	ldr	r3, [r7, #12]
 80152aa:	68db      	ldr	r3, [r3, #12]
 80152ac:	683a      	ldr	r2, [r7, #0]
 80152ae:	429a      	cmp	r2, r3
 80152b0:	d104      	bne.n	80152bc <tcp_pcb_remove+0x64>
 80152b2:	683b      	ldr	r3, [r7, #0]
 80152b4:	68da      	ldr	r2, [r3, #12]
 80152b6:	68fb      	ldr	r3, [r7, #12]
 80152b8:	60da      	str	r2, [r3, #12]
 80152ba:	e005      	b.n	80152c8 <tcp_pcb_remove+0x70>
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	68db      	ldr	r3, [r3, #12]
 80152c0:	60fb      	str	r3, [r7, #12]
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d1ef      	bne.n	80152a8 <tcp_pcb_remove+0x50>
 80152c8:	683b      	ldr	r3, [r7, #0]
 80152ca:	2200      	movs	r2, #0
 80152cc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80152ce:	6838      	ldr	r0, [r7, #0]
 80152d0:	f7ff ff72 	bl	80151b8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80152d4:	683b      	ldr	r3, [r7, #0]
 80152d6:	7d1b      	ldrb	r3, [r3, #20]
 80152d8:	2b0a      	cmp	r3, #10
 80152da:	d013      	beq.n	8015304 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80152dc:	683b      	ldr	r3, [r7, #0]
 80152de:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80152e0:	2b01      	cmp	r3, #1
 80152e2:	d00f      	beq.n	8015304 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80152e4:	683b      	ldr	r3, [r7, #0]
 80152e6:	8b5b      	ldrh	r3, [r3, #26]
 80152e8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d009      	beq.n	8015304 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80152f0:	683b      	ldr	r3, [r7, #0]
 80152f2:	8b5b      	ldrh	r3, [r3, #26]
 80152f4:	f043 0302 	orr.w	r3, r3, #2
 80152f8:	b29a      	uxth	r2, r3
 80152fa:	683b      	ldr	r3, [r7, #0]
 80152fc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80152fe:	6838      	ldr	r0, [r7, #0]
 8015300:	f002 ff6e 	bl	80181e0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8015304:	683b      	ldr	r3, [r7, #0]
 8015306:	7d1b      	ldrb	r3, [r3, #20]
 8015308:	2b01      	cmp	r3, #1
 801530a:	d020      	beq.n	801534e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801530c:	683b      	ldr	r3, [r7, #0]
 801530e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015310:	2b00      	cmp	r3, #0
 8015312:	d006      	beq.n	8015322 <tcp_pcb_remove+0xca>
 8015314:	4b13      	ldr	r3, [pc, #76]	; (8015364 <tcp_pcb_remove+0x10c>)
 8015316:	f640 0293 	movw	r2, #2195	; 0x893
 801531a:	4916      	ldr	r1, [pc, #88]	; (8015374 <tcp_pcb_remove+0x11c>)
 801531c:	4813      	ldr	r0, [pc, #76]	; (801536c <tcp_pcb_remove+0x114>)
 801531e:	f008 ffdb 	bl	801e2d8 <printf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8015322:	683b      	ldr	r3, [r7, #0]
 8015324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015326:	2b00      	cmp	r3, #0
 8015328:	d006      	beq.n	8015338 <tcp_pcb_remove+0xe0>
 801532a:	4b0e      	ldr	r3, [pc, #56]	; (8015364 <tcp_pcb_remove+0x10c>)
 801532c:	f640 0294 	movw	r2, #2196	; 0x894
 8015330:	4911      	ldr	r1, [pc, #68]	; (8015378 <tcp_pcb_remove+0x120>)
 8015332:	480e      	ldr	r0, [pc, #56]	; (801536c <tcp_pcb_remove+0x114>)
 8015334:	f008 ffd0 	bl	801e2d8 <printf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8015338:	683b      	ldr	r3, [r7, #0]
 801533a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801533c:	2b00      	cmp	r3, #0
 801533e:	d006      	beq.n	801534e <tcp_pcb_remove+0xf6>
 8015340:	4b08      	ldr	r3, [pc, #32]	; (8015364 <tcp_pcb_remove+0x10c>)
 8015342:	f640 0296 	movw	r2, #2198	; 0x896
 8015346:	490d      	ldr	r1, [pc, #52]	; (801537c <tcp_pcb_remove+0x124>)
 8015348:	4808      	ldr	r0, [pc, #32]	; (801536c <tcp_pcb_remove+0x114>)
 801534a:	f008 ffc5 	bl	801e2d8 <printf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801534e:	683b      	ldr	r3, [r7, #0]
 8015350:	2200      	movs	r2, #0
 8015352:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8015354:	683b      	ldr	r3, [r7, #0]
 8015356:	2200      	movs	r2, #0
 8015358:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801535a:	bf00      	nop
 801535c:	3710      	adds	r7, #16
 801535e:	46bd      	mov	sp, r7
 8015360:	bd80      	pop	{r7, pc}
 8015362:	bf00      	nop
 8015364:	08025130 	.word	0x08025130
 8015368:	08025798 	.word	0x08025798
 801536c:	08025174 	.word	0x08025174
 8015370:	080257b4 	.word	0x080257b4
 8015374:	080257d4 	.word	0x080257d4
 8015378:	080257ec 	.word	0x080257ec
 801537c:	08025808 	.word	0x08025808

08015380 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8015380:	b580      	push	{r7, lr}
 8015382:	b082      	sub	sp, #8
 8015384:	af00      	add	r7, sp, #0
 8015386:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	2b00      	cmp	r3, #0
 801538c:	d106      	bne.n	801539c <tcp_next_iss+0x1c>
 801538e:	4b0a      	ldr	r3, [pc, #40]	; (80153b8 <tcp_next_iss+0x38>)
 8015390:	f640 02af 	movw	r2, #2223	; 0x8af
 8015394:	4909      	ldr	r1, [pc, #36]	; (80153bc <tcp_next_iss+0x3c>)
 8015396:	480a      	ldr	r0, [pc, #40]	; (80153c0 <tcp_next_iss+0x40>)
 8015398:	f008 ff9e 	bl	801e2d8 <printf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801539c:	4b09      	ldr	r3, [pc, #36]	; (80153c4 <tcp_next_iss+0x44>)
 801539e:	681a      	ldr	r2, [r3, #0]
 80153a0:	4b09      	ldr	r3, [pc, #36]	; (80153c8 <tcp_next_iss+0x48>)
 80153a2:	681b      	ldr	r3, [r3, #0]
 80153a4:	4413      	add	r3, r2
 80153a6:	4a07      	ldr	r2, [pc, #28]	; (80153c4 <tcp_next_iss+0x44>)
 80153a8:	6013      	str	r3, [r2, #0]
  return iss;
 80153aa:	4b06      	ldr	r3, [pc, #24]	; (80153c4 <tcp_next_iss+0x44>)
 80153ac:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80153ae:	4618      	mov	r0, r3
 80153b0:	3708      	adds	r7, #8
 80153b2:	46bd      	mov	sp, r7
 80153b4:	bd80      	pop	{r7, pc}
 80153b6:	bf00      	nop
 80153b8:	08025130 	.word	0x08025130
 80153bc:	08025820 	.word	0x08025820
 80153c0:	08025174 	.word	0x08025174
 80153c4:	20000014 	.word	0x20000014
 80153c8:	2000c1b4 	.word	0x2000c1b4

080153cc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80153cc:	b580      	push	{r7, lr}
 80153ce:	b086      	sub	sp, #24
 80153d0:	af00      	add	r7, sp, #0
 80153d2:	4603      	mov	r3, r0
 80153d4:	60b9      	str	r1, [r7, #8]
 80153d6:	607a      	str	r2, [r7, #4]
 80153d8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d106      	bne.n	80153ee <tcp_eff_send_mss_netif+0x22>
 80153e0:	4b14      	ldr	r3, [pc, #80]	; (8015434 <tcp_eff_send_mss_netif+0x68>)
 80153e2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80153e6:	4914      	ldr	r1, [pc, #80]	; (8015438 <tcp_eff_send_mss_netif+0x6c>)
 80153e8:	4814      	ldr	r0, [pc, #80]	; (801543c <tcp_eff_send_mss_netif+0x70>)
 80153ea:	f008 ff75 	bl	801e2d8 <printf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80153ee:	68bb      	ldr	r3, [r7, #8]
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d101      	bne.n	80153f8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80153f4:	89fb      	ldrh	r3, [r7, #14]
 80153f6:	e019      	b.n	801542c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80153f8:	68bb      	ldr	r3, [r7, #8]
 80153fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80153fc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80153fe:	8afb      	ldrh	r3, [r7, #22]
 8015400:	2b00      	cmp	r3, #0
 8015402:	d012      	beq.n	801542a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8015404:	2328      	movs	r3, #40	; 0x28
 8015406:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8015408:	8afa      	ldrh	r2, [r7, #22]
 801540a:	8abb      	ldrh	r3, [r7, #20]
 801540c:	429a      	cmp	r2, r3
 801540e:	d904      	bls.n	801541a <tcp_eff_send_mss_netif+0x4e>
 8015410:	8afa      	ldrh	r2, [r7, #22]
 8015412:	8abb      	ldrh	r3, [r7, #20]
 8015414:	1ad3      	subs	r3, r2, r3
 8015416:	b29b      	uxth	r3, r3
 8015418:	e000      	b.n	801541c <tcp_eff_send_mss_netif+0x50>
 801541a:	2300      	movs	r3, #0
 801541c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801541e:	8a7a      	ldrh	r2, [r7, #18]
 8015420:	89fb      	ldrh	r3, [r7, #14]
 8015422:	4293      	cmp	r3, r2
 8015424:	bf28      	it	cs
 8015426:	4613      	movcs	r3, r2
 8015428:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801542a:	89fb      	ldrh	r3, [r7, #14]
}
 801542c:	4618      	mov	r0, r3
 801542e:	3718      	adds	r7, #24
 8015430:	46bd      	mov	sp, r7
 8015432:	bd80      	pop	{r7, pc}
 8015434:	08025130 	.word	0x08025130
 8015438:	0802583c 	.word	0x0802583c
 801543c:	08025174 	.word	0x08025174

08015440 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8015440:	b580      	push	{r7, lr}
 8015442:	b084      	sub	sp, #16
 8015444:	af00      	add	r7, sp, #0
 8015446:	6078      	str	r0, [r7, #4]
 8015448:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801544a:	683b      	ldr	r3, [r7, #0]
 801544c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	2b00      	cmp	r3, #0
 8015452:	d119      	bne.n	8015488 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8015454:	4b10      	ldr	r3, [pc, #64]	; (8015498 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8015456:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801545a:	4910      	ldr	r1, [pc, #64]	; (801549c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801545c:	4810      	ldr	r0, [pc, #64]	; (80154a0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801545e:	f008 ff3b 	bl	801e2d8 <printf>

  while (pcb != NULL) {
 8015462:	e011      	b.n	8015488 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	681a      	ldr	r2, [r3, #0]
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	429a      	cmp	r2, r3
 801546e:	d108      	bne.n	8015482 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	68db      	ldr	r3, [r3, #12]
 8015474:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8015476:	68f8      	ldr	r0, [r7, #12]
 8015478:	f7fe ffc6 	bl	8014408 <tcp_abort>
      pcb = next;
 801547c:	68bb      	ldr	r3, [r7, #8]
 801547e:	60fb      	str	r3, [r7, #12]
 8015480:	e002      	b.n	8015488 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	68db      	ldr	r3, [r3, #12]
 8015486:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	2b00      	cmp	r3, #0
 801548c:	d1ea      	bne.n	8015464 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801548e:	bf00      	nop
 8015490:	bf00      	nop
 8015492:	3710      	adds	r7, #16
 8015494:	46bd      	mov	sp, r7
 8015496:	bd80      	pop	{r7, pc}
 8015498:	08025130 	.word	0x08025130
 801549c:	08025864 	.word	0x08025864
 80154a0:	08025174 	.word	0x08025174

080154a4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80154a4:	b580      	push	{r7, lr}
 80154a6:	b084      	sub	sp, #16
 80154a8:	af00      	add	r7, sp, #0
 80154aa:	6078      	str	r0, [r7, #4]
 80154ac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d02a      	beq.n	801550a <tcp_netif_ip_addr_changed+0x66>
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	681b      	ldr	r3, [r3, #0]
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d026      	beq.n	801550a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80154bc:	4b15      	ldr	r3, [pc, #84]	; (8015514 <tcp_netif_ip_addr_changed+0x70>)
 80154be:	681b      	ldr	r3, [r3, #0]
 80154c0:	4619      	mov	r1, r3
 80154c2:	6878      	ldr	r0, [r7, #4]
 80154c4:	f7ff ffbc 	bl	8015440 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80154c8:	4b13      	ldr	r3, [pc, #76]	; (8015518 <tcp_netif_ip_addr_changed+0x74>)
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	4619      	mov	r1, r3
 80154ce:	6878      	ldr	r0, [r7, #4]
 80154d0:	f7ff ffb6 	bl	8015440 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80154d4:	683b      	ldr	r3, [r7, #0]
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d017      	beq.n	801550a <tcp_netif_ip_addr_changed+0x66>
 80154da:	683b      	ldr	r3, [r7, #0]
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d013      	beq.n	801550a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80154e2:	4b0e      	ldr	r3, [pc, #56]	; (801551c <tcp_netif_ip_addr_changed+0x78>)
 80154e4:	681b      	ldr	r3, [r3, #0]
 80154e6:	60fb      	str	r3, [r7, #12]
 80154e8:	e00c      	b.n	8015504 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80154ea:	68fb      	ldr	r3, [r7, #12]
 80154ec:	681a      	ldr	r2, [r3, #0]
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	681b      	ldr	r3, [r3, #0]
 80154f2:	429a      	cmp	r2, r3
 80154f4:	d103      	bne.n	80154fe <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80154f6:	683b      	ldr	r3, [r7, #0]
 80154f8:	681a      	ldr	r2, [r3, #0]
 80154fa:	68fb      	ldr	r3, [r7, #12]
 80154fc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	68db      	ldr	r3, [r3, #12]
 8015502:	60fb      	str	r3, [r7, #12]
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	2b00      	cmp	r3, #0
 8015508:	d1ef      	bne.n	80154ea <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801550a:	bf00      	nop
 801550c:	3710      	adds	r7, #16
 801550e:	46bd      	mov	sp, r7
 8015510:	bd80      	pop	{r7, pc}
 8015512:	bf00      	nop
 8015514:	2000c1c0 	.word	0x2000c1c0
 8015518:	2000c1b8 	.word	0x2000c1b8
 801551c:	2000c1bc 	.word	0x2000c1bc

08015520 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8015520:	b580      	push	{r7, lr}
 8015522:	b082      	sub	sp, #8
 8015524:	af00      	add	r7, sp, #0
 8015526:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801552c:	2b00      	cmp	r3, #0
 801552e:	d007      	beq.n	8015540 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015534:	4618      	mov	r0, r3
 8015536:	f7ff fc3d 	bl	8014db4 <tcp_segs_free>
    pcb->ooseq = NULL;
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	2200      	movs	r2, #0
 801553e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8015540:	bf00      	nop
 8015542:	3708      	adds	r7, #8
 8015544:	46bd      	mov	sp, r7
 8015546:	bd80      	pop	{r7, pc}

08015548 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8015548:	b590      	push	{r4, r7, lr}
 801554a:	b08d      	sub	sp, #52	; 0x34
 801554c:	af04      	add	r7, sp, #16
 801554e:	6078      	str	r0, [r7, #4]
 8015550:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	2b00      	cmp	r3, #0
 8015556:	d105      	bne.n	8015564 <tcp_input+0x1c>
 8015558:	4b9b      	ldr	r3, [pc, #620]	; (80157c8 <tcp_input+0x280>)
 801555a:	2283      	movs	r2, #131	; 0x83
 801555c:	499b      	ldr	r1, [pc, #620]	; (80157cc <tcp_input+0x284>)
 801555e:	489c      	ldr	r0, [pc, #624]	; (80157d0 <tcp_input+0x288>)
 8015560:	f008 feba 	bl	801e2d8 <printf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	685b      	ldr	r3, [r3, #4]
 8015568:	4a9a      	ldr	r2, [pc, #616]	; (80157d4 <tcp_input+0x28c>)
 801556a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	895b      	ldrh	r3, [r3, #10]
 8015570:	2b13      	cmp	r3, #19
 8015572:	f240 83d1 	bls.w	8015d18 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8015576:	4b98      	ldr	r3, [pc, #608]	; (80157d8 <tcp_input+0x290>)
 8015578:	695b      	ldr	r3, [r3, #20]
 801557a:	4a97      	ldr	r2, [pc, #604]	; (80157d8 <tcp_input+0x290>)
 801557c:	6812      	ldr	r2, [r2, #0]
 801557e:	4611      	mov	r1, r2
 8015580:	4618      	mov	r0, r3
 8015582:	f007 fdfd 	bl	801d180 <ip4_addr_isbroadcast_u32>
 8015586:	4603      	mov	r3, r0
 8015588:	2b00      	cmp	r3, #0
 801558a:	f040 83c7 	bne.w	8015d1c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801558e:	4b92      	ldr	r3, [pc, #584]	; (80157d8 <tcp_input+0x290>)
 8015590:	695b      	ldr	r3, [r3, #20]
 8015592:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8015596:	2be0      	cmp	r3, #224	; 0xe0
 8015598:	f000 83c0 	beq.w	8015d1c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801559c:	4b8d      	ldr	r3, [pc, #564]	; (80157d4 <tcp_input+0x28c>)
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	899b      	ldrh	r3, [r3, #12]
 80155a2:	b29b      	uxth	r3, r3
 80155a4:	4618      	mov	r0, r3
 80155a6:	f7fc fdd3 	bl	8012150 <lwip_htons>
 80155aa:	4603      	mov	r3, r0
 80155ac:	0b1b      	lsrs	r3, r3, #12
 80155ae:	b29b      	uxth	r3, r3
 80155b0:	b2db      	uxtb	r3, r3
 80155b2:	009b      	lsls	r3, r3, #2
 80155b4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80155b6:	7cbb      	ldrb	r3, [r7, #18]
 80155b8:	2b13      	cmp	r3, #19
 80155ba:	f240 83b1 	bls.w	8015d20 <tcp_input+0x7d8>
 80155be:	7cbb      	ldrb	r3, [r7, #18]
 80155c0:	b29a      	uxth	r2, r3
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	891b      	ldrh	r3, [r3, #8]
 80155c6:	429a      	cmp	r2, r3
 80155c8:	f200 83aa 	bhi.w	8015d20 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80155cc:	7cbb      	ldrb	r3, [r7, #18]
 80155ce:	b29b      	uxth	r3, r3
 80155d0:	3b14      	subs	r3, #20
 80155d2:	b29a      	uxth	r2, r3
 80155d4:	4b81      	ldr	r3, [pc, #516]	; (80157dc <tcp_input+0x294>)
 80155d6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80155d8:	4b81      	ldr	r3, [pc, #516]	; (80157e0 <tcp_input+0x298>)
 80155da:	2200      	movs	r2, #0
 80155dc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	895a      	ldrh	r2, [r3, #10]
 80155e2:	7cbb      	ldrb	r3, [r7, #18]
 80155e4:	b29b      	uxth	r3, r3
 80155e6:	429a      	cmp	r2, r3
 80155e8:	d309      	bcc.n	80155fe <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80155ea:	4b7c      	ldr	r3, [pc, #496]	; (80157dc <tcp_input+0x294>)
 80155ec:	881a      	ldrh	r2, [r3, #0]
 80155ee:	4b7d      	ldr	r3, [pc, #500]	; (80157e4 <tcp_input+0x29c>)
 80155f0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80155f2:	7cbb      	ldrb	r3, [r7, #18]
 80155f4:	4619      	mov	r1, r3
 80155f6:	6878      	ldr	r0, [r7, #4]
 80155f8:	f7fe f8dc 	bl	80137b4 <pbuf_remove_header>
 80155fc:	e04e      	b.n	801569c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	2b00      	cmp	r3, #0
 8015604:	d105      	bne.n	8015612 <tcp_input+0xca>
 8015606:	4b70      	ldr	r3, [pc, #448]	; (80157c8 <tcp_input+0x280>)
 8015608:	22c2      	movs	r2, #194	; 0xc2
 801560a:	4977      	ldr	r1, [pc, #476]	; (80157e8 <tcp_input+0x2a0>)
 801560c:	4870      	ldr	r0, [pc, #448]	; (80157d0 <tcp_input+0x288>)
 801560e:	f008 fe63 	bl	801e2d8 <printf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8015612:	2114      	movs	r1, #20
 8015614:	6878      	ldr	r0, [r7, #4]
 8015616:	f7fe f8cd 	bl	80137b4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	895a      	ldrh	r2, [r3, #10]
 801561e:	4b71      	ldr	r3, [pc, #452]	; (80157e4 <tcp_input+0x29c>)
 8015620:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8015622:	4b6e      	ldr	r3, [pc, #440]	; (80157dc <tcp_input+0x294>)
 8015624:	881a      	ldrh	r2, [r3, #0]
 8015626:	4b6f      	ldr	r3, [pc, #444]	; (80157e4 <tcp_input+0x29c>)
 8015628:	881b      	ldrh	r3, [r3, #0]
 801562a:	1ad3      	subs	r3, r2, r3
 801562c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801562e:	4b6d      	ldr	r3, [pc, #436]	; (80157e4 <tcp_input+0x29c>)
 8015630:	881b      	ldrh	r3, [r3, #0]
 8015632:	4619      	mov	r1, r3
 8015634:	6878      	ldr	r0, [r7, #4]
 8015636:	f7fe f8bd 	bl	80137b4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	681b      	ldr	r3, [r3, #0]
 801563e:	895b      	ldrh	r3, [r3, #10]
 8015640:	8a3a      	ldrh	r2, [r7, #16]
 8015642:	429a      	cmp	r2, r3
 8015644:	f200 836e 	bhi.w	8015d24 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	685b      	ldr	r3, [r3, #4]
 801564e:	4a64      	ldr	r2, [pc, #400]	; (80157e0 <tcp_input+0x298>)
 8015650:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	8a3a      	ldrh	r2, [r7, #16]
 8015658:	4611      	mov	r1, r2
 801565a:	4618      	mov	r0, r3
 801565c:	f7fe f8aa 	bl	80137b4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	891a      	ldrh	r2, [r3, #8]
 8015664:	8a3b      	ldrh	r3, [r7, #16]
 8015666:	1ad3      	subs	r3, r2, r3
 8015668:	b29a      	uxth	r2, r3
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	895b      	ldrh	r3, [r3, #10]
 8015672:	2b00      	cmp	r3, #0
 8015674:	d005      	beq.n	8015682 <tcp_input+0x13a>
 8015676:	4b54      	ldr	r3, [pc, #336]	; (80157c8 <tcp_input+0x280>)
 8015678:	22df      	movs	r2, #223	; 0xdf
 801567a:	495c      	ldr	r1, [pc, #368]	; (80157ec <tcp_input+0x2a4>)
 801567c:	4854      	ldr	r0, [pc, #336]	; (80157d0 <tcp_input+0x288>)
 801567e:	f008 fe2b 	bl	801e2d8 <printf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	891a      	ldrh	r2, [r3, #8]
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	891b      	ldrh	r3, [r3, #8]
 801568c:	429a      	cmp	r2, r3
 801568e:	d005      	beq.n	801569c <tcp_input+0x154>
 8015690:	4b4d      	ldr	r3, [pc, #308]	; (80157c8 <tcp_input+0x280>)
 8015692:	22e0      	movs	r2, #224	; 0xe0
 8015694:	4956      	ldr	r1, [pc, #344]	; (80157f0 <tcp_input+0x2a8>)
 8015696:	484e      	ldr	r0, [pc, #312]	; (80157d0 <tcp_input+0x288>)
 8015698:	f008 fe1e 	bl	801e2d8 <printf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801569c:	4b4d      	ldr	r3, [pc, #308]	; (80157d4 <tcp_input+0x28c>)
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	881b      	ldrh	r3, [r3, #0]
 80156a2:	b29b      	uxth	r3, r3
 80156a4:	4a4b      	ldr	r2, [pc, #300]	; (80157d4 <tcp_input+0x28c>)
 80156a6:	6814      	ldr	r4, [r2, #0]
 80156a8:	4618      	mov	r0, r3
 80156aa:	f7fc fd51 	bl	8012150 <lwip_htons>
 80156ae:	4603      	mov	r3, r0
 80156b0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80156b2:	4b48      	ldr	r3, [pc, #288]	; (80157d4 <tcp_input+0x28c>)
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	885b      	ldrh	r3, [r3, #2]
 80156b8:	b29b      	uxth	r3, r3
 80156ba:	4a46      	ldr	r2, [pc, #280]	; (80157d4 <tcp_input+0x28c>)
 80156bc:	6814      	ldr	r4, [r2, #0]
 80156be:	4618      	mov	r0, r3
 80156c0:	f7fc fd46 	bl	8012150 <lwip_htons>
 80156c4:	4603      	mov	r3, r0
 80156c6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80156c8:	4b42      	ldr	r3, [pc, #264]	; (80157d4 <tcp_input+0x28c>)
 80156ca:	681b      	ldr	r3, [r3, #0]
 80156cc:	685b      	ldr	r3, [r3, #4]
 80156ce:	4a41      	ldr	r2, [pc, #260]	; (80157d4 <tcp_input+0x28c>)
 80156d0:	6814      	ldr	r4, [r2, #0]
 80156d2:	4618      	mov	r0, r3
 80156d4:	f7fc fd51 	bl	801217a <lwip_htonl>
 80156d8:	4603      	mov	r3, r0
 80156da:	6063      	str	r3, [r4, #4]
 80156dc:	6863      	ldr	r3, [r4, #4]
 80156de:	4a45      	ldr	r2, [pc, #276]	; (80157f4 <tcp_input+0x2ac>)
 80156e0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80156e2:	4b3c      	ldr	r3, [pc, #240]	; (80157d4 <tcp_input+0x28c>)
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	689b      	ldr	r3, [r3, #8]
 80156e8:	4a3a      	ldr	r2, [pc, #232]	; (80157d4 <tcp_input+0x28c>)
 80156ea:	6814      	ldr	r4, [r2, #0]
 80156ec:	4618      	mov	r0, r3
 80156ee:	f7fc fd44 	bl	801217a <lwip_htonl>
 80156f2:	4603      	mov	r3, r0
 80156f4:	60a3      	str	r3, [r4, #8]
 80156f6:	68a3      	ldr	r3, [r4, #8]
 80156f8:	4a3f      	ldr	r2, [pc, #252]	; (80157f8 <tcp_input+0x2b0>)
 80156fa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80156fc:	4b35      	ldr	r3, [pc, #212]	; (80157d4 <tcp_input+0x28c>)
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	89db      	ldrh	r3, [r3, #14]
 8015702:	b29b      	uxth	r3, r3
 8015704:	4a33      	ldr	r2, [pc, #204]	; (80157d4 <tcp_input+0x28c>)
 8015706:	6814      	ldr	r4, [r2, #0]
 8015708:	4618      	mov	r0, r3
 801570a:	f7fc fd21 	bl	8012150 <lwip_htons>
 801570e:	4603      	mov	r3, r0
 8015710:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8015712:	4b30      	ldr	r3, [pc, #192]	; (80157d4 <tcp_input+0x28c>)
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	899b      	ldrh	r3, [r3, #12]
 8015718:	b29b      	uxth	r3, r3
 801571a:	4618      	mov	r0, r3
 801571c:	f7fc fd18 	bl	8012150 <lwip_htons>
 8015720:	4603      	mov	r3, r0
 8015722:	b2db      	uxtb	r3, r3
 8015724:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015728:	b2da      	uxtb	r2, r3
 801572a:	4b34      	ldr	r3, [pc, #208]	; (80157fc <tcp_input+0x2b4>)
 801572c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	891a      	ldrh	r2, [r3, #8]
 8015732:	4b33      	ldr	r3, [pc, #204]	; (8015800 <tcp_input+0x2b8>)
 8015734:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8015736:	4b31      	ldr	r3, [pc, #196]	; (80157fc <tcp_input+0x2b4>)
 8015738:	781b      	ldrb	r3, [r3, #0]
 801573a:	f003 0303 	and.w	r3, r3, #3
 801573e:	2b00      	cmp	r3, #0
 8015740:	d00c      	beq.n	801575c <tcp_input+0x214>
    tcplen++;
 8015742:	4b2f      	ldr	r3, [pc, #188]	; (8015800 <tcp_input+0x2b8>)
 8015744:	881b      	ldrh	r3, [r3, #0]
 8015746:	3301      	adds	r3, #1
 8015748:	b29a      	uxth	r2, r3
 801574a:	4b2d      	ldr	r3, [pc, #180]	; (8015800 <tcp_input+0x2b8>)
 801574c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	891a      	ldrh	r2, [r3, #8]
 8015752:	4b2b      	ldr	r3, [pc, #172]	; (8015800 <tcp_input+0x2b8>)
 8015754:	881b      	ldrh	r3, [r3, #0]
 8015756:	429a      	cmp	r2, r3
 8015758:	f200 82e6 	bhi.w	8015d28 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801575c:	2300      	movs	r3, #0
 801575e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015760:	4b28      	ldr	r3, [pc, #160]	; (8015804 <tcp_input+0x2bc>)
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	61fb      	str	r3, [r7, #28]
 8015766:	e09d      	b.n	80158a4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8015768:	69fb      	ldr	r3, [r7, #28]
 801576a:	7d1b      	ldrb	r3, [r3, #20]
 801576c:	2b00      	cmp	r3, #0
 801576e:	d105      	bne.n	801577c <tcp_input+0x234>
 8015770:	4b15      	ldr	r3, [pc, #84]	; (80157c8 <tcp_input+0x280>)
 8015772:	22fb      	movs	r2, #251	; 0xfb
 8015774:	4924      	ldr	r1, [pc, #144]	; (8015808 <tcp_input+0x2c0>)
 8015776:	4816      	ldr	r0, [pc, #88]	; (80157d0 <tcp_input+0x288>)
 8015778:	f008 fdae 	bl	801e2d8 <printf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801577c:	69fb      	ldr	r3, [r7, #28]
 801577e:	7d1b      	ldrb	r3, [r3, #20]
 8015780:	2b0a      	cmp	r3, #10
 8015782:	d105      	bne.n	8015790 <tcp_input+0x248>
 8015784:	4b10      	ldr	r3, [pc, #64]	; (80157c8 <tcp_input+0x280>)
 8015786:	22fc      	movs	r2, #252	; 0xfc
 8015788:	4920      	ldr	r1, [pc, #128]	; (801580c <tcp_input+0x2c4>)
 801578a:	4811      	ldr	r0, [pc, #68]	; (80157d0 <tcp_input+0x288>)
 801578c:	f008 fda4 	bl	801e2d8 <printf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8015790:	69fb      	ldr	r3, [r7, #28]
 8015792:	7d1b      	ldrb	r3, [r3, #20]
 8015794:	2b01      	cmp	r3, #1
 8015796:	d105      	bne.n	80157a4 <tcp_input+0x25c>
 8015798:	4b0b      	ldr	r3, [pc, #44]	; (80157c8 <tcp_input+0x280>)
 801579a:	22fd      	movs	r2, #253	; 0xfd
 801579c:	491c      	ldr	r1, [pc, #112]	; (8015810 <tcp_input+0x2c8>)
 801579e:	480c      	ldr	r0, [pc, #48]	; (80157d0 <tcp_input+0x288>)
 80157a0:	f008 fd9a 	bl	801e2d8 <printf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80157a4:	69fb      	ldr	r3, [r7, #28]
 80157a6:	7a1b      	ldrb	r3, [r3, #8]
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d033      	beq.n	8015814 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80157ac:	69fb      	ldr	r3, [r7, #28]
 80157ae:	7a1a      	ldrb	r2, [r3, #8]
 80157b0:	4b09      	ldr	r3, [pc, #36]	; (80157d8 <tcp_input+0x290>)
 80157b2:	685b      	ldr	r3, [r3, #4]
 80157b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80157b8:	3301      	adds	r3, #1
 80157ba:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80157bc:	429a      	cmp	r2, r3
 80157be:	d029      	beq.n	8015814 <tcp_input+0x2cc>
      prev = pcb;
 80157c0:	69fb      	ldr	r3, [r7, #28]
 80157c2:	61bb      	str	r3, [r7, #24]
      continue;
 80157c4:	e06b      	b.n	801589e <tcp_input+0x356>
 80157c6:	bf00      	nop
 80157c8:	08025898 	.word	0x08025898
 80157cc:	080258cc 	.word	0x080258cc
 80157d0:	080258e4 	.word	0x080258e4
 80157d4:	2000c1dc 	.word	0x2000c1dc
 80157d8:	20008a40 	.word	0x20008a40
 80157dc:	2000c1e0 	.word	0x2000c1e0
 80157e0:	2000c1e4 	.word	0x2000c1e4
 80157e4:	2000c1e2 	.word	0x2000c1e2
 80157e8:	0802590c 	.word	0x0802590c
 80157ec:	0802591c 	.word	0x0802591c
 80157f0:	08025928 	.word	0x08025928
 80157f4:	2000c1ec 	.word	0x2000c1ec
 80157f8:	2000c1f0 	.word	0x2000c1f0
 80157fc:	2000c1f8 	.word	0x2000c1f8
 8015800:	2000c1f6 	.word	0x2000c1f6
 8015804:	2000c1c0 	.word	0x2000c1c0
 8015808:	08025948 	.word	0x08025948
 801580c:	08025970 	.word	0x08025970
 8015810:	0802599c 	.word	0x0802599c
    }

    if (pcb->remote_port == tcphdr->src &&
 8015814:	69fb      	ldr	r3, [r7, #28]
 8015816:	8b1a      	ldrh	r2, [r3, #24]
 8015818:	4b72      	ldr	r3, [pc, #456]	; (80159e4 <tcp_input+0x49c>)
 801581a:	681b      	ldr	r3, [r3, #0]
 801581c:	881b      	ldrh	r3, [r3, #0]
 801581e:	b29b      	uxth	r3, r3
 8015820:	429a      	cmp	r2, r3
 8015822:	d13a      	bne.n	801589a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8015824:	69fb      	ldr	r3, [r7, #28]
 8015826:	8ada      	ldrh	r2, [r3, #22]
 8015828:	4b6e      	ldr	r3, [pc, #440]	; (80159e4 <tcp_input+0x49c>)
 801582a:	681b      	ldr	r3, [r3, #0]
 801582c:	885b      	ldrh	r3, [r3, #2]
 801582e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8015830:	429a      	cmp	r2, r3
 8015832:	d132      	bne.n	801589a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015834:	69fb      	ldr	r3, [r7, #28]
 8015836:	685a      	ldr	r2, [r3, #4]
 8015838:	4b6b      	ldr	r3, [pc, #428]	; (80159e8 <tcp_input+0x4a0>)
 801583a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801583c:	429a      	cmp	r2, r3
 801583e:	d12c      	bne.n	801589a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015840:	69fb      	ldr	r3, [r7, #28]
 8015842:	681a      	ldr	r2, [r3, #0]
 8015844:	4b68      	ldr	r3, [pc, #416]	; (80159e8 <tcp_input+0x4a0>)
 8015846:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015848:	429a      	cmp	r2, r3
 801584a:	d126      	bne.n	801589a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801584c:	69fb      	ldr	r3, [r7, #28]
 801584e:	68db      	ldr	r3, [r3, #12]
 8015850:	69fa      	ldr	r2, [r7, #28]
 8015852:	429a      	cmp	r2, r3
 8015854:	d106      	bne.n	8015864 <tcp_input+0x31c>
 8015856:	4b65      	ldr	r3, [pc, #404]	; (80159ec <tcp_input+0x4a4>)
 8015858:	f240 120d 	movw	r2, #269	; 0x10d
 801585c:	4964      	ldr	r1, [pc, #400]	; (80159f0 <tcp_input+0x4a8>)
 801585e:	4865      	ldr	r0, [pc, #404]	; (80159f4 <tcp_input+0x4ac>)
 8015860:	f008 fd3a 	bl	801e2d8 <printf>
      if (prev != NULL) {
 8015864:	69bb      	ldr	r3, [r7, #24]
 8015866:	2b00      	cmp	r3, #0
 8015868:	d00a      	beq.n	8015880 <tcp_input+0x338>
        prev->next = pcb->next;
 801586a:	69fb      	ldr	r3, [r7, #28]
 801586c:	68da      	ldr	r2, [r3, #12]
 801586e:	69bb      	ldr	r3, [r7, #24]
 8015870:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8015872:	4b61      	ldr	r3, [pc, #388]	; (80159f8 <tcp_input+0x4b0>)
 8015874:	681a      	ldr	r2, [r3, #0]
 8015876:	69fb      	ldr	r3, [r7, #28]
 8015878:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801587a:	4a5f      	ldr	r2, [pc, #380]	; (80159f8 <tcp_input+0x4b0>)
 801587c:	69fb      	ldr	r3, [r7, #28]
 801587e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8015880:	69fb      	ldr	r3, [r7, #28]
 8015882:	68db      	ldr	r3, [r3, #12]
 8015884:	69fa      	ldr	r2, [r7, #28]
 8015886:	429a      	cmp	r2, r3
 8015888:	d111      	bne.n	80158ae <tcp_input+0x366>
 801588a:	4b58      	ldr	r3, [pc, #352]	; (80159ec <tcp_input+0x4a4>)
 801588c:	f240 1215 	movw	r2, #277	; 0x115
 8015890:	495a      	ldr	r1, [pc, #360]	; (80159fc <tcp_input+0x4b4>)
 8015892:	4858      	ldr	r0, [pc, #352]	; (80159f4 <tcp_input+0x4ac>)
 8015894:	f008 fd20 	bl	801e2d8 <printf>
      break;
 8015898:	e009      	b.n	80158ae <tcp_input+0x366>
    }
    prev = pcb;
 801589a:	69fb      	ldr	r3, [r7, #28]
 801589c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801589e:	69fb      	ldr	r3, [r7, #28]
 80158a0:	68db      	ldr	r3, [r3, #12]
 80158a2:	61fb      	str	r3, [r7, #28]
 80158a4:	69fb      	ldr	r3, [r7, #28]
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	f47f af5e 	bne.w	8015768 <tcp_input+0x220>
 80158ac:	e000      	b.n	80158b0 <tcp_input+0x368>
      break;
 80158ae:	bf00      	nop
  }

  if (pcb == NULL) {
 80158b0:	69fb      	ldr	r3, [r7, #28]
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	f040 80aa 	bne.w	8015a0c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80158b8:	4b51      	ldr	r3, [pc, #324]	; (8015a00 <tcp_input+0x4b8>)
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	61fb      	str	r3, [r7, #28]
 80158be:	e03f      	b.n	8015940 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80158c0:	69fb      	ldr	r3, [r7, #28]
 80158c2:	7d1b      	ldrb	r3, [r3, #20]
 80158c4:	2b0a      	cmp	r3, #10
 80158c6:	d006      	beq.n	80158d6 <tcp_input+0x38e>
 80158c8:	4b48      	ldr	r3, [pc, #288]	; (80159ec <tcp_input+0x4a4>)
 80158ca:	f240 121f 	movw	r2, #287	; 0x11f
 80158ce:	494d      	ldr	r1, [pc, #308]	; (8015a04 <tcp_input+0x4bc>)
 80158d0:	4848      	ldr	r0, [pc, #288]	; (80159f4 <tcp_input+0x4ac>)
 80158d2:	f008 fd01 	bl	801e2d8 <printf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80158d6:	69fb      	ldr	r3, [r7, #28]
 80158d8:	7a1b      	ldrb	r3, [r3, #8]
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d009      	beq.n	80158f2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80158de:	69fb      	ldr	r3, [r7, #28]
 80158e0:	7a1a      	ldrb	r2, [r3, #8]
 80158e2:	4b41      	ldr	r3, [pc, #260]	; (80159e8 <tcp_input+0x4a0>)
 80158e4:	685b      	ldr	r3, [r3, #4]
 80158e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80158ea:	3301      	adds	r3, #1
 80158ec:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80158ee:	429a      	cmp	r2, r3
 80158f0:	d122      	bne.n	8015938 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80158f2:	69fb      	ldr	r3, [r7, #28]
 80158f4:	8b1a      	ldrh	r2, [r3, #24]
 80158f6:	4b3b      	ldr	r3, [pc, #236]	; (80159e4 <tcp_input+0x49c>)
 80158f8:	681b      	ldr	r3, [r3, #0]
 80158fa:	881b      	ldrh	r3, [r3, #0]
 80158fc:	b29b      	uxth	r3, r3
 80158fe:	429a      	cmp	r2, r3
 8015900:	d11b      	bne.n	801593a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8015902:	69fb      	ldr	r3, [r7, #28]
 8015904:	8ada      	ldrh	r2, [r3, #22]
 8015906:	4b37      	ldr	r3, [pc, #220]	; (80159e4 <tcp_input+0x49c>)
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	885b      	ldrh	r3, [r3, #2]
 801590c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801590e:	429a      	cmp	r2, r3
 8015910:	d113      	bne.n	801593a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015912:	69fb      	ldr	r3, [r7, #28]
 8015914:	685a      	ldr	r2, [r3, #4]
 8015916:	4b34      	ldr	r3, [pc, #208]	; (80159e8 <tcp_input+0x4a0>)
 8015918:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801591a:	429a      	cmp	r2, r3
 801591c:	d10d      	bne.n	801593a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801591e:	69fb      	ldr	r3, [r7, #28]
 8015920:	681a      	ldr	r2, [r3, #0]
 8015922:	4b31      	ldr	r3, [pc, #196]	; (80159e8 <tcp_input+0x4a0>)
 8015924:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015926:	429a      	cmp	r2, r3
 8015928:	d107      	bne.n	801593a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801592a:	69f8      	ldr	r0, [r7, #28]
 801592c:	f000 fb56 	bl	8015fdc <tcp_timewait_input>
        }
        pbuf_free(p);
 8015930:	6878      	ldr	r0, [r7, #4]
 8015932:	f7fd ffc5 	bl	80138c0 <pbuf_free>
        return;
 8015936:	e1fd      	b.n	8015d34 <tcp_input+0x7ec>
        continue;
 8015938:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801593a:	69fb      	ldr	r3, [r7, #28]
 801593c:	68db      	ldr	r3, [r3, #12]
 801593e:	61fb      	str	r3, [r7, #28]
 8015940:	69fb      	ldr	r3, [r7, #28]
 8015942:	2b00      	cmp	r3, #0
 8015944:	d1bc      	bne.n	80158c0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8015946:	2300      	movs	r3, #0
 8015948:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801594a:	4b2f      	ldr	r3, [pc, #188]	; (8015a08 <tcp_input+0x4c0>)
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	617b      	str	r3, [r7, #20]
 8015950:	e02a      	b.n	80159a8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8015952:	697b      	ldr	r3, [r7, #20]
 8015954:	7a1b      	ldrb	r3, [r3, #8]
 8015956:	2b00      	cmp	r3, #0
 8015958:	d00c      	beq.n	8015974 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801595a:	697b      	ldr	r3, [r7, #20]
 801595c:	7a1a      	ldrb	r2, [r3, #8]
 801595e:	4b22      	ldr	r3, [pc, #136]	; (80159e8 <tcp_input+0x4a0>)
 8015960:	685b      	ldr	r3, [r3, #4]
 8015962:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015966:	3301      	adds	r3, #1
 8015968:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801596a:	429a      	cmp	r2, r3
 801596c:	d002      	beq.n	8015974 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801596e:	697b      	ldr	r3, [r7, #20]
 8015970:	61bb      	str	r3, [r7, #24]
        continue;
 8015972:	e016      	b.n	80159a2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8015974:	697b      	ldr	r3, [r7, #20]
 8015976:	8ada      	ldrh	r2, [r3, #22]
 8015978:	4b1a      	ldr	r3, [pc, #104]	; (80159e4 <tcp_input+0x49c>)
 801597a:	681b      	ldr	r3, [r3, #0]
 801597c:	885b      	ldrh	r3, [r3, #2]
 801597e:	b29b      	uxth	r3, r3
 8015980:	429a      	cmp	r2, r3
 8015982:	d10c      	bne.n	801599e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8015984:	697b      	ldr	r3, [r7, #20]
 8015986:	681a      	ldr	r2, [r3, #0]
 8015988:	4b17      	ldr	r3, [pc, #92]	; (80159e8 <tcp_input+0x4a0>)
 801598a:	695b      	ldr	r3, [r3, #20]
 801598c:	429a      	cmp	r2, r3
 801598e:	d00f      	beq.n	80159b0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8015990:	697b      	ldr	r3, [r7, #20]
 8015992:	2b00      	cmp	r3, #0
 8015994:	d00d      	beq.n	80159b2 <tcp_input+0x46a>
 8015996:	697b      	ldr	r3, [r7, #20]
 8015998:	681b      	ldr	r3, [r3, #0]
 801599a:	2b00      	cmp	r3, #0
 801599c:	d009      	beq.n	80159b2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801599e:	697b      	ldr	r3, [r7, #20]
 80159a0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80159a2:	697b      	ldr	r3, [r7, #20]
 80159a4:	68db      	ldr	r3, [r3, #12]
 80159a6:	617b      	str	r3, [r7, #20]
 80159a8:	697b      	ldr	r3, [r7, #20]
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d1d1      	bne.n	8015952 <tcp_input+0x40a>
 80159ae:	e000      	b.n	80159b2 <tcp_input+0x46a>
            break;
 80159b0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80159b2:	697b      	ldr	r3, [r7, #20]
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d029      	beq.n	8015a0c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80159b8:	69bb      	ldr	r3, [r7, #24]
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d00a      	beq.n	80159d4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80159be:	697b      	ldr	r3, [r7, #20]
 80159c0:	68da      	ldr	r2, [r3, #12]
 80159c2:	69bb      	ldr	r3, [r7, #24]
 80159c4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80159c6:	4b10      	ldr	r3, [pc, #64]	; (8015a08 <tcp_input+0x4c0>)
 80159c8:	681a      	ldr	r2, [r3, #0]
 80159ca:	697b      	ldr	r3, [r7, #20]
 80159cc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80159ce:	4a0e      	ldr	r2, [pc, #56]	; (8015a08 <tcp_input+0x4c0>)
 80159d0:	697b      	ldr	r3, [r7, #20]
 80159d2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80159d4:	6978      	ldr	r0, [r7, #20]
 80159d6:	f000 fa03 	bl	8015de0 <tcp_listen_input>
      }
      pbuf_free(p);
 80159da:	6878      	ldr	r0, [r7, #4]
 80159dc:	f7fd ff70 	bl	80138c0 <pbuf_free>
      return;
 80159e0:	e1a8      	b.n	8015d34 <tcp_input+0x7ec>
 80159e2:	bf00      	nop
 80159e4:	2000c1dc 	.word	0x2000c1dc
 80159e8:	20008a40 	.word	0x20008a40
 80159ec:	08025898 	.word	0x08025898
 80159f0:	080259c4 	.word	0x080259c4
 80159f4:	080258e4 	.word	0x080258e4
 80159f8:	2000c1c0 	.word	0x2000c1c0
 80159fc:	080259f0 	.word	0x080259f0
 8015a00:	2000c1c4 	.word	0x2000c1c4
 8015a04:	08025a1c 	.word	0x08025a1c
 8015a08:	2000c1bc 	.word	0x2000c1bc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8015a0c:	69fb      	ldr	r3, [r7, #28]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	f000 8158 	beq.w	8015cc4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8015a14:	4b95      	ldr	r3, [pc, #596]	; (8015c6c <tcp_input+0x724>)
 8015a16:	2200      	movs	r2, #0
 8015a18:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	891a      	ldrh	r2, [r3, #8]
 8015a1e:	4b93      	ldr	r3, [pc, #588]	; (8015c6c <tcp_input+0x724>)
 8015a20:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8015a22:	4a92      	ldr	r2, [pc, #584]	; (8015c6c <tcp_input+0x724>)
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8015a28:	4b91      	ldr	r3, [pc, #580]	; (8015c70 <tcp_input+0x728>)
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	4a8f      	ldr	r2, [pc, #572]	; (8015c6c <tcp_input+0x724>)
 8015a2e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8015a30:	4b90      	ldr	r3, [pc, #576]	; (8015c74 <tcp_input+0x72c>)
 8015a32:	2200      	movs	r2, #0
 8015a34:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8015a36:	4b90      	ldr	r3, [pc, #576]	; (8015c78 <tcp_input+0x730>)
 8015a38:	2200      	movs	r2, #0
 8015a3a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8015a3c:	4b8f      	ldr	r3, [pc, #572]	; (8015c7c <tcp_input+0x734>)
 8015a3e:	2200      	movs	r2, #0
 8015a40:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8015a42:	4b8f      	ldr	r3, [pc, #572]	; (8015c80 <tcp_input+0x738>)
 8015a44:	781b      	ldrb	r3, [r3, #0]
 8015a46:	f003 0308 	and.w	r3, r3, #8
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d006      	beq.n	8015a5c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	7b5b      	ldrb	r3, [r3, #13]
 8015a52:	f043 0301 	orr.w	r3, r3, #1
 8015a56:	b2da      	uxtb	r2, r3
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8015a5c:	69fb      	ldr	r3, [r7, #28]
 8015a5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d017      	beq.n	8015a94 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8015a64:	69f8      	ldr	r0, [r7, #28]
 8015a66:	f7ff f929 	bl	8014cbc <tcp_process_refused_data>
 8015a6a:	4603      	mov	r3, r0
 8015a6c:	f113 0f0d 	cmn.w	r3, #13
 8015a70:	d007      	beq.n	8015a82 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8015a72:	69fb      	ldr	r3, [r7, #28]
 8015a74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d00c      	beq.n	8015a94 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8015a7a:	4b82      	ldr	r3, [pc, #520]	; (8015c84 <tcp_input+0x73c>)
 8015a7c:	881b      	ldrh	r3, [r3, #0]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d008      	beq.n	8015a94 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8015a82:	69fb      	ldr	r3, [r7, #28]
 8015a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	f040 80e3 	bne.w	8015c52 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8015a8c:	69f8      	ldr	r0, [r7, #28]
 8015a8e:	f003 f9ad 	bl	8018dec <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8015a92:	e0de      	b.n	8015c52 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8015a94:	4a7c      	ldr	r2, [pc, #496]	; (8015c88 <tcp_input+0x740>)
 8015a96:	69fb      	ldr	r3, [r7, #28]
 8015a98:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8015a9a:	69f8      	ldr	r0, [r7, #28]
 8015a9c:	f000 fb18 	bl	80160d0 <tcp_process>
 8015aa0:	4603      	mov	r3, r0
 8015aa2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8015aa4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015aa8:	f113 0f0d 	cmn.w	r3, #13
 8015aac:	f000 80d3 	beq.w	8015c56 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8015ab0:	4b71      	ldr	r3, [pc, #452]	; (8015c78 <tcp_input+0x730>)
 8015ab2:	781b      	ldrb	r3, [r3, #0]
 8015ab4:	f003 0308 	and.w	r3, r3, #8
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d015      	beq.n	8015ae8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8015abc:	69fb      	ldr	r3, [r7, #28]
 8015abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d008      	beq.n	8015ad8 <tcp_input+0x590>
 8015ac6:	69fb      	ldr	r3, [r7, #28]
 8015ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015acc:	69fa      	ldr	r2, [r7, #28]
 8015ace:	6912      	ldr	r2, [r2, #16]
 8015ad0:	f06f 010d 	mvn.w	r1, #13
 8015ad4:	4610      	mov	r0, r2
 8015ad6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8015ad8:	69f9      	ldr	r1, [r7, #28]
 8015ada:	486c      	ldr	r0, [pc, #432]	; (8015c8c <tcp_input+0x744>)
 8015adc:	f7ff fbbc 	bl	8015258 <tcp_pcb_remove>
        tcp_free(pcb);
 8015ae0:	69f8      	ldr	r0, [r7, #28]
 8015ae2:	f7fe f9a9 	bl	8013e38 <tcp_free>
 8015ae6:	e0da      	b.n	8015c9e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8015ae8:	2300      	movs	r3, #0
 8015aea:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8015aec:	4b63      	ldr	r3, [pc, #396]	; (8015c7c <tcp_input+0x734>)
 8015aee:	881b      	ldrh	r3, [r3, #0]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d01d      	beq.n	8015b30 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8015af4:	4b61      	ldr	r3, [pc, #388]	; (8015c7c <tcp_input+0x734>)
 8015af6:	881b      	ldrh	r3, [r3, #0]
 8015af8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8015afa:	69fb      	ldr	r3, [r7, #28]
 8015afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d00a      	beq.n	8015b1a <tcp_input+0x5d2>
 8015b04:	69fb      	ldr	r3, [r7, #28]
 8015b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015b0a:	69fa      	ldr	r2, [r7, #28]
 8015b0c:	6910      	ldr	r0, [r2, #16]
 8015b0e:	89fa      	ldrh	r2, [r7, #14]
 8015b10:	69f9      	ldr	r1, [r7, #28]
 8015b12:	4798      	blx	r3
 8015b14:	4603      	mov	r3, r0
 8015b16:	74fb      	strb	r3, [r7, #19]
 8015b18:	e001      	b.n	8015b1e <tcp_input+0x5d6>
 8015b1a:	2300      	movs	r3, #0
 8015b1c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8015b1e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015b22:	f113 0f0d 	cmn.w	r3, #13
 8015b26:	f000 8098 	beq.w	8015c5a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8015b2a:	4b54      	ldr	r3, [pc, #336]	; (8015c7c <tcp_input+0x734>)
 8015b2c:	2200      	movs	r2, #0
 8015b2e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8015b30:	69f8      	ldr	r0, [r7, #28]
 8015b32:	f000 f915 	bl	8015d60 <tcp_input_delayed_close>
 8015b36:	4603      	mov	r3, r0
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	f040 8090 	bne.w	8015c5e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8015b3e:	4b4d      	ldr	r3, [pc, #308]	; (8015c74 <tcp_input+0x72c>)
 8015b40:	681b      	ldr	r3, [r3, #0]
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d041      	beq.n	8015bca <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8015b46:	69fb      	ldr	r3, [r7, #28]
 8015b48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d006      	beq.n	8015b5c <tcp_input+0x614>
 8015b4e:	4b50      	ldr	r3, [pc, #320]	; (8015c90 <tcp_input+0x748>)
 8015b50:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8015b54:	494f      	ldr	r1, [pc, #316]	; (8015c94 <tcp_input+0x74c>)
 8015b56:	4850      	ldr	r0, [pc, #320]	; (8015c98 <tcp_input+0x750>)
 8015b58:	f008 fbbe 	bl	801e2d8 <printf>
          if (pcb->flags & TF_RXCLOSED) {
 8015b5c:	69fb      	ldr	r3, [r7, #28]
 8015b5e:	8b5b      	ldrh	r3, [r3, #26]
 8015b60:	f003 0310 	and.w	r3, r3, #16
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d008      	beq.n	8015b7a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8015b68:	4b42      	ldr	r3, [pc, #264]	; (8015c74 <tcp_input+0x72c>)
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	4618      	mov	r0, r3
 8015b6e:	f7fd fea7 	bl	80138c0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8015b72:	69f8      	ldr	r0, [r7, #28]
 8015b74:	f7fe fc48 	bl	8014408 <tcp_abort>
            goto aborted;
 8015b78:	e091      	b.n	8015c9e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8015b7a:	69fb      	ldr	r3, [r7, #28]
 8015b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d00c      	beq.n	8015b9e <tcp_input+0x656>
 8015b84:	69fb      	ldr	r3, [r7, #28]
 8015b86:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8015b8a:	69fb      	ldr	r3, [r7, #28]
 8015b8c:	6918      	ldr	r0, [r3, #16]
 8015b8e:	4b39      	ldr	r3, [pc, #228]	; (8015c74 <tcp_input+0x72c>)
 8015b90:	681a      	ldr	r2, [r3, #0]
 8015b92:	2300      	movs	r3, #0
 8015b94:	69f9      	ldr	r1, [r7, #28]
 8015b96:	47a0      	blx	r4
 8015b98:	4603      	mov	r3, r0
 8015b9a:	74fb      	strb	r3, [r7, #19]
 8015b9c:	e008      	b.n	8015bb0 <tcp_input+0x668>
 8015b9e:	4b35      	ldr	r3, [pc, #212]	; (8015c74 <tcp_input+0x72c>)
 8015ba0:	681a      	ldr	r2, [r3, #0]
 8015ba2:	2300      	movs	r3, #0
 8015ba4:	69f9      	ldr	r1, [r7, #28]
 8015ba6:	2000      	movs	r0, #0
 8015ba8:	f7ff f95e 	bl	8014e68 <tcp_recv_null>
 8015bac:	4603      	mov	r3, r0
 8015bae:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8015bb0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015bb4:	f113 0f0d 	cmn.w	r3, #13
 8015bb8:	d053      	beq.n	8015c62 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8015bba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d003      	beq.n	8015bca <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8015bc2:	4b2c      	ldr	r3, [pc, #176]	; (8015c74 <tcp_input+0x72c>)
 8015bc4:	681a      	ldr	r2, [r3, #0]
 8015bc6:	69fb      	ldr	r3, [r7, #28]
 8015bc8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8015bca:	4b2b      	ldr	r3, [pc, #172]	; (8015c78 <tcp_input+0x730>)
 8015bcc:	781b      	ldrb	r3, [r3, #0]
 8015bce:	f003 0320 	and.w	r3, r3, #32
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	d030      	beq.n	8015c38 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8015bd6:	69fb      	ldr	r3, [r7, #28]
 8015bd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d009      	beq.n	8015bf2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8015bde:	69fb      	ldr	r3, [r7, #28]
 8015be0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015be2:	7b5a      	ldrb	r2, [r3, #13]
 8015be4:	69fb      	ldr	r3, [r7, #28]
 8015be6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015be8:	f042 0220 	orr.w	r2, r2, #32
 8015bec:	b2d2      	uxtb	r2, r2
 8015bee:	735a      	strb	r2, [r3, #13]
 8015bf0:	e022      	b.n	8015c38 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8015bf2:	69fb      	ldr	r3, [r7, #28]
 8015bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015bf6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015bfa:	d005      	beq.n	8015c08 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8015bfc:	69fb      	ldr	r3, [r7, #28]
 8015bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015c00:	3301      	adds	r3, #1
 8015c02:	b29a      	uxth	r2, r3
 8015c04:	69fb      	ldr	r3, [r7, #28]
 8015c06:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8015c08:	69fb      	ldr	r3, [r7, #28]
 8015c0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d00b      	beq.n	8015c2a <tcp_input+0x6e2>
 8015c12:	69fb      	ldr	r3, [r7, #28]
 8015c14:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8015c18:	69fb      	ldr	r3, [r7, #28]
 8015c1a:	6918      	ldr	r0, [r3, #16]
 8015c1c:	2300      	movs	r3, #0
 8015c1e:	2200      	movs	r2, #0
 8015c20:	69f9      	ldr	r1, [r7, #28]
 8015c22:	47a0      	blx	r4
 8015c24:	4603      	mov	r3, r0
 8015c26:	74fb      	strb	r3, [r7, #19]
 8015c28:	e001      	b.n	8015c2e <tcp_input+0x6e6>
 8015c2a:	2300      	movs	r3, #0
 8015c2c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8015c2e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015c32:	f113 0f0d 	cmn.w	r3, #13
 8015c36:	d016      	beq.n	8015c66 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8015c38:	4b13      	ldr	r3, [pc, #76]	; (8015c88 <tcp_input+0x740>)
 8015c3a:	2200      	movs	r2, #0
 8015c3c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8015c3e:	69f8      	ldr	r0, [r7, #28]
 8015c40:	f000 f88e 	bl	8015d60 <tcp_input_delayed_close>
 8015c44:	4603      	mov	r3, r0
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d128      	bne.n	8015c9c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8015c4a:	69f8      	ldr	r0, [r7, #28]
 8015c4c:	f002 fac8 	bl	80181e0 <tcp_output>
 8015c50:	e025      	b.n	8015c9e <tcp_input+0x756>
        goto aborted;
 8015c52:	bf00      	nop
 8015c54:	e023      	b.n	8015c9e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8015c56:	bf00      	nop
 8015c58:	e021      	b.n	8015c9e <tcp_input+0x756>
              goto aborted;
 8015c5a:	bf00      	nop
 8015c5c:	e01f      	b.n	8015c9e <tcp_input+0x756>
          goto aborted;
 8015c5e:	bf00      	nop
 8015c60:	e01d      	b.n	8015c9e <tcp_input+0x756>
            goto aborted;
 8015c62:	bf00      	nop
 8015c64:	e01b      	b.n	8015c9e <tcp_input+0x756>
              goto aborted;
 8015c66:	bf00      	nop
 8015c68:	e019      	b.n	8015c9e <tcp_input+0x756>
 8015c6a:	bf00      	nop
 8015c6c:	2000c1cc 	.word	0x2000c1cc
 8015c70:	2000c1dc 	.word	0x2000c1dc
 8015c74:	2000c1fc 	.word	0x2000c1fc
 8015c78:	2000c1f9 	.word	0x2000c1f9
 8015c7c:	2000c1f4 	.word	0x2000c1f4
 8015c80:	2000c1f8 	.word	0x2000c1f8
 8015c84:	2000c1f6 	.word	0x2000c1f6
 8015c88:	2000c200 	.word	0x2000c200
 8015c8c:	2000c1c0 	.word	0x2000c1c0
 8015c90:	08025898 	.word	0x08025898
 8015c94:	08025a4c 	.word	0x08025a4c
 8015c98:	080258e4 	.word	0x080258e4
          goto aborted;
 8015c9c:	bf00      	nop
    tcp_input_pcb = NULL;
 8015c9e:	4b27      	ldr	r3, [pc, #156]	; (8015d3c <tcp_input+0x7f4>)
 8015ca0:	2200      	movs	r2, #0
 8015ca2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8015ca4:	4b26      	ldr	r3, [pc, #152]	; (8015d40 <tcp_input+0x7f8>)
 8015ca6:	2200      	movs	r2, #0
 8015ca8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8015caa:	4b26      	ldr	r3, [pc, #152]	; (8015d44 <tcp_input+0x7fc>)
 8015cac:	685b      	ldr	r3, [r3, #4]
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d03f      	beq.n	8015d32 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8015cb2:	4b24      	ldr	r3, [pc, #144]	; (8015d44 <tcp_input+0x7fc>)
 8015cb4:	685b      	ldr	r3, [r3, #4]
 8015cb6:	4618      	mov	r0, r3
 8015cb8:	f7fd fe02 	bl	80138c0 <pbuf_free>
      inseg.p = NULL;
 8015cbc:	4b21      	ldr	r3, [pc, #132]	; (8015d44 <tcp_input+0x7fc>)
 8015cbe:	2200      	movs	r2, #0
 8015cc0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8015cc2:	e036      	b.n	8015d32 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8015cc4:	4b20      	ldr	r3, [pc, #128]	; (8015d48 <tcp_input+0x800>)
 8015cc6:	681b      	ldr	r3, [r3, #0]
 8015cc8:	899b      	ldrh	r3, [r3, #12]
 8015cca:	b29b      	uxth	r3, r3
 8015ccc:	4618      	mov	r0, r3
 8015cce:	f7fc fa3f 	bl	8012150 <lwip_htons>
 8015cd2:	4603      	mov	r3, r0
 8015cd4:	b2db      	uxtb	r3, r3
 8015cd6:	f003 0304 	and.w	r3, r3, #4
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d118      	bne.n	8015d10 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015cde:	4b1b      	ldr	r3, [pc, #108]	; (8015d4c <tcp_input+0x804>)
 8015ce0:	6819      	ldr	r1, [r3, #0]
 8015ce2:	4b1b      	ldr	r3, [pc, #108]	; (8015d50 <tcp_input+0x808>)
 8015ce4:	881b      	ldrh	r3, [r3, #0]
 8015ce6:	461a      	mov	r2, r3
 8015ce8:	4b1a      	ldr	r3, [pc, #104]	; (8015d54 <tcp_input+0x80c>)
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015cee:	4b16      	ldr	r3, [pc, #88]	; (8015d48 <tcp_input+0x800>)
 8015cf0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015cf2:	885b      	ldrh	r3, [r3, #2]
 8015cf4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015cf6:	4a14      	ldr	r2, [pc, #80]	; (8015d48 <tcp_input+0x800>)
 8015cf8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015cfa:	8812      	ldrh	r2, [r2, #0]
 8015cfc:	b292      	uxth	r2, r2
 8015cfe:	9202      	str	r2, [sp, #8]
 8015d00:	9301      	str	r3, [sp, #4]
 8015d02:	4b15      	ldr	r3, [pc, #84]	; (8015d58 <tcp_input+0x810>)
 8015d04:	9300      	str	r3, [sp, #0]
 8015d06:	4b15      	ldr	r3, [pc, #84]	; (8015d5c <tcp_input+0x814>)
 8015d08:	4602      	mov	r2, r0
 8015d0a:	2000      	movs	r0, #0
 8015d0c:	f003 f81c 	bl	8018d48 <tcp_rst>
    pbuf_free(p);
 8015d10:	6878      	ldr	r0, [r7, #4]
 8015d12:	f7fd fdd5 	bl	80138c0 <pbuf_free>
  return;
 8015d16:	e00c      	b.n	8015d32 <tcp_input+0x7ea>
    goto dropped;
 8015d18:	bf00      	nop
 8015d1a:	e006      	b.n	8015d2a <tcp_input+0x7e2>
    goto dropped;
 8015d1c:	bf00      	nop
 8015d1e:	e004      	b.n	8015d2a <tcp_input+0x7e2>
    goto dropped;
 8015d20:	bf00      	nop
 8015d22:	e002      	b.n	8015d2a <tcp_input+0x7e2>
      goto dropped;
 8015d24:	bf00      	nop
 8015d26:	e000      	b.n	8015d2a <tcp_input+0x7e2>
      goto dropped;
 8015d28:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8015d2a:	6878      	ldr	r0, [r7, #4]
 8015d2c:	f7fd fdc8 	bl	80138c0 <pbuf_free>
 8015d30:	e000      	b.n	8015d34 <tcp_input+0x7ec>
  return;
 8015d32:	bf00      	nop
}
 8015d34:	3724      	adds	r7, #36	; 0x24
 8015d36:	46bd      	mov	sp, r7
 8015d38:	bd90      	pop	{r4, r7, pc}
 8015d3a:	bf00      	nop
 8015d3c:	2000c200 	.word	0x2000c200
 8015d40:	2000c1fc 	.word	0x2000c1fc
 8015d44:	2000c1cc 	.word	0x2000c1cc
 8015d48:	2000c1dc 	.word	0x2000c1dc
 8015d4c:	2000c1f0 	.word	0x2000c1f0
 8015d50:	2000c1f6 	.word	0x2000c1f6
 8015d54:	2000c1ec 	.word	0x2000c1ec
 8015d58:	20008a50 	.word	0x20008a50
 8015d5c:	20008a54 	.word	0x20008a54

08015d60 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8015d60:	b580      	push	{r7, lr}
 8015d62:	b082      	sub	sp, #8
 8015d64:	af00      	add	r7, sp, #0
 8015d66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d106      	bne.n	8015d7c <tcp_input_delayed_close+0x1c>
 8015d6e:	4b17      	ldr	r3, [pc, #92]	; (8015dcc <tcp_input_delayed_close+0x6c>)
 8015d70:	f240 225a 	movw	r2, #602	; 0x25a
 8015d74:	4916      	ldr	r1, [pc, #88]	; (8015dd0 <tcp_input_delayed_close+0x70>)
 8015d76:	4817      	ldr	r0, [pc, #92]	; (8015dd4 <tcp_input_delayed_close+0x74>)
 8015d78:	f008 faae 	bl	801e2d8 <printf>

  if (recv_flags & TF_CLOSED) {
 8015d7c:	4b16      	ldr	r3, [pc, #88]	; (8015dd8 <tcp_input_delayed_close+0x78>)
 8015d7e:	781b      	ldrb	r3, [r3, #0]
 8015d80:	f003 0310 	and.w	r3, r3, #16
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d01c      	beq.n	8015dc2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	8b5b      	ldrh	r3, [r3, #26]
 8015d8c:	f003 0310 	and.w	r3, r3, #16
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d10d      	bne.n	8015db0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d008      	beq.n	8015db0 <tcp_input_delayed_close+0x50>
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015da4:	687a      	ldr	r2, [r7, #4]
 8015da6:	6912      	ldr	r2, [r2, #16]
 8015da8:	f06f 010e 	mvn.w	r1, #14
 8015dac:	4610      	mov	r0, r2
 8015dae:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8015db0:	6879      	ldr	r1, [r7, #4]
 8015db2:	480a      	ldr	r0, [pc, #40]	; (8015ddc <tcp_input_delayed_close+0x7c>)
 8015db4:	f7ff fa50 	bl	8015258 <tcp_pcb_remove>
    tcp_free(pcb);
 8015db8:	6878      	ldr	r0, [r7, #4]
 8015dba:	f7fe f83d 	bl	8013e38 <tcp_free>
    return 1;
 8015dbe:	2301      	movs	r3, #1
 8015dc0:	e000      	b.n	8015dc4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8015dc2:	2300      	movs	r3, #0
}
 8015dc4:	4618      	mov	r0, r3
 8015dc6:	3708      	adds	r7, #8
 8015dc8:	46bd      	mov	sp, r7
 8015dca:	bd80      	pop	{r7, pc}
 8015dcc:	08025898 	.word	0x08025898
 8015dd0:	08025a68 	.word	0x08025a68
 8015dd4:	080258e4 	.word	0x080258e4
 8015dd8:	2000c1f9 	.word	0x2000c1f9
 8015ddc:	2000c1c0 	.word	0x2000c1c0

08015de0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8015de0:	b590      	push	{r4, r7, lr}
 8015de2:	b08b      	sub	sp, #44	; 0x2c
 8015de4:	af04      	add	r7, sp, #16
 8015de6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8015de8:	4b6f      	ldr	r3, [pc, #444]	; (8015fa8 <tcp_listen_input+0x1c8>)
 8015dea:	781b      	ldrb	r3, [r3, #0]
 8015dec:	f003 0304 	and.w	r3, r3, #4
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	f040 80d2 	bne.w	8015f9a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d106      	bne.n	8015e0a <tcp_listen_input+0x2a>
 8015dfc:	4b6b      	ldr	r3, [pc, #428]	; (8015fac <tcp_listen_input+0x1cc>)
 8015dfe:	f240 2281 	movw	r2, #641	; 0x281
 8015e02:	496b      	ldr	r1, [pc, #428]	; (8015fb0 <tcp_listen_input+0x1d0>)
 8015e04:	486b      	ldr	r0, [pc, #428]	; (8015fb4 <tcp_listen_input+0x1d4>)
 8015e06:	f008 fa67 	bl	801e2d8 <printf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8015e0a:	4b67      	ldr	r3, [pc, #412]	; (8015fa8 <tcp_listen_input+0x1c8>)
 8015e0c:	781b      	ldrb	r3, [r3, #0]
 8015e0e:	f003 0310 	and.w	r3, r3, #16
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d019      	beq.n	8015e4a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015e16:	4b68      	ldr	r3, [pc, #416]	; (8015fb8 <tcp_listen_input+0x1d8>)
 8015e18:	6819      	ldr	r1, [r3, #0]
 8015e1a:	4b68      	ldr	r3, [pc, #416]	; (8015fbc <tcp_listen_input+0x1dc>)
 8015e1c:	881b      	ldrh	r3, [r3, #0]
 8015e1e:	461a      	mov	r2, r3
 8015e20:	4b67      	ldr	r3, [pc, #412]	; (8015fc0 <tcp_listen_input+0x1e0>)
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015e26:	4b67      	ldr	r3, [pc, #412]	; (8015fc4 <tcp_listen_input+0x1e4>)
 8015e28:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015e2a:	885b      	ldrh	r3, [r3, #2]
 8015e2c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015e2e:	4a65      	ldr	r2, [pc, #404]	; (8015fc4 <tcp_listen_input+0x1e4>)
 8015e30:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015e32:	8812      	ldrh	r2, [r2, #0]
 8015e34:	b292      	uxth	r2, r2
 8015e36:	9202      	str	r2, [sp, #8]
 8015e38:	9301      	str	r3, [sp, #4]
 8015e3a:	4b63      	ldr	r3, [pc, #396]	; (8015fc8 <tcp_listen_input+0x1e8>)
 8015e3c:	9300      	str	r3, [sp, #0]
 8015e3e:	4b63      	ldr	r3, [pc, #396]	; (8015fcc <tcp_listen_input+0x1ec>)
 8015e40:	4602      	mov	r2, r0
 8015e42:	6878      	ldr	r0, [r7, #4]
 8015e44:	f002 ff80 	bl	8018d48 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8015e48:	e0a9      	b.n	8015f9e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8015e4a:	4b57      	ldr	r3, [pc, #348]	; (8015fa8 <tcp_listen_input+0x1c8>)
 8015e4c:	781b      	ldrb	r3, [r3, #0]
 8015e4e:	f003 0302 	and.w	r3, r3, #2
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	f000 80a3 	beq.w	8015f9e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	7d5b      	ldrb	r3, [r3, #21]
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	f7ff f927 	bl	80150b0 <tcp_alloc>
 8015e62:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8015e64:	697b      	ldr	r3, [r7, #20]
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d111      	bne.n	8015e8e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	699b      	ldr	r3, [r3, #24]
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d00a      	beq.n	8015e88 <tcp_listen_input+0xa8>
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	699b      	ldr	r3, [r3, #24]
 8015e76:	687a      	ldr	r2, [r7, #4]
 8015e78:	6910      	ldr	r0, [r2, #16]
 8015e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8015e7e:	2100      	movs	r1, #0
 8015e80:	4798      	blx	r3
 8015e82:	4603      	mov	r3, r0
 8015e84:	73bb      	strb	r3, [r7, #14]
      return;
 8015e86:	e08b      	b.n	8015fa0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8015e88:	23f0      	movs	r3, #240	; 0xf0
 8015e8a:	73bb      	strb	r3, [r7, #14]
      return;
 8015e8c:	e088      	b.n	8015fa0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8015e8e:	4b50      	ldr	r3, [pc, #320]	; (8015fd0 <tcp_listen_input+0x1f0>)
 8015e90:	695a      	ldr	r2, [r3, #20]
 8015e92:	697b      	ldr	r3, [r7, #20]
 8015e94:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8015e96:	4b4e      	ldr	r3, [pc, #312]	; (8015fd0 <tcp_listen_input+0x1f0>)
 8015e98:	691a      	ldr	r2, [r3, #16]
 8015e9a:	697b      	ldr	r3, [r7, #20]
 8015e9c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	8ada      	ldrh	r2, [r3, #22]
 8015ea2:	697b      	ldr	r3, [r7, #20]
 8015ea4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8015ea6:	4b47      	ldr	r3, [pc, #284]	; (8015fc4 <tcp_listen_input+0x1e4>)
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	881b      	ldrh	r3, [r3, #0]
 8015eac:	b29a      	uxth	r2, r3
 8015eae:	697b      	ldr	r3, [r7, #20]
 8015eb0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8015eb2:	697b      	ldr	r3, [r7, #20]
 8015eb4:	2203      	movs	r2, #3
 8015eb6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8015eb8:	4b41      	ldr	r3, [pc, #260]	; (8015fc0 <tcp_listen_input+0x1e0>)
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	1c5a      	adds	r2, r3, #1
 8015ebe:	697b      	ldr	r3, [r7, #20]
 8015ec0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8015ec2:	697b      	ldr	r3, [r7, #20]
 8015ec4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015ec6:	697b      	ldr	r3, [r7, #20]
 8015ec8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8015eca:	6978      	ldr	r0, [r7, #20]
 8015ecc:	f7ff fa58 	bl	8015380 <tcp_next_iss>
 8015ed0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8015ed2:	697b      	ldr	r3, [r7, #20]
 8015ed4:	693a      	ldr	r2, [r7, #16]
 8015ed6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8015ed8:	697b      	ldr	r3, [r7, #20]
 8015eda:	693a      	ldr	r2, [r7, #16]
 8015edc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8015ede:	697b      	ldr	r3, [r7, #20]
 8015ee0:	693a      	ldr	r2, [r7, #16]
 8015ee2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8015ee4:	697b      	ldr	r3, [r7, #20]
 8015ee6:	693a      	ldr	r2, [r7, #16]
 8015ee8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8015eea:	4b35      	ldr	r3, [pc, #212]	; (8015fc0 <tcp_listen_input+0x1e0>)
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	1e5a      	subs	r2, r3, #1
 8015ef0:	697b      	ldr	r3, [r7, #20]
 8015ef2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	691a      	ldr	r2, [r3, #16]
 8015ef8:	697b      	ldr	r3, [r7, #20]
 8015efa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8015efc:	697b      	ldr	r3, [r7, #20]
 8015efe:	687a      	ldr	r2, [r7, #4]
 8015f00:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	7a5b      	ldrb	r3, [r3, #9]
 8015f06:	f003 030c 	and.w	r3, r3, #12
 8015f0a:	b2da      	uxtb	r2, r3
 8015f0c:	697b      	ldr	r3, [r7, #20]
 8015f0e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	7a1a      	ldrb	r2, [r3, #8]
 8015f14:	697b      	ldr	r3, [r7, #20]
 8015f16:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8015f18:	4b2e      	ldr	r3, [pc, #184]	; (8015fd4 <tcp_listen_input+0x1f4>)
 8015f1a:	681a      	ldr	r2, [r3, #0]
 8015f1c:	697b      	ldr	r3, [r7, #20]
 8015f1e:	60da      	str	r2, [r3, #12]
 8015f20:	4a2c      	ldr	r2, [pc, #176]	; (8015fd4 <tcp_listen_input+0x1f4>)
 8015f22:	697b      	ldr	r3, [r7, #20]
 8015f24:	6013      	str	r3, [r2, #0]
 8015f26:	f003 f8d1 	bl	80190cc <tcp_timer_needed>
 8015f2a:	4b2b      	ldr	r3, [pc, #172]	; (8015fd8 <tcp_listen_input+0x1f8>)
 8015f2c:	2201      	movs	r2, #1
 8015f2e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8015f30:	6978      	ldr	r0, [r7, #20]
 8015f32:	f001 fd8f 	bl	8017a54 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8015f36:	4b23      	ldr	r3, [pc, #140]	; (8015fc4 <tcp_listen_input+0x1e4>)
 8015f38:	681b      	ldr	r3, [r3, #0]
 8015f3a:	89db      	ldrh	r3, [r3, #14]
 8015f3c:	b29a      	uxth	r2, r3
 8015f3e:	697b      	ldr	r3, [r7, #20]
 8015f40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8015f44:	697b      	ldr	r3, [r7, #20]
 8015f46:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015f4a:	697b      	ldr	r3, [r7, #20]
 8015f4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8015f50:	697b      	ldr	r3, [r7, #20]
 8015f52:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8015f54:	697b      	ldr	r3, [r7, #20]
 8015f56:	3304      	adds	r3, #4
 8015f58:	4618      	mov	r0, r3
 8015f5a:	f006 fe5d 	bl	801cc18 <ip4_route>
 8015f5e:	4601      	mov	r1, r0
 8015f60:	697b      	ldr	r3, [r7, #20]
 8015f62:	3304      	adds	r3, #4
 8015f64:	461a      	mov	r2, r3
 8015f66:	4620      	mov	r0, r4
 8015f68:	f7ff fa30 	bl	80153cc <tcp_eff_send_mss_netif>
 8015f6c:	4603      	mov	r3, r0
 8015f6e:	461a      	mov	r2, r3
 8015f70:	697b      	ldr	r3, [r7, #20]
 8015f72:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8015f74:	2112      	movs	r1, #18
 8015f76:	6978      	ldr	r0, [r7, #20]
 8015f78:	f002 f844 	bl	8018004 <tcp_enqueue_flags>
 8015f7c:	4603      	mov	r3, r0
 8015f7e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8015f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d004      	beq.n	8015f92 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8015f88:	2100      	movs	r1, #0
 8015f8a:	6978      	ldr	r0, [r7, #20]
 8015f8c:	f7fe f97e 	bl	801428c <tcp_abandon>
      return;
 8015f90:	e006      	b.n	8015fa0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8015f92:	6978      	ldr	r0, [r7, #20]
 8015f94:	f002 f924 	bl	80181e0 <tcp_output>
  return;
 8015f98:	e001      	b.n	8015f9e <tcp_listen_input+0x1be>
    return;
 8015f9a:	bf00      	nop
 8015f9c:	e000      	b.n	8015fa0 <tcp_listen_input+0x1c0>
  return;
 8015f9e:	bf00      	nop
}
 8015fa0:	371c      	adds	r7, #28
 8015fa2:	46bd      	mov	sp, r7
 8015fa4:	bd90      	pop	{r4, r7, pc}
 8015fa6:	bf00      	nop
 8015fa8:	2000c1f8 	.word	0x2000c1f8
 8015fac:	08025898 	.word	0x08025898
 8015fb0:	08025a90 	.word	0x08025a90
 8015fb4:	080258e4 	.word	0x080258e4
 8015fb8:	2000c1f0 	.word	0x2000c1f0
 8015fbc:	2000c1f6 	.word	0x2000c1f6
 8015fc0:	2000c1ec 	.word	0x2000c1ec
 8015fc4:	2000c1dc 	.word	0x2000c1dc
 8015fc8:	20008a50 	.word	0x20008a50
 8015fcc:	20008a54 	.word	0x20008a54
 8015fd0:	20008a40 	.word	0x20008a40
 8015fd4:	2000c1c0 	.word	0x2000c1c0
 8015fd8:	2000c1c8 	.word	0x2000c1c8

08015fdc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8015fdc:	b580      	push	{r7, lr}
 8015fde:	b086      	sub	sp, #24
 8015fe0:	af04      	add	r7, sp, #16
 8015fe2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8015fe4:	4b2f      	ldr	r3, [pc, #188]	; (80160a4 <tcp_timewait_input+0xc8>)
 8015fe6:	781b      	ldrb	r3, [r3, #0]
 8015fe8:	f003 0304 	and.w	r3, r3, #4
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d153      	bne.n	8016098 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	d106      	bne.n	8016004 <tcp_timewait_input+0x28>
 8015ff6:	4b2c      	ldr	r3, [pc, #176]	; (80160a8 <tcp_timewait_input+0xcc>)
 8015ff8:	f240 22ee 	movw	r2, #750	; 0x2ee
 8015ffc:	492b      	ldr	r1, [pc, #172]	; (80160ac <tcp_timewait_input+0xd0>)
 8015ffe:	482c      	ldr	r0, [pc, #176]	; (80160b0 <tcp_timewait_input+0xd4>)
 8016000:	f008 f96a 	bl	801e2d8 <printf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8016004:	4b27      	ldr	r3, [pc, #156]	; (80160a4 <tcp_timewait_input+0xc8>)
 8016006:	781b      	ldrb	r3, [r3, #0]
 8016008:	f003 0302 	and.w	r3, r3, #2
 801600c:	2b00      	cmp	r3, #0
 801600e:	d02a      	beq.n	8016066 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8016010:	4b28      	ldr	r3, [pc, #160]	; (80160b4 <tcp_timewait_input+0xd8>)
 8016012:	681a      	ldr	r2, [r3, #0]
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016018:	1ad3      	subs	r3, r2, r3
 801601a:	2b00      	cmp	r3, #0
 801601c:	db2d      	blt.n	801607a <tcp_timewait_input+0x9e>
 801601e:	4b25      	ldr	r3, [pc, #148]	; (80160b4 <tcp_timewait_input+0xd8>)
 8016020:	681a      	ldr	r2, [r3, #0]
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016026:	6879      	ldr	r1, [r7, #4]
 8016028:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801602a:	440b      	add	r3, r1
 801602c:	1ad3      	subs	r3, r2, r3
 801602e:	2b00      	cmp	r3, #0
 8016030:	dc23      	bgt.n	801607a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016032:	4b21      	ldr	r3, [pc, #132]	; (80160b8 <tcp_timewait_input+0xdc>)
 8016034:	6819      	ldr	r1, [r3, #0]
 8016036:	4b21      	ldr	r3, [pc, #132]	; (80160bc <tcp_timewait_input+0xe0>)
 8016038:	881b      	ldrh	r3, [r3, #0]
 801603a:	461a      	mov	r2, r3
 801603c:	4b1d      	ldr	r3, [pc, #116]	; (80160b4 <tcp_timewait_input+0xd8>)
 801603e:	681b      	ldr	r3, [r3, #0]
 8016040:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016042:	4b1f      	ldr	r3, [pc, #124]	; (80160c0 <tcp_timewait_input+0xe4>)
 8016044:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016046:	885b      	ldrh	r3, [r3, #2]
 8016048:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801604a:	4a1d      	ldr	r2, [pc, #116]	; (80160c0 <tcp_timewait_input+0xe4>)
 801604c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801604e:	8812      	ldrh	r2, [r2, #0]
 8016050:	b292      	uxth	r2, r2
 8016052:	9202      	str	r2, [sp, #8]
 8016054:	9301      	str	r3, [sp, #4]
 8016056:	4b1b      	ldr	r3, [pc, #108]	; (80160c4 <tcp_timewait_input+0xe8>)
 8016058:	9300      	str	r3, [sp, #0]
 801605a:	4b1b      	ldr	r3, [pc, #108]	; (80160c8 <tcp_timewait_input+0xec>)
 801605c:	4602      	mov	r2, r0
 801605e:	6878      	ldr	r0, [r7, #4]
 8016060:	f002 fe72 	bl	8018d48 <tcp_rst>
      return;
 8016064:	e01b      	b.n	801609e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8016066:	4b0f      	ldr	r3, [pc, #60]	; (80160a4 <tcp_timewait_input+0xc8>)
 8016068:	781b      	ldrb	r3, [r3, #0]
 801606a:	f003 0301 	and.w	r3, r3, #1
 801606e:	2b00      	cmp	r3, #0
 8016070:	d003      	beq.n	801607a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8016072:	4b16      	ldr	r3, [pc, #88]	; (80160cc <tcp_timewait_input+0xf0>)
 8016074:	681a      	ldr	r2, [r3, #0]
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801607a:	4b10      	ldr	r3, [pc, #64]	; (80160bc <tcp_timewait_input+0xe0>)
 801607c:	881b      	ldrh	r3, [r3, #0]
 801607e:	2b00      	cmp	r3, #0
 8016080:	d00c      	beq.n	801609c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	8b5b      	ldrh	r3, [r3, #26]
 8016086:	f043 0302 	orr.w	r3, r3, #2
 801608a:	b29a      	uxth	r2, r3
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016090:	6878      	ldr	r0, [r7, #4]
 8016092:	f002 f8a5 	bl	80181e0 <tcp_output>
  }
  return;
 8016096:	e001      	b.n	801609c <tcp_timewait_input+0xc0>
    return;
 8016098:	bf00      	nop
 801609a:	e000      	b.n	801609e <tcp_timewait_input+0xc2>
  return;
 801609c:	bf00      	nop
}
 801609e:	3708      	adds	r7, #8
 80160a0:	46bd      	mov	sp, r7
 80160a2:	bd80      	pop	{r7, pc}
 80160a4:	2000c1f8 	.word	0x2000c1f8
 80160a8:	08025898 	.word	0x08025898
 80160ac:	08025ab0 	.word	0x08025ab0
 80160b0:	080258e4 	.word	0x080258e4
 80160b4:	2000c1ec 	.word	0x2000c1ec
 80160b8:	2000c1f0 	.word	0x2000c1f0
 80160bc:	2000c1f6 	.word	0x2000c1f6
 80160c0:	2000c1dc 	.word	0x2000c1dc
 80160c4:	20008a50 	.word	0x20008a50
 80160c8:	20008a54 	.word	0x20008a54
 80160cc:	2000c1b4 	.word	0x2000c1b4

080160d0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80160d0:	b590      	push	{r4, r7, lr}
 80160d2:	b08d      	sub	sp, #52	; 0x34
 80160d4:	af04      	add	r7, sp, #16
 80160d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80160d8:	2300      	movs	r3, #0
 80160da:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80160dc:	2300      	movs	r3, #0
 80160de:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d106      	bne.n	80160f4 <tcp_process+0x24>
 80160e6:	4b9d      	ldr	r3, [pc, #628]	; (801635c <tcp_process+0x28c>)
 80160e8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80160ec:	499c      	ldr	r1, [pc, #624]	; (8016360 <tcp_process+0x290>)
 80160ee:	489d      	ldr	r0, [pc, #628]	; (8016364 <tcp_process+0x294>)
 80160f0:	f008 f8f2 	bl	801e2d8 <printf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80160f4:	4b9c      	ldr	r3, [pc, #624]	; (8016368 <tcp_process+0x298>)
 80160f6:	781b      	ldrb	r3, [r3, #0]
 80160f8:	f003 0304 	and.w	r3, r3, #4
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d04e      	beq.n	801619e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	7d1b      	ldrb	r3, [r3, #20]
 8016104:	2b02      	cmp	r3, #2
 8016106:	d108      	bne.n	801611a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801610c:	4b97      	ldr	r3, [pc, #604]	; (801636c <tcp_process+0x29c>)
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	429a      	cmp	r2, r3
 8016112:	d123      	bne.n	801615c <tcp_process+0x8c>
        acceptable = 1;
 8016114:	2301      	movs	r3, #1
 8016116:	76fb      	strb	r3, [r7, #27]
 8016118:	e020      	b.n	801615c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801611e:	4b94      	ldr	r3, [pc, #592]	; (8016370 <tcp_process+0x2a0>)
 8016120:	681b      	ldr	r3, [r3, #0]
 8016122:	429a      	cmp	r2, r3
 8016124:	d102      	bne.n	801612c <tcp_process+0x5c>
        acceptable = 1;
 8016126:	2301      	movs	r3, #1
 8016128:	76fb      	strb	r3, [r7, #27]
 801612a:	e017      	b.n	801615c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801612c:	4b90      	ldr	r3, [pc, #576]	; (8016370 <tcp_process+0x2a0>)
 801612e:	681a      	ldr	r2, [r3, #0]
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016134:	1ad3      	subs	r3, r2, r3
 8016136:	2b00      	cmp	r3, #0
 8016138:	db10      	blt.n	801615c <tcp_process+0x8c>
 801613a:	4b8d      	ldr	r3, [pc, #564]	; (8016370 <tcp_process+0x2a0>)
 801613c:	681a      	ldr	r2, [r3, #0]
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016142:	6879      	ldr	r1, [r7, #4]
 8016144:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016146:	440b      	add	r3, r1
 8016148:	1ad3      	subs	r3, r2, r3
 801614a:	2b00      	cmp	r3, #0
 801614c:	dc06      	bgt.n	801615c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	8b5b      	ldrh	r3, [r3, #26]
 8016152:	f043 0302 	orr.w	r3, r3, #2
 8016156:	b29a      	uxth	r2, r3
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801615c:	7efb      	ldrb	r3, [r7, #27]
 801615e:	2b00      	cmp	r3, #0
 8016160:	d01b      	beq.n	801619a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	7d1b      	ldrb	r3, [r3, #20]
 8016166:	2b00      	cmp	r3, #0
 8016168:	d106      	bne.n	8016178 <tcp_process+0xa8>
 801616a:	4b7c      	ldr	r3, [pc, #496]	; (801635c <tcp_process+0x28c>)
 801616c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8016170:	4980      	ldr	r1, [pc, #512]	; (8016374 <tcp_process+0x2a4>)
 8016172:	487c      	ldr	r0, [pc, #496]	; (8016364 <tcp_process+0x294>)
 8016174:	f008 f8b0 	bl	801e2d8 <printf>
      recv_flags |= TF_RESET;
 8016178:	4b7f      	ldr	r3, [pc, #508]	; (8016378 <tcp_process+0x2a8>)
 801617a:	781b      	ldrb	r3, [r3, #0]
 801617c:	f043 0308 	orr.w	r3, r3, #8
 8016180:	b2da      	uxtb	r2, r3
 8016182:	4b7d      	ldr	r3, [pc, #500]	; (8016378 <tcp_process+0x2a8>)
 8016184:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	8b5b      	ldrh	r3, [r3, #26]
 801618a:	f023 0301 	bic.w	r3, r3, #1
 801618e:	b29a      	uxth	r2, r3
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8016194:	f06f 030d 	mvn.w	r3, #13
 8016198:	e37a      	b.n	8016890 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801619a:	2300      	movs	r3, #0
 801619c:	e378      	b.n	8016890 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801619e:	4b72      	ldr	r3, [pc, #456]	; (8016368 <tcp_process+0x298>)
 80161a0:	781b      	ldrb	r3, [r3, #0]
 80161a2:	f003 0302 	and.w	r3, r3, #2
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d010      	beq.n	80161cc <tcp_process+0xfc>
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	7d1b      	ldrb	r3, [r3, #20]
 80161ae:	2b02      	cmp	r3, #2
 80161b0:	d00c      	beq.n	80161cc <tcp_process+0xfc>
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	7d1b      	ldrb	r3, [r3, #20]
 80161b6:	2b03      	cmp	r3, #3
 80161b8:	d008      	beq.n	80161cc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	8b5b      	ldrh	r3, [r3, #26]
 80161be:	f043 0302 	orr.w	r3, r3, #2
 80161c2:	b29a      	uxth	r2, r3
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80161c8:	2300      	movs	r3, #0
 80161ca:	e361      	b.n	8016890 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	8b5b      	ldrh	r3, [r3, #26]
 80161d0:	f003 0310 	and.w	r3, r3, #16
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d103      	bne.n	80161e0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80161d8:	4b68      	ldr	r3, [pc, #416]	; (801637c <tcp_process+0x2ac>)
 80161da:	681a      	ldr	r2, [r3, #0]
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	2200      	movs	r2, #0
 80161e4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	2200      	movs	r2, #0
 80161ec:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80161f0:	6878      	ldr	r0, [r7, #4]
 80161f2:	f001 fc2f 	bl	8017a54 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	7d1b      	ldrb	r3, [r3, #20]
 80161fa:	3b02      	subs	r3, #2
 80161fc:	2b07      	cmp	r3, #7
 80161fe:	f200 8337 	bhi.w	8016870 <tcp_process+0x7a0>
 8016202:	a201      	add	r2, pc, #4	; (adr r2, 8016208 <tcp_process+0x138>)
 8016204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016208:	08016229 	.word	0x08016229
 801620c:	08016459 	.word	0x08016459
 8016210:	080165d1 	.word	0x080165d1
 8016214:	080165fb 	.word	0x080165fb
 8016218:	0801671f 	.word	0x0801671f
 801621c:	080165d1 	.word	0x080165d1
 8016220:	080167ab 	.word	0x080167ab
 8016224:	0801683b 	.word	0x0801683b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8016228:	4b4f      	ldr	r3, [pc, #316]	; (8016368 <tcp_process+0x298>)
 801622a:	781b      	ldrb	r3, [r3, #0]
 801622c:	f003 0310 	and.w	r3, r3, #16
 8016230:	2b00      	cmp	r3, #0
 8016232:	f000 80e4 	beq.w	80163fe <tcp_process+0x32e>
 8016236:	4b4c      	ldr	r3, [pc, #304]	; (8016368 <tcp_process+0x298>)
 8016238:	781b      	ldrb	r3, [r3, #0]
 801623a:	f003 0302 	and.w	r3, r3, #2
 801623e:	2b00      	cmp	r3, #0
 8016240:	f000 80dd 	beq.w	80163fe <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016248:	1c5a      	adds	r2, r3, #1
 801624a:	4b48      	ldr	r3, [pc, #288]	; (801636c <tcp_process+0x29c>)
 801624c:	681b      	ldr	r3, [r3, #0]
 801624e:	429a      	cmp	r2, r3
 8016250:	f040 80d5 	bne.w	80163fe <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8016254:	4b46      	ldr	r3, [pc, #280]	; (8016370 <tcp_process+0x2a0>)
 8016256:	681b      	ldr	r3, [r3, #0]
 8016258:	1c5a      	adds	r2, r3, #1
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8016266:	4b41      	ldr	r3, [pc, #260]	; (801636c <tcp_process+0x29c>)
 8016268:	681a      	ldr	r2, [r3, #0]
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801626e:	4b44      	ldr	r3, [pc, #272]	; (8016380 <tcp_process+0x2b0>)
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	89db      	ldrh	r3, [r3, #14]
 8016274:	b29a      	uxth	r2, r3
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8016288:	4b39      	ldr	r3, [pc, #228]	; (8016370 <tcp_process+0x2a0>)
 801628a:	681b      	ldr	r3, [r3, #0]
 801628c:	1e5a      	subs	r2, r3, #1
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	2204      	movs	r2, #4
 8016296:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	3304      	adds	r3, #4
 80162a0:	4618      	mov	r0, r3
 80162a2:	f006 fcb9 	bl	801cc18 <ip4_route>
 80162a6:	4601      	mov	r1, r0
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	3304      	adds	r3, #4
 80162ac:	461a      	mov	r2, r3
 80162ae:	4620      	mov	r0, r4
 80162b0:	f7ff f88c 	bl	80153cc <tcp_eff_send_mss_netif>
 80162b4:	4603      	mov	r3, r0
 80162b6:	461a      	mov	r2, r3
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80162c0:	009a      	lsls	r2, r3, #2
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80162c6:	005b      	lsls	r3, r3, #1
 80162c8:	f241 111c 	movw	r1, #4380	; 0x111c
 80162cc:	428b      	cmp	r3, r1
 80162ce:	bf38      	it	cc
 80162d0:	460b      	movcc	r3, r1
 80162d2:	429a      	cmp	r2, r3
 80162d4:	d204      	bcs.n	80162e0 <tcp_process+0x210>
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80162da:	009b      	lsls	r3, r3, #2
 80162dc:	b29b      	uxth	r3, r3
 80162de:	e00d      	b.n	80162fc <tcp_process+0x22c>
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80162e4:	005b      	lsls	r3, r3, #1
 80162e6:	f241 121c 	movw	r2, #4380	; 0x111c
 80162ea:	4293      	cmp	r3, r2
 80162ec:	d904      	bls.n	80162f8 <tcp_process+0x228>
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80162f2:	005b      	lsls	r3, r3, #1
 80162f4:	b29b      	uxth	r3, r3
 80162f6:	e001      	b.n	80162fc <tcp_process+0x22c>
 80162f8:	f241 131c 	movw	r3, #4380	; 0x111c
 80162fc:	687a      	ldr	r2, [r7, #4]
 80162fe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016308:	2b00      	cmp	r3, #0
 801630a:	d106      	bne.n	801631a <tcp_process+0x24a>
 801630c:	4b13      	ldr	r3, [pc, #76]	; (801635c <tcp_process+0x28c>)
 801630e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8016312:	491c      	ldr	r1, [pc, #112]	; (8016384 <tcp_process+0x2b4>)
 8016314:	4813      	ldr	r0, [pc, #76]	; (8016364 <tcp_process+0x294>)
 8016316:	f007 ffdf 	bl	801e2d8 <printf>
        --pcb->snd_queuelen;
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016320:	3b01      	subs	r3, #1
 8016322:	b29a      	uxth	r2, r3
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801632e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8016330:	69fb      	ldr	r3, [r7, #28]
 8016332:	2b00      	cmp	r3, #0
 8016334:	d12a      	bne.n	801638c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801633a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801633c:	69fb      	ldr	r3, [r7, #28]
 801633e:	2b00      	cmp	r3, #0
 8016340:	d106      	bne.n	8016350 <tcp_process+0x280>
 8016342:	4b06      	ldr	r3, [pc, #24]	; (801635c <tcp_process+0x28c>)
 8016344:	f44f 725d 	mov.w	r2, #884	; 0x374
 8016348:	490f      	ldr	r1, [pc, #60]	; (8016388 <tcp_process+0x2b8>)
 801634a:	4806      	ldr	r0, [pc, #24]	; (8016364 <tcp_process+0x294>)
 801634c:	f007 ffc4 	bl	801e2d8 <printf>
          pcb->unsent = rseg->next;
 8016350:	69fb      	ldr	r3, [r7, #28]
 8016352:	681a      	ldr	r2, [r3, #0]
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	66da      	str	r2, [r3, #108]	; 0x6c
 8016358:	e01c      	b.n	8016394 <tcp_process+0x2c4>
 801635a:	bf00      	nop
 801635c:	08025898 	.word	0x08025898
 8016360:	08025ad0 	.word	0x08025ad0
 8016364:	080258e4 	.word	0x080258e4
 8016368:	2000c1f8 	.word	0x2000c1f8
 801636c:	2000c1f0 	.word	0x2000c1f0
 8016370:	2000c1ec 	.word	0x2000c1ec
 8016374:	08025aec 	.word	0x08025aec
 8016378:	2000c1f9 	.word	0x2000c1f9
 801637c:	2000c1b4 	.word	0x2000c1b4
 8016380:	2000c1dc 	.word	0x2000c1dc
 8016384:	08025b0c 	.word	0x08025b0c
 8016388:	08025b24 	.word	0x08025b24
        } else {
          pcb->unacked = rseg->next;
 801638c:	69fb      	ldr	r3, [r7, #28]
 801638e:	681a      	ldr	r2, [r3, #0]
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8016394:	69f8      	ldr	r0, [r7, #28]
 8016396:	f7fe fd22 	bl	8014dde <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d104      	bne.n	80163ac <tcp_process+0x2dc>
          pcb->rtime = -1;
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80163a8:	861a      	strh	r2, [r3, #48]	; 0x30
 80163aa:	e006      	b.n	80163ba <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	2200      	movs	r2, #0
 80163b0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	2200      	movs	r2, #0
 80163b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d00a      	beq.n	80163da <tcp_process+0x30a>
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80163ca:	687a      	ldr	r2, [r7, #4]
 80163cc:	6910      	ldr	r0, [r2, #16]
 80163ce:	2200      	movs	r2, #0
 80163d0:	6879      	ldr	r1, [r7, #4]
 80163d2:	4798      	blx	r3
 80163d4:	4603      	mov	r3, r0
 80163d6:	76bb      	strb	r3, [r7, #26]
 80163d8:	e001      	b.n	80163de <tcp_process+0x30e>
 80163da:	2300      	movs	r3, #0
 80163dc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80163de:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80163e2:	f113 0f0d 	cmn.w	r3, #13
 80163e6:	d102      	bne.n	80163ee <tcp_process+0x31e>
          return ERR_ABRT;
 80163e8:	f06f 030c 	mvn.w	r3, #12
 80163ec:	e250      	b.n	8016890 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	8b5b      	ldrh	r3, [r3, #26]
 80163f2:	f043 0302 	orr.w	r3, r3, #2
 80163f6:	b29a      	uxth	r2, r3
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80163fc:	e23a      	b.n	8016874 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80163fe:	4b98      	ldr	r3, [pc, #608]	; (8016660 <tcp_process+0x590>)
 8016400:	781b      	ldrb	r3, [r3, #0]
 8016402:	f003 0310 	and.w	r3, r3, #16
 8016406:	2b00      	cmp	r3, #0
 8016408:	f000 8234 	beq.w	8016874 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801640c:	4b95      	ldr	r3, [pc, #596]	; (8016664 <tcp_process+0x594>)
 801640e:	6819      	ldr	r1, [r3, #0]
 8016410:	4b95      	ldr	r3, [pc, #596]	; (8016668 <tcp_process+0x598>)
 8016412:	881b      	ldrh	r3, [r3, #0]
 8016414:	461a      	mov	r2, r3
 8016416:	4b95      	ldr	r3, [pc, #596]	; (801666c <tcp_process+0x59c>)
 8016418:	681b      	ldr	r3, [r3, #0]
 801641a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801641c:	4b94      	ldr	r3, [pc, #592]	; (8016670 <tcp_process+0x5a0>)
 801641e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016420:	885b      	ldrh	r3, [r3, #2]
 8016422:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016424:	4a92      	ldr	r2, [pc, #584]	; (8016670 <tcp_process+0x5a0>)
 8016426:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016428:	8812      	ldrh	r2, [r2, #0]
 801642a:	b292      	uxth	r2, r2
 801642c:	9202      	str	r2, [sp, #8]
 801642e:	9301      	str	r3, [sp, #4]
 8016430:	4b90      	ldr	r3, [pc, #576]	; (8016674 <tcp_process+0x5a4>)
 8016432:	9300      	str	r3, [sp, #0]
 8016434:	4b90      	ldr	r3, [pc, #576]	; (8016678 <tcp_process+0x5a8>)
 8016436:	4602      	mov	r2, r0
 8016438:	6878      	ldr	r0, [r7, #4]
 801643a:	f002 fc85 	bl	8018d48 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016444:	2b05      	cmp	r3, #5
 8016446:	f200 8215 	bhi.w	8016874 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	2200      	movs	r2, #0
 801644e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8016450:	6878      	ldr	r0, [r7, #4]
 8016452:	f002 fa4f 	bl	80188f4 <tcp_rexmit_rto>
      break;
 8016456:	e20d      	b.n	8016874 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8016458:	4b81      	ldr	r3, [pc, #516]	; (8016660 <tcp_process+0x590>)
 801645a:	781b      	ldrb	r3, [r3, #0]
 801645c:	f003 0310 	and.w	r3, r3, #16
 8016460:	2b00      	cmp	r3, #0
 8016462:	f000 80a1 	beq.w	80165a8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016466:	4b7f      	ldr	r3, [pc, #508]	; (8016664 <tcp_process+0x594>)
 8016468:	681a      	ldr	r2, [r3, #0]
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801646e:	1ad3      	subs	r3, r2, r3
 8016470:	3b01      	subs	r3, #1
 8016472:	2b00      	cmp	r3, #0
 8016474:	db7e      	blt.n	8016574 <tcp_process+0x4a4>
 8016476:	4b7b      	ldr	r3, [pc, #492]	; (8016664 <tcp_process+0x594>)
 8016478:	681a      	ldr	r2, [r3, #0]
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801647e:	1ad3      	subs	r3, r2, r3
 8016480:	2b00      	cmp	r3, #0
 8016482:	dc77      	bgt.n	8016574 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	2204      	movs	r2, #4
 8016488:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801648e:	2b00      	cmp	r3, #0
 8016490:	d102      	bne.n	8016498 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8016492:	23fa      	movs	r3, #250	; 0xfa
 8016494:	76bb      	strb	r3, [r7, #26]
 8016496:	e01d      	b.n	80164d4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801649c:	699b      	ldr	r3, [r3, #24]
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d106      	bne.n	80164b0 <tcp_process+0x3e0>
 80164a2:	4b76      	ldr	r3, [pc, #472]	; (801667c <tcp_process+0x5ac>)
 80164a4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80164a8:	4975      	ldr	r1, [pc, #468]	; (8016680 <tcp_process+0x5b0>)
 80164aa:	4876      	ldr	r0, [pc, #472]	; (8016684 <tcp_process+0x5b4>)
 80164ac:	f007 ff14 	bl	801e2d8 <printf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80164b4:	699b      	ldr	r3, [r3, #24]
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d00a      	beq.n	80164d0 <tcp_process+0x400>
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80164be:	699b      	ldr	r3, [r3, #24]
 80164c0:	687a      	ldr	r2, [r7, #4]
 80164c2:	6910      	ldr	r0, [r2, #16]
 80164c4:	2200      	movs	r2, #0
 80164c6:	6879      	ldr	r1, [r7, #4]
 80164c8:	4798      	blx	r3
 80164ca:	4603      	mov	r3, r0
 80164cc:	76bb      	strb	r3, [r7, #26]
 80164ce:	e001      	b.n	80164d4 <tcp_process+0x404>
 80164d0:	23f0      	movs	r3, #240	; 0xf0
 80164d2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80164d4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d00a      	beq.n	80164f2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80164dc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80164e0:	f113 0f0d 	cmn.w	r3, #13
 80164e4:	d002      	beq.n	80164ec <tcp_process+0x41c>
              tcp_abort(pcb);
 80164e6:	6878      	ldr	r0, [r7, #4]
 80164e8:	f7fd ff8e 	bl	8014408 <tcp_abort>
            }
            return ERR_ABRT;
 80164ec:	f06f 030c 	mvn.w	r3, #12
 80164f0:	e1ce      	b.n	8016890 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80164f2:	6878      	ldr	r0, [r7, #4]
 80164f4:	f000 fae0 	bl	8016ab8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80164f8:	4b63      	ldr	r3, [pc, #396]	; (8016688 <tcp_process+0x5b8>)
 80164fa:	881b      	ldrh	r3, [r3, #0]
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d005      	beq.n	801650c <tcp_process+0x43c>
            recv_acked--;
 8016500:	4b61      	ldr	r3, [pc, #388]	; (8016688 <tcp_process+0x5b8>)
 8016502:	881b      	ldrh	r3, [r3, #0]
 8016504:	3b01      	subs	r3, #1
 8016506:	b29a      	uxth	r2, r3
 8016508:	4b5f      	ldr	r3, [pc, #380]	; (8016688 <tcp_process+0x5b8>)
 801650a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016510:	009a      	lsls	r2, r3, #2
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016516:	005b      	lsls	r3, r3, #1
 8016518:	f241 111c 	movw	r1, #4380	; 0x111c
 801651c:	428b      	cmp	r3, r1
 801651e:	bf38      	it	cc
 8016520:	460b      	movcc	r3, r1
 8016522:	429a      	cmp	r2, r3
 8016524:	d204      	bcs.n	8016530 <tcp_process+0x460>
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801652a:	009b      	lsls	r3, r3, #2
 801652c:	b29b      	uxth	r3, r3
 801652e:	e00d      	b.n	801654c <tcp_process+0x47c>
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016534:	005b      	lsls	r3, r3, #1
 8016536:	f241 121c 	movw	r2, #4380	; 0x111c
 801653a:	4293      	cmp	r3, r2
 801653c:	d904      	bls.n	8016548 <tcp_process+0x478>
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016542:	005b      	lsls	r3, r3, #1
 8016544:	b29b      	uxth	r3, r3
 8016546:	e001      	b.n	801654c <tcp_process+0x47c>
 8016548:	f241 131c 	movw	r3, #4380	; 0x111c
 801654c:	687a      	ldr	r2, [r7, #4]
 801654e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8016552:	4b4e      	ldr	r3, [pc, #312]	; (801668c <tcp_process+0x5bc>)
 8016554:	781b      	ldrb	r3, [r3, #0]
 8016556:	f003 0320 	and.w	r3, r3, #32
 801655a:	2b00      	cmp	r3, #0
 801655c:	d037      	beq.n	80165ce <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	8b5b      	ldrh	r3, [r3, #26]
 8016562:	f043 0302 	orr.w	r3, r3, #2
 8016566:	b29a      	uxth	r2, r3
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	2207      	movs	r2, #7
 8016570:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8016572:	e02c      	b.n	80165ce <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016574:	4b3b      	ldr	r3, [pc, #236]	; (8016664 <tcp_process+0x594>)
 8016576:	6819      	ldr	r1, [r3, #0]
 8016578:	4b3b      	ldr	r3, [pc, #236]	; (8016668 <tcp_process+0x598>)
 801657a:	881b      	ldrh	r3, [r3, #0]
 801657c:	461a      	mov	r2, r3
 801657e:	4b3b      	ldr	r3, [pc, #236]	; (801666c <tcp_process+0x59c>)
 8016580:	681b      	ldr	r3, [r3, #0]
 8016582:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016584:	4b3a      	ldr	r3, [pc, #232]	; (8016670 <tcp_process+0x5a0>)
 8016586:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016588:	885b      	ldrh	r3, [r3, #2]
 801658a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801658c:	4a38      	ldr	r2, [pc, #224]	; (8016670 <tcp_process+0x5a0>)
 801658e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016590:	8812      	ldrh	r2, [r2, #0]
 8016592:	b292      	uxth	r2, r2
 8016594:	9202      	str	r2, [sp, #8]
 8016596:	9301      	str	r3, [sp, #4]
 8016598:	4b36      	ldr	r3, [pc, #216]	; (8016674 <tcp_process+0x5a4>)
 801659a:	9300      	str	r3, [sp, #0]
 801659c:	4b36      	ldr	r3, [pc, #216]	; (8016678 <tcp_process+0x5a8>)
 801659e:	4602      	mov	r2, r0
 80165a0:	6878      	ldr	r0, [r7, #4]
 80165a2:	f002 fbd1 	bl	8018d48 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80165a6:	e167      	b.n	8016878 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80165a8:	4b2d      	ldr	r3, [pc, #180]	; (8016660 <tcp_process+0x590>)
 80165aa:	781b      	ldrb	r3, [r3, #0]
 80165ac:	f003 0302 	and.w	r3, r3, #2
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	f000 8161 	beq.w	8016878 <tcp_process+0x7a8>
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165ba:	1e5a      	subs	r2, r3, #1
 80165bc:	4b2b      	ldr	r3, [pc, #172]	; (801666c <tcp_process+0x59c>)
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	429a      	cmp	r2, r3
 80165c2:	f040 8159 	bne.w	8016878 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80165c6:	6878      	ldr	r0, [r7, #4]
 80165c8:	f002 f9b6 	bl	8018938 <tcp_rexmit>
      break;
 80165cc:	e154      	b.n	8016878 <tcp_process+0x7a8>
 80165ce:	e153      	b.n	8016878 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80165d0:	6878      	ldr	r0, [r7, #4]
 80165d2:	f000 fa71 	bl	8016ab8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80165d6:	4b2d      	ldr	r3, [pc, #180]	; (801668c <tcp_process+0x5bc>)
 80165d8:	781b      	ldrb	r3, [r3, #0]
 80165da:	f003 0320 	and.w	r3, r3, #32
 80165de:	2b00      	cmp	r3, #0
 80165e0:	f000 814c 	beq.w	801687c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	8b5b      	ldrh	r3, [r3, #26]
 80165e8:	f043 0302 	orr.w	r3, r3, #2
 80165ec:	b29a      	uxth	r2, r3
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	2207      	movs	r2, #7
 80165f6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80165f8:	e140      	b.n	801687c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80165fa:	6878      	ldr	r0, [r7, #4]
 80165fc:	f000 fa5c 	bl	8016ab8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8016600:	4b22      	ldr	r3, [pc, #136]	; (801668c <tcp_process+0x5bc>)
 8016602:	781b      	ldrb	r3, [r3, #0]
 8016604:	f003 0320 	and.w	r3, r3, #32
 8016608:	2b00      	cmp	r3, #0
 801660a:	d071      	beq.n	80166f0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801660c:	4b14      	ldr	r3, [pc, #80]	; (8016660 <tcp_process+0x590>)
 801660e:	781b      	ldrb	r3, [r3, #0]
 8016610:	f003 0310 	and.w	r3, r3, #16
 8016614:	2b00      	cmp	r3, #0
 8016616:	d060      	beq.n	80166da <tcp_process+0x60a>
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801661c:	4b11      	ldr	r3, [pc, #68]	; (8016664 <tcp_process+0x594>)
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	429a      	cmp	r2, r3
 8016622:	d15a      	bne.n	80166da <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016628:	2b00      	cmp	r3, #0
 801662a:	d156      	bne.n	80166da <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	8b5b      	ldrh	r3, [r3, #26]
 8016630:	f043 0302 	orr.w	r3, r3, #2
 8016634:	b29a      	uxth	r2, r3
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801663a:	6878      	ldr	r0, [r7, #4]
 801663c:	f7fe fdbc 	bl	80151b8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8016640:	4b13      	ldr	r3, [pc, #76]	; (8016690 <tcp_process+0x5c0>)
 8016642:	681b      	ldr	r3, [r3, #0]
 8016644:	687a      	ldr	r2, [r7, #4]
 8016646:	429a      	cmp	r2, r3
 8016648:	d105      	bne.n	8016656 <tcp_process+0x586>
 801664a:	4b11      	ldr	r3, [pc, #68]	; (8016690 <tcp_process+0x5c0>)
 801664c:	681b      	ldr	r3, [r3, #0]
 801664e:	68db      	ldr	r3, [r3, #12]
 8016650:	4a0f      	ldr	r2, [pc, #60]	; (8016690 <tcp_process+0x5c0>)
 8016652:	6013      	str	r3, [r2, #0]
 8016654:	e02e      	b.n	80166b4 <tcp_process+0x5e4>
 8016656:	4b0e      	ldr	r3, [pc, #56]	; (8016690 <tcp_process+0x5c0>)
 8016658:	681b      	ldr	r3, [r3, #0]
 801665a:	617b      	str	r3, [r7, #20]
 801665c:	e027      	b.n	80166ae <tcp_process+0x5de>
 801665e:	bf00      	nop
 8016660:	2000c1f8 	.word	0x2000c1f8
 8016664:	2000c1f0 	.word	0x2000c1f0
 8016668:	2000c1f6 	.word	0x2000c1f6
 801666c:	2000c1ec 	.word	0x2000c1ec
 8016670:	2000c1dc 	.word	0x2000c1dc
 8016674:	20008a50 	.word	0x20008a50
 8016678:	20008a54 	.word	0x20008a54
 801667c:	08025898 	.word	0x08025898
 8016680:	08025b38 	.word	0x08025b38
 8016684:	080258e4 	.word	0x080258e4
 8016688:	2000c1f4 	.word	0x2000c1f4
 801668c:	2000c1f9 	.word	0x2000c1f9
 8016690:	2000c1c0 	.word	0x2000c1c0
 8016694:	697b      	ldr	r3, [r7, #20]
 8016696:	68db      	ldr	r3, [r3, #12]
 8016698:	687a      	ldr	r2, [r7, #4]
 801669a:	429a      	cmp	r2, r3
 801669c:	d104      	bne.n	80166a8 <tcp_process+0x5d8>
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	68da      	ldr	r2, [r3, #12]
 80166a2:	697b      	ldr	r3, [r7, #20]
 80166a4:	60da      	str	r2, [r3, #12]
 80166a6:	e005      	b.n	80166b4 <tcp_process+0x5e4>
 80166a8:	697b      	ldr	r3, [r7, #20]
 80166aa:	68db      	ldr	r3, [r3, #12]
 80166ac:	617b      	str	r3, [r7, #20]
 80166ae:	697b      	ldr	r3, [r7, #20]
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d1ef      	bne.n	8016694 <tcp_process+0x5c4>
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	2200      	movs	r2, #0
 80166b8:	60da      	str	r2, [r3, #12]
 80166ba:	4b77      	ldr	r3, [pc, #476]	; (8016898 <tcp_process+0x7c8>)
 80166bc:	2201      	movs	r2, #1
 80166be:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	220a      	movs	r2, #10
 80166c4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80166c6:	4b75      	ldr	r3, [pc, #468]	; (801689c <tcp_process+0x7cc>)
 80166c8:	681a      	ldr	r2, [r3, #0]
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	60da      	str	r2, [r3, #12]
 80166ce:	4a73      	ldr	r2, [pc, #460]	; (801689c <tcp_process+0x7cc>)
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	6013      	str	r3, [r2, #0]
 80166d4:	f002 fcfa 	bl	80190cc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80166d8:	e0d2      	b.n	8016880 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	8b5b      	ldrh	r3, [r3, #26]
 80166de:	f043 0302 	orr.w	r3, r3, #2
 80166e2:	b29a      	uxth	r2, r3
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	2208      	movs	r2, #8
 80166ec:	751a      	strb	r2, [r3, #20]
      break;
 80166ee:	e0c7      	b.n	8016880 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80166f0:	4b6b      	ldr	r3, [pc, #428]	; (80168a0 <tcp_process+0x7d0>)
 80166f2:	781b      	ldrb	r3, [r3, #0]
 80166f4:	f003 0310 	and.w	r3, r3, #16
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	f000 80c1 	beq.w	8016880 <tcp_process+0x7b0>
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016702:	4b68      	ldr	r3, [pc, #416]	; (80168a4 <tcp_process+0x7d4>)
 8016704:	681b      	ldr	r3, [r3, #0]
 8016706:	429a      	cmp	r2, r3
 8016708:	f040 80ba 	bne.w	8016880 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016710:	2b00      	cmp	r3, #0
 8016712:	f040 80b5 	bne.w	8016880 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	2206      	movs	r2, #6
 801671a:	751a      	strb	r2, [r3, #20]
      break;
 801671c:	e0b0      	b.n	8016880 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801671e:	6878      	ldr	r0, [r7, #4]
 8016720:	f000 f9ca 	bl	8016ab8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8016724:	4b60      	ldr	r3, [pc, #384]	; (80168a8 <tcp_process+0x7d8>)
 8016726:	781b      	ldrb	r3, [r3, #0]
 8016728:	f003 0320 	and.w	r3, r3, #32
 801672c:	2b00      	cmp	r3, #0
 801672e:	f000 80a9 	beq.w	8016884 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	8b5b      	ldrh	r3, [r3, #26]
 8016736:	f043 0302 	orr.w	r3, r3, #2
 801673a:	b29a      	uxth	r2, r3
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8016740:	6878      	ldr	r0, [r7, #4]
 8016742:	f7fe fd39 	bl	80151b8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8016746:	4b59      	ldr	r3, [pc, #356]	; (80168ac <tcp_process+0x7dc>)
 8016748:	681b      	ldr	r3, [r3, #0]
 801674a:	687a      	ldr	r2, [r7, #4]
 801674c:	429a      	cmp	r2, r3
 801674e:	d105      	bne.n	801675c <tcp_process+0x68c>
 8016750:	4b56      	ldr	r3, [pc, #344]	; (80168ac <tcp_process+0x7dc>)
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	68db      	ldr	r3, [r3, #12]
 8016756:	4a55      	ldr	r2, [pc, #340]	; (80168ac <tcp_process+0x7dc>)
 8016758:	6013      	str	r3, [r2, #0]
 801675a:	e013      	b.n	8016784 <tcp_process+0x6b4>
 801675c:	4b53      	ldr	r3, [pc, #332]	; (80168ac <tcp_process+0x7dc>)
 801675e:	681b      	ldr	r3, [r3, #0]
 8016760:	613b      	str	r3, [r7, #16]
 8016762:	e00c      	b.n	801677e <tcp_process+0x6ae>
 8016764:	693b      	ldr	r3, [r7, #16]
 8016766:	68db      	ldr	r3, [r3, #12]
 8016768:	687a      	ldr	r2, [r7, #4]
 801676a:	429a      	cmp	r2, r3
 801676c:	d104      	bne.n	8016778 <tcp_process+0x6a8>
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	68da      	ldr	r2, [r3, #12]
 8016772:	693b      	ldr	r3, [r7, #16]
 8016774:	60da      	str	r2, [r3, #12]
 8016776:	e005      	b.n	8016784 <tcp_process+0x6b4>
 8016778:	693b      	ldr	r3, [r7, #16]
 801677a:	68db      	ldr	r3, [r3, #12]
 801677c:	613b      	str	r3, [r7, #16]
 801677e:	693b      	ldr	r3, [r7, #16]
 8016780:	2b00      	cmp	r3, #0
 8016782:	d1ef      	bne.n	8016764 <tcp_process+0x694>
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	2200      	movs	r2, #0
 8016788:	60da      	str	r2, [r3, #12]
 801678a:	4b43      	ldr	r3, [pc, #268]	; (8016898 <tcp_process+0x7c8>)
 801678c:	2201      	movs	r2, #1
 801678e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	220a      	movs	r2, #10
 8016794:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8016796:	4b41      	ldr	r3, [pc, #260]	; (801689c <tcp_process+0x7cc>)
 8016798:	681a      	ldr	r2, [r3, #0]
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	60da      	str	r2, [r3, #12]
 801679e:	4a3f      	ldr	r2, [pc, #252]	; (801689c <tcp_process+0x7cc>)
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	6013      	str	r3, [r2, #0]
 80167a4:	f002 fc92 	bl	80190cc <tcp_timer_needed>
      }
      break;
 80167a8:	e06c      	b.n	8016884 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80167aa:	6878      	ldr	r0, [r7, #4]
 80167ac:	f000 f984 	bl	8016ab8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80167b0:	4b3b      	ldr	r3, [pc, #236]	; (80168a0 <tcp_process+0x7d0>)
 80167b2:	781b      	ldrb	r3, [r3, #0]
 80167b4:	f003 0310 	and.w	r3, r3, #16
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d065      	beq.n	8016888 <tcp_process+0x7b8>
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80167c0:	4b38      	ldr	r3, [pc, #224]	; (80168a4 <tcp_process+0x7d4>)
 80167c2:	681b      	ldr	r3, [r3, #0]
 80167c4:	429a      	cmp	r2, r3
 80167c6:	d15f      	bne.n	8016888 <tcp_process+0x7b8>
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	d15b      	bne.n	8016888 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80167d0:	6878      	ldr	r0, [r7, #4]
 80167d2:	f7fe fcf1 	bl	80151b8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80167d6:	4b35      	ldr	r3, [pc, #212]	; (80168ac <tcp_process+0x7dc>)
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	687a      	ldr	r2, [r7, #4]
 80167dc:	429a      	cmp	r2, r3
 80167de:	d105      	bne.n	80167ec <tcp_process+0x71c>
 80167e0:	4b32      	ldr	r3, [pc, #200]	; (80168ac <tcp_process+0x7dc>)
 80167e2:	681b      	ldr	r3, [r3, #0]
 80167e4:	68db      	ldr	r3, [r3, #12]
 80167e6:	4a31      	ldr	r2, [pc, #196]	; (80168ac <tcp_process+0x7dc>)
 80167e8:	6013      	str	r3, [r2, #0]
 80167ea:	e013      	b.n	8016814 <tcp_process+0x744>
 80167ec:	4b2f      	ldr	r3, [pc, #188]	; (80168ac <tcp_process+0x7dc>)
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	60fb      	str	r3, [r7, #12]
 80167f2:	e00c      	b.n	801680e <tcp_process+0x73e>
 80167f4:	68fb      	ldr	r3, [r7, #12]
 80167f6:	68db      	ldr	r3, [r3, #12]
 80167f8:	687a      	ldr	r2, [r7, #4]
 80167fa:	429a      	cmp	r2, r3
 80167fc:	d104      	bne.n	8016808 <tcp_process+0x738>
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	68da      	ldr	r2, [r3, #12]
 8016802:	68fb      	ldr	r3, [r7, #12]
 8016804:	60da      	str	r2, [r3, #12]
 8016806:	e005      	b.n	8016814 <tcp_process+0x744>
 8016808:	68fb      	ldr	r3, [r7, #12]
 801680a:	68db      	ldr	r3, [r3, #12]
 801680c:	60fb      	str	r3, [r7, #12]
 801680e:	68fb      	ldr	r3, [r7, #12]
 8016810:	2b00      	cmp	r3, #0
 8016812:	d1ef      	bne.n	80167f4 <tcp_process+0x724>
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	2200      	movs	r2, #0
 8016818:	60da      	str	r2, [r3, #12]
 801681a:	4b1f      	ldr	r3, [pc, #124]	; (8016898 <tcp_process+0x7c8>)
 801681c:	2201      	movs	r2, #1
 801681e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	220a      	movs	r2, #10
 8016824:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8016826:	4b1d      	ldr	r3, [pc, #116]	; (801689c <tcp_process+0x7cc>)
 8016828:	681a      	ldr	r2, [r3, #0]
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	60da      	str	r2, [r3, #12]
 801682e:	4a1b      	ldr	r2, [pc, #108]	; (801689c <tcp_process+0x7cc>)
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	6013      	str	r3, [r2, #0]
 8016834:	f002 fc4a 	bl	80190cc <tcp_timer_needed>
      }
      break;
 8016838:	e026      	b.n	8016888 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801683a:	6878      	ldr	r0, [r7, #4]
 801683c:	f000 f93c 	bl	8016ab8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8016840:	4b17      	ldr	r3, [pc, #92]	; (80168a0 <tcp_process+0x7d0>)
 8016842:	781b      	ldrb	r3, [r3, #0]
 8016844:	f003 0310 	and.w	r3, r3, #16
 8016848:	2b00      	cmp	r3, #0
 801684a:	d01f      	beq.n	801688c <tcp_process+0x7bc>
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016850:	4b14      	ldr	r3, [pc, #80]	; (80168a4 <tcp_process+0x7d4>)
 8016852:	681b      	ldr	r3, [r3, #0]
 8016854:	429a      	cmp	r2, r3
 8016856:	d119      	bne.n	801688c <tcp_process+0x7bc>
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801685c:	2b00      	cmp	r3, #0
 801685e:	d115      	bne.n	801688c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8016860:	4b11      	ldr	r3, [pc, #68]	; (80168a8 <tcp_process+0x7d8>)
 8016862:	781b      	ldrb	r3, [r3, #0]
 8016864:	f043 0310 	orr.w	r3, r3, #16
 8016868:	b2da      	uxtb	r2, r3
 801686a:	4b0f      	ldr	r3, [pc, #60]	; (80168a8 <tcp_process+0x7d8>)
 801686c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801686e:	e00d      	b.n	801688c <tcp_process+0x7bc>
    default:
      break;
 8016870:	bf00      	nop
 8016872:	e00c      	b.n	801688e <tcp_process+0x7be>
      break;
 8016874:	bf00      	nop
 8016876:	e00a      	b.n	801688e <tcp_process+0x7be>
      break;
 8016878:	bf00      	nop
 801687a:	e008      	b.n	801688e <tcp_process+0x7be>
      break;
 801687c:	bf00      	nop
 801687e:	e006      	b.n	801688e <tcp_process+0x7be>
      break;
 8016880:	bf00      	nop
 8016882:	e004      	b.n	801688e <tcp_process+0x7be>
      break;
 8016884:	bf00      	nop
 8016886:	e002      	b.n	801688e <tcp_process+0x7be>
      break;
 8016888:	bf00      	nop
 801688a:	e000      	b.n	801688e <tcp_process+0x7be>
      break;
 801688c:	bf00      	nop
  }
  return ERR_OK;
 801688e:	2300      	movs	r3, #0
}
 8016890:	4618      	mov	r0, r3
 8016892:	3724      	adds	r7, #36	; 0x24
 8016894:	46bd      	mov	sp, r7
 8016896:	bd90      	pop	{r4, r7, pc}
 8016898:	2000c1c8 	.word	0x2000c1c8
 801689c:	2000c1c4 	.word	0x2000c1c4
 80168a0:	2000c1f8 	.word	0x2000c1f8
 80168a4:	2000c1f0 	.word	0x2000c1f0
 80168a8:	2000c1f9 	.word	0x2000c1f9
 80168ac:	2000c1c0 	.word	0x2000c1c0

080168b0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80168b0:	b590      	push	{r4, r7, lr}
 80168b2:	b085      	sub	sp, #20
 80168b4:	af00      	add	r7, sp, #0
 80168b6:	6078      	str	r0, [r7, #4]
 80168b8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	2b00      	cmp	r3, #0
 80168be:	d106      	bne.n	80168ce <tcp_oos_insert_segment+0x1e>
 80168c0:	4b3b      	ldr	r3, [pc, #236]	; (80169b0 <tcp_oos_insert_segment+0x100>)
 80168c2:	f240 421f 	movw	r2, #1055	; 0x41f
 80168c6:	493b      	ldr	r1, [pc, #236]	; (80169b4 <tcp_oos_insert_segment+0x104>)
 80168c8:	483b      	ldr	r0, [pc, #236]	; (80169b8 <tcp_oos_insert_segment+0x108>)
 80168ca:	f007 fd05 	bl	801e2d8 <printf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	68db      	ldr	r3, [r3, #12]
 80168d2:	899b      	ldrh	r3, [r3, #12]
 80168d4:	b29b      	uxth	r3, r3
 80168d6:	4618      	mov	r0, r3
 80168d8:	f7fb fc3a 	bl	8012150 <lwip_htons>
 80168dc:	4603      	mov	r3, r0
 80168de:	b2db      	uxtb	r3, r3
 80168e0:	f003 0301 	and.w	r3, r3, #1
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	d028      	beq.n	801693a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80168e8:	6838      	ldr	r0, [r7, #0]
 80168ea:	f7fe fa63 	bl	8014db4 <tcp_segs_free>
    next = NULL;
 80168ee:	2300      	movs	r3, #0
 80168f0:	603b      	str	r3, [r7, #0]
 80168f2:	e056      	b.n	80169a2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80168f4:	683b      	ldr	r3, [r7, #0]
 80168f6:	68db      	ldr	r3, [r3, #12]
 80168f8:	899b      	ldrh	r3, [r3, #12]
 80168fa:	b29b      	uxth	r3, r3
 80168fc:	4618      	mov	r0, r3
 80168fe:	f7fb fc27 	bl	8012150 <lwip_htons>
 8016902:	4603      	mov	r3, r0
 8016904:	b2db      	uxtb	r3, r3
 8016906:	f003 0301 	and.w	r3, r3, #1
 801690a:	2b00      	cmp	r3, #0
 801690c:	d00d      	beq.n	801692a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	68db      	ldr	r3, [r3, #12]
 8016912:	899b      	ldrh	r3, [r3, #12]
 8016914:	b29c      	uxth	r4, r3
 8016916:	2001      	movs	r0, #1
 8016918:	f7fb fc1a 	bl	8012150 <lwip_htons>
 801691c:	4603      	mov	r3, r0
 801691e:	461a      	mov	r2, r3
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	68db      	ldr	r3, [r3, #12]
 8016924:	4322      	orrs	r2, r4
 8016926:	b292      	uxth	r2, r2
 8016928:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801692a:	683b      	ldr	r3, [r7, #0]
 801692c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801692e:	683b      	ldr	r3, [r7, #0]
 8016930:	681b      	ldr	r3, [r3, #0]
 8016932:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8016934:	68f8      	ldr	r0, [r7, #12]
 8016936:	f7fe fa52 	bl	8014dde <tcp_seg_free>
    while (next &&
 801693a:	683b      	ldr	r3, [r7, #0]
 801693c:	2b00      	cmp	r3, #0
 801693e:	d00e      	beq.n	801695e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	891b      	ldrh	r3, [r3, #8]
 8016944:	461a      	mov	r2, r3
 8016946:	4b1d      	ldr	r3, [pc, #116]	; (80169bc <tcp_oos_insert_segment+0x10c>)
 8016948:	681b      	ldr	r3, [r3, #0]
 801694a:	441a      	add	r2, r3
 801694c:	683b      	ldr	r3, [r7, #0]
 801694e:	68db      	ldr	r3, [r3, #12]
 8016950:	685b      	ldr	r3, [r3, #4]
 8016952:	6839      	ldr	r1, [r7, #0]
 8016954:	8909      	ldrh	r1, [r1, #8]
 8016956:	440b      	add	r3, r1
 8016958:	1ad3      	subs	r3, r2, r3
    while (next &&
 801695a:	2b00      	cmp	r3, #0
 801695c:	daca      	bge.n	80168f4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801695e:	683b      	ldr	r3, [r7, #0]
 8016960:	2b00      	cmp	r3, #0
 8016962:	d01e      	beq.n	80169a2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	891b      	ldrh	r3, [r3, #8]
 8016968:	461a      	mov	r2, r3
 801696a:	4b14      	ldr	r3, [pc, #80]	; (80169bc <tcp_oos_insert_segment+0x10c>)
 801696c:	681b      	ldr	r3, [r3, #0]
 801696e:	441a      	add	r2, r3
 8016970:	683b      	ldr	r3, [r7, #0]
 8016972:	68db      	ldr	r3, [r3, #12]
 8016974:	685b      	ldr	r3, [r3, #4]
 8016976:	1ad3      	subs	r3, r2, r3
    if (next &&
 8016978:	2b00      	cmp	r3, #0
 801697a:	dd12      	ble.n	80169a2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801697c:	683b      	ldr	r3, [r7, #0]
 801697e:	68db      	ldr	r3, [r3, #12]
 8016980:	685b      	ldr	r3, [r3, #4]
 8016982:	b29a      	uxth	r2, r3
 8016984:	4b0d      	ldr	r3, [pc, #52]	; (80169bc <tcp_oos_insert_segment+0x10c>)
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	b29b      	uxth	r3, r3
 801698a:	1ad3      	subs	r3, r2, r3
 801698c:	b29a      	uxth	r2, r3
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	685a      	ldr	r2, [r3, #4]
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	891b      	ldrh	r3, [r3, #8]
 801699a:	4619      	mov	r1, r3
 801699c:	4610      	mov	r0, r2
 801699e:	f7fc fe09 	bl	80135b4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	683a      	ldr	r2, [r7, #0]
 80169a6:	601a      	str	r2, [r3, #0]
}
 80169a8:	bf00      	nop
 80169aa:	3714      	adds	r7, #20
 80169ac:	46bd      	mov	sp, r7
 80169ae:	bd90      	pop	{r4, r7, pc}
 80169b0:	08025898 	.word	0x08025898
 80169b4:	08025b58 	.word	0x08025b58
 80169b8:	080258e4 	.word	0x080258e4
 80169bc:	2000c1ec 	.word	0x2000c1ec

080169c0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80169c0:	b5b0      	push	{r4, r5, r7, lr}
 80169c2:	b086      	sub	sp, #24
 80169c4:	af00      	add	r7, sp, #0
 80169c6:	60f8      	str	r0, [r7, #12]
 80169c8:	60b9      	str	r1, [r7, #8]
 80169ca:	607a      	str	r2, [r7, #4]
 80169cc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80169ce:	e03e      	b.n	8016a4e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80169d0:	68bb      	ldr	r3, [r7, #8]
 80169d2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80169d4:	68bb      	ldr	r3, [r7, #8]
 80169d6:	681b      	ldr	r3, [r3, #0]
 80169d8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80169da:	697b      	ldr	r3, [r7, #20]
 80169dc:	685b      	ldr	r3, [r3, #4]
 80169de:	4618      	mov	r0, r3
 80169e0:	f7fc fffc 	bl	80139dc <pbuf_clen>
 80169e4:	4603      	mov	r3, r0
 80169e6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80169e8:	68fb      	ldr	r3, [r7, #12]
 80169ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80169ee:	8a7a      	ldrh	r2, [r7, #18]
 80169f0:	429a      	cmp	r2, r3
 80169f2:	d906      	bls.n	8016a02 <tcp_free_acked_segments+0x42>
 80169f4:	4b2a      	ldr	r3, [pc, #168]	; (8016aa0 <tcp_free_acked_segments+0xe0>)
 80169f6:	f240 4257 	movw	r2, #1111	; 0x457
 80169fa:	492a      	ldr	r1, [pc, #168]	; (8016aa4 <tcp_free_acked_segments+0xe4>)
 80169fc:	482a      	ldr	r0, [pc, #168]	; (8016aa8 <tcp_free_acked_segments+0xe8>)
 80169fe:	f007 fc6b 	bl	801e2d8 <printf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8016a08:	8a7b      	ldrh	r3, [r7, #18]
 8016a0a:	1ad3      	subs	r3, r2, r3
 8016a0c:	b29a      	uxth	r2, r3
 8016a0e:	68fb      	ldr	r3, [r7, #12]
 8016a10:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8016a14:	697b      	ldr	r3, [r7, #20]
 8016a16:	891a      	ldrh	r2, [r3, #8]
 8016a18:	4b24      	ldr	r3, [pc, #144]	; (8016aac <tcp_free_acked_segments+0xec>)
 8016a1a:	881b      	ldrh	r3, [r3, #0]
 8016a1c:	4413      	add	r3, r2
 8016a1e:	b29a      	uxth	r2, r3
 8016a20:	4b22      	ldr	r3, [pc, #136]	; (8016aac <tcp_free_acked_segments+0xec>)
 8016a22:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8016a24:	6978      	ldr	r0, [r7, #20]
 8016a26:	f7fe f9da 	bl	8014dde <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	d00c      	beq.n	8016a4e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8016a34:	68bb      	ldr	r3, [r7, #8]
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d109      	bne.n	8016a4e <tcp_free_acked_segments+0x8e>
 8016a3a:	683b      	ldr	r3, [r7, #0]
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d106      	bne.n	8016a4e <tcp_free_acked_segments+0x8e>
 8016a40:	4b17      	ldr	r3, [pc, #92]	; (8016aa0 <tcp_free_acked_segments+0xe0>)
 8016a42:	f240 4261 	movw	r2, #1121	; 0x461
 8016a46:	491a      	ldr	r1, [pc, #104]	; (8016ab0 <tcp_free_acked_segments+0xf0>)
 8016a48:	4817      	ldr	r0, [pc, #92]	; (8016aa8 <tcp_free_acked_segments+0xe8>)
 8016a4a:	f007 fc45 	bl	801e2d8 <printf>
  while (seg_list != NULL &&
 8016a4e:	68bb      	ldr	r3, [r7, #8]
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d020      	beq.n	8016a96 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8016a54:	68bb      	ldr	r3, [r7, #8]
 8016a56:	68db      	ldr	r3, [r3, #12]
 8016a58:	685b      	ldr	r3, [r3, #4]
 8016a5a:	4618      	mov	r0, r3
 8016a5c:	f7fb fb8d 	bl	801217a <lwip_htonl>
 8016a60:	4604      	mov	r4, r0
 8016a62:	68bb      	ldr	r3, [r7, #8]
 8016a64:	891b      	ldrh	r3, [r3, #8]
 8016a66:	461d      	mov	r5, r3
 8016a68:	68bb      	ldr	r3, [r7, #8]
 8016a6a:	68db      	ldr	r3, [r3, #12]
 8016a6c:	899b      	ldrh	r3, [r3, #12]
 8016a6e:	b29b      	uxth	r3, r3
 8016a70:	4618      	mov	r0, r3
 8016a72:	f7fb fb6d 	bl	8012150 <lwip_htons>
 8016a76:	4603      	mov	r3, r0
 8016a78:	b2db      	uxtb	r3, r3
 8016a7a:	f003 0303 	and.w	r3, r3, #3
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d001      	beq.n	8016a86 <tcp_free_acked_segments+0xc6>
 8016a82:	2301      	movs	r3, #1
 8016a84:	e000      	b.n	8016a88 <tcp_free_acked_segments+0xc8>
 8016a86:	2300      	movs	r3, #0
 8016a88:	442b      	add	r3, r5
 8016a8a:	18e2      	adds	r2, r4, r3
 8016a8c:	4b09      	ldr	r3, [pc, #36]	; (8016ab4 <tcp_free_acked_segments+0xf4>)
 8016a8e:	681b      	ldr	r3, [r3, #0]
 8016a90:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	dd9c      	ble.n	80169d0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8016a96:	68bb      	ldr	r3, [r7, #8]
}
 8016a98:	4618      	mov	r0, r3
 8016a9a:	3718      	adds	r7, #24
 8016a9c:	46bd      	mov	sp, r7
 8016a9e:	bdb0      	pop	{r4, r5, r7, pc}
 8016aa0:	08025898 	.word	0x08025898
 8016aa4:	08025b80 	.word	0x08025b80
 8016aa8:	080258e4 	.word	0x080258e4
 8016aac:	2000c1f4 	.word	0x2000c1f4
 8016ab0:	08025ba8 	.word	0x08025ba8
 8016ab4:	2000c1f0 	.word	0x2000c1f0

08016ab8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8016ab8:	b5b0      	push	{r4, r5, r7, lr}
 8016aba:	b094      	sub	sp, #80	; 0x50
 8016abc:	af00      	add	r7, sp, #0
 8016abe:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8016ac0:	2300      	movs	r3, #0
 8016ac2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d106      	bne.n	8016ad8 <tcp_receive+0x20>
 8016aca:	4b91      	ldr	r3, [pc, #580]	; (8016d10 <tcp_receive+0x258>)
 8016acc:	f240 427b 	movw	r2, #1147	; 0x47b
 8016ad0:	4990      	ldr	r1, [pc, #576]	; (8016d14 <tcp_receive+0x25c>)
 8016ad2:	4891      	ldr	r0, [pc, #580]	; (8016d18 <tcp_receive+0x260>)
 8016ad4:	f007 fc00 	bl	801e2d8 <printf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	7d1b      	ldrb	r3, [r3, #20]
 8016adc:	2b03      	cmp	r3, #3
 8016ade:	d806      	bhi.n	8016aee <tcp_receive+0x36>
 8016ae0:	4b8b      	ldr	r3, [pc, #556]	; (8016d10 <tcp_receive+0x258>)
 8016ae2:	f240 427c 	movw	r2, #1148	; 0x47c
 8016ae6:	498d      	ldr	r1, [pc, #564]	; (8016d1c <tcp_receive+0x264>)
 8016ae8:	488b      	ldr	r0, [pc, #556]	; (8016d18 <tcp_receive+0x260>)
 8016aea:	f007 fbf5 	bl	801e2d8 <printf>

  if (flags & TCP_ACK) {
 8016aee:	4b8c      	ldr	r3, [pc, #560]	; (8016d20 <tcp_receive+0x268>)
 8016af0:	781b      	ldrb	r3, [r3, #0]
 8016af2:	f003 0310 	and.w	r3, r3, #16
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	f000 8264 	beq.w	8016fc4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016b02:	461a      	mov	r2, r3
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016b08:	4413      	add	r3, r2
 8016b0a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8016b10:	4b84      	ldr	r3, [pc, #528]	; (8016d24 <tcp_receive+0x26c>)
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	1ad3      	subs	r3, r2, r3
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	db1b      	blt.n	8016b52 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8016b1e:	4b81      	ldr	r3, [pc, #516]	; (8016d24 <tcp_receive+0x26c>)
 8016b20:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8016b22:	429a      	cmp	r2, r3
 8016b24:	d106      	bne.n	8016b34 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8016b2a:	4b7f      	ldr	r3, [pc, #508]	; (8016d28 <tcp_receive+0x270>)
 8016b2c:	681b      	ldr	r3, [r3, #0]
 8016b2e:	1ad3      	subs	r3, r2, r3
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	db0e      	blt.n	8016b52 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8016b38:	4b7b      	ldr	r3, [pc, #492]	; (8016d28 <tcp_receive+0x270>)
 8016b3a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8016b3c:	429a      	cmp	r2, r3
 8016b3e:	d125      	bne.n	8016b8c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8016b40:	4b7a      	ldr	r3, [pc, #488]	; (8016d2c <tcp_receive+0x274>)
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	89db      	ldrh	r3, [r3, #14]
 8016b46:	b29a      	uxth	r2, r3
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016b4e:	429a      	cmp	r2, r3
 8016b50:	d91c      	bls.n	8016b8c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8016b52:	4b76      	ldr	r3, [pc, #472]	; (8016d2c <tcp_receive+0x274>)
 8016b54:	681b      	ldr	r3, [r3, #0]
 8016b56:	89db      	ldrh	r3, [r3, #14]
 8016b58:	b29a      	uxth	r2, r3
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016b6c:	429a      	cmp	r2, r3
 8016b6e:	d205      	bcs.n	8016b7c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8016b7c:	4b69      	ldr	r3, [pc, #420]	; (8016d24 <tcp_receive+0x26c>)
 8016b7e:	681a      	ldr	r2, [r3, #0]
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8016b84:	4b68      	ldr	r3, [pc, #416]	; (8016d28 <tcp_receive+0x270>)
 8016b86:	681a      	ldr	r2, [r3, #0]
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8016b8c:	4b66      	ldr	r3, [pc, #408]	; (8016d28 <tcp_receive+0x270>)
 8016b8e:	681a      	ldr	r2, [r3, #0]
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016b94:	1ad3      	subs	r3, r2, r3
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	dc58      	bgt.n	8016c4c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8016b9a:	4b65      	ldr	r3, [pc, #404]	; (8016d30 <tcp_receive+0x278>)
 8016b9c:	881b      	ldrh	r3, [r3, #0]
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d14b      	bne.n	8016c3a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016ba6:	687a      	ldr	r2, [r7, #4]
 8016ba8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8016bac:	4413      	add	r3, r2
 8016bae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016bb0:	429a      	cmp	r2, r3
 8016bb2:	d142      	bne.n	8016c3a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	db3d      	blt.n	8016c3a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016bc2:	4b59      	ldr	r3, [pc, #356]	; (8016d28 <tcp_receive+0x270>)
 8016bc4:	681b      	ldr	r3, [r3, #0]
 8016bc6:	429a      	cmp	r2, r3
 8016bc8:	d137      	bne.n	8016c3a <tcp_receive+0x182>
              found_dupack = 1;
 8016bca:	2301      	movs	r3, #1
 8016bcc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016bd4:	2bff      	cmp	r3, #255	; 0xff
 8016bd6:	d007      	beq.n	8016be8 <tcp_receive+0x130>
                ++pcb->dupacks;
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016bde:	3301      	adds	r3, #1
 8016be0:	b2da      	uxtb	r2, r3
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016bee:	2b03      	cmp	r3, #3
 8016bf0:	d91b      	bls.n	8016c2a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016bfc:	4413      	add	r3, r2
 8016bfe:	b29a      	uxth	r2, r3
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016c06:	429a      	cmp	r2, r3
 8016c08:	d30a      	bcc.n	8016c20 <tcp_receive+0x168>
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016c14:	4413      	add	r3, r2
 8016c16:	b29a      	uxth	r2, r3
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016c1e:	e004      	b.n	8016c2a <tcp_receive+0x172>
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016c26:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016c30:	2b02      	cmp	r3, #2
 8016c32:	d902      	bls.n	8016c3a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8016c34:	6878      	ldr	r0, [r7, #4]
 8016c36:	f001 feeb 	bl	8018a10 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8016c3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	f040 8161 	bne.w	8016f04 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	2200      	movs	r2, #0
 8016c46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8016c4a:	e15b      	b.n	8016f04 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016c4c:	4b36      	ldr	r3, [pc, #216]	; (8016d28 <tcp_receive+0x270>)
 8016c4e:	681a      	ldr	r2, [r3, #0]
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016c54:	1ad3      	subs	r3, r2, r3
 8016c56:	3b01      	subs	r3, #1
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	f2c0 814e 	blt.w	8016efa <tcp_receive+0x442>
 8016c5e:	4b32      	ldr	r3, [pc, #200]	; (8016d28 <tcp_receive+0x270>)
 8016c60:	681a      	ldr	r2, [r3, #0]
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016c66:	1ad3      	subs	r3, r2, r3
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	f300 8146 	bgt.w	8016efa <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	8b5b      	ldrh	r3, [r3, #26]
 8016c72:	f003 0304 	and.w	r3, r3, #4
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d010      	beq.n	8016c9c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	8b5b      	ldrh	r3, [r3, #26]
 8016c7e:	f023 0304 	bic.w	r3, r3, #4
 8016c82:	b29a      	uxth	r2, r3
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	2200      	movs	r2, #0
 8016c98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	2200      	movs	r2, #0
 8016ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016caa:	10db      	asrs	r3, r3, #3
 8016cac:	b21b      	sxth	r3, r3
 8016cae:	b29a      	uxth	r2, r3
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016cb6:	b29b      	uxth	r3, r3
 8016cb8:	4413      	add	r3, r2
 8016cba:	b29b      	uxth	r3, r3
 8016cbc:	b21a      	sxth	r2, r3
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8016cc4:	4b18      	ldr	r3, [pc, #96]	; (8016d28 <tcp_receive+0x270>)
 8016cc6:	681b      	ldr	r3, [r3, #0]
 8016cc8:	b29a      	uxth	r2, r3
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016cce:	b29b      	uxth	r3, r3
 8016cd0:	1ad3      	subs	r3, r2, r3
 8016cd2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	2200      	movs	r2, #0
 8016cd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8016cdc:	4b12      	ldr	r3, [pc, #72]	; (8016d28 <tcp_receive+0x270>)
 8016cde:	681a      	ldr	r2, [r3, #0]
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	7d1b      	ldrb	r3, [r3, #20]
 8016ce8:	2b03      	cmp	r3, #3
 8016cea:	f240 8097 	bls.w	8016e1c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8016cfa:	429a      	cmp	r2, r3
 8016cfc:	d245      	bcs.n	8016d8a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	8b5b      	ldrh	r3, [r3, #26]
 8016d02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d014      	beq.n	8016d34 <tcp_receive+0x27c>
 8016d0a:	2301      	movs	r3, #1
 8016d0c:	e013      	b.n	8016d36 <tcp_receive+0x27e>
 8016d0e:	bf00      	nop
 8016d10:	08025898 	.word	0x08025898
 8016d14:	08025bc8 	.word	0x08025bc8
 8016d18:	080258e4 	.word	0x080258e4
 8016d1c:	08025be4 	.word	0x08025be4
 8016d20:	2000c1f8 	.word	0x2000c1f8
 8016d24:	2000c1ec 	.word	0x2000c1ec
 8016d28:	2000c1f0 	.word	0x2000c1f0
 8016d2c:	2000c1dc 	.word	0x2000c1dc
 8016d30:	2000c1f6 	.word	0x2000c1f6
 8016d34:	2302      	movs	r3, #2
 8016d36:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8016d3a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8016d3e:	b29a      	uxth	r2, r3
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016d44:	fb12 f303 	smulbb	r3, r2, r3
 8016d48:	b29b      	uxth	r3, r3
 8016d4a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016d4c:	4293      	cmp	r3, r2
 8016d4e:	bf28      	it	cs
 8016d50:	4613      	movcs	r3, r2
 8016d52:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016d5a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016d5c:	4413      	add	r3, r2
 8016d5e:	b29a      	uxth	r2, r3
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016d66:	429a      	cmp	r2, r3
 8016d68:	d309      	bcc.n	8016d7e <tcp_receive+0x2c6>
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016d70:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016d72:	4413      	add	r3, r2
 8016d74:	b29a      	uxth	r2, r3
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016d7c:	e04e      	b.n	8016e1c <tcp_receive+0x364>
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016d84:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016d88:	e048      	b.n	8016e1c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8016d90:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016d92:	4413      	add	r3, r2
 8016d94:	b29a      	uxth	r2, r3
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8016d9c:	429a      	cmp	r2, r3
 8016d9e:	d309      	bcc.n	8016db4 <tcp_receive+0x2fc>
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8016da6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016da8:	4413      	add	r3, r2
 8016daa:	b29a      	uxth	r2, r3
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8016db2:	e004      	b.n	8016dbe <tcp_receive+0x306>
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016dba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016dca:	429a      	cmp	r2, r3
 8016dcc:	d326      	bcc.n	8016e1c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016dda:	1ad3      	subs	r3, r2, r3
 8016ddc:	b29a      	uxth	r2, r3
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016dee:	4413      	add	r3, r2
 8016df0:	b29a      	uxth	r2, r3
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016df8:	429a      	cmp	r2, r3
 8016dfa:	d30a      	bcc.n	8016e12 <tcp_receive+0x35a>
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016e06:	4413      	add	r3, r2
 8016e08:	b29a      	uxth	r2, r3
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016e10:	e004      	b.n	8016e1c <tcp_receive+0x364>
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016e18:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016e24:	4a98      	ldr	r2, [pc, #608]	; (8017088 <tcp_receive+0x5d0>)
 8016e26:	6878      	ldr	r0, [r7, #4]
 8016e28:	f7ff fdca 	bl	80169c0 <tcp_free_acked_segments>
 8016e2c:	4602      	mov	r2, r0
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016e3a:	4a94      	ldr	r2, [pc, #592]	; (801708c <tcp_receive+0x5d4>)
 8016e3c:	6878      	ldr	r0, [r7, #4]
 8016e3e:	f7ff fdbf 	bl	80169c0 <tcp_free_acked_segments>
 8016e42:	4602      	mov	r2, r0
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d104      	bne.n	8016e5a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016e56:	861a      	strh	r2, [r3, #48]	; 0x30
 8016e58:	e002      	b.n	8016e60 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	2200      	movs	r2, #0
 8016e5e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	2200      	movs	r2, #0
 8016e64:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d103      	bne.n	8016e76 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	2200      	movs	r2, #0
 8016e72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8016e7c:	4b84      	ldr	r3, [pc, #528]	; (8017090 <tcp_receive+0x5d8>)
 8016e7e:	881b      	ldrh	r3, [r3, #0]
 8016e80:	4413      	add	r3, r2
 8016e82:	b29a      	uxth	r2, r3
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	8b5b      	ldrh	r3, [r3, #26]
 8016e8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d035      	beq.n	8016f02 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d118      	bne.n	8016ed0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d00c      	beq.n	8016ec0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016eae:	68db      	ldr	r3, [r3, #12]
 8016eb0:	685b      	ldr	r3, [r3, #4]
 8016eb2:	4618      	mov	r0, r3
 8016eb4:	f7fb f961 	bl	801217a <lwip_htonl>
 8016eb8:	4603      	mov	r3, r0
 8016eba:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	dc20      	bgt.n	8016f02 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	8b5b      	ldrh	r3, [r3, #26]
 8016ec4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016ec8:	b29a      	uxth	r2, r3
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016ece:	e018      	b.n	8016f02 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016ed8:	68db      	ldr	r3, [r3, #12]
 8016eda:	685b      	ldr	r3, [r3, #4]
 8016edc:	4618      	mov	r0, r3
 8016ede:	f7fb f94c 	bl	801217a <lwip_htonl>
 8016ee2:	4603      	mov	r3, r0
 8016ee4:	1ae3      	subs	r3, r4, r3
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	dc0b      	bgt.n	8016f02 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	8b5b      	ldrh	r3, [r3, #26]
 8016eee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016ef2:	b29a      	uxth	r2, r3
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016ef8:	e003      	b.n	8016f02 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8016efa:	6878      	ldr	r0, [r7, #4]
 8016efc:	f001 ff76 	bl	8018dec <tcp_send_empty_ack>
 8016f00:	e000      	b.n	8016f04 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016f02:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	d05b      	beq.n	8016fc4 <tcp_receive+0x50c>
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016f10:	4b60      	ldr	r3, [pc, #384]	; (8017094 <tcp_receive+0x5dc>)
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	1ad3      	subs	r3, r2, r3
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	da54      	bge.n	8016fc4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8016f1a:	4b5f      	ldr	r3, [pc, #380]	; (8017098 <tcp_receive+0x5e0>)
 8016f1c:	681b      	ldr	r3, [r3, #0]
 8016f1e:	b29a      	uxth	r2, r3
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016f24:	b29b      	uxth	r3, r3
 8016f26:	1ad3      	subs	r3, r2, r3
 8016f28:	b29b      	uxth	r3, r3
 8016f2a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8016f2e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016f38:	10db      	asrs	r3, r3, #3
 8016f3a:	b21b      	sxth	r3, r3
 8016f3c:	b29b      	uxth	r3, r3
 8016f3e:	1ad3      	subs	r3, r2, r3
 8016f40:	b29b      	uxth	r3, r3
 8016f42:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016f4c:	b29a      	uxth	r2, r3
 8016f4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8016f52:	4413      	add	r3, r2
 8016f54:	b29b      	uxth	r3, r3
 8016f56:	b21a      	sxth	r2, r3
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8016f5c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	da05      	bge.n	8016f70 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8016f64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8016f68:	425b      	negs	r3, r3
 8016f6a:	b29b      	uxth	r3, r3
 8016f6c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8016f70:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016f7a:	109b      	asrs	r3, r3, #2
 8016f7c:	b21b      	sxth	r3, r3
 8016f7e:	b29b      	uxth	r3, r3
 8016f80:	1ad3      	subs	r3, r2, r3
 8016f82:	b29b      	uxth	r3, r3
 8016f84:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016f8e:	b29a      	uxth	r2, r3
 8016f90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8016f94:	4413      	add	r3, r2
 8016f96:	b29b      	uxth	r3, r3
 8016f98:	b21a      	sxth	r2, r3
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016fa4:	10db      	asrs	r3, r3, #3
 8016fa6:	b21b      	sxth	r3, r3
 8016fa8:	b29a      	uxth	r2, r3
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016fb0:	b29b      	uxth	r3, r3
 8016fb2:	4413      	add	r3, r2
 8016fb4:	b29b      	uxth	r3, r3
 8016fb6:	b21a      	sxth	r2, r3
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	2200      	movs	r2, #0
 8016fc2:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8016fc4:	4b35      	ldr	r3, [pc, #212]	; (801709c <tcp_receive+0x5e4>)
 8016fc6:	881b      	ldrh	r3, [r3, #0]
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	f000 84e2 	beq.w	8017992 <tcp_receive+0xeda>
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	7d1b      	ldrb	r3, [r3, #20]
 8016fd2:	2b06      	cmp	r3, #6
 8016fd4:	f200 84dd 	bhi.w	8017992 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016fdc:	4b30      	ldr	r3, [pc, #192]	; (80170a0 <tcp_receive+0x5e8>)
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	1ad3      	subs	r3, r2, r3
 8016fe2:	3b01      	subs	r3, #1
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	f2c0 808f 	blt.w	8017108 <tcp_receive+0x650>
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016fee:	4b2b      	ldr	r3, [pc, #172]	; (801709c <tcp_receive+0x5e4>)
 8016ff0:	881b      	ldrh	r3, [r3, #0]
 8016ff2:	4619      	mov	r1, r3
 8016ff4:	4b2a      	ldr	r3, [pc, #168]	; (80170a0 <tcp_receive+0x5e8>)
 8016ff6:	681b      	ldr	r3, [r3, #0]
 8016ff8:	440b      	add	r3, r1
 8016ffa:	1ad3      	subs	r3, r2, r3
 8016ffc:	3301      	adds	r3, #1
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	f300 8082 	bgt.w	8017108 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8017004:	4b27      	ldr	r3, [pc, #156]	; (80170a4 <tcp_receive+0x5ec>)
 8017006:	685b      	ldr	r3, [r3, #4]
 8017008:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801700e:	4b24      	ldr	r3, [pc, #144]	; (80170a0 <tcp_receive+0x5e8>)
 8017010:	681b      	ldr	r3, [r3, #0]
 8017012:	1ad3      	subs	r3, r2, r3
 8017014:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8017016:	4b23      	ldr	r3, [pc, #140]	; (80170a4 <tcp_receive+0x5ec>)
 8017018:	685b      	ldr	r3, [r3, #4]
 801701a:	2b00      	cmp	r3, #0
 801701c:	d106      	bne.n	801702c <tcp_receive+0x574>
 801701e:	4b22      	ldr	r3, [pc, #136]	; (80170a8 <tcp_receive+0x5f0>)
 8017020:	f240 5294 	movw	r2, #1428	; 0x594
 8017024:	4921      	ldr	r1, [pc, #132]	; (80170ac <tcp_receive+0x5f4>)
 8017026:	4822      	ldr	r0, [pc, #136]	; (80170b0 <tcp_receive+0x5f8>)
 8017028:	f007 f956 	bl	801e2d8 <printf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801702c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801702e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017032:	4293      	cmp	r3, r2
 8017034:	d906      	bls.n	8017044 <tcp_receive+0x58c>
 8017036:	4b1c      	ldr	r3, [pc, #112]	; (80170a8 <tcp_receive+0x5f0>)
 8017038:	f240 5295 	movw	r2, #1429	; 0x595
 801703c:	491d      	ldr	r1, [pc, #116]	; (80170b4 <tcp_receive+0x5fc>)
 801703e:	481c      	ldr	r0, [pc, #112]	; (80170b0 <tcp_receive+0x5f8>)
 8017040:	f007 f94a 	bl	801e2d8 <printf>
      off = (u16_t)off32;
 8017044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017046:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801704a:	4b16      	ldr	r3, [pc, #88]	; (80170a4 <tcp_receive+0x5ec>)
 801704c:	685b      	ldr	r3, [r3, #4]
 801704e:	891b      	ldrh	r3, [r3, #8]
 8017050:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017054:	429a      	cmp	r2, r3
 8017056:	d906      	bls.n	8017066 <tcp_receive+0x5ae>
 8017058:	4b13      	ldr	r3, [pc, #76]	; (80170a8 <tcp_receive+0x5f0>)
 801705a:	f240 5297 	movw	r2, #1431	; 0x597
 801705e:	4916      	ldr	r1, [pc, #88]	; (80170b8 <tcp_receive+0x600>)
 8017060:	4813      	ldr	r0, [pc, #76]	; (80170b0 <tcp_receive+0x5f8>)
 8017062:	f007 f939 	bl	801e2d8 <printf>
      inseg.len -= off;
 8017066:	4b0f      	ldr	r3, [pc, #60]	; (80170a4 <tcp_receive+0x5ec>)
 8017068:	891a      	ldrh	r2, [r3, #8]
 801706a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801706e:	1ad3      	subs	r3, r2, r3
 8017070:	b29a      	uxth	r2, r3
 8017072:	4b0c      	ldr	r3, [pc, #48]	; (80170a4 <tcp_receive+0x5ec>)
 8017074:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8017076:	4b0b      	ldr	r3, [pc, #44]	; (80170a4 <tcp_receive+0x5ec>)
 8017078:	685b      	ldr	r3, [r3, #4]
 801707a:	891a      	ldrh	r2, [r3, #8]
 801707c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017080:	1ad3      	subs	r3, r2, r3
 8017082:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8017084:	e02a      	b.n	80170dc <tcp_receive+0x624>
 8017086:	bf00      	nop
 8017088:	08025c00 	.word	0x08025c00
 801708c:	08025c08 	.word	0x08025c08
 8017090:	2000c1f4 	.word	0x2000c1f4
 8017094:	2000c1f0 	.word	0x2000c1f0
 8017098:	2000c1b4 	.word	0x2000c1b4
 801709c:	2000c1f6 	.word	0x2000c1f6
 80170a0:	2000c1ec 	.word	0x2000c1ec
 80170a4:	2000c1cc 	.word	0x2000c1cc
 80170a8:	08025898 	.word	0x08025898
 80170ac:	08025c10 	.word	0x08025c10
 80170b0:	080258e4 	.word	0x080258e4
 80170b4:	08025c20 	.word	0x08025c20
 80170b8:	08025c30 	.word	0x08025c30
        off -= p->len;
 80170bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80170be:	895b      	ldrh	r3, [r3, #10]
 80170c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80170c4:	1ad3      	subs	r3, r2, r3
 80170c6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80170ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80170cc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80170ce:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80170d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80170d2:	2200      	movs	r2, #0
 80170d4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80170d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80170d8:	681b      	ldr	r3, [r3, #0]
 80170da:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80170dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80170de:	895b      	ldrh	r3, [r3, #10]
 80170e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80170e4:	429a      	cmp	r2, r3
 80170e6:	d8e9      	bhi.n	80170bc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80170e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80170ec:	4619      	mov	r1, r3
 80170ee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80170f0:	f7fc fb60 	bl	80137b4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170f8:	4a91      	ldr	r2, [pc, #580]	; (8017340 <tcp_receive+0x888>)
 80170fa:	6013      	str	r3, [r2, #0]
 80170fc:	4b91      	ldr	r3, [pc, #580]	; (8017344 <tcp_receive+0x88c>)
 80170fe:	68db      	ldr	r3, [r3, #12]
 8017100:	4a8f      	ldr	r2, [pc, #572]	; (8017340 <tcp_receive+0x888>)
 8017102:	6812      	ldr	r2, [r2, #0]
 8017104:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8017106:	e00d      	b.n	8017124 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8017108:	4b8d      	ldr	r3, [pc, #564]	; (8017340 <tcp_receive+0x888>)
 801710a:	681a      	ldr	r2, [r3, #0]
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017110:	1ad3      	subs	r3, r2, r3
 8017112:	2b00      	cmp	r3, #0
 8017114:	da06      	bge.n	8017124 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	8b5b      	ldrh	r3, [r3, #26]
 801711a:	f043 0302 	orr.w	r3, r3, #2
 801711e:	b29a      	uxth	r2, r3
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017124:	4b86      	ldr	r3, [pc, #536]	; (8017340 <tcp_receive+0x888>)
 8017126:	681a      	ldr	r2, [r3, #0]
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801712c:	1ad3      	subs	r3, r2, r3
 801712e:	2b00      	cmp	r3, #0
 8017130:	f2c0 842a 	blt.w	8017988 <tcp_receive+0xed0>
 8017134:	4b82      	ldr	r3, [pc, #520]	; (8017340 <tcp_receive+0x888>)
 8017136:	681a      	ldr	r2, [r3, #0]
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801713c:	6879      	ldr	r1, [r7, #4]
 801713e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017140:	440b      	add	r3, r1
 8017142:	1ad3      	subs	r3, r2, r3
 8017144:	3301      	adds	r3, #1
 8017146:	2b00      	cmp	r3, #0
 8017148:	f300 841e 	bgt.w	8017988 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017150:	4b7b      	ldr	r3, [pc, #492]	; (8017340 <tcp_receive+0x888>)
 8017152:	681b      	ldr	r3, [r3, #0]
 8017154:	429a      	cmp	r2, r3
 8017156:	f040 829a 	bne.w	801768e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801715a:	4b7a      	ldr	r3, [pc, #488]	; (8017344 <tcp_receive+0x88c>)
 801715c:	891c      	ldrh	r4, [r3, #8]
 801715e:	4b79      	ldr	r3, [pc, #484]	; (8017344 <tcp_receive+0x88c>)
 8017160:	68db      	ldr	r3, [r3, #12]
 8017162:	899b      	ldrh	r3, [r3, #12]
 8017164:	b29b      	uxth	r3, r3
 8017166:	4618      	mov	r0, r3
 8017168:	f7fa fff2 	bl	8012150 <lwip_htons>
 801716c:	4603      	mov	r3, r0
 801716e:	b2db      	uxtb	r3, r3
 8017170:	f003 0303 	and.w	r3, r3, #3
 8017174:	2b00      	cmp	r3, #0
 8017176:	d001      	beq.n	801717c <tcp_receive+0x6c4>
 8017178:	2301      	movs	r3, #1
 801717a:	e000      	b.n	801717e <tcp_receive+0x6c6>
 801717c:	2300      	movs	r3, #0
 801717e:	4423      	add	r3, r4
 8017180:	b29a      	uxth	r2, r3
 8017182:	4b71      	ldr	r3, [pc, #452]	; (8017348 <tcp_receive+0x890>)
 8017184:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801718a:	4b6f      	ldr	r3, [pc, #444]	; (8017348 <tcp_receive+0x890>)
 801718c:	881b      	ldrh	r3, [r3, #0]
 801718e:	429a      	cmp	r2, r3
 8017190:	d275      	bcs.n	801727e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017192:	4b6c      	ldr	r3, [pc, #432]	; (8017344 <tcp_receive+0x88c>)
 8017194:	68db      	ldr	r3, [r3, #12]
 8017196:	899b      	ldrh	r3, [r3, #12]
 8017198:	b29b      	uxth	r3, r3
 801719a:	4618      	mov	r0, r3
 801719c:	f7fa ffd8 	bl	8012150 <lwip_htons>
 80171a0:	4603      	mov	r3, r0
 80171a2:	b2db      	uxtb	r3, r3
 80171a4:	f003 0301 	and.w	r3, r3, #1
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d01f      	beq.n	80171ec <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80171ac:	4b65      	ldr	r3, [pc, #404]	; (8017344 <tcp_receive+0x88c>)
 80171ae:	68db      	ldr	r3, [r3, #12]
 80171b0:	899b      	ldrh	r3, [r3, #12]
 80171b2:	b29b      	uxth	r3, r3
 80171b4:	b21b      	sxth	r3, r3
 80171b6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80171ba:	b21c      	sxth	r4, r3
 80171bc:	4b61      	ldr	r3, [pc, #388]	; (8017344 <tcp_receive+0x88c>)
 80171be:	68db      	ldr	r3, [r3, #12]
 80171c0:	899b      	ldrh	r3, [r3, #12]
 80171c2:	b29b      	uxth	r3, r3
 80171c4:	4618      	mov	r0, r3
 80171c6:	f7fa ffc3 	bl	8012150 <lwip_htons>
 80171ca:	4603      	mov	r3, r0
 80171cc:	b2db      	uxtb	r3, r3
 80171ce:	b29b      	uxth	r3, r3
 80171d0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80171d4:	b29b      	uxth	r3, r3
 80171d6:	4618      	mov	r0, r3
 80171d8:	f7fa ffba 	bl	8012150 <lwip_htons>
 80171dc:	4603      	mov	r3, r0
 80171de:	b21b      	sxth	r3, r3
 80171e0:	4323      	orrs	r3, r4
 80171e2:	b21a      	sxth	r2, r3
 80171e4:	4b57      	ldr	r3, [pc, #348]	; (8017344 <tcp_receive+0x88c>)
 80171e6:	68db      	ldr	r3, [r3, #12]
 80171e8:	b292      	uxth	r2, r2
 80171ea:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80171f0:	4b54      	ldr	r3, [pc, #336]	; (8017344 <tcp_receive+0x88c>)
 80171f2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80171f4:	4b53      	ldr	r3, [pc, #332]	; (8017344 <tcp_receive+0x88c>)
 80171f6:	68db      	ldr	r3, [r3, #12]
 80171f8:	899b      	ldrh	r3, [r3, #12]
 80171fa:	b29b      	uxth	r3, r3
 80171fc:	4618      	mov	r0, r3
 80171fe:	f7fa ffa7 	bl	8012150 <lwip_htons>
 8017202:	4603      	mov	r3, r0
 8017204:	b2db      	uxtb	r3, r3
 8017206:	f003 0302 	and.w	r3, r3, #2
 801720a:	2b00      	cmp	r3, #0
 801720c:	d005      	beq.n	801721a <tcp_receive+0x762>
            inseg.len -= 1;
 801720e:	4b4d      	ldr	r3, [pc, #308]	; (8017344 <tcp_receive+0x88c>)
 8017210:	891b      	ldrh	r3, [r3, #8]
 8017212:	3b01      	subs	r3, #1
 8017214:	b29a      	uxth	r2, r3
 8017216:	4b4b      	ldr	r3, [pc, #300]	; (8017344 <tcp_receive+0x88c>)
 8017218:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801721a:	4b4a      	ldr	r3, [pc, #296]	; (8017344 <tcp_receive+0x88c>)
 801721c:	685b      	ldr	r3, [r3, #4]
 801721e:	4a49      	ldr	r2, [pc, #292]	; (8017344 <tcp_receive+0x88c>)
 8017220:	8912      	ldrh	r2, [r2, #8]
 8017222:	4611      	mov	r1, r2
 8017224:	4618      	mov	r0, r3
 8017226:	f7fc f9c5 	bl	80135b4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801722a:	4b46      	ldr	r3, [pc, #280]	; (8017344 <tcp_receive+0x88c>)
 801722c:	891c      	ldrh	r4, [r3, #8]
 801722e:	4b45      	ldr	r3, [pc, #276]	; (8017344 <tcp_receive+0x88c>)
 8017230:	68db      	ldr	r3, [r3, #12]
 8017232:	899b      	ldrh	r3, [r3, #12]
 8017234:	b29b      	uxth	r3, r3
 8017236:	4618      	mov	r0, r3
 8017238:	f7fa ff8a 	bl	8012150 <lwip_htons>
 801723c:	4603      	mov	r3, r0
 801723e:	b2db      	uxtb	r3, r3
 8017240:	f003 0303 	and.w	r3, r3, #3
 8017244:	2b00      	cmp	r3, #0
 8017246:	d001      	beq.n	801724c <tcp_receive+0x794>
 8017248:	2301      	movs	r3, #1
 801724a:	e000      	b.n	801724e <tcp_receive+0x796>
 801724c:	2300      	movs	r3, #0
 801724e:	4423      	add	r3, r4
 8017250:	b29a      	uxth	r2, r3
 8017252:	4b3d      	ldr	r3, [pc, #244]	; (8017348 <tcp_receive+0x890>)
 8017254:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8017256:	4b3c      	ldr	r3, [pc, #240]	; (8017348 <tcp_receive+0x890>)
 8017258:	881b      	ldrh	r3, [r3, #0]
 801725a:	461a      	mov	r2, r3
 801725c:	4b38      	ldr	r3, [pc, #224]	; (8017340 <tcp_receive+0x888>)
 801725e:	681b      	ldr	r3, [r3, #0]
 8017260:	441a      	add	r2, r3
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017266:	6879      	ldr	r1, [r7, #4]
 8017268:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801726a:	440b      	add	r3, r1
 801726c:	429a      	cmp	r2, r3
 801726e:	d006      	beq.n	801727e <tcp_receive+0x7c6>
 8017270:	4b36      	ldr	r3, [pc, #216]	; (801734c <tcp_receive+0x894>)
 8017272:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8017276:	4936      	ldr	r1, [pc, #216]	; (8017350 <tcp_receive+0x898>)
 8017278:	4836      	ldr	r0, [pc, #216]	; (8017354 <tcp_receive+0x89c>)
 801727a:	f007 f82d 	bl	801e2d8 <printf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017282:	2b00      	cmp	r3, #0
 8017284:	f000 80e7 	beq.w	8017456 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017288:	4b2e      	ldr	r3, [pc, #184]	; (8017344 <tcp_receive+0x88c>)
 801728a:	68db      	ldr	r3, [r3, #12]
 801728c:	899b      	ldrh	r3, [r3, #12]
 801728e:	b29b      	uxth	r3, r3
 8017290:	4618      	mov	r0, r3
 8017292:	f7fa ff5d 	bl	8012150 <lwip_htons>
 8017296:	4603      	mov	r3, r0
 8017298:	b2db      	uxtb	r3, r3
 801729a:	f003 0301 	and.w	r3, r3, #1
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d010      	beq.n	80172c4 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80172a2:	e00a      	b.n	80172ba <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80172a8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80172ae:	681a      	ldr	r2, [r3, #0]
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80172b4:	68f8      	ldr	r0, [r7, #12]
 80172b6:	f7fd fd92 	bl	8014dde <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80172be:	2b00      	cmp	r3, #0
 80172c0:	d1f0      	bne.n	80172a4 <tcp_receive+0x7ec>
 80172c2:	e0c8      	b.n	8017456 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80172c8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80172ca:	e052      	b.n	8017372 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80172cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80172ce:	68db      	ldr	r3, [r3, #12]
 80172d0:	899b      	ldrh	r3, [r3, #12]
 80172d2:	b29b      	uxth	r3, r3
 80172d4:	4618      	mov	r0, r3
 80172d6:	f7fa ff3b 	bl	8012150 <lwip_htons>
 80172da:	4603      	mov	r3, r0
 80172dc:	b2db      	uxtb	r3, r3
 80172de:	f003 0301 	and.w	r3, r3, #1
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	d03d      	beq.n	8017362 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80172e6:	4b17      	ldr	r3, [pc, #92]	; (8017344 <tcp_receive+0x88c>)
 80172e8:	68db      	ldr	r3, [r3, #12]
 80172ea:	899b      	ldrh	r3, [r3, #12]
 80172ec:	b29b      	uxth	r3, r3
 80172ee:	4618      	mov	r0, r3
 80172f0:	f7fa ff2e 	bl	8012150 <lwip_htons>
 80172f4:	4603      	mov	r3, r0
 80172f6:	b2db      	uxtb	r3, r3
 80172f8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d130      	bne.n	8017362 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8017300:	4b10      	ldr	r3, [pc, #64]	; (8017344 <tcp_receive+0x88c>)
 8017302:	68db      	ldr	r3, [r3, #12]
 8017304:	899b      	ldrh	r3, [r3, #12]
 8017306:	b29c      	uxth	r4, r3
 8017308:	2001      	movs	r0, #1
 801730a:	f7fa ff21 	bl	8012150 <lwip_htons>
 801730e:	4603      	mov	r3, r0
 8017310:	461a      	mov	r2, r3
 8017312:	4b0c      	ldr	r3, [pc, #48]	; (8017344 <tcp_receive+0x88c>)
 8017314:	68db      	ldr	r3, [r3, #12]
 8017316:	4322      	orrs	r2, r4
 8017318:	b292      	uxth	r2, r2
 801731a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801731c:	4b09      	ldr	r3, [pc, #36]	; (8017344 <tcp_receive+0x88c>)
 801731e:	891c      	ldrh	r4, [r3, #8]
 8017320:	4b08      	ldr	r3, [pc, #32]	; (8017344 <tcp_receive+0x88c>)
 8017322:	68db      	ldr	r3, [r3, #12]
 8017324:	899b      	ldrh	r3, [r3, #12]
 8017326:	b29b      	uxth	r3, r3
 8017328:	4618      	mov	r0, r3
 801732a:	f7fa ff11 	bl	8012150 <lwip_htons>
 801732e:	4603      	mov	r3, r0
 8017330:	b2db      	uxtb	r3, r3
 8017332:	f003 0303 	and.w	r3, r3, #3
 8017336:	2b00      	cmp	r3, #0
 8017338:	d00e      	beq.n	8017358 <tcp_receive+0x8a0>
 801733a:	2301      	movs	r3, #1
 801733c:	e00d      	b.n	801735a <tcp_receive+0x8a2>
 801733e:	bf00      	nop
 8017340:	2000c1ec 	.word	0x2000c1ec
 8017344:	2000c1cc 	.word	0x2000c1cc
 8017348:	2000c1f6 	.word	0x2000c1f6
 801734c:	08025898 	.word	0x08025898
 8017350:	08025c40 	.word	0x08025c40
 8017354:	080258e4 	.word	0x080258e4
 8017358:	2300      	movs	r3, #0
 801735a:	4423      	add	r3, r4
 801735c:	b29a      	uxth	r2, r3
 801735e:	4b98      	ldr	r3, [pc, #608]	; (80175c0 <tcp_receive+0xb08>)
 8017360:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8017362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017364:	613b      	str	r3, [r7, #16]
              next = next->next;
 8017366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017368:	681b      	ldr	r3, [r3, #0]
 801736a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801736c:	6938      	ldr	r0, [r7, #16]
 801736e:	f7fd fd36 	bl	8014dde <tcp_seg_free>
            while (next &&
 8017372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017374:	2b00      	cmp	r3, #0
 8017376:	d00e      	beq.n	8017396 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8017378:	4b91      	ldr	r3, [pc, #580]	; (80175c0 <tcp_receive+0xb08>)
 801737a:	881b      	ldrh	r3, [r3, #0]
 801737c:	461a      	mov	r2, r3
 801737e:	4b91      	ldr	r3, [pc, #580]	; (80175c4 <tcp_receive+0xb0c>)
 8017380:	681b      	ldr	r3, [r3, #0]
 8017382:	441a      	add	r2, r3
 8017384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017386:	68db      	ldr	r3, [r3, #12]
 8017388:	685b      	ldr	r3, [r3, #4]
 801738a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801738c:	8909      	ldrh	r1, [r1, #8]
 801738e:	440b      	add	r3, r1
 8017390:	1ad3      	subs	r3, r2, r3
            while (next &&
 8017392:	2b00      	cmp	r3, #0
 8017394:	da9a      	bge.n	80172cc <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8017396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017398:	2b00      	cmp	r3, #0
 801739a:	d059      	beq.n	8017450 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 801739c:	4b88      	ldr	r3, [pc, #544]	; (80175c0 <tcp_receive+0xb08>)
 801739e:	881b      	ldrh	r3, [r3, #0]
 80173a0:	461a      	mov	r2, r3
 80173a2:	4b88      	ldr	r3, [pc, #544]	; (80175c4 <tcp_receive+0xb0c>)
 80173a4:	681b      	ldr	r3, [r3, #0]
 80173a6:	441a      	add	r2, r3
 80173a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80173aa:	68db      	ldr	r3, [r3, #12]
 80173ac:	685b      	ldr	r3, [r3, #4]
 80173ae:	1ad3      	subs	r3, r2, r3
            if (next &&
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	dd4d      	ble.n	8017450 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80173b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80173b6:	68db      	ldr	r3, [r3, #12]
 80173b8:	685b      	ldr	r3, [r3, #4]
 80173ba:	b29a      	uxth	r2, r3
 80173bc:	4b81      	ldr	r3, [pc, #516]	; (80175c4 <tcp_receive+0xb0c>)
 80173be:	681b      	ldr	r3, [r3, #0]
 80173c0:	b29b      	uxth	r3, r3
 80173c2:	1ad3      	subs	r3, r2, r3
 80173c4:	b29a      	uxth	r2, r3
 80173c6:	4b80      	ldr	r3, [pc, #512]	; (80175c8 <tcp_receive+0xb10>)
 80173c8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80173ca:	4b7f      	ldr	r3, [pc, #508]	; (80175c8 <tcp_receive+0xb10>)
 80173cc:	68db      	ldr	r3, [r3, #12]
 80173ce:	899b      	ldrh	r3, [r3, #12]
 80173d0:	b29b      	uxth	r3, r3
 80173d2:	4618      	mov	r0, r3
 80173d4:	f7fa febc 	bl	8012150 <lwip_htons>
 80173d8:	4603      	mov	r3, r0
 80173da:	b2db      	uxtb	r3, r3
 80173dc:	f003 0302 	and.w	r3, r3, #2
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d005      	beq.n	80173f0 <tcp_receive+0x938>
                inseg.len -= 1;
 80173e4:	4b78      	ldr	r3, [pc, #480]	; (80175c8 <tcp_receive+0xb10>)
 80173e6:	891b      	ldrh	r3, [r3, #8]
 80173e8:	3b01      	subs	r3, #1
 80173ea:	b29a      	uxth	r2, r3
 80173ec:	4b76      	ldr	r3, [pc, #472]	; (80175c8 <tcp_receive+0xb10>)
 80173ee:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80173f0:	4b75      	ldr	r3, [pc, #468]	; (80175c8 <tcp_receive+0xb10>)
 80173f2:	685b      	ldr	r3, [r3, #4]
 80173f4:	4a74      	ldr	r2, [pc, #464]	; (80175c8 <tcp_receive+0xb10>)
 80173f6:	8912      	ldrh	r2, [r2, #8]
 80173f8:	4611      	mov	r1, r2
 80173fa:	4618      	mov	r0, r3
 80173fc:	f7fc f8da 	bl	80135b4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8017400:	4b71      	ldr	r3, [pc, #452]	; (80175c8 <tcp_receive+0xb10>)
 8017402:	891c      	ldrh	r4, [r3, #8]
 8017404:	4b70      	ldr	r3, [pc, #448]	; (80175c8 <tcp_receive+0xb10>)
 8017406:	68db      	ldr	r3, [r3, #12]
 8017408:	899b      	ldrh	r3, [r3, #12]
 801740a:	b29b      	uxth	r3, r3
 801740c:	4618      	mov	r0, r3
 801740e:	f7fa fe9f 	bl	8012150 <lwip_htons>
 8017412:	4603      	mov	r3, r0
 8017414:	b2db      	uxtb	r3, r3
 8017416:	f003 0303 	and.w	r3, r3, #3
 801741a:	2b00      	cmp	r3, #0
 801741c:	d001      	beq.n	8017422 <tcp_receive+0x96a>
 801741e:	2301      	movs	r3, #1
 8017420:	e000      	b.n	8017424 <tcp_receive+0x96c>
 8017422:	2300      	movs	r3, #0
 8017424:	4423      	add	r3, r4
 8017426:	b29a      	uxth	r2, r3
 8017428:	4b65      	ldr	r3, [pc, #404]	; (80175c0 <tcp_receive+0xb08>)
 801742a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801742c:	4b64      	ldr	r3, [pc, #400]	; (80175c0 <tcp_receive+0xb08>)
 801742e:	881b      	ldrh	r3, [r3, #0]
 8017430:	461a      	mov	r2, r3
 8017432:	4b64      	ldr	r3, [pc, #400]	; (80175c4 <tcp_receive+0xb0c>)
 8017434:	681b      	ldr	r3, [r3, #0]
 8017436:	441a      	add	r2, r3
 8017438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801743a:	68db      	ldr	r3, [r3, #12]
 801743c:	685b      	ldr	r3, [r3, #4]
 801743e:	429a      	cmp	r2, r3
 8017440:	d006      	beq.n	8017450 <tcp_receive+0x998>
 8017442:	4b62      	ldr	r3, [pc, #392]	; (80175cc <tcp_receive+0xb14>)
 8017444:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8017448:	4961      	ldr	r1, [pc, #388]	; (80175d0 <tcp_receive+0xb18>)
 801744a:	4862      	ldr	r0, [pc, #392]	; (80175d4 <tcp_receive+0xb1c>)
 801744c:	f006 ff44 	bl	801e2d8 <printf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017454:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8017456:	4b5a      	ldr	r3, [pc, #360]	; (80175c0 <tcp_receive+0xb08>)
 8017458:	881b      	ldrh	r3, [r3, #0]
 801745a:	461a      	mov	r2, r3
 801745c:	4b59      	ldr	r3, [pc, #356]	; (80175c4 <tcp_receive+0xb0c>)
 801745e:	681b      	ldr	r3, [r3, #0]
 8017460:	441a      	add	r2, r3
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801746a:	4b55      	ldr	r3, [pc, #340]	; (80175c0 <tcp_receive+0xb08>)
 801746c:	881b      	ldrh	r3, [r3, #0]
 801746e:	429a      	cmp	r2, r3
 8017470:	d206      	bcs.n	8017480 <tcp_receive+0x9c8>
 8017472:	4b56      	ldr	r3, [pc, #344]	; (80175cc <tcp_receive+0xb14>)
 8017474:	f240 6207 	movw	r2, #1543	; 0x607
 8017478:	4957      	ldr	r1, [pc, #348]	; (80175d8 <tcp_receive+0xb20>)
 801747a:	4856      	ldr	r0, [pc, #344]	; (80175d4 <tcp_receive+0xb1c>)
 801747c:	f006 ff2c 	bl	801e2d8 <printf>
        pcb->rcv_wnd -= tcplen;
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8017484:	4b4e      	ldr	r3, [pc, #312]	; (80175c0 <tcp_receive+0xb08>)
 8017486:	881b      	ldrh	r3, [r3, #0]
 8017488:	1ad3      	subs	r3, r2, r3
 801748a:	b29a      	uxth	r2, r3
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8017490:	6878      	ldr	r0, [r7, #4]
 8017492:	f7fc ffc5 	bl	8014420 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8017496:	4b4c      	ldr	r3, [pc, #304]	; (80175c8 <tcp_receive+0xb10>)
 8017498:	685b      	ldr	r3, [r3, #4]
 801749a:	891b      	ldrh	r3, [r3, #8]
 801749c:	2b00      	cmp	r3, #0
 801749e:	d006      	beq.n	80174ae <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80174a0:	4b49      	ldr	r3, [pc, #292]	; (80175c8 <tcp_receive+0xb10>)
 80174a2:	685b      	ldr	r3, [r3, #4]
 80174a4:	4a4d      	ldr	r2, [pc, #308]	; (80175dc <tcp_receive+0xb24>)
 80174a6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80174a8:	4b47      	ldr	r3, [pc, #284]	; (80175c8 <tcp_receive+0xb10>)
 80174aa:	2200      	movs	r2, #0
 80174ac:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80174ae:	4b46      	ldr	r3, [pc, #280]	; (80175c8 <tcp_receive+0xb10>)
 80174b0:	68db      	ldr	r3, [r3, #12]
 80174b2:	899b      	ldrh	r3, [r3, #12]
 80174b4:	b29b      	uxth	r3, r3
 80174b6:	4618      	mov	r0, r3
 80174b8:	f7fa fe4a 	bl	8012150 <lwip_htons>
 80174bc:	4603      	mov	r3, r0
 80174be:	b2db      	uxtb	r3, r3
 80174c0:	f003 0301 	and.w	r3, r3, #1
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	f000 80b8 	beq.w	801763a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80174ca:	4b45      	ldr	r3, [pc, #276]	; (80175e0 <tcp_receive+0xb28>)
 80174cc:	781b      	ldrb	r3, [r3, #0]
 80174ce:	f043 0320 	orr.w	r3, r3, #32
 80174d2:	b2da      	uxtb	r2, r3
 80174d4:	4b42      	ldr	r3, [pc, #264]	; (80175e0 <tcp_receive+0xb28>)
 80174d6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80174d8:	e0af      	b.n	801763a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80174de:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80174e4:	68db      	ldr	r3, [r3, #12]
 80174e6:	685b      	ldr	r3, [r3, #4]
 80174e8:	4a36      	ldr	r2, [pc, #216]	; (80175c4 <tcp_receive+0xb0c>)
 80174ea:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80174ec:	68bb      	ldr	r3, [r7, #8]
 80174ee:	891b      	ldrh	r3, [r3, #8]
 80174f0:	461c      	mov	r4, r3
 80174f2:	68bb      	ldr	r3, [r7, #8]
 80174f4:	68db      	ldr	r3, [r3, #12]
 80174f6:	899b      	ldrh	r3, [r3, #12]
 80174f8:	b29b      	uxth	r3, r3
 80174fa:	4618      	mov	r0, r3
 80174fc:	f7fa fe28 	bl	8012150 <lwip_htons>
 8017500:	4603      	mov	r3, r0
 8017502:	b2db      	uxtb	r3, r3
 8017504:	f003 0303 	and.w	r3, r3, #3
 8017508:	2b00      	cmp	r3, #0
 801750a:	d001      	beq.n	8017510 <tcp_receive+0xa58>
 801750c:	2301      	movs	r3, #1
 801750e:	e000      	b.n	8017512 <tcp_receive+0xa5a>
 8017510:	2300      	movs	r3, #0
 8017512:	191a      	adds	r2, r3, r4
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017518:	441a      	add	r2, r3
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017522:	461c      	mov	r4, r3
 8017524:	68bb      	ldr	r3, [r7, #8]
 8017526:	891b      	ldrh	r3, [r3, #8]
 8017528:	461d      	mov	r5, r3
 801752a:	68bb      	ldr	r3, [r7, #8]
 801752c:	68db      	ldr	r3, [r3, #12]
 801752e:	899b      	ldrh	r3, [r3, #12]
 8017530:	b29b      	uxth	r3, r3
 8017532:	4618      	mov	r0, r3
 8017534:	f7fa fe0c 	bl	8012150 <lwip_htons>
 8017538:	4603      	mov	r3, r0
 801753a:	b2db      	uxtb	r3, r3
 801753c:	f003 0303 	and.w	r3, r3, #3
 8017540:	2b00      	cmp	r3, #0
 8017542:	d001      	beq.n	8017548 <tcp_receive+0xa90>
 8017544:	2301      	movs	r3, #1
 8017546:	e000      	b.n	801754a <tcp_receive+0xa92>
 8017548:	2300      	movs	r3, #0
 801754a:	442b      	add	r3, r5
 801754c:	429c      	cmp	r4, r3
 801754e:	d206      	bcs.n	801755e <tcp_receive+0xaa6>
 8017550:	4b1e      	ldr	r3, [pc, #120]	; (80175cc <tcp_receive+0xb14>)
 8017552:	f240 622b 	movw	r2, #1579	; 0x62b
 8017556:	4923      	ldr	r1, [pc, #140]	; (80175e4 <tcp_receive+0xb2c>)
 8017558:	481e      	ldr	r0, [pc, #120]	; (80175d4 <tcp_receive+0xb1c>)
 801755a:	f006 febd 	bl	801e2d8 <printf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801755e:	68bb      	ldr	r3, [r7, #8]
 8017560:	891b      	ldrh	r3, [r3, #8]
 8017562:	461c      	mov	r4, r3
 8017564:	68bb      	ldr	r3, [r7, #8]
 8017566:	68db      	ldr	r3, [r3, #12]
 8017568:	899b      	ldrh	r3, [r3, #12]
 801756a:	b29b      	uxth	r3, r3
 801756c:	4618      	mov	r0, r3
 801756e:	f7fa fdef 	bl	8012150 <lwip_htons>
 8017572:	4603      	mov	r3, r0
 8017574:	b2db      	uxtb	r3, r3
 8017576:	f003 0303 	and.w	r3, r3, #3
 801757a:	2b00      	cmp	r3, #0
 801757c:	d001      	beq.n	8017582 <tcp_receive+0xaca>
 801757e:	2301      	movs	r3, #1
 8017580:	e000      	b.n	8017584 <tcp_receive+0xacc>
 8017582:	2300      	movs	r3, #0
 8017584:	1919      	adds	r1, r3, r4
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801758a:	b28b      	uxth	r3, r1
 801758c:	1ad3      	subs	r3, r2, r3
 801758e:	b29a      	uxth	r2, r3
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8017594:	6878      	ldr	r0, [r7, #4]
 8017596:	f7fc ff43 	bl	8014420 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801759a:	68bb      	ldr	r3, [r7, #8]
 801759c:	685b      	ldr	r3, [r3, #4]
 801759e:	891b      	ldrh	r3, [r3, #8]
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	d028      	beq.n	80175f6 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80175a4:	4b0d      	ldr	r3, [pc, #52]	; (80175dc <tcp_receive+0xb24>)
 80175a6:	681b      	ldr	r3, [r3, #0]
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	d01d      	beq.n	80175e8 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80175ac:	4b0b      	ldr	r3, [pc, #44]	; (80175dc <tcp_receive+0xb24>)
 80175ae:	681a      	ldr	r2, [r3, #0]
 80175b0:	68bb      	ldr	r3, [r7, #8]
 80175b2:	685b      	ldr	r3, [r3, #4]
 80175b4:	4619      	mov	r1, r3
 80175b6:	4610      	mov	r0, r2
 80175b8:	f7fc fa50 	bl	8013a5c <pbuf_cat>
 80175bc:	e018      	b.n	80175f0 <tcp_receive+0xb38>
 80175be:	bf00      	nop
 80175c0:	2000c1f6 	.word	0x2000c1f6
 80175c4:	2000c1ec 	.word	0x2000c1ec
 80175c8:	2000c1cc 	.word	0x2000c1cc
 80175cc:	08025898 	.word	0x08025898
 80175d0:	08025c78 	.word	0x08025c78
 80175d4:	080258e4 	.word	0x080258e4
 80175d8:	08025cb4 	.word	0x08025cb4
 80175dc:	2000c1fc 	.word	0x2000c1fc
 80175e0:	2000c1f9 	.word	0x2000c1f9
 80175e4:	08025cd4 	.word	0x08025cd4
            } else {
              recv_data = cseg->p;
 80175e8:	68bb      	ldr	r3, [r7, #8]
 80175ea:	685b      	ldr	r3, [r3, #4]
 80175ec:	4a70      	ldr	r2, [pc, #448]	; (80177b0 <tcp_receive+0xcf8>)
 80175ee:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80175f0:	68bb      	ldr	r3, [r7, #8]
 80175f2:	2200      	movs	r2, #0
 80175f4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80175f6:	68bb      	ldr	r3, [r7, #8]
 80175f8:	68db      	ldr	r3, [r3, #12]
 80175fa:	899b      	ldrh	r3, [r3, #12]
 80175fc:	b29b      	uxth	r3, r3
 80175fe:	4618      	mov	r0, r3
 8017600:	f7fa fda6 	bl	8012150 <lwip_htons>
 8017604:	4603      	mov	r3, r0
 8017606:	b2db      	uxtb	r3, r3
 8017608:	f003 0301 	and.w	r3, r3, #1
 801760c:	2b00      	cmp	r3, #0
 801760e:	d00d      	beq.n	801762c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8017610:	4b68      	ldr	r3, [pc, #416]	; (80177b4 <tcp_receive+0xcfc>)
 8017612:	781b      	ldrb	r3, [r3, #0]
 8017614:	f043 0320 	orr.w	r3, r3, #32
 8017618:	b2da      	uxtb	r2, r3
 801761a:	4b66      	ldr	r3, [pc, #408]	; (80177b4 <tcp_receive+0xcfc>)
 801761c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	7d1b      	ldrb	r3, [r3, #20]
 8017622:	2b04      	cmp	r3, #4
 8017624:	d102      	bne.n	801762c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	2207      	movs	r2, #7
 801762a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801762c:	68bb      	ldr	r3, [r7, #8]
 801762e:	681a      	ldr	r2, [r3, #0]
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8017634:	68b8      	ldr	r0, [r7, #8]
 8017636:	f7fd fbd2 	bl	8014dde <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801763e:	2b00      	cmp	r3, #0
 8017640:	d008      	beq.n	8017654 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017646:	68db      	ldr	r3, [r3, #12]
 8017648:	685a      	ldr	r2, [r3, #4]
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801764e:	429a      	cmp	r2, r3
 8017650:	f43f af43 	beq.w	80174da <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	8b5b      	ldrh	r3, [r3, #26]
 8017658:	f003 0301 	and.w	r3, r3, #1
 801765c:	2b00      	cmp	r3, #0
 801765e:	d00e      	beq.n	801767e <tcp_receive+0xbc6>
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	8b5b      	ldrh	r3, [r3, #26]
 8017664:	f023 0301 	bic.w	r3, r3, #1
 8017668:	b29a      	uxth	r2, r3
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	835a      	strh	r2, [r3, #26]
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	8b5b      	ldrh	r3, [r3, #26]
 8017672:	f043 0302 	orr.w	r3, r3, #2
 8017676:	b29a      	uxth	r2, r3
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801767c:	e188      	b.n	8017990 <tcp_receive+0xed8>
        tcp_ack(pcb);
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	8b5b      	ldrh	r3, [r3, #26]
 8017682:	f043 0301 	orr.w	r3, r3, #1
 8017686:	b29a      	uxth	r2, r3
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801768c:	e180      	b.n	8017990 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017692:	2b00      	cmp	r3, #0
 8017694:	d106      	bne.n	80176a4 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8017696:	4848      	ldr	r0, [pc, #288]	; (80177b8 <tcp_receive+0xd00>)
 8017698:	f7fd fbba 	bl	8014e10 <tcp_seg_copy>
 801769c:	4602      	mov	r2, r0
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	675a      	str	r2, [r3, #116]	; 0x74
 80176a2:	e16d      	b.n	8017980 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80176a4:	2300      	movs	r3, #0
 80176a6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80176ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80176ae:	e157      	b.n	8017960 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 80176b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80176b2:	68db      	ldr	r3, [r3, #12]
 80176b4:	685a      	ldr	r2, [r3, #4]
 80176b6:	4b41      	ldr	r3, [pc, #260]	; (80177bc <tcp_receive+0xd04>)
 80176b8:	681b      	ldr	r3, [r3, #0]
 80176ba:	429a      	cmp	r2, r3
 80176bc:	d11d      	bne.n	80176fa <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80176be:	4b3e      	ldr	r3, [pc, #248]	; (80177b8 <tcp_receive+0xd00>)
 80176c0:	891a      	ldrh	r2, [r3, #8]
 80176c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80176c4:	891b      	ldrh	r3, [r3, #8]
 80176c6:	429a      	cmp	r2, r3
 80176c8:	f240 814f 	bls.w	801796a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80176cc:	483a      	ldr	r0, [pc, #232]	; (80177b8 <tcp_receive+0xd00>)
 80176ce:	f7fd fb9f 	bl	8014e10 <tcp_seg_copy>
 80176d2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80176d4:	697b      	ldr	r3, [r7, #20]
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	f000 8149 	beq.w	801796e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80176dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d003      	beq.n	80176ea <tcp_receive+0xc32>
                    prev->next = cseg;
 80176e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80176e4:	697a      	ldr	r2, [r7, #20]
 80176e6:	601a      	str	r2, [r3, #0]
 80176e8:	e002      	b.n	80176f0 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	697a      	ldr	r2, [r7, #20]
 80176ee:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80176f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80176f2:	6978      	ldr	r0, [r7, #20]
 80176f4:	f7ff f8dc 	bl	80168b0 <tcp_oos_insert_segment>
                }
                break;
 80176f8:	e139      	b.n	801796e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80176fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	d117      	bne.n	8017730 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8017700:	4b2e      	ldr	r3, [pc, #184]	; (80177bc <tcp_receive+0xd04>)
 8017702:	681a      	ldr	r2, [r3, #0]
 8017704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017706:	68db      	ldr	r3, [r3, #12]
 8017708:	685b      	ldr	r3, [r3, #4]
 801770a:	1ad3      	subs	r3, r2, r3
 801770c:	2b00      	cmp	r3, #0
 801770e:	da57      	bge.n	80177c0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017710:	4829      	ldr	r0, [pc, #164]	; (80177b8 <tcp_receive+0xd00>)
 8017712:	f7fd fb7d 	bl	8014e10 <tcp_seg_copy>
 8017716:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8017718:	69bb      	ldr	r3, [r7, #24]
 801771a:	2b00      	cmp	r3, #0
 801771c:	f000 8129 	beq.w	8017972 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	69ba      	ldr	r2, [r7, #24]
 8017724:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8017726:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017728:	69b8      	ldr	r0, [r7, #24]
 801772a:	f7ff f8c1 	bl	80168b0 <tcp_oos_insert_segment>
                  }
                  break;
 801772e:	e120      	b.n	8017972 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8017730:	4b22      	ldr	r3, [pc, #136]	; (80177bc <tcp_receive+0xd04>)
 8017732:	681a      	ldr	r2, [r3, #0]
 8017734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017736:	68db      	ldr	r3, [r3, #12]
 8017738:	685b      	ldr	r3, [r3, #4]
 801773a:	1ad3      	subs	r3, r2, r3
 801773c:	3b01      	subs	r3, #1
 801773e:	2b00      	cmp	r3, #0
 8017740:	db3e      	blt.n	80177c0 <tcp_receive+0xd08>
 8017742:	4b1e      	ldr	r3, [pc, #120]	; (80177bc <tcp_receive+0xd04>)
 8017744:	681a      	ldr	r2, [r3, #0]
 8017746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017748:	68db      	ldr	r3, [r3, #12]
 801774a:	685b      	ldr	r3, [r3, #4]
 801774c:	1ad3      	subs	r3, r2, r3
 801774e:	3301      	adds	r3, #1
 8017750:	2b00      	cmp	r3, #0
 8017752:	dc35      	bgt.n	80177c0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017754:	4818      	ldr	r0, [pc, #96]	; (80177b8 <tcp_receive+0xd00>)
 8017756:	f7fd fb5b 	bl	8014e10 <tcp_seg_copy>
 801775a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801775c:	69fb      	ldr	r3, [r7, #28]
 801775e:	2b00      	cmp	r3, #0
 8017760:	f000 8109 	beq.w	8017976 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8017764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017766:	68db      	ldr	r3, [r3, #12]
 8017768:	685b      	ldr	r3, [r3, #4]
 801776a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801776c:	8912      	ldrh	r2, [r2, #8]
 801776e:	441a      	add	r2, r3
 8017770:	4b12      	ldr	r3, [pc, #72]	; (80177bc <tcp_receive+0xd04>)
 8017772:	681b      	ldr	r3, [r3, #0]
 8017774:	1ad3      	subs	r3, r2, r3
 8017776:	2b00      	cmp	r3, #0
 8017778:	dd12      	ble.n	80177a0 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801777a:	4b10      	ldr	r3, [pc, #64]	; (80177bc <tcp_receive+0xd04>)
 801777c:	681b      	ldr	r3, [r3, #0]
 801777e:	b29a      	uxth	r2, r3
 8017780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017782:	68db      	ldr	r3, [r3, #12]
 8017784:	685b      	ldr	r3, [r3, #4]
 8017786:	b29b      	uxth	r3, r3
 8017788:	1ad3      	subs	r3, r2, r3
 801778a:	b29a      	uxth	r2, r3
 801778c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801778e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8017790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017792:	685a      	ldr	r2, [r3, #4]
 8017794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017796:	891b      	ldrh	r3, [r3, #8]
 8017798:	4619      	mov	r1, r3
 801779a:	4610      	mov	r0, r2
 801779c:	f7fb ff0a 	bl	80135b4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80177a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80177a2:	69fa      	ldr	r2, [r7, #28]
 80177a4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80177a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80177a8:	69f8      	ldr	r0, [r7, #28]
 80177aa:	f7ff f881 	bl	80168b0 <tcp_oos_insert_segment>
                  }
                  break;
 80177ae:	e0e2      	b.n	8017976 <tcp_receive+0xebe>
 80177b0:	2000c1fc 	.word	0x2000c1fc
 80177b4:	2000c1f9 	.word	0x2000c1f9
 80177b8:	2000c1cc 	.word	0x2000c1cc
 80177bc:	2000c1ec 	.word	0x2000c1ec
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80177c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80177c2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80177c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80177c6:	681b      	ldr	r3, [r3, #0]
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	f040 80c6 	bne.w	801795a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80177ce:	4b80      	ldr	r3, [pc, #512]	; (80179d0 <tcp_receive+0xf18>)
 80177d0:	681a      	ldr	r2, [r3, #0]
 80177d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80177d4:	68db      	ldr	r3, [r3, #12]
 80177d6:	685b      	ldr	r3, [r3, #4]
 80177d8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80177da:	2b00      	cmp	r3, #0
 80177dc:	f340 80bd 	ble.w	801795a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80177e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80177e2:	68db      	ldr	r3, [r3, #12]
 80177e4:	899b      	ldrh	r3, [r3, #12]
 80177e6:	b29b      	uxth	r3, r3
 80177e8:	4618      	mov	r0, r3
 80177ea:	f7fa fcb1 	bl	8012150 <lwip_htons>
 80177ee:	4603      	mov	r3, r0
 80177f0:	b2db      	uxtb	r3, r3
 80177f2:	f003 0301 	and.w	r3, r3, #1
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	f040 80bf 	bne.w	801797a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80177fc:	4875      	ldr	r0, [pc, #468]	; (80179d4 <tcp_receive+0xf1c>)
 80177fe:	f7fd fb07 	bl	8014e10 <tcp_seg_copy>
 8017802:	4602      	mov	r2, r0
 8017804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017806:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8017808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801780a:	681b      	ldr	r3, [r3, #0]
 801780c:	2b00      	cmp	r3, #0
 801780e:	f000 80b6 	beq.w	801797e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8017812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017814:	68db      	ldr	r3, [r3, #12]
 8017816:	685b      	ldr	r3, [r3, #4]
 8017818:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801781a:	8912      	ldrh	r2, [r2, #8]
 801781c:	441a      	add	r2, r3
 801781e:	4b6c      	ldr	r3, [pc, #432]	; (80179d0 <tcp_receive+0xf18>)
 8017820:	681b      	ldr	r3, [r3, #0]
 8017822:	1ad3      	subs	r3, r2, r3
 8017824:	2b00      	cmp	r3, #0
 8017826:	dd12      	ble.n	801784e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8017828:	4b69      	ldr	r3, [pc, #420]	; (80179d0 <tcp_receive+0xf18>)
 801782a:	681b      	ldr	r3, [r3, #0]
 801782c:	b29a      	uxth	r2, r3
 801782e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017830:	68db      	ldr	r3, [r3, #12]
 8017832:	685b      	ldr	r3, [r3, #4]
 8017834:	b29b      	uxth	r3, r3
 8017836:	1ad3      	subs	r3, r2, r3
 8017838:	b29a      	uxth	r2, r3
 801783a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801783c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801783e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017840:	685a      	ldr	r2, [r3, #4]
 8017842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017844:	891b      	ldrh	r3, [r3, #8]
 8017846:	4619      	mov	r1, r3
 8017848:	4610      	mov	r0, r2
 801784a:	f7fb feb3 	bl	80135b4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801784e:	4b62      	ldr	r3, [pc, #392]	; (80179d8 <tcp_receive+0xf20>)
 8017850:	881b      	ldrh	r3, [r3, #0]
 8017852:	461a      	mov	r2, r3
 8017854:	4b5e      	ldr	r3, [pc, #376]	; (80179d0 <tcp_receive+0xf18>)
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	441a      	add	r2, r3
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801785e:	6879      	ldr	r1, [r7, #4]
 8017860:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017862:	440b      	add	r3, r1
 8017864:	1ad3      	subs	r3, r2, r3
 8017866:	2b00      	cmp	r3, #0
 8017868:	f340 8089 	ble.w	801797e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801786c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801786e:	681b      	ldr	r3, [r3, #0]
 8017870:	68db      	ldr	r3, [r3, #12]
 8017872:	899b      	ldrh	r3, [r3, #12]
 8017874:	b29b      	uxth	r3, r3
 8017876:	4618      	mov	r0, r3
 8017878:	f7fa fc6a 	bl	8012150 <lwip_htons>
 801787c:	4603      	mov	r3, r0
 801787e:	b2db      	uxtb	r3, r3
 8017880:	f003 0301 	and.w	r3, r3, #1
 8017884:	2b00      	cmp	r3, #0
 8017886:	d022      	beq.n	80178ce <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8017888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	68db      	ldr	r3, [r3, #12]
 801788e:	899b      	ldrh	r3, [r3, #12]
 8017890:	b29b      	uxth	r3, r3
 8017892:	b21b      	sxth	r3, r3
 8017894:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8017898:	b21c      	sxth	r4, r3
 801789a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801789c:	681b      	ldr	r3, [r3, #0]
 801789e:	68db      	ldr	r3, [r3, #12]
 80178a0:	899b      	ldrh	r3, [r3, #12]
 80178a2:	b29b      	uxth	r3, r3
 80178a4:	4618      	mov	r0, r3
 80178a6:	f7fa fc53 	bl	8012150 <lwip_htons>
 80178aa:	4603      	mov	r3, r0
 80178ac:	b2db      	uxtb	r3, r3
 80178ae:	b29b      	uxth	r3, r3
 80178b0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80178b4:	b29b      	uxth	r3, r3
 80178b6:	4618      	mov	r0, r3
 80178b8:	f7fa fc4a 	bl	8012150 <lwip_htons>
 80178bc:	4603      	mov	r3, r0
 80178be:	b21b      	sxth	r3, r3
 80178c0:	4323      	orrs	r3, r4
 80178c2:	b21a      	sxth	r2, r3
 80178c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178c6:	681b      	ldr	r3, [r3, #0]
 80178c8:	68db      	ldr	r3, [r3, #12]
 80178ca:	b292      	uxth	r2, r2
 80178cc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178d2:	b29a      	uxth	r2, r3
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80178d8:	4413      	add	r3, r2
 80178da:	b299      	uxth	r1, r3
 80178dc:	4b3c      	ldr	r3, [pc, #240]	; (80179d0 <tcp_receive+0xf18>)
 80178de:	681b      	ldr	r3, [r3, #0]
 80178e0:	b29a      	uxth	r2, r3
 80178e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178e4:	681b      	ldr	r3, [r3, #0]
 80178e6:	1a8a      	subs	r2, r1, r2
 80178e8:	b292      	uxth	r2, r2
 80178ea:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80178ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178ee:	681b      	ldr	r3, [r3, #0]
 80178f0:	685a      	ldr	r2, [r3, #4]
 80178f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178f4:	681b      	ldr	r3, [r3, #0]
 80178f6:	891b      	ldrh	r3, [r3, #8]
 80178f8:	4619      	mov	r1, r3
 80178fa:	4610      	mov	r0, r2
 80178fc:	f7fb fe5a 	bl	80135b4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8017900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017902:	681b      	ldr	r3, [r3, #0]
 8017904:	891c      	ldrh	r4, [r3, #8]
 8017906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017908:	681b      	ldr	r3, [r3, #0]
 801790a:	68db      	ldr	r3, [r3, #12]
 801790c:	899b      	ldrh	r3, [r3, #12]
 801790e:	b29b      	uxth	r3, r3
 8017910:	4618      	mov	r0, r3
 8017912:	f7fa fc1d 	bl	8012150 <lwip_htons>
 8017916:	4603      	mov	r3, r0
 8017918:	b2db      	uxtb	r3, r3
 801791a:	f003 0303 	and.w	r3, r3, #3
 801791e:	2b00      	cmp	r3, #0
 8017920:	d001      	beq.n	8017926 <tcp_receive+0xe6e>
 8017922:	2301      	movs	r3, #1
 8017924:	e000      	b.n	8017928 <tcp_receive+0xe70>
 8017926:	2300      	movs	r3, #0
 8017928:	4423      	add	r3, r4
 801792a:	b29a      	uxth	r2, r3
 801792c:	4b2a      	ldr	r3, [pc, #168]	; (80179d8 <tcp_receive+0xf20>)
 801792e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8017930:	4b29      	ldr	r3, [pc, #164]	; (80179d8 <tcp_receive+0xf20>)
 8017932:	881b      	ldrh	r3, [r3, #0]
 8017934:	461a      	mov	r2, r3
 8017936:	4b26      	ldr	r3, [pc, #152]	; (80179d0 <tcp_receive+0xf18>)
 8017938:	681b      	ldr	r3, [r3, #0]
 801793a:	441a      	add	r2, r3
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017940:	6879      	ldr	r1, [r7, #4]
 8017942:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017944:	440b      	add	r3, r1
 8017946:	429a      	cmp	r2, r3
 8017948:	d019      	beq.n	801797e <tcp_receive+0xec6>
 801794a:	4b24      	ldr	r3, [pc, #144]	; (80179dc <tcp_receive+0xf24>)
 801794c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8017950:	4923      	ldr	r1, [pc, #140]	; (80179e0 <tcp_receive+0xf28>)
 8017952:	4824      	ldr	r0, [pc, #144]	; (80179e4 <tcp_receive+0xf2c>)
 8017954:	f006 fcc0 	bl	801e2d8 <printf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8017958:	e011      	b.n	801797e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801795a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801795c:	681b      	ldr	r3, [r3, #0]
 801795e:	63bb      	str	r3, [r7, #56]	; 0x38
 8017960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017962:	2b00      	cmp	r3, #0
 8017964:	f47f aea4 	bne.w	80176b0 <tcp_receive+0xbf8>
 8017968:	e00a      	b.n	8017980 <tcp_receive+0xec8>
                break;
 801796a:	bf00      	nop
 801796c:	e008      	b.n	8017980 <tcp_receive+0xec8>
                break;
 801796e:	bf00      	nop
 8017970:	e006      	b.n	8017980 <tcp_receive+0xec8>
                  break;
 8017972:	bf00      	nop
 8017974:	e004      	b.n	8017980 <tcp_receive+0xec8>
                  break;
 8017976:	bf00      	nop
 8017978:	e002      	b.n	8017980 <tcp_receive+0xec8>
                  break;
 801797a:	bf00      	nop
 801797c:	e000      	b.n	8017980 <tcp_receive+0xec8>
                break;
 801797e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8017980:	6878      	ldr	r0, [r7, #4]
 8017982:	f001 fa33 	bl	8018dec <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8017986:	e003      	b.n	8017990 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8017988:	6878      	ldr	r0, [r7, #4]
 801798a:	f001 fa2f 	bl	8018dec <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801798e:	e01a      	b.n	80179c6 <tcp_receive+0xf0e>
 8017990:	e019      	b.n	80179c6 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8017992:	4b0f      	ldr	r3, [pc, #60]	; (80179d0 <tcp_receive+0xf18>)
 8017994:	681a      	ldr	r2, [r3, #0]
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801799a:	1ad3      	subs	r3, r2, r3
 801799c:	2b00      	cmp	r3, #0
 801799e:	db0a      	blt.n	80179b6 <tcp_receive+0xefe>
 80179a0:	4b0b      	ldr	r3, [pc, #44]	; (80179d0 <tcp_receive+0xf18>)
 80179a2:	681a      	ldr	r2, [r3, #0]
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179a8:	6879      	ldr	r1, [r7, #4]
 80179aa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80179ac:	440b      	add	r3, r1
 80179ae:	1ad3      	subs	r3, r2, r3
 80179b0:	3301      	adds	r3, #1
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	dd07      	ble.n	80179c6 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	8b5b      	ldrh	r3, [r3, #26]
 80179ba:	f043 0302 	orr.w	r3, r3, #2
 80179be:	b29a      	uxth	r2, r3
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80179c4:	e7ff      	b.n	80179c6 <tcp_receive+0xf0e>
 80179c6:	bf00      	nop
 80179c8:	3750      	adds	r7, #80	; 0x50
 80179ca:	46bd      	mov	sp, r7
 80179cc:	bdb0      	pop	{r4, r5, r7, pc}
 80179ce:	bf00      	nop
 80179d0:	2000c1ec 	.word	0x2000c1ec
 80179d4:	2000c1cc 	.word	0x2000c1cc
 80179d8:	2000c1f6 	.word	0x2000c1f6
 80179dc:	08025898 	.word	0x08025898
 80179e0:	08025c40 	.word	0x08025c40
 80179e4:	080258e4 	.word	0x080258e4

080179e8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80179e8:	b480      	push	{r7}
 80179ea:	b083      	sub	sp, #12
 80179ec:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80179ee:	4b15      	ldr	r3, [pc, #84]	; (8017a44 <tcp_get_next_optbyte+0x5c>)
 80179f0:	881b      	ldrh	r3, [r3, #0]
 80179f2:	1c5a      	adds	r2, r3, #1
 80179f4:	b291      	uxth	r1, r2
 80179f6:	4a13      	ldr	r2, [pc, #76]	; (8017a44 <tcp_get_next_optbyte+0x5c>)
 80179f8:	8011      	strh	r1, [r2, #0]
 80179fa:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80179fc:	4b12      	ldr	r3, [pc, #72]	; (8017a48 <tcp_get_next_optbyte+0x60>)
 80179fe:	681b      	ldr	r3, [r3, #0]
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	d004      	beq.n	8017a0e <tcp_get_next_optbyte+0x26>
 8017a04:	4b11      	ldr	r3, [pc, #68]	; (8017a4c <tcp_get_next_optbyte+0x64>)
 8017a06:	881b      	ldrh	r3, [r3, #0]
 8017a08:	88fa      	ldrh	r2, [r7, #6]
 8017a0a:	429a      	cmp	r2, r3
 8017a0c:	d208      	bcs.n	8017a20 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8017a0e:	4b10      	ldr	r3, [pc, #64]	; (8017a50 <tcp_get_next_optbyte+0x68>)
 8017a10:	681b      	ldr	r3, [r3, #0]
 8017a12:	3314      	adds	r3, #20
 8017a14:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8017a16:	88fb      	ldrh	r3, [r7, #6]
 8017a18:	683a      	ldr	r2, [r7, #0]
 8017a1a:	4413      	add	r3, r2
 8017a1c:	781b      	ldrb	r3, [r3, #0]
 8017a1e:	e00b      	b.n	8017a38 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8017a20:	88fb      	ldrh	r3, [r7, #6]
 8017a22:	b2da      	uxtb	r2, r3
 8017a24:	4b09      	ldr	r3, [pc, #36]	; (8017a4c <tcp_get_next_optbyte+0x64>)
 8017a26:	881b      	ldrh	r3, [r3, #0]
 8017a28:	b2db      	uxtb	r3, r3
 8017a2a:	1ad3      	subs	r3, r2, r3
 8017a2c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8017a2e:	4b06      	ldr	r3, [pc, #24]	; (8017a48 <tcp_get_next_optbyte+0x60>)
 8017a30:	681a      	ldr	r2, [r3, #0]
 8017a32:	797b      	ldrb	r3, [r7, #5]
 8017a34:	4413      	add	r3, r2
 8017a36:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017a38:	4618      	mov	r0, r3
 8017a3a:	370c      	adds	r7, #12
 8017a3c:	46bd      	mov	sp, r7
 8017a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a42:	4770      	bx	lr
 8017a44:	2000c1e8 	.word	0x2000c1e8
 8017a48:	2000c1e4 	.word	0x2000c1e4
 8017a4c:	2000c1e2 	.word	0x2000c1e2
 8017a50:	2000c1dc 	.word	0x2000c1dc

08017a54 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8017a54:	b580      	push	{r7, lr}
 8017a56:	b084      	sub	sp, #16
 8017a58:	af00      	add	r7, sp, #0
 8017a5a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	d106      	bne.n	8017a70 <tcp_parseopt+0x1c>
 8017a62:	4b32      	ldr	r3, [pc, #200]	; (8017b2c <tcp_parseopt+0xd8>)
 8017a64:	f240 727d 	movw	r2, #1917	; 0x77d
 8017a68:	4931      	ldr	r1, [pc, #196]	; (8017b30 <tcp_parseopt+0xdc>)
 8017a6a:	4832      	ldr	r0, [pc, #200]	; (8017b34 <tcp_parseopt+0xe0>)
 8017a6c:	f006 fc34 	bl	801e2d8 <printf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8017a70:	4b31      	ldr	r3, [pc, #196]	; (8017b38 <tcp_parseopt+0xe4>)
 8017a72:	881b      	ldrh	r3, [r3, #0]
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	d055      	beq.n	8017b24 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8017a78:	4b30      	ldr	r3, [pc, #192]	; (8017b3c <tcp_parseopt+0xe8>)
 8017a7a:	2200      	movs	r2, #0
 8017a7c:	801a      	strh	r2, [r3, #0]
 8017a7e:	e045      	b.n	8017b0c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8017a80:	f7ff ffb2 	bl	80179e8 <tcp_get_next_optbyte>
 8017a84:	4603      	mov	r3, r0
 8017a86:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8017a88:	7bfb      	ldrb	r3, [r7, #15]
 8017a8a:	2b02      	cmp	r3, #2
 8017a8c:	d006      	beq.n	8017a9c <tcp_parseopt+0x48>
 8017a8e:	2b02      	cmp	r3, #2
 8017a90:	dc2b      	bgt.n	8017aea <tcp_parseopt+0x96>
 8017a92:	2b00      	cmp	r3, #0
 8017a94:	d041      	beq.n	8017b1a <tcp_parseopt+0xc6>
 8017a96:	2b01      	cmp	r3, #1
 8017a98:	d127      	bne.n	8017aea <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8017a9a:	e037      	b.n	8017b0c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8017a9c:	f7ff ffa4 	bl	80179e8 <tcp_get_next_optbyte>
 8017aa0:	4603      	mov	r3, r0
 8017aa2:	2b04      	cmp	r3, #4
 8017aa4:	d13b      	bne.n	8017b1e <tcp_parseopt+0xca>
 8017aa6:	4b25      	ldr	r3, [pc, #148]	; (8017b3c <tcp_parseopt+0xe8>)
 8017aa8:	881b      	ldrh	r3, [r3, #0]
 8017aaa:	3301      	adds	r3, #1
 8017aac:	4a22      	ldr	r2, [pc, #136]	; (8017b38 <tcp_parseopt+0xe4>)
 8017aae:	8812      	ldrh	r2, [r2, #0]
 8017ab0:	4293      	cmp	r3, r2
 8017ab2:	da34      	bge.n	8017b1e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8017ab4:	f7ff ff98 	bl	80179e8 <tcp_get_next_optbyte>
 8017ab8:	4603      	mov	r3, r0
 8017aba:	b29b      	uxth	r3, r3
 8017abc:	021b      	lsls	r3, r3, #8
 8017abe:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8017ac0:	f7ff ff92 	bl	80179e8 <tcp_get_next_optbyte>
 8017ac4:	4603      	mov	r3, r0
 8017ac6:	b29a      	uxth	r2, r3
 8017ac8:	89bb      	ldrh	r3, [r7, #12]
 8017aca:	4313      	orrs	r3, r2
 8017acc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8017ace:	89bb      	ldrh	r3, [r7, #12]
 8017ad0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8017ad4:	d804      	bhi.n	8017ae0 <tcp_parseopt+0x8c>
 8017ad6:	89bb      	ldrh	r3, [r7, #12]
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	d001      	beq.n	8017ae0 <tcp_parseopt+0x8c>
 8017adc:	89ba      	ldrh	r2, [r7, #12]
 8017ade:	e001      	b.n	8017ae4 <tcp_parseopt+0x90>
 8017ae0:	f44f 7206 	mov.w	r2, #536	; 0x218
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8017ae8:	e010      	b.n	8017b0c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8017aea:	f7ff ff7d 	bl	80179e8 <tcp_get_next_optbyte>
 8017aee:	4603      	mov	r3, r0
 8017af0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8017af2:	7afb      	ldrb	r3, [r7, #11]
 8017af4:	2b01      	cmp	r3, #1
 8017af6:	d914      	bls.n	8017b22 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8017af8:	7afb      	ldrb	r3, [r7, #11]
 8017afa:	b29a      	uxth	r2, r3
 8017afc:	4b0f      	ldr	r3, [pc, #60]	; (8017b3c <tcp_parseopt+0xe8>)
 8017afe:	881b      	ldrh	r3, [r3, #0]
 8017b00:	4413      	add	r3, r2
 8017b02:	b29b      	uxth	r3, r3
 8017b04:	3b02      	subs	r3, #2
 8017b06:	b29a      	uxth	r2, r3
 8017b08:	4b0c      	ldr	r3, [pc, #48]	; (8017b3c <tcp_parseopt+0xe8>)
 8017b0a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8017b0c:	4b0b      	ldr	r3, [pc, #44]	; (8017b3c <tcp_parseopt+0xe8>)
 8017b0e:	881a      	ldrh	r2, [r3, #0]
 8017b10:	4b09      	ldr	r3, [pc, #36]	; (8017b38 <tcp_parseopt+0xe4>)
 8017b12:	881b      	ldrh	r3, [r3, #0]
 8017b14:	429a      	cmp	r2, r3
 8017b16:	d3b3      	bcc.n	8017a80 <tcp_parseopt+0x2c>
 8017b18:	e004      	b.n	8017b24 <tcp_parseopt+0xd0>
          return;
 8017b1a:	bf00      	nop
 8017b1c:	e002      	b.n	8017b24 <tcp_parseopt+0xd0>
            return;
 8017b1e:	bf00      	nop
 8017b20:	e000      	b.n	8017b24 <tcp_parseopt+0xd0>
            return;
 8017b22:	bf00      	nop
      }
    }
  }
}
 8017b24:	3710      	adds	r7, #16
 8017b26:	46bd      	mov	sp, r7
 8017b28:	bd80      	pop	{r7, pc}
 8017b2a:	bf00      	nop
 8017b2c:	08025898 	.word	0x08025898
 8017b30:	08025cfc 	.word	0x08025cfc
 8017b34:	080258e4 	.word	0x080258e4
 8017b38:	2000c1e0 	.word	0x2000c1e0
 8017b3c:	2000c1e8 	.word	0x2000c1e8

08017b40 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8017b40:	b480      	push	{r7}
 8017b42:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8017b44:	4b05      	ldr	r3, [pc, #20]	; (8017b5c <tcp_trigger_input_pcb_close+0x1c>)
 8017b46:	781b      	ldrb	r3, [r3, #0]
 8017b48:	f043 0310 	orr.w	r3, r3, #16
 8017b4c:	b2da      	uxtb	r2, r3
 8017b4e:	4b03      	ldr	r3, [pc, #12]	; (8017b5c <tcp_trigger_input_pcb_close+0x1c>)
 8017b50:	701a      	strb	r2, [r3, #0]
}
 8017b52:	bf00      	nop
 8017b54:	46bd      	mov	sp, r7
 8017b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b5a:	4770      	bx	lr
 8017b5c:	2000c1f9 	.word	0x2000c1f9

08017b60 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8017b60:	b580      	push	{r7, lr}
 8017b62:	b084      	sub	sp, #16
 8017b64:	af00      	add	r7, sp, #0
 8017b66:	60f8      	str	r0, [r7, #12]
 8017b68:	60b9      	str	r1, [r7, #8]
 8017b6a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8017b6c:	68fb      	ldr	r3, [r7, #12]
 8017b6e:	2b00      	cmp	r3, #0
 8017b70:	d00a      	beq.n	8017b88 <tcp_route+0x28>
 8017b72:	68fb      	ldr	r3, [r7, #12]
 8017b74:	7a1b      	ldrb	r3, [r3, #8]
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d006      	beq.n	8017b88 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8017b7a:	68fb      	ldr	r3, [r7, #12]
 8017b7c:	7a1b      	ldrb	r3, [r3, #8]
 8017b7e:	4618      	mov	r0, r3
 8017b80:	f7fb fb10 	bl	80131a4 <netif_get_by_index>
 8017b84:	4603      	mov	r3, r0
 8017b86:	e003      	b.n	8017b90 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8017b88:	6878      	ldr	r0, [r7, #4]
 8017b8a:	f005 f845 	bl	801cc18 <ip4_route>
 8017b8e:	4603      	mov	r3, r0
  }
}
 8017b90:	4618      	mov	r0, r3
 8017b92:	3710      	adds	r7, #16
 8017b94:	46bd      	mov	sp, r7
 8017b96:	bd80      	pop	{r7, pc}

08017b98 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8017b98:	b590      	push	{r4, r7, lr}
 8017b9a:	b087      	sub	sp, #28
 8017b9c:	af00      	add	r7, sp, #0
 8017b9e:	60f8      	str	r0, [r7, #12]
 8017ba0:	60b9      	str	r1, [r7, #8]
 8017ba2:	603b      	str	r3, [r7, #0]
 8017ba4:	4613      	mov	r3, r2
 8017ba6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8017ba8:	68fb      	ldr	r3, [r7, #12]
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	d105      	bne.n	8017bba <tcp_create_segment+0x22>
 8017bae:	4b44      	ldr	r3, [pc, #272]	; (8017cc0 <tcp_create_segment+0x128>)
 8017bb0:	22a3      	movs	r2, #163	; 0xa3
 8017bb2:	4944      	ldr	r1, [pc, #272]	; (8017cc4 <tcp_create_segment+0x12c>)
 8017bb4:	4844      	ldr	r0, [pc, #272]	; (8017cc8 <tcp_create_segment+0x130>)
 8017bb6:	f006 fb8f 	bl	801e2d8 <printf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8017bba:	68bb      	ldr	r3, [r7, #8]
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	d105      	bne.n	8017bcc <tcp_create_segment+0x34>
 8017bc0:	4b3f      	ldr	r3, [pc, #252]	; (8017cc0 <tcp_create_segment+0x128>)
 8017bc2:	22a4      	movs	r2, #164	; 0xa4
 8017bc4:	4941      	ldr	r1, [pc, #260]	; (8017ccc <tcp_create_segment+0x134>)
 8017bc6:	4840      	ldr	r0, [pc, #256]	; (8017cc8 <tcp_create_segment+0x130>)
 8017bc8:	f006 fb86 	bl	801e2d8 <printf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017bcc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017bd0:	009b      	lsls	r3, r3, #2
 8017bd2:	b2db      	uxtb	r3, r3
 8017bd4:	f003 0304 	and.w	r3, r3, #4
 8017bd8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8017bda:	2003      	movs	r0, #3
 8017bdc:	f7fa ff6e 	bl	8012abc <memp_malloc>
 8017be0:	6138      	str	r0, [r7, #16]
 8017be2:	693b      	ldr	r3, [r7, #16]
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	d104      	bne.n	8017bf2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8017be8:	68b8      	ldr	r0, [r7, #8]
 8017bea:	f7fb fe69 	bl	80138c0 <pbuf_free>
    return NULL;
 8017bee:	2300      	movs	r3, #0
 8017bf0:	e061      	b.n	8017cb6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8017bf2:	693b      	ldr	r3, [r7, #16]
 8017bf4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017bf8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8017bfa:	693b      	ldr	r3, [r7, #16]
 8017bfc:	2200      	movs	r2, #0
 8017bfe:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8017c00:	693b      	ldr	r3, [r7, #16]
 8017c02:	68ba      	ldr	r2, [r7, #8]
 8017c04:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8017c06:	68bb      	ldr	r3, [r7, #8]
 8017c08:	891a      	ldrh	r2, [r3, #8]
 8017c0a:	7dfb      	ldrb	r3, [r7, #23]
 8017c0c:	b29b      	uxth	r3, r3
 8017c0e:	429a      	cmp	r2, r3
 8017c10:	d205      	bcs.n	8017c1e <tcp_create_segment+0x86>
 8017c12:	4b2b      	ldr	r3, [pc, #172]	; (8017cc0 <tcp_create_segment+0x128>)
 8017c14:	22b0      	movs	r2, #176	; 0xb0
 8017c16:	492e      	ldr	r1, [pc, #184]	; (8017cd0 <tcp_create_segment+0x138>)
 8017c18:	482b      	ldr	r0, [pc, #172]	; (8017cc8 <tcp_create_segment+0x130>)
 8017c1a:	f006 fb5d 	bl	801e2d8 <printf>
  seg->len = p->tot_len - optlen;
 8017c1e:	68bb      	ldr	r3, [r7, #8]
 8017c20:	891a      	ldrh	r2, [r3, #8]
 8017c22:	7dfb      	ldrb	r3, [r7, #23]
 8017c24:	b29b      	uxth	r3, r3
 8017c26:	1ad3      	subs	r3, r2, r3
 8017c28:	b29a      	uxth	r2, r3
 8017c2a:	693b      	ldr	r3, [r7, #16]
 8017c2c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8017c2e:	2114      	movs	r1, #20
 8017c30:	68b8      	ldr	r0, [r7, #8]
 8017c32:	f7fb fdaf 	bl	8013794 <pbuf_add_header>
 8017c36:	4603      	mov	r3, r0
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d004      	beq.n	8017c46 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8017c3c:	6938      	ldr	r0, [r7, #16]
 8017c3e:	f7fd f8ce 	bl	8014dde <tcp_seg_free>
    return NULL;
 8017c42:	2300      	movs	r3, #0
 8017c44:	e037      	b.n	8017cb6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8017c46:	693b      	ldr	r3, [r7, #16]
 8017c48:	685b      	ldr	r3, [r3, #4]
 8017c4a:	685a      	ldr	r2, [r3, #4]
 8017c4c:	693b      	ldr	r3, [r7, #16]
 8017c4e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8017c50:	68fb      	ldr	r3, [r7, #12]
 8017c52:	8ada      	ldrh	r2, [r3, #22]
 8017c54:	693b      	ldr	r3, [r7, #16]
 8017c56:	68dc      	ldr	r4, [r3, #12]
 8017c58:	4610      	mov	r0, r2
 8017c5a:	f7fa fa79 	bl	8012150 <lwip_htons>
 8017c5e:	4603      	mov	r3, r0
 8017c60:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8017c62:	68fb      	ldr	r3, [r7, #12]
 8017c64:	8b1a      	ldrh	r2, [r3, #24]
 8017c66:	693b      	ldr	r3, [r7, #16]
 8017c68:	68dc      	ldr	r4, [r3, #12]
 8017c6a:	4610      	mov	r0, r2
 8017c6c:	f7fa fa70 	bl	8012150 <lwip_htons>
 8017c70:	4603      	mov	r3, r0
 8017c72:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8017c74:	693b      	ldr	r3, [r7, #16]
 8017c76:	68dc      	ldr	r4, [r3, #12]
 8017c78:	6838      	ldr	r0, [r7, #0]
 8017c7a:	f7fa fa7e 	bl	801217a <lwip_htonl>
 8017c7e:	4603      	mov	r3, r0
 8017c80:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8017c82:	7dfb      	ldrb	r3, [r7, #23]
 8017c84:	089b      	lsrs	r3, r3, #2
 8017c86:	b2db      	uxtb	r3, r3
 8017c88:	b29b      	uxth	r3, r3
 8017c8a:	3305      	adds	r3, #5
 8017c8c:	b29b      	uxth	r3, r3
 8017c8e:	031b      	lsls	r3, r3, #12
 8017c90:	b29a      	uxth	r2, r3
 8017c92:	79fb      	ldrb	r3, [r7, #7]
 8017c94:	b29b      	uxth	r3, r3
 8017c96:	4313      	orrs	r3, r2
 8017c98:	b29a      	uxth	r2, r3
 8017c9a:	693b      	ldr	r3, [r7, #16]
 8017c9c:	68dc      	ldr	r4, [r3, #12]
 8017c9e:	4610      	mov	r0, r2
 8017ca0:	f7fa fa56 	bl	8012150 <lwip_htons>
 8017ca4:	4603      	mov	r3, r0
 8017ca6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8017ca8:	693b      	ldr	r3, [r7, #16]
 8017caa:	68db      	ldr	r3, [r3, #12]
 8017cac:	2200      	movs	r2, #0
 8017cae:	749a      	strb	r2, [r3, #18]
 8017cb0:	2200      	movs	r2, #0
 8017cb2:	74da      	strb	r2, [r3, #19]
  return seg;
 8017cb4:	693b      	ldr	r3, [r7, #16]
}
 8017cb6:	4618      	mov	r0, r3
 8017cb8:	371c      	adds	r7, #28
 8017cba:	46bd      	mov	sp, r7
 8017cbc:	bd90      	pop	{r4, r7, pc}
 8017cbe:	bf00      	nop
 8017cc0:	08025d18 	.word	0x08025d18
 8017cc4:	08025d4c 	.word	0x08025d4c
 8017cc8:	08025d6c 	.word	0x08025d6c
 8017ccc:	08025d94 	.word	0x08025d94
 8017cd0:	08025db8 	.word	0x08025db8

08017cd4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8017cd4:	b590      	push	{r4, r7, lr}
 8017cd6:	b08b      	sub	sp, #44	; 0x2c
 8017cd8:	af02      	add	r7, sp, #8
 8017cda:	6078      	str	r0, [r7, #4]
 8017cdc:	460b      	mov	r3, r1
 8017cde:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8017ce0:	2300      	movs	r3, #0
 8017ce2:	61fb      	str	r3, [r7, #28]
 8017ce4:	2300      	movs	r3, #0
 8017ce6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8017ce8:	2300      	movs	r3, #0
 8017cea:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	2b00      	cmp	r3, #0
 8017cf0:	d106      	bne.n	8017d00 <tcp_split_unsent_seg+0x2c>
 8017cf2:	4b95      	ldr	r3, [pc, #596]	; (8017f48 <tcp_split_unsent_seg+0x274>)
 8017cf4:	f240 324b 	movw	r2, #843	; 0x34b
 8017cf8:	4994      	ldr	r1, [pc, #592]	; (8017f4c <tcp_split_unsent_seg+0x278>)
 8017cfa:	4895      	ldr	r0, [pc, #596]	; (8017f50 <tcp_split_unsent_seg+0x27c>)
 8017cfc:	f006 faec 	bl	801e2d8 <printf>

  useg = pcb->unsent;
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017d04:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8017d06:	697b      	ldr	r3, [r7, #20]
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d102      	bne.n	8017d12 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8017d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8017d10:	e116      	b.n	8017f40 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8017d12:	887b      	ldrh	r3, [r7, #2]
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	d109      	bne.n	8017d2c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8017d18:	4b8b      	ldr	r3, [pc, #556]	; (8017f48 <tcp_split_unsent_seg+0x274>)
 8017d1a:	f240 3253 	movw	r2, #851	; 0x353
 8017d1e:	498d      	ldr	r1, [pc, #564]	; (8017f54 <tcp_split_unsent_seg+0x280>)
 8017d20:	488b      	ldr	r0, [pc, #556]	; (8017f50 <tcp_split_unsent_seg+0x27c>)
 8017d22:	f006 fad9 	bl	801e2d8 <printf>
    return ERR_VAL;
 8017d26:	f06f 0305 	mvn.w	r3, #5
 8017d2a:	e109      	b.n	8017f40 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8017d2c:	697b      	ldr	r3, [r7, #20]
 8017d2e:	891b      	ldrh	r3, [r3, #8]
 8017d30:	887a      	ldrh	r2, [r7, #2]
 8017d32:	429a      	cmp	r2, r3
 8017d34:	d301      	bcc.n	8017d3a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8017d36:	2300      	movs	r3, #0
 8017d38:	e102      	b.n	8017f40 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017d3e:	887a      	ldrh	r2, [r7, #2]
 8017d40:	429a      	cmp	r2, r3
 8017d42:	d906      	bls.n	8017d52 <tcp_split_unsent_seg+0x7e>
 8017d44:	4b80      	ldr	r3, [pc, #512]	; (8017f48 <tcp_split_unsent_seg+0x274>)
 8017d46:	f240 325b 	movw	r2, #859	; 0x35b
 8017d4a:	4983      	ldr	r1, [pc, #524]	; (8017f58 <tcp_split_unsent_seg+0x284>)
 8017d4c:	4880      	ldr	r0, [pc, #512]	; (8017f50 <tcp_split_unsent_seg+0x27c>)
 8017d4e:	f006 fac3 	bl	801e2d8 <printf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8017d52:	697b      	ldr	r3, [r7, #20]
 8017d54:	891b      	ldrh	r3, [r3, #8]
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d106      	bne.n	8017d68 <tcp_split_unsent_seg+0x94>
 8017d5a:	4b7b      	ldr	r3, [pc, #492]	; (8017f48 <tcp_split_unsent_seg+0x274>)
 8017d5c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8017d60:	497e      	ldr	r1, [pc, #504]	; (8017f5c <tcp_split_unsent_seg+0x288>)
 8017d62:	487b      	ldr	r0, [pc, #492]	; (8017f50 <tcp_split_unsent_seg+0x27c>)
 8017d64:	f006 fab8 	bl	801e2d8 <printf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8017d68:	697b      	ldr	r3, [r7, #20]
 8017d6a:	7a9b      	ldrb	r3, [r3, #10]
 8017d6c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8017d6e:	7bfb      	ldrb	r3, [r7, #15]
 8017d70:	009b      	lsls	r3, r3, #2
 8017d72:	b2db      	uxtb	r3, r3
 8017d74:	f003 0304 	and.w	r3, r3, #4
 8017d78:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8017d7a:	697b      	ldr	r3, [r7, #20]
 8017d7c:	891a      	ldrh	r2, [r3, #8]
 8017d7e:	887b      	ldrh	r3, [r7, #2]
 8017d80:	1ad3      	subs	r3, r2, r3
 8017d82:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8017d84:	7bbb      	ldrb	r3, [r7, #14]
 8017d86:	b29a      	uxth	r2, r3
 8017d88:	89bb      	ldrh	r3, [r7, #12]
 8017d8a:	4413      	add	r3, r2
 8017d8c:	b29b      	uxth	r3, r3
 8017d8e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017d92:	4619      	mov	r1, r3
 8017d94:	2036      	movs	r0, #54	; 0x36
 8017d96:	f7fb faaf 	bl	80132f8 <pbuf_alloc>
 8017d9a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017d9c:	693b      	ldr	r3, [r7, #16]
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	f000 80b7 	beq.w	8017f12 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8017da4:	697b      	ldr	r3, [r7, #20]
 8017da6:	685b      	ldr	r3, [r3, #4]
 8017da8:	891a      	ldrh	r2, [r3, #8]
 8017daa:	697b      	ldr	r3, [r7, #20]
 8017dac:	891b      	ldrh	r3, [r3, #8]
 8017dae:	1ad3      	subs	r3, r2, r3
 8017db0:	b29a      	uxth	r2, r3
 8017db2:	887b      	ldrh	r3, [r7, #2]
 8017db4:	4413      	add	r3, r2
 8017db6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8017db8:	697b      	ldr	r3, [r7, #20]
 8017dba:	6858      	ldr	r0, [r3, #4]
 8017dbc:	693b      	ldr	r3, [r7, #16]
 8017dbe:	685a      	ldr	r2, [r3, #4]
 8017dc0:	7bbb      	ldrb	r3, [r7, #14]
 8017dc2:	18d1      	adds	r1, r2, r3
 8017dc4:	897b      	ldrh	r3, [r7, #10]
 8017dc6:	89ba      	ldrh	r2, [r7, #12]
 8017dc8:	f7fb ff80 	bl	8013ccc <pbuf_copy_partial>
 8017dcc:	4603      	mov	r3, r0
 8017dce:	461a      	mov	r2, r3
 8017dd0:	89bb      	ldrh	r3, [r7, #12]
 8017dd2:	4293      	cmp	r3, r2
 8017dd4:	f040 809f 	bne.w	8017f16 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8017dd8:	697b      	ldr	r3, [r7, #20]
 8017dda:	68db      	ldr	r3, [r3, #12]
 8017ddc:	899b      	ldrh	r3, [r3, #12]
 8017dde:	b29b      	uxth	r3, r3
 8017de0:	4618      	mov	r0, r3
 8017de2:	f7fa f9b5 	bl	8012150 <lwip_htons>
 8017de6:	4603      	mov	r3, r0
 8017de8:	b2db      	uxtb	r3, r3
 8017dea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017dee:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8017df0:	2300      	movs	r3, #0
 8017df2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8017df4:	7efb      	ldrb	r3, [r7, #27]
 8017df6:	f003 0308 	and.w	r3, r3, #8
 8017dfa:	2b00      	cmp	r3, #0
 8017dfc:	d007      	beq.n	8017e0e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8017dfe:	7efb      	ldrb	r3, [r7, #27]
 8017e00:	f023 0308 	bic.w	r3, r3, #8
 8017e04:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8017e06:	7ebb      	ldrb	r3, [r7, #26]
 8017e08:	f043 0308 	orr.w	r3, r3, #8
 8017e0c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8017e0e:	7efb      	ldrb	r3, [r7, #27]
 8017e10:	f003 0301 	and.w	r3, r3, #1
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	d007      	beq.n	8017e28 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8017e18:	7efb      	ldrb	r3, [r7, #27]
 8017e1a:	f023 0301 	bic.w	r3, r3, #1
 8017e1e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8017e20:	7ebb      	ldrb	r3, [r7, #26]
 8017e22:	f043 0301 	orr.w	r3, r3, #1
 8017e26:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8017e28:	697b      	ldr	r3, [r7, #20]
 8017e2a:	68db      	ldr	r3, [r3, #12]
 8017e2c:	685b      	ldr	r3, [r3, #4]
 8017e2e:	4618      	mov	r0, r3
 8017e30:	f7fa f9a3 	bl	801217a <lwip_htonl>
 8017e34:	4602      	mov	r2, r0
 8017e36:	887b      	ldrh	r3, [r7, #2]
 8017e38:	18d1      	adds	r1, r2, r3
 8017e3a:	7eba      	ldrb	r2, [r7, #26]
 8017e3c:	7bfb      	ldrb	r3, [r7, #15]
 8017e3e:	9300      	str	r3, [sp, #0]
 8017e40:	460b      	mov	r3, r1
 8017e42:	6939      	ldr	r1, [r7, #16]
 8017e44:	6878      	ldr	r0, [r7, #4]
 8017e46:	f7ff fea7 	bl	8017b98 <tcp_create_segment>
 8017e4a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8017e4c:	69fb      	ldr	r3, [r7, #28]
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	d063      	beq.n	8017f1a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8017e52:	697b      	ldr	r3, [r7, #20]
 8017e54:	685b      	ldr	r3, [r3, #4]
 8017e56:	4618      	mov	r0, r3
 8017e58:	f7fb fdc0 	bl	80139dc <pbuf_clen>
 8017e5c:	4603      	mov	r3, r0
 8017e5e:	461a      	mov	r2, r3
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017e66:	1a9b      	subs	r3, r3, r2
 8017e68:	b29a      	uxth	r2, r3
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8017e70:	697b      	ldr	r3, [r7, #20]
 8017e72:	6858      	ldr	r0, [r3, #4]
 8017e74:	697b      	ldr	r3, [r7, #20]
 8017e76:	685b      	ldr	r3, [r3, #4]
 8017e78:	891a      	ldrh	r2, [r3, #8]
 8017e7a:	89bb      	ldrh	r3, [r7, #12]
 8017e7c:	1ad3      	subs	r3, r2, r3
 8017e7e:	b29b      	uxth	r3, r3
 8017e80:	4619      	mov	r1, r3
 8017e82:	f7fb fb97 	bl	80135b4 <pbuf_realloc>
  useg->len -= remainder;
 8017e86:	697b      	ldr	r3, [r7, #20]
 8017e88:	891a      	ldrh	r2, [r3, #8]
 8017e8a:	89bb      	ldrh	r3, [r7, #12]
 8017e8c:	1ad3      	subs	r3, r2, r3
 8017e8e:	b29a      	uxth	r2, r3
 8017e90:	697b      	ldr	r3, [r7, #20]
 8017e92:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8017e94:	697b      	ldr	r3, [r7, #20]
 8017e96:	68db      	ldr	r3, [r3, #12]
 8017e98:	899b      	ldrh	r3, [r3, #12]
 8017e9a:	b29c      	uxth	r4, r3
 8017e9c:	7efb      	ldrb	r3, [r7, #27]
 8017e9e:	b29b      	uxth	r3, r3
 8017ea0:	4618      	mov	r0, r3
 8017ea2:	f7fa f955 	bl	8012150 <lwip_htons>
 8017ea6:	4603      	mov	r3, r0
 8017ea8:	461a      	mov	r2, r3
 8017eaa:	697b      	ldr	r3, [r7, #20]
 8017eac:	68db      	ldr	r3, [r3, #12]
 8017eae:	4322      	orrs	r2, r4
 8017eb0:	b292      	uxth	r2, r2
 8017eb2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8017eb4:	697b      	ldr	r3, [r7, #20]
 8017eb6:	685b      	ldr	r3, [r3, #4]
 8017eb8:	4618      	mov	r0, r3
 8017eba:	f7fb fd8f 	bl	80139dc <pbuf_clen>
 8017ebe:	4603      	mov	r3, r0
 8017ec0:	461a      	mov	r2, r3
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017ec8:	4413      	add	r3, r2
 8017eca:	b29a      	uxth	r2, r3
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8017ed2:	69fb      	ldr	r3, [r7, #28]
 8017ed4:	685b      	ldr	r3, [r3, #4]
 8017ed6:	4618      	mov	r0, r3
 8017ed8:	f7fb fd80 	bl	80139dc <pbuf_clen>
 8017edc:	4603      	mov	r3, r0
 8017ede:	461a      	mov	r2, r3
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017ee6:	4413      	add	r3, r2
 8017ee8:	b29a      	uxth	r2, r3
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8017ef0:	697b      	ldr	r3, [r7, #20]
 8017ef2:	681a      	ldr	r2, [r3, #0]
 8017ef4:	69fb      	ldr	r3, [r7, #28]
 8017ef6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8017ef8:	697b      	ldr	r3, [r7, #20]
 8017efa:	69fa      	ldr	r2, [r7, #28]
 8017efc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8017efe:	69fb      	ldr	r3, [r7, #28]
 8017f00:	681b      	ldr	r3, [r3, #0]
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	d103      	bne.n	8017f0e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	2200      	movs	r2, #0
 8017f0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8017f0e:	2300      	movs	r3, #0
 8017f10:	e016      	b.n	8017f40 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8017f12:	bf00      	nop
 8017f14:	e002      	b.n	8017f1c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8017f16:	bf00      	nop
 8017f18:	e000      	b.n	8017f1c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8017f1a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8017f1c:	69fb      	ldr	r3, [r7, #28]
 8017f1e:	2b00      	cmp	r3, #0
 8017f20:	d006      	beq.n	8017f30 <tcp_split_unsent_seg+0x25c>
 8017f22:	4b09      	ldr	r3, [pc, #36]	; (8017f48 <tcp_split_unsent_seg+0x274>)
 8017f24:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8017f28:	490d      	ldr	r1, [pc, #52]	; (8017f60 <tcp_split_unsent_seg+0x28c>)
 8017f2a:	4809      	ldr	r0, [pc, #36]	; (8017f50 <tcp_split_unsent_seg+0x27c>)
 8017f2c:	f006 f9d4 	bl	801e2d8 <printf>
  if (p != NULL) {
 8017f30:	693b      	ldr	r3, [r7, #16]
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	d002      	beq.n	8017f3c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8017f36:	6938      	ldr	r0, [r7, #16]
 8017f38:	f7fb fcc2 	bl	80138c0 <pbuf_free>
  }

  return ERR_MEM;
 8017f3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017f40:	4618      	mov	r0, r3
 8017f42:	3724      	adds	r7, #36	; 0x24
 8017f44:	46bd      	mov	sp, r7
 8017f46:	bd90      	pop	{r4, r7, pc}
 8017f48:	08025d18 	.word	0x08025d18
 8017f4c:	080260ac 	.word	0x080260ac
 8017f50:	08025d6c 	.word	0x08025d6c
 8017f54:	080260d0 	.word	0x080260d0
 8017f58:	080260f4 	.word	0x080260f4
 8017f5c:	08026104 	.word	0x08026104
 8017f60:	08026114 	.word	0x08026114

08017f64 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8017f64:	b590      	push	{r4, r7, lr}
 8017f66:	b085      	sub	sp, #20
 8017f68:	af00      	add	r7, sp, #0
 8017f6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	d106      	bne.n	8017f80 <tcp_send_fin+0x1c>
 8017f72:	4b21      	ldr	r3, [pc, #132]	; (8017ff8 <tcp_send_fin+0x94>)
 8017f74:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8017f78:	4920      	ldr	r1, [pc, #128]	; (8017ffc <tcp_send_fin+0x98>)
 8017f7a:	4821      	ldr	r0, [pc, #132]	; (8018000 <tcp_send_fin+0x9c>)
 8017f7c:	f006 f9ac 	bl	801e2d8 <printf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	d02e      	beq.n	8017fe6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017f8c:	60fb      	str	r3, [r7, #12]
 8017f8e:	e002      	b.n	8017f96 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8017f90:	68fb      	ldr	r3, [r7, #12]
 8017f92:	681b      	ldr	r3, [r3, #0]
 8017f94:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017f96:	68fb      	ldr	r3, [r7, #12]
 8017f98:	681b      	ldr	r3, [r3, #0]
 8017f9a:	2b00      	cmp	r3, #0
 8017f9c:	d1f8      	bne.n	8017f90 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8017f9e:	68fb      	ldr	r3, [r7, #12]
 8017fa0:	68db      	ldr	r3, [r3, #12]
 8017fa2:	899b      	ldrh	r3, [r3, #12]
 8017fa4:	b29b      	uxth	r3, r3
 8017fa6:	4618      	mov	r0, r3
 8017fa8:	f7fa f8d2 	bl	8012150 <lwip_htons>
 8017fac:	4603      	mov	r3, r0
 8017fae:	b2db      	uxtb	r3, r3
 8017fb0:	f003 0307 	and.w	r3, r3, #7
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	d116      	bne.n	8017fe6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8017fb8:	68fb      	ldr	r3, [r7, #12]
 8017fba:	68db      	ldr	r3, [r3, #12]
 8017fbc:	899b      	ldrh	r3, [r3, #12]
 8017fbe:	b29c      	uxth	r4, r3
 8017fc0:	2001      	movs	r0, #1
 8017fc2:	f7fa f8c5 	bl	8012150 <lwip_htons>
 8017fc6:	4603      	mov	r3, r0
 8017fc8:	461a      	mov	r2, r3
 8017fca:	68fb      	ldr	r3, [r7, #12]
 8017fcc:	68db      	ldr	r3, [r3, #12]
 8017fce:	4322      	orrs	r2, r4
 8017fd0:	b292      	uxth	r2, r2
 8017fd2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	8b5b      	ldrh	r3, [r3, #26]
 8017fd8:	f043 0320 	orr.w	r3, r3, #32
 8017fdc:	b29a      	uxth	r2, r3
 8017fde:	687b      	ldr	r3, [r7, #4]
 8017fe0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8017fe2:	2300      	movs	r3, #0
 8017fe4:	e004      	b.n	8017ff0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8017fe6:	2101      	movs	r1, #1
 8017fe8:	6878      	ldr	r0, [r7, #4]
 8017fea:	f000 f80b 	bl	8018004 <tcp_enqueue_flags>
 8017fee:	4603      	mov	r3, r0
}
 8017ff0:	4618      	mov	r0, r3
 8017ff2:	3714      	adds	r7, #20
 8017ff4:	46bd      	mov	sp, r7
 8017ff6:	bd90      	pop	{r4, r7, pc}
 8017ff8:	08025d18 	.word	0x08025d18
 8017ffc:	08026120 	.word	0x08026120
 8018000:	08025d6c 	.word	0x08025d6c

08018004 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8018004:	b580      	push	{r7, lr}
 8018006:	b08a      	sub	sp, #40	; 0x28
 8018008:	af02      	add	r7, sp, #8
 801800a:	6078      	str	r0, [r7, #4]
 801800c:	460b      	mov	r3, r1
 801800e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8018010:	2300      	movs	r3, #0
 8018012:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8018014:	2300      	movs	r3, #0
 8018016:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8018018:	78fb      	ldrb	r3, [r7, #3]
 801801a:	f003 0303 	and.w	r3, r3, #3
 801801e:	2b00      	cmp	r3, #0
 8018020:	d106      	bne.n	8018030 <tcp_enqueue_flags+0x2c>
 8018022:	4b67      	ldr	r3, [pc, #412]	; (80181c0 <tcp_enqueue_flags+0x1bc>)
 8018024:	f240 4211 	movw	r2, #1041	; 0x411
 8018028:	4966      	ldr	r1, [pc, #408]	; (80181c4 <tcp_enqueue_flags+0x1c0>)
 801802a:	4867      	ldr	r0, [pc, #412]	; (80181c8 <tcp_enqueue_flags+0x1c4>)
 801802c:	f006 f954 	bl	801e2d8 <printf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	2b00      	cmp	r3, #0
 8018034:	d106      	bne.n	8018044 <tcp_enqueue_flags+0x40>
 8018036:	4b62      	ldr	r3, [pc, #392]	; (80181c0 <tcp_enqueue_flags+0x1bc>)
 8018038:	f240 4213 	movw	r2, #1043	; 0x413
 801803c:	4963      	ldr	r1, [pc, #396]	; (80181cc <tcp_enqueue_flags+0x1c8>)
 801803e:	4862      	ldr	r0, [pc, #392]	; (80181c8 <tcp_enqueue_flags+0x1c4>)
 8018040:	f006 f94a 	bl	801e2d8 <printf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8018044:	78fb      	ldrb	r3, [r7, #3]
 8018046:	f003 0302 	and.w	r3, r3, #2
 801804a:	2b00      	cmp	r3, #0
 801804c:	d001      	beq.n	8018052 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801804e:	2301      	movs	r3, #1
 8018050:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018052:	7ffb      	ldrb	r3, [r7, #31]
 8018054:	009b      	lsls	r3, r3, #2
 8018056:	b2db      	uxtb	r3, r3
 8018058:	f003 0304 	and.w	r3, r3, #4
 801805c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801805e:	7dfb      	ldrb	r3, [r7, #23]
 8018060:	b29b      	uxth	r3, r3
 8018062:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018066:	4619      	mov	r1, r3
 8018068:	2036      	movs	r0, #54	; 0x36
 801806a:	f7fb f945 	bl	80132f8 <pbuf_alloc>
 801806e:	6138      	str	r0, [r7, #16]
 8018070:	693b      	ldr	r3, [r7, #16]
 8018072:	2b00      	cmp	r3, #0
 8018074:	d109      	bne.n	801808a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	8b5b      	ldrh	r3, [r3, #26]
 801807a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801807e:	b29a      	uxth	r2, r3
 8018080:	687b      	ldr	r3, [r7, #4]
 8018082:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8018084:	f04f 33ff 	mov.w	r3, #4294967295
 8018088:	e095      	b.n	80181b6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801808a:	693b      	ldr	r3, [r7, #16]
 801808c:	895a      	ldrh	r2, [r3, #10]
 801808e:	7dfb      	ldrb	r3, [r7, #23]
 8018090:	b29b      	uxth	r3, r3
 8018092:	429a      	cmp	r2, r3
 8018094:	d206      	bcs.n	80180a4 <tcp_enqueue_flags+0xa0>
 8018096:	4b4a      	ldr	r3, [pc, #296]	; (80181c0 <tcp_enqueue_flags+0x1bc>)
 8018098:	f240 4239 	movw	r2, #1081	; 0x439
 801809c:	494c      	ldr	r1, [pc, #304]	; (80181d0 <tcp_enqueue_flags+0x1cc>)
 801809e:	484a      	ldr	r0, [pc, #296]	; (80181c8 <tcp_enqueue_flags+0x1c4>)
 80180a0:	f006 f91a 	bl	801e2d8 <printf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80180a8:	78fa      	ldrb	r2, [r7, #3]
 80180aa:	7ffb      	ldrb	r3, [r7, #31]
 80180ac:	9300      	str	r3, [sp, #0]
 80180ae:	460b      	mov	r3, r1
 80180b0:	6939      	ldr	r1, [r7, #16]
 80180b2:	6878      	ldr	r0, [r7, #4]
 80180b4:	f7ff fd70 	bl	8017b98 <tcp_create_segment>
 80180b8:	60f8      	str	r0, [r7, #12]
 80180ba:	68fb      	ldr	r3, [r7, #12]
 80180bc:	2b00      	cmp	r3, #0
 80180be:	d109      	bne.n	80180d4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80180c0:	687b      	ldr	r3, [r7, #4]
 80180c2:	8b5b      	ldrh	r3, [r3, #26]
 80180c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80180c8:	b29a      	uxth	r2, r3
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80180ce:	f04f 33ff 	mov.w	r3, #4294967295
 80180d2:	e070      	b.n	80181b6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80180d4:	68fb      	ldr	r3, [r7, #12]
 80180d6:	68db      	ldr	r3, [r3, #12]
 80180d8:	f003 0303 	and.w	r3, r3, #3
 80180dc:	2b00      	cmp	r3, #0
 80180de:	d006      	beq.n	80180ee <tcp_enqueue_flags+0xea>
 80180e0:	4b37      	ldr	r3, [pc, #220]	; (80181c0 <tcp_enqueue_flags+0x1bc>)
 80180e2:	f240 4242 	movw	r2, #1090	; 0x442
 80180e6:	493b      	ldr	r1, [pc, #236]	; (80181d4 <tcp_enqueue_flags+0x1d0>)
 80180e8:	4837      	ldr	r0, [pc, #220]	; (80181c8 <tcp_enqueue_flags+0x1c4>)
 80180ea:	f006 f8f5 	bl	801e2d8 <printf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80180ee:	68fb      	ldr	r3, [r7, #12]
 80180f0:	891b      	ldrh	r3, [r3, #8]
 80180f2:	2b00      	cmp	r3, #0
 80180f4:	d006      	beq.n	8018104 <tcp_enqueue_flags+0x100>
 80180f6:	4b32      	ldr	r3, [pc, #200]	; (80181c0 <tcp_enqueue_flags+0x1bc>)
 80180f8:	f240 4243 	movw	r2, #1091	; 0x443
 80180fc:	4936      	ldr	r1, [pc, #216]	; (80181d8 <tcp_enqueue_flags+0x1d4>)
 80180fe:	4832      	ldr	r0, [pc, #200]	; (80181c8 <tcp_enqueue_flags+0x1c4>)
 8018100:	f006 f8ea 	bl	801e2d8 <printf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018108:	2b00      	cmp	r3, #0
 801810a:	d103      	bne.n	8018114 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	68fa      	ldr	r2, [r7, #12]
 8018110:	66da      	str	r2, [r3, #108]	; 0x6c
 8018112:	e00d      	b.n	8018130 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018118:	61bb      	str	r3, [r7, #24]
 801811a:	e002      	b.n	8018122 <tcp_enqueue_flags+0x11e>
 801811c:	69bb      	ldr	r3, [r7, #24]
 801811e:	681b      	ldr	r3, [r3, #0]
 8018120:	61bb      	str	r3, [r7, #24]
 8018122:	69bb      	ldr	r3, [r7, #24]
 8018124:	681b      	ldr	r3, [r3, #0]
 8018126:	2b00      	cmp	r3, #0
 8018128:	d1f8      	bne.n	801811c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801812a:	69bb      	ldr	r3, [r7, #24]
 801812c:	68fa      	ldr	r2, [r7, #12]
 801812e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	2200      	movs	r2, #0
 8018134:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8018138:	78fb      	ldrb	r3, [r7, #3]
 801813a:	f003 0302 	and.w	r3, r3, #2
 801813e:	2b00      	cmp	r3, #0
 8018140:	d104      	bne.n	801814c <tcp_enqueue_flags+0x148>
 8018142:	78fb      	ldrb	r3, [r7, #3]
 8018144:	f003 0301 	and.w	r3, r3, #1
 8018148:	2b00      	cmp	r3, #0
 801814a:	d004      	beq.n	8018156 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018150:	1c5a      	adds	r2, r3, #1
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8018156:	78fb      	ldrb	r3, [r7, #3]
 8018158:	f003 0301 	and.w	r3, r3, #1
 801815c:	2b00      	cmp	r3, #0
 801815e:	d006      	beq.n	801816e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	8b5b      	ldrh	r3, [r3, #26]
 8018164:	f043 0320 	orr.w	r3, r3, #32
 8018168:	b29a      	uxth	r2, r3
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801816e:	68fb      	ldr	r3, [r7, #12]
 8018170:	685b      	ldr	r3, [r3, #4]
 8018172:	4618      	mov	r0, r3
 8018174:	f7fb fc32 	bl	80139dc <pbuf_clen>
 8018178:	4603      	mov	r3, r0
 801817a:	461a      	mov	r2, r3
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018182:	4413      	add	r3, r2
 8018184:	b29a      	uxth	r2, r3
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018192:	2b00      	cmp	r3, #0
 8018194:	d00e      	beq.n	80181b4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801819a:	2b00      	cmp	r3, #0
 801819c:	d10a      	bne.n	80181b4 <tcp_enqueue_flags+0x1b0>
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d106      	bne.n	80181b4 <tcp_enqueue_flags+0x1b0>
 80181a6:	4b06      	ldr	r3, [pc, #24]	; (80181c0 <tcp_enqueue_flags+0x1bc>)
 80181a8:	f240 4265 	movw	r2, #1125	; 0x465
 80181ac:	490b      	ldr	r1, [pc, #44]	; (80181dc <tcp_enqueue_flags+0x1d8>)
 80181ae:	4806      	ldr	r0, [pc, #24]	; (80181c8 <tcp_enqueue_flags+0x1c4>)
 80181b0:	f006 f892 	bl	801e2d8 <printf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80181b4:	2300      	movs	r3, #0
}
 80181b6:	4618      	mov	r0, r3
 80181b8:	3720      	adds	r7, #32
 80181ba:	46bd      	mov	sp, r7
 80181bc:	bd80      	pop	{r7, pc}
 80181be:	bf00      	nop
 80181c0:	08025d18 	.word	0x08025d18
 80181c4:	0802613c 	.word	0x0802613c
 80181c8:	08025d6c 	.word	0x08025d6c
 80181cc:	08026194 	.word	0x08026194
 80181d0:	080261b4 	.word	0x080261b4
 80181d4:	080261f0 	.word	0x080261f0
 80181d8:	08026208 	.word	0x08026208
 80181dc:	08026234 	.word	0x08026234

080181e0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80181e0:	b5b0      	push	{r4, r5, r7, lr}
 80181e2:	b08a      	sub	sp, #40	; 0x28
 80181e4:	af00      	add	r7, sp, #0
 80181e6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	d106      	bne.n	80181fc <tcp_output+0x1c>
 80181ee:	4b8a      	ldr	r3, [pc, #552]	; (8018418 <tcp_output+0x238>)
 80181f0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80181f4:	4989      	ldr	r1, [pc, #548]	; (801841c <tcp_output+0x23c>)
 80181f6:	488a      	ldr	r0, [pc, #552]	; (8018420 <tcp_output+0x240>)
 80181f8:	f006 f86e 	bl	801e2d8 <printf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	7d1b      	ldrb	r3, [r3, #20]
 8018200:	2b01      	cmp	r3, #1
 8018202:	d106      	bne.n	8018212 <tcp_output+0x32>
 8018204:	4b84      	ldr	r3, [pc, #528]	; (8018418 <tcp_output+0x238>)
 8018206:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801820a:	4986      	ldr	r1, [pc, #536]	; (8018424 <tcp_output+0x244>)
 801820c:	4884      	ldr	r0, [pc, #528]	; (8018420 <tcp_output+0x240>)
 801820e:	f006 f863 	bl	801e2d8 <printf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8018212:	4b85      	ldr	r3, [pc, #532]	; (8018428 <tcp_output+0x248>)
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	687a      	ldr	r2, [r7, #4]
 8018218:	429a      	cmp	r2, r3
 801821a:	d101      	bne.n	8018220 <tcp_output+0x40>
    return ERR_OK;
 801821c:	2300      	movs	r3, #0
 801821e:	e1ce      	b.n	80185be <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801822c:	4293      	cmp	r3, r2
 801822e:	bf28      	it	cs
 8018230:	4613      	movcs	r3, r2
 8018232:	b29b      	uxth	r3, r3
 8018234:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801823a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801823c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801823e:	2b00      	cmp	r3, #0
 8018240:	d10b      	bne.n	801825a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	8b5b      	ldrh	r3, [r3, #26]
 8018246:	f003 0302 	and.w	r3, r3, #2
 801824a:	2b00      	cmp	r3, #0
 801824c:	f000 81aa 	beq.w	80185a4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8018250:	6878      	ldr	r0, [r7, #4]
 8018252:	f000 fdcb 	bl	8018dec <tcp_send_empty_ack>
 8018256:	4603      	mov	r3, r0
 8018258:	e1b1      	b.n	80185be <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801825a:	6879      	ldr	r1, [r7, #4]
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	3304      	adds	r3, #4
 8018260:	461a      	mov	r2, r3
 8018262:	6878      	ldr	r0, [r7, #4]
 8018264:	f7ff fc7c 	bl	8017b60 <tcp_route>
 8018268:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801826a:	697b      	ldr	r3, [r7, #20]
 801826c:	2b00      	cmp	r3, #0
 801826e:	d102      	bne.n	8018276 <tcp_output+0x96>
    return ERR_RTE;
 8018270:	f06f 0303 	mvn.w	r3, #3
 8018274:	e1a3      	b.n	80185be <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	2b00      	cmp	r3, #0
 801827a:	d003      	beq.n	8018284 <tcp_output+0xa4>
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	681b      	ldr	r3, [r3, #0]
 8018280:	2b00      	cmp	r3, #0
 8018282:	d111      	bne.n	80182a8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8018284:	697b      	ldr	r3, [r7, #20]
 8018286:	2b00      	cmp	r3, #0
 8018288:	d002      	beq.n	8018290 <tcp_output+0xb0>
 801828a:	697b      	ldr	r3, [r7, #20]
 801828c:	3304      	adds	r3, #4
 801828e:	e000      	b.n	8018292 <tcp_output+0xb2>
 8018290:	2300      	movs	r3, #0
 8018292:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8018294:	693b      	ldr	r3, [r7, #16]
 8018296:	2b00      	cmp	r3, #0
 8018298:	d102      	bne.n	80182a0 <tcp_output+0xc0>
      return ERR_RTE;
 801829a:	f06f 0303 	mvn.w	r3, #3
 801829e:	e18e      	b.n	80185be <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80182a0:	693b      	ldr	r3, [r7, #16]
 80182a2:	681a      	ldr	r2, [r3, #0]
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80182a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182aa:	68db      	ldr	r3, [r3, #12]
 80182ac:	685b      	ldr	r3, [r3, #4]
 80182ae:	4618      	mov	r0, r3
 80182b0:	f7f9 ff63 	bl	801217a <lwip_htonl>
 80182b4:	4602      	mov	r2, r0
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80182ba:	1ad3      	subs	r3, r2, r3
 80182bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80182be:	8912      	ldrh	r2, [r2, #8]
 80182c0:	4413      	add	r3, r2
 80182c2:	69ba      	ldr	r2, [r7, #24]
 80182c4:	429a      	cmp	r2, r3
 80182c6:	d227      	bcs.n	8018318 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80182ce:	461a      	mov	r2, r3
 80182d0:	69bb      	ldr	r3, [r7, #24]
 80182d2:	4293      	cmp	r3, r2
 80182d4:	d114      	bne.n	8018300 <tcp_output+0x120>
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80182da:	2b00      	cmp	r3, #0
 80182dc:	d110      	bne.n	8018300 <tcp_output+0x120>
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80182e4:	2b00      	cmp	r3, #0
 80182e6:	d10b      	bne.n	8018300 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	2200      	movs	r2, #0
 80182ec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	2201      	movs	r2, #1
 80182f4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	2200      	movs	r2, #0
 80182fc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	8b5b      	ldrh	r3, [r3, #26]
 8018304:	f003 0302 	and.w	r3, r3, #2
 8018308:	2b00      	cmp	r3, #0
 801830a:	f000 814d 	beq.w	80185a8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801830e:	6878      	ldr	r0, [r7, #4]
 8018310:	f000 fd6c 	bl	8018dec <tcp_send_empty_ack>
 8018314:	4603      	mov	r3, r0
 8018316:	e152      	b.n	80185be <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	2200      	movs	r2, #0
 801831c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8018320:	687b      	ldr	r3, [r7, #4]
 8018322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018324:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8018326:	6a3b      	ldr	r3, [r7, #32]
 8018328:	2b00      	cmp	r3, #0
 801832a:	f000 811c 	beq.w	8018566 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801832e:	e002      	b.n	8018336 <tcp_output+0x156>
 8018330:	6a3b      	ldr	r3, [r7, #32]
 8018332:	681b      	ldr	r3, [r3, #0]
 8018334:	623b      	str	r3, [r7, #32]
 8018336:	6a3b      	ldr	r3, [r7, #32]
 8018338:	681b      	ldr	r3, [r3, #0]
 801833a:	2b00      	cmp	r3, #0
 801833c:	d1f8      	bne.n	8018330 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801833e:	e112      	b.n	8018566 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8018340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018342:	68db      	ldr	r3, [r3, #12]
 8018344:	899b      	ldrh	r3, [r3, #12]
 8018346:	b29b      	uxth	r3, r3
 8018348:	4618      	mov	r0, r3
 801834a:	f7f9 ff01 	bl	8012150 <lwip_htons>
 801834e:	4603      	mov	r3, r0
 8018350:	b2db      	uxtb	r3, r3
 8018352:	f003 0304 	and.w	r3, r3, #4
 8018356:	2b00      	cmp	r3, #0
 8018358:	d006      	beq.n	8018368 <tcp_output+0x188>
 801835a:	4b2f      	ldr	r3, [pc, #188]	; (8018418 <tcp_output+0x238>)
 801835c:	f240 5236 	movw	r2, #1334	; 0x536
 8018360:	4932      	ldr	r1, [pc, #200]	; (801842c <tcp_output+0x24c>)
 8018362:	482f      	ldr	r0, [pc, #188]	; (8018420 <tcp_output+0x240>)
 8018364:	f005 ffb8 	bl	801e2d8 <printf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801836c:	2b00      	cmp	r3, #0
 801836e:	d01f      	beq.n	80183b0 <tcp_output+0x1d0>
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	8b5b      	ldrh	r3, [r3, #26]
 8018374:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8018378:	2b00      	cmp	r3, #0
 801837a:	d119      	bne.n	80183b0 <tcp_output+0x1d0>
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018380:	2b00      	cmp	r3, #0
 8018382:	d00b      	beq.n	801839c <tcp_output+0x1bc>
 8018384:	687b      	ldr	r3, [r7, #4]
 8018386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018388:	681b      	ldr	r3, [r3, #0]
 801838a:	2b00      	cmp	r3, #0
 801838c:	d110      	bne.n	80183b0 <tcp_output+0x1d0>
 801838e:	687b      	ldr	r3, [r7, #4]
 8018390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018392:	891a      	ldrh	r2, [r3, #8]
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018398:	429a      	cmp	r2, r3
 801839a:	d209      	bcs.n	80183b0 <tcp_output+0x1d0>
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	d004      	beq.n	80183b0 <tcp_output+0x1d0>
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80183ac:	2b08      	cmp	r3, #8
 80183ae:	d901      	bls.n	80183b4 <tcp_output+0x1d4>
 80183b0:	2301      	movs	r3, #1
 80183b2:	e000      	b.n	80183b6 <tcp_output+0x1d6>
 80183b4:	2300      	movs	r3, #0
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	d106      	bne.n	80183c8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	8b5b      	ldrh	r3, [r3, #26]
 80183be:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80183c2:	2b00      	cmp	r3, #0
 80183c4:	f000 80e4 	beq.w	8018590 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	7d1b      	ldrb	r3, [r3, #20]
 80183cc:	2b02      	cmp	r3, #2
 80183ce:	d00d      	beq.n	80183ec <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80183d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183d2:	68db      	ldr	r3, [r3, #12]
 80183d4:	899b      	ldrh	r3, [r3, #12]
 80183d6:	b29c      	uxth	r4, r3
 80183d8:	2010      	movs	r0, #16
 80183da:	f7f9 feb9 	bl	8012150 <lwip_htons>
 80183de:	4603      	mov	r3, r0
 80183e0:	461a      	mov	r2, r3
 80183e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183e4:	68db      	ldr	r3, [r3, #12]
 80183e6:	4322      	orrs	r2, r4
 80183e8:	b292      	uxth	r2, r2
 80183ea:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80183ec:	697a      	ldr	r2, [r7, #20]
 80183ee:	6879      	ldr	r1, [r7, #4]
 80183f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80183f2:	f000 f909 	bl	8018608 <tcp_output_segment>
 80183f6:	4603      	mov	r3, r0
 80183f8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80183fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80183fe:	2b00      	cmp	r3, #0
 8018400:	d016      	beq.n	8018430 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	8b5b      	ldrh	r3, [r3, #26]
 8018406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801840a:	b29a      	uxth	r2, r3
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	835a      	strh	r2, [r3, #26]
      return err;
 8018410:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018414:	e0d3      	b.n	80185be <tcp_output+0x3de>
 8018416:	bf00      	nop
 8018418:	08025d18 	.word	0x08025d18
 801841c:	0802625c 	.word	0x0802625c
 8018420:	08025d6c 	.word	0x08025d6c
 8018424:	08026274 	.word	0x08026274
 8018428:	2000c200 	.word	0x2000c200
 801842c:	0802629c 	.word	0x0802629c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8018430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018432:	681a      	ldr	r2, [r3, #0]
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	7d1b      	ldrb	r3, [r3, #20]
 801843c:	2b02      	cmp	r3, #2
 801843e:	d006      	beq.n	801844e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	8b5b      	ldrh	r3, [r3, #26]
 8018444:	f023 0303 	bic.w	r3, r3, #3
 8018448:	b29a      	uxth	r2, r3
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801844e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018450:	68db      	ldr	r3, [r3, #12]
 8018452:	685b      	ldr	r3, [r3, #4]
 8018454:	4618      	mov	r0, r3
 8018456:	f7f9 fe90 	bl	801217a <lwip_htonl>
 801845a:	4604      	mov	r4, r0
 801845c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801845e:	891b      	ldrh	r3, [r3, #8]
 8018460:	461d      	mov	r5, r3
 8018462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018464:	68db      	ldr	r3, [r3, #12]
 8018466:	899b      	ldrh	r3, [r3, #12]
 8018468:	b29b      	uxth	r3, r3
 801846a:	4618      	mov	r0, r3
 801846c:	f7f9 fe70 	bl	8012150 <lwip_htons>
 8018470:	4603      	mov	r3, r0
 8018472:	b2db      	uxtb	r3, r3
 8018474:	f003 0303 	and.w	r3, r3, #3
 8018478:	2b00      	cmp	r3, #0
 801847a:	d001      	beq.n	8018480 <tcp_output+0x2a0>
 801847c:	2301      	movs	r3, #1
 801847e:	e000      	b.n	8018482 <tcp_output+0x2a2>
 8018480:	2300      	movs	r3, #0
 8018482:	442b      	add	r3, r5
 8018484:	4423      	add	r3, r4
 8018486:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801848c:	68bb      	ldr	r3, [r7, #8]
 801848e:	1ad3      	subs	r3, r2, r3
 8018490:	2b00      	cmp	r3, #0
 8018492:	da02      	bge.n	801849a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	68ba      	ldr	r2, [r7, #8]
 8018498:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801849a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801849c:	891b      	ldrh	r3, [r3, #8]
 801849e:	461c      	mov	r4, r3
 80184a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184a2:	68db      	ldr	r3, [r3, #12]
 80184a4:	899b      	ldrh	r3, [r3, #12]
 80184a6:	b29b      	uxth	r3, r3
 80184a8:	4618      	mov	r0, r3
 80184aa:	f7f9 fe51 	bl	8012150 <lwip_htons>
 80184ae:	4603      	mov	r3, r0
 80184b0:	b2db      	uxtb	r3, r3
 80184b2:	f003 0303 	and.w	r3, r3, #3
 80184b6:	2b00      	cmp	r3, #0
 80184b8:	d001      	beq.n	80184be <tcp_output+0x2de>
 80184ba:	2301      	movs	r3, #1
 80184bc:	e000      	b.n	80184c0 <tcp_output+0x2e0>
 80184be:	2300      	movs	r3, #0
 80184c0:	4423      	add	r3, r4
 80184c2:	2b00      	cmp	r3, #0
 80184c4:	d049      	beq.n	801855a <tcp_output+0x37a>
      seg->next = NULL;
 80184c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184c8:	2200      	movs	r2, #0
 80184ca:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	d105      	bne.n	80184e0 <tcp_output+0x300>
        pcb->unacked = seg;
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80184d8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80184da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184dc:	623b      	str	r3, [r7, #32]
 80184de:	e03f      	b.n	8018560 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80184e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184e2:	68db      	ldr	r3, [r3, #12]
 80184e4:	685b      	ldr	r3, [r3, #4]
 80184e6:	4618      	mov	r0, r3
 80184e8:	f7f9 fe47 	bl	801217a <lwip_htonl>
 80184ec:	4604      	mov	r4, r0
 80184ee:	6a3b      	ldr	r3, [r7, #32]
 80184f0:	68db      	ldr	r3, [r3, #12]
 80184f2:	685b      	ldr	r3, [r3, #4]
 80184f4:	4618      	mov	r0, r3
 80184f6:	f7f9 fe40 	bl	801217a <lwip_htonl>
 80184fa:	4603      	mov	r3, r0
 80184fc:	1ae3      	subs	r3, r4, r3
 80184fe:	2b00      	cmp	r3, #0
 8018500:	da24      	bge.n	801854c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8018502:	687b      	ldr	r3, [r7, #4]
 8018504:	3370      	adds	r3, #112	; 0x70
 8018506:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8018508:	e002      	b.n	8018510 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801850a:	69fb      	ldr	r3, [r7, #28]
 801850c:	681b      	ldr	r3, [r3, #0]
 801850e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8018510:	69fb      	ldr	r3, [r7, #28]
 8018512:	681b      	ldr	r3, [r3, #0]
 8018514:	2b00      	cmp	r3, #0
 8018516:	d011      	beq.n	801853c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8018518:	69fb      	ldr	r3, [r7, #28]
 801851a:	681b      	ldr	r3, [r3, #0]
 801851c:	68db      	ldr	r3, [r3, #12]
 801851e:	685b      	ldr	r3, [r3, #4]
 8018520:	4618      	mov	r0, r3
 8018522:	f7f9 fe2a 	bl	801217a <lwip_htonl>
 8018526:	4604      	mov	r4, r0
 8018528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801852a:	68db      	ldr	r3, [r3, #12]
 801852c:	685b      	ldr	r3, [r3, #4]
 801852e:	4618      	mov	r0, r3
 8018530:	f7f9 fe23 	bl	801217a <lwip_htonl>
 8018534:	4603      	mov	r3, r0
 8018536:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8018538:	2b00      	cmp	r3, #0
 801853a:	dbe6      	blt.n	801850a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801853c:	69fb      	ldr	r3, [r7, #28]
 801853e:	681a      	ldr	r2, [r3, #0]
 8018540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018542:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8018544:	69fb      	ldr	r3, [r7, #28]
 8018546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018548:	601a      	str	r2, [r3, #0]
 801854a:	e009      	b.n	8018560 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801854c:	6a3b      	ldr	r3, [r7, #32]
 801854e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018550:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8018552:	6a3b      	ldr	r3, [r7, #32]
 8018554:	681b      	ldr	r3, [r3, #0]
 8018556:	623b      	str	r3, [r7, #32]
 8018558:	e002      	b.n	8018560 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801855a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801855c:	f7fc fc3f 	bl	8014dde <tcp_seg_free>
    }
    seg = pcb->unsent;
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018564:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8018566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018568:	2b00      	cmp	r3, #0
 801856a:	d012      	beq.n	8018592 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801856c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801856e:	68db      	ldr	r3, [r3, #12]
 8018570:	685b      	ldr	r3, [r3, #4]
 8018572:	4618      	mov	r0, r3
 8018574:	f7f9 fe01 	bl	801217a <lwip_htonl>
 8018578:	4602      	mov	r2, r0
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801857e:	1ad3      	subs	r3, r2, r3
 8018580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018582:	8912      	ldrh	r2, [r2, #8]
 8018584:	4413      	add	r3, r2
  while (seg != NULL &&
 8018586:	69ba      	ldr	r2, [r7, #24]
 8018588:	429a      	cmp	r2, r3
 801858a:	f4bf aed9 	bcs.w	8018340 <tcp_output+0x160>
 801858e:	e000      	b.n	8018592 <tcp_output+0x3b2>
      break;
 8018590:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8018592:	687b      	ldr	r3, [r7, #4]
 8018594:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018596:	2b00      	cmp	r3, #0
 8018598:	d108      	bne.n	80185ac <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	2200      	movs	r2, #0
 801859e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80185a2:	e004      	b.n	80185ae <tcp_output+0x3ce>
    goto output_done;
 80185a4:	bf00      	nop
 80185a6:	e002      	b.n	80185ae <tcp_output+0x3ce>
    goto output_done;
 80185a8:	bf00      	nop
 80185aa:	e000      	b.n	80185ae <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80185ac:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	8b5b      	ldrh	r3, [r3, #26]
 80185b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80185b6:	b29a      	uxth	r2, r3
 80185b8:	687b      	ldr	r3, [r7, #4]
 80185ba:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80185bc:	2300      	movs	r3, #0
}
 80185be:	4618      	mov	r0, r3
 80185c0:	3728      	adds	r7, #40	; 0x28
 80185c2:	46bd      	mov	sp, r7
 80185c4:	bdb0      	pop	{r4, r5, r7, pc}
 80185c6:	bf00      	nop

080185c8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80185c8:	b580      	push	{r7, lr}
 80185ca:	b082      	sub	sp, #8
 80185cc:	af00      	add	r7, sp, #0
 80185ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	2b00      	cmp	r3, #0
 80185d4:	d106      	bne.n	80185e4 <tcp_output_segment_busy+0x1c>
 80185d6:	4b09      	ldr	r3, [pc, #36]	; (80185fc <tcp_output_segment_busy+0x34>)
 80185d8:	f240 529a 	movw	r2, #1434	; 0x59a
 80185dc:	4908      	ldr	r1, [pc, #32]	; (8018600 <tcp_output_segment_busy+0x38>)
 80185de:	4809      	ldr	r0, [pc, #36]	; (8018604 <tcp_output_segment_busy+0x3c>)
 80185e0:	f005 fe7a 	bl	801e2d8 <printf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	685b      	ldr	r3, [r3, #4]
 80185e8:	7b9b      	ldrb	r3, [r3, #14]
 80185ea:	2b01      	cmp	r3, #1
 80185ec:	d001      	beq.n	80185f2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80185ee:	2301      	movs	r3, #1
 80185f0:	e000      	b.n	80185f4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80185f2:	2300      	movs	r3, #0
}
 80185f4:	4618      	mov	r0, r3
 80185f6:	3708      	adds	r7, #8
 80185f8:	46bd      	mov	sp, r7
 80185fa:	bd80      	pop	{r7, pc}
 80185fc:	08025d18 	.word	0x08025d18
 8018600:	080262b4 	.word	0x080262b4
 8018604:	08025d6c 	.word	0x08025d6c

08018608 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8018608:	b5b0      	push	{r4, r5, r7, lr}
 801860a:	b08c      	sub	sp, #48	; 0x30
 801860c:	af04      	add	r7, sp, #16
 801860e:	60f8      	str	r0, [r7, #12]
 8018610:	60b9      	str	r1, [r7, #8]
 8018612:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8018614:	68fb      	ldr	r3, [r7, #12]
 8018616:	2b00      	cmp	r3, #0
 8018618:	d106      	bne.n	8018628 <tcp_output_segment+0x20>
 801861a:	4b63      	ldr	r3, [pc, #396]	; (80187a8 <tcp_output_segment+0x1a0>)
 801861c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8018620:	4962      	ldr	r1, [pc, #392]	; (80187ac <tcp_output_segment+0x1a4>)
 8018622:	4863      	ldr	r0, [pc, #396]	; (80187b0 <tcp_output_segment+0x1a8>)
 8018624:	f005 fe58 	bl	801e2d8 <printf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8018628:	68bb      	ldr	r3, [r7, #8]
 801862a:	2b00      	cmp	r3, #0
 801862c:	d106      	bne.n	801863c <tcp_output_segment+0x34>
 801862e:	4b5e      	ldr	r3, [pc, #376]	; (80187a8 <tcp_output_segment+0x1a0>)
 8018630:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8018634:	495f      	ldr	r1, [pc, #380]	; (80187b4 <tcp_output_segment+0x1ac>)
 8018636:	485e      	ldr	r0, [pc, #376]	; (80187b0 <tcp_output_segment+0x1a8>)
 8018638:	f005 fe4e 	bl	801e2d8 <printf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	2b00      	cmp	r3, #0
 8018640:	d106      	bne.n	8018650 <tcp_output_segment+0x48>
 8018642:	4b59      	ldr	r3, [pc, #356]	; (80187a8 <tcp_output_segment+0x1a0>)
 8018644:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8018648:	495b      	ldr	r1, [pc, #364]	; (80187b8 <tcp_output_segment+0x1b0>)
 801864a:	4859      	ldr	r0, [pc, #356]	; (80187b0 <tcp_output_segment+0x1a8>)
 801864c:	f005 fe44 	bl	801e2d8 <printf>

  if (tcp_output_segment_busy(seg)) {
 8018650:	68f8      	ldr	r0, [r7, #12]
 8018652:	f7ff ffb9 	bl	80185c8 <tcp_output_segment_busy>
 8018656:	4603      	mov	r3, r0
 8018658:	2b00      	cmp	r3, #0
 801865a:	d001      	beq.n	8018660 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801865c:	2300      	movs	r3, #0
 801865e:	e09f      	b.n	80187a0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8018660:	68bb      	ldr	r3, [r7, #8]
 8018662:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018664:	68fb      	ldr	r3, [r7, #12]
 8018666:	68dc      	ldr	r4, [r3, #12]
 8018668:	4610      	mov	r0, r2
 801866a:	f7f9 fd86 	bl	801217a <lwip_htonl>
 801866e:	4603      	mov	r3, r0
 8018670:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8018672:	68bb      	ldr	r3, [r7, #8]
 8018674:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8018676:	68fb      	ldr	r3, [r7, #12]
 8018678:	68dc      	ldr	r4, [r3, #12]
 801867a:	4610      	mov	r0, r2
 801867c:	f7f9 fd68 	bl	8012150 <lwip_htons>
 8018680:	4603      	mov	r3, r0
 8018682:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018684:	68bb      	ldr	r3, [r7, #8]
 8018686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018688:	68ba      	ldr	r2, [r7, #8]
 801868a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801868c:	441a      	add	r2, r3
 801868e:	68bb      	ldr	r3, [r7, #8]
 8018690:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8018692:	68fb      	ldr	r3, [r7, #12]
 8018694:	68db      	ldr	r3, [r3, #12]
 8018696:	3314      	adds	r3, #20
 8018698:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801869a:	68fb      	ldr	r3, [r7, #12]
 801869c:	7a9b      	ldrb	r3, [r3, #10]
 801869e:	f003 0301 	and.w	r3, r3, #1
 80186a2:	2b00      	cmp	r3, #0
 80186a4:	d015      	beq.n	80186d2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80186a6:	68bb      	ldr	r3, [r7, #8]
 80186a8:	3304      	adds	r3, #4
 80186aa:	461a      	mov	r2, r3
 80186ac:	6879      	ldr	r1, [r7, #4]
 80186ae:	f44f 7006 	mov.w	r0, #536	; 0x218
 80186b2:	f7fc fe8b 	bl	80153cc <tcp_eff_send_mss_netif>
 80186b6:	4603      	mov	r3, r0
 80186b8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80186ba:	8b7b      	ldrh	r3, [r7, #26]
 80186bc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80186c0:	4618      	mov	r0, r3
 80186c2:	f7f9 fd5a 	bl	801217a <lwip_htonl>
 80186c6:	4602      	mov	r2, r0
 80186c8:	69fb      	ldr	r3, [r7, #28]
 80186ca:	601a      	str	r2, [r3, #0]
    opts += 1;
 80186cc:	69fb      	ldr	r3, [r7, #28]
 80186ce:	3304      	adds	r3, #4
 80186d0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80186d2:	68bb      	ldr	r3, [r7, #8]
 80186d4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80186d8:	2b00      	cmp	r3, #0
 80186da:	da02      	bge.n	80186e2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80186dc:	68bb      	ldr	r3, [r7, #8]
 80186de:	2200      	movs	r2, #0
 80186e0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80186e2:	68bb      	ldr	r3, [r7, #8]
 80186e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	d10c      	bne.n	8018704 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80186ea:	4b34      	ldr	r3, [pc, #208]	; (80187bc <tcp_output_segment+0x1b4>)
 80186ec:	681a      	ldr	r2, [r3, #0]
 80186ee:	68bb      	ldr	r3, [r7, #8]
 80186f0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80186f2:	68fb      	ldr	r3, [r7, #12]
 80186f4:	68db      	ldr	r3, [r3, #12]
 80186f6:	685b      	ldr	r3, [r3, #4]
 80186f8:	4618      	mov	r0, r3
 80186fa:	f7f9 fd3e 	bl	801217a <lwip_htonl>
 80186fe:	4602      	mov	r2, r0
 8018700:	68bb      	ldr	r3, [r7, #8]
 8018702:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8018704:	68fb      	ldr	r3, [r7, #12]
 8018706:	68da      	ldr	r2, [r3, #12]
 8018708:	68fb      	ldr	r3, [r7, #12]
 801870a:	685b      	ldr	r3, [r3, #4]
 801870c:	685b      	ldr	r3, [r3, #4]
 801870e:	1ad3      	subs	r3, r2, r3
 8018710:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8018712:	68fb      	ldr	r3, [r7, #12]
 8018714:	685b      	ldr	r3, [r3, #4]
 8018716:	8959      	ldrh	r1, [r3, #10]
 8018718:	68fb      	ldr	r3, [r7, #12]
 801871a:	685b      	ldr	r3, [r3, #4]
 801871c:	8b3a      	ldrh	r2, [r7, #24]
 801871e:	1a8a      	subs	r2, r1, r2
 8018720:	b292      	uxth	r2, r2
 8018722:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8018724:	68fb      	ldr	r3, [r7, #12]
 8018726:	685b      	ldr	r3, [r3, #4]
 8018728:	8919      	ldrh	r1, [r3, #8]
 801872a:	68fb      	ldr	r3, [r7, #12]
 801872c:	685b      	ldr	r3, [r3, #4]
 801872e:	8b3a      	ldrh	r2, [r7, #24]
 8018730:	1a8a      	subs	r2, r1, r2
 8018732:	b292      	uxth	r2, r2
 8018734:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8018736:	68fb      	ldr	r3, [r7, #12]
 8018738:	685b      	ldr	r3, [r3, #4]
 801873a:	68fa      	ldr	r2, [r7, #12]
 801873c:	68d2      	ldr	r2, [r2, #12]
 801873e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8018740:	68fb      	ldr	r3, [r7, #12]
 8018742:	68db      	ldr	r3, [r3, #12]
 8018744:	2200      	movs	r2, #0
 8018746:	741a      	strb	r2, [r3, #16]
 8018748:	2200      	movs	r2, #0
 801874a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801874c:	68fb      	ldr	r3, [r7, #12]
 801874e:	68db      	ldr	r3, [r3, #12]
 8018750:	f103 0214 	add.w	r2, r3, #20
 8018754:	68fb      	ldr	r3, [r7, #12]
 8018756:	7a9b      	ldrb	r3, [r3, #10]
 8018758:	009b      	lsls	r3, r3, #2
 801875a:	f003 0304 	and.w	r3, r3, #4
 801875e:	4413      	add	r3, r2
 8018760:	69fa      	ldr	r2, [r7, #28]
 8018762:	429a      	cmp	r2, r3
 8018764:	d006      	beq.n	8018774 <tcp_output_segment+0x16c>
 8018766:	4b10      	ldr	r3, [pc, #64]	; (80187a8 <tcp_output_segment+0x1a0>)
 8018768:	f240 621c 	movw	r2, #1564	; 0x61c
 801876c:	4914      	ldr	r1, [pc, #80]	; (80187c0 <tcp_output_segment+0x1b8>)
 801876e:	4810      	ldr	r0, [pc, #64]	; (80187b0 <tcp_output_segment+0x1a8>)
 8018770:	f005 fdb2 	bl	801e2d8 <printf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8018774:	68fb      	ldr	r3, [r7, #12]
 8018776:	6858      	ldr	r0, [r3, #4]
 8018778:	68b9      	ldr	r1, [r7, #8]
 801877a:	68bb      	ldr	r3, [r7, #8]
 801877c:	1d1c      	adds	r4, r3, #4
 801877e:	68bb      	ldr	r3, [r7, #8]
 8018780:	7add      	ldrb	r5, [r3, #11]
 8018782:	68bb      	ldr	r3, [r7, #8]
 8018784:	7a9b      	ldrb	r3, [r3, #10]
 8018786:	687a      	ldr	r2, [r7, #4]
 8018788:	9202      	str	r2, [sp, #8]
 801878a:	2206      	movs	r2, #6
 801878c:	9201      	str	r2, [sp, #4]
 801878e:	9300      	str	r3, [sp, #0]
 8018790:	462b      	mov	r3, r5
 8018792:	4622      	mov	r2, r4
 8018794:	f004 fc1c 	bl	801cfd0 <ip4_output_if>
 8018798:	4603      	mov	r3, r0
 801879a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801879c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80187a0:	4618      	mov	r0, r3
 80187a2:	3720      	adds	r7, #32
 80187a4:	46bd      	mov	sp, r7
 80187a6:	bdb0      	pop	{r4, r5, r7, pc}
 80187a8:	08025d18 	.word	0x08025d18
 80187ac:	080262dc 	.word	0x080262dc
 80187b0:	08025d6c 	.word	0x08025d6c
 80187b4:	080262fc 	.word	0x080262fc
 80187b8:	0802631c 	.word	0x0802631c
 80187bc:	2000c1b4 	.word	0x2000c1b4
 80187c0:	08026340 	.word	0x08026340

080187c4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80187c4:	b5b0      	push	{r4, r5, r7, lr}
 80187c6:	b084      	sub	sp, #16
 80187c8:	af00      	add	r7, sp, #0
 80187ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	d106      	bne.n	80187e0 <tcp_rexmit_rto_prepare+0x1c>
 80187d2:	4b31      	ldr	r3, [pc, #196]	; (8018898 <tcp_rexmit_rto_prepare+0xd4>)
 80187d4:	f240 6263 	movw	r2, #1635	; 0x663
 80187d8:	4930      	ldr	r1, [pc, #192]	; (801889c <tcp_rexmit_rto_prepare+0xd8>)
 80187da:	4831      	ldr	r0, [pc, #196]	; (80188a0 <tcp_rexmit_rto_prepare+0xdc>)
 80187dc:	f005 fd7c 	bl	801e2d8 <printf>

  if (pcb->unacked == NULL) {
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80187e4:	2b00      	cmp	r3, #0
 80187e6:	d102      	bne.n	80187ee <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80187e8:	f06f 0305 	mvn.w	r3, #5
 80187ec:	e050      	b.n	8018890 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80187f2:	60fb      	str	r3, [r7, #12]
 80187f4:	e00b      	b.n	801880e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80187f6:	68f8      	ldr	r0, [r7, #12]
 80187f8:	f7ff fee6 	bl	80185c8 <tcp_output_segment_busy>
 80187fc:	4603      	mov	r3, r0
 80187fe:	2b00      	cmp	r3, #0
 8018800:	d002      	beq.n	8018808 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8018802:	f06f 0305 	mvn.w	r3, #5
 8018806:	e043      	b.n	8018890 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8018808:	68fb      	ldr	r3, [r7, #12]
 801880a:	681b      	ldr	r3, [r3, #0]
 801880c:	60fb      	str	r3, [r7, #12]
 801880e:	68fb      	ldr	r3, [r7, #12]
 8018810:	681b      	ldr	r3, [r3, #0]
 8018812:	2b00      	cmp	r3, #0
 8018814:	d1ef      	bne.n	80187f6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8018816:	68f8      	ldr	r0, [r7, #12]
 8018818:	f7ff fed6 	bl	80185c8 <tcp_output_segment_busy>
 801881c:	4603      	mov	r3, r0
 801881e:	2b00      	cmp	r3, #0
 8018820:	d002      	beq.n	8018828 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8018822:	f06f 0305 	mvn.w	r3, #5
 8018826:	e033      	b.n	8018890 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8018828:	687b      	ldr	r3, [r7, #4]
 801882a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801882c:	68fb      	ldr	r3, [r7, #12]
 801882e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	2200      	movs	r2, #0
 801883c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	8b5b      	ldrh	r3, [r3, #26]
 8018842:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8018846:	b29a      	uxth	r2, r3
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801884c:	68fb      	ldr	r3, [r7, #12]
 801884e:	68db      	ldr	r3, [r3, #12]
 8018850:	685b      	ldr	r3, [r3, #4]
 8018852:	4618      	mov	r0, r3
 8018854:	f7f9 fc91 	bl	801217a <lwip_htonl>
 8018858:	4604      	mov	r4, r0
 801885a:	68fb      	ldr	r3, [r7, #12]
 801885c:	891b      	ldrh	r3, [r3, #8]
 801885e:	461d      	mov	r5, r3
 8018860:	68fb      	ldr	r3, [r7, #12]
 8018862:	68db      	ldr	r3, [r3, #12]
 8018864:	899b      	ldrh	r3, [r3, #12]
 8018866:	b29b      	uxth	r3, r3
 8018868:	4618      	mov	r0, r3
 801886a:	f7f9 fc71 	bl	8012150 <lwip_htons>
 801886e:	4603      	mov	r3, r0
 8018870:	b2db      	uxtb	r3, r3
 8018872:	f003 0303 	and.w	r3, r3, #3
 8018876:	2b00      	cmp	r3, #0
 8018878:	d001      	beq.n	801887e <tcp_rexmit_rto_prepare+0xba>
 801887a:	2301      	movs	r3, #1
 801887c:	e000      	b.n	8018880 <tcp_rexmit_rto_prepare+0xbc>
 801887e:	2300      	movs	r3, #0
 8018880:	442b      	add	r3, r5
 8018882:	18e2      	adds	r2, r4, r3
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	2200      	movs	r2, #0
 801888c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801888e:	2300      	movs	r3, #0
}
 8018890:	4618      	mov	r0, r3
 8018892:	3710      	adds	r7, #16
 8018894:	46bd      	mov	sp, r7
 8018896:	bdb0      	pop	{r4, r5, r7, pc}
 8018898:	08025d18 	.word	0x08025d18
 801889c:	08026354 	.word	0x08026354
 80188a0:	08025d6c 	.word	0x08025d6c

080188a4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80188a4:	b580      	push	{r7, lr}
 80188a6:	b082      	sub	sp, #8
 80188a8:	af00      	add	r7, sp, #0
 80188aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	2b00      	cmp	r3, #0
 80188b0:	d106      	bne.n	80188c0 <tcp_rexmit_rto_commit+0x1c>
 80188b2:	4b0d      	ldr	r3, [pc, #52]	; (80188e8 <tcp_rexmit_rto_commit+0x44>)
 80188b4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80188b8:	490c      	ldr	r1, [pc, #48]	; (80188ec <tcp_rexmit_rto_commit+0x48>)
 80188ba:	480d      	ldr	r0, [pc, #52]	; (80188f0 <tcp_rexmit_rto_commit+0x4c>)
 80188bc:	f005 fd0c 	bl	801e2d8 <printf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80188c6:	2bff      	cmp	r3, #255	; 0xff
 80188c8:	d007      	beq.n	80188da <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80188d0:	3301      	adds	r3, #1
 80188d2:	b2da      	uxtb	r2, r3
 80188d4:	687b      	ldr	r3, [r7, #4]
 80188d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80188da:	6878      	ldr	r0, [r7, #4]
 80188dc:	f7ff fc80 	bl	80181e0 <tcp_output>
}
 80188e0:	bf00      	nop
 80188e2:	3708      	adds	r7, #8
 80188e4:	46bd      	mov	sp, r7
 80188e6:	bd80      	pop	{r7, pc}
 80188e8:	08025d18 	.word	0x08025d18
 80188ec:	08026378 	.word	0x08026378
 80188f0:	08025d6c 	.word	0x08025d6c

080188f4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80188f4:	b580      	push	{r7, lr}
 80188f6:	b082      	sub	sp, #8
 80188f8:	af00      	add	r7, sp, #0
 80188fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80188fc:	687b      	ldr	r3, [r7, #4]
 80188fe:	2b00      	cmp	r3, #0
 8018900:	d106      	bne.n	8018910 <tcp_rexmit_rto+0x1c>
 8018902:	4b0a      	ldr	r3, [pc, #40]	; (801892c <tcp_rexmit_rto+0x38>)
 8018904:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8018908:	4909      	ldr	r1, [pc, #36]	; (8018930 <tcp_rexmit_rto+0x3c>)
 801890a:	480a      	ldr	r0, [pc, #40]	; (8018934 <tcp_rexmit_rto+0x40>)
 801890c:	f005 fce4 	bl	801e2d8 <printf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8018910:	6878      	ldr	r0, [r7, #4]
 8018912:	f7ff ff57 	bl	80187c4 <tcp_rexmit_rto_prepare>
 8018916:	4603      	mov	r3, r0
 8018918:	2b00      	cmp	r3, #0
 801891a:	d102      	bne.n	8018922 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801891c:	6878      	ldr	r0, [r7, #4]
 801891e:	f7ff ffc1 	bl	80188a4 <tcp_rexmit_rto_commit>
  }
}
 8018922:	bf00      	nop
 8018924:	3708      	adds	r7, #8
 8018926:	46bd      	mov	sp, r7
 8018928:	bd80      	pop	{r7, pc}
 801892a:	bf00      	nop
 801892c:	08025d18 	.word	0x08025d18
 8018930:	0802639c 	.word	0x0802639c
 8018934:	08025d6c 	.word	0x08025d6c

08018938 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8018938:	b590      	push	{r4, r7, lr}
 801893a:	b085      	sub	sp, #20
 801893c:	af00      	add	r7, sp, #0
 801893e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8018940:	687b      	ldr	r3, [r7, #4]
 8018942:	2b00      	cmp	r3, #0
 8018944:	d106      	bne.n	8018954 <tcp_rexmit+0x1c>
 8018946:	4b2f      	ldr	r3, [pc, #188]	; (8018a04 <tcp_rexmit+0xcc>)
 8018948:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801894c:	492e      	ldr	r1, [pc, #184]	; (8018a08 <tcp_rexmit+0xd0>)
 801894e:	482f      	ldr	r0, [pc, #188]	; (8018a0c <tcp_rexmit+0xd4>)
 8018950:	f005 fcc2 	bl	801e2d8 <printf>

  if (pcb->unacked == NULL) {
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018958:	2b00      	cmp	r3, #0
 801895a:	d102      	bne.n	8018962 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801895c:	f06f 0305 	mvn.w	r3, #5
 8018960:	e04c      	b.n	80189fc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018966:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8018968:	68b8      	ldr	r0, [r7, #8]
 801896a:	f7ff fe2d 	bl	80185c8 <tcp_output_segment_busy>
 801896e:	4603      	mov	r3, r0
 8018970:	2b00      	cmp	r3, #0
 8018972:	d002      	beq.n	801897a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8018974:	f06f 0305 	mvn.w	r3, #5
 8018978:	e040      	b.n	80189fc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801897a:	68bb      	ldr	r3, [r7, #8]
 801897c:	681a      	ldr	r2, [r3, #0]
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8018982:	687b      	ldr	r3, [r7, #4]
 8018984:	336c      	adds	r3, #108	; 0x6c
 8018986:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018988:	e002      	b.n	8018990 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801898a:	68fb      	ldr	r3, [r7, #12]
 801898c:	681b      	ldr	r3, [r3, #0]
 801898e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018990:	68fb      	ldr	r3, [r7, #12]
 8018992:	681b      	ldr	r3, [r3, #0]
 8018994:	2b00      	cmp	r3, #0
 8018996:	d011      	beq.n	80189bc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8018998:	68fb      	ldr	r3, [r7, #12]
 801899a:	681b      	ldr	r3, [r3, #0]
 801899c:	68db      	ldr	r3, [r3, #12]
 801899e:	685b      	ldr	r3, [r3, #4]
 80189a0:	4618      	mov	r0, r3
 80189a2:	f7f9 fbea 	bl	801217a <lwip_htonl>
 80189a6:	4604      	mov	r4, r0
 80189a8:	68bb      	ldr	r3, [r7, #8]
 80189aa:	68db      	ldr	r3, [r3, #12]
 80189ac:	685b      	ldr	r3, [r3, #4]
 80189ae:	4618      	mov	r0, r3
 80189b0:	f7f9 fbe3 	bl	801217a <lwip_htonl>
 80189b4:	4603      	mov	r3, r0
 80189b6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80189b8:	2b00      	cmp	r3, #0
 80189ba:	dbe6      	blt.n	801898a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80189bc:	68fb      	ldr	r3, [r7, #12]
 80189be:	681a      	ldr	r2, [r3, #0]
 80189c0:	68bb      	ldr	r3, [r7, #8]
 80189c2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80189c4:	68fb      	ldr	r3, [r7, #12]
 80189c6:	68ba      	ldr	r2, [r7, #8]
 80189c8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80189ca:	68bb      	ldr	r3, [r7, #8]
 80189cc:	681b      	ldr	r3, [r3, #0]
 80189ce:	2b00      	cmp	r3, #0
 80189d0:	d103      	bne.n	80189da <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	2200      	movs	r2, #0
 80189d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80189e0:	2bff      	cmp	r3, #255	; 0xff
 80189e2:	d007      	beq.n	80189f4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80189e4:	687b      	ldr	r3, [r7, #4]
 80189e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80189ea:	3301      	adds	r3, #1
 80189ec:	b2da      	uxtb	r2, r3
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	2200      	movs	r2, #0
 80189f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80189fa:	2300      	movs	r3, #0
}
 80189fc:	4618      	mov	r0, r3
 80189fe:	3714      	adds	r7, #20
 8018a00:	46bd      	mov	sp, r7
 8018a02:	bd90      	pop	{r4, r7, pc}
 8018a04:	08025d18 	.word	0x08025d18
 8018a08:	080263b8 	.word	0x080263b8
 8018a0c:	08025d6c 	.word	0x08025d6c

08018a10 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8018a10:	b580      	push	{r7, lr}
 8018a12:	b082      	sub	sp, #8
 8018a14:	af00      	add	r7, sp, #0
 8018a16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	d106      	bne.n	8018a2c <tcp_rexmit_fast+0x1c>
 8018a1e:	4b2a      	ldr	r3, [pc, #168]	; (8018ac8 <tcp_rexmit_fast+0xb8>)
 8018a20:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8018a24:	4929      	ldr	r1, [pc, #164]	; (8018acc <tcp_rexmit_fast+0xbc>)
 8018a26:	482a      	ldr	r0, [pc, #168]	; (8018ad0 <tcp_rexmit_fast+0xc0>)
 8018a28:	f005 fc56 	bl	801e2d8 <printf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8018a2c:	687b      	ldr	r3, [r7, #4]
 8018a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	d044      	beq.n	8018abe <tcp_rexmit_fast+0xae>
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	8b5b      	ldrh	r3, [r3, #26]
 8018a38:	f003 0304 	and.w	r3, r3, #4
 8018a3c:	2b00      	cmp	r3, #0
 8018a3e:	d13e      	bne.n	8018abe <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8018a40:	6878      	ldr	r0, [r7, #4]
 8018a42:	f7ff ff79 	bl	8018938 <tcp_rexmit>
 8018a46:	4603      	mov	r3, r0
 8018a48:	2b00      	cmp	r3, #0
 8018a4a:	d138      	bne.n	8018abe <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018a52:	687b      	ldr	r3, [r7, #4]
 8018a54:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018a58:	4293      	cmp	r3, r2
 8018a5a:	bf28      	it	cs
 8018a5c:	4613      	movcs	r3, r2
 8018a5e:	b29b      	uxth	r3, r3
 8018a60:	0fda      	lsrs	r2, r3, #31
 8018a62:	4413      	add	r3, r2
 8018a64:	105b      	asrs	r3, r3, #1
 8018a66:	b29a      	uxth	r2, r3
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8018a74:	461a      	mov	r2, r3
 8018a76:	687b      	ldr	r3, [r7, #4]
 8018a78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018a7a:	005b      	lsls	r3, r3, #1
 8018a7c:	429a      	cmp	r2, r3
 8018a7e:	d206      	bcs.n	8018a8e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018a84:	005b      	lsls	r3, r3, #1
 8018a86:	b29a      	uxth	r2, r3
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8018a8e:	687b      	ldr	r3, [r7, #4]
 8018a90:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018a98:	4619      	mov	r1, r3
 8018a9a:	0049      	lsls	r1, r1, #1
 8018a9c:	440b      	add	r3, r1
 8018a9e:	b29b      	uxth	r3, r3
 8018aa0:	4413      	add	r3, r2
 8018aa2:	b29a      	uxth	r2, r3
 8018aa4:	687b      	ldr	r3, [r7, #4]
 8018aa6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8018aaa:	687b      	ldr	r3, [r7, #4]
 8018aac:	8b5b      	ldrh	r3, [r3, #26]
 8018aae:	f043 0304 	orr.w	r3, r3, #4
 8018ab2:	b29a      	uxth	r2, r3
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8018ab8:	687b      	ldr	r3, [r7, #4]
 8018aba:	2200      	movs	r2, #0
 8018abc:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8018abe:	bf00      	nop
 8018ac0:	3708      	adds	r7, #8
 8018ac2:	46bd      	mov	sp, r7
 8018ac4:	bd80      	pop	{r7, pc}
 8018ac6:	bf00      	nop
 8018ac8:	08025d18 	.word	0x08025d18
 8018acc:	080263d0 	.word	0x080263d0
 8018ad0:	08025d6c 	.word	0x08025d6c

08018ad4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8018ad4:	b580      	push	{r7, lr}
 8018ad6:	b086      	sub	sp, #24
 8018ad8:	af00      	add	r7, sp, #0
 8018ada:	60f8      	str	r0, [r7, #12]
 8018adc:	607b      	str	r3, [r7, #4]
 8018ade:	460b      	mov	r3, r1
 8018ae0:	817b      	strh	r3, [r7, #10]
 8018ae2:	4613      	mov	r3, r2
 8018ae4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8018ae6:	897a      	ldrh	r2, [r7, #10]
 8018ae8:	893b      	ldrh	r3, [r7, #8]
 8018aea:	4413      	add	r3, r2
 8018aec:	b29b      	uxth	r3, r3
 8018aee:	3314      	adds	r3, #20
 8018af0:	b29b      	uxth	r3, r3
 8018af2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018af6:	4619      	mov	r1, r3
 8018af8:	2022      	movs	r0, #34	; 0x22
 8018afa:	f7fa fbfd 	bl	80132f8 <pbuf_alloc>
 8018afe:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8018b00:	697b      	ldr	r3, [r7, #20]
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	d04d      	beq.n	8018ba2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8018b06:	897b      	ldrh	r3, [r7, #10]
 8018b08:	3313      	adds	r3, #19
 8018b0a:	697a      	ldr	r2, [r7, #20]
 8018b0c:	8952      	ldrh	r2, [r2, #10]
 8018b0e:	4293      	cmp	r3, r2
 8018b10:	db06      	blt.n	8018b20 <tcp_output_alloc_header_common+0x4c>
 8018b12:	4b26      	ldr	r3, [pc, #152]	; (8018bac <tcp_output_alloc_header_common+0xd8>)
 8018b14:	f240 7223 	movw	r2, #1827	; 0x723
 8018b18:	4925      	ldr	r1, [pc, #148]	; (8018bb0 <tcp_output_alloc_header_common+0xdc>)
 8018b1a:	4826      	ldr	r0, [pc, #152]	; (8018bb4 <tcp_output_alloc_header_common+0xe0>)
 8018b1c:	f005 fbdc 	bl	801e2d8 <printf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8018b20:	697b      	ldr	r3, [r7, #20]
 8018b22:	685b      	ldr	r3, [r3, #4]
 8018b24:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8018b26:	8c3b      	ldrh	r3, [r7, #32]
 8018b28:	4618      	mov	r0, r3
 8018b2a:	f7f9 fb11 	bl	8012150 <lwip_htons>
 8018b2e:	4603      	mov	r3, r0
 8018b30:	461a      	mov	r2, r3
 8018b32:	693b      	ldr	r3, [r7, #16]
 8018b34:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8018b36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018b38:	4618      	mov	r0, r3
 8018b3a:	f7f9 fb09 	bl	8012150 <lwip_htons>
 8018b3e:	4603      	mov	r3, r0
 8018b40:	461a      	mov	r2, r3
 8018b42:	693b      	ldr	r3, [r7, #16]
 8018b44:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8018b46:	693b      	ldr	r3, [r7, #16]
 8018b48:	687a      	ldr	r2, [r7, #4]
 8018b4a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8018b4c:	68f8      	ldr	r0, [r7, #12]
 8018b4e:	f7f9 fb14 	bl	801217a <lwip_htonl>
 8018b52:	4602      	mov	r2, r0
 8018b54:	693b      	ldr	r3, [r7, #16]
 8018b56:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8018b58:	897b      	ldrh	r3, [r7, #10]
 8018b5a:	089b      	lsrs	r3, r3, #2
 8018b5c:	b29b      	uxth	r3, r3
 8018b5e:	3305      	adds	r3, #5
 8018b60:	b29b      	uxth	r3, r3
 8018b62:	031b      	lsls	r3, r3, #12
 8018b64:	b29a      	uxth	r2, r3
 8018b66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018b6a:	b29b      	uxth	r3, r3
 8018b6c:	4313      	orrs	r3, r2
 8018b6e:	b29b      	uxth	r3, r3
 8018b70:	4618      	mov	r0, r3
 8018b72:	f7f9 faed 	bl	8012150 <lwip_htons>
 8018b76:	4603      	mov	r3, r0
 8018b78:	461a      	mov	r2, r3
 8018b7a:	693b      	ldr	r3, [r7, #16]
 8018b7c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8018b7e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8018b80:	4618      	mov	r0, r3
 8018b82:	f7f9 fae5 	bl	8012150 <lwip_htons>
 8018b86:	4603      	mov	r3, r0
 8018b88:	461a      	mov	r2, r3
 8018b8a:	693b      	ldr	r3, [r7, #16]
 8018b8c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8018b8e:	693b      	ldr	r3, [r7, #16]
 8018b90:	2200      	movs	r2, #0
 8018b92:	741a      	strb	r2, [r3, #16]
 8018b94:	2200      	movs	r2, #0
 8018b96:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8018b98:	693b      	ldr	r3, [r7, #16]
 8018b9a:	2200      	movs	r2, #0
 8018b9c:	749a      	strb	r2, [r3, #18]
 8018b9e:	2200      	movs	r2, #0
 8018ba0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8018ba2:	697b      	ldr	r3, [r7, #20]
}
 8018ba4:	4618      	mov	r0, r3
 8018ba6:	3718      	adds	r7, #24
 8018ba8:	46bd      	mov	sp, r7
 8018baa:	bd80      	pop	{r7, pc}
 8018bac:	08025d18 	.word	0x08025d18
 8018bb0:	080263f0 	.word	0x080263f0
 8018bb4:	08025d6c 	.word	0x08025d6c

08018bb8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8018bb8:	b5b0      	push	{r4, r5, r7, lr}
 8018bba:	b08a      	sub	sp, #40	; 0x28
 8018bbc:	af04      	add	r7, sp, #16
 8018bbe:	60f8      	str	r0, [r7, #12]
 8018bc0:	607b      	str	r3, [r7, #4]
 8018bc2:	460b      	mov	r3, r1
 8018bc4:	817b      	strh	r3, [r7, #10]
 8018bc6:	4613      	mov	r3, r2
 8018bc8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8018bca:	68fb      	ldr	r3, [r7, #12]
 8018bcc:	2b00      	cmp	r3, #0
 8018bce:	d106      	bne.n	8018bde <tcp_output_alloc_header+0x26>
 8018bd0:	4b15      	ldr	r3, [pc, #84]	; (8018c28 <tcp_output_alloc_header+0x70>)
 8018bd2:	f240 7242 	movw	r2, #1858	; 0x742
 8018bd6:	4915      	ldr	r1, [pc, #84]	; (8018c2c <tcp_output_alloc_header+0x74>)
 8018bd8:	4815      	ldr	r0, [pc, #84]	; (8018c30 <tcp_output_alloc_header+0x78>)
 8018bda:	f005 fb7d 	bl	801e2d8 <printf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8018bde:	68fb      	ldr	r3, [r7, #12]
 8018be0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8018be2:	68fb      	ldr	r3, [r7, #12]
 8018be4:	8adb      	ldrh	r3, [r3, #22]
 8018be6:	68fa      	ldr	r2, [r7, #12]
 8018be8:	8b12      	ldrh	r2, [r2, #24]
 8018bea:	68f9      	ldr	r1, [r7, #12]
 8018bec:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8018bee:	893d      	ldrh	r5, [r7, #8]
 8018bf0:	897c      	ldrh	r4, [r7, #10]
 8018bf2:	9103      	str	r1, [sp, #12]
 8018bf4:	2110      	movs	r1, #16
 8018bf6:	9102      	str	r1, [sp, #8]
 8018bf8:	9201      	str	r2, [sp, #4]
 8018bfa:	9300      	str	r3, [sp, #0]
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	462a      	mov	r2, r5
 8018c00:	4621      	mov	r1, r4
 8018c02:	f7ff ff67 	bl	8018ad4 <tcp_output_alloc_header_common>
 8018c06:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8018c08:	697b      	ldr	r3, [r7, #20]
 8018c0a:	2b00      	cmp	r3, #0
 8018c0c:	d006      	beq.n	8018c1c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018c0e:	68fb      	ldr	r3, [r7, #12]
 8018c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c12:	68fa      	ldr	r2, [r7, #12]
 8018c14:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8018c16:	441a      	add	r2, r3
 8018c18:	68fb      	ldr	r3, [r7, #12]
 8018c1a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8018c1c:	697b      	ldr	r3, [r7, #20]
}
 8018c1e:	4618      	mov	r0, r3
 8018c20:	3718      	adds	r7, #24
 8018c22:	46bd      	mov	sp, r7
 8018c24:	bdb0      	pop	{r4, r5, r7, pc}
 8018c26:	bf00      	nop
 8018c28:	08025d18 	.word	0x08025d18
 8018c2c:	08026420 	.word	0x08026420
 8018c30:	08025d6c 	.word	0x08025d6c

08018c34 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8018c34:	b580      	push	{r7, lr}
 8018c36:	b088      	sub	sp, #32
 8018c38:	af00      	add	r7, sp, #0
 8018c3a:	60f8      	str	r0, [r7, #12]
 8018c3c:	60b9      	str	r1, [r7, #8]
 8018c3e:	4611      	mov	r1, r2
 8018c40:	461a      	mov	r2, r3
 8018c42:	460b      	mov	r3, r1
 8018c44:	71fb      	strb	r3, [r7, #7]
 8018c46:	4613      	mov	r3, r2
 8018c48:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8018c4a:	2300      	movs	r3, #0
 8018c4c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8018c4e:	68bb      	ldr	r3, [r7, #8]
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	d106      	bne.n	8018c62 <tcp_output_fill_options+0x2e>
 8018c54:	4b13      	ldr	r3, [pc, #76]	; (8018ca4 <tcp_output_fill_options+0x70>)
 8018c56:	f240 7256 	movw	r2, #1878	; 0x756
 8018c5a:	4913      	ldr	r1, [pc, #76]	; (8018ca8 <tcp_output_fill_options+0x74>)
 8018c5c:	4813      	ldr	r0, [pc, #76]	; (8018cac <tcp_output_fill_options+0x78>)
 8018c5e:	f005 fb3b 	bl	801e2d8 <printf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8018c62:	68bb      	ldr	r3, [r7, #8]
 8018c64:	685b      	ldr	r3, [r3, #4]
 8018c66:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8018c68:	69bb      	ldr	r3, [r7, #24]
 8018c6a:	3314      	adds	r3, #20
 8018c6c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8018c6e:	69bb      	ldr	r3, [r7, #24]
 8018c70:	f103 0214 	add.w	r2, r3, #20
 8018c74:	8bfb      	ldrh	r3, [r7, #30]
 8018c76:	009b      	lsls	r3, r3, #2
 8018c78:	4619      	mov	r1, r3
 8018c7a:	79fb      	ldrb	r3, [r7, #7]
 8018c7c:	009b      	lsls	r3, r3, #2
 8018c7e:	f003 0304 	and.w	r3, r3, #4
 8018c82:	440b      	add	r3, r1
 8018c84:	4413      	add	r3, r2
 8018c86:	697a      	ldr	r2, [r7, #20]
 8018c88:	429a      	cmp	r2, r3
 8018c8a:	d006      	beq.n	8018c9a <tcp_output_fill_options+0x66>
 8018c8c:	4b05      	ldr	r3, [pc, #20]	; (8018ca4 <tcp_output_fill_options+0x70>)
 8018c8e:	f240 7275 	movw	r2, #1909	; 0x775
 8018c92:	4907      	ldr	r1, [pc, #28]	; (8018cb0 <tcp_output_fill_options+0x7c>)
 8018c94:	4805      	ldr	r0, [pc, #20]	; (8018cac <tcp_output_fill_options+0x78>)
 8018c96:	f005 fb1f 	bl	801e2d8 <printf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8018c9a:	bf00      	nop
 8018c9c:	3720      	adds	r7, #32
 8018c9e:	46bd      	mov	sp, r7
 8018ca0:	bd80      	pop	{r7, pc}
 8018ca2:	bf00      	nop
 8018ca4:	08025d18 	.word	0x08025d18
 8018ca8:	08026448 	.word	0x08026448
 8018cac:	08025d6c 	.word	0x08025d6c
 8018cb0:	08026340 	.word	0x08026340

08018cb4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8018cb4:	b580      	push	{r7, lr}
 8018cb6:	b08a      	sub	sp, #40	; 0x28
 8018cb8:	af04      	add	r7, sp, #16
 8018cba:	60f8      	str	r0, [r7, #12]
 8018cbc:	60b9      	str	r1, [r7, #8]
 8018cbe:	607a      	str	r2, [r7, #4]
 8018cc0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8018cc2:	68bb      	ldr	r3, [r7, #8]
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	d106      	bne.n	8018cd6 <tcp_output_control_segment+0x22>
 8018cc8:	4b1c      	ldr	r3, [pc, #112]	; (8018d3c <tcp_output_control_segment+0x88>)
 8018cca:	f240 7287 	movw	r2, #1927	; 0x787
 8018cce:	491c      	ldr	r1, [pc, #112]	; (8018d40 <tcp_output_control_segment+0x8c>)
 8018cd0:	481c      	ldr	r0, [pc, #112]	; (8018d44 <tcp_output_control_segment+0x90>)
 8018cd2:	f005 fb01 	bl	801e2d8 <printf>

  netif = tcp_route(pcb, src, dst);
 8018cd6:	683a      	ldr	r2, [r7, #0]
 8018cd8:	6879      	ldr	r1, [r7, #4]
 8018cda:	68f8      	ldr	r0, [r7, #12]
 8018cdc:	f7fe ff40 	bl	8017b60 <tcp_route>
 8018ce0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8018ce2:	693b      	ldr	r3, [r7, #16]
 8018ce4:	2b00      	cmp	r3, #0
 8018ce6:	d102      	bne.n	8018cee <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8018ce8:	23fc      	movs	r3, #252	; 0xfc
 8018cea:	75fb      	strb	r3, [r7, #23]
 8018cec:	e01c      	b.n	8018d28 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8018cee:	68fb      	ldr	r3, [r7, #12]
 8018cf0:	2b00      	cmp	r3, #0
 8018cf2:	d006      	beq.n	8018d02 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8018cf4:	68fb      	ldr	r3, [r7, #12]
 8018cf6:	7adb      	ldrb	r3, [r3, #11]
 8018cf8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8018cfa:	68fb      	ldr	r3, [r7, #12]
 8018cfc:	7a9b      	ldrb	r3, [r3, #10]
 8018cfe:	757b      	strb	r3, [r7, #21]
 8018d00:	e003      	b.n	8018d0a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8018d02:	23ff      	movs	r3, #255	; 0xff
 8018d04:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8018d06:	2300      	movs	r3, #0
 8018d08:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8018d0a:	7dba      	ldrb	r2, [r7, #22]
 8018d0c:	693b      	ldr	r3, [r7, #16]
 8018d0e:	9302      	str	r3, [sp, #8]
 8018d10:	2306      	movs	r3, #6
 8018d12:	9301      	str	r3, [sp, #4]
 8018d14:	7d7b      	ldrb	r3, [r7, #21]
 8018d16:	9300      	str	r3, [sp, #0]
 8018d18:	4613      	mov	r3, r2
 8018d1a:	683a      	ldr	r2, [r7, #0]
 8018d1c:	6879      	ldr	r1, [r7, #4]
 8018d1e:	68b8      	ldr	r0, [r7, #8]
 8018d20:	f004 f956 	bl	801cfd0 <ip4_output_if>
 8018d24:	4603      	mov	r3, r0
 8018d26:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8018d28:	68b8      	ldr	r0, [r7, #8]
 8018d2a:	f7fa fdc9 	bl	80138c0 <pbuf_free>
  return err;
 8018d2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018d32:	4618      	mov	r0, r3
 8018d34:	3718      	adds	r7, #24
 8018d36:	46bd      	mov	sp, r7
 8018d38:	bd80      	pop	{r7, pc}
 8018d3a:	bf00      	nop
 8018d3c:	08025d18 	.word	0x08025d18
 8018d40:	08026470 	.word	0x08026470
 8018d44:	08025d6c 	.word	0x08025d6c

08018d48 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8018d48:	b590      	push	{r4, r7, lr}
 8018d4a:	b08b      	sub	sp, #44	; 0x2c
 8018d4c:	af04      	add	r7, sp, #16
 8018d4e:	60f8      	str	r0, [r7, #12]
 8018d50:	60b9      	str	r1, [r7, #8]
 8018d52:	607a      	str	r2, [r7, #4]
 8018d54:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8018d56:	683b      	ldr	r3, [r7, #0]
 8018d58:	2b00      	cmp	r3, #0
 8018d5a:	d106      	bne.n	8018d6a <tcp_rst+0x22>
 8018d5c:	4b1f      	ldr	r3, [pc, #124]	; (8018ddc <tcp_rst+0x94>)
 8018d5e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8018d62:	491f      	ldr	r1, [pc, #124]	; (8018de0 <tcp_rst+0x98>)
 8018d64:	481f      	ldr	r0, [pc, #124]	; (8018de4 <tcp_rst+0x9c>)
 8018d66:	f005 fab7 	bl	801e2d8 <printf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8018d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d6c:	2b00      	cmp	r3, #0
 8018d6e:	d106      	bne.n	8018d7e <tcp_rst+0x36>
 8018d70:	4b1a      	ldr	r3, [pc, #104]	; (8018ddc <tcp_rst+0x94>)
 8018d72:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8018d76:	491c      	ldr	r1, [pc, #112]	; (8018de8 <tcp_rst+0xa0>)
 8018d78:	481a      	ldr	r0, [pc, #104]	; (8018de4 <tcp_rst+0x9c>)
 8018d7a:	f005 faad 	bl	801e2d8 <printf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018d7e:	2300      	movs	r3, #0
 8018d80:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8018d82:	f246 0308 	movw	r3, #24584	; 0x6008
 8018d86:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8018d88:	7dfb      	ldrb	r3, [r7, #23]
 8018d8a:	b29c      	uxth	r4, r3
 8018d8c:	68b8      	ldr	r0, [r7, #8]
 8018d8e:	f7f9 f9f4 	bl	801217a <lwip_htonl>
 8018d92:	4602      	mov	r2, r0
 8018d94:	8abb      	ldrh	r3, [r7, #20]
 8018d96:	9303      	str	r3, [sp, #12]
 8018d98:	2314      	movs	r3, #20
 8018d9a:	9302      	str	r3, [sp, #8]
 8018d9c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8018d9e:	9301      	str	r3, [sp, #4]
 8018da0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8018da2:	9300      	str	r3, [sp, #0]
 8018da4:	4613      	mov	r3, r2
 8018da6:	2200      	movs	r2, #0
 8018da8:	4621      	mov	r1, r4
 8018daa:	6878      	ldr	r0, [r7, #4]
 8018dac:	f7ff fe92 	bl	8018ad4 <tcp_output_alloc_header_common>
 8018db0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8018db2:	693b      	ldr	r3, [r7, #16]
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	d00c      	beq.n	8018dd2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018db8:	7dfb      	ldrb	r3, [r7, #23]
 8018dba:	2200      	movs	r2, #0
 8018dbc:	6939      	ldr	r1, [r7, #16]
 8018dbe:	68f8      	ldr	r0, [r7, #12]
 8018dc0:	f7ff ff38 	bl	8018c34 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8018dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018dc6:	683a      	ldr	r2, [r7, #0]
 8018dc8:	6939      	ldr	r1, [r7, #16]
 8018dca:	68f8      	ldr	r0, [r7, #12]
 8018dcc:	f7ff ff72 	bl	8018cb4 <tcp_output_control_segment>
 8018dd0:	e000      	b.n	8018dd4 <tcp_rst+0x8c>
    return;
 8018dd2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8018dd4:	371c      	adds	r7, #28
 8018dd6:	46bd      	mov	sp, r7
 8018dd8:	bd90      	pop	{r4, r7, pc}
 8018dda:	bf00      	nop
 8018ddc:	08025d18 	.word	0x08025d18
 8018de0:	0802649c 	.word	0x0802649c
 8018de4:	08025d6c 	.word	0x08025d6c
 8018de8:	080264b8 	.word	0x080264b8

08018dec <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8018dec:	b590      	push	{r4, r7, lr}
 8018dee:	b087      	sub	sp, #28
 8018df0:	af00      	add	r7, sp, #0
 8018df2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8018df4:	2300      	movs	r3, #0
 8018df6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8018df8:	2300      	movs	r3, #0
 8018dfa:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	2b00      	cmp	r3, #0
 8018e00:	d106      	bne.n	8018e10 <tcp_send_empty_ack+0x24>
 8018e02:	4b28      	ldr	r3, [pc, #160]	; (8018ea4 <tcp_send_empty_ack+0xb8>)
 8018e04:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8018e08:	4927      	ldr	r1, [pc, #156]	; (8018ea8 <tcp_send_empty_ack+0xbc>)
 8018e0a:	4828      	ldr	r0, [pc, #160]	; (8018eac <tcp_send_empty_ack+0xc0>)
 8018e0c:	f005 fa64 	bl	801e2d8 <printf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018e10:	7dfb      	ldrb	r3, [r7, #23]
 8018e12:	009b      	lsls	r3, r3, #2
 8018e14:	b2db      	uxtb	r3, r3
 8018e16:	f003 0304 	and.w	r3, r3, #4
 8018e1a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8018e1c:	7d7b      	ldrb	r3, [r7, #21]
 8018e1e:	b29c      	uxth	r4, r3
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018e24:	4618      	mov	r0, r3
 8018e26:	f7f9 f9a8 	bl	801217a <lwip_htonl>
 8018e2a:	4603      	mov	r3, r0
 8018e2c:	2200      	movs	r2, #0
 8018e2e:	4621      	mov	r1, r4
 8018e30:	6878      	ldr	r0, [r7, #4]
 8018e32:	f7ff fec1 	bl	8018bb8 <tcp_output_alloc_header>
 8018e36:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018e38:	693b      	ldr	r3, [r7, #16]
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	d109      	bne.n	8018e52 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	8b5b      	ldrh	r3, [r3, #26]
 8018e42:	f043 0303 	orr.w	r3, r3, #3
 8018e46:	b29a      	uxth	r2, r3
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8018e4c:	f06f 0301 	mvn.w	r3, #1
 8018e50:	e023      	b.n	8018e9a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8018e52:	7dbb      	ldrb	r3, [r7, #22]
 8018e54:	7dfa      	ldrb	r2, [r7, #23]
 8018e56:	6939      	ldr	r1, [r7, #16]
 8018e58:	6878      	ldr	r0, [r7, #4]
 8018e5a:	f7ff feeb 	bl	8018c34 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8018e5e:	687a      	ldr	r2, [r7, #4]
 8018e60:	687b      	ldr	r3, [r7, #4]
 8018e62:	3304      	adds	r3, #4
 8018e64:	6939      	ldr	r1, [r7, #16]
 8018e66:	6878      	ldr	r0, [r7, #4]
 8018e68:	f7ff ff24 	bl	8018cb4 <tcp_output_control_segment>
 8018e6c:	4603      	mov	r3, r0
 8018e6e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8018e70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018e74:	2b00      	cmp	r3, #0
 8018e76:	d007      	beq.n	8018e88 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	8b5b      	ldrh	r3, [r3, #26]
 8018e7c:	f043 0303 	orr.w	r3, r3, #3
 8018e80:	b29a      	uxth	r2, r3
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	835a      	strh	r2, [r3, #26]
 8018e86:	e006      	b.n	8018e96 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	8b5b      	ldrh	r3, [r3, #26]
 8018e8c:	f023 0303 	bic.w	r3, r3, #3
 8018e90:	b29a      	uxth	r2, r3
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8018e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018e9a:	4618      	mov	r0, r3
 8018e9c:	371c      	adds	r7, #28
 8018e9e:	46bd      	mov	sp, r7
 8018ea0:	bd90      	pop	{r4, r7, pc}
 8018ea2:	bf00      	nop
 8018ea4:	08025d18 	.word	0x08025d18
 8018ea8:	080264d4 	.word	0x080264d4
 8018eac:	08025d6c 	.word	0x08025d6c

08018eb0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8018eb0:	b590      	push	{r4, r7, lr}
 8018eb2:	b087      	sub	sp, #28
 8018eb4:	af00      	add	r7, sp, #0
 8018eb6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018eb8:	2300      	movs	r3, #0
 8018eba:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	2b00      	cmp	r3, #0
 8018ec0:	d106      	bne.n	8018ed0 <tcp_keepalive+0x20>
 8018ec2:	4b18      	ldr	r3, [pc, #96]	; (8018f24 <tcp_keepalive+0x74>)
 8018ec4:	f640 0224 	movw	r2, #2084	; 0x824
 8018ec8:	4917      	ldr	r1, [pc, #92]	; (8018f28 <tcp_keepalive+0x78>)
 8018eca:	4818      	ldr	r0, [pc, #96]	; (8018f2c <tcp_keepalive+0x7c>)
 8018ecc:	f005 fa04 	bl	801e2d8 <printf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8018ed0:	7dfb      	ldrb	r3, [r7, #23]
 8018ed2:	b29c      	uxth	r4, r3
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018ed8:	3b01      	subs	r3, #1
 8018eda:	4618      	mov	r0, r3
 8018edc:	f7f9 f94d 	bl	801217a <lwip_htonl>
 8018ee0:	4603      	mov	r3, r0
 8018ee2:	2200      	movs	r2, #0
 8018ee4:	4621      	mov	r1, r4
 8018ee6:	6878      	ldr	r0, [r7, #4]
 8018ee8:	f7ff fe66 	bl	8018bb8 <tcp_output_alloc_header>
 8018eec:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018eee:	693b      	ldr	r3, [r7, #16]
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	d102      	bne.n	8018efa <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8018ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8018ef8:	e010      	b.n	8018f1c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018efa:	7dfb      	ldrb	r3, [r7, #23]
 8018efc:	2200      	movs	r2, #0
 8018efe:	6939      	ldr	r1, [r7, #16]
 8018f00:	6878      	ldr	r0, [r7, #4]
 8018f02:	f7ff fe97 	bl	8018c34 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8018f06:	687a      	ldr	r2, [r7, #4]
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	3304      	adds	r3, #4
 8018f0c:	6939      	ldr	r1, [r7, #16]
 8018f0e:	6878      	ldr	r0, [r7, #4]
 8018f10:	f7ff fed0 	bl	8018cb4 <tcp_output_control_segment>
 8018f14:	4603      	mov	r3, r0
 8018f16:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8018f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018f1c:	4618      	mov	r0, r3
 8018f1e:	371c      	adds	r7, #28
 8018f20:	46bd      	mov	sp, r7
 8018f22:	bd90      	pop	{r4, r7, pc}
 8018f24:	08025d18 	.word	0x08025d18
 8018f28:	080264f4 	.word	0x080264f4
 8018f2c:	08025d6c 	.word	0x08025d6c

08018f30 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8018f30:	b590      	push	{r4, r7, lr}
 8018f32:	b08b      	sub	sp, #44	; 0x2c
 8018f34:	af00      	add	r7, sp, #0
 8018f36:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018f38:	2300      	movs	r3, #0
 8018f3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	2b00      	cmp	r3, #0
 8018f42:	d106      	bne.n	8018f52 <tcp_zero_window_probe+0x22>
 8018f44:	4b4c      	ldr	r3, [pc, #304]	; (8019078 <tcp_zero_window_probe+0x148>)
 8018f46:	f640 024f 	movw	r2, #2127	; 0x84f
 8018f4a:	494c      	ldr	r1, [pc, #304]	; (801907c <tcp_zero_window_probe+0x14c>)
 8018f4c:	484c      	ldr	r0, [pc, #304]	; (8019080 <tcp_zero_window_probe+0x150>)
 8018f4e:	f005 f9c3 	bl	801e2d8 <printf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018f56:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8018f58:	6a3b      	ldr	r3, [r7, #32]
 8018f5a:	2b00      	cmp	r3, #0
 8018f5c:	d101      	bne.n	8018f62 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8018f5e:	2300      	movs	r3, #0
 8018f60:	e086      	b.n	8019070 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8018f68:	2bff      	cmp	r3, #255	; 0xff
 8018f6a:	d007      	beq.n	8018f7c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8018f6c:	687b      	ldr	r3, [r7, #4]
 8018f6e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8018f72:	3301      	adds	r3, #1
 8018f74:	b2da      	uxtb	r2, r3
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8018f7c:	6a3b      	ldr	r3, [r7, #32]
 8018f7e:	68db      	ldr	r3, [r3, #12]
 8018f80:	899b      	ldrh	r3, [r3, #12]
 8018f82:	b29b      	uxth	r3, r3
 8018f84:	4618      	mov	r0, r3
 8018f86:	f7f9 f8e3 	bl	8012150 <lwip_htons>
 8018f8a:	4603      	mov	r3, r0
 8018f8c:	b2db      	uxtb	r3, r3
 8018f8e:	f003 0301 	and.w	r3, r3, #1
 8018f92:	2b00      	cmp	r3, #0
 8018f94:	d005      	beq.n	8018fa2 <tcp_zero_window_probe+0x72>
 8018f96:	6a3b      	ldr	r3, [r7, #32]
 8018f98:	891b      	ldrh	r3, [r3, #8]
 8018f9a:	2b00      	cmp	r3, #0
 8018f9c:	d101      	bne.n	8018fa2 <tcp_zero_window_probe+0x72>
 8018f9e:	2301      	movs	r3, #1
 8018fa0:	e000      	b.n	8018fa4 <tcp_zero_window_probe+0x74>
 8018fa2:	2300      	movs	r3, #0
 8018fa4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8018fa6:	7ffb      	ldrb	r3, [r7, #31]
 8018fa8:	2b00      	cmp	r3, #0
 8018faa:	bf0c      	ite	eq
 8018fac:	2301      	moveq	r3, #1
 8018fae:	2300      	movne	r3, #0
 8018fb0:	b2db      	uxtb	r3, r3
 8018fb2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8018fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018fb8:	b299      	uxth	r1, r3
 8018fba:	6a3b      	ldr	r3, [r7, #32]
 8018fbc:	68db      	ldr	r3, [r3, #12]
 8018fbe:	685b      	ldr	r3, [r3, #4]
 8018fc0:	8bba      	ldrh	r2, [r7, #28]
 8018fc2:	6878      	ldr	r0, [r7, #4]
 8018fc4:	f7ff fdf8 	bl	8018bb8 <tcp_output_alloc_header>
 8018fc8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8018fca:	69bb      	ldr	r3, [r7, #24]
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	d102      	bne.n	8018fd6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8018fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8018fd4:	e04c      	b.n	8019070 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8018fd6:	69bb      	ldr	r3, [r7, #24]
 8018fd8:	685b      	ldr	r3, [r3, #4]
 8018fda:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8018fdc:	7ffb      	ldrb	r3, [r7, #31]
 8018fde:	2b00      	cmp	r3, #0
 8018fe0:	d011      	beq.n	8019006 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8018fe2:	697b      	ldr	r3, [r7, #20]
 8018fe4:	899b      	ldrh	r3, [r3, #12]
 8018fe6:	b29b      	uxth	r3, r3
 8018fe8:	b21b      	sxth	r3, r3
 8018fea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8018fee:	b21c      	sxth	r4, r3
 8018ff0:	2011      	movs	r0, #17
 8018ff2:	f7f9 f8ad 	bl	8012150 <lwip_htons>
 8018ff6:	4603      	mov	r3, r0
 8018ff8:	b21b      	sxth	r3, r3
 8018ffa:	4323      	orrs	r3, r4
 8018ffc:	b21b      	sxth	r3, r3
 8018ffe:	b29a      	uxth	r2, r3
 8019000:	697b      	ldr	r3, [r7, #20]
 8019002:	819a      	strh	r2, [r3, #12]
 8019004:	e010      	b.n	8019028 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8019006:	69bb      	ldr	r3, [r7, #24]
 8019008:	685b      	ldr	r3, [r3, #4]
 801900a:	3314      	adds	r3, #20
 801900c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801900e:	6a3b      	ldr	r3, [r7, #32]
 8019010:	6858      	ldr	r0, [r3, #4]
 8019012:	6a3b      	ldr	r3, [r7, #32]
 8019014:	685b      	ldr	r3, [r3, #4]
 8019016:	891a      	ldrh	r2, [r3, #8]
 8019018:	6a3b      	ldr	r3, [r7, #32]
 801901a:	891b      	ldrh	r3, [r3, #8]
 801901c:	1ad3      	subs	r3, r2, r3
 801901e:	b29b      	uxth	r3, r3
 8019020:	2201      	movs	r2, #1
 8019022:	6939      	ldr	r1, [r7, #16]
 8019024:	f7fa fe52 	bl	8013ccc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8019028:	6a3b      	ldr	r3, [r7, #32]
 801902a:	68db      	ldr	r3, [r3, #12]
 801902c:	685b      	ldr	r3, [r3, #4]
 801902e:	4618      	mov	r0, r3
 8019030:	f7f9 f8a3 	bl	801217a <lwip_htonl>
 8019034:	4603      	mov	r3, r0
 8019036:	3301      	adds	r3, #1
 8019038:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801903a:	687b      	ldr	r3, [r7, #4]
 801903c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801903e:	68fb      	ldr	r3, [r7, #12]
 8019040:	1ad3      	subs	r3, r2, r3
 8019042:	2b00      	cmp	r3, #0
 8019044:	da02      	bge.n	801904c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	68fa      	ldr	r2, [r7, #12]
 801904a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801904c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019050:	2200      	movs	r2, #0
 8019052:	69b9      	ldr	r1, [r7, #24]
 8019054:	6878      	ldr	r0, [r7, #4]
 8019056:	f7ff fded 	bl	8018c34 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801905a:	687a      	ldr	r2, [r7, #4]
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	3304      	adds	r3, #4
 8019060:	69b9      	ldr	r1, [r7, #24]
 8019062:	6878      	ldr	r0, [r7, #4]
 8019064:	f7ff fe26 	bl	8018cb4 <tcp_output_control_segment>
 8019068:	4603      	mov	r3, r0
 801906a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801906c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8019070:	4618      	mov	r0, r3
 8019072:	372c      	adds	r7, #44	; 0x2c
 8019074:	46bd      	mov	sp, r7
 8019076:	bd90      	pop	{r4, r7, pc}
 8019078:	08025d18 	.word	0x08025d18
 801907c:	08026510 	.word	0x08026510
 8019080:	08025d6c 	.word	0x08025d6c

08019084 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8019084:	b580      	push	{r7, lr}
 8019086:	b082      	sub	sp, #8
 8019088:	af00      	add	r7, sp, #0
 801908a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801908c:	f7fa ff0c 	bl	8013ea8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8019090:	4b0a      	ldr	r3, [pc, #40]	; (80190bc <tcpip_tcp_timer+0x38>)
 8019092:	681b      	ldr	r3, [r3, #0]
 8019094:	2b00      	cmp	r3, #0
 8019096:	d103      	bne.n	80190a0 <tcpip_tcp_timer+0x1c>
 8019098:	4b09      	ldr	r3, [pc, #36]	; (80190c0 <tcpip_tcp_timer+0x3c>)
 801909a:	681b      	ldr	r3, [r3, #0]
 801909c:	2b00      	cmp	r3, #0
 801909e:	d005      	beq.n	80190ac <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80190a0:	2200      	movs	r2, #0
 80190a2:	4908      	ldr	r1, [pc, #32]	; (80190c4 <tcpip_tcp_timer+0x40>)
 80190a4:	20fa      	movs	r0, #250	; 0xfa
 80190a6:	f000 f8f3 	bl	8019290 <sys_timeout>
 80190aa:	e003      	b.n	80190b4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80190ac:	4b06      	ldr	r3, [pc, #24]	; (80190c8 <tcpip_tcp_timer+0x44>)
 80190ae:	2200      	movs	r2, #0
 80190b0:	601a      	str	r2, [r3, #0]
  }
}
 80190b2:	bf00      	nop
 80190b4:	bf00      	nop
 80190b6:	3708      	adds	r7, #8
 80190b8:	46bd      	mov	sp, r7
 80190ba:	bd80      	pop	{r7, pc}
 80190bc:	2000c1c0 	.word	0x2000c1c0
 80190c0:	2000c1c4 	.word	0x2000c1c4
 80190c4:	08019085 	.word	0x08019085
 80190c8:	2000c20c 	.word	0x2000c20c

080190cc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80190cc:	b580      	push	{r7, lr}
 80190ce:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80190d0:	4b0a      	ldr	r3, [pc, #40]	; (80190fc <tcp_timer_needed+0x30>)
 80190d2:	681b      	ldr	r3, [r3, #0]
 80190d4:	2b00      	cmp	r3, #0
 80190d6:	d10f      	bne.n	80190f8 <tcp_timer_needed+0x2c>
 80190d8:	4b09      	ldr	r3, [pc, #36]	; (8019100 <tcp_timer_needed+0x34>)
 80190da:	681b      	ldr	r3, [r3, #0]
 80190dc:	2b00      	cmp	r3, #0
 80190de:	d103      	bne.n	80190e8 <tcp_timer_needed+0x1c>
 80190e0:	4b08      	ldr	r3, [pc, #32]	; (8019104 <tcp_timer_needed+0x38>)
 80190e2:	681b      	ldr	r3, [r3, #0]
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	d007      	beq.n	80190f8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80190e8:	4b04      	ldr	r3, [pc, #16]	; (80190fc <tcp_timer_needed+0x30>)
 80190ea:	2201      	movs	r2, #1
 80190ec:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80190ee:	2200      	movs	r2, #0
 80190f0:	4905      	ldr	r1, [pc, #20]	; (8019108 <tcp_timer_needed+0x3c>)
 80190f2:	20fa      	movs	r0, #250	; 0xfa
 80190f4:	f000 f8cc 	bl	8019290 <sys_timeout>
  }
}
 80190f8:	bf00      	nop
 80190fa:	bd80      	pop	{r7, pc}
 80190fc:	2000c20c 	.word	0x2000c20c
 8019100:	2000c1c0 	.word	0x2000c1c0
 8019104:	2000c1c4 	.word	0x2000c1c4
 8019108:	08019085 	.word	0x08019085

0801910c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801910c:	b580      	push	{r7, lr}
 801910e:	b086      	sub	sp, #24
 8019110:	af00      	add	r7, sp, #0
 8019112:	60f8      	str	r0, [r7, #12]
 8019114:	60b9      	str	r1, [r7, #8]
 8019116:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8019118:	200a      	movs	r0, #10
 801911a:	f7f9 fccf 	bl	8012abc <memp_malloc>
 801911e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8019120:	693b      	ldr	r3, [r7, #16]
 8019122:	2b00      	cmp	r3, #0
 8019124:	d109      	bne.n	801913a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8019126:	693b      	ldr	r3, [r7, #16]
 8019128:	2b00      	cmp	r3, #0
 801912a:	d151      	bne.n	80191d0 <sys_timeout_abs+0xc4>
 801912c:	4b2a      	ldr	r3, [pc, #168]	; (80191d8 <sys_timeout_abs+0xcc>)
 801912e:	22be      	movs	r2, #190	; 0xbe
 8019130:	492a      	ldr	r1, [pc, #168]	; (80191dc <sys_timeout_abs+0xd0>)
 8019132:	482b      	ldr	r0, [pc, #172]	; (80191e0 <sys_timeout_abs+0xd4>)
 8019134:	f005 f8d0 	bl	801e2d8 <printf>
    return;
 8019138:	e04a      	b.n	80191d0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801913a:	693b      	ldr	r3, [r7, #16]
 801913c:	2200      	movs	r2, #0
 801913e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8019140:	693b      	ldr	r3, [r7, #16]
 8019142:	68ba      	ldr	r2, [r7, #8]
 8019144:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8019146:	693b      	ldr	r3, [r7, #16]
 8019148:	687a      	ldr	r2, [r7, #4]
 801914a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801914c:	693b      	ldr	r3, [r7, #16]
 801914e:	68fa      	ldr	r2, [r7, #12]
 8019150:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8019152:	4b24      	ldr	r3, [pc, #144]	; (80191e4 <sys_timeout_abs+0xd8>)
 8019154:	681b      	ldr	r3, [r3, #0]
 8019156:	2b00      	cmp	r3, #0
 8019158:	d103      	bne.n	8019162 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801915a:	4a22      	ldr	r2, [pc, #136]	; (80191e4 <sys_timeout_abs+0xd8>)
 801915c:	693b      	ldr	r3, [r7, #16]
 801915e:	6013      	str	r3, [r2, #0]
    return;
 8019160:	e037      	b.n	80191d2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8019162:	693b      	ldr	r3, [r7, #16]
 8019164:	685a      	ldr	r2, [r3, #4]
 8019166:	4b1f      	ldr	r3, [pc, #124]	; (80191e4 <sys_timeout_abs+0xd8>)
 8019168:	681b      	ldr	r3, [r3, #0]
 801916a:	685b      	ldr	r3, [r3, #4]
 801916c:	1ad3      	subs	r3, r2, r3
 801916e:	0fdb      	lsrs	r3, r3, #31
 8019170:	f003 0301 	and.w	r3, r3, #1
 8019174:	b2db      	uxtb	r3, r3
 8019176:	2b00      	cmp	r3, #0
 8019178:	d007      	beq.n	801918a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801917a:	4b1a      	ldr	r3, [pc, #104]	; (80191e4 <sys_timeout_abs+0xd8>)
 801917c:	681a      	ldr	r2, [r3, #0]
 801917e:	693b      	ldr	r3, [r7, #16]
 8019180:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8019182:	4a18      	ldr	r2, [pc, #96]	; (80191e4 <sys_timeout_abs+0xd8>)
 8019184:	693b      	ldr	r3, [r7, #16]
 8019186:	6013      	str	r3, [r2, #0]
 8019188:	e023      	b.n	80191d2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801918a:	4b16      	ldr	r3, [pc, #88]	; (80191e4 <sys_timeout_abs+0xd8>)
 801918c:	681b      	ldr	r3, [r3, #0]
 801918e:	617b      	str	r3, [r7, #20]
 8019190:	e01a      	b.n	80191c8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8019192:	697b      	ldr	r3, [r7, #20]
 8019194:	681b      	ldr	r3, [r3, #0]
 8019196:	2b00      	cmp	r3, #0
 8019198:	d00b      	beq.n	80191b2 <sys_timeout_abs+0xa6>
 801919a:	693b      	ldr	r3, [r7, #16]
 801919c:	685a      	ldr	r2, [r3, #4]
 801919e:	697b      	ldr	r3, [r7, #20]
 80191a0:	681b      	ldr	r3, [r3, #0]
 80191a2:	685b      	ldr	r3, [r3, #4]
 80191a4:	1ad3      	subs	r3, r2, r3
 80191a6:	0fdb      	lsrs	r3, r3, #31
 80191a8:	f003 0301 	and.w	r3, r3, #1
 80191ac:	b2db      	uxtb	r3, r3
 80191ae:	2b00      	cmp	r3, #0
 80191b0:	d007      	beq.n	80191c2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80191b2:	697b      	ldr	r3, [r7, #20]
 80191b4:	681a      	ldr	r2, [r3, #0]
 80191b6:	693b      	ldr	r3, [r7, #16]
 80191b8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80191ba:	697b      	ldr	r3, [r7, #20]
 80191bc:	693a      	ldr	r2, [r7, #16]
 80191be:	601a      	str	r2, [r3, #0]
        break;
 80191c0:	e007      	b.n	80191d2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80191c2:	697b      	ldr	r3, [r7, #20]
 80191c4:	681b      	ldr	r3, [r3, #0]
 80191c6:	617b      	str	r3, [r7, #20]
 80191c8:	697b      	ldr	r3, [r7, #20]
 80191ca:	2b00      	cmp	r3, #0
 80191cc:	d1e1      	bne.n	8019192 <sys_timeout_abs+0x86>
 80191ce:	e000      	b.n	80191d2 <sys_timeout_abs+0xc6>
    return;
 80191d0:	bf00      	nop
      }
    }
  }
}
 80191d2:	3718      	adds	r7, #24
 80191d4:	46bd      	mov	sp, r7
 80191d6:	bd80      	pop	{r7, pc}
 80191d8:	08026534 	.word	0x08026534
 80191dc:	08026568 	.word	0x08026568
 80191e0:	080265a8 	.word	0x080265a8
 80191e4:	2000c204 	.word	0x2000c204

080191e8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80191e8:	b580      	push	{r7, lr}
 80191ea:	b086      	sub	sp, #24
 80191ec:	af00      	add	r7, sp, #0
 80191ee:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80191f0:	687b      	ldr	r3, [r7, #4]
 80191f2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80191f4:	697b      	ldr	r3, [r7, #20]
 80191f6:	685b      	ldr	r3, [r3, #4]
 80191f8:	4798      	blx	r3

  now = sys_now();
 80191fa:	f7f1 f8a3 	bl	800a344 <sys_now>
 80191fe:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8019200:	697b      	ldr	r3, [r7, #20]
 8019202:	681a      	ldr	r2, [r3, #0]
 8019204:	4b0f      	ldr	r3, [pc, #60]	; (8019244 <lwip_cyclic_timer+0x5c>)
 8019206:	681b      	ldr	r3, [r3, #0]
 8019208:	4413      	add	r3, r2
 801920a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801920c:	68fa      	ldr	r2, [r7, #12]
 801920e:	693b      	ldr	r3, [r7, #16]
 8019210:	1ad3      	subs	r3, r2, r3
 8019212:	0fdb      	lsrs	r3, r3, #31
 8019214:	f003 0301 	and.w	r3, r3, #1
 8019218:	b2db      	uxtb	r3, r3
 801921a:	2b00      	cmp	r3, #0
 801921c:	d009      	beq.n	8019232 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801921e:	697b      	ldr	r3, [r7, #20]
 8019220:	681a      	ldr	r2, [r3, #0]
 8019222:	693b      	ldr	r3, [r7, #16]
 8019224:	4413      	add	r3, r2
 8019226:	687a      	ldr	r2, [r7, #4]
 8019228:	4907      	ldr	r1, [pc, #28]	; (8019248 <lwip_cyclic_timer+0x60>)
 801922a:	4618      	mov	r0, r3
 801922c:	f7ff ff6e 	bl	801910c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8019230:	e004      	b.n	801923c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8019232:	687a      	ldr	r2, [r7, #4]
 8019234:	4904      	ldr	r1, [pc, #16]	; (8019248 <lwip_cyclic_timer+0x60>)
 8019236:	68f8      	ldr	r0, [r7, #12]
 8019238:	f7ff ff68 	bl	801910c <sys_timeout_abs>
}
 801923c:	bf00      	nop
 801923e:	3718      	adds	r7, #24
 8019240:	46bd      	mov	sp, r7
 8019242:	bd80      	pop	{r7, pc}
 8019244:	2000c208 	.word	0x2000c208
 8019248:	080191e9 	.word	0x080191e9

0801924c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801924c:	b580      	push	{r7, lr}
 801924e:	b082      	sub	sp, #8
 8019250:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019252:	2301      	movs	r3, #1
 8019254:	607b      	str	r3, [r7, #4]
 8019256:	e00e      	b.n	8019276 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8019258:	4a0b      	ldr	r2, [pc, #44]	; (8019288 <sys_timeouts_init+0x3c>)
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	00db      	lsls	r3, r3, #3
 8019264:	4a08      	ldr	r2, [pc, #32]	; (8019288 <sys_timeouts_init+0x3c>)
 8019266:	4413      	add	r3, r2
 8019268:	461a      	mov	r2, r3
 801926a:	4908      	ldr	r1, [pc, #32]	; (801928c <sys_timeouts_init+0x40>)
 801926c:	f000 f810 	bl	8019290 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019270:	687b      	ldr	r3, [r7, #4]
 8019272:	3301      	adds	r3, #1
 8019274:	607b      	str	r3, [r7, #4]
 8019276:	687b      	ldr	r3, [r7, #4]
 8019278:	2b04      	cmp	r3, #4
 801927a:	d9ed      	bls.n	8019258 <sys_timeouts_init+0xc>
  }
}
 801927c:	bf00      	nop
 801927e:	bf00      	nop
 8019280:	3708      	adds	r7, #8
 8019282:	46bd      	mov	sp, r7
 8019284:	bd80      	pop	{r7, pc}
 8019286:	bf00      	nop
 8019288:	0806f624 	.word	0x0806f624
 801928c:	080191e9 	.word	0x080191e9

08019290 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8019290:	b580      	push	{r7, lr}
 8019292:	b086      	sub	sp, #24
 8019294:	af00      	add	r7, sp, #0
 8019296:	60f8      	str	r0, [r7, #12]
 8019298:	60b9      	str	r1, [r7, #8]
 801929a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801929c:	68fb      	ldr	r3, [r7, #12]
 801929e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80192a2:	d306      	bcc.n	80192b2 <sys_timeout+0x22>
 80192a4:	4b0a      	ldr	r3, [pc, #40]	; (80192d0 <sys_timeout+0x40>)
 80192a6:	f240 1229 	movw	r2, #297	; 0x129
 80192aa:	490a      	ldr	r1, [pc, #40]	; (80192d4 <sys_timeout+0x44>)
 80192ac:	480a      	ldr	r0, [pc, #40]	; (80192d8 <sys_timeout+0x48>)
 80192ae:	f005 f813 	bl	801e2d8 <printf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80192b2:	f7f1 f847 	bl	800a344 <sys_now>
 80192b6:	4602      	mov	r2, r0
 80192b8:	68fb      	ldr	r3, [r7, #12]
 80192ba:	4413      	add	r3, r2
 80192bc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80192be:	687a      	ldr	r2, [r7, #4]
 80192c0:	68b9      	ldr	r1, [r7, #8]
 80192c2:	6978      	ldr	r0, [r7, #20]
 80192c4:	f7ff ff22 	bl	801910c <sys_timeout_abs>
#endif
}
 80192c8:	bf00      	nop
 80192ca:	3718      	adds	r7, #24
 80192cc:	46bd      	mov	sp, r7
 80192ce:	bd80      	pop	{r7, pc}
 80192d0:	08026534 	.word	0x08026534
 80192d4:	080265d0 	.word	0x080265d0
 80192d8:	080265a8 	.word	0x080265a8

080192dc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80192dc:	b580      	push	{r7, lr}
 80192de:	b084      	sub	sp, #16
 80192e0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80192e2:	f7f1 f82f 	bl	800a344 <sys_now>
 80192e6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80192e8:	4b17      	ldr	r3, [pc, #92]	; (8019348 <sys_check_timeouts+0x6c>)
 80192ea:	681b      	ldr	r3, [r3, #0]
 80192ec:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80192ee:	68bb      	ldr	r3, [r7, #8]
 80192f0:	2b00      	cmp	r3, #0
 80192f2:	d022      	beq.n	801933a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80192f4:	68bb      	ldr	r3, [r7, #8]
 80192f6:	685b      	ldr	r3, [r3, #4]
 80192f8:	68fa      	ldr	r2, [r7, #12]
 80192fa:	1ad3      	subs	r3, r2, r3
 80192fc:	0fdb      	lsrs	r3, r3, #31
 80192fe:	f003 0301 	and.w	r3, r3, #1
 8019302:	b2db      	uxtb	r3, r3
 8019304:	2b00      	cmp	r3, #0
 8019306:	d11a      	bne.n	801933e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8019308:	68bb      	ldr	r3, [r7, #8]
 801930a:	681b      	ldr	r3, [r3, #0]
 801930c:	4a0e      	ldr	r2, [pc, #56]	; (8019348 <sys_check_timeouts+0x6c>)
 801930e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8019310:	68bb      	ldr	r3, [r7, #8]
 8019312:	689b      	ldr	r3, [r3, #8]
 8019314:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8019316:	68bb      	ldr	r3, [r7, #8]
 8019318:	68db      	ldr	r3, [r3, #12]
 801931a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801931c:	68bb      	ldr	r3, [r7, #8]
 801931e:	685b      	ldr	r3, [r3, #4]
 8019320:	4a0a      	ldr	r2, [pc, #40]	; (801934c <sys_check_timeouts+0x70>)
 8019322:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8019324:	68b9      	ldr	r1, [r7, #8]
 8019326:	200a      	movs	r0, #10
 8019328:	f7f9 fc1a 	bl	8012b60 <memp_free>
    if (handler != NULL) {
 801932c:	687b      	ldr	r3, [r7, #4]
 801932e:	2b00      	cmp	r3, #0
 8019330:	d0da      	beq.n	80192e8 <sys_check_timeouts+0xc>
      handler(arg);
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	6838      	ldr	r0, [r7, #0]
 8019336:	4798      	blx	r3
  do {
 8019338:	e7d6      	b.n	80192e8 <sys_check_timeouts+0xc>
      return;
 801933a:	bf00      	nop
 801933c:	e000      	b.n	8019340 <sys_check_timeouts+0x64>
      return;
 801933e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8019340:	3710      	adds	r7, #16
 8019342:	46bd      	mov	sp, r7
 8019344:	bd80      	pop	{r7, pc}
 8019346:	bf00      	nop
 8019348:	2000c204 	.word	0x2000c204
 801934c:	2000c208 	.word	0x2000c208

08019350 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8019350:	b580      	push	{r7, lr}
 8019352:	b082      	sub	sp, #8
 8019354:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8019356:	4b16      	ldr	r3, [pc, #88]	; (80193b0 <sys_timeouts_sleeptime+0x60>)
 8019358:	681b      	ldr	r3, [r3, #0]
 801935a:	2b00      	cmp	r3, #0
 801935c:	d102      	bne.n	8019364 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801935e:	f04f 33ff 	mov.w	r3, #4294967295
 8019362:	e020      	b.n	80193a6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8019364:	f7f0 ffee 	bl	800a344 <sys_now>
 8019368:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801936a:	4b11      	ldr	r3, [pc, #68]	; (80193b0 <sys_timeouts_sleeptime+0x60>)
 801936c:	681b      	ldr	r3, [r3, #0]
 801936e:	685a      	ldr	r2, [r3, #4]
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	1ad3      	subs	r3, r2, r3
 8019374:	0fdb      	lsrs	r3, r3, #31
 8019376:	f003 0301 	and.w	r3, r3, #1
 801937a:	b2db      	uxtb	r3, r3
 801937c:	2b00      	cmp	r3, #0
 801937e:	d001      	beq.n	8019384 <sys_timeouts_sleeptime+0x34>
    return 0;
 8019380:	2300      	movs	r3, #0
 8019382:	e010      	b.n	80193a6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8019384:	4b0a      	ldr	r3, [pc, #40]	; (80193b0 <sys_timeouts_sleeptime+0x60>)
 8019386:	681b      	ldr	r3, [r3, #0]
 8019388:	685a      	ldr	r2, [r3, #4]
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	1ad3      	subs	r3, r2, r3
 801938e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8019390:	683b      	ldr	r3, [r7, #0]
 8019392:	2b00      	cmp	r3, #0
 8019394:	da06      	bge.n	80193a4 <sys_timeouts_sleeptime+0x54>
 8019396:	4b07      	ldr	r3, [pc, #28]	; (80193b4 <sys_timeouts_sleeptime+0x64>)
 8019398:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801939c:	4906      	ldr	r1, [pc, #24]	; (80193b8 <sys_timeouts_sleeptime+0x68>)
 801939e:	4807      	ldr	r0, [pc, #28]	; (80193bc <sys_timeouts_sleeptime+0x6c>)
 80193a0:	f004 ff9a 	bl	801e2d8 <printf>
    return ret;
 80193a4:	683b      	ldr	r3, [r7, #0]
  }
}
 80193a6:	4618      	mov	r0, r3
 80193a8:	3708      	adds	r7, #8
 80193aa:	46bd      	mov	sp, r7
 80193ac:	bd80      	pop	{r7, pc}
 80193ae:	bf00      	nop
 80193b0:	2000c204 	.word	0x2000c204
 80193b4:	08026534 	.word	0x08026534
 80193b8:	08026608 	.word	0x08026608
 80193bc:	080265a8 	.word	0x080265a8

080193c0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80193c0:	b580      	push	{r7, lr}
 80193c2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80193c4:	f004 ffe8 	bl	801e398 <rand>
 80193c8:	4603      	mov	r3, r0
 80193ca:	b29b      	uxth	r3, r3
 80193cc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80193d0:	b29b      	uxth	r3, r3
 80193d2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80193d6:	b29a      	uxth	r2, r3
 80193d8:	4b01      	ldr	r3, [pc, #4]	; (80193e0 <udp_init+0x20>)
 80193da:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80193dc:	bf00      	nop
 80193de:	bd80      	pop	{r7, pc}
 80193e0:	20000018 	.word	0x20000018

080193e4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80193e4:	b480      	push	{r7}
 80193e6:	b083      	sub	sp, #12
 80193e8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80193ea:	2300      	movs	r3, #0
 80193ec:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80193ee:	4b17      	ldr	r3, [pc, #92]	; (801944c <udp_new_port+0x68>)
 80193f0:	881b      	ldrh	r3, [r3, #0]
 80193f2:	1c5a      	adds	r2, r3, #1
 80193f4:	b291      	uxth	r1, r2
 80193f6:	4a15      	ldr	r2, [pc, #84]	; (801944c <udp_new_port+0x68>)
 80193f8:	8011      	strh	r1, [r2, #0]
 80193fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80193fe:	4293      	cmp	r3, r2
 8019400:	d103      	bne.n	801940a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8019402:	4b12      	ldr	r3, [pc, #72]	; (801944c <udp_new_port+0x68>)
 8019404:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8019408:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801940a:	4b11      	ldr	r3, [pc, #68]	; (8019450 <udp_new_port+0x6c>)
 801940c:	681b      	ldr	r3, [r3, #0]
 801940e:	603b      	str	r3, [r7, #0]
 8019410:	e011      	b.n	8019436 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8019412:	683b      	ldr	r3, [r7, #0]
 8019414:	8a5a      	ldrh	r2, [r3, #18]
 8019416:	4b0d      	ldr	r3, [pc, #52]	; (801944c <udp_new_port+0x68>)
 8019418:	881b      	ldrh	r3, [r3, #0]
 801941a:	429a      	cmp	r2, r3
 801941c:	d108      	bne.n	8019430 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801941e:	88fb      	ldrh	r3, [r7, #6]
 8019420:	3301      	adds	r3, #1
 8019422:	80fb      	strh	r3, [r7, #6]
 8019424:	88fb      	ldrh	r3, [r7, #6]
 8019426:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801942a:	d3e0      	bcc.n	80193ee <udp_new_port+0xa>
        return 0;
 801942c:	2300      	movs	r3, #0
 801942e:	e007      	b.n	8019440 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019430:	683b      	ldr	r3, [r7, #0]
 8019432:	68db      	ldr	r3, [r3, #12]
 8019434:	603b      	str	r3, [r7, #0]
 8019436:	683b      	ldr	r3, [r7, #0]
 8019438:	2b00      	cmp	r3, #0
 801943a:	d1ea      	bne.n	8019412 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801943c:	4b03      	ldr	r3, [pc, #12]	; (801944c <udp_new_port+0x68>)
 801943e:	881b      	ldrh	r3, [r3, #0]
}
 8019440:	4618      	mov	r0, r3
 8019442:	370c      	adds	r7, #12
 8019444:	46bd      	mov	sp, r7
 8019446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801944a:	4770      	bx	lr
 801944c:	20000018 	.word	0x20000018
 8019450:	2000c210 	.word	0x2000c210

08019454 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8019454:	b580      	push	{r7, lr}
 8019456:	b084      	sub	sp, #16
 8019458:	af00      	add	r7, sp, #0
 801945a:	60f8      	str	r0, [r7, #12]
 801945c:	60b9      	str	r1, [r7, #8]
 801945e:	4613      	mov	r3, r2
 8019460:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8019462:	68fb      	ldr	r3, [r7, #12]
 8019464:	2b00      	cmp	r3, #0
 8019466:	d105      	bne.n	8019474 <udp_input_local_match+0x20>
 8019468:	4b27      	ldr	r3, [pc, #156]	; (8019508 <udp_input_local_match+0xb4>)
 801946a:	2287      	movs	r2, #135	; 0x87
 801946c:	4927      	ldr	r1, [pc, #156]	; (801950c <udp_input_local_match+0xb8>)
 801946e:	4828      	ldr	r0, [pc, #160]	; (8019510 <udp_input_local_match+0xbc>)
 8019470:	f004 ff32 	bl	801e2d8 <printf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8019474:	68bb      	ldr	r3, [r7, #8]
 8019476:	2b00      	cmp	r3, #0
 8019478:	d105      	bne.n	8019486 <udp_input_local_match+0x32>
 801947a:	4b23      	ldr	r3, [pc, #140]	; (8019508 <udp_input_local_match+0xb4>)
 801947c:	2288      	movs	r2, #136	; 0x88
 801947e:	4925      	ldr	r1, [pc, #148]	; (8019514 <udp_input_local_match+0xc0>)
 8019480:	4823      	ldr	r0, [pc, #140]	; (8019510 <udp_input_local_match+0xbc>)
 8019482:	f004 ff29 	bl	801e2d8 <printf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019486:	68fb      	ldr	r3, [r7, #12]
 8019488:	7a1b      	ldrb	r3, [r3, #8]
 801948a:	2b00      	cmp	r3, #0
 801948c:	d00b      	beq.n	80194a6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801948e:	68fb      	ldr	r3, [r7, #12]
 8019490:	7a1a      	ldrb	r2, [r3, #8]
 8019492:	4b21      	ldr	r3, [pc, #132]	; (8019518 <udp_input_local_match+0xc4>)
 8019494:	685b      	ldr	r3, [r3, #4]
 8019496:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801949a:	3301      	adds	r3, #1
 801949c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801949e:	429a      	cmp	r2, r3
 80194a0:	d001      	beq.n	80194a6 <udp_input_local_match+0x52>
    return 0;
 80194a2:	2300      	movs	r3, #0
 80194a4:	e02b      	b.n	80194fe <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80194a6:	79fb      	ldrb	r3, [r7, #7]
 80194a8:	2b00      	cmp	r3, #0
 80194aa:	d018      	beq.n	80194de <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80194ac:	68fb      	ldr	r3, [r7, #12]
 80194ae:	2b00      	cmp	r3, #0
 80194b0:	d013      	beq.n	80194da <udp_input_local_match+0x86>
 80194b2:	68fb      	ldr	r3, [r7, #12]
 80194b4:	681b      	ldr	r3, [r3, #0]
 80194b6:	2b00      	cmp	r3, #0
 80194b8:	d00f      	beq.n	80194da <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80194ba:	4b17      	ldr	r3, [pc, #92]	; (8019518 <udp_input_local_match+0xc4>)
 80194bc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80194be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80194c2:	d00a      	beq.n	80194da <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80194c4:	68fb      	ldr	r3, [r7, #12]
 80194c6:	681a      	ldr	r2, [r3, #0]
 80194c8:	4b13      	ldr	r3, [pc, #76]	; (8019518 <udp_input_local_match+0xc4>)
 80194ca:	695b      	ldr	r3, [r3, #20]
 80194cc:	405a      	eors	r2, r3
 80194ce:	68bb      	ldr	r3, [r7, #8]
 80194d0:	3308      	adds	r3, #8
 80194d2:	681b      	ldr	r3, [r3, #0]
 80194d4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80194d6:	2b00      	cmp	r3, #0
 80194d8:	d110      	bne.n	80194fc <udp_input_local_match+0xa8>
          return 1;
 80194da:	2301      	movs	r3, #1
 80194dc:	e00f      	b.n	80194fe <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80194de:	68fb      	ldr	r3, [r7, #12]
 80194e0:	2b00      	cmp	r3, #0
 80194e2:	d009      	beq.n	80194f8 <udp_input_local_match+0xa4>
 80194e4:	68fb      	ldr	r3, [r7, #12]
 80194e6:	681b      	ldr	r3, [r3, #0]
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d005      	beq.n	80194f8 <udp_input_local_match+0xa4>
 80194ec:	68fb      	ldr	r3, [r7, #12]
 80194ee:	681a      	ldr	r2, [r3, #0]
 80194f0:	4b09      	ldr	r3, [pc, #36]	; (8019518 <udp_input_local_match+0xc4>)
 80194f2:	695b      	ldr	r3, [r3, #20]
 80194f4:	429a      	cmp	r2, r3
 80194f6:	d101      	bne.n	80194fc <udp_input_local_match+0xa8>
        return 1;
 80194f8:	2301      	movs	r3, #1
 80194fa:	e000      	b.n	80194fe <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80194fc:	2300      	movs	r3, #0
}
 80194fe:	4618      	mov	r0, r3
 8019500:	3710      	adds	r7, #16
 8019502:	46bd      	mov	sp, r7
 8019504:	bd80      	pop	{r7, pc}
 8019506:	bf00      	nop
 8019508:	0802661c 	.word	0x0802661c
 801950c:	0802664c 	.word	0x0802664c
 8019510:	08026670 	.word	0x08026670
 8019514:	08026698 	.word	0x08026698
 8019518:	20008a40 	.word	0x20008a40

0801951c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801951c:	b590      	push	{r4, r7, lr}
 801951e:	b08d      	sub	sp, #52	; 0x34
 8019520:	af02      	add	r7, sp, #8
 8019522:	6078      	str	r0, [r7, #4]
 8019524:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8019526:	2300      	movs	r3, #0
 8019528:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801952a:	687b      	ldr	r3, [r7, #4]
 801952c:	2b00      	cmp	r3, #0
 801952e:	d105      	bne.n	801953c <udp_input+0x20>
 8019530:	4b7c      	ldr	r3, [pc, #496]	; (8019724 <udp_input+0x208>)
 8019532:	22cf      	movs	r2, #207	; 0xcf
 8019534:	497c      	ldr	r1, [pc, #496]	; (8019728 <udp_input+0x20c>)
 8019536:	487d      	ldr	r0, [pc, #500]	; (801972c <udp_input+0x210>)
 8019538:	f004 fece 	bl	801e2d8 <printf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801953c:	683b      	ldr	r3, [r7, #0]
 801953e:	2b00      	cmp	r3, #0
 8019540:	d105      	bne.n	801954e <udp_input+0x32>
 8019542:	4b78      	ldr	r3, [pc, #480]	; (8019724 <udp_input+0x208>)
 8019544:	22d0      	movs	r2, #208	; 0xd0
 8019546:	497a      	ldr	r1, [pc, #488]	; (8019730 <udp_input+0x214>)
 8019548:	4878      	ldr	r0, [pc, #480]	; (801972c <udp_input+0x210>)
 801954a:	f004 fec5 	bl	801e2d8 <printf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801954e:	687b      	ldr	r3, [r7, #4]
 8019550:	895b      	ldrh	r3, [r3, #10]
 8019552:	2b07      	cmp	r3, #7
 8019554:	d803      	bhi.n	801955e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8019556:	6878      	ldr	r0, [r7, #4]
 8019558:	f7fa f9b2 	bl	80138c0 <pbuf_free>
    goto end;
 801955c:	e0de      	b.n	801971c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801955e:	687b      	ldr	r3, [r7, #4]
 8019560:	685b      	ldr	r3, [r3, #4]
 8019562:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8019564:	4b73      	ldr	r3, [pc, #460]	; (8019734 <udp_input+0x218>)
 8019566:	695b      	ldr	r3, [r3, #20]
 8019568:	4a72      	ldr	r2, [pc, #456]	; (8019734 <udp_input+0x218>)
 801956a:	6812      	ldr	r2, [r2, #0]
 801956c:	4611      	mov	r1, r2
 801956e:	4618      	mov	r0, r3
 8019570:	f003 fe06 	bl	801d180 <ip4_addr_isbroadcast_u32>
 8019574:	4603      	mov	r3, r0
 8019576:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8019578:	697b      	ldr	r3, [r7, #20]
 801957a:	881b      	ldrh	r3, [r3, #0]
 801957c:	b29b      	uxth	r3, r3
 801957e:	4618      	mov	r0, r3
 8019580:	f7f8 fde6 	bl	8012150 <lwip_htons>
 8019584:	4603      	mov	r3, r0
 8019586:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8019588:	697b      	ldr	r3, [r7, #20]
 801958a:	885b      	ldrh	r3, [r3, #2]
 801958c:	b29b      	uxth	r3, r3
 801958e:	4618      	mov	r0, r3
 8019590:	f7f8 fdde 	bl	8012150 <lwip_htons>
 8019594:	4603      	mov	r3, r0
 8019596:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8019598:	2300      	movs	r3, #0
 801959a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801959c:	2300      	movs	r3, #0
 801959e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80195a0:	2300      	movs	r3, #0
 80195a2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80195a4:	4b64      	ldr	r3, [pc, #400]	; (8019738 <udp_input+0x21c>)
 80195a6:	681b      	ldr	r3, [r3, #0]
 80195a8:	627b      	str	r3, [r7, #36]	; 0x24
 80195aa:	e054      	b.n	8019656 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80195ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195ae:	8a5b      	ldrh	r3, [r3, #18]
 80195b0:	89fa      	ldrh	r2, [r7, #14]
 80195b2:	429a      	cmp	r2, r3
 80195b4:	d14a      	bne.n	801964c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80195b6:	7cfb      	ldrb	r3, [r7, #19]
 80195b8:	461a      	mov	r2, r3
 80195ba:	6839      	ldr	r1, [r7, #0]
 80195bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80195be:	f7ff ff49 	bl	8019454 <udp_input_local_match>
 80195c2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80195c4:	2b00      	cmp	r3, #0
 80195c6:	d041      	beq.n	801964c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80195c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195ca:	7c1b      	ldrb	r3, [r3, #16]
 80195cc:	f003 0304 	and.w	r3, r3, #4
 80195d0:	2b00      	cmp	r3, #0
 80195d2:	d11d      	bne.n	8019610 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80195d4:	69fb      	ldr	r3, [r7, #28]
 80195d6:	2b00      	cmp	r3, #0
 80195d8:	d102      	bne.n	80195e0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80195da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195dc:	61fb      	str	r3, [r7, #28]
 80195de:	e017      	b.n	8019610 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80195e0:	7cfb      	ldrb	r3, [r7, #19]
 80195e2:	2b00      	cmp	r3, #0
 80195e4:	d014      	beq.n	8019610 <udp_input+0xf4>
 80195e6:	4b53      	ldr	r3, [pc, #332]	; (8019734 <udp_input+0x218>)
 80195e8:	695b      	ldr	r3, [r3, #20]
 80195ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80195ee:	d10f      	bne.n	8019610 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80195f0:	69fb      	ldr	r3, [r7, #28]
 80195f2:	681a      	ldr	r2, [r3, #0]
 80195f4:	683b      	ldr	r3, [r7, #0]
 80195f6:	3304      	adds	r3, #4
 80195f8:	681b      	ldr	r3, [r3, #0]
 80195fa:	429a      	cmp	r2, r3
 80195fc:	d008      	beq.n	8019610 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80195fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019600:	681a      	ldr	r2, [r3, #0]
 8019602:	683b      	ldr	r3, [r7, #0]
 8019604:	3304      	adds	r3, #4
 8019606:	681b      	ldr	r3, [r3, #0]
 8019608:	429a      	cmp	r2, r3
 801960a:	d101      	bne.n	8019610 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801960c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801960e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8019610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019612:	8a9b      	ldrh	r3, [r3, #20]
 8019614:	8a3a      	ldrh	r2, [r7, #16]
 8019616:	429a      	cmp	r2, r3
 8019618:	d118      	bne.n	801964c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801961a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801961c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801961e:	2b00      	cmp	r3, #0
 8019620:	d005      	beq.n	801962e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8019622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019624:	685a      	ldr	r2, [r3, #4]
 8019626:	4b43      	ldr	r3, [pc, #268]	; (8019734 <udp_input+0x218>)
 8019628:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801962a:	429a      	cmp	r2, r3
 801962c:	d10e      	bne.n	801964c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801962e:	6a3b      	ldr	r3, [r7, #32]
 8019630:	2b00      	cmp	r3, #0
 8019632:	d014      	beq.n	801965e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8019634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019636:	68da      	ldr	r2, [r3, #12]
 8019638:	6a3b      	ldr	r3, [r7, #32]
 801963a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801963c:	4b3e      	ldr	r3, [pc, #248]	; (8019738 <udp_input+0x21c>)
 801963e:	681a      	ldr	r2, [r3, #0]
 8019640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019642:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8019644:	4a3c      	ldr	r2, [pc, #240]	; (8019738 <udp_input+0x21c>)
 8019646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019648:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801964a:	e008      	b.n	801965e <udp_input+0x142>
      }
    }

    prev = pcb;
 801964c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801964e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019652:	68db      	ldr	r3, [r3, #12]
 8019654:	627b      	str	r3, [r7, #36]	; 0x24
 8019656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019658:	2b00      	cmp	r3, #0
 801965a:	d1a7      	bne.n	80195ac <udp_input+0x90>
 801965c:	e000      	b.n	8019660 <udp_input+0x144>
        break;
 801965e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8019660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019662:	2b00      	cmp	r3, #0
 8019664:	d101      	bne.n	801966a <udp_input+0x14e>
    pcb = uncon_pcb;
 8019666:	69fb      	ldr	r3, [r7, #28]
 8019668:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801966a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801966c:	2b00      	cmp	r3, #0
 801966e:	d002      	beq.n	8019676 <udp_input+0x15a>
    for_us = 1;
 8019670:	2301      	movs	r3, #1
 8019672:	76fb      	strb	r3, [r7, #27]
 8019674:	e00a      	b.n	801968c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8019676:	683b      	ldr	r3, [r7, #0]
 8019678:	3304      	adds	r3, #4
 801967a:	681a      	ldr	r2, [r3, #0]
 801967c:	4b2d      	ldr	r3, [pc, #180]	; (8019734 <udp_input+0x218>)
 801967e:	695b      	ldr	r3, [r3, #20]
 8019680:	429a      	cmp	r2, r3
 8019682:	bf0c      	ite	eq
 8019684:	2301      	moveq	r3, #1
 8019686:	2300      	movne	r3, #0
 8019688:	b2db      	uxtb	r3, r3
 801968a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801968c:	7efb      	ldrb	r3, [r7, #27]
 801968e:	2b00      	cmp	r3, #0
 8019690:	d041      	beq.n	8019716 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8019692:	2108      	movs	r1, #8
 8019694:	6878      	ldr	r0, [r7, #4]
 8019696:	f7fa f88d 	bl	80137b4 <pbuf_remove_header>
 801969a:	4603      	mov	r3, r0
 801969c:	2b00      	cmp	r3, #0
 801969e:	d00a      	beq.n	80196b6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80196a0:	4b20      	ldr	r3, [pc, #128]	; (8019724 <udp_input+0x208>)
 80196a2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80196a6:	4925      	ldr	r1, [pc, #148]	; (801973c <udp_input+0x220>)
 80196a8:	4820      	ldr	r0, [pc, #128]	; (801972c <udp_input+0x210>)
 80196aa:	f004 fe15 	bl	801e2d8 <printf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80196ae:	6878      	ldr	r0, [r7, #4]
 80196b0:	f7fa f906 	bl	80138c0 <pbuf_free>
      goto end;
 80196b4:	e032      	b.n	801971c <udp_input+0x200>
    }

    if (pcb != NULL) {
 80196b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196b8:	2b00      	cmp	r3, #0
 80196ba:	d012      	beq.n	80196e2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80196bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196be:	699b      	ldr	r3, [r3, #24]
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d00a      	beq.n	80196da <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80196c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196c6:	699c      	ldr	r4, [r3, #24]
 80196c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196ca:	69d8      	ldr	r0, [r3, #28]
 80196cc:	8a3b      	ldrh	r3, [r7, #16]
 80196ce:	9300      	str	r3, [sp, #0]
 80196d0:	4b1b      	ldr	r3, [pc, #108]	; (8019740 <udp_input+0x224>)
 80196d2:	687a      	ldr	r2, [r7, #4]
 80196d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80196d6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80196d8:	e021      	b.n	801971e <udp_input+0x202>
        pbuf_free(p);
 80196da:	6878      	ldr	r0, [r7, #4]
 80196dc:	f7fa f8f0 	bl	80138c0 <pbuf_free>
        goto end;
 80196e0:	e01c      	b.n	801971c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80196e2:	7cfb      	ldrb	r3, [r7, #19]
 80196e4:	2b00      	cmp	r3, #0
 80196e6:	d112      	bne.n	801970e <udp_input+0x1f2>
 80196e8:	4b12      	ldr	r3, [pc, #72]	; (8019734 <udp_input+0x218>)
 80196ea:	695b      	ldr	r3, [r3, #20]
 80196ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80196f0:	2be0      	cmp	r3, #224	; 0xe0
 80196f2:	d00c      	beq.n	801970e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80196f4:	4b0f      	ldr	r3, [pc, #60]	; (8019734 <udp_input+0x218>)
 80196f6:	899b      	ldrh	r3, [r3, #12]
 80196f8:	3308      	adds	r3, #8
 80196fa:	b29b      	uxth	r3, r3
 80196fc:	b21b      	sxth	r3, r3
 80196fe:	4619      	mov	r1, r3
 8019700:	6878      	ldr	r0, [r7, #4]
 8019702:	f7fa f8ca 	bl	801389a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8019706:	2103      	movs	r1, #3
 8019708:	6878      	ldr	r0, [r7, #4]
 801970a:	f003 f9fb 	bl	801cb04 <icmp_dest_unreach>
      pbuf_free(p);
 801970e:	6878      	ldr	r0, [r7, #4]
 8019710:	f7fa f8d6 	bl	80138c0 <pbuf_free>
  return;
 8019714:	e003      	b.n	801971e <udp_input+0x202>
    pbuf_free(p);
 8019716:	6878      	ldr	r0, [r7, #4]
 8019718:	f7fa f8d2 	bl	80138c0 <pbuf_free>
  return;
 801971c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801971e:	372c      	adds	r7, #44	; 0x2c
 8019720:	46bd      	mov	sp, r7
 8019722:	bd90      	pop	{r4, r7, pc}
 8019724:	0802661c 	.word	0x0802661c
 8019728:	080266c0 	.word	0x080266c0
 801972c:	08026670 	.word	0x08026670
 8019730:	080266d8 	.word	0x080266d8
 8019734:	20008a40 	.word	0x20008a40
 8019738:	2000c210 	.word	0x2000c210
 801973c:	080266f4 	.word	0x080266f4
 8019740:	20008a50 	.word	0x20008a50

08019744 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8019744:	b580      	push	{r7, lr}
 8019746:	b088      	sub	sp, #32
 8019748:	af02      	add	r7, sp, #8
 801974a:	60f8      	str	r0, [r7, #12]
 801974c:	60b9      	str	r1, [r7, #8]
 801974e:	607a      	str	r2, [r7, #4]
 8019750:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8019752:	68fb      	ldr	r3, [r7, #12]
 8019754:	2b00      	cmp	r3, #0
 8019756:	d109      	bne.n	801976c <udp_sendto_if+0x28>
 8019758:	4b2e      	ldr	r3, [pc, #184]	; (8019814 <udp_sendto_if+0xd0>)
 801975a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801975e:	492e      	ldr	r1, [pc, #184]	; (8019818 <udp_sendto_if+0xd4>)
 8019760:	482e      	ldr	r0, [pc, #184]	; (801981c <udp_sendto_if+0xd8>)
 8019762:	f004 fdb9 	bl	801e2d8 <printf>
 8019766:	f06f 030f 	mvn.w	r3, #15
 801976a:	e04f      	b.n	801980c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801976c:	68bb      	ldr	r3, [r7, #8]
 801976e:	2b00      	cmp	r3, #0
 8019770:	d109      	bne.n	8019786 <udp_sendto_if+0x42>
 8019772:	4b28      	ldr	r3, [pc, #160]	; (8019814 <udp_sendto_if+0xd0>)
 8019774:	f240 2281 	movw	r2, #641	; 0x281
 8019778:	4929      	ldr	r1, [pc, #164]	; (8019820 <udp_sendto_if+0xdc>)
 801977a:	4828      	ldr	r0, [pc, #160]	; (801981c <udp_sendto_if+0xd8>)
 801977c:	f004 fdac 	bl	801e2d8 <printf>
 8019780:	f06f 030f 	mvn.w	r3, #15
 8019784:	e042      	b.n	801980c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8019786:	687b      	ldr	r3, [r7, #4]
 8019788:	2b00      	cmp	r3, #0
 801978a:	d109      	bne.n	80197a0 <udp_sendto_if+0x5c>
 801978c:	4b21      	ldr	r3, [pc, #132]	; (8019814 <udp_sendto_if+0xd0>)
 801978e:	f240 2282 	movw	r2, #642	; 0x282
 8019792:	4924      	ldr	r1, [pc, #144]	; (8019824 <udp_sendto_if+0xe0>)
 8019794:	4821      	ldr	r0, [pc, #132]	; (801981c <udp_sendto_if+0xd8>)
 8019796:	f004 fd9f 	bl	801e2d8 <printf>
 801979a:	f06f 030f 	mvn.w	r3, #15
 801979e:	e035      	b.n	801980c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80197a0:	6a3b      	ldr	r3, [r7, #32]
 80197a2:	2b00      	cmp	r3, #0
 80197a4:	d109      	bne.n	80197ba <udp_sendto_if+0x76>
 80197a6:	4b1b      	ldr	r3, [pc, #108]	; (8019814 <udp_sendto_if+0xd0>)
 80197a8:	f240 2283 	movw	r2, #643	; 0x283
 80197ac:	491e      	ldr	r1, [pc, #120]	; (8019828 <udp_sendto_if+0xe4>)
 80197ae:	481b      	ldr	r0, [pc, #108]	; (801981c <udp_sendto_if+0xd8>)
 80197b0:	f004 fd92 	bl	801e2d8 <printf>
 80197b4:	f06f 030f 	mvn.w	r3, #15
 80197b8:	e028      	b.n	801980c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80197ba:	68fb      	ldr	r3, [r7, #12]
 80197bc:	2b00      	cmp	r3, #0
 80197be:	d009      	beq.n	80197d4 <udp_sendto_if+0x90>
 80197c0:	68fb      	ldr	r3, [r7, #12]
 80197c2:	681b      	ldr	r3, [r3, #0]
 80197c4:	2b00      	cmp	r3, #0
 80197c6:	d005      	beq.n	80197d4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80197c8:	68fb      	ldr	r3, [r7, #12]
 80197ca:	681b      	ldr	r3, [r3, #0]
 80197cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80197d0:	2be0      	cmp	r3, #224	; 0xe0
 80197d2:	d103      	bne.n	80197dc <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80197d4:	6a3b      	ldr	r3, [r7, #32]
 80197d6:	3304      	adds	r3, #4
 80197d8:	617b      	str	r3, [r7, #20]
 80197da:	e00b      	b.n	80197f4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80197dc:	68fb      	ldr	r3, [r7, #12]
 80197de:	681a      	ldr	r2, [r3, #0]
 80197e0:	6a3b      	ldr	r3, [r7, #32]
 80197e2:	3304      	adds	r3, #4
 80197e4:	681b      	ldr	r3, [r3, #0]
 80197e6:	429a      	cmp	r2, r3
 80197e8:	d002      	beq.n	80197f0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80197ea:	f06f 0303 	mvn.w	r3, #3
 80197ee:	e00d      	b.n	801980c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80197f0:	68fb      	ldr	r3, [r7, #12]
 80197f2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80197f4:	887a      	ldrh	r2, [r7, #2]
 80197f6:	697b      	ldr	r3, [r7, #20]
 80197f8:	9301      	str	r3, [sp, #4]
 80197fa:	6a3b      	ldr	r3, [r7, #32]
 80197fc:	9300      	str	r3, [sp, #0]
 80197fe:	4613      	mov	r3, r2
 8019800:	687a      	ldr	r2, [r7, #4]
 8019802:	68b9      	ldr	r1, [r7, #8]
 8019804:	68f8      	ldr	r0, [r7, #12]
 8019806:	f000 f811 	bl	801982c <udp_sendto_if_src>
 801980a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801980c:	4618      	mov	r0, r3
 801980e:	3718      	adds	r7, #24
 8019810:	46bd      	mov	sp, r7
 8019812:	bd80      	pop	{r7, pc}
 8019814:	0802661c 	.word	0x0802661c
 8019818:	08026790 	.word	0x08026790
 801981c:	08026670 	.word	0x08026670
 8019820:	080267ac 	.word	0x080267ac
 8019824:	080267c8 	.word	0x080267c8
 8019828:	080267e8 	.word	0x080267e8

0801982c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801982c:	b580      	push	{r7, lr}
 801982e:	b08c      	sub	sp, #48	; 0x30
 8019830:	af04      	add	r7, sp, #16
 8019832:	60f8      	str	r0, [r7, #12]
 8019834:	60b9      	str	r1, [r7, #8]
 8019836:	607a      	str	r2, [r7, #4]
 8019838:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801983a:	68fb      	ldr	r3, [r7, #12]
 801983c:	2b00      	cmp	r3, #0
 801983e:	d109      	bne.n	8019854 <udp_sendto_if_src+0x28>
 8019840:	4b65      	ldr	r3, [pc, #404]	; (80199d8 <udp_sendto_if_src+0x1ac>)
 8019842:	f240 22d1 	movw	r2, #721	; 0x2d1
 8019846:	4965      	ldr	r1, [pc, #404]	; (80199dc <udp_sendto_if_src+0x1b0>)
 8019848:	4865      	ldr	r0, [pc, #404]	; (80199e0 <udp_sendto_if_src+0x1b4>)
 801984a:	f004 fd45 	bl	801e2d8 <printf>
 801984e:	f06f 030f 	mvn.w	r3, #15
 8019852:	e0bc      	b.n	80199ce <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8019854:	68bb      	ldr	r3, [r7, #8]
 8019856:	2b00      	cmp	r3, #0
 8019858:	d109      	bne.n	801986e <udp_sendto_if_src+0x42>
 801985a:	4b5f      	ldr	r3, [pc, #380]	; (80199d8 <udp_sendto_if_src+0x1ac>)
 801985c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8019860:	4960      	ldr	r1, [pc, #384]	; (80199e4 <udp_sendto_if_src+0x1b8>)
 8019862:	485f      	ldr	r0, [pc, #380]	; (80199e0 <udp_sendto_if_src+0x1b4>)
 8019864:	f004 fd38 	bl	801e2d8 <printf>
 8019868:	f06f 030f 	mvn.w	r3, #15
 801986c:	e0af      	b.n	80199ce <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	2b00      	cmp	r3, #0
 8019872:	d109      	bne.n	8019888 <udp_sendto_if_src+0x5c>
 8019874:	4b58      	ldr	r3, [pc, #352]	; (80199d8 <udp_sendto_if_src+0x1ac>)
 8019876:	f240 22d3 	movw	r2, #723	; 0x2d3
 801987a:	495b      	ldr	r1, [pc, #364]	; (80199e8 <udp_sendto_if_src+0x1bc>)
 801987c:	4858      	ldr	r0, [pc, #352]	; (80199e0 <udp_sendto_if_src+0x1b4>)
 801987e:	f004 fd2b 	bl	801e2d8 <printf>
 8019882:	f06f 030f 	mvn.w	r3, #15
 8019886:	e0a2      	b.n	80199ce <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8019888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801988a:	2b00      	cmp	r3, #0
 801988c:	d109      	bne.n	80198a2 <udp_sendto_if_src+0x76>
 801988e:	4b52      	ldr	r3, [pc, #328]	; (80199d8 <udp_sendto_if_src+0x1ac>)
 8019890:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8019894:	4955      	ldr	r1, [pc, #340]	; (80199ec <udp_sendto_if_src+0x1c0>)
 8019896:	4852      	ldr	r0, [pc, #328]	; (80199e0 <udp_sendto_if_src+0x1b4>)
 8019898:	f004 fd1e 	bl	801e2d8 <printf>
 801989c:	f06f 030f 	mvn.w	r3, #15
 80198a0:	e095      	b.n	80199ce <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80198a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198a4:	2b00      	cmp	r3, #0
 80198a6:	d109      	bne.n	80198bc <udp_sendto_if_src+0x90>
 80198a8:	4b4b      	ldr	r3, [pc, #300]	; (80199d8 <udp_sendto_if_src+0x1ac>)
 80198aa:	f240 22d5 	movw	r2, #725	; 0x2d5
 80198ae:	4950      	ldr	r1, [pc, #320]	; (80199f0 <udp_sendto_if_src+0x1c4>)
 80198b0:	484b      	ldr	r0, [pc, #300]	; (80199e0 <udp_sendto_if_src+0x1b4>)
 80198b2:	f004 fd11 	bl	801e2d8 <printf>
 80198b6:	f06f 030f 	mvn.w	r3, #15
 80198ba:	e088      	b.n	80199ce <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80198bc:	68fb      	ldr	r3, [r7, #12]
 80198be:	8a5b      	ldrh	r3, [r3, #18]
 80198c0:	2b00      	cmp	r3, #0
 80198c2:	d10f      	bne.n	80198e4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80198c4:	68f9      	ldr	r1, [r7, #12]
 80198c6:	68fb      	ldr	r3, [r7, #12]
 80198c8:	8a5b      	ldrh	r3, [r3, #18]
 80198ca:	461a      	mov	r2, r3
 80198cc:	68f8      	ldr	r0, [r7, #12]
 80198ce:	f000 f893 	bl	80199f8 <udp_bind>
 80198d2:	4603      	mov	r3, r0
 80198d4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80198d6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80198da:	2b00      	cmp	r3, #0
 80198dc:	d002      	beq.n	80198e4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80198de:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80198e2:	e074      	b.n	80199ce <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80198e4:	68bb      	ldr	r3, [r7, #8]
 80198e6:	891b      	ldrh	r3, [r3, #8]
 80198e8:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80198ec:	4293      	cmp	r3, r2
 80198ee:	d902      	bls.n	80198f6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80198f0:	f04f 33ff 	mov.w	r3, #4294967295
 80198f4:	e06b      	b.n	80199ce <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80198f6:	2108      	movs	r1, #8
 80198f8:	68b8      	ldr	r0, [r7, #8]
 80198fa:	f7f9 ff4b 	bl	8013794 <pbuf_add_header>
 80198fe:	4603      	mov	r3, r0
 8019900:	2b00      	cmp	r3, #0
 8019902:	d015      	beq.n	8019930 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8019904:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019908:	2108      	movs	r1, #8
 801990a:	2022      	movs	r0, #34	; 0x22
 801990c:	f7f9 fcf4 	bl	80132f8 <pbuf_alloc>
 8019910:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8019912:	69fb      	ldr	r3, [r7, #28]
 8019914:	2b00      	cmp	r3, #0
 8019916:	d102      	bne.n	801991e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8019918:	f04f 33ff 	mov.w	r3, #4294967295
 801991c:	e057      	b.n	80199ce <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801991e:	68bb      	ldr	r3, [r7, #8]
 8019920:	891b      	ldrh	r3, [r3, #8]
 8019922:	2b00      	cmp	r3, #0
 8019924:	d006      	beq.n	8019934 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8019926:	68b9      	ldr	r1, [r7, #8]
 8019928:	69f8      	ldr	r0, [r7, #28]
 801992a:	f7fa f8ed 	bl	8013b08 <pbuf_chain>
 801992e:	e001      	b.n	8019934 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8019930:	68bb      	ldr	r3, [r7, #8]
 8019932:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8019934:	69fb      	ldr	r3, [r7, #28]
 8019936:	895b      	ldrh	r3, [r3, #10]
 8019938:	2b07      	cmp	r3, #7
 801993a:	d806      	bhi.n	801994a <udp_sendto_if_src+0x11e>
 801993c:	4b26      	ldr	r3, [pc, #152]	; (80199d8 <udp_sendto_if_src+0x1ac>)
 801993e:	f240 320d 	movw	r2, #781	; 0x30d
 8019942:	492c      	ldr	r1, [pc, #176]	; (80199f4 <udp_sendto_if_src+0x1c8>)
 8019944:	4826      	ldr	r0, [pc, #152]	; (80199e0 <udp_sendto_if_src+0x1b4>)
 8019946:	f004 fcc7 	bl	801e2d8 <printf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801994a:	69fb      	ldr	r3, [r7, #28]
 801994c:	685b      	ldr	r3, [r3, #4]
 801994e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8019950:	68fb      	ldr	r3, [r7, #12]
 8019952:	8a5b      	ldrh	r3, [r3, #18]
 8019954:	4618      	mov	r0, r3
 8019956:	f7f8 fbfb 	bl	8012150 <lwip_htons>
 801995a:	4603      	mov	r3, r0
 801995c:	461a      	mov	r2, r3
 801995e:	697b      	ldr	r3, [r7, #20]
 8019960:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8019962:	887b      	ldrh	r3, [r7, #2]
 8019964:	4618      	mov	r0, r3
 8019966:	f7f8 fbf3 	bl	8012150 <lwip_htons>
 801996a:	4603      	mov	r3, r0
 801996c:	461a      	mov	r2, r3
 801996e:	697b      	ldr	r3, [r7, #20]
 8019970:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8019972:	697b      	ldr	r3, [r7, #20]
 8019974:	2200      	movs	r2, #0
 8019976:	719a      	strb	r2, [r3, #6]
 8019978:	2200      	movs	r2, #0
 801997a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801997c:	69fb      	ldr	r3, [r7, #28]
 801997e:	891b      	ldrh	r3, [r3, #8]
 8019980:	4618      	mov	r0, r3
 8019982:	f7f8 fbe5 	bl	8012150 <lwip_htons>
 8019986:	4603      	mov	r3, r0
 8019988:	461a      	mov	r2, r3
 801998a:	697b      	ldr	r3, [r7, #20]
 801998c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801998e:	2311      	movs	r3, #17
 8019990:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8019992:	68fb      	ldr	r3, [r7, #12]
 8019994:	7adb      	ldrb	r3, [r3, #11]
 8019996:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8019998:	68fb      	ldr	r3, [r7, #12]
 801999a:	7a9b      	ldrb	r3, [r3, #10]
 801999c:	7cb9      	ldrb	r1, [r7, #18]
 801999e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80199a0:	9202      	str	r2, [sp, #8]
 80199a2:	7cfa      	ldrb	r2, [r7, #19]
 80199a4:	9201      	str	r2, [sp, #4]
 80199a6:	9300      	str	r3, [sp, #0]
 80199a8:	460b      	mov	r3, r1
 80199aa:	687a      	ldr	r2, [r7, #4]
 80199ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80199ae:	69f8      	ldr	r0, [r7, #28]
 80199b0:	f003 fb38 	bl	801d024 <ip4_output_if_src>
 80199b4:	4603      	mov	r3, r0
 80199b6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80199b8:	69fa      	ldr	r2, [r7, #28]
 80199ba:	68bb      	ldr	r3, [r7, #8]
 80199bc:	429a      	cmp	r2, r3
 80199be:	d004      	beq.n	80199ca <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80199c0:	69f8      	ldr	r0, [r7, #28]
 80199c2:	f7f9 ff7d 	bl	80138c0 <pbuf_free>
    q = NULL;
 80199c6:	2300      	movs	r3, #0
 80199c8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80199ca:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80199ce:	4618      	mov	r0, r3
 80199d0:	3720      	adds	r7, #32
 80199d2:	46bd      	mov	sp, r7
 80199d4:	bd80      	pop	{r7, pc}
 80199d6:	bf00      	nop
 80199d8:	0802661c 	.word	0x0802661c
 80199dc:	08026808 	.word	0x08026808
 80199e0:	08026670 	.word	0x08026670
 80199e4:	08026828 	.word	0x08026828
 80199e8:	08026848 	.word	0x08026848
 80199ec:	0802686c 	.word	0x0802686c
 80199f0:	08026890 	.word	0x08026890
 80199f4:	080268b4 	.word	0x080268b4

080199f8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80199f8:	b580      	push	{r7, lr}
 80199fa:	b086      	sub	sp, #24
 80199fc:	af00      	add	r7, sp, #0
 80199fe:	60f8      	str	r0, [r7, #12]
 8019a00:	60b9      	str	r1, [r7, #8]
 8019a02:	4613      	mov	r3, r2
 8019a04:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8019a06:	68bb      	ldr	r3, [r7, #8]
 8019a08:	2b00      	cmp	r3, #0
 8019a0a:	d101      	bne.n	8019a10 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8019a0c:	4b39      	ldr	r3, [pc, #228]	; (8019af4 <udp_bind+0xfc>)
 8019a0e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8019a10:	68fb      	ldr	r3, [r7, #12]
 8019a12:	2b00      	cmp	r3, #0
 8019a14:	d109      	bne.n	8019a2a <udp_bind+0x32>
 8019a16:	4b38      	ldr	r3, [pc, #224]	; (8019af8 <udp_bind+0x100>)
 8019a18:	f240 32b7 	movw	r2, #951	; 0x3b7
 8019a1c:	4937      	ldr	r1, [pc, #220]	; (8019afc <udp_bind+0x104>)
 8019a1e:	4838      	ldr	r0, [pc, #224]	; (8019b00 <udp_bind+0x108>)
 8019a20:	f004 fc5a 	bl	801e2d8 <printf>
 8019a24:	f06f 030f 	mvn.w	r3, #15
 8019a28:	e060      	b.n	8019aec <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8019a2a:	2300      	movs	r3, #0
 8019a2c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019a2e:	4b35      	ldr	r3, [pc, #212]	; (8019b04 <udp_bind+0x10c>)
 8019a30:	681b      	ldr	r3, [r3, #0]
 8019a32:	617b      	str	r3, [r7, #20]
 8019a34:	e009      	b.n	8019a4a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8019a36:	68fa      	ldr	r2, [r7, #12]
 8019a38:	697b      	ldr	r3, [r7, #20]
 8019a3a:	429a      	cmp	r2, r3
 8019a3c:	d102      	bne.n	8019a44 <udp_bind+0x4c>
      rebind = 1;
 8019a3e:	2301      	movs	r3, #1
 8019a40:	74fb      	strb	r3, [r7, #19]
      break;
 8019a42:	e005      	b.n	8019a50 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019a44:	697b      	ldr	r3, [r7, #20]
 8019a46:	68db      	ldr	r3, [r3, #12]
 8019a48:	617b      	str	r3, [r7, #20]
 8019a4a:	697b      	ldr	r3, [r7, #20]
 8019a4c:	2b00      	cmp	r3, #0
 8019a4e:	d1f2      	bne.n	8019a36 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8019a50:	88fb      	ldrh	r3, [r7, #6]
 8019a52:	2b00      	cmp	r3, #0
 8019a54:	d109      	bne.n	8019a6a <udp_bind+0x72>
    port = udp_new_port();
 8019a56:	f7ff fcc5 	bl	80193e4 <udp_new_port>
 8019a5a:	4603      	mov	r3, r0
 8019a5c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8019a5e:	88fb      	ldrh	r3, [r7, #6]
 8019a60:	2b00      	cmp	r3, #0
 8019a62:	d12c      	bne.n	8019abe <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8019a64:	f06f 0307 	mvn.w	r3, #7
 8019a68:	e040      	b.n	8019aec <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019a6a:	4b26      	ldr	r3, [pc, #152]	; (8019b04 <udp_bind+0x10c>)
 8019a6c:	681b      	ldr	r3, [r3, #0]
 8019a6e:	617b      	str	r3, [r7, #20]
 8019a70:	e022      	b.n	8019ab8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8019a72:	68fa      	ldr	r2, [r7, #12]
 8019a74:	697b      	ldr	r3, [r7, #20]
 8019a76:	429a      	cmp	r2, r3
 8019a78:	d01b      	beq.n	8019ab2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8019a7a:	697b      	ldr	r3, [r7, #20]
 8019a7c:	8a5b      	ldrh	r3, [r3, #18]
 8019a7e:	88fa      	ldrh	r2, [r7, #6]
 8019a80:	429a      	cmp	r2, r3
 8019a82:	d116      	bne.n	8019ab2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019a84:	697b      	ldr	r3, [r7, #20]
 8019a86:	681a      	ldr	r2, [r3, #0]
 8019a88:	68bb      	ldr	r3, [r7, #8]
 8019a8a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8019a8c:	429a      	cmp	r2, r3
 8019a8e:	d00d      	beq.n	8019aac <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019a90:	68bb      	ldr	r3, [r7, #8]
 8019a92:	2b00      	cmp	r3, #0
 8019a94:	d00a      	beq.n	8019aac <udp_bind+0xb4>
 8019a96:	68bb      	ldr	r3, [r7, #8]
 8019a98:	681b      	ldr	r3, [r3, #0]
 8019a9a:	2b00      	cmp	r3, #0
 8019a9c:	d006      	beq.n	8019aac <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8019a9e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019aa0:	2b00      	cmp	r3, #0
 8019aa2:	d003      	beq.n	8019aac <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8019aa4:	697b      	ldr	r3, [r7, #20]
 8019aa6:	681b      	ldr	r3, [r3, #0]
 8019aa8:	2b00      	cmp	r3, #0
 8019aaa:	d102      	bne.n	8019ab2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8019aac:	f06f 0307 	mvn.w	r3, #7
 8019ab0:	e01c      	b.n	8019aec <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019ab2:	697b      	ldr	r3, [r7, #20]
 8019ab4:	68db      	ldr	r3, [r3, #12]
 8019ab6:	617b      	str	r3, [r7, #20]
 8019ab8:	697b      	ldr	r3, [r7, #20]
 8019aba:	2b00      	cmp	r3, #0
 8019abc:	d1d9      	bne.n	8019a72 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8019abe:	68bb      	ldr	r3, [r7, #8]
 8019ac0:	2b00      	cmp	r3, #0
 8019ac2:	d002      	beq.n	8019aca <udp_bind+0xd2>
 8019ac4:	68bb      	ldr	r3, [r7, #8]
 8019ac6:	681b      	ldr	r3, [r3, #0]
 8019ac8:	e000      	b.n	8019acc <udp_bind+0xd4>
 8019aca:	2300      	movs	r3, #0
 8019acc:	68fa      	ldr	r2, [r7, #12]
 8019ace:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8019ad0:	68fb      	ldr	r3, [r7, #12]
 8019ad2:	88fa      	ldrh	r2, [r7, #6]
 8019ad4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8019ad6:	7cfb      	ldrb	r3, [r7, #19]
 8019ad8:	2b00      	cmp	r3, #0
 8019ada:	d106      	bne.n	8019aea <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8019adc:	4b09      	ldr	r3, [pc, #36]	; (8019b04 <udp_bind+0x10c>)
 8019ade:	681a      	ldr	r2, [r3, #0]
 8019ae0:	68fb      	ldr	r3, [r7, #12]
 8019ae2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8019ae4:	4a07      	ldr	r2, [pc, #28]	; (8019b04 <udp_bind+0x10c>)
 8019ae6:	68fb      	ldr	r3, [r7, #12]
 8019ae8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8019aea:	2300      	movs	r3, #0
}
 8019aec:	4618      	mov	r0, r3
 8019aee:	3718      	adds	r7, #24
 8019af0:	46bd      	mov	sp, r7
 8019af2:	bd80      	pop	{r7, pc}
 8019af4:	0806f64c 	.word	0x0806f64c
 8019af8:	0802661c 	.word	0x0802661c
 8019afc:	080268e4 	.word	0x080268e4
 8019b00:	08026670 	.word	0x08026670
 8019b04:	2000c210 	.word	0x2000c210

08019b08 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8019b08:	b580      	push	{r7, lr}
 8019b0a:	b086      	sub	sp, #24
 8019b0c:	af00      	add	r7, sp, #0
 8019b0e:	60f8      	str	r0, [r7, #12]
 8019b10:	60b9      	str	r1, [r7, #8]
 8019b12:	4613      	mov	r3, r2
 8019b14:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8019b16:	68fb      	ldr	r3, [r7, #12]
 8019b18:	2b00      	cmp	r3, #0
 8019b1a:	d109      	bne.n	8019b30 <udp_connect+0x28>
 8019b1c:	4b2c      	ldr	r3, [pc, #176]	; (8019bd0 <udp_connect+0xc8>)
 8019b1e:	f240 4235 	movw	r2, #1077	; 0x435
 8019b22:	492c      	ldr	r1, [pc, #176]	; (8019bd4 <udp_connect+0xcc>)
 8019b24:	482c      	ldr	r0, [pc, #176]	; (8019bd8 <udp_connect+0xd0>)
 8019b26:	f004 fbd7 	bl	801e2d8 <printf>
 8019b2a:	f06f 030f 	mvn.w	r3, #15
 8019b2e:	e04b      	b.n	8019bc8 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8019b30:	68bb      	ldr	r3, [r7, #8]
 8019b32:	2b00      	cmp	r3, #0
 8019b34:	d109      	bne.n	8019b4a <udp_connect+0x42>
 8019b36:	4b26      	ldr	r3, [pc, #152]	; (8019bd0 <udp_connect+0xc8>)
 8019b38:	f240 4236 	movw	r2, #1078	; 0x436
 8019b3c:	4927      	ldr	r1, [pc, #156]	; (8019bdc <udp_connect+0xd4>)
 8019b3e:	4826      	ldr	r0, [pc, #152]	; (8019bd8 <udp_connect+0xd0>)
 8019b40:	f004 fbca 	bl	801e2d8 <printf>
 8019b44:	f06f 030f 	mvn.w	r3, #15
 8019b48:	e03e      	b.n	8019bc8 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8019b4a:	68fb      	ldr	r3, [r7, #12]
 8019b4c:	8a5b      	ldrh	r3, [r3, #18]
 8019b4e:	2b00      	cmp	r3, #0
 8019b50:	d10f      	bne.n	8019b72 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8019b52:	68f9      	ldr	r1, [r7, #12]
 8019b54:	68fb      	ldr	r3, [r7, #12]
 8019b56:	8a5b      	ldrh	r3, [r3, #18]
 8019b58:	461a      	mov	r2, r3
 8019b5a:	68f8      	ldr	r0, [r7, #12]
 8019b5c:	f7ff ff4c 	bl	80199f8 <udp_bind>
 8019b60:	4603      	mov	r3, r0
 8019b62:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8019b64:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019b68:	2b00      	cmp	r3, #0
 8019b6a:	d002      	beq.n	8019b72 <udp_connect+0x6a>
      return err;
 8019b6c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019b70:	e02a      	b.n	8019bc8 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8019b72:	68bb      	ldr	r3, [r7, #8]
 8019b74:	2b00      	cmp	r3, #0
 8019b76:	d002      	beq.n	8019b7e <udp_connect+0x76>
 8019b78:	68bb      	ldr	r3, [r7, #8]
 8019b7a:	681b      	ldr	r3, [r3, #0]
 8019b7c:	e000      	b.n	8019b80 <udp_connect+0x78>
 8019b7e:	2300      	movs	r3, #0
 8019b80:	68fa      	ldr	r2, [r7, #12]
 8019b82:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8019b84:	68fb      	ldr	r3, [r7, #12]
 8019b86:	88fa      	ldrh	r2, [r7, #6]
 8019b88:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8019b8a:	68fb      	ldr	r3, [r7, #12]
 8019b8c:	7c1b      	ldrb	r3, [r3, #16]
 8019b8e:	f043 0304 	orr.w	r3, r3, #4
 8019b92:	b2da      	uxtb	r2, r3
 8019b94:	68fb      	ldr	r3, [r7, #12]
 8019b96:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019b98:	4b11      	ldr	r3, [pc, #68]	; (8019be0 <udp_connect+0xd8>)
 8019b9a:	681b      	ldr	r3, [r3, #0]
 8019b9c:	617b      	str	r3, [r7, #20]
 8019b9e:	e008      	b.n	8019bb2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8019ba0:	68fa      	ldr	r2, [r7, #12]
 8019ba2:	697b      	ldr	r3, [r7, #20]
 8019ba4:	429a      	cmp	r2, r3
 8019ba6:	d101      	bne.n	8019bac <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8019ba8:	2300      	movs	r3, #0
 8019baa:	e00d      	b.n	8019bc8 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019bac:	697b      	ldr	r3, [r7, #20]
 8019bae:	68db      	ldr	r3, [r3, #12]
 8019bb0:	617b      	str	r3, [r7, #20]
 8019bb2:	697b      	ldr	r3, [r7, #20]
 8019bb4:	2b00      	cmp	r3, #0
 8019bb6:	d1f3      	bne.n	8019ba0 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8019bb8:	4b09      	ldr	r3, [pc, #36]	; (8019be0 <udp_connect+0xd8>)
 8019bba:	681a      	ldr	r2, [r3, #0]
 8019bbc:	68fb      	ldr	r3, [r7, #12]
 8019bbe:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8019bc0:	4a07      	ldr	r2, [pc, #28]	; (8019be0 <udp_connect+0xd8>)
 8019bc2:	68fb      	ldr	r3, [r7, #12]
 8019bc4:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8019bc6:	2300      	movs	r3, #0
}
 8019bc8:	4618      	mov	r0, r3
 8019bca:	3718      	adds	r7, #24
 8019bcc:	46bd      	mov	sp, r7
 8019bce:	bd80      	pop	{r7, pc}
 8019bd0:	0802661c 	.word	0x0802661c
 8019bd4:	080268fc 	.word	0x080268fc
 8019bd8:	08026670 	.word	0x08026670
 8019bdc:	08026918 	.word	0x08026918
 8019be0:	2000c210 	.word	0x2000c210

08019be4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8019be4:	b580      	push	{r7, lr}
 8019be6:	b084      	sub	sp, #16
 8019be8:	af00      	add	r7, sp, #0
 8019bea:	60f8      	str	r0, [r7, #12]
 8019bec:	60b9      	str	r1, [r7, #8]
 8019bee:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8019bf0:	68fb      	ldr	r3, [r7, #12]
 8019bf2:	2b00      	cmp	r3, #0
 8019bf4:	d107      	bne.n	8019c06 <udp_recv+0x22>
 8019bf6:	4b08      	ldr	r3, [pc, #32]	; (8019c18 <udp_recv+0x34>)
 8019bf8:	f240 428a 	movw	r2, #1162	; 0x48a
 8019bfc:	4907      	ldr	r1, [pc, #28]	; (8019c1c <udp_recv+0x38>)
 8019bfe:	4808      	ldr	r0, [pc, #32]	; (8019c20 <udp_recv+0x3c>)
 8019c00:	f004 fb6a 	bl	801e2d8 <printf>
 8019c04:	e005      	b.n	8019c12 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8019c06:	68fb      	ldr	r3, [r7, #12]
 8019c08:	68ba      	ldr	r2, [r7, #8]
 8019c0a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8019c0c:	68fb      	ldr	r3, [r7, #12]
 8019c0e:	687a      	ldr	r2, [r7, #4]
 8019c10:	61da      	str	r2, [r3, #28]
}
 8019c12:	3710      	adds	r7, #16
 8019c14:	46bd      	mov	sp, r7
 8019c16:	bd80      	pop	{r7, pc}
 8019c18:	0802661c 	.word	0x0802661c
 8019c1c:	08026950 	.word	0x08026950
 8019c20:	08026670 	.word	0x08026670

08019c24 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8019c24:	b580      	push	{r7, lr}
 8019c26:	b084      	sub	sp, #16
 8019c28:	af00      	add	r7, sp, #0
 8019c2a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8019c2c:	687b      	ldr	r3, [r7, #4]
 8019c2e:	2b00      	cmp	r3, #0
 8019c30:	d107      	bne.n	8019c42 <udp_remove+0x1e>
 8019c32:	4b19      	ldr	r3, [pc, #100]	; (8019c98 <udp_remove+0x74>)
 8019c34:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8019c38:	4918      	ldr	r1, [pc, #96]	; (8019c9c <udp_remove+0x78>)
 8019c3a:	4819      	ldr	r0, [pc, #100]	; (8019ca0 <udp_remove+0x7c>)
 8019c3c:	f004 fb4c 	bl	801e2d8 <printf>
 8019c40:	e026      	b.n	8019c90 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8019c42:	4b18      	ldr	r3, [pc, #96]	; (8019ca4 <udp_remove+0x80>)
 8019c44:	681b      	ldr	r3, [r3, #0]
 8019c46:	687a      	ldr	r2, [r7, #4]
 8019c48:	429a      	cmp	r2, r3
 8019c4a:	d105      	bne.n	8019c58 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8019c4c:	4b15      	ldr	r3, [pc, #84]	; (8019ca4 <udp_remove+0x80>)
 8019c4e:	681b      	ldr	r3, [r3, #0]
 8019c50:	68db      	ldr	r3, [r3, #12]
 8019c52:	4a14      	ldr	r2, [pc, #80]	; (8019ca4 <udp_remove+0x80>)
 8019c54:	6013      	str	r3, [r2, #0]
 8019c56:	e017      	b.n	8019c88 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8019c58:	4b12      	ldr	r3, [pc, #72]	; (8019ca4 <udp_remove+0x80>)
 8019c5a:	681b      	ldr	r3, [r3, #0]
 8019c5c:	60fb      	str	r3, [r7, #12]
 8019c5e:	e010      	b.n	8019c82 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8019c60:	68fb      	ldr	r3, [r7, #12]
 8019c62:	68db      	ldr	r3, [r3, #12]
 8019c64:	2b00      	cmp	r3, #0
 8019c66:	d009      	beq.n	8019c7c <udp_remove+0x58>
 8019c68:	68fb      	ldr	r3, [r7, #12]
 8019c6a:	68db      	ldr	r3, [r3, #12]
 8019c6c:	687a      	ldr	r2, [r7, #4]
 8019c6e:	429a      	cmp	r2, r3
 8019c70:	d104      	bne.n	8019c7c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8019c72:	687b      	ldr	r3, [r7, #4]
 8019c74:	68da      	ldr	r2, [r3, #12]
 8019c76:	68fb      	ldr	r3, [r7, #12]
 8019c78:	60da      	str	r2, [r3, #12]
        break;
 8019c7a:	e005      	b.n	8019c88 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8019c7c:	68fb      	ldr	r3, [r7, #12]
 8019c7e:	68db      	ldr	r3, [r3, #12]
 8019c80:	60fb      	str	r3, [r7, #12]
 8019c82:	68fb      	ldr	r3, [r7, #12]
 8019c84:	2b00      	cmp	r3, #0
 8019c86:	d1eb      	bne.n	8019c60 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8019c88:	6879      	ldr	r1, [r7, #4]
 8019c8a:	2000      	movs	r0, #0
 8019c8c:	f7f8 ff68 	bl	8012b60 <memp_free>
}
 8019c90:	3710      	adds	r7, #16
 8019c92:	46bd      	mov	sp, r7
 8019c94:	bd80      	pop	{r7, pc}
 8019c96:	bf00      	nop
 8019c98:	0802661c 	.word	0x0802661c
 8019c9c:	08026968 	.word	0x08026968
 8019ca0:	08026670 	.word	0x08026670
 8019ca4:	2000c210 	.word	0x2000c210

08019ca8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8019ca8:	b580      	push	{r7, lr}
 8019caa:	b082      	sub	sp, #8
 8019cac:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8019cae:	2000      	movs	r0, #0
 8019cb0:	f7f8 ff04 	bl	8012abc <memp_malloc>
 8019cb4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8019cb6:	687b      	ldr	r3, [r7, #4]
 8019cb8:	2b00      	cmp	r3, #0
 8019cba:	d007      	beq.n	8019ccc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8019cbc:	2220      	movs	r2, #32
 8019cbe:	2100      	movs	r1, #0
 8019cc0:	6878      	ldr	r0, [r7, #4]
 8019cc2:	f004 fb01 	bl	801e2c8 <memset>
    pcb->ttl = UDP_TTL;
 8019cc6:	687b      	ldr	r3, [r7, #4]
 8019cc8:	22ff      	movs	r2, #255	; 0xff
 8019cca:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8019ccc:	687b      	ldr	r3, [r7, #4]
}
 8019cce:	4618      	mov	r0, r3
 8019cd0:	3708      	adds	r7, #8
 8019cd2:	46bd      	mov	sp, r7
 8019cd4:	bd80      	pop	{r7, pc}
	...

08019cd8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8019cd8:	b480      	push	{r7}
 8019cda:	b085      	sub	sp, #20
 8019cdc:	af00      	add	r7, sp, #0
 8019cde:	6078      	str	r0, [r7, #4]
 8019ce0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	2b00      	cmp	r3, #0
 8019ce6:	d01e      	beq.n	8019d26 <udp_netif_ip_addr_changed+0x4e>
 8019ce8:	687b      	ldr	r3, [r7, #4]
 8019cea:	681b      	ldr	r3, [r3, #0]
 8019cec:	2b00      	cmp	r3, #0
 8019cee:	d01a      	beq.n	8019d26 <udp_netif_ip_addr_changed+0x4e>
 8019cf0:	683b      	ldr	r3, [r7, #0]
 8019cf2:	2b00      	cmp	r3, #0
 8019cf4:	d017      	beq.n	8019d26 <udp_netif_ip_addr_changed+0x4e>
 8019cf6:	683b      	ldr	r3, [r7, #0]
 8019cf8:	681b      	ldr	r3, [r3, #0]
 8019cfa:	2b00      	cmp	r3, #0
 8019cfc:	d013      	beq.n	8019d26 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8019cfe:	4b0d      	ldr	r3, [pc, #52]	; (8019d34 <udp_netif_ip_addr_changed+0x5c>)
 8019d00:	681b      	ldr	r3, [r3, #0]
 8019d02:	60fb      	str	r3, [r7, #12]
 8019d04:	e00c      	b.n	8019d20 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8019d06:	68fb      	ldr	r3, [r7, #12]
 8019d08:	681a      	ldr	r2, [r3, #0]
 8019d0a:	687b      	ldr	r3, [r7, #4]
 8019d0c:	681b      	ldr	r3, [r3, #0]
 8019d0e:	429a      	cmp	r2, r3
 8019d10:	d103      	bne.n	8019d1a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8019d12:	683b      	ldr	r3, [r7, #0]
 8019d14:	681a      	ldr	r2, [r3, #0]
 8019d16:	68fb      	ldr	r3, [r7, #12]
 8019d18:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8019d1a:	68fb      	ldr	r3, [r7, #12]
 8019d1c:	68db      	ldr	r3, [r3, #12]
 8019d1e:	60fb      	str	r3, [r7, #12]
 8019d20:	68fb      	ldr	r3, [r7, #12]
 8019d22:	2b00      	cmp	r3, #0
 8019d24:	d1ef      	bne.n	8019d06 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8019d26:	bf00      	nop
 8019d28:	3714      	adds	r7, #20
 8019d2a:	46bd      	mov	sp, r7
 8019d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d30:	4770      	bx	lr
 8019d32:	bf00      	nop
 8019d34:	2000c210 	.word	0x2000c210

08019d38 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8019d38:	b580      	push	{r7, lr}
 8019d3a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8019d3c:	4b20      	ldr	r3, [pc, #128]	; (8019dc0 <dhcp_inc_pcb_refcount+0x88>)
 8019d3e:	781b      	ldrb	r3, [r3, #0]
 8019d40:	2b00      	cmp	r3, #0
 8019d42:	d133      	bne.n	8019dac <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8019d44:	4b1f      	ldr	r3, [pc, #124]	; (8019dc4 <dhcp_inc_pcb_refcount+0x8c>)
 8019d46:	681b      	ldr	r3, [r3, #0]
 8019d48:	2b00      	cmp	r3, #0
 8019d4a:	d005      	beq.n	8019d58 <dhcp_inc_pcb_refcount+0x20>
 8019d4c:	4b1e      	ldr	r3, [pc, #120]	; (8019dc8 <dhcp_inc_pcb_refcount+0x90>)
 8019d4e:	22e5      	movs	r2, #229	; 0xe5
 8019d50:	491e      	ldr	r1, [pc, #120]	; (8019dcc <dhcp_inc_pcb_refcount+0x94>)
 8019d52:	481f      	ldr	r0, [pc, #124]	; (8019dd0 <dhcp_inc_pcb_refcount+0x98>)
 8019d54:	f004 fac0 	bl	801e2d8 <printf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8019d58:	f7ff ffa6 	bl	8019ca8 <udp_new>
 8019d5c:	4603      	mov	r3, r0
 8019d5e:	4a19      	ldr	r2, [pc, #100]	; (8019dc4 <dhcp_inc_pcb_refcount+0x8c>)
 8019d60:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8019d62:	4b18      	ldr	r3, [pc, #96]	; (8019dc4 <dhcp_inc_pcb_refcount+0x8c>)
 8019d64:	681b      	ldr	r3, [r3, #0]
 8019d66:	2b00      	cmp	r3, #0
 8019d68:	d102      	bne.n	8019d70 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8019d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8019d6e:	e024      	b.n	8019dba <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8019d70:	4b14      	ldr	r3, [pc, #80]	; (8019dc4 <dhcp_inc_pcb_refcount+0x8c>)
 8019d72:	681b      	ldr	r3, [r3, #0]
 8019d74:	7a5a      	ldrb	r2, [r3, #9]
 8019d76:	4b13      	ldr	r3, [pc, #76]	; (8019dc4 <dhcp_inc_pcb_refcount+0x8c>)
 8019d78:	681b      	ldr	r3, [r3, #0]
 8019d7a:	f042 0220 	orr.w	r2, r2, #32
 8019d7e:	b2d2      	uxtb	r2, r2
 8019d80:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8019d82:	4b10      	ldr	r3, [pc, #64]	; (8019dc4 <dhcp_inc_pcb_refcount+0x8c>)
 8019d84:	681b      	ldr	r3, [r3, #0]
 8019d86:	2244      	movs	r2, #68	; 0x44
 8019d88:	4912      	ldr	r1, [pc, #72]	; (8019dd4 <dhcp_inc_pcb_refcount+0x9c>)
 8019d8a:	4618      	mov	r0, r3
 8019d8c:	f7ff fe34 	bl	80199f8 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8019d90:	4b0c      	ldr	r3, [pc, #48]	; (8019dc4 <dhcp_inc_pcb_refcount+0x8c>)
 8019d92:	681b      	ldr	r3, [r3, #0]
 8019d94:	2243      	movs	r2, #67	; 0x43
 8019d96:	490f      	ldr	r1, [pc, #60]	; (8019dd4 <dhcp_inc_pcb_refcount+0x9c>)
 8019d98:	4618      	mov	r0, r3
 8019d9a:	f7ff feb5 	bl	8019b08 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8019d9e:	4b09      	ldr	r3, [pc, #36]	; (8019dc4 <dhcp_inc_pcb_refcount+0x8c>)
 8019da0:	681b      	ldr	r3, [r3, #0]
 8019da2:	2200      	movs	r2, #0
 8019da4:	490c      	ldr	r1, [pc, #48]	; (8019dd8 <dhcp_inc_pcb_refcount+0xa0>)
 8019da6:	4618      	mov	r0, r3
 8019da8:	f7ff ff1c 	bl	8019be4 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8019dac:	4b04      	ldr	r3, [pc, #16]	; (8019dc0 <dhcp_inc_pcb_refcount+0x88>)
 8019dae:	781b      	ldrb	r3, [r3, #0]
 8019db0:	3301      	adds	r3, #1
 8019db2:	b2da      	uxtb	r2, r3
 8019db4:	4b02      	ldr	r3, [pc, #8]	; (8019dc0 <dhcp_inc_pcb_refcount+0x88>)
 8019db6:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8019db8:	2300      	movs	r3, #0
}
 8019dba:	4618      	mov	r0, r3
 8019dbc:	bd80      	pop	{r7, pc}
 8019dbe:	bf00      	nop
 8019dc0:	2000c240 	.word	0x2000c240
 8019dc4:	2000c23c 	.word	0x2000c23c
 8019dc8:	08026980 	.word	0x08026980
 8019dcc:	080269b8 	.word	0x080269b8
 8019dd0:	080269e0 	.word	0x080269e0
 8019dd4:	0806f64c 	.word	0x0806f64c
 8019dd8:	0801b66d 	.word	0x0801b66d

08019ddc <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8019ddc:	b580      	push	{r7, lr}
 8019dde:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8019de0:	4b0e      	ldr	r3, [pc, #56]	; (8019e1c <dhcp_dec_pcb_refcount+0x40>)
 8019de2:	781b      	ldrb	r3, [r3, #0]
 8019de4:	2b00      	cmp	r3, #0
 8019de6:	d105      	bne.n	8019df4 <dhcp_dec_pcb_refcount+0x18>
 8019de8:	4b0d      	ldr	r3, [pc, #52]	; (8019e20 <dhcp_dec_pcb_refcount+0x44>)
 8019dea:	22ff      	movs	r2, #255	; 0xff
 8019dec:	490d      	ldr	r1, [pc, #52]	; (8019e24 <dhcp_dec_pcb_refcount+0x48>)
 8019dee:	480e      	ldr	r0, [pc, #56]	; (8019e28 <dhcp_dec_pcb_refcount+0x4c>)
 8019df0:	f004 fa72 	bl	801e2d8 <printf>
  dhcp_pcb_refcount--;
 8019df4:	4b09      	ldr	r3, [pc, #36]	; (8019e1c <dhcp_dec_pcb_refcount+0x40>)
 8019df6:	781b      	ldrb	r3, [r3, #0]
 8019df8:	3b01      	subs	r3, #1
 8019dfa:	b2da      	uxtb	r2, r3
 8019dfc:	4b07      	ldr	r3, [pc, #28]	; (8019e1c <dhcp_dec_pcb_refcount+0x40>)
 8019dfe:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8019e00:	4b06      	ldr	r3, [pc, #24]	; (8019e1c <dhcp_dec_pcb_refcount+0x40>)
 8019e02:	781b      	ldrb	r3, [r3, #0]
 8019e04:	2b00      	cmp	r3, #0
 8019e06:	d107      	bne.n	8019e18 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8019e08:	4b08      	ldr	r3, [pc, #32]	; (8019e2c <dhcp_dec_pcb_refcount+0x50>)
 8019e0a:	681b      	ldr	r3, [r3, #0]
 8019e0c:	4618      	mov	r0, r3
 8019e0e:	f7ff ff09 	bl	8019c24 <udp_remove>
    dhcp_pcb = NULL;
 8019e12:	4b06      	ldr	r3, [pc, #24]	; (8019e2c <dhcp_dec_pcb_refcount+0x50>)
 8019e14:	2200      	movs	r2, #0
 8019e16:	601a      	str	r2, [r3, #0]
  }
}
 8019e18:	bf00      	nop
 8019e1a:	bd80      	pop	{r7, pc}
 8019e1c:	2000c240 	.word	0x2000c240
 8019e20:	08026980 	.word	0x08026980
 8019e24:	08026a08 	.word	0x08026a08
 8019e28:	080269e0 	.word	0x080269e0
 8019e2c:	2000c23c 	.word	0x2000c23c

08019e30 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8019e30:	b580      	push	{r7, lr}
 8019e32:	b084      	sub	sp, #16
 8019e34:	af00      	add	r7, sp, #0
 8019e36:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019e38:	687b      	ldr	r3, [r7, #4]
 8019e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e3c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8019e3e:	210c      	movs	r1, #12
 8019e40:	68f8      	ldr	r0, [r7, #12]
 8019e42:	f001 f855 	bl	801aef0 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8019e46:	4b06      	ldr	r3, [pc, #24]	; (8019e60 <dhcp_handle_nak+0x30>)
 8019e48:	4a05      	ldr	r2, [pc, #20]	; (8019e60 <dhcp_handle_nak+0x30>)
 8019e4a:	4905      	ldr	r1, [pc, #20]	; (8019e60 <dhcp_handle_nak+0x30>)
 8019e4c:	6878      	ldr	r0, [r7, #4]
 8019e4e:	f7f9 f829 	bl	8012ea4 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8019e52:	6878      	ldr	r0, [r7, #4]
 8019e54:	f000 fc48 	bl	801a6e8 <dhcp_discover>
}
 8019e58:	bf00      	nop
 8019e5a:	3710      	adds	r7, #16
 8019e5c:	46bd      	mov	sp, r7
 8019e5e:	bd80      	pop	{r7, pc}
 8019e60:	0806f64c 	.word	0x0806f64c

08019e64 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8019e64:	b580      	push	{r7, lr}
 8019e66:	b084      	sub	sp, #16
 8019e68:	af00      	add	r7, sp, #0
 8019e6a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019e6c:	687b      	ldr	r3, [r7, #4]
 8019e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e70:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8019e72:	2108      	movs	r1, #8
 8019e74:	68f8      	ldr	r0, [r7, #12]
 8019e76:	f001 f83b 	bl	801aef0 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8019e7a:	68fb      	ldr	r3, [r7, #12]
 8019e7c:	331c      	adds	r3, #28
 8019e7e:	2200      	movs	r2, #0
 8019e80:	4619      	mov	r1, r3
 8019e82:	6878      	ldr	r0, [r7, #4]
 8019e84:	f002 fb3c 	bl	801c500 <etharp_query>
 8019e88:	4603      	mov	r3, r0
 8019e8a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8019e8c:	68fb      	ldr	r3, [r7, #12]
 8019e8e:	799b      	ldrb	r3, [r3, #6]
 8019e90:	2bff      	cmp	r3, #255	; 0xff
 8019e92:	d005      	beq.n	8019ea0 <dhcp_check+0x3c>
    dhcp->tries++;
 8019e94:	68fb      	ldr	r3, [r7, #12]
 8019e96:	799b      	ldrb	r3, [r3, #6]
 8019e98:	3301      	adds	r3, #1
 8019e9a:	b2da      	uxtb	r2, r3
 8019e9c:	68fb      	ldr	r3, [r7, #12]
 8019e9e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8019ea0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8019ea4:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019ea6:	893b      	ldrh	r3, [r7, #8]
 8019ea8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8019eac:	4a06      	ldr	r2, [pc, #24]	; (8019ec8 <dhcp_check+0x64>)
 8019eae:	fb82 1203 	smull	r1, r2, r2, r3
 8019eb2:	1152      	asrs	r2, r2, #5
 8019eb4:	17db      	asrs	r3, r3, #31
 8019eb6:	1ad3      	subs	r3, r2, r3
 8019eb8:	b29a      	uxth	r2, r3
 8019eba:	68fb      	ldr	r3, [r7, #12]
 8019ebc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8019ebe:	bf00      	nop
 8019ec0:	3710      	adds	r7, #16
 8019ec2:	46bd      	mov	sp, r7
 8019ec4:	bd80      	pop	{r7, pc}
 8019ec6:	bf00      	nop
 8019ec8:	10624dd3 	.word	0x10624dd3

08019ecc <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8019ecc:	b580      	push	{r7, lr}
 8019ece:	b084      	sub	sp, #16
 8019ed0:	af00      	add	r7, sp, #0
 8019ed2:	6078      	str	r0, [r7, #4]
 8019ed4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019ed6:	687b      	ldr	r3, [r7, #4]
 8019ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019eda:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8019edc:	4b0c      	ldr	r3, [pc, #48]	; (8019f10 <dhcp_handle_offer+0x44>)
 8019ede:	789b      	ldrb	r3, [r3, #2]
 8019ee0:	2b00      	cmp	r3, #0
 8019ee2:	d011      	beq.n	8019f08 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8019ee4:	68fb      	ldr	r3, [r7, #12]
 8019ee6:	2200      	movs	r2, #0
 8019ee8:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8019eea:	4b0a      	ldr	r3, [pc, #40]	; (8019f14 <dhcp_handle_offer+0x48>)
 8019eec:	689b      	ldr	r3, [r3, #8]
 8019eee:	4618      	mov	r0, r3
 8019ef0:	f7f8 f943 	bl	801217a <lwip_htonl>
 8019ef4:	4602      	mov	r2, r0
 8019ef6:	68fb      	ldr	r3, [r7, #12]
 8019ef8:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8019efa:	683b      	ldr	r3, [r7, #0]
 8019efc:	691a      	ldr	r2, [r3, #16]
 8019efe:	68fb      	ldr	r3, [r7, #12]
 8019f00:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8019f02:	6878      	ldr	r0, [r7, #4]
 8019f04:	f000 f808 	bl	8019f18 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8019f08:	bf00      	nop
 8019f0a:	3710      	adds	r7, #16
 8019f0c:	46bd      	mov	sp, r7
 8019f0e:	bd80      	pop	{r7, pc}
 8019f10:	2000c234 	.word	0x2000c234
 8019f14:	2000c214 	.word	0x2000c214

08019f18 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8019f18:	b5b0      	push	{r4, r5, r7, lr}
 8019f1a:	b08a      	sub	sp, #40	; 0x28
 8019f1c:	af02      	add	r7, sp, #8
 8019f1e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8019f20:	687b      	ldr	r3, [r7, #4]
 8019f22:	2b00      	cmp	r3, #0
 8019f24:	d109      	bne.n	8019f3a <dhcp_select+0x22>
 8019f26:	4b71      	ldr	r3, [pc, #452]	; (801a0ec <dhcp_select+0x1d4>)
 8019f28:	f240 1277 	movw	r2, #375	; 0x177
 8019f2c:	4970      	ldr	r1, [pc, #448]	; (801a0f0 <dhcp_select+0x1d8>)
 8019f2e:	4871      	ldr	r0, [pc, #452]	; (801a0f4 <dhcp_select+0x1dc>)
 8019f30:	f004 f9d2 	bl	801e2d8 <printf>
 8019f34:	f06f 030f 	mvn.w	r3, #15
 8019f38:	e0d3      	b.n	801a0e2 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8019f3a:	687b      	ldr	r3, [r7, #4]
 8019f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f3e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8019f40:	69bb      	ldr	r3, [r7, #24]
 8019f42:	2b00      	cmp	r3, #0
 8019f44:	d109      	bne.n	8019f5a <dhcp_select+0x42>
 8019f46:	4b69      	ldr	r3, [pc, #420]	; (801a0ec <dhcp_select+0x1d4>)
 8019f48:	f240 1279 	movw	r2, #377	; 0x179
 8019f4c:	496a      	ldr	r1, [pc, #424]	; (801a0f8 <dhcp_select+0x1e0>)
 8019f4e:	4869      	ldr	r0, [pc, #420]	; (801a0f4 <dhcp_select+0x1dc>)
 8019f50:	f004 f9c2 	bl	801e2d8 <printf>
 8019f54:	f06f 0305 	mvn.w	r3, #5
 8019f58:	e0c3      	b.n	801a0e2 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8019f5a:	2101      	movs	r1, #1
 8019f5c:	69b8      	ldr	r0, [r7, #24]
 8019f5e:	f000 ffc7 	bl	801aef0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8019f62:	f107 030c 	add.w	r3, r7, #12
 8019f66:	2203      	movs	r2, #3
 8019f68:	69b9      	ldr	r1, [r7, #24]
 8019f6a:	6878      	ldr	r0, [r7, #4]
 8019f6c:	f001 fc4c 	bl	801b808 <dhcp_create_msg>
 8019f70:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8019f72:	697b      	ldr	r3, [r7, #20]
 8019f74:	2b00      	cmp	r3, #0
 8019f76:	f000 8085 	beq.w	801a084 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019f7a:	697b      	ldr	r3, [r7, #20]
 8019f7c:	685b      	ldr	r3, [r3, #4]
 8019f7e:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8019f80:	89b8      	ldrh	r0, [r7, #12]
 8019f82:	693b      	ldr	r3, [r7, #16]
 8019f84:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019f88:	2302      	movs	r3, #2
 8019f8a:	2239      	movs	r2, #57	; 0x39
 8019f8c:	f000 ffca 	bl	801af24 <dhcp_option>
 8019f90:	4603      	mov	r3, r0
 8019f92:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8019f94:	89b8      	ldrh	r0, [r7, #12]
 8019f96:	693b      	ldr	r3, [r7, #16]
 8019f98:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019f9c:	687b      	ldr	r3, [r7, #4]
 8019f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019fa0:	461a      	mov	r2, r3
 8019fa2:	f001 f819 	bl	801afd8 <dhcp_option_short>
 8019fa6:	4603      	mov	r3, r0
 8019fa8:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8019faa:	89b8      	ldrh	r0, [r7, #12]
 8019fac:	693b      	ldr	r3, [r7, #16]
 8019fae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019fb2:	2304      	movs	r3, #4
 8019fb4:	2232      	movs	r2, #50	; 0x32
 8019fb6:	f000 ffb5 	bl	801af24 <dhcp_option>
 8019fba:	4603      	mov	r3, r0
 8019fbc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8019fbe:	89bc      	ldrh	r4, [r7, #12]
 8019fc0:	693b      	ldr	r3, [r7, #16]
 8019fc2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8019fc6:	69bb      	ldr	r3, [r7, #24]
 8019fc8:	69db      	ldr	r3, [r3, #28]
 8019fca:	4618      	mov	r0, r3
 8019fcc:	f7f8 f8d5 	bl	801217a <lwip_htonl>
 8019fd0:	4603      	mov	r3, r0
 8019fd2:	461a      	mov	r2, r3
 8019fd4:	4629      	mov	r1, r5
 8019fd6:	4620      	mov	r0, r4
 8019fd8:	f001 f830 	bl	801b03c <dhcp_option_long>
 8019fdc:	4603      	mov	r3, r0
 8019fde:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8019fe0:	89b8      	ldrh	r0, [r7, #12]
 8019fe2:	693b      	ldr	r3, [r7, #16]
 8019fe4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019fe8:	2304      	movs	r3, #4
 8019fea:	2236      	movs	r2, #54	; 0x36
 8019fec:	f000 ff9a 	bl	801af24 <dhcp_option>
 8019ff0:	4603      	mov	r3, r0
 8019ff2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8019ff4:	89bc      	ldrh	r4, [r7, #12]
 8019ff6:	693b      	ldr	r3, [r7, #16]
 8019ff8:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8019ffc:	69bb      	ldr	r3, [r7, #24]
 8019ffe:	699b      	ldr	r3, [r3, #24]
 801a000:	4618      	mov	r0, r3
 801a002:	f7f8 f8ba 	bl	801217a <lwip_htonl>
 801a006:	4603      	mov	r3, r0
 801a008:	461a      	mov	r2, r3
 801a00a:	4629      	mov	r1, r5
 801a00c:	4620      	mov	r0, r4
 801a00e:	f001 f815 	bl	801b03c <dhcp_option_long>
 801a012:	4603      	mov	r3, r0
 801a014:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801a016:	89b8      	ldrh	r0, [r7, #12]
 801a018:	693b      	ldr	r3, [r7, #16]
 801a01a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a01e:	2303      	movs	r3, #3
 801a020:	2237      	movs	r2, #55	; 0x37
 801a022:	f000 ff7f 	bl	801af24 <dhcp_option>
 801a026:	4603      	mov	r3, r0
 801a028:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a02a:	2300      	movs	r3, #0
 801a02c:	77bb      	strb	r3, [r7, #30]
 801a02e:	e00e      	b.n	801a04e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801a030:	89b8      	ldrh	r0, [r7, #12]
 801a032:	693b      	ldr	r3, [r7, #16]
 801a034:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a038:	7fbb      	ldrb	r3, [r7, #30]
 801a03a:	4a30      	ldr	r2, [pc, #192]	; (801a0fc <dhcp_select+0x1e4>)
 801a03c:	5cd3      	ldrb	r3, [r2, r3]
 801a03e:	461a      	mov	r2, r3
 801a040:	f000 ffa4 	bl	801af8c <dhcp_option_byte>
 801a044:	4603      	mov	r3, r0
 801a046:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a048:	7fbb      	ldrb	r3, [r7, #30]
 801a04a:	3301      	adds	r3, #1
 801a04c:	77bb      	strb	r3, [r7, #30]
 801a04e:	7fbb      	ldrb	r3, [r7, #30]
 801a050:	2b02      	cmp	r3, #2
 801a052:	d9ed      	bls.n	801a030 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801a054:	89b8      	ldrh	r0, [r7, #12]
 801a056:	693b      	ldr	r3, [r7, #16]
 801a058:	33f0      	adds	r3, #240	; 0xf0
 801a05a:	697a      	ldr	r2, [r7, #20]
 801a05c:	4619      	mov	r1, r3
 801a05e:	f001 fca9 	bl	801b9b4 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801a062:	4b27      	ldr	r3, [pc, #156]	; (801a100 <dhcp_select+0x1e8>)
 801a064:	6818      	ldr	r0, [r3, #0]
 801a066:	4b27      	ldr	r3, [pc, #156]	; (801a104 <dhcp_select+0x1ec>)
 801a068:	9301      	str	r3, [sp, #4]
 801a06a:	687b      	ldr	r3, [r7, #4]
 801a06c:	9300      	str	r3, [sp, #0]
 801a06e:	2343      	movs	r3, #67	; 0x43
 801a070:	4a25      	ldr	r2, [pc, #148]	; (801a108 <dhcp_select+0x1f0>)
 801a072:	6979      	ldr	r1, [r7, #20]
 801a074:	f7ff fbda 	bl	801982c <udp_sendto_if_src>
 801a078:	4603      	mov	r3, r0
 801a07a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801a07c:	6978      	ldr	r0, [r7, #20]
 801a07e:	f7f9 fc1f 	bl	80138c0 <pbuf_free>
 801a082:	e001      	b.n	801a088 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801a084:	23ff      	movs	r3, #255	; 0xff
 801a086:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801a088:	69bb      	ldr	r3, [r7, #24]
 801a08a:	799b      	ldrb	r3, [r3, #6]
 801a08c:	2bff      	cmp	r3, #255	; 0xff
 801a08e:	d005      	beq.n	801a09c <dhcp_select+0x184>
    dhcp->tries++;
 801a090:	69bb      	ldr	r3, [r7, #24]
 801a092:	799b      	ldrb	r3, [r3, #6]
 801a094:	3301      	adds	r3, #1
 801a096:	b2da      	uxtb	r2, r3
 801a098:	69bb      	ldr	r3, [r7, #24]
 801a09a:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801a09c:	69bb      	ldr	r3, [r7, #24]
 801a09e:	799b      	ldrb	r3, [r3, #6]
 801a0a0:	2b05      	cmp	r3, #5
 801a0a2:	d80d      	bhi.n	801a0c0 <dhcp_select+0x1a8>
 801a0a4:	69bb      	ldr	r3, [r7, #24]
 801a0a6:	799b      	ldrb	r3, [r3, #6]
 801a0a8:	461a      	mov	r2, r3
 801a0aa:	2301      	movs	r3, #1
 801a0ac:	4093      	lsls	r3, r2
 801a0ae:	b29b      	uxth	r3, r3
 801a0b0:	461a      	mov	r2, r3
 801a0b2:	0152      	lsls	r2, r2, #5
 801a0b4:	1ad2      	subs	r2, r2, r3
 801a0b6:	0092      	lsls	r2, r2, #2
 801a0b8:	4413      	add	r3, r2
 801a0ba:	00db      	lsls	r3, r3, #3
 801a0bc:	b29b      	uxth	r3, r3
 801a0be:	e001      	b.n	801a0c4 <dhcp_select+0x1ac>
 801a0c0:	f64e 2360 	movw	r3, #60000	; 0xea60
 801a0c4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801a0c6:	89fb      	ldrh	r3, [r7, #14]
 801a0c8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801a0cc:	4a0f      	ldr	r2, [pc, #60]	; (801a10c <dhcp_select+0x1f4>)
 801a0ce:	fb82 1203 	smull	r1, r2, r2, r3
 801a0d2:	1152      	asrs	r2, r2, #5
 801a0d4:	17db      	asrs	r3, r3, #31
 801a0d6:	1ad3      	subs	r3, r2, r3
 801a0d8:	b29a      	uxth	r2, r3
 801a0da:	69bb      	ldr	r3, [r7, #24]
 801a0dc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801a0de:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a0e2:	4618      	mov	r0, r3
 801a0e4:	3720      	adds	r7, #32
 801a0e6:	46bd      	mov	sp, r7
 801a0e8:	bdb0      	pop	{r4, r5, r7, pc}
 801a0ea:	bf00      	nop
 801a0ec:	08026980 	.word	0x08026980
 801a0f0:	08026a2c 	.word	0x08026a2c
 801a0f4:	080269e0 	.word	0x080269e0
 801a0f8:	08026a48 	.word	0x08026a48
 801a0fc:	2000001c 	.word	0x2000001c
 801a100:	2000c23c 	.word	0x2000c23c
 801a104:	0806f64c 	.word	0x0806f64c
 801a108:	0806f650 	.word	0x0806f650
 801a10c:	10624dd3 	.word	0x10624dd3

0801a110 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801a110:	b580      	push	{r7, lr}
 801a112:	b082      	sub	sp, #8
 801a114:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801a116:	4b27      	ldr	r3, [pc, #156]	; (801a1b4 <dhcp_coarse_tmr+0xa4>)
 801a118:	681b      	ldr	r3, [r3, #0]
 801a11a:	607b      	str	r3, [r7, #4]
 801a11c:	e042      	b.n	801a1a4 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a122:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801a124:	683b      	ldr	r3, [r7, #0]
 801a126:	2b00      	cmp	r3, #0
 801a128:	d039      	beq.n	801a19e <dhcp_coarse_tmr+0x8e>
 801a12a:	683b      	ldr	r3, [r7, #0]
 801a12c:	795b      	ldrb	r3, [r3, #5]
 801a12e:	2b00      	cmp	r3, #0
 801a130:	d035      	beq.n	801a19e <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801a132:	683b      	ldr	r3, [r7, #0]
 801a134:	8a9b      	ldrh	r3, [r3, #20]
 801a136:	2b00      	cmp	r3, #0
 801a138:	d012      	beq.n	801a160 <dhcp_coarse_tmr+0x50>
 801a13a:	683b      	ldr	r3, [r7, #0]
 801a13c:	8a5b      	ldrh	r3, [r3, #18]
 801a13e:	3301      	adds	r3, #1
 801a140:	b29a      	uxth	r2, r3
 801a142:	683b      	ldr	r3, [r7, #0]
 801a144:	825a      	strh	r2, [r3, #18]
 801a146:	683b      	ldr	r3, [r7, #0]
 801a148:	8a5a      	ldrh	r2, [r3, #18]
 801a14a:	683b      	ldr	r3, [r7, #0]
 801a14c:	8a9b      	ldrh	r3, [r3, #20]
 801a14e:	429a      	cmp	r2, r3
 801a150:	d106      	bne.n	801a160 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801a152:	6878      	ldr	r0, [r7, #4]
 801a154:	f000 fe32 	bl	801adbc <dhcp_release_and_stop>
        dhcp_start(netif);
 801a158:	6878      	ldr	r0, [r7, #4]
 801a15a:	f000 f969 	bl	801a430 <dhcp_start>
 801a15e:	e01e      	b.n	801a19e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801a160:	683b      	ldr	r3, [r7, #0]
 801a162:	8a1b      	ldrh	r3, [r3, #16]
 801a164:	2b00      	cmp	r3, #0
 801a166:	d00b      	beq.n	801a180 <dhcp_coarse_tmr+0x70>
 801a168:	683b      	ldr	r3, [r7, #0]
 801a16a:	8a1b      	ldrh	r3, [r3, #16]
 801a16c:	1e5a      	subs	r2, r3, #1
 801a16e:	b291      	uxth	r1, r2
 801a170:	683a      	ldr	r2, [r7, #0]
 801a172:	8211      	strh	r1, [r2, #16]
 801a174:	2b01      	cmp	r3, #1
 801a176:	d103      	bne.n	801a180 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801a178:	6878      	ldr	r0, [r7, #4]
 801a17a:	f000 f8c6 	bl	801a30a <dhcp_t2_timeout>
 801a17e:	e00e      	b.n	801a19e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801a180:	683b      	ldr	r3, [r7, #0]
 801a182:	89db      	ldrh	r3, [r3, #14]
 801a184:	2b00      	cmp	r3, #0
 801a186:	d00a      	beq.n	801a19e <dhcp_coarse_tmr+0x8e>
 801a188:	683b      	ldr	r3, [r7, #0]
 801a18a:	89db      	ldrh	r3, [r3, #14]
 801a18c:	1e5a      	subs	r2, r3, #1
 801a18e:	b291      	uxth	r1, r2
 801a190:	683a      	ldr	r2, [r7, #0]
 801a192:	81d1      	strh	r1, [r2, #14]
 801a194:	2b01      	cmp	r3, #1
 801a196:	d102      	bne.n	801a19e <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801a198:	6878      	ldr	r0, [r7, #4]
 801a19a:	f000 f888 	bl	801a2ae <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801a19e:	687b      	ldr	r3, [r7, #4]
 801a1a0:	681b      	ldr	r3, [r3, #0]
 801a1a2:	607b      	str	r3, [r7, #4]
 801a1a4:	687b      	ldr	r3, [r7, #4]
 801a1a6:	2b00      	cmp	r3, #0
 801a1a8:	d1b9      	bne.n	801a11e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801a1aa:	bf00      	nop
 801a1ac:	bf00      	nop
 801a1ae:	3708      	adds	r7, #8
 801a1b0:	46bd      	mov	sp, r7
 801a1b2:	bd80      	pop	{r7, pc}
 801a1b4:	2000c1a8 	.word	0x2000c1a8

0801a1b8 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801a1b8:	b580      	push	{r7, lr}
 801a1ba:	b082      	sub	sp, #8
 801a1bc:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801a1be:	4b16      	ldr	r3, [pc, #88]	; (801a218 <dhcp_fine_tmr+0x60>)
 801a1c0:	681b      	ldr	r3, [r3, #0]
 801a1c2:	607b      	str	r3, [r7, #4]
 801a1c4:	e020      	b.n	801a208 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801a1c6:	687b      	ldr	r3, [r7, #4]
 801a1c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1ca:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801a1cc:	683b      	ldr	r3, [r7, #0]
 801a1ce:	2b00      	cmp	r3, #0
 801a1d0:	d017      	beq.n	801a202 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801a1d2:	683b      	ldr	r3, [r7, #0]
 801a1d4:	891b      	ldrh	r3, [r3, #8]
 801a1d6:	2b01      	cmp	r3, #1
 801a1d8:	d906      	bls.n	801a1e8 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801a1da:	683b      	ldr	r3, [r7, #0]
 801a1dc:	891b      	ldrh	r3, [r3, #8]
 801a1de:	3b01      	subs	r3, #1
 801a1e0:	b29a      	uxth	r2, r3
 801a1e2:	683b      	ldr	r3, [r7, #0]
 801a1e4:	811a      	strh	r2, [r3, #8]
 801a1e6:	e00c      	b.n	801a202 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 801a1e8:	683b      	ldr	r3, [r7, #0]
 801a1ea:	891b      	ldrh	r3, [r3, #8]
 801a1ec:	2b01      	cmp	r3, #1
 801a1ee:	d108      	bne.n	801a202 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801a1f0:	683b      	ldr	r3, [r7, #0]
 801a1f2:	891b      	ldrh	r3, [r3, #8]
 801a1f4:	3b01      	subs	r3, #1
 801a1f6:	b29a      	uxth	r2, r3
 801a1f8:	683b      	ldr	r3, [r7, #0]
 801a1fa:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801a1fc:	6878      	ldr	r0, [r7, #4]
 801a1fe:	f000 f80d 	bl	801a21c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801a202:	687b      	ldr	r3, [r7, #4]
 801a204:	681b      	ldr	r3, [r3, #0]
 801a206:	607b      	str	r3, [r7, #4]
 801a208:	687b      	ldr	r3, [r7, #4]
 801a20a:	2b00      	cmp	r3, #0
 801a20c:	d1db      	bne.n	801a1c6 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801a20e:	bf00      	nop
 801a210:	bf00      	nop
 801a212:	3708      	adds	r7, #8
 801a214:	46bd      	mov	sp, r7
 801a216:	bd80      	pop	{r7, pc}
 801a218:	2000c1a8 	.word	0x2000c1a8

0801a21c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801a21c:	b580      	push	{r7, lr}
 801a21e:	b084      	sub	sp, #16
 801a220:	af00      	add	r7, sp, #0
 801a222:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a224:	687b      	ldr	r3, [r7, #4]
 801a226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a228:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801a22a:	68fb      	ldr	r3, [r7, #12]
 801a22c:	795b      	ldrb	r3, [r3, #5]
 801a22e:	2b0c      	cmp	r3, #12
 801a230:	d003      	beq.n	801a23a <dhcp_timeout+0x1e>
 801a232:	68fb      	ldr	r3, [r7, #12]
 801a234:	795b      	ldrb	r3, [r3, #5]
 801a236:	2b06      	cmp	r3, #6
 801a238:	d103      	bne.n	801a242 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801a23a:	6878      	ldr	r0, [r7, #4]
 801a23c:	f000 fa54 	bl	801a6e8 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801a240:	e031      	b.n	801a2a6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801a242:	68fb      	ldr	r3, [r7, #12]
 801a244:	795b      	ldrb	r3, [r3, #5]
 801a246:	2b01      	cmp	r3, #1
 801a248:	d10e      	bne.n	801a268 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801a24a:	68fb      	ldr	r3, [r7, #12]
 801a24c:	799b      	ldrb	r3, [r3, #6]
 801a24e:	2b05      	cmp	r3, #5
 801a250:	d803      	bhi.n	801a25a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801a252:	6878      	ldr	r0, [r7, #4]
 801a254:	f7ff fe60 	bl	8019f18 <dhcp_select>
}
 801a258:	e025      	b.n	801a2a6 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801a25a:	6878      	ldr	r0, [r7, #4]
 801a25c:	f000 fdae 	bl	801adbc <dhcp_release_and_stop>
      dhcp_start(netif);
 801a260:	6878      	ldr	r0, [r7, #4]
 801a262:	f000 f8e5 	bl	801a430 <dhcp_start>
}
 801a266:	e01e      	b.n	801a2a6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801a268:	68fb      	ldr	r3, [r7, #12]
 801a26a:	795b      	ldrb	r3, [r3, #5]
 801a26c:	2b08      	cmp	r3, #8
 801a26e:	d10b      	bne.n	801a288 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801a270:	68fb      	ldr	r3, [r7, #12]
 801a272:	799b      	ldrb	r3, [r3, #6]
 801a274:	2b01      	cmp	r3, #1
 801a276:	d803      	bhi.n	801a280 <dhcp_timeout+0x64>
      dhcp_check(netif);
 801a278:	6878      	ldr	r0, [r7, #4]
 801a27a:	f7ff fdf3 	bl	8019e64 <dhcp_check>
}
 801a27e:	e012      	b.n	801a2a6 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 801a280:	6878      	ldr	r0, [r7, #4]
 801a282:	f000 fad3 	bl	801a82c <dhcp_bind>
}
 801a286:	e00e      	b.n	801a2a6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801a288:	68fb      	ldr	r3, [r7, #12]
 801a28a:	795b      	ldrb	r3, [r3, #5]
 801a28c:	2b03      	cmp	r3, #3
 801a28e:	d10a      	bne.n	801a2a6 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801a290:	68fb      	ldr	r3, [r7, #12]
 801a292:	799b      	ldrb	r3, [r3, #6]
 801a294:	2b01      	cmp	r3, #1
 801a296:	d803      	bhi.n	801a2a0 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801a298:	6878      	ldr	r0, [r7, #4]
 801a29a:	f000 fcd9 	bl	801ac50 <dhcp_reboot>
}
 801a29e:	e002      	b.n	801a2a6 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801a2a0:	6878      	ldr	r0, [r7, #4]
 801a2a2:	f000 fa21 	bl	801a6e8 <dhcp_discover>
}
 801a2a6:	bf00      	nop
 801a2a8:	3710      	adds	r7, #16
 801a2aa:	46bd      	mov	sp, r7
 801a2ac:	bd80      	pop	{r7, pc}

0801a2ae <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801a2ae:	b580      	push	{r7, lr}
 801a2b0:	b084      	sub	sp, #16
 801a2b2:	af00      	add	r7, sp, #0
 801a2b4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a2b6:	687b      	ldr	r3, [r7, #4]
 801a2b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2ba:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801a2bc:	68fb      	ldr	r3, [r7, #12]
 801a2be:	795b      	ldrb	r3, [r3, #5]
 801a2c0:	2b01      	cmp	r3, #1
 801a2c2:	d007      	beq.n	801a2d4 <dhcp_t1_timeout+0x26>
 801a2c4:	68fb      	ldr	r3, [r7, #12]
 801a2c6:	795b      	ldrb	r3, [r3, #5]
 801a2c8:	2b0a      	cmp	r3, #10
 801a2ca:	d003      	beq.n	801a2d4 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801a2cc:	68fb      	ldr	r3, [r7, #12]
 801a2ce:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801a2d0:	2b05      	cmp	r3, #5
 801a2d2:	d116      	bne.n	801a302 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801a2d4:	6878      	ldr	r0, [r7, #4]
 801a2d6:	f000 fb83 	bl	801a9e0 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801a2da:	68fb      	ldr	r3, [r7, #12]
 801a2dc:	899b      	ldrh	r3, [r3, #12]
 801a2de:	461a      	mov	r2, r3
 801a2e0:	68fb      	ldr	r3, [r7, #12]
 801a2e2:	8a5b      	ldrh	r3, [r3, #18]
 801a2e4:	1ad3      	subs	r3, r2, r3
 801a2e6:	2b01      	cmp	r3, #1
 801a2e8:	dd0b      	ble.n	801a302 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801a2ea:	68fb      	ldr	r3, [r7, #12]
 801a2ec:	899b      	ldrh	r3, [r3, #12]
 801a2ee:	461a      	mov	r2, r3
 801a2f0:	68fb      	ldr	r3, [r7, #12]
 801a2f2:	8a5b      	ldrh	r3, [r3, #18]
 801a2f4:	1ad3      	subs	r3, r2, r3
 801a2f6:	0fda      	lsrs	r2, r3, #31
 801a2f8:	4413      	add	r3, r2
 801a2fa:	105b      	asrs	r3, r3, #1
 801a2fc:	b29a      	uxth	r2, r3
 801a2fe:	68fb      	ldr	r3, [r7, #12]
 801a300:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801a302:	bf00      	nop
 801a304:	3710      	adds	r7, #16
 801a306:	46bd      	mov	sp, r7
 801a308:	bd80      	pop	{r7, pc}

0801a30a <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801a30a:	b580      	push	{r7, lr}
 801a30c:	b084      	sub	sp, #16
 801a30e:	af00      	add	r7, sp, #0
 801a310:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a316:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801a318:	68fb      	ldr	r3, [r7, #12]
 801a31a:	795b      	ldrb	r3, [r3, #5]
 801a31c:	2b01      	cmp	r3, #1
 801a31e:	d00b      	beq.n	801a338 <dhcp_t2_timeout+0x2e>
 801a320:	68fb      	ldr	r3, [r7, #12]
 801a322:	795b      	ldrb	r3, [r3, #5]
 801a324:	2b0a      	cmp	r3, #10
 801a326:	d007      	beq.n	801a338 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801a328:	68fb      	ldr	r3, [r7, #12]
 801a32a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801a32c:	2b05      	cmp	r3, #5
 801a32e:	d003      	beq.n	801a338 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801a330:	68fb      	ldr	r3, [r7, #12]
 801a332:	795b      	ldrb	r3, [r3, #5]
 801a334:	2b04      	cmp	r3, #4
 801a336:	d116      	bne.n	801a366 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801a338:	6878      	ldr	r0, [r7, #4]
 801a33a:	f000 fbed 	bl	801ab18 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801a33e:	68fb      	ldr	r3, [r7, #12]
 801a340:	8a9b      	ldrh	r3, [r3, #20]
 801a342:	461a      	mov	r2, r3
 801a344:	68fb      	ldr	r3, [r7, #12]
 801a346:	8a5b      	ldrh	r3, [r3, #18]
 801a348:	1ad3      	subs	r3, r2, r3
 801a34a:	2b01      	cmp	r3, #1
 801a34c:	dd0b      	ble.n	801a366 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801a34e:	68fb      	ldr	r3, [r7, #12]
 801a350:	8a9b      	ldrh	r3, [r3, #20]
 801a352:	461a      	mov	r2, r3
 801a354:	68fb      	ldr	r3, [r7, #12]
 801a356:	8a5b      	ldrh	r3, [r3, #18]
 801a358:	1ad3      	subs	r3, r2, r3
 801a35a:	0fda      	lsrs	r2, r3, #31
 801a35c:	4413      	add	r3, r2
 801a35e:	105b      	asrs	r3, r3, #1
 801a360:	b29a      	uxth	r2, r3
 801a362:	68fb      	ldr	r3, [r7, #12]
 801a364:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801a366:	bf00      	nop
 801a368:	3710      	adds	r7, #16
 801a36a:	46bd      	mov	sp, r7
 801a36c:	bd80      	pop	{r7, pc}
	...

0801a370 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 801a370:	b580      	push	{r7, lr}
 801a372:	b084      	sub	sp, #16
 801a374:	af00      	add	r7, sp, #0
 801a376:	6078      	str	r0, [r7, #4]
 801a378:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a37e:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801a380:	68fb      	ldr	r3, [r7, #12]
 801a382:	2200      	movs	r2, #0
 801a384:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801a386:	68fb      	ldr	r3, [r7, #12]
 801a388:	2200      	movs	r2, #0
 801a38a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801a38c:	4b26      	ldr	r3, [pc, #152]	; (801a428 <dhcp_handle_ack+0xb8>)
 801a38e:	78db      	ldrb	r3, [r3, #3]
 801a390:	2b00      	cmp	r3, #0
 801a392:	d003      	beq.n	801a39c <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801a394:	4b25      	ldr	r3, [pc, #148]	; (801a42c <dhcp_handle_ack+0xbc>)
 801a396:	68da      	ldr	r2, [r3, #12]
 801a398:	68fb      	ldr	r3, [r7, #12]
 801a39a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801a39c:	4b22      	ldr	r3, [pc, #136]	; (801a428 <dhcp_handle_ack+0xb8>)
 801a39e:	791b      	ldrb	r3, [r3, #4]
 801a3a0:	2b00      	cmp	r3, #0
 801a3a2:	d004      	beq.n	801a3ae <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801a3a4:	4b21      	ldr	r3, [pc, #132]	; (801a42c <dhcp_handle_ack+0xbc>)
 801a3a6:	691a      	ldr	r2, [r3, #16]
 801a3a8:	68fb      	ldr	r3, [r7, #12]
 801a3aa:	62da      	str	r2, [r3, #44]	; 0x2c
 801a3ac:	e004      	b.n	801a3b8 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801a3ae:	68fb      	ldr	r3, [r7, #12]
 801a3b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a3b2:	085a      	lsrs	r2, r3, #1
 801a3b4:	68fb      	ldr	r3, [r7, #12]
 801a3b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801a3b8:	4b1b      	ldr	r3, [pc, #108]	; (801a428 <dhcp_handle_ack+0xb8>)
 801a3ba:	795b      	ldrb	r3, [r3, #5]
 801a3bc:	2b00      	cmp	r3, #0
 801a3be:	d004      	beq.n	801a3ca <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801a3c0:	4b1a      	ldr	r3, [pc, #104]	; (801a42c <dhcp_handle_ack+0xbc>)
 801a3c2:	695a      	ldr	r2, [r3, #20]
 801a3c4:	68fb      	ldr	r3, [r7, #12]
 801a3c6:	631a      	str	r2, [r3, #48]	; 0x30
 801a3c8:	e007      	b.n	801a3da <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801a3ca:	68fb      	ldr	r3, [r7, #12]
 801a3cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a3ce:	4613      	mov	r3, r2
 801a3d0:	00db      	lsls	r3, r3, #3
 801a3d2:	1a9b      	subs	r3, r3, r2
 801a3d4:	08da      	lsrs	r2, r3, #3
 801a3d6:	68fb      	ldr	r3, [r7, #12]
 801a3d8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801a3da:	683b      	ldr	r3, [r7, #0]
 801a3dc:	691a      	ldr	r2, [r3, #16]
 801a3de:	68fb      	ldr	r3, [r7, #12]
 801a3e0:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801a3e2:	4b11      	ldr	r3, [pc, #68]	; (801a428 <dhcp_handle_ack+0xb8>)
 801a3e4:	799b      	ldrb	r3, [r3, #6]
 801a3e6:	2b00      	cmp	r3, #0
 801a3e8:	d00b      	beq.n	801a402 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801a3ea:	4b10      	ldr	r3, [pc, #64]	; (801a42c <dhcp_handle_ack+0xbc>)
 801a3ec:	699b      	ldr	r3, [r3, #24]
 801a3ee:	4618      	mov	r0, r3
 801a3f0:	f7f7 fec3 	bl	801217a <lwip_htonl>
 801a3f4:	4602      	mov	r2, r0
 801a3f6:	68fb      	ldr	r3, [r7, #12]
 801a3f8:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801a3fa:	68fb      	ldr	r3, [r7, #12]
 801a3fc:	2201      	movs	r2, #1
 801a3fe:	71da      	strb	r2, [r3, #7]
 801a400:	e002      	b.n	801a408 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801a402:	68fb      	ldr	r3, [r7, #12]
 801a404:	2200      	movs	r2, #0
 801a406:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801a408:	4b07      	ldr	r3, [pc, #28]	; (801a428 <dhcp_handle_ack+0xb8>)
 801a40a:	79db      	ldrb	r3, [r3, #7]
 801a40c:	2b00      	cmp	r3, #0
 801a40e:	d007      	beq.n	801a420 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801a410:	4b06      	ldr	r3, [pc, #24]	; (801a42c <dhcp_handle_ack+0xbc>)
 801a412:	69db      	ldr	r3, [r3, #28]
 801a414:	4618      	mov	r0, r3
 801a416:	f7f7 feb0 	bl	801217a <lwip_htonl>
 801a41a:	4602      	mov	r2, r0
 801a41c:	68fb      	ldr	r3, [r7, #12]
 801a41e:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801a420:	bf00      	nop
 801a422:	3710      	adds	r7, #16
 801a424:	46bd      	mov	sp, r7
 801a426:	bd80      	pop	{r7, pc}
 801a428:	2000c234 	.word	0x2000c234
 801a42c:	2000c214 	.word	0x2000c214

0801a430 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801a430:	b580      	push	{r7, lr}
 801a432:	b084      	sub	sp, #16
 801a434:	af00      	add	r7, sp, #0
 801a436:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801a438:	687b      	ldr	r3, [r7, #4]
 801a43a:	2b00      	cmp	r3, #0
 801a43c:	d109      	bne.n	801a452 <dhcp_start+0x22>
 801a43e:	4b37      	ldr	r3, [pc, #220]	; (801a51c <dhcp_start+0xec>)
 801a440:	f240 22e7 	movw	r2, #743	; 0x2e7
 801a444:	4936      	ldr	r1, [pc, #216]	; (801a520 <dhcp_start+0xf0>)
 801a446:	4837      	ldr	r0, [pc, #220]	; (801a524 <dhcp_start+0xf4>)
 801a448:	f003 ff46 	bl	801e2d8 <printf>
 801a44c:	f06f 030f 	mvn.w	r3, #15
 801a450:	e060      	b.n	801a514 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801a452:	687b      	ldr	r3, [r7, #4]
 801a454:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a458:	f003 0301 	and.w	r3, r3, #1
 801a45c:	2b00      	cmp	r3, #0
 801a45e:	d109      	bne.n	801a474 <dhcp_start+0x44>
 801a460:	4b2e      	ldr	r3, [pc, #184]	; (801a51c <dhcp_start+0xec>)
 801a462:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801a466:	4930      	ldr	r1, [pc, #192]	; (801a528 <dhcp_start+0xf8>)
 801a468:	482e      	ldr	r0, [pc, #184]	; (801a524 <dhcp_start+0xf4>)
 801a46a:	f003 ff35 	bl	801e2d8 <printf>
 801a46e:	f06f 030f 	mvn.w	r3, #15
 801a472:	e04f      	b.n	801a514 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a478:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801a47a:	687b      	ldr	r3, [r7, #4]
 801a47c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a47e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801a482:	d202      	bcs.n	801a48a <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801a484:	f04f 33ff 	mov.w	r3, #4294967295
 801a488:	e044      	b.n	801a514 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801a48a:	68fb      	ldr	r3, [r7, #12]
 801a48c:	2b00      	cmp	r3, #0
 801a48e:	d10d      	bne.n	801a4ac <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801a490:	2034      	movs	r0, #52	; 0x34
 801a492:	f7f8 f991 	bl	80127b8 <mem_malloc>
 801a496:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801a498:	68fb      	ldr	r3, [r7, #12]
 801a49a:	2b00      	cmp	r3, #0
 801a49c:	d102      	bne.n	801a4a4 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801a49e:	f04f 33ff 	mov.w	r3, #4294967295
 801a4a2:	e037      	b.n	801a514 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801a4a4:	687b      	ldr	r3, [r7, #4]
 801a4a6:	68fa      	ldr	r2, [r7, #12]
 801a4a8:	625a      	str	r2, [r3, #36]	; 0x24
 801a4aa:	e005      	b.n	801a4b8 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 801a4ac:	68fb      	ldr	r3, [r7, #12]
 801a4ae:	791b      	ldrb	r3, [r3, #4]
 801a4b0:	2b00      	cmp	r3, #0
 801a4b2:	d001      	beq.n	801a4b8 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801a4b4:	f7ff fc92 	bl	8019ddc <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801a4b8:	2234      	movs	r2, #52	; 0x34
 801a4ba:	2100      	movs	r1, #0
 801a4bc:	68f8      	ldr	r0, [r7, #12]
 801a4be:	f003 ff03 	bl	801e2c8 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801a4c2:	f7ff fc39 	bl	8019d38 <dhcp_inc_pcb_refcount>
 801a4c6:	4603      	mov	r3, r0
 801a4c8:	2b00      	cmp	r3, #0
 801a4ca:	d002      	beq.n	801a4d2 <dhcp_start+0xa2>
    return ERR_MEM;
 801a4cc:	f04f 33ff 	mov.w	r3, #4294967295
 801a4d0:	e020      	b.n	801a514 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801a4d2:	68fb      	ldr	r3, [r7, #12]
 801a4d4:	2201      	movs	r2, #1
 801a4d6:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 801a4d8:	687b      	ldr	r3, [r7, #4]
 801a4da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a4de:	f003 0304 	and.w	r3, r3, #4
 801a4e2:	2b00      	cmp	r3, #0
 801a4e4:	d105      	bne.n	801a4f2 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801a4e6:	2102      	movs	r1, #2
 801a4e8:	68f8      	ldr	r0, [r7, #12]
 801a4ea:	f000 fd01 	bl	801aef0 <dhcp_set_state>
    return ERR_OK;
 801a4ee:	2300      	movs	r3, #0
 801a4f0:	e010      	b.n	801a514 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801a4f2:	6878      	ldr	r0, [r7, #4]
 801a4f4:	f000 f8f8 	bl	801a6e8 <dhcp_discover>
 801a4f8:	4603      	mov	r3, r0
 801a4fa:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801a4fc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801a500:	2b00      	cmp	r3, #0
 801a502:	d005      	beq.n	801a510 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801a504:	6878      	ldr	r0, [r7, #4]
 801a506:	f000 fc59 	bl	801adbc <dhcp_release_and_stop>
    return ERR_MEM;
 801a50a:	f04f 33ff 	mov.w	r3, #4294967295
 801a50e:	e001      	b.n	801a514 <dhcp_start+0xe4>
  }
  return result;
 801a510:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801a514:	4618      	mov	r0, r3
 801a516:	3710      	adds	r7, #16
 801a518:	46bd      	mov	sp, r7
 801a51a:	bd80      	pop	{r7, pc}
 801a51c:	08026980 	.word	0x08026980
 801a520:	08026a64 	.word	0x08026a64
 801a524:	080269e0 	.word	0x080269e0
 801a528:	08026aa8 	.word	0x08026aa8

0801a52c <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 801a52c:	b580      	push	{r7, lr}
 801a52e:	b084      	sub	sp, #16
 801a530:	af00      	add	r7, sp, #0
 801a532:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a534:	687b      	ldr	r3, [r7, #4]
 801a536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a538:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801a53a:	68fb      	ldr	r3, [r7, #12]
 801a53c:	2b00      	cmp	r3, #0
 801a53e:	d025      	beq.n	801a58c <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 801a540:	68fb      	ldr	r3, [r7, #12]
 801a542:	795b      	ldrb	r3, [r3, #5]
 801a544:	2b0a      	cmp	r3, #10
 801a546:	d008      	beq.n	801a55a <dhcp_network_changed+0x2e>
 801a548:	2b0a      	cmp	r3, #10
 801a54a:	dc0d      	bgt.n	801a568 <dhcp_network_changed+0x3c>
 801a54c:	2b00      	cmp	r3, #0
 801a54e:	d01f      	beq.n	801a590 <dhcp_network_changed+0x64>
 801a550:	2b00      	cmp	r3, #0
 801a552:	db09      	blt.n	801a568 <dhcp_network_changed+0x3c>
 801a554:	3b03      	subs	r3, #3
 801a556:	2b02      	cmp	r3, #2
 801a558:	d806      	bhi.n	801a568 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801a55a:	68fb      	ldr	r3, [r7, #12]
 801a55c:	2200      	movs	r2, #0
 801a55e:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 801a560:	6878      	ldr	r0, [r7, #4]
 801a562:	f000 fb75 	bl	801ac50 <dhcp_reboot>
      break;
 801a566:	e014      	b.n	801a592 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801a568:	68fb      	ldr	r3, [r7, #12]
 801a56a:	795b      	ldrb	r3, [r3, #5]
 801a56c:	2b0c      	cmp	r3, #12
 801a56e:	d906      	bls.n	801a57e <dhcp_network_changed+0x52>
 801a570:	4b09      	ldr	r3, [pc, #36]	; (801a598 <dhcp_network_changed+0x6c>)
 801a572:	f240 326d 	movw	r2, #877	; 0x36d
 801a576:	4909      	ldr	r1, [pc, #36]	; (801a59c <dhcp_network_changed+0x70>)
 801a578:	4809      	ldr	r0, [pc, #36]	; (801a5a0 <dhcp_network_changed+0x74>)
 801a57a:	f003 fead 	bl	801e2d8 <printf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801a57e:	68fb      	ldr	r3, [r7, #12]
 801a580:	2200      	movs	r2, #0
 801a582:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 801a584:	6878      	ldr	r0, [r7, #4]
 801a586:	f000 f8af 	bl	801a6e8 <dhcp_discover>
      break;
 801a58a:	e002      	b.n	801a592 <dhcp_network_changed+0x66>
    return;
 801a58c:	bf00      	nop
 801a58e:	e000      	b.n	801a592 <dhcp_network_changed+0x66>
      break;
 801a590:	bf00      	nop
  }
}
 801a592:	3710      	adds	r7, #16
 801a594:	46bd      	mov	sp, r7
 801a596:	bd80      	pop	{r7, pc}
 801a598:	08026980 	.word	0x08026980
 801a59c:	08026acc 	.word	0x08026acc
 801a5a0:	080269e0 	.word	0x080269e0

0801a5a4 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801a5a4:	b580      	push	{r7, lr}
 801a5a6:	b084      	sub	sp, #16
 801a5a8:	af00      	add	r7, sp, #0
 801a5aa:	6078      	str	r0, [r7, #4]
 801a5ac:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801a5ae:	687b      	ldr	r3, [r7, #4]
 801a5b0:	2b00      	cmp	r3, #0
 801a5b2:	d107      	bne.n	801a5c4 <dhcp_arp_reply+0x20>
 801a5b4:	4b0e      	ldr	r3, [pc, #56]	; (801a5f0 <dhcp_arp_reply+0x4c>)
 801a5b6:	f240 328b 	movw	r2, #907	; 0x38b
 801a5ba:	490e      	ldr	r1, [pc, #56]	; (801a5f4 <dhcp_arp_reply+0x50>)
 801a5bc:	480e      	ldr	r0, [pc, #56]	; (801a5f8 <dhcp_arp_reply+0x54>)
 801a5be:	f003 fe8b 	bl	801e2d8 <printf>
 801a5c2:	e012      	b.n	801a5ea <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801a5c4:	687b      	ldr	r3, [r7, #4]
 801a5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a5c8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801a5ca:	68fb      	ldr	r3, [r7, #12]
 801a5cc:	2b00      	cmp	r3, #0
 801a5ce:	d00c      	beq.n	801a5ea <dhcp_arp_reply+0x46>
 801a5d0:	68fb      	ldr	r3, [r7, #12]
 801a5d2:	795b      	ldrb	r3, [r3, #5]
 801a5d4:	2b08      	cmp	r3, #8
 801a5d6:	d108      	bne.n	801a5ea <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801a5d8:	683b      	ldr	r3, [r7, #0]
 801a5da:	681a      	ldr	r2, [r3, #0]
 801a5dc:	68fb      	ldr	r3, [r7, #12]
 801a5de:	69db      	ldr	r3, [r3, #28]
 801a5e0:	429a      	cmp	r2, r3
 801a5e2:	d102      	bne.n	801a5ea <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801a5e4:	6878      	ldr	r0, [r7, #4]
 801a5e6:	f000 f809 	bl	801a5fc <dhcp_decline>
    }
  }
}
 801a5ea:	3710      	adds	r7, #16
 801a5ec:	46bd      	mov	sp, r7
 801a5ee:	bd80      	pop	{r7, pc}
 801a5f0:	08026980 	.word	0x08026980
 801a5f4:	08026a64 	.word	0x08026a64
 801a5f8:	080269e0 	.word	0x080269e0

0801a5fc <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801a5fc:	b5b0      	push	{r4, r5, r7, lr}
 801a5fe:	b08a      	sub	sp, #40	; 0x28
 801a600:	af02      	add	r7, sp, #8
 801a602:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a604:	687b      	ldr	r3, [r7, #4]
 801a606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a608:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801a60a:	210c      	movs	r1, #12
 801a60c:	69b8      	ldr	r0, [r7, #24]
 801a60e:	f000 fc6f 	bl	801aef0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801a612:	f107 030c 	add.w	r3, r7, #12
 801a616:	2204      	movs	r2, #4
 801a618:	69b9      	ldr	r1, [r7, #24]
 801a61a:	6878      	ldr	r0, [r7, #4]
 801a61c:	f001 f8f4 	bl	801b808 <dhcp_create_msg>
 801a620:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801a622:	697b      	ldr	r3, [r7, #20]
 801a624:	2b00      	cmp	r3, #0
 801a626:	d035      	beq.n	801a694 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801a628:	697b      	ldr	r3, [r7, #20]
 801a62a:	685b      	ldr	r3, [r3, #4]
 801a62c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801a62e:	89b8      	ldrh	r0, [r7, #12]
 801a630:	693b      	ldr	r3, [r7, #16]
 801a632:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a636:	2304      	movs	r3, #4
 801a638:	2232      	movs	r2, #50	; 0x32
 801a63a:	f000 fc73 	bl	801af24 <dhcp_option>
 801a63e:	4603      	mov	r3, r0
 801a640:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801a642:	89bc      	ldrh	r4, [r7, #12]
 801a644:	693b      	ldr	r3, [r7, #16]
 801a646:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801a64a:	69bb      	ldr	r3, [r7, #24]
 801a64c:	69db      	ldr	r3, [r3, #28]
 801a64e:	4618      	mov	r0, r3
 801a650:	f7f7 fd93 	bl	801217a <lwip_htonl>
 801a654:	4603      	mov	r3, r0
 801a656:	461a      	mov	r2, r3
 801a658:	4629      	mov	r1, r5
 801a65a:	4620      	mov	r0, r4
 801a65c:	f000 fcee 	bl	801b03c <dhcp_option_long>
 801a660:	4603      	mov	r3, r0
 801a662:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801a664:	89b8      	ldrh	r0, [r7, #12]
 801a666:	693b      	ldr	r3, [r7, #16]
 801a668:	33f0      	adds	r3, #240	; 0xf0
 801a66a:	697a      	ldr	r2, [r7, #20]
 801a66c:	4619      	mov	r1, r3
 801a66e:	f001 f9a1 	bl	801b9b4 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801a672:	4b19      	ldr	r3, [pc, #100]	; (801a6d8 <dhcp_decline+0xdc>)
 801a674:	6818      	ldr	r0, [r3, #0]
 801a676:	4b19      	ldr	r3, [pc, #100]	; (801a6dc <dhcp_decline+0xe0>)
 801a678:	9301      	str	r3, [sp, #4]
 801a67a:	687b      	ldr	r3, [r7, #4]
 801a67c:	9300      	str	r3, [sp, #0]
 801a67e:	2343      	movs	r3, #67	; 0x43
 801a680:	4a17      	ldr	r2, [pc, #92]	; (801a6e0 <dhcp_decline+0xe4>)
 801a682:	6979      	ldr	r1, [r7, #20]
 801a684:	f7ff f8d2 	bl	801982c <udp_sendto_if_src>
 801a688:	4603      	mov	r3, r0
 801a68a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801a68c:	6978      	ldr	r0, [r7, #20]
 801a68e:	f7f9 f917 	bl	80138c0 <pbuf_free>
 801a692:	e001      	b.n	801a698 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801a694:	23ff      	movs	r3, #255	; 0xff
 801a696:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801a698:	69bb      	ldr	r3, [r7, #24]
 801a69a:	799b      	ldrb	r3, [r3, #6]
 801a69c:	2bff      	cmp	r3, #255	; 0xff
 801a69e:	d005      	beq.n	801a6ac <dhcp_decline+0xb0>
    dhcp->tries++;
 801a6a0:	69bb      	ldr	r3, [r7, #24]
 801a6a2:	799b      	ldrb	r3, [r3, #6]
 801a6a4:	3301      	adds	r3, #1
 801a6a6:	b2da      	uxtb	r2, r3
 801a6a8:	69bb      	ldr	r3, [r7, #24]
 801a6aa:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 801a6ac:	f242 7310 	movw	r3, #10000	; 0x2710
 801a6b0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801a6b2:	89fb      	ldrh	r3, [r7, #14]
 801a6b4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801a6b8:	4a0a      	ldr	r2, [pc, #40]	; (801a6e4 <dhcp_decline+0xe8>)
 801a6ba:	fb82 1203 	smull	r1, r2, r2, r3
 801a6be:	1152      	asrs	r2, r2, #5
 801a6c0:	17db      	asrs	r3, r3, #31
 801a6c2:	1ad3      	subs	r3, r2, r3
 801a6c4:	b29a      	uxth	r2, r3
 801a6c6:	69bb      	ldr	r3, [r7, #24]
 801a6c8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801a6ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a6ce:	4618      	mov	r0, r3
 801a6d0:	3720      	adds	r7, #32
 801a6d2:	46bd      	mov	sp, r7
 801a6d4:	bdb0      	pop	{r4, r5, r7, pc}
 801a6d6:	bf00      	nop
 801a6d8:	2000c23c 	.word	0x2000c23c
 801a6dc:	0806f64c 	.word	0x0806f64c
 801a6e0:	0806f650 	.word	0x0806f650
 801a6e4:	10624dd3 	.word	0x10624dd3

0801a6e8 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801a6e8:	b580      	push	{r7, lr}
 801a6ea:	b08a      	sub	sp, #40	; 0x28
 801a6ec:	af02      	add	r7, sp, #8
 801a6ee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a6f0:	687b      	ldr	r3, [r7, #4]
 801a6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a6f4:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801a6f6:	2300      	movs	r3, #0
 801a6f8:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801a6fa:	69bb      	ldr	r3, [r7, #24]
 801a6fc:	2200      	movs	r2, #0
 801a6fe:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801a700:	2106      	movs	r1, #6
 801a702:	69b8      	ldr	r0, [r7, #24]
 801a704:	f000 fbf4 	bl	801aef0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801a708:	f107 0308 	add.w	r3, r7, #8
 801a70c:	2201      	movs	r2, #1
 801a70e:	69b9      	ldr	r1, [r7, #24]
 801a710:	6878      	ldr	r0, [r7, #4]
 801a712:	f001 f879 	bl	801b808 <dhcp_create_msg>
 801a716:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801a718:	693b      	ldr	r3, [r7, #16]
 801a71a:	2b00      	cmp	r3, #0
 801a71c:	d04b      	beq.n	801a7b6 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801a71e:	693b      	ldr	r3, [r7, #16]
 801a720:	685b      	ldr	r3, [r3, #4]
 801a722:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801a724:	8938      	ldrh	r0, [r7, #8]
 801a726:	68fb      	ldr	r3, [r7, #12]
 801a728:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a72c:	2302      	movs	r3, #2
 801a72e:	2239      	movs	r2, #57	; 0x39
 801a730:	f000 fbf8 	bl	801af24 <dhcp_option>
 801a734:	4603      	mov	r3, r0
 801a736:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801a738:	8938      	ldrh	r0, [r7, #8]
 801a73a:	68fb      	ldr	r3, [r7, #12]
 801a73c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a740:	687b      	ldr	r3, [r7, #4]
 801a742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a744:	461a      	mov	r2, r3
 801a746:	f000 fc47 	bl	801afd8 <dhcp_option_short>
 801a74a:	4603      	mov	r3, r0
 801a74c:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801a74e:	8938      	ldrh	r0, [r7, #8]
 801a750:	68fb      	ldr	r3, [r7, #12]
 801a752:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a756:	2303      	movs	r3, #3
 801a758:	2237      	movs	r2, #55	; 0x37
 801a75a:	f000 fbe3 	bl	801af24 <dhcp_option>
 801a75e:	4603      	mov	r3, r0
 801a760:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a762:	2300      	movs	r3, #0
 801a764:	77fb      	strb	r3, [r7, #31]
 801a766:	e00e      	b.n	801a786 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801a768:	8938      	ldrh	r0, [r7, #8]
 801a76a:	68fb      	ldr	r3, [r7, #12]
 801a76c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a770:	7ffb      	ldrb	r3, [r7, #31]
 801a772:	4a29      	ldr	r2, [pc, #164]	; (801a818 <dhcp_discover+0x130>)
 801a774:	5cd3      	ldrb	r3, [r2, r3]
 801a776:	461a      	mov	r2, r3
 801a778:	f000 fc08 	bl	801af8c <dhcp_option_byte>
 801a77c:	4603      	mov	r3, r0
 801a77e:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a780:	7ffb      	ldrb	r3, [r7, #31]
 801a782:	3301      	adds	r3, #1
 801a784:	77fb      	strb	r3, [r7, #31]
 801a786:	7ffb      	ldrb	r3, [r7, #31]
 801a788:	2b02      	cmp	r3, #2
 801a78a:	d9ed      	bls.n	801a768 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801a78c:	8938      	ldrh	r0, [r7, #8]
 801a78e:	68fb      	ldr	r3, [r7, #12]
 801a790:	33f0      	adds	r3, #240	; 0xf0
 801a792:	693a      	ldr	r2, [r7, #16]
 801a794:	4619      	mov	r1, r3
 801a796:	f001 f90d 	bl	801b9b4 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801a79a:	4b20      	ldr	r3, [pc, #128]	; (801a81c <dhcp_discover+0x134>)
 801a79c:	6818      	ldr	r0, [r3, #0]
 801a79e:	4b20      	ldr	r3, [pc, #128]	; (801a820 <dhcp_discover+0x138>)
 801a7a0:	9301      	str	r3, [sp, #4]
 801a7a2:	687b      	ldr	r3, [r7, #4]
 801a7a4:	9300      	str	r3, [sp, #0]
 801a7a6:	2343      	movs	r3, #67	; 0x43
 801a7a8:	4a1e      	ldr	r2, [pc, #120]	; (801a824 <dhcp_discover+0x13c>)
 801a7aa:	6939      	ldr	r1, [r7, #16]
 801a7ac:	f7ff f83e 	bl	801982c <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801a7b0:	6938      	ldr	r0, [r7, #16]
 801a7b2:	f7f9 f885 	bl	80138c0 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801a7b6:	69bb      	ldr	r3, [r7, #24]
 801a7b8:	799b      	ldrb	r3, [r3, #6]
 801a7ba:	2bff      	cmp	r3, #255	; 0xff
 801a7bc:	d005      	beq.n	801a7ca <dhcp_discover+0xe2>
    dhcp->tries++;
 801a7be:	69bb      	ldr	r3, [r7, #24]
 801a7c0:	799b      	ldrb	r3, [r3, #6]
 801a7c2:	3301      	adds	r3, #1
 801a7c4:	b2da      	uxtb	r2, r3
 801a7c6:	69bb      	ldr	r3, [r7, #24]
 801a7c8:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801a7ca:	69bb      	ldr	r3, [r7, #24]
 801a7cc:	799b      	ldrb	r3, [r3, #6]
 801a7ce:	2b05      	cmp	r3, #5
 801a7d0:	d80d      	bhi.n	801a7ee <dhcp_discover+0x106>
 801a7d2:	69bb      	ldr	r3, [r7, #24]
 801a7d4:	799b      	ldrb	r3, [r3, #6]
 801a7d6:	461a      	mov	r2, r3
 801a7d8:	2301      	movs	r3, #1
 801a7da:	4093      	lsls	r3, r2
 801a7dc:	b29b      	uxth	r3, r3
 801a7de:	461a      	mov	r2, r3
 801a7e0:	0152      	lsls	r2, r2, #5
 801a7e2:	1ad2      	subs	r2, r2, r3
 801a7e4:	0092      	lsls	r2, r2, #2
 801a7e6:	4413      	add	r3, r2
 801a7e8:	00db      	lsls	r3, r3, #3
 801a7ea:	b29b      	uxth	r3, r3
 801a7ec:	e001      	b.n	801a7f2 <dhcp_discover+0x10a>
 801a7ee:	f64e 2360 	movw	r3, #60000	; 0xea60
 801a7f2:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801a7f4:	897b      	ldrh	r3, [r7, #10]
 801a7f6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801a7fa:	4a0b      	ldr	r2, [pc, #44]	; (801a828 <dhcp_discover+0x140>)
 801a7fc:	fb82 1203 	smull	r1, r2, r2, r3
 801a800:	1152      	asrs	r2, r2, #5
 801a802:	17db      	asrs	r3, r3, #31
 801a804:	1ad3      	subs	r3, r2, r3
 801a806:	b29a      	uxth	r2, r3
 801a808:	69bb      	ldr	r3, [r7, #24]
 801a80a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801a80c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a810:	4618      	mov	r0, r3
 801a812:	3720      	adds	r7, #32
 801a814:	46bd      	mov	sp, r7
 801a816:	bd80      	pop	{r7, pc}
 801a818:	2000001c 	.word	0x2000001c
 801a81c:	2000c23c 	.word	0x2000c23c
 801a820:	0806f64c 	.word	0x0806f64c
 801a824:	0806f650 	.word	0x0806f650
 801a828:	10624dd3 	.word	0x10624dd3

0801a82c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801a82c:	b580      	push	{r7, lr}
 801a82e:	b088      	sub	sp, #32
 801a830:	af00      	add	r7, sp, #0
 801a832:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801a834:	687b      	ldr	r3, [r7, #4]
 801a836:	2b00      	cmp	r3, #0
 801a838:	d107      	bne.n	801a84a <dhcp_bind+0x1e>
 801a83a:	4b64      	ldr	r3, [pc, #400]	; (801a9cc <dhcp_bind+0x1a0>)
 801a83c:	f240 4215 	movw	r2, #1045	; 0x415
 801a840:	4963      	ldr	r1, [pc, #396]	; (801a9d0 <dhcp_bind+0x1a4>)
 801a842:	4864      	ldr	r0, [pc, #400]	; (801a9d4 <dhcp_bind+0x1a8>)
 801a844:	f003 fd48 	bl	801e2d8 <printf>
 801a848:	e0bc      	b.n	801a9c4 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801a84a:	687b      	ldr	r3, [r7, #4]
 801a84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a84e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801a850:	69bb      	ldr	r3, [r7, #24]
 801a852:	2b00      	cmp	r3, #0
 801a854:	d107      	bne.n	801a866 <dhcp_bind+0x3a>
 801a856:	4b5d      	ldr	r3, [pc, #372]	; (801a9cc <dhcp_bind+0x1a0>)
 801a858:	f240 4217 	movw	r2, #1047	; 0x417
 801a85c:	495e      	ldr	r1, [pc, #376]	; (801a9d8 <dhcp_bind+0x1ac>)
 801a85e:	485d      	ldr	r0, [pc, #372]	; (801a9d4 <dhcp_bind+0x1a8>)
 801a860:	f003 fd3a 	bl	801e2d8 <printf>
 801a864:	e0ae      	b.n	801a9c4 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801a866:	69bb      	ldr	r3, [r7, #24]
 801a868:	2200      	movs	r2, #0
 801a86a:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801a86c:	69bb      	ldr	r3, [r7, #24]
 801a86e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a870:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a874:	d019      	beq.n	801a8aa <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801a876:	69bb      	ldr	r3, [r7, #24]
 801a878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a87a:	331e      	adds	r3, #30
 801a87c:	4a57      	ldr	r2, [pc, #348]	; (801a9dc <dhcp_bind+0x1b0>)
 801a87e:	fba2 2303 	umull	r2, r3, r2, r3
 801a882:	095b      	lsrs	r3, r3, #5
 801a884:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801a886:	69fb      	ldr	r3, [r7, #28]
 801a888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a88c:	d302      	bcc.n	801a894 <dhcp_bind+0x68>
      timeout = 0xffff;
 801a88e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a892:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801a894:	69fb      	ldr	r3, [r7, #28]
 801a896:	b29a      	uxth	r2, r3
 801a898:	69bb      	ldr	r3, [r7, #24]
 801a89a:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 801a89c:	69bb      	ldr	r3, [r7, #24]
 801a89e:	8a9b      	ldrh	r3, [r3, #20]
 801a8a0:	2b00      	cmp	r3, #0
 801a8a2:	d102      	bne.n	801a8aa <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801a8a4:	69bb      	ldr	r3, [r7, #24]
 801a8a6:	2201      	movs	r2, #1
 801a8a8:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801a8aa:	69bb      	ldr	r3, [r7, #24]
 801a8ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a8ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a8b2:	d01d      	beq.n	801a8f0 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801a8b4:	69bb      	ldr	r3, [r7, #24]
 801a8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a8b8:	331e      	adds	r3, #30
 801a8ba:	4a48      	ldr	r2, [pc, #288]	; (801a9dc <dhcp_bind+0x1b0>)
 801a8bc:	fba2 2303 	umull	r2, r3, r2, r3
 801a8c0:	095b      	lsrs	r3, r3, #5
 801a8c2:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801a8c4:	69fb      	ldr	r3, [r7, #28]
 801a8c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a8ca:	d302      	bcc.n	801a8d2 <dhcp_bind+0xa6>
      timeout = 0xffff;
 801a8cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a8d0:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801a8d2:	69fb      	ldr	r3, [r7, #28]
 801a8d4:	b29a      	uxth	r2, r3
 801a8d6:	69bb      	ldr	r3, [r7, #24]
 801a8d8:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801a8da:	69bb      	ldr	r3, [r7, #24]
 801a8dc:	895b      	ldrh	r3, [r3, #10]
 801a8de:	2b00      	cmp	r3, #0
 801a8e0:	d102      	bne.n	801a8e8 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801a8e2:	69bb      	ldr	r3, [r7, #24]
 801a8e4:	2201      	movs	r2, #1
 801a8e6:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801a8e8:	69bb      	ldr	r3, [r7, #24]
 801a8ea:	895a      	ldrh	r2, [r3, #10]
 801a8ec:	69bb      	ldr	r3, [r7, #24]
 801a8ee:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801a8f0:	69bb      	ldr	r3, [r7, #24]
 801a8f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a8f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a8f8:	d01d      	beq.n	801a936 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801a8fa:	69bb      	ldr	r3, [r7, #24]
 801a8fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a8fe:	331e      	adds	r3, #30
 801a900:	4a36      	ldr	r2, [pc, #216]	; (801a9dc <dhcp_bind+0x1b0>)
 801a902:	fba2 2303 	umull	r2, r3, r2, r3
 801a906:	095b      	lsrs	r3, r3, #5
 801a908:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801a90a:	69fb      	ldr	r3, [r7, #28]
 801a90c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a910:	d302      	bcc.n	801a918 <dhcp_bind+0xec>
      timeout = 0xffff;
 801a912:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a916:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801a918:	69fb      	ldr	r3, [r7, #28]
 801a91a:	b29a      	uxth	r2, r3
 801a91c:	69bb      	ldr	r3, [r7, #24]
 801a91e:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801a920:	69bb      	ldr	r3, [r7, #24]
 801a922:	899b      	ldrh	r3, [r3, #12]
 801a924:	2b00      	cmp	r3, #0
 801a926:	d102      	bne.n	801a92e <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801a928:	69bb      	ldr	r3, [r7, #24]
 801a92a:	2201      	movs	r2, #1
 801a92c:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801a92e:	69bb      	ldr	r3, [r7, #24]
 801a930:	899a      	ldrh	r2, [r3, #12]
 801a932:	69bb      	ldr	r3, [r7, #24]
 801a934:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801a936:	69bb      	ldr	r3, [r7, #24]
 801a938:	895a      	ldrh	r2, [r3, #10]
 801a93a:	69bb      	ldr	r3, [r7, #24]
 801a93c:	899b      	ldrh	r3, [r3, #12]
 801a93e:	429a      	cmp	r2, r3
 801a940:	d306      	bcc.n	801a950 <dhcp_bind+0x124>
 801a942:	69bb      	ldr	r3, [r7, #24]
 801a944:	899b      	ldrh	r3, [r3, #12]
 801a946:	2b00      	cmp	r3, #0
 801a948:	d002      	beq.n	801a950 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801a94a:	69bb      	ldr	r3, [r7, #24]
 801a94c:	2200      	movs	r2, #0
 801a94e:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801a950:	69bb      	ldr	r3, [r7, #24]
 801a952:	79db      	ldrb	r3, [r3, #7]
 801a954:	2b00      	cmp	r3, #0
 801a956:	d003      	beq.n	801a960 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801a958:	69bb      	ldr	r3, [r7, #24]
 801a95a:	6a1b      	ldr	r3, [r3, #32]
 801a95c:	613b      	str	r3, [r7, #16]
 801a95e:	e014      	b.n	801a98a <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801a960:	69bb      	ldr	r3, [r7, #24]
 801a962:	331c      	adds	r3, #28
 801a964:	781b      	ldrb	r3, [r3, #0]
 801a966:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801a968:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801a96c:	2b00      	cmp	r3, #0
 801a96e:	db02      	blt.n	801a976 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801a970:	23ff      	movs	r3, #255	; 0xff
 801a972:	613b      	str	r3, [r7, #16]
 801a974:	e009      	b.n	801a98a <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801a976:	7dfb      	ldrb	r3, [r7, #23]
 801a978:	2bbf      	cmp	r3, #191	; 0xbf
 801a97a:	d903      	bls.n	801a984 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801a97c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a980:	613b      	str	r3, [r7, #16]
 801a982:	e002      	b.n	801a98a <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801a984:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a988:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801a98a:	69bb      	ldr	r3, [r7, #24]
 801a98c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a98e:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801a990:	68fb      	ldr	r3, [r7, #12]
 801a992:	2b00      	cmp	r3, #0
 801a994:	d108      	bne.n	801a9a8 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801a996:	69bb      	ldr	r3, [r7, #24]
 801a998:	69da      	ldr	r2, [r3, #28]
 801a99a:	693b      	ldr	r3, [r7, #16]
 801a99c:	4013      	ands	r3, r2
 801a99e:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801a9a0:	68fb      	ldr	r3, [r7, #12]
 801a9a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801a9a6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801a9a8:	210a      	movs	r1, #10
 801a9aa:	69b8      	ldr	r0, [r7, #24]
 801a9ac:	f000 faa0 	bl	801aef0 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801a9b0:	69bb      	ldr	r3, [r7, #24]
 801a9b2:	f103 011c 	add.w	r1, r3, #28
 801a9b6:	f107 030c 	add.w	r3, r7, #12
 801a9ba:	f107 0210 	add.w	r2, r7, #16
 801a9be:	6878      	ldr	r0, [r7, #4]
 801a9c0:	f7f8 fa70 	bl	8012ea4 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801a9c4:	3720      	adds	r7, #32
 801a9c6:	46bd      	mov	sp, r7
 801a9c8:	bd80      	pop	{r7, pc}
 801a9ca:	bf00      	nop
 801a9cc:	08026980 	.word	0x08026980
 801a9d0:	08026ae0 	.word	0x08026ae0
 801a9d4:	080269e0 	.word	0x080269e0
 801a9d8:	08026afc 	.word	0x08026afc
 801a9dc:	88888889 	.word	0x88888889

0801a9e0 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801a9e0:	b580      	push	{r7, lr}
 801a9e2:	b08a      	sub	sp, #40	; 0x28
 801a9e4:	af02      	add	r7, sp, #8
 801a9e6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a9e8:	687b      	ldr	r3, [r7, #4]
 801a9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a9ec:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801a9ee:	2105      	movs	r1, #5
 801a9f0:	69b8      	ldr	r0, [r7, #24]
 801a9f2:	f000 fa7d 	bl	801aef0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801a9f6:	f107 030c 	add.w	r3, r7, #12
 801a9fa:	2203      	movs	r2, #3
 801a9fc:	69b9      	ldr	r1, [r7, #24]
 801a9fe:	6878      	ldr	r0, [r7, #4]
 801aa00:	f000 ff02 	bl	801b808 <dhcp_create_msg>
 801aa04:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801aa06:	697b      	ldr	r3, [r7, #20]
 801aa08:	2b00      	cmp	r3, #0
 801aa0a:	d04e      	beq.n	801aaaa <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801aa0c:	697b      	ldr	r3, [r7, #20]
 801aa0e:	685b      	ldr	r3, [r3, #4]
 801aa10:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801aa12:	89b8      	ldrh	r0, [r7, #12]
 801aa14:	693b      	ldr	r3, [r7, #16]
 801aa16:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801aa1a:	2302      	movs	r3, #2
 801aa1c:	2239      	movs	r2, #57	; 0x39
 801aa1e:	f000 fa81 	bl	801af24 <dhcp_option>
 801aa22:	4603      	mov	r3, r0
 801aa24:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801aa26:	89b8      	ldrh	r0, [r7, #12]
 801aa28:	693b      	ldr	r3, [r7, #16]
 801aa2a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801aa2e:	687b      	ldr	r3, [r7, #4]
 801aa30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801aa32:	461a      	mov	r2, r3
 801aa34:	f000 fad0 	bl	801afd8 <dhcp_option_short>
 801aa38:	4603      	mov	r3, r0
 801aa3a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801aa3c:	89b8      	ldrh	r0, [r7, #12]
 801aa3e:	693b      	ldr	r3, [r7, #16]
 801aa40:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801aa44:	2303      	movs	r3, #3
 801aa46:	2237      	movs	r2, #55	; 0x37
 801aa48:	f000 fa6c 	bl	801af24 <dhcp_option>
 801aa4c:	4603      	mov	r3, r0
 801aa4e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801aa50:	2300      	movs	r3, #0
 801aa52:	77bb      	strb	r3, [r7, #30]
 801aa54:	e00e      	b.n	801aa74 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801aa56:	89b8      	ldrh	r0, [r7, #12]
 801aa58:	693b      	ldr	r3, [r7, #16]
 801aa5a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801aa5e:	7fbb      	ldrb	r3, [r7, #30]
 801aa60:	4a2a      	ldr	r2, [pc, #168]	; (801ab0c <dhcp_renew+0x12c>)
 801aa62:	5cd3      	ldrb	r3, [r2, r3]
 801aa64:	461a      	mov	r2, r3
 801aa66:	f000 fa91 	bl	801af8c <dhcp_option_byte>
 801aa6a:	4603      	mov	r3, r0
 801aa6c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801aa6e:	7fbb      	ldrb	r3, [r7, #30]
 801aa70:	3301      	adds	r3, #1
 801aa72:	77bb      	strb	r3, [r7, #30]
 801aa74:	7fbb      	ldrb	r3, [r7, #30]
 801aa76:	2b02      	cmp	r3, #2
 801aa78:	d9ed      	bls.n	801aa56 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801aa7a:	89b8      	ldrh	r0, [r7, #12]
 801aa7c:	693b      	ldr	r3, [r7, #16]
 801aa7e:	33f0      	adds	r3, #240	; 0xf0
 801aa80:	697a      	ldr	r2, [r7, #20]
 801aa82:	4619      	mov	r1, r3
 801aa84:	f000 ff96 	bl	801b9b4 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801aa88:	4b21      	ldr	r3, [pc, #132]	; (801ab10 <dhcp_renew+0x130>)
 801aa8a:	6818      	ldr	r0, [r3, #0]
 801aa8c:	69bb      	ldr	r3, [r7, #24]
 801aa8e:	f103 0218 	add.w	r2, r3, #24
 801aa92:	687b      	ldr	r3, [r7, #4]
 801aa94:	9300      	str	r3, [sp, #0]
 801aa96:	2343      	movs	r3, #67	; 0x43
 801aa98:	6979      	ldr	r1, [r7, #20]
 801aa9a:	f7fe fe53 	bl	8019744 <udp_sendto_if>
 801aa9e:	4603      	mov	r3, r0
 801aaa0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801aaa2:	6978      	ldr	r0, [r7, #20]
 801aaa4:	f7f8 ff0c 	bl	80138c0 <pbuf_free>
 801aaa8:	e001      	b.n	801aaae <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801aaaa:	23ff      	movs	r3, #255	; 0xff
 801aaac:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801aaae:	69bb      	ldr	r3, [r7, #24]
 801aab0:	799b      	ldrb	r3, [r3, #6]
 801aab2:	2bff      	cmp	r3, #255	; 0xff
 801aab4:	d005      	beq.n	801aac2 <dhcp_renew+0xe2>
    dhcp->tries++;
 801aab6:	69bb      	ldr	r3, [r7, #24]
 801aab8:	799b      	ldrb	r3, [r3, #6]
 801aaba:	3301      	adds	r3, #1
 801aabc:	b2da      	uxtb	r2, r3
 801aabe:	69bb      	ldr	r3, [r7, #24]
 801aac0:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801aac2:	69bb      	ldr	r3, [r7, #24]
 801aac4:	799b      	ldrb	r3, [r3, #6]
 801aac6:	2b09      	cmp	r3, #9
 801aac8:	d80a      	bhi.n	801aae0 <dhcp_renew+0x100>
 801aaca:	69bb      	ldr	r3, [r7, #24]
 801aacc:	799b      	ldrb	r3, [r3, #6]
 801aace:	b29b      	uxth	r3, r3
 801aad0:	461a      	mov	r2, r3
 801aad2:	0152      	lsls	r2, r2, #5
 801aad4:	1ad2      	subs	r2, r2, r3
 801aad6:	0092      	lsls	r2, r2, #2
 801aad8:	4413      	add	r3, r2
 801aada:	011b      	lsls	r3, r3, #4
 801aadc:	b29b      	uxth	r3, r3
 801aade:	e001      	b.n	801aae4 <dhcp_renew+0x104>
 801aae0:	f644 6320 	movw	r3, #20000	; 0x4e20
 801aae4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801aae6:	89fb      	ldrh	r3, [r7, #14]
 801aae8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801aaec:	4a09      	ldr	r2, [pc, #36]	; (801ab14 <dhcp_renew+0x134>)
 801aaee:	fb82 1203 	smull	r1, r2, r2, r3
 801aaf2:	1152      	asrs	r2, r2, #5
 801aaf4:	17db      	asrs	r3, r3, #31
 801aaf6:	1ad3      	subs	r3, r2, r3
 801aaf8:	b29a      	uxth	r2, r3
 801aafa:	69bb      	ldr	r3, [r7, #24]
 801aafc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801aafe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ab02:	4618      	mov	r0, r3
 801ab04:	3720      	adds	r7, #32
 801ab06:	46bd      	mov	sp, r7
 801ab08:	bd80      	pop	{r7, pc}
 801ab0a:	bf00      	nop
 801ab0c:	2000001c 	.word	0x2000001c
 801ab10:	2000c23c 	.word	0x2000c23c
 801ab14:	10624dd3 	.word	0x10624dd3

0801ab18 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801ab18:	b580      	push	{r7, lr}
 801ab1a:	b08a      	sub	sp, #40	; 0x28
 801ab1c:	af02      	add	r7, sp, #8
 801ab1e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ab20:	687b      	ldr	r3, [r7, #4]
 801ab22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ab24:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801ab26:	2104      	movs	r1, #4
 801ab28:	69b8      	ldr	r0, [r7, #24]
 801ab2a:	f000 f9e1 	bl	801aef0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801ab2e:	f107 030c 	add.w	r3, r7, #12
 801ab32:	2203      	movs	r2, #3
 801ab34:	69b9      	ldr	r1, [r7, #24]
 801ab36:	6878      	ldr	r0, [r7, #4]
 801ab38:	f000 fe66 	bl	801b808 <dhcp_create_msg>
 801ab3c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801ab3e:	697b      	ldr	r3, [r7, #20]
 801ab40:	2b00      	cmp	r3, #0
 801ab42:	d04c      	beq.n	801abde <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801ab44:	697b      	ldr	r3, [r7, #20]
 801ab46:	685b      	ldr	r3, [r3, #4]
 801ab48:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801ab4a:	89b8      	ldrh	r0, [r7, #12]
 801ab4c:	693b      	ldr	r3, [r7, #16]
 801ab4e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ab52:	2302      	movs	r3, #2
 801ab54:	2239      	movs	r2, #57	; 0x39
 801ab56:	f000 f9e5 	bl	801af24 <dhcp_option>
 801ab5a:	4603      	mov	r3, r0
 801ab5c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801ab5e:	89b8      	ldrh	r0, [r7, #12]
 801ab60:	693b      	ldr	r3, [r7, #16]
 801ab62:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ab66:	687b      	ldr	r3, [r7, #4]
 801ab68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ab6a:	461a      	mov	r2, r3
 801ab6c:	f000 fa34 	bl	801afd8 <dhcp_option_short>
 801ab70:	4603      	mov	r3, r0
 801ab72:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801ab74:	89b8      	ldrh	r0, [r7, #12]
 801ab76:	693b      	ldr	r3, [r7, #16]
 801ab78:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ab7c:	2303      	movs	r3, #3
 801ab7e:	2237      	movs	r2, #55	; 0x37
 801ab80:	f000 f9d0 	bl	801af24 <dhcp_option>
 801ab84:	4603      	mov	r3, r0
 801ab86:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801ab88:	2300      	movs	r3, #0
 801ab8a:	77bb      	strb	r3, [r7, #30]
 801ab8c:	e00e      	b.n	801abac <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801ab8e:	89b8      	ldrh	r0, [r7, #12]
 801ab90:	693b      	ldr	r3, [r7, #16]
 801ab92:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ab96:	7fbb      	ldrb	r3, [r7, #30]
 801ab98:	4a29      	ldr	r2, [pc, #164]	; (801ac40 <dhcp_rebind+0x128>)
 801ab9a:	5cd3      	ldrb	r3, [r2, r3]
 801ab9c:	461a      	mov	r2, r3
 801ab9e:	f000 f9f5 	bl	801af8c <dhcp_option_byte>
 801aba2:	4603      	mov	r3, r0
 801aba4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801aba6:	7fbb      	ldrb	r3, [r7, #30]
 801aba8:	3301      	adds	r3, #1
 801abaa:	77bb      	strb	r3, [r7, #30]
 801abac:	7fbb      	ldrb	r3, [r7, #30]
 801abae:	2b02      	cmp	r3, #2
 801abb0:	d9ed      	bls.n	801ab8e <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801abb2:	89b8      	ldrh	r0, [r7, #12]
 801abb4:	693b      	ldr	r3, [r7, #16]
 801abb6:	33f0      	adds	r3, #240	; 0xf0
 801abb8:	697a      	ldr	r2, [r7, #20]
 801abba:	4619      	mov	r1, r3
 801abbc:	f000 fefa 	bl	801b9b4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801abc0:	4b20      	ldr	r3, [pc, #128]	; (801ac44 <dhcp_rebind+0x12c>)
 801abc2:	6818      	ldr	r0, [r3, #0]
 801abc4:	687b      	ldr	r3, [r7, #4]
 801abc6:	9300      	str	r3, [sp, #0]
 801abc8:	2343      	movs	r3, #67	; 0x43
 801abca:	4a1f      	ldr	r2, [pc, #124]	; (801ac48 <dhcp_rebind+0x130>)
 801abcc:	6979      	ldr	r1, [r7, #20]
 801abce:	f7fe fdb9 	bl	8019744 <udp_sendto_if>
 801abd2:	4603      	mov	r3, r0
 801abd4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801abd6:	6978      	ldr	r0, [r7, #20]
 801abd8:	f7f8 fe72 	bl	80138c0 <pbuf_free>
 801abdc:	e001      	b.n	801abe2 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801abde:	23ff      	movs	r3, #255	; 0xff
 801abe0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801abe2:	69bb      	ldr	r3, [r7, #24]
 801abe4:	799b      	ldrb	r3, [r3, #6]
 801abe6:	2bff      	cmp	r3, #255	; 0xff
 801abe8:	d005      	beq.n	801abf6 <dhcp_rebind+0xde>
    dhcp->tries++;
 801abea:	69bb      	ldr	r3, [r7, #24]
 801abec:	799b      	ldrb	r3, [r3, #6]
 801abee:	3301      	adds	r3, #1
 801abf0:	b2da      	uxtb	r2, r3
 801abf2:	69bb      	ldr	r3, [r7, #24]
 801abf4:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801abf6:	69bb      	ldr	r3, [r7, #24]
 801abf8:	799b      	ldrb	r3, [r3, #6]
 801abfa:	2b09      	cmp	r3, #9
 801abfc:	d80a      	bhi.n	801ac14 <dhcp_rebind+0xfc>
 801abfe:	69bb      	ldr	r3, [r7, #24]
 801ac00:	799b      	ldrb	r3, [r3, #6]
 801ac02:	b29b      	uxth	r3, r3
 801ac04:	461a      	mov	r2, r3
 801ac06:	0152      	lsls	r2, r2, #5
 801ac08:	1ad2      	subs	r2, r2, r3
 801ac0a:	0092      	lsls	r2, r2, #2
 801ac0c:	4413      	add	r3, r2
 801ac0e:	00db      	lsls	r3, r3, #3
 801ac10:	b29b      	uxth	r3, r3
 801ac12:	e001      	b.n	801ac18 <dhcp_rebind+0x100>
 801ac14:	f242 7310 	movw	r3, #10000	; 0x2710
 801ac18:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801ac1a:	89fb      	ldrh	r3, [r7, #14]
 801ac1c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801ac20:	4a0a      	ldr	r2, [pc, #40]	; (801ac4c <dhcp_rebind+0x134>)
 801ac22:	fb82 1203 	smull	r1, r2, r2, r3
 801ac26:	1152      	asrs	r2, r2, #5
 801ac28:	17db      	asrs	r3, r3, #31
 801ac2a:	1ad3      	subs	r3, r2, r3
 801ac2c:	b29a      	uxth	r2, r3
 801ac2e:	69bb      	ldr	r3, [r7, #24]
 801ac30:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801ac32:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ac36:	4618      	mov	r0, r3
 801ac38:	3720      	adds	r7, #32
 801ac3a:	46bd      	mov	sp, r7
 801ac3c:	bd80      	pop	{r7, pc}
 801ac3e:	bf00      	nop
 801ac40:	2000001c 	.word	0x2000001c
 801ac44:	2000c23c 	.word	0x2000c23c
 801ac48:	0806f650 	.word	0x0806f650
 801ac4c:	10624dd3 	.word	0x10624dd3

0801ac50 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801ac50:	b5b0      	push	{r4, r5, r7, lr}
 801ac52:	b08a      	sub	sp, #40	; 0x28
 801ac54:	af02      	add	r7, sp, #8
 801ac56:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ac58:	687b      	ldr	r3, [r7, #4]
 801ac5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ac5c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801ac5e:	2103      	movs	r1, #3
 801ac60:	69b8      	ldr	r0, [r7, #24]
 801ac62:	f000 f945 	bl	801aef0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801ac66:	f107 030c 	add.w	r3, r7, #12
 801ac6a:	2203      	movs	r2, #3
 801ac6c:	69b9      	ldr	r1, [r7, #24]
 801ac6e:	6878      	ldr	r0, [r7, #4]
 801ac70:	f000 fdca 	bl	801b808 <dhcp_create_msg>
 801ac74:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801ac76:	697b      	ldr	r3, [r7, #20]
 801ac78:	2b00      	cmp	r3, #0
 801ac7a:	d066      	beq.n	801ad4a <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801ac7c:	697b      	ldr	r3, [r7, #20]
 801ac7e:	685b      	ldr	r3, [r3, #4]
 801ac80:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801ac82:	89b8      	ldrh	r0, [r7, #12]
 801ac84:	693b      	ldr	r3, [r7, #16]
 801ac86:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ac8a:	2302      	movs	r3, #2
 801ac8c:	2239      	movs	r2, #57	; 0x39
 801ac8e:	f000 f949 	bl	801af24 <dhcp_option>
 801ac92:	4603      	mov	r3, r0
 801ac94:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801ac96:	89b8      	ldrh	r0, [r7, #12]
 801ac98:	693b      	ldr	r3, [r7, #16]
 801ac9a:	33f0      	adds	r3, #240	; 0xf0
 801ac9c:	f44f 7210 	mov.w	r2, #576	; 0x240
 801aca0:	4619      	mov	r1, r3
 801aca2:	f000 f999 	bl	801afd8 <dhcp_option_short>
 801aca6:	4603      	mov	r3, r0
 801aca8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801acaa:	89b8      	ldrh	r0, [r7, #12]
 801acac:	693b      	ldr	r3, [r7, #16]
 801acae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801acb2:	2304      	movs	r3, #4
 801acb4:	2232      	movs	r2, #50	; 0x32
 801acb6:	f000 f935 	bl	801af24 <dhcp_option>
 801acba:	4603      	mov	r3, r0
 801acbc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801acbe:	89bc      	ldrh	r4, [r7, #12]
 801acc0:	693b      	ldr	r3, [r7, #16]
 801acc2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801acc6:	69bb      	ldr	r3, [r7, #24]
 801acc8:	69db      	ldr	r3, [r3, #28]
 801acca:	4618      	mov	r0, r3
 801accc:	f7f7 fa55 	bl	801217a <lwip_htonl>
 801acd0:	4603      	mov	r3, r0
 801acd2:	461a      	mov	r2, r3
 801acd4:	4629      	mov	r1, r5
 801acd6:	4620      	mov	r0, r4
 801acd8:	f000 f9b0 	bl	801b03c <dhcp_option_long>
 801acdc:	4603      	mov	r3, r0
 801acde:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801ace0:	89b8      	ldrh	r0, [r7, #12]
 801ace2:	693b      	ldr	r3, [r7, #16]
 801ace4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ace8:	2303      	movs	r3, #3
 801acea:	2237      	movs	r2, #55	; 0x37
 801acec:	f000 f91a 	bl	801af24 <dhcp_option>
 801acf0:	4603      	mov	r3, r0
 801acf2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801acf4:	2300      	movs	r3, #0
 801acf6:	77bb      	strb	r3, [r7, #30]
 801acf8:	e00e      	b.n	801ad18 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801acfa:	89b8      	ldrh	r0, [r7, #12]
 801acfc:	693b      	ldr	r3, [r7, #16]
 801acfe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ad02:	7fbb      	ldrb	r3, [r7, #30]
 801ad04:	4a29      	ldr	r2, [pc, #164]	; (801adac <dhcp_reboot+0x15c>)
 801ad06:	5cd3      	ldrb	r3, [r2, r3]
 801ad08:	461a      	mov	r2, r3
 801ad0a:	f000 f93f 	bl	801af8c <dhcp_option_byte>
 801ad0e:	4603      	mov	r3, r0
 801ad10:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801ad12:	7fbb      	ldrb	r3, [r7, #30]
 801ad14:	3301      	adds	r3, #1
 801ad16:	77bb      	strb	r3, [r7, #30]
 801ad18:	7fbb      	ldrb	r3, [r7, #30]
 801ad1a:	2b02      	cmp	r3, #2
 801ad1c:	d9ed      	bls.n	801acfa <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801ad1e:	89b8      	ldrh	r0, [r7, #12]
 801ad20:	693b      	ldr	r3, [r7, #16]
 801ad22:	33f0      	adds	r3, #240	; 0xf0
 801ad24:	697a      	ldr	r2, [r7, #20]
 801ad26:	4619      	mov	r1, r3
 801ad28:	f000 fe44 	bl	801b9b4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801ad2c:	4b20      	ldr	r3, [pc, #128]	; (801adb0 <dhcp_reboot+0x160>)
 801ad2e:	6818      	ldr	r0, [r3, #0]
 801ad30:	687b      	ldr	r3, [r7, #4]
 801ad32:	9300      	str	r3, [sp, #0]
 801ad34:	2343      	movs	r3, #67	; 0x43
 801ad36:	4a1f      	ldr	r2, [pc, #124]	; (801adb4 <dhcp_reboot+0x164>)
 801ad38:	6979      	ldr	r1, [r7, #20]
 801ad3a:	f7fe fd03 	bl	8019744 <udp_sendto_if>
 801ad3e:	4603      	mov	r3, r0
 801ad40:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801ad42:	6978      	ldr	r0, [r7, #20]
 801ad44:	f7f8 fdbc 	bl	80138c0 <pbuf_free>
 801ad48:	e001      	b.n	801ad4e <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801ad4a:	23ff      	movs	r3, #255	; 0xff
 801ad4c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801ad4e:	69bb      	ldr	r3, [r7, #24]
 801ad50:	799b      	ldrb	r3, [r3, #6]
 801ad52:	2bff      	cmp	r3, #255	; 0xff
 801ad54:	d005      	beq.n	801ad62 <dhcp_reboot+0x112>
    dhcp->tries++;
 801ad56:	69bb      	ldr	r3, [r7, #24]
 801ad58:	799b      	ldrb	r3, [r3, #6]
 801ad5a:	3301      	adds	r3, #1
 801ad5c:	b2da      	uxtb	r2, r3
 801ad5e:	69bb      	ldr	r3, [r7, #24]
 801ad60:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801ad62:	69bb      	ldr	r3, [r7, #24]
 801ad64:	799b      	ldrb	r3, [r3, #6]
 801ad66:	2b09      	cmp	r3, #9
 801ad68:	d80a      	bhi.n	801ad80 <dhcp_reboot+0x130>
 801ad6a:	69bb      	ldr	r3, [r7, #24]
 801ad6c:	799b      	ldrb	r3, [r3, #6]
 801ad6e:	b29b      	uxth	r3, r3
 801ad70:	461a      	mov	r2, r3
 801ad72:	0152      	lsls	r2, r2, #5
 801ad74:	1ad2      	subs	r2, r2, r3
 801ad76:	0092      	lsls	r2, r2, #2
 801ad78:	4413      	add	r3, r2
 801ad7a:	00db      	lsls	r3, r3, #3
 801ad7c:	b29b      	uxth	r3, r3
 801ad7e:	e001      	b.n	801ad84 <dhcp_reboot+0x134>
 801ad80:	f242 7310 	movw	r3, #10000	; 0x2710
 801ad84:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801ad86:	89fb      	ldrh	r3, [r7, #14]
 801ad88:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801ad8c:	4a0a      	ldr	r2, [pc, #40]	; (801adb8 <dhcp_reboot+0x168>)
 801ad8e:	fb82 1203 	smull	r1, r2, r2, r3
 801ad92:	1152      	asrs	r2, r2, #5
 801ad94:	17db      	asrs	r3, r3, #31
 801ad96:	1ad3      	subs	r3, r2, r3
 801ad98:	b29a      	uxth	r2, r3
 801ad9a:	69bb      	ldr	r3, [r7, #24]
 801ad9c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801ad9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ada2:	4618      	mov	r0, r3
 801ada4:	3720      	adds	r7, #32
 801ada6:	46bd      	mov	sp, r7
 801ada8:	bdb0      	pop	{r4, r5, r7, pc}
 801adaa:	bf00      	nop
 801adac:	2000001c 	.word	0x2000001c
 801adb0:	2000c23c 	.word	0x2000c23c
 801adb4:	0806f650 	.word	0x0806f650
 801adb8:	10624dd3 	.word	0x10624dd3

0801adbc <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801adbc:	b5b0      	push	{r4, r5, r7, lr}
 801adbe:	b08a      	sub	sp, #40	; 0x28
 801adc0:	af02      	add	r7, sp, #8
 801adc2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801adc4:	687b      	ldr	r3, [r7, #4]
 801adc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801adc8:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801adca:	69fb      	ldr	r3, [r7, #28]
 801adcc:	2b00      	cmp	r3, #0
 801adce:	f000 8084 	beq.w	801aeda <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801add2:	69fb      	ldr	r3, [r7, #28]
 801add4:	795b      	ldrb	r3, [r3, #5]
 801add6:	2b00      	cmp	r3, #0
 801add8:	f000 8081 	beq.w	801aede <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801addc:	69fb      	ldr	r3, [r7, #28]
 801adde:	699b      	ldr	r3, [r3, #24]
 801ade0:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801ade2:	69fb      	ldr	r3, [r7, #28]
 801ade4:	2200      	movs	r2, #0
 801ade6:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801ade8:	69fb      	ldr	r3, [r7, #28]
 801adea:	2200      	movs	r2, #0
 801adec:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801adee:	69fb      	ldr	r3, [r7, #28]
 801adf0:	2200      	movs	r2, #0
 801adf2:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801adf4:	69fb      	ldr	r3, [r7, #28]
 801adf6:	2200      	movs	r2, #0
 801adf8:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801adfa:	69fb      	ldr	r3, [r7, #28]
 801adfc:	2200      	movs	r2, #0
 801adfe:	631a      	str	r2, [r3, #48]	; 0x30
 801ae00:	69fb      	ldr	r3, [r7, #28]
 801ae02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ae04:	69fb      	ldr	r3, [r7, #28]
 801ae06:	62da      	str	r2, [r3, #44]	; 0x2c
 801ae08:	69fb      	ldr	r3, [r7, #28]
 801ae0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ae0c:	69fb      	ldr	r3, [r7, #28]
 801ae0e:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801ae10:	69fb      	ldr	r3, [r7, #28]
 801ae12:	2200      	movs	r2, #0
 801ae14:	829a      	strh	r2, [r3, #20]
 801ae16:	69fb      	ldr	r3, [r7, #28]
 801ae18:	8a9a      	ldrh	r2, [r3, #20]
 801ae1a:	69fb      	ldr	r3, [r7, #28]
 801ae1c:	825a      	strh	r2, [r3, #18]
 801ae1e:	69fb      	ldr	r3, [r7, #28]
 801ae20:	8a5a      	ldrh	r2, [r3, #18]
 801ae22:	69fb      	ldr	r3, [r7, #28]
 801ae24:	821a      	strh	r2, [r3, #16]
 801ae26:	69fb      	ldr	r3, [r7, #28]
 801ae28:	8a1a      	ldrh	r2, [r3, #16]
 801ae2a:	69fb      	ldr	r3, [r7, #28]
 801ae2c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801ae2e:	6878      	ldr	r0, [r7, #4]
 801ae30:	f000 fdee 	bl	801ba10 <dhcp_supplied_address>
 801ae34:	4603      	mov	r3, r0
 801ae36:	2b00      	cmp	r3, #0
 801ae38:	d03b      	beq.n	801aeb2 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801ae3a:	f107 030e 	add.w	r3, r7, #14
 801ae3e:	2207      	movs	r2, #7
 801ae40:	69f9      	ldr	r1, [r7, #28]
 801ae42:	6878      	ldr	r0, [r7, #4]
 801ae44:	f000 fce0 	bl	801b808 <dhcp_create_msg>
 801ae48:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801ae4a:	69bb      	ldr	r3, [r7, #24]
 801ae4c:	2b00      	cmp	r3, #0
 801ae4e:	d030      	beq.n	801aeb2 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801ae50:	69bb      	ldr	r3, [r7, #24]
 801ae52:	685b      	ldr	r3, [r3, #4]
 801ae54:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801ae56:	89f8      	ldrh	r0, [r7, #14]
 801ae58:	697b      	ldr	r3, [r7, #20]
 801ae5a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ae5e:	2304      	movs	r3, #4
 801ae60:	2236      	movs	r2, #54	; 0x36
 801ae62:	f000 f85f 	bl	801af24 <dhcp_option>
 801ae66:	4603      	mov	r3, r0
 801ae68:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801ae6a:	89fc      	ldrh	r4, [r7, #14]
 801ae6c:	697b      	ldr	r3, [r7, #20]
 801ae6e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801ae72:	693b      	ldr	r3, [r7, #16]
 801ae74:	4618      	mov	r0, r3
 801ae76:	f7f7 f980 	bl	801217a <lwip_htonl>
 801ae7a:	4603      	mov	r3, r0
 801ae7c:	461a      	mov	r2, r3
 801ae7e:	4629      	mov	r1, r5
 801ae80:	4620      	mov	r0, r4
 801ae82:	f000 f8db 	bl	801b03c <dhcp_option_long>
 801ae86:	4603      	mov	r3, r0
 801ae88:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801ae8a:	89f8      	ldrh	r0, [r7, #14]
 801ae8c:	697b      	ldr	r3, [r7, #20]
 801ae8e:	33f0      	adds	r3, #240	; 0xf0
 801ae90:	69ba      	ldr	r2, [r7, #24]
 801ae92:	4619      	mov	r1, r3
 801ae94:	f000 fd8e 	bl	801b9b4 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801ae98:	4b13      	ldr	r3, [pc, #76]	; (801aee8 <dhcp_release_and_stop+0x12c>)
 801ae9a:	6818      	ldr	r0, [r3, #0]
 801ae9c:	f107 0210 	add.w	r2, r7, #16
 801aea0:	687b      	ldr	r3, [r7, #4]
 801aea2:	9300      	str	r3, [sp, #0]
 801aea4:	2343      	movs	r3, #67	; 0x43
 801aea6:	69b9      	ldr	r1, [r7, #24]
 801aea8:	f7fe fc4c 	bl	8019744 <udp_sendto_if>
      pbuf_free(p_out);
 801aeac:	69b8      	ldr	r0, [r7, #24]
 801aeae:	f7f8 fd07 	bl	80138c0 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801aeb2:	4b0e      	ldr	r3, [pc, #56]	; (801aeec <dhcp_release_and_stop+0x130>)
 801aeb4:	4a0d      	ldr	r2, [pc, #52]	; (801aeec <dhcp_release_and_stop+0x130>)
 801aeb6:	490d      	ldr	r1, [pc, #52]	; (801aeec <dhcp_release_and_stop+0x130>)
 801aeb8:	6878      	ldr	r0, [r7, #4]
 801aeba:	f7f7 fff3 	bl	8012ea4 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801aebe:	2100      	movs	r1, #0
 801aec0:	69f8      	ldr	r0, [r7, #28]
 801aec2:	f000 f815 	bl	801aef0 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801aec6:	69fb      	ldr	r3, [r7, #28]
 801aec8:	791b      	ldrb	r3, [r3, #4]
 801aeca:	2b00      	cmp	r3, #0
 801aecc:	d008      	beq.n	801aee0 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801aece:	f7fe ff85 	bl	8019ddc <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801aed2:	69fb      	ldr	r3, [r7, #28]
 801aed4:	2200      	movs	r2, #0
 801aed6:	711a      	strb	r2, [r3, #4]
 801aed8:	e002      	b.n	801aee0 <dhcp_release_and_stop+0x124>
    return;
 801aeda:	bf00      	nop
 801aedc:	e000      	b.n	801aee0 <dhcp_release_and_stop+0x124>
    return;
 801aede:	bf00      	nop
  }
}
 801aee0:	3720      	adds	r7, #32
 801aee2:	46bd      	mov	sp, r7
 801aee4:	bdb0      	pop	{r4, r5, r7, pc}
 801aee6:	bf00      	nop
 801aee8:	2000c23c 	.word	0x2000c23c
 801aeec:	0806f64c 	.word	0x0806f64c

0801aef0 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801aef0:	b480      	push	{r7}
 801aef2:	b083      	sub	sp, #12
 801aef4:	af00      	add	r7, sp, #0
 801aef6:	6078      	str	r0, [r7, #4]
 801aef8:	460b      	mov	r3, r1
 801aefa:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801aefc:	687b      	ldr	r3, [r7, #4]
 801aefe:	795b      	ldrb	r3, [r3, #5]
 801af00:	78fa      	ldrb	r2, [r7, #3]
 801af02:	429a      	cmp	r2, r3
 801af04:	d008      	beq.n	801af18 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801af06:	687b      	ldr	r3, [r7, #4]
 801af08:	78fa      	ldrb	r2, [r7, #3]
 801af0a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801af0c:	687b      	ldr	r3, [r7, #4]
 801af0e:	2200      	movs	r2, #0
 801af10:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801af12:	687b      	ldr	r3, [r7, #4]
 801af14:	2200      	movs	r2, #0
 801af16:	811a      	strh	r2, [r3, #8]
  }
}
 801af18:	bf00      	nop
 801af1a:	370c      	adds	r7, #12
 801af1c:	46bd      	mov	sp, r7
 801af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af22:	4770      	bx	lr

0801af24 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801af24:	b580      	push	{r7, lr}
 801af26:	b082      	sub	sp, #8
 801af28:	af00      	add	r7, sp, #0
 801af2a:	6039      	str	r1, [r7, #0]
 801af2c:	4611      	mov	r1, r2
 801af2e:	461a      	mov	r2, r3
 801af30:	4603      	mov	r3, r0
 801af32:	80fb      	strh	r3, [r7, #6]
 801af34:	460b      	mov	r3, r1
 801af36:	717b      	strb	r3, [r7, #5]
 801af38:	4613      	mov	r3, r2
 801af3a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801af3c:	88fa      	ldrh	r2, [r7, #6]
 801af3e:	793b      	ldrb	r3, [r7, #4]
 801af40:	4413      	add	r3, r2
 801af42:	3302      	adds	r3, #2
 801af44:	2b44      	cmp	r3, #68	; 0x44
 801af46:	d906      	bls.n	801af56 <dhcp_option+0x32>
 801af48:	4b0d      	ldr	r3, [pc, #52]	; (801af80 <dhcp_option+0x5c>)
 801af4a:	f240 529a 	movw	r2, #1434	; 0x59a
 801af4e:	490d      	ldr	r1, [pc, #52]	; (801af84 <dhcp_option+0x60>)
 801af50:	480d      	ldr	r0, [pc, #52]	; (801af88 <dhcp_option+0x64>)
 801af52:	f003 f9c1 	bl	801e2d8 <printf>
  options[options_out_len++] = option_type;
 801af56:	88fb      	ldrh	r3, [r7, #6]
 801af58:	1c5a      	adds	r2, r3, #1
 801af5a:	80fa      	strh	r2, [r7, #6]
 801af5c:	461a      	mov	r2, r3
 801af5e:	683b      	ldr	r3, [r7, #0]
 801af60:	4413      	add	r3, r2
 801af62:	797a      	ldrb	r2, [r7, #5]
 801af64:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801af66:	88fb      	ldrh	r3, [r7, #6]
 801af68:	1c5a      	adds	r2, r3, #1
 801af6a:	80fa      	strh	r2, [r7, #6]
 801af6c:	461a      	mov	r2, r3
 801af6e:	683b      	ldr	r3, [r7, #0]
 801af70:	4413      	add	r3, r2
 801af72:	793a      	ldrb	r2, [r7, #4]
 801af74:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801af76:	88fb      	ldrh	r3, [r7, #6]
}
 801af78:	4618      	mov	r0, r3
 801af7a:	3708      	adds	r7, #8
 801af7c:	46bd      	mov	sp, r7
 801af7e:	bd80      	pop	{r7, pc}
 801af80:	08026980 	.word	0x08026980
 801af84:	08026b14 	.word	0x08026b14
 801af88:	080269e0 	.word	0x080269e0

0801af8c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801af8c:	b580      	push	{r7, lr}
 801af8e:	b082      	sub	sp, #8
 801af90:	af00      	add	r7, sp, #0
 801af92:	4603      	mov	r3, r0
 801af94:	6039      	str	r1, [r7, #0]
 801af96:	80fb      	strh	r3, [r7, #6]
 801af98:	4613      	mov	r3, r2
 801af9a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801af9c:	88fb      	ldrh	r3, [r7, #6]
 801af9e:	2b43      	cmp	r3, #67	; 0x43
 801afa0:	d906      	bls.n	801afb0 <dhcp_option_byte+0x24>
 801afa2:	4b0a      	ldr	r3, [pc, #40]	; (801afcc <dhcp_option_byte+0x40>)
 801afa4:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801afa8:	4909      	ldr	r1, [pc, #36]	; (801afd0 <dhcp_option_byte+0x44>)
 801afaa:	480a      	ldr	r0, [pc, #40]	; (801afd4 <dhcp_option_byte+0x48>)
 801afac:	f003 f994 	bl	801e2d8 <printf>
  options[options_out_len++] = value;
 801afb0:	88fb      	ldrh	r3, [r7, #6]
 801afb2:	1c5a      	adds	r2, r3, #1
 801afb4:	80fa      	strh	r2, [r7, #6]
 801afb6:	461a      	mov	r2, r3
 801afb8:	683b      	ldr	r3, [r7, #0]
 801afba:	4413      	add	r3, r2
 801afbc:	797a      	ldrb	r2, [r7, #5]
 801afbe:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801afc0:	88fb      	ldrh	r3, [r7, #6]
}
 801afc2:	4618      	mov	r0, r3
 801afc4:	3708      	adds	r7, #8
 801afc6:	46bd      	mov	sp, r7
 801afc8:	bd80      	pop	{r7, pc}
 801afca:	bf00      	nop
 801afcc:	08026980 	.word	0x08026980
 801afd0:	08026b58 	.word	0x08026b58
 801afd4:	080269e0 	.word	0x080269e0

0801afd8 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801afd8:	b580      	push	{r7, lr}
 801afda:	b082      	sub	sp, #8
 801afdc:	af00      	add	r7, sp, #0
 801afde:	4603      	mov	r3, r0
 801afe0:	6039      	str	r1, [r7, #0]
 801afe2:	80fb      	strh	r3, [r7, #6]
 801afe4:	4613      	mov	r3, r2
 801afe6:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801afe8:	88fb      	ldrh	r3, [r7, #6]
 801afea:	3302      	adds	r3, #2
 801afec:	2b44      	cmp	r3, #68	; 0x44
 801afee:	d906      	bls.n	801affe <dhcp_option_short+0x26>
 801aff0:	4b0f      	ldr	r3, [pc, #60]	; (801b030 <dhcp_option_short+0x58>)
 801aff2:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801aff6:	490f      	ldr	r1, [pc, #60]	; (801b034 <dhcp_option_short+0x5c>)
 801aff8:	480f      	ldr	r0, [pc, #60]	; (801b038 <dhcp_option_short+0x60>)
 801affa:	f003 f96d 	bl	801e2d8 <printf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801affe:	88bb      	ldrh	r3, [r7, #4]
 801b000:	0a1b      	lsrs	r3, r3, #8
 801b002:	b29a      	uxth	r2, r3
 801b004:	88fb      	ldrh	r3, [r7, #6]
 801b006:	1c59      	adds	r1, r3, #1
 801b008:	80f9      	strh	r1, [r7, #6]
 801b00a:	4619      	mov	r1, r3
 801b00c:	683b      	ldr	r3, [r7, #0]
 801b00e:	440b      	add	r3, r1
 801b010:	b2d2      	uxtb	r2, r2
 801b012:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801b014:	88fb      	ldrh	r3, [r7, #6]
 801b016:	1c5a      	adds	r2, r3, #1
 801b018:	80fa      	strh	r2, [r7, #6]
 801b01a:	461a      	mov	r2, r3
 801b01c:	683b      	ldr	r3, [r7, #0]
 801b01e:	4413      	add	r3, r2
 801b020:	88ba      	ldrh	r2, [r7, #4]
 801b022:	b2d2      	uxtb	r2, r2
 801b024:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801b026:	88fb      	ldrh	r3, [r7, #6]
}
 801b028:	4618      	mov	r0, r3
 801b02a:	3708      	adds	r7, #8
 801b02c:	46bd      	mov	sp, r7
 801b02e:	bd80      	pop	{r7, pc}
 801b030:	08026980 	.word	0x08026980
 801b034:	08026b90 	.word	0x08026b90
 801b038:	080269e0 	.word	0x080269e0

0801b03c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801b03c:	b580      	push	{r7, lr}
 801b03e:	b084      	sub	sp, #16
 801b040:	af00      	add	r7, sp, #0
 801b042:	4603      	mov	r3, r0
 801b044:	60b9      	str	r1, [r7, #8]
 801b046:	607a      	str	r2, [r7, #4]
 801b048:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801b04a:	89fb      	ldrh	r3, [r7, #14]
 801b04c:	3304      	adds	r3, #4
 801b04e:	2b44      	cmp	r3, #68	; 0x44
 801b050:	d906      	bls.n	801b060 <dhcp_option_long+0x24>
 801b052:	4b19      	ldr	r3, [pc, #100]	; (801b0b8 <dhcp_option_long+0x7c>)
 801b054:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801b058:	4918      	ldr	r1, [pc, #96]	; (801b0bc <dhcp_option_long+0x80>)
 801b05a:	4819      	ldr	r0, [pc, #100]	; (801b0c0 <dhcp_option_long+0x84>)
 801b05c:	f003 f93c 	bl	801e2d8 <printf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	0e1a      	lsrs	r2, r3, #24
 801b064:	89fb      	ldrh	r3, [r7, #14]
 801b066:	1c59      	adds	r1, r3, #1
 801b068:	81f9      	strh	r1, [r7, #14]
 801b06a:	4619      	mov	r1, r3
 801b06c:	68bb      	ldr	r3, [r7, #8]
 801b06e:	440b      	add	r3, r1
 801b070:	b2d2      	uxtb	r2, r2
 801b072:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801b074:	687b      	ldr	r3, [r7, #4]
 801b076:	0c1a      	lsrs	r2, r3, #16
 801b078:	89fb      	ldrh	r3, [r7, #14]
 801b07a:	1c59      	adds	r1, r3, #1
 801b07c:	81f9      	strh	r1, [r7, #14]
 801b07e:	4619      	mov	r1, r3
 801b080:	68bb      	ldr	r3, [r7, #8]
 801b082:	440b      	add	r3, r1
 801b084:	b2d2      	uxtb	r2, r2
 801b086:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801b088:	687b      	ldr	r3, [r7, #4]
 801b08a:	0a1a      	lsrs	r2, r3, #8
 801b08c:	89fb      	ldrh	r3, [r7, #14]
 801b08e:	1c59      	adds	r1, r3, #1
 801b090:	81f9      	strh	r1, [r7, #14]
 801b092:	4619      	mov	r1, r3
 801b094:	68bb      	ldr	r3, [r7, #8]
 801b096:	440b      	add	r3, r1
 801b098:	b2d2      	uxtb	r2, r2
 801b09a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801b09c:	89fb      	ldrh	r3, [r7, #14]
 801b09e:	1c5a      	adds	r2, r3, #1
 801b0a0:	81fa      	strh	r2, [r7, #14]
 801b0a2:	461a      	mov	r2, r3
 801b0a4:	68bb      	ldr	r3, [r7, #8]
 801b0a6:	4413      	add	r3, r2
 801b0a8:	687a      	ldr	r2, [r7, #4]
 801b0aa:	b2d2      	uxtb	r2, r2
 801b0ac:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801b0ae:	89fb      	ldrh	r3, [r7, #14]
}
 801b0b0:	4618      	mov	r0, r3
 801b0b2:	3710      	adds	r7, #16
 801b0b4:	46bd      	mov	sp, r7
 801b0b6:	bd80      	pop	{r7, pc}
 801b0b8:	08026980 	.word	0x08026980
 801b0bc:	08026bcc 	.word	0x08026bcc
 801b0c0:	080269e0 	.word	0x080269e0

0801b0c4 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801b0c4:	b580      	push	{r7, lr}
 801b0c6:	b090      	sub	sp, #64	; 0x40
 801b0c8:	af00      	add	r7, sp, #0
 801b0ca:	6078      	str	r0, [r7, #4]
 801b0cc:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801b0ce:	2300      	movs	r3, #0
 801b0d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 801b0d2:	2300      	movs	r3, #0
 801b0d4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801b0d6:	2208      	movs	r2, #8
 801b0d8:	2100      	movs	r1, #0
 801b0da:	48b5      	ldr	r0, [pc, #724]	; (801b3b0 <dhcp_parse_reply+0x2ec>)
 801b0dc:	f003 f8f4 	bl	801e2c8 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801b0e0:	687b      	ldr	r3, [r7, #4]
 801b0e2:	895b      	ldrh	r3, [r3, #10]
 801b0e4:	2b2b      	cmp	r3, #43	; 0x2b
 801b0e6:	d802      	bhi.n	801b0ee <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801b0e8:	f06f 0301 	mvn.w	r3, #1
 801b0ec:	e2a7      	b.n	801b63e <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801b0ee:	687b      	ldr	r3, [r7, #4]
 801b0f0:	685b      	ldr	r3, [r3, #4]
 801b0f2:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801b0f4:	23f0      	movs	r3, #240	; 0xf0
 801b0f6:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801b0f8:	687b      	ldr	r3, [r7, #4]
 801b0fa:	891b      	ldrh	r3, [r3, #8]
 801b0fc:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 801b0fe:	687b      	ldr	r3, [r7, #4]
 801b100:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801b102:	e00c      	b.n	801b11e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801b104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b106:	895b      	ldrh	r3, [r3, #10]
 801b108:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801b10a:	1ad3      	subs	r3, r2, r3
 801b10c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801b10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b110:	895b      	ldrh	r3, [r3, #10]
 801b112:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801b114:	1ad3      	subs	r3, r2, r3
 801b116:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 801b118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b11a:	681b      	ldr	r3, [r3, #0]
 801b11c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801b11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b120:	2b00      	cmp	r3, #0
 801b122:	d004      	beq.n	801b12e <dhcp_parse_reply+0x6a>
 801b124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b126:	895b      	ldrh	r3, [r3, #10]
 801b128:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801b12a:	429a      	cmp	r2, r3
 801b12c:	d2ea      	bcs.n	801b104 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801b12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b130:	2b00      	cmp	r3, #0
 801b132:	d102      	bne.n	801b13a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801b134:	f06f 0301 	mvn.w	r3, #1
 801b138:	e281      	b.n	801b63e <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 801b13a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801b13c:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 801b13e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801b140:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 801b142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b144:	685b      	ldr	r3, [r3, #4]
 801b146:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801b148:	e239      	b.n	801b5be <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 801b14a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b14c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b14e:	4413      	add	r3, r2
 801b150:	781b      	ldrb	r3, [r3, #0]
 801b152:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 801b154:	2300      	movs	r3, #0
 801b156:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 801b15a:	f04f 33ff 	mov.w	r3, #4294967295
 801b15e:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 801b160:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b162:	3302      	adds	r3, #2
 801b164:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801b166:	8bfa      	ldrh	r2, [r7, #30]
 801b168:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b16a:	429a      	cmp	r2, r3
 801b16c:	d202      	bcs.n	801b174 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801b16e:	f06f 0301 	mvn.w	r3, #1
 801b172:	e264      	b.n	801b63e <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801b174:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b176:	3301      	adds	r3, #1
 801b178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b17a:	8952      	ldrh	r2, [r2, #10]
 801b17c:	4293      	cmp	r3, r2
 801b17e:	da07      	bge.n	801b190 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 801b180:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b182:	3301      	adds	r3, #1
 801b184:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b186:	4413      	add	r3, r2
 801b188:	781b      	ldrb	r3, [r3, #0]
 801b18a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b18e:	e00b      	b.n	801b1a8 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801b190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b192:	681b      	ldr	r3, [r3, #0]
 801b194:	2b00      	cmp	r3, #0
 801b196:	d004      	beq.n	801b1a2 <dhcp_parse_reply+0xde>
 801b198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b19a:	681b      	ldr	r3, [r3, #0]
 801b19c:	685b      	ldr	r3, [r3, #4]
 801b19e:	781b      	ldrb	r3, [r3, #0]
 801b1a0:	e000      	b.n	801b1a4 <dhcp_parse_reply+0xe0>
 801b1a2:	2300      	movs	r3, #0
 801b1a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801b1a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b1ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 801b1b0:	7dfb      	ldrb	r3, [r7, #23]
 801b1b2:	2b3b      	cmp	r3, #59	; 0x3b
 801b1b4:	f200 812c 	bhi.w	801b410 <dhcp_parse_reply+0x34c>
 801b1b8:	a201      	add	r2, pc, #4	; (adr r2, 801b1c0 <dhcp_parse_reply+0xfc>)
 801b1ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b1be:	bf00      	nop
 801b1c0:	0801b2b1 	.word	0x0801b2b1
 801b1c4:	0801b2c1 	.word	0x0801b2c1
 801b1c8:	0801b411 	.word	0x0801b411
 801b1cc:	0801b2e3 	.word	0x0801b2e3
 801b1d0:	0801b411 	.word	0x0801b411
 801b1d4:	0801b411 	.word	0x0801b411
 801b1d8:	0801b411 	.word	0x0801b411
 801b1dc:	0801b411 	.word	0x0801b411
 801b1e0:	0801b411 	.word	0x0801b411
 801b1e4:	0801b411 	.word	0x0801b411
 801b1e8:	0801b411 	.word	0x0801b411
 801b1ec:	0801b411 	.word	0x0801b411
 801b1f0:	0801b411 	.word	0x0801b411
 801b1f4:	0801b411 	.word	0x0801b411
 801b1f8:	0801b411 	.word	0x0801b411
 801b1fc:	0801b411 	.word	0x0801b411
 801b200:	0801b411 	.word	0x0801b411
 801b204:	0801b411 	.word	0x0801b411
 801b208:	0801b411 	.word	0x0801b411
 801b20c:	0801b411 	.word	0x0801b411
 801b210:	0801b411 	.word	0x0801b411
 801b214:	0801b411 	.word	0x0801b411
 801b218:	0801b411 	.word	0x0801b411
 801b21c:	0801b411 	.word	0x0801b411
 801b220:	0801b411 	.word	0x0801b411
 801b224:	0801b411 	.word	0x0801b411
 801b228:	0801b411 	.word	0x0801b411
 801b22c:	0801b411 	.word	0x0801b411
 801b230:	0801b411 	.word	0x0801b411
 801b234:	0801b411 	.word	0x0801b411
 801b238:	0801b411 	.word	0x0801b411
 801b23c:	0801b411 	.word	0x0801b411
 801b240:	0801b411 	.word	0x0801b411
 801b244:	0801b411 	.word	0x0801b411
 801b248:	0801b411 	.word	0x0801b411
 801b24c:	0801b411 	.word	0x0801b411
 801b250:	0801b411 	.word	0x0801b411
 801b254:	0801b411 	.word	0x0801b411
 801b258:	0801b411 	.word	0x0801b411
 801b25c:	0801b411 	.word	0x0801b411
 801b260:	0801b411 	.word	0x0801b411
 801b264:	0801b411 	.word	0x0801b411
 801b268:	0801b411 	.word	0x0801b411
 801b26c:	0801b411 	.word	0x0801b411
 801b270:	0801b411 	.word	0x0801b411
 801b274:	0801b411 	.word	0x0801b411
 801b278:	0801b411 	.word	0x0801b411
 801b27c:	0801b411 	.word	0x0801b411
 801b280:	0801b411 	.word	0x0801b411
 801b284:	0801b411 	.word	0x0801b411
 801b288:	0801b411 	.word	0x0801b411
 801b28c:	0801b30f 	.word	0x0801b30f
 801b290:	0801b331 	.word	0x0801b331
 801b294:	0801b36d 	.word	0x0801b36d
 801b298:	0801b38f 	.word	0x0801b38f
 801b29c:	0801b411 	.word	0x0801b411
 801b2a0:	0801b411 	.word	0x0801b411
 801b2a4:	0801b411 	.word	0x0801b411
 801b2a8:	0801b3cd 	.word	0x0801b3cd
 801b2ac:	0801b3ef 	.word	0x0801b3ef
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801b2b0:	2300      	movs	r3, #0
 801b2b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b2b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b2ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801b2be:	e0ab      	b.n	801b418 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801b2c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b2c4:	2b04      	cmp	r3, #4
 801b2c6:	d009      	beq.n	801b2dc <dhcp_parse_reply+0x218>
 801b2c8:	4b3a      	ldr	r3, [pc, #232]	; (801b3b4 <dhcp_parse_reply+0x2f0>)
 801b2ca:	f240 622e 	movw	r2, #1582	; 0x62e
 801b2ce:	493a      	ldr	r1, [pc, #232]	; (801b3b8 <dhcp_parse_reply+0x2f4>)
 801b2d0:	483a      	ldr	r0, [pc, #232]	; (801b3bc <dhcp_parse_reply+0x2f8>)
 801b2d2:	f003 f801 	bl	801e2d8 <printf>
 801b2d6:	f06f 0305 	mvn.w	r3, #5
 801b2da:	e1b0      	b.n	801b63e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801b2dc:	2306      	movs	r3, #6
 801b2de:	623b      	str	r3, [r7, #32]
        break;
 801b2e0:	e09a      	b.n	801b418 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801b2e2:	2304      	movs	r3, #4
 801b2e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801b2e8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801b2ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b2f0:	429a      	cmp	r2, r3
 801b2f2:	d209      	bcs.n	801b308 <dhcp_parse_reply+0x244>
 801b2f4:	4b2f      	ldr	r3, [pc, #188]	; (801b3b4 <dhcp_parse_reply+0x2f0>)
 801b2f6:	f240 6233 	movw	r2, #1587	; 0x633
 801b2fa:	4931      	ldr	r1, [pc, #196]	; (801b3c0 <dhcp_parse_reply+0x2fc>)
 801b2fc:	482f      	ldr	r0, [pc, #188]	; (801b3bc <dhcp_parse_reply+0x2f8>)
 801b2fe:	f002 ffeb 	bl	801e2d8 <printf>
 801b302:	f06f 0305 	mvn.w	r3, #5
 801b306:	e19a      	b.n	801b63e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801b308:	2307      	movs	r3, #7
 801b30a:	623b      	str	r3, [r7, #32]
        break;
 801b30c:	e084      	b.n	801b418 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801b30e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b312:	2b04      	cmp	r3, #4
 801b314:	d009      	beq.n	801b32a <dhcp_parse_reply+0x266>
 801b316:	4b27      	ldr	r3, [pc, #156]	; (801b3b4 <dhcp_parse_reply+0x2f0>)
 801b318:	f240 6241 	movw	r2, #1601	; 0x641
 801b31c:	4926      	ldr	r1, [pc, #152]	; (801b3b8 <dhcp_parse_reply+0x2f4>)
 801b31e:	4827      	ldr	r0, [pc, #156]	; (801b3bc <dhcp_parse_reply+0x2f8>)
 801b320:	f002 ffda 	bl	801e2d8 <printf>
 801b324:	f06f 0305 	mvn.w	r3, #5
 801b328:	e189      	b.n	801b63e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801b32a:	2303      	movs	r3, #3
 801b32c:	623b      	str	r3, [r7, #32]
        break;
 801b32e:	e073      	b.n	801b418 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801b330:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b334:	2b01      	cmp	r3, #1
 801b336:	d009      	beq.n	801b34c <dhcp_parse_reply+0x288>
 801b338:	4b1e      	ldr	r3, [pc, #120]	; (801b3b4 <dhcp_parse_reply+0x2f0>)
 801b33a:	f240 624f 	movw	r2, #1615	; 0x64f
 801b33e:	4921      	ldr	r1, [pc, #132]	; (801b3c4 <dhcp_parse_reply+0x300>)
 801b340:	481e      	ldr	r0, [pc, #120]	; (801b3bc <dhcp_parse_reply+0x2f8>)
 801b342:	f002 ffc9 	bl	801e2d8 <printf>
 801b346:	f06f 0305 	mvn.w	r3, #5
 801b34a:	e178      	b.n	801b63e <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801b34c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801b34e:	2bf0      	cmp	r3, #240	; 0xf0
 801b350:	d009      	beq.n	801b366 <dhcp_parse_reply+0x2a2>
 801b352:	4b18      	ldr	r3, [pc, #96]	; (801b3b4 <dhcp_parse_reply+0x2f0>)
 801b354:	f240 6251 	movw	r2, #1617	; 0x651
 801b358:	491b      	ldr	r1, [pc, #108]	; (801b3c8 <dhcp_parse_reply+0x304>)
 801b35a:	4818      	ldr	r0, [pc, #96]	; (801b3bc <dhcp_parse_reply+0x2f8>)
 801b35c:	f002 ffbc 	bl	801e2d8 <printf>
 801b360:	f06f 0305 	mvn.w	r3, #5
 801b364:	e16b      	b.n	801b63e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801b366:	2300      	movs	r3, #0
 801b368:	623b      	str	r3, [r7, #32]
        break;
 801b36a:	e055      	b.n	801b418 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801b36c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b370:	2b01      	cmp	r3, #1
 801b372:	d009      	beq.n	801b388 <dhcp_parse_reply+0x2c4>
 801b374:	4b0f      	ldr	r3, [pc, #60]	; (801b3b4 <dhcp_parse_reply+0x2f0>)
 801b376:	f240 6255 	movw	r2, #1621	; 0x655
 801b37a:	4912      	ldr	r1, [pc, #72]	; (801b3c4 <dhcp_parse_reply+0x300>)
 801b37c:	480f      	ldr	r0, [pc, #60]	; (801b3bc <dhcp_parse_reply+0x2f8>)
 801b37e:	f002 ffab 	bl	801e2d8 <printf>
 801b382:	f06f 0305 	mvn.w	r3, #5
 801b386:	e15a      	b.n	801b63e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801b388:	2301      	movs	r3, #1
 801b38a:	623b      	str	r3, [r7, #32]
        break;
 801b38c:	e044      	b.n	801b418 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801b38e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b392:	2b04      	cmp	r3, #4
 801b394:	d009      	beq.n	801b3aa <dhcp_parse_reply+0x2e6>
 801b396:	4b07      	ldr	r3, [pc, #28]	; (801b3b4 <dhcp_parse_reply+0x2f0>)
 801b398:	f240 6259 	movw	r2, #1625	; 0x659
 801b39c:	4906      	ldr	r1, [pc, #24]	; (801b3b8 <dhcp_parse_reply+0x2f4>)
 801b39e:	4807      	ldr	r0, [pc, #28]	; (801b3bc <dhcp_parse_reply+0x2f8>)
 801b3a0:	f002 ff9a 	bl	801e2d8 <printf>
 801b3a4:	f06f 0305 	mvn.w	r3, #5
 801b3a8:	e149      	b.n	801b63e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801b3aa:	2302      	movs	r3, #2
 801b3ac:	623b      	str	r3, [r7, #32]
        break;
 801b3ae:	e033      	b.n	801b418 <dhcp_parse_reply+0x354>
 801b3b0:	2000c234 	.word	0x2000c234
 801b3b4:	08026980 	.word	0x08026980
 801b3b8:	08026c08 	.word	0x08026c08
 801b3bc:	080269e0 	.word	0x080269e0
 801b3c0:	08026c14 	.word	0x08026c14
 801b3c4:	08026c28 	.word	0x08026c28
 801b3c8:	08026c34 	.word	0x08026c34
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801b3cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b3d0:	2b04      	cmp	r3, #4
 801b3d2:	d009      	beq.n	801b3e8 <dhcp_parse_reply+0x324>
 801b3d4:	4b9c      	ldr	r3, [pc, #624]	; (801b648 <dhcp_parse_reply+0x584>)
 801b3d6:	f240 625d 	movw	r2, #1629	; 0x65d
 801b3da:	499c      	ldr	r1, [pc, #624]	; (801b64c <dhcp_parse_reply+0x588>)
 801b3dc:	489c      	ldr	r0, [pc, #624]	; (801b650 <dhcp_parse_reply+0x58c>)
 801b3de:	f002 ff7b 	bl	801e2d8 <printf>
 801b3e2:	f06f 0305 	mvn.w	r3, #5
 801b3e6:	e12a      	b.n	801b63e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 801b3e8:	2304      	movs	r3, #4
 801b3ea:	623b      	str	r3, [r7, #32]
        break;
 801b3ec:	e014      	b.n	801b418 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801b3ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b3f2:	2b04      	cmp	r3, #4
 801b3f4:	d009      	beq.n	801b40a <dhcp_parse_reply+0x346>
 801b3f6:	4b94      	ldr	r3, [pc, #592]	; (801b648 <dhcp_parse_reply+0x584>)
 801b3f8:	f240 6261 	movw	r2, #1633	; 0x661
 801b3fc:	4993      	ldr	r1, [pc, #588]	; (801b64c <dhcp_parse_reply+0x588>)
 801b3fe:	4894      	ldr	r0, [pc, #592]	; (801b650 <dhcp_parse_reply+0x58c>)
 801b400:	f002 ff6a 	bl	801e2d8 <printf>
 801b404:	f06f 0305 	mvn.w	r3, #5
 801b408:	e119      	b.n	801b63e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 801b40a:	2305      	movs	r3, #5
 801b40c:	623b      	str	r3, [r7, #32]
        break;
 801b40e:	e003      	b.n	801b418 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 801b410:	2300      	movs	r3, #0
 801b412:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801b416:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801b418:	7dfb      	ldrb	r3, [r7, #23]
 801b41a:	2b00      	cmp	r3, #0
 801b41c:	d103      	bne.n	801b426 <dhcp_parse_reply+0x362>
      offset++;
 801b41e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b420:	3301      	adds	r3, #1
 801b422:	877b      	strh	r3, [r7, #58]	; 0x3a
 801b424:	e0a1      	b.n	801b56a <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801b426:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b428:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b42c:	4413      	add	r3, r2
 801b42e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801b432:	4293      	cmp	r3, r2
 801b434:	dd02      	ble.n	801b43c <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 801b436:	f06f 0301 	mvn.w	r3, #1
 801b43a:	e100      	b.n	801b63e <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 801b43c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b440:	b29a      	uxth	r2, r3
 801b442:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b444:	4413      	add	r3, r2
 801b446:	b29b      	uxth	r3, r3
 801b448:	3302      	adds	r3, #2
 801b44a:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801b44c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b450:	2b00      	cmp	r3, #0
 801b452:	f000 808a 	beq.w	801b56a <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 801b456:	2300      	movs	r3, #0
 801b458:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801b45a:	6a3b      	ldr	r3, [r7, #32]
 801b45c:	2b00      	cmp	r3, #0
 801b45e:	db02      	blt.n	801b466 <dhcp_parse_reply+0x3a2>
 801b460:	6a3b      	ldr	r3, [r7, #32]
 801b462:	2b07      	cmp	r3, #7
 801b464:	dd06      	ble.n	801b474 <dhcp_parse_reply+0x3b0>
 801b466:	4b78      	ldr	r3, [pc, #480]	; (801b648 <dhcp_parse_reply+0x584>)
 801b468:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801b46c:	4979      	ldr	r1, [pc, #484]	; (801b654 <dhcp_parse_reply+0x590>)
 801b46e:	4878      	ldr	r0, [pc, #480]	; (801b650 <dhcp_parse_reply+0x58c>)
 801b470:	f002 ff32 	bl	801e2d8 <printf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801b474:	4a78      	ldr	r2, [pc, #480]	; (801b658 <dhcp_parse_reply+0x594>)
 801b476:	6a3b      	ldr	r3, [r7, #32]
 801b478:	4413      	add	r3, r2
 801b47a:	781b      	ldrb	r3, [r3, #0]
 801b47c:	2b00      	cmp	r3, #0
 801b47e:	d174      	bne.n	801b56a <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 801b480:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b484:	2b04      	cmp	r3, #4
 801b486:	bf28      	it	cs
 801b488:	2304      	movcs	r3, #4
 801b48a:	b2db      	uxtb	r3, r3
 801b48c:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801b48e:	8bfb      	ldrh	r3, [r7, #30]
 801b490:	8aba      	ldrh	r2, [r7, #20]
 801b492:	f107 0108 	add.w	r1, r7, #8
 801b496:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b498:	f7f8 fc18 	bl	8013ccc <pbuf_copy_partial>
 801b49c:	4603      	mov	r3, r0
 801b49e:	461a      	mov	r2, r3
 801b4a0:	8abb      	ldrh	r3, [r7, #20]
 801b4a2:	4293      	cmp	r3, r2
 801b4a4:	d002      	beq.n	801b4ac <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 801b4a6:	f06f 0301 	mvn.w	r3, #1
 801b4aa:	e0c8      	b.n	801b63e <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 801b4ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b4b0:	2b04      	cmp	r3, #4
 801b4b2:	d933      	bls.n	801b51c <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801b4b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b4b8:	f003 0303 	and.w	r3, r3, #3
 801b4bc:	b2db      	uxtb	r3, r3
 801b4be:	2b00      	cmp	r3, #0
 801b4c0:	d009      	beq.n	801b4d6 <dhcp_parse_reply+0x412>
 801b4c2:	4b61      	ldr	r3, [pc, #388]	; (801b648 <dhcp_parse_reply+0x584>)
 801b4c4:	f240 6281 	movw	r2, #1665	; 0x681
 801b4c8:	4964      	ldr	r1, [pc, #400]	; (801b65c <dhcp_parse_reply+0x598>)
 801b4ca:	4861      	ldr	r0, [pc, #388]	; (801b650 <dhcp_parse_reply+0x58c>)
 801b4cc:	f002 ff04 	bl	801e2d8 <printf>
 801b4d0:	f06f 0305 	mvn.w	r3, #5
 801b4d4:	e0b3      	b.n	801b63e <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 801b4d6:	4a60      	ldr	r2, [pc, #384]	; (801b658 <dhcp_parse_reply+0x594>)
 801b4d8:	6a3b      	ldr	r3, [r7, #32]
 801b4da:	4413      	add	r3, r2
 801b4dc:	2201      	movs	r2, #1
 801b4de:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801b4e0:	68bb      	ldr	r3, [r7, #8]
 801b4e2:	4618      	mov	r0, r3
 801b4e4:	f7f6 fe49 	bl	801217a <lwip_htonl>
 801b4e8:	4602      	mov	r2, r0
 801b4ea:	495d      	ldr	r1, [pc, #372]	; (801b660 <dhcp_parse_reply+0x59c>)
 801b4ec:	6a3b      	ldr	r3, [r7, #32]
 801b4ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801b4f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b4f6:	3b04      	subs	r3, #4
 801b4f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801b4fc:	8bfb      	ldrh	r3, [r7, #30]
 801b4fe:	3304      	adds	r3, #4
 801b500:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801b502:	8a7a      	ldrh	r2, [r7, #18]
 801b504:	8bfb      	ldrh	r3, [r7, #30]
 801b506:	429a      	cmp	r2, r3
 801b508:	d202      	bcs.n	801b510 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 801b50a:	f06f 0301 	mvn.w	r3, #1
 801b50e:	e096      	b.n	801b63e <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 801b510:	8a7b      	ldrh	r3, [r7, #18]
 801b512:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801b514:	6a3b      	ldr	r3, [r7, #32]
 801b516:	3301      	adds	r3, #1
 801b518:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801b51a:	e79e      	b.n	801b45a <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 801b51c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b520:	2b04      	cmp	r3, #4
 801b522:	d106      	bne.n	801b532 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 801b524:	68bb      	ldr	r3, [r7, #8]
 801b526:	4618      	mov	r0, r3
 801b528:	f7f6 fe27 	bl	801217a <lwip_htonl>
 801b52c:	4603      	mov	r3, r0
 801b52e:	60bb      	str	r3, [r7, #8]
 801b530:	e011      	b.n	801b556 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801b532:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b536:	2b01      	cmp	r3, #1
 801b538:	d009      	beq.n	801b54e <dhcp_parse_reply+0x48a>
 801b53a:	4b43      	ldr	r3, [pc, #268]	; (801b648 <dhcp_parse_reply+0x584>)
 801b53c:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801b540:	4948      	ldr	r1, [pc, #288]	; (801b664 <dhcp_parse_reply+0x5a0>)
 801b542:	4843      	ldr	r0, [pc, #268]	; (801b650 <dhcp_parse_reply+0x58c>)
 801b544:	f002 fec8 	bl	801e2d8 <printf>
 801b548:	f06f 0305 	mvn.w	r3, #5
 801b54c:	e077      	b.n	801b63e <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 801b54e:	f107 0308 	add.w	r3, r7, #8
 801b552:	781b      	ldrb	r3, [r3, #0]
 801b554:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801b556:	4a40      	ldr	r2, [pc, #256]	; (801b658 <dhcp_parse_reply+0x594>)
 801b558:	6a3b      	ldr	r3, [r7, #32]
 801b55a:	4413      	add	r3, r2
 801b55c:	2201      	movs	r2, #1
 801b55e:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801b560:	68ba      	ldr	r2, [r7, #8]
 801b562:	493f      	ldr	r1, [pc, #252]	; (801b660 <dhcp_parse_reply+0x59c>)
 801b564:	6a3b      	ldr	r3, [r7, #32]
 801b566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801b56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b56c:	895b      	ldrh	r3, [r3, #10]
 801b56e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b570:	429a      	cmp	r2, r3
 801b572:	d324      	bcc.n	801b5be <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 801b574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b576:	895b      	ldrh	r3, [r3, #10]
 801b578:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b57a:	1ad3      	subs	r3, r2, r3
 801b57c:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801b57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b580:	895b      	ldrh	r3, [r3, #10]
 801b582:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801b584:	1ad3      	subs	r3, r2, r3
 801b586:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801b588:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b58a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801b58c:	429a      	cmp	r2, r3
 801b58e:	d213      	bcs.n	801b5b8 <dhcp_parse_reply+0x4f4>
        q = q->next;
 801b590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b592:	681b      	ldr	r3, [r3, #0]
 801b594:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801b596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b598:	2b00      	cmp	r3, #0
 801b59a:	d109      	bne.n	801b5b0 <dhcp_parse_reply+0x4ec>
 801b59c:	4b2a      	ldr	r3, [pc, #168]	; (801b648 <dhcp_parse_reply+0x584>)
 801b59e:	f240 629d 	movw	r2, #1693	; 0x69d
 801b5a2:	4931      	ldr	r1, [pc, #196]	; (801b668 <dhcp_parse_reply+0x5a4>)
 801b5a4:	482a      	ldr	r0, [pc, #168]	; (801b650 <dhcp_parse_reply+0x58c>)
 801b5a6:	f002 fe97 	bl	801e2d8 <printf>
 801b5aa:	f06f 0305 	mvn.w	r3, #5
 801b5ae:	e046      	b.n	801b63e <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 801b5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b5b2:	685b      	ldr	r3, [r3, #4]
 801b5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b5b6:	e002      	b.n	801b5be <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801b5b8:	f06f 0301 	mvn.w	r3, #1
 801b5bc:	e03f      	b.n	801b63e <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801b5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b5c0:	2b00      	cmp	r3, #0
 801b5c2:	d00a      	beq.n	801b5da <dhcp_parse_reply+0x516>
 801b5c4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b5c6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801b5c8:	429a      	cmp	r2, r3
 801b5ca:	d206      	bcs.n	801b5da <dhcp_parse_reply+0x516>
 801b5cc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b5ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b5d0:	4413      	add	r3, r2
 801b5d2:	781b      	ldrb	r3, [r3, #0]
 801b5d4:	2bff      	cmp	r3, #255	; 0xff
 801b5d6:	f47f adb8 	bne.w	801b14a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801b5da:	4b1f      	ldr	r3, [pc, #124]	; (801b658 <dhcp_parse_reply+0x594>)
 801b5dc:	781b      	ldrb	r3, [r3, #0]
 801b5de:	2b00      	cmp	r3, #0
 801b5e0:	d018      	beq.n	801b614 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801b5e2:	4b1f      	ldr	r3, [pc, #124]	; (801b660 <dhcp_parse_reply+0x59c>)
 801b5e4:	681b      	ldr	r3, [r3, #0]
 801b5e6:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801b5e8:	4b1b      	ldr	r3, [pc, #108]	; (801b658 <dhcp_parse_reply+0x594>)
 801b5ea:	2200      	movs	r2, #0
 801b5ec:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801b5ee:	68fb      	ldr	r3, [r7, #12]
 801b5f0:	2b01      	cmp	r3, #1
 801b5f2:	d102      	bne.n	801b5fa <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 801b5f4:	2301      	movs	r3, #1
 801b5f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b5f8:	e00c      	b.n	801b614 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801b5fa:	68fb      	ldr	r3, [r7, #12]
 801b5fc:	2b02      	cmp	r3, #2
 801b5fe:	d102      	bne.n	801b606 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 801b600:	2301      	movs	r3, #1
 801b602:	62bb      	str	r3, [r7, #40]	; 0x28
 801b604:	e006      	b.n	801b614 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801b606:	68fb      	ldr	r3, [r7, #12]
 801b608:	2b03      	cmp	r3, #3
 801b60a:	d103      	bne.n	801b614 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 801b60c:	2301      	movs	r3, #1
 801b60e:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 801b610:	2301      	movs	r3, #1
 801b612:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801b614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b616:	2b00      	cmp	r3, #0
 801b618:	d006      	beq.n	801b628 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801b61a:	2300      	movs	r3, #0
 801b61c:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 801b61e:	236c      	movs	r3, #108	; 0x6c
 801b620:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801b622:	23ec      	movs	r3, #236	; 0xec
 801b624:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801b626:	e56a      	b.n	801b0fe <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801b628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b62a:	2b00      	cmp	r3, #0
 801b62c:	d006      	beq.n	801b63c <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 801b62e:	2300      	movs	r3, #0
 801b630:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 801b632:	232c      	movs	r3, #44	; 0x2c
 801b634:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801b636:	236c      	movs	r3, #108	; 0x6c
 801b638:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 801b63a:	e560      	b.n	801b0fe <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801b63c:	2300      	movs	r3, #0
}
 801b63e:	4618      	mov	r0, r3
 801b640:	3740      	adds	r7, #64	; 0x40
 801b642:	46bd      	mov	sp, r7
 801b644:	bd80      	pop	{r7, pc}
 801b646:	bf00      	nop
 801b648:	08026980 	.word	0x08026980
 801b64c:	08026c08 	.word	0x08026c08
 801b650:	080269e0 	.word	0x080269e0
 801b654:	08026c4c 	.word	0x08026c4c
 801b658:	2000c234 	.word	0x2000c234
 801b65c:	08026c60 	.word	0x08026c60
 801b660:	2000c214 	.word	0x2000c214
 801b664:	08026c78 	.word	0x08026c78
 801b668:	08026c8c 	.word	0x08026c8c

0801b66c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801b66c:	b580      	push	{r7, lr}
 801b66e:	b08a      	sub	sp, #40	; 0x28
 801b670:	af00      	add	r7, sp, #0
 801b672:	60f8      	str	r0, [r7, #12]
 801b674:	60b9      	str	r1, [r7, #8]
 801b676:	607a      	str	r2, [r7, #4]
 801b678:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801b67a:	4b60      	ldr	r3, [pc, #384]	; (801b7fc <dhcp_recv+0x190>)
 801b67c:	685b      	ldr	r3, [r3, #4]
 801b67e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b680:	6a3b      	ldr	r3, [r7, #32]
 801b682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b684:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801b686:	687b      	ldr	r3, [r7, #4]
 801b688:	685b      	ldr	r3, [r3, #4]
 801b68a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801b68c:	69fb      	ldr	r3, [r7, #28]
 801b68e:	2b00      	cmp	r3, #0
 801b690:	f000 809d 	beq.w	801b7ce <dhcp_recv+0x162>
 801b694:	69fb      	ldr	r3, [r7, #28]
 801b696:	791b      	ldrb	r3, [r3, #4]
 801b698:	2b00      	cmp	r3, #0
 801b69a:	f000 8098 	beq.w	801b7ce <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801b69e:	687b      	ldr	r3, [r7, #4]
 801b6a0:	895b      	ldrh	r3, [r3, #10]
 801b6a2:	2b2b      	cmp	r3, #43	; 0x2b
 801b6a4:	f240 8095 	bls.w	801b7d2 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801b6a8:	69bb      	ldr	r3, [r7, #24]
 801b6aa:	781b      	ldrb	r3, [r3, #0]
 801b6ac:	2b02      	cmp	r3, #2
 801b6ae:	f040 8092 	bne.w	801b7d6 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801b6b2:	2300      	movs	r3, #0
 801b6b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b6b8:	e012      	b.n	801b6e0 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801b6ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b6be:	6a3a      	ldr	r2, [r7, #32]
 801b6c0:	4413      	add	r3, r2
 801b6c2:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801b6c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b6ca:	69b9      	ldr	r1, [r7, #24]
 801b6cc:	440b      	add	r3, r1
 801b6ce:	7f1b      	ldrb	r3, [r3, #28]
 801b6d0:	429a      	cmp	r2, r3
 801b6d2:	f040 8082 	bne.w	801b7da <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801b6d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b6da:	3301      	adds	r3, #1
 801b6dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b6e0:	6a3b      	ldr	r3, [r7, #32]
 801b6e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b6e6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801b6ea:	429a      	cmp	r2, r3
 801b6ec:	d203      	bcs.n	801b6f6 <dhcp_recv+0x8a>
 801b6ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b6f2:	2b05      	cmp	r3, #5
 801b6f4:	d9e1      	bls.n	801b6ba <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801b6f6:	69bb      	ldr	r3, [r7, #24]
 801b6f8:	685b      	ldr	r3, [r3, #4]
 801b6fa:	4618      	mov	r0, r3
 801b6fc:	f7f6 fd3d 	bl	801217a <lwip_htonl>
 801b700:	4602      	mov	r2, r0
 801b702:	69fb      	ldr	r3, [r7, #28]
 801b704:	681b      	ldr	r3, [r3, #0]
 801b706:	429a      	cmp	r2, r3
 801b708:	d169      	bne.n	801b7de <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801b70a:	69f9      	ldr	r1, [r7, #28]
 801b70c:	6878      	ldr	r0, [r7, #4]
 801b70e:	f7ff fcd9 	bl	801b0c4 <dhcp_parse_reply>
 801b712:	4603      	mov	r3, r0
 801b714:	2b00      	cmp	r3, #0
 801b716:	d164      	bne.n	801b7e2 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801b718:	4b39      	ldr	r3, [pc, #228]	; (801b800 <dhcp_recv+0x194>)
 801b71a:	785b      	ldrb	r3, [r3, #1]
 801b71c:	2b00      	cmp	r3, #0
 801b71e:	d062      	beq.n	801b7e6 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801b720:	687b      	ldr	r3, [r7, #4]
 801b722:	685b      	ldr	r3, [r3, #4]
 801b724:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801b726:	4b37      	ldr	r3, [pc, #220]	; (801b804 <dhcp_recv+0x198>)
 801b728:	685b      	ldr	r3, [r3, #4]
 801b72a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801b72c:	7cfb      	ldrb	r3, [r7, #19]
 801b72e:	2b05      	cmp	r3, #5
 801b730:	d12a      	bne.n	801b788 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801b732:	69fb      	ldr	r3, [r7, #28]
 801b734:	795b      	ldrb	r3, [r3, #5]
 801b736:	2b01      	cmp	r3, #1
 801b738:	d112      	bne.n	801b760 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801b73a:	6979      	ldr	r1, [r7, #20]
 801b73c:	6a38      	ldr	r0, [r7, #32]
 801b73e:	f7fe fe17 	bl	801a370 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801b742:	6a3b      	ldr	r3, [r7, #32]
 801b744:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b748:	f003 0308 	and.w	r3, r3, #8
 801b74c:	2b00      	cmp	r3, #0
 801b74e:	d003      	beq.n	801b758 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801b750:	6a38      	ldr	r0, [r7, #32]
 801b752:	f7fe fb87 	bl	8019e64 <dhcp_check>
 801b756:	e049      	b.n	801b7ec <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801b758:	6a38      	ldr	r0, [r7, #32]
 801b75a:	f7ff f867 	bl	801a82c <dhcp_bind>
 801b75e:	e045      	b.n	801b7ec <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801b760:	69fb      	ldr	r3, [r7, #28]
 801b762:	795b      	ldrb	r3, [r3, #5]
 801b764:	2b03      	cmp	r3, #3
 801b766:	d007      	beq.n	801b778 <dhcp_recv+0x10c>
 801b768:	69fb      	ldr	r3, [r7, #28]
 801b76a:	795b      	ldrb	r3, [r3, #5]
 801b76c:	2b04      	cmp	r3, #4
 801b76e:	d003      	beq.n	801b778 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801b770:	69fb      	ldr	r3, [r7, #28]
 801b772:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801b774:	2b05      	cmp	r3, #5
 801b776:	d139      	bne.n	801b7ec <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 801b778:	6979      	ldr	r1, [r7, #20]
 801b77a:	6a38      	ldr	r0, [r7, #32]
 801b77c:	f7fe fdf8 	bl	801a370 <dhcp_handle_ack>
      dhcp_bind(netif);
 801b780:	6a38      	ldr	r0, [r7, #32]
 801b782:	f7ff f853 	bl	801a82c <dhcp_bind>
 801b786:	e031      	b.n	801b7ec <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801b788:	7cfb      	ldrb	r3, [r7, #19]
 801b78a:	2b06      	cmp	r3, #6
 801b78c:	d113      	bne.n	801b7b6 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801b78e:	69fb      	ldr	r3, [r7, #28]
 801b790:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801b792:	2b03      	cmp	r3, #3
 801b794:	d00b      	beq.n	801b7ae <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801b796:	69fb      	ldr	r3, [r7, #28]
 801b798:	795b      	ldrb	r3, [r3, #5]
 801b79a:	2b01      	cmp	r3, #1
 801b79c:	d007      	beq.n	801b7ae <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801b79e:	69fb      	ldr	r3, [r7, #28]
 801b7a0:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801b7a2:	2b04      	cmp	r3, #4
 801b7a4:	d003      	beq.n	801b7ae <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801b7a6:	69fb      	ldr	r3, [r7, #28]
 801b7a8:	795b      	ldrb	r3, [r3, #5]
 801b7aa:	2b05      	cmp	r3, #5
 801b7ac:	d103      	bne.n	801b7b6 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801b7ae:	6a38      	ldr	r0, [r7, #32]
 801b7b0:	f7fe fb3e 	bl	8019e30 <dhcp_handle_nak>
 801b7b4:	e01a      	b.n	801b7ec <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801b7b6:	7cfb      	ldrb	r3, [r7, #19]
 801b7b8:	2b02      	cmp	r3, #2
 801b7ba:	d116      	bne.n	801b7ea <dhcp_recv+0x17e>
 801b7bc:	69fb      	ldr	r3, [r7, #28]
 801b7be:	795b      	ldrb	r3, [r3, #5]
 801b7c0:	2b06      	cmp	r3, #6
 801b7c2:	d112      	bne.n	801b7ea <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801b7c4:	6979      	ldr	r1, [r7, #20]
 801b7c6:	6a38      	ldr	r0, [r7, #32]
 801b7c8:	f7fe fb80 	bl	8019ecc <dhcp_handle_offer>
 801b7cc:	e00e      	b.n	801b7ec <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801b7ce:	bf00      	nop
 801b7d0:	e00c      	b.n	801b7ec <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801b7d2:	bf00      	nop
 801b7d4:	e00a      	b.n	801b7ec <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801b7d6:	bf00      	nop
 801b7d8:	e008      	b.n	801b7ec <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801b7da:	bf00      	nop
 801b7dc:	e006      	b.n	801b7ec <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801b7de:	bf00      	nop
 801b7e0:	e004      	b.n	801b7ec <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801b7e2:	bf00      	nop
 801b7e4:	e002      	b.n	801b7ec <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801b7e6:	bf00      	nop
 801b7e8:	e000      	b.n	801b7ec <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801b7ea:	bf00      	nop
  pbuf_free(p);
 801b7ec:	6878      	ldr	r0, [r7, #4]
 801b7ee:	f7f8 f867 	bl	80138c0 <pbuf_free>
}
 801b7f2:	bf00      	nop
 801b7f4:	3728      	adds	r7, #40	; 0x28
 801b7f6:	46bd      	mov	sp, r7
 801b7f8:	bd80      	pop	{r7, pc}
 801b7fa:	bf00      	nop
 801b7fc:	20008a40 	.word	0x20008a40
 801b800:	2000c234 	.word	0x2000c234
 801b804:	2000c214 	.word	0x2000c214

0801b808 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801b808:	b580      	push	{r7, lr}
 801b80a:	b088      	sub	sp, #32
 801b80c:	af00      	add	r7, sp, #0
 801b80e:	60f8      	str	r0, [r7, #12]
 801b810:	60b9      	str	r1, [r7, #8]
 801b812:	603b      	str	r3, [r7, #0]
 801b814:	4613      	mov	r3, r2
 801b816:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801b818:	68fb      	ldr	r3, [r7, #12]
 801b81a:	2b00      	cmp	r3, #0
 801b81c:	d108      	bne.n	801b830 <dhcp_create_msg+0x28>
 801b81e:	4b5f      	ldr	r3, [pc, #380]	; (801b99c <dhcp_create_msg+0x194>)
 801b820:	f240 7269 	movw	r2, #1897	; 0x769
 801b824:	495e      	ldr	r1, [pc, #376]	; (801b9a0 <dhcp_create_msg+0x198>)
 801b826:	485f      	ldr	r0, [pc, #380]	; (801b9a4 <dhcp_create_msg+0x19c>)
 801b828:	f002 fd56 	bl	801e2d8 <printf>
 801b82c:	2300      	movs	r3, #0
 801b82e:	e0b1      	b.n	801b994 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801b830:	68bb      	ldr	r3, [r7, #8]
 801b832:	2b00      	cmp	r3, #0
 801b834:	d108      	bne.n	801b848 <dhcp_create_msg+0x40>
 801b836:	4b59      	ldr	r3, [pc, #356]	; (801b99c <dhcp_create_msg+0x194>)
 801b838:	f240 726a 	movw	r2, #1898	; 0x76a
 801b83c:	495a      	ldr	r1, [pc, #360]	; (801b9a8 <dhcp_create_msg+0x1a0>)
 801b83e:	4859      	ldr	r0, [pc, #356]	; (801b9a4 <dhcp_create_msg+0x19c>)
 801b840:	f002 fd4a 	bl	801e2d8 <printf>
 801b844:	2300      	movs	r3, #0
 801b846:	e0a5      	b.n	801b994 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801b848:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b84c:	f44f 719a 	mov.w	r1, #308	; 0x134
 801b850:	2036      	movs	r0, #54	; 0x36
 801b852:	f7f7 fd51 	bl	80132f8 <pbuf_alloc>
 801b856:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801b858:	69bb      	ldr	r3, [r7, #24]
 801b85a:	2b00      	cmp	r3, #0
 801b85c:	d101      	bne.n	801b862 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801b85e:	2300      	movs	r3, #0
 801b860:	e098      	b.n	801b994 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801b862:	69bb      	ldr	r3, [r7, #24]
 801b864:	895b      	ldrh	r3, [r3, #10]
 801b866:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801b86a:	d206      	bcs.n	801b87a <dhcp_create_msg+0x72>
 801b86c:	4b4b      	ldr	r3, [pc, #300]	; (801b99c <dhcp_create_msg+0x194>)
 801b86e:	f240 7271 	movw	r2, #1905	; 0x771
 801b872:	494e      	ldr	r1, [pc, #312]	; (801b9ac <dhcp_create_msg+0x1a4>)
 801b874:	484b      	ldr	r0, [pc, #300]	; (801b9a4 <dhcp_create_msg+0x19c>)
 801b876:	f002 fd2f 	bl	801e2d8 <printf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801b87a:	79fb      	ldrb	r3, [r7, #7]
 801b87c:	2b03      	cmp	r3, #3
 801b87e:	d103      	bne.n	801b888 <dhcp_create_msg+0x80>
 801b880:	68bb      	ldr	r3, [r7, #8]
 801b882:	795b      	ldrb	r3, [r3, #5]
 801b884:	2b03      	cmp	r3, #3
 801b886:	d10d      	bne.n	801b8a4 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801b888:	68bb      	ldr	r3, [r7, #8]
 801b88a:	799b      	ldrb	r3, [r3, #6]
 801b88c:	2b00      	cmp	r3, #0
 801b88e:	d105      	bne.n	801b89c <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801b890:	f002 fd82 	bl	801e398 <rand>
 801b894:	4603      	mov	r3, r0
 801b896:	461a      	mov	r2, r3
 801b898:	4b45      	ldr	r3, [pc, #276]	; (801b9b0 <dhcp_create_msg+0x1a8>)
 801b89a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801b89c:	4b44      	ldr	r3, [pc, #272]	; (801b9b0 <dhcp_create_msg+0x1a8>)
 801b89e:	681a      	ldr	r2, [r3, #0]
 801b8a0:	68bb      	ldr	r3, [r7, #8]
 801b8a2:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801b8a4:	69bb      	ldr	r3, [r7, #24]
 801b8a6:	685b      	ldr	r3, [r3, #4]
 801b8a8:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801b8aa:	f44f 729a 	mov.w	r2, #308	; 0x134
 801b8ae:	2100      	movs	r1, #0
 801b8b0:	6978      	ldr	r0, [r7, #20]
 801b8b2:	f002 fd09 	bl	801e2c8 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801b8b6:	697b      	ldr	r3, [r7, #20]
 801b8b8:	2201      	movs	r2, #1
 801b8ba:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801b8bc:	697b      	ldr	r3, [r7, #20]
 801b8be:	2201      	movs	r2, #1
 801b8c0:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801b8c2:	68fb      	ldr	r3, [r7, #12]
 801b8c4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801b8c8:	697b      	ldr	r3, [r7, #20]
 801b8ca:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801b8cc:	68bb      	ldr	r3, [r7, #8]
 801b8ce:	681b      	ldr	r3, [r3, #0]
 801b8d0:	4618      	mov	r0, r3
 801b8d2:	f7f6 fc52 	bl	801217a <lwip_htonl>
 801b8d6:	4602      	mov	r2, r0
 801b8d8:	697b      	ldr	r3, [r7, #20]
 801b8da:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801b8dc:	79fb      	ldrb	r3, [r7, #7]
 801b8de:	2b08      	cmp	r3, #8
 801b8e0:	d010      	beq.n	801b904 <dhcp_create_msg+0xfc>
 801b8e2:	79fb      	ldrb	r3, [r7, #7]
 801b8e4:	2b04      	cmp	r3, #4
 801b8e6:	d00d      	beq.n	801b904 <dhcp_create_msg+0xfc>
 801b8e8:	79fb      	ldrb	r3, [r7, #7]
 801b8ea:	2b07      	cmp	r3, #7
 801b8ec:	d00a      	beq.n	801b904 <dhcp_create_msg+0xfc>
 801b8ee:	79fb      	ldrb	r3, [r7, #7]
 801b8f0:	2b03      	cmp	r3, #3
 801b8f2:	d10c      	bne.n	801b90e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801b8f4:	68bb      	ldr	r3, [r7, #8]
 801b8f6:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801b8f8:	2b05      	cmp	r3, #5
 801b8fa:	d003      	beq.n	801b904 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801b8fc:	68bb      	ldr	r3, [r7, #8]
 801b8fe:	795b      	ldrb	r3, [r3, #5]
 801b900:	2b04      	cmp	r3, #4
 801b902:	d104      	bne.n	801b90e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801b904:	68fb      	ldr	r3, [r7, #12]
 801b906:	3304      	adds	r3, #4
 801b908:	681a      	ldr	r2, [r3, #0]
 801b90a:	697b      	ldr	r3, [r7, #20]
 801b90c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801b90e:	2300      	movs	r3, #0
 801b910:	83fb      	strh	r3, [r7, #30]
 801b912:	e00c      	b.n	801b92e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801b914:	8bfa      	ldrh	r2, [r7, #30]
 801b916:	8bfb      	ldrh	r3, [r7, #30]
 801b918:	68f9      	ldr	r1, [r7, #12]
 801b91a:	440a      	add	r2, r1
 801b91c:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 801b920:	697a      	ldr	r2, [r7, #20]
 801b922:	4413      	add	r3, r2
 801b924:	460a      	mov	r2, r1
 801b926:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801b928:	8bfb      	ldrh	r3, [r7, #30]
 801b92a:	3301      	adds	r3, #1
 801b92c:	83fb      	strh	r3, [r7, #30]
 801b92e:	8bfb      	ldrh	r3, [r7, #30]
 801b930:	2b05      	cmp	r3, #5
 801b932:	d9ef      	bls.n	801b914 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801b934:	697b      	ldr	r3, [r7, #20]
 801b936:	2200      	movs	r2, #0
 801b938:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801b93c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801b940:	2200      	movs	r2, #0
 801b942:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801b946:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801b94a:	2200      	movs	r2, #0
 801b94c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 801b950:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 801b954:	2200      	movs	r2, #0
 801b956:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801b95a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801b95e:	697b      	ldr	r3, [r7, #20]
 801b960:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b964:	2301      	movs	r3, #1
 801b966:	2235      	movs	r2, #53	; 0x35
 801b968:	2000      	movs	r0, #0
 801b96a:	f7ff fadb 	bl	801af24 <dhcp_option>
 801b96e:	4603      	mov	r3, r0
 801b970:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801b972:	697b      	ldr	r3, [r7, #20]
 801b974:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b978:	79fa      	ldrb	r2, [r7, #7]
 801b97a:	8a7b      	ldrh	r3, [r7, #18]
 801b97c:	4618      	mov	r0, r3
 801b97e:	f7ff fb05 	bl	801af8c <dhcp_option_byte>
 801b982:	4603      	mov	r3, r0
 801b984:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801b986:	683b      	ldr	r3, [r7, #0]
 801b988:	2b00      	cmp	r3, #0
 801b98a:	d002      	beq.n	801b992 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801b98c:	683b      	ldr	r3, [r7, #0]
 801b98e:	8a7a      	ldrh	r2, [r7, #18]
 801b990:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801b992:	69bb      	ldr	r3, [r7, #24]
}
 801b994:	4618      	mov	r0, r3
 801b996:	3720      	adds	r7, #32
 801b998:	46bd      	mov	sp, r7
 801b99a:	bd80      	pop	{r7, pc}
 801b99c:	08026980 	.word	0x08026980
 801b9a0:	08026ca0 	.word	0x08026ca0
 801b9a4:	080269e0 	.word	0x080269e0
 801b9a8:	08026cc0 	.word	0x08026cc0
 801b9ac:	08026ce0 	.word	0x08026ce0
 801b9b0:	2000c244 	.word	0x2000c244

0801b9b4 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801b9b4:	b580      	push	{r7, lr}
 801b9b6:	b084      	sub	sp, #16
 801b9b8:	af00      	add	r7, sp, #0
 801b9ba:	4603      	mov	r3, r0
 801b9bc:	60b9      	str	r1, [r7, #8]
 801b9be:	607a      	str	r2, [r7, #4]
 801b9c0:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801b9c2:	89fb      	ldrh	r3, [r7, #14]
 801b9c4:	1c5a      	adds	r2, r3, #1
 801b9c6:	81fa      	strh	r2, [r7, #14]
 801b9c8:	461a      	mov	r2, r3
 801b9ca:	68bb      	ldr	r3, [r7, #8]
 801b9cc:	4413      	add	r3, r2
 801b9ce:	22ff      	movs	r2, #255	; 0xff
 801b9d0:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801b9d2:	e007      	b.n	801b9e4 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801b9d4:	89fb      	ldrh	r3, [r7, #14]
 801b9d6:	1c5a      	adds	r2, r3, #1
 801b9d8:	81fa      	strh	r2, [r7, #14]
 801b9da:	461a      	mov	r2, r3
 801b9dc:	68bb      	ldr	r3, [r7, #8]
 801b9de:	4413      	add	r3, r2
 801b9e0:	2200      	movs	r2, #0
 801b9e2:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801b9e4:	89fb      	ldrh	r3, [r7, #14]
 801b9e6:	2b43      	cmp	r3, #67	; 0x43
 801b9e8:	d904      	bls.n	801b9f4 <dhcp_option_trailer+0x40>
 801b9ea:	89fb      	ldrh	r3, [r7, #14]
 801b9ec:	f003 0303 	and.w	r3, r3, #3
 801b9f0:	2b00      	cmp	r3, #0
 801b9f2:	d002      	beq.n	801b9fa <dhcp_option_trailer+0x46>
 801b9f4:	89fb      	ldrh	r3, [r7, #14]
 801b9f6:	2b43      	cmp	r3, #67	; 0x43
 801b9f8:	d9ec      	bls.n	801b9d4 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801b9fa:	89fb      	ldrh	r3, [r7, #14]
 801b9fc:	33f0      	adds	r3, #240	; 0xf0
 801b9fe:	b29b      	uxth	r3, r3
 801ba00:	4619      	mov	r1, r3
 801ba02:	6878      	ldr	r0, [r7, #4]
 801ba04:	f7f7 fdd6 	bl	80135b4 <pbuf_realloc>
}
 801ba08:	bf00      	nop
 801ba0a:	3710      	adds	r7, #16
 801ba0c:	46bd      	mov	sp, r7
 801ba0e:	bd80      	pop	{r7, pc}

0801ba10 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801ba10:	b480      	push	{r7}
 801ba12:	b085      	sub	sp, #20
 801ba14:	af00      	add	r7, sp, #0
 801ba16:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801ba18:	687b      	ldr	r3, [r7, #4]
 801ba1a:	2b00      	cmp	r3, #0
 801ba1c:	d017      	beq.n	801ba4e <dhcp_supplied_address+0x3e>
 801ba1e:	687b      	ldr	r3, [r7, #4]
 801ba20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ba22:	2b00      	cmp	r3, #0
 801ba24:	d013      	beq.n	801ba4e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801ba26:	687b      	ldr	r3, [r7, #4]
 801ba28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ba2a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801ba2c:	68fb      	ldr	r3, [r7, #12]
 801ba2e:	795b      	ldrb	r3, [r3, #5]
 801ba30:	2b0a      	cmp	r3, #10
 801ba32:	d007      	beq.n	801ba44 <dhcp_supplied_address+0x34>
 801ba34:	68fb      	ldr	r3, [r7, #12]
 801ba36:	795b      	ldrb	r3, [r3, #5]
 801ba38:	2b05      	cmp	r3, #5
 801ba3a:	d003      	beq.n	801ba44 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801ba3c:	68fb      	ldr	r3, [r7, #12]
 801ba3e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801ba40:	2b04      	cmp	r3, #4
 801ba42:	d101      	bne.n	801ba48 <dhcp_supplied_address+0x38>
 801ba44:	2301      	movs	r3, #1
 801ba46:	e000      	b.n	801ba4a <dhcp_supplied_address+0x3a>
 801ba48:	2300      	movs	r3, #0
 801ba4a:	b2db      	uxtb	r3, r3
 801ba4c:	e000      	b.n	801ba50 <dhcp_supplied_address+0x40>
  }
  return 0;
 801ba4e:	2300      	movs	r3, #0
}
 801ba50:	4618      	mov	r0, r3
 801ba52:	3714      	adds	r7, #20
 801ba54:	46bd      	mov	sp, r7
 801ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba5a:	4770      	bx	lr

0801ba5c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801ba5c:	b580      	push	{r7, lr}
 801ba5e:	b082      	sub	sp, #8
 801ba60:	af00      	add	r7, sp, #0
 801ba62:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801ba64:	4915      	ldr	r1, [pc, #84]	; (801babc <etharp_free_entry+0x60>)
 801ba66:	687a      	ldr	r2, [r7, #4]
 801ba68:	4613      	mov	r3, r2
 801ba6a:	005b      	lsls	r3, r3, #1
 801ba6c:	4413      	add	r3, r2
 801ba6e:	00db      	lsls	r3, r3, #3
 801ba70:	440b      	add	r3, r1
 801ba72:	681b      	ldr	r3, [r3, #0]
 801ba74:	2b00      	cmp	r3, #0
 801ba76:	d013      	beq.n	801baa0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801ba78:	4910      	ldr	r1, [pc, #64]	; (801babc <etharp_free_entry+0x60>)
 801ba7a:	687a      	ldr	r2, [r7, #4]
 801ba7c:	4613      	mov	r3, r2
 801ba7e:	005b      	lsls	r3, r3, #1
 801ba80:	4413      	add	r3, r2
 801ba82:	00db      	lsls	r3, r3, #3
 801ba84:	440b      	add	r3, r1
 801ba86:	681b      	ldr	r3, [r3, #0]
 801ba88:	4618      	mov	r0, r3
 801ba8a:	f7f7 ff19 	bl	80138c0 <pbuf_free>
    arp_table[i].q = NULL;
 801ba8e:	490b      	ldr	r1, [pc, #44]	; (801babc <etharp_free_entry+0x60>)
 801ba90:	687a      	ldr	r2, [r7, #4]
 801ba92:	4613      	mov	r3, r2
 801ba94:	005b      	lsls	r3, r3, #1
 801ba96:	4413      	add	r3, r2
 801ba98:	00db      	lsls	r3, r3, #3
 801ba9a:	440b      	add	r3, r1
 801ba9c:	2200      	movs	r2, #0
 801ba9e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801baa0:	4906      	ldr	r1, [pc, #24]	; (801babc <etharp_free_entry+0x60>)
 801baa2:	687a      	ldr	r2, [r7, #4]
 801baa4:	4613      	mov	r3, r2
 801baa6:	005b      	lsls	r3, r3, #1
 801baa8:	4413      	add	r3, r2
 801baaa:	00db      	lsls	r3, r3, #3
 801baac:	440b      	add	r3, r1
 801baae:	3314      	adds	r3, #20
 801bab0:	2200      	movs	r2, #0
 801bab2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801bab4:	bf00      	nop
 801bab6:	3708      	adds	r7, #8
 801bab8:	46bd      	mov	sp, r7
 801baba:	bd80      	pop	{r7, pc}
 801babc:	2000c248 	.word	0x2000c248

0801bac0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801bac0:	b580      	push	{r7, lr}
 801bac2:	b082      	sub	sp, #8
 801bac4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801bac6:	2300      	movs	r3, #0
 801bac8:	607b      	str	r3, [r7, #4]
 801baca:	e096      	b.n	801bbfa <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801bacc:	494f      	ldr	r1, [pc, #316]	; (801bc0c <etharp_tmr+0x14c>)
 801bace:	687a      	ldr	r2, [r7, #4]
 801bad0:	4613      	mov	r3, r2
 801bad2:	005b      	lsls	r3, r3, #1
 801bad4:	4413      	add	r3, r2
 801bad6:	00db      	lsls	r3, r3, #3
 801bad8:	440b      	add	r3, r1
 801bada:	3314      	adds	r3, #20
 801badc:	781b      	ldrb	r3, [r3, #0]
 801bade:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801bae0:	78fb      	ldrb	r3, [r7, #3]
 801bae2:	2b00      	cmp	r3, #0
 801bae4:	f000 8086 	beq.w	801bbf4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801bae8:	4948      	ldr	r1, [pc, #288]	; (801bc0c <etharp_tmr+0x14c>)
 801baea:	687a      	ldr	r2, [r7, #4]
 801baec:	4613      	mov	r3, r2
 801baee:	005b      	lsls	r3, r3, #1
 801baf0:	4413      	add	r3, r2
 801baf2:	00db      	lsls	r3, r3, #3
 801baf4:	440b      	add	r3, r1
 801baf6:	3312      	adds	r3, #18
 801baf8:	881b      	ldrh	r3, [r3, #0]
 801bafa:	3301      	adds	r3, #1
 801bafc:	b298      	uxth	r0, r3
 801bafe:	4943      	ldr	r1, [pc, #268]	; (801bc0c <etharp_tmr+0x14c>)
 801bb00:	687a      	ldr	r2, [r7, #4]
 801bb02:	4613      	mov	r3, r2
 801bb04:	005b      	lsls	r3, r3, #1
 801bb06:	4413      	add	r3, r2
 801bb08:	00db      	lsls	r3, r3, #3
 801bb0a:	440b      	add	r3, r1
 801bb0c:	3312      	adds	r3, #18
 801bb0e:	4602      	mov	r2, r0
 801bb10:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801bb12:	493e      	ldr	r1, [pc, #248]	; (801bc0c <etharp_tmr+0x14c>)
 801bb14:	687a      	ldr	r2, [r7, #4]
 801bb16:	4613      	mov	r3, r2
 801bb18:	005b      	lsls	r3, r3, #1
 801bb1a:	4413      	add	r3, r2
 801bb1c:	00db      	lsls	r3, r3, #3
 801bb1e:	440b      	add	r3, r1
 801bb20:	3312      	adds	r3, #18
 801bb22:	881b      	ldrh	r3, [r3, #0]
 801bb24:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801bb28:	d215      	bcs.n	801bb56 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801bb2a:	4938      	ldr	r1, [pc, #224]	; (801bc0c <etharp_tmr+0x14c>)
 801bb2c:	687a      	ldr	r2, [r7, #4]
 801bb2e:	4613      	mov	r3, r2
 801bb30:	005b      	lsls	r3, r3, #1
 801bb32:	4413      	add	r3, r2
 801bb34:	00db      	lsls	r3, r3, #3
 801bb36:	440b      	add	r3, r1
 801bb38:	3314      	adds	r3, #20
 801bb3a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801bb3c:	2b01      	cmp	r3, #1
 801bb3e:	d10e      	bne.n	801bb5e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801bb40:	4932      	ldr	r1, [pc, #200]	; (801bc0c <etharp_tmr+0x14c>)
 801bb42:	687a      	ldr	r2, [r7, #4]
 801bb44:	4613      	mov	r3, r2
 801bb46:	005b      	lsls	r3, r3, #1
 801bb48:	4413      	add	r3, r2
 801bb4a:	00db      	lsls	r3, r3, #3
 801bb4c:	440b      	add	r3, r1
 801bb4e:	3312      	adds	r3, #18
 801bb50:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801bb52:	2b04      	cmp	r3, #4
 801bb54:	d903      	bls.n	801bb5e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801bb56:	6878      	ldr	r0, [r7, #4]
 801bb58:	f7ff ff80 	bl	801ba5c <etharp_free_entry>
 801bb5c:	e04a      	b.n	801bbf4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801bb5e:	492b      	ldr	r1, [pc, #172]	; (801bc0c <etharp_tmr+0x14c>)
 801bb60:	687a      	ldr	r2, [r7, #4]
 801bb62:	4613      	mov	r3, r2
 801bb64:	005b      	lsls	r3, r3, #1
 801bb66:	4413      	add	r3, r2
 801bb68:	00db      	lsls	r3, r3, #3
 801bb6a:	440b      	add	r3, r1
 801bb6c:	3314      	adds	r3, #20
 801bb6e:	781b      	ldrb	r3, [r3, #0]
 801bb70:	2b03      	cmp	r3, #3
 801bb72:	d10a      	bne.n	801bb8a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801bb74:	4925      	ldr	r1, [pc, #148]	; (801bc0c <etharp_tmr+0x14c>)
 801bb76:	687a      	ldr	r2, [r7, #4]
 801bb78:	4613      	mov	r3, r2
 801bb7a:	005b      	lsls	r3, r3, #1
 801bb7c:	4413      	add	r3, r2
 801bb7e:	00db      	lsls	r3, r3, #3
 801bb80:	440b      	add	r3, r1
 801bb82:	3314      	adds	r3, #20
 801bb84:	2204      	movs	r2, #4
 801bb86:	701a      	strb	r2, [r3, #0]
 801bb88:	e034      	b.n	801bbf4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801bb8a:	4920      	ldr	r1, [pc, #128]	; (801bc0c <etharp_tmr+0x14c>)
 801bb8c:	687a      	ldr	r2, [r7, #4]
 801bb8e:	4613      	mov	r3, r2
 801bb90:	005b      	lsls	r3, r3, #1
 801bb92:	4413      	add	r3, r2
 801bb94:	00db      	lsls	r3, r3, #3
 801bb96:	440b      	add	r3, r1
 801bb98:	3314      	adds	r3, #20
 801bb9a:	781b      	ldrb	r3, [r3, #0]
 801bb9c:	2b04      	cmp	r3, #4
 801bb9e:	d10a      	bne.n	801bbb6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801bba0:	491a      	ldr	r1, [pc, #104]	; (801bc0c <etharp_tmr+0x14c>)
 801bba2:	687a      	ldr	r2, [r7, #4]
 801bba4:	4613      	mov	r3, r2
 801bba6:	005b      	lsls	r3, r3, #1
 801bba8:	4413      	add	r3, r2
 801bbaa:	00db      	lsls	r3, r3, #3
 801bbac:	440b      	add	r3, r1
 801bbae:	3314      	adds	r3, #20
 801bbb0:	2202      	movs	r2, #2
 801bbb2:	701a      	strb	r2, [r3, #0]
 801bbb4:	e01e      	b.n	801bbf4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801bbb6:	4915      	ldr	r1, [pc, #84]	; (801bc0c <etharp_tmr+0x14c>)
 801bbb8:	687a      	ldr	r2, [r7, #4]
 801bbba:	4613      	mov	r3, r2
 801bbbc:	005b      	lsls	r3, r3, #1
 801bbbe:	4413      	add	r3, r2
 801bbc0:	00db      	lsls	r3, r3, #3
 801bbc2:	440b      	add	r3, r1
 801bbc4:	3314      	adds	r3, #20
 801bbc6:	781b      	ldrb	r3, [r3, #0]
 801bbc8:	2b01      	cmp	r3, #1
 801bbca:	d113      	bne.n	801bbf4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801bbcc:	490f      	ldr	r1, [pc, #60]	; (801bc0c <etharp_tmr+0x14c>)
 801bbce:	687a      	ldr	r2, [r7, #4]
 801bbd0:	4613      	mov	r3, r2
 801bbd2:	005b      	lsls	r3, r3, #1
 801bbd4:	4413      	add	r3, r2
 801bbd6:	00db      	lsls	r3, r3, #3
 801bbd8:	440b      	add	r3, r1
 801bbda:	3308      	adds	r3, #8
 801bbdc:	6818      	ldr	r0, [r3, #0]
 801bbde:	687a      	ldr	r2, [r7, #4]
 801bbe0:	4613      	mov	r3, r2
 801bbe2:	005b      	lsls	r3, r3, #1
 801bbe4:	4413      	add	r3, r2
 801bbe6:	00db      	lsls	r3, r3, #3
 801bbe8:	4a08      	ldr	r2, [pc, #32]	; (801bc0c <etharp_tmr+0x14c>)
 801bbea:	4413      	add	r3, r2
 801bbec:	3304      	adds	r3, #4
 801bbee:	4619      	mov	r1, r3
 801bbf0:	f000 fe72 	bl	801c8d8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801bbf4:	687b      	ldr	r3, [r7, #4]
 801bbf6:	3301      	adds	r3, #1
 801bbf8:	607b      	str	r3, [r7, #4]
 801bbfa:	687b      	ldr	r3, [r7, #4]
 801bbfc:	2b09      	cmp	r3, #9
 801bbfe:	f77f af65 	ble.w	801bacc <etharp_tmr+0xc>
      }
    }
  }
}
 801bc02:	bf00      	nop
 801bc04:	bf00      	nop
 801bc06:	3708      	adds	r7, #8
 801bc08:	46bd      	mov	sp, r7
 801bc0a:	bd80      	pop	{r7, pc}
 801bc0c:	2000c248 	.word	0x2000c248

0801bc10 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801bc10:	b580      	push	{r7, lr}
 801bc12:	b08a      	sub	sp, #40	; 0x28
 801bc14:	af00      	add	r7, sp, #0
 801bc16:	60f8      	str	r0, [r7, #12]
 801bc18:	460b      	mov	r3, r1
 801bc1a:	607a      	str	r2, [r7, #4]
 801bc1c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801bc1e:	230a      	movs	r3, #10
 801bc20:	84fb      	strh	r3, [r7, #38]	; 0x26
 801bc22:	230a      	movs	r3, #10
 801bc24:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801bc26:	230a      	movs	r3, #10
 801bc28:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801bc2a:	2300      	movs	r3, #0
 801bc2c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801bc2e:	230a      	movs	r3, #10
 801bc30:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801bc32:	2300      	movs	r3, #0
 801bc34:	83bb      	strh	r3, [r7, #28]
 801bc36:	2300      	movs	r3, #0
 801bc38:	837b      	strh	r3, [r7, #26]
 801bc3a:	2300      	movs	r3, #0
 801bc3c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801bc3e:	2300      	movs	r3, #0
 801bc40:	843b      	strh	r3, [r7, #32]
 801bc42:	e0ae      	b.n	801bda2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801bc44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bc48:	49a6      	ldr	r1, [pc, #664]	; (801bee4 <etharp_find_entry+0x2d4>)
 801bc4a:	4613      	mov	r3, r2
 801bc4c:	005b      	lsls	r3, r3, #1
 801bc4e:	4413      	add	r3, r2
 801bc50:	00db      	lsls	r3, r3, #3
 801bc52:	440b      	add	r3, r1
 801bc54:	3314      	adds	r3, #20
 801bc56:	781b      	ldrb	r3, [r3, #0]
 801bc58:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801bc5a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801bc5e:	2b0a      	cmp	r3, #10
 801bc60:	d105      	bne.n	801bc6e <etharp_find_entry+0x5e>
 801bc62:	7dfb      	ldrb	r3, [r7, #23]
 801bc64:	2b00      	cmp	r3, #0
 801bc66:	d102      	bne.n	801bc6e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801bc68:	8c3b      	ldrh	r3, [r7, #32]
 801bc6a:	847b      	strh	r3, [r7, #34]	; 0x22
 801bc6c:	e095      	b.n	801bd9a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801bc6e:	7dfb      	ldrb	r3, [r7, #23]
 801bc70:	2b00      	cmp	r3, #0
 801bc72:	f000 8092 	beq.w	801bd9a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801bc76:	7dfb      	ldrb	r3, [r7, #23]
 801bc78:	2b01      	cmp	r3, #1
 801bc7a:	d009      	beq.n	801bc90 <etharp_find_entry+0x80>
 801bc7c:	7dfb      	ldrb	r3, [r7, #23]
 801bc7e:	2b01      	cmp	r3, #1
 801bc80:	d806      	bhi.n	801bc90 <etharp_find_entry+0x80>
 801bc82:	4b99      	ldr	r3, [pc, #612]	; (801bee8 <etharp_find_entry+0x2d8>)
 801bc84:	f240 1223 	movw	r2, #291	; 0x123
 801bc88:	4998      	ldr	r1, [pc, #608]	; (801beec <etharp_find_entry+0x2dc>)
 801bc8a:	4899      	ldr	r0, [pc, #612]	; (801bef0 <etharp_find_entry+0x2e0>)
 801bc8c:	f002 fb24 	bl	801e2d8 <printf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801bc90:	68fb      	ldr	r3, [r7, #12]
 801bc92:	2b00      	cmp	r3, #0
 801bc94:	d020      	beq.n	801bcd8 <etharp_find_entry+0xc8>
 801bc96:	68fb      	ldr	r3, [r7, #12]
 801bc98:	6819      	ldr	r1, [r3, #0]
 801bc9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bc9e:	4891      	ldr	r0, [pc, #580]	; (801bee4 <etharp_find_entry+0x2d4>)
 801bca0:	4613      	mov	r3, r2
 801bca2:	005b      	lsls	r3, r3, #1
 801bca4:	4413      	add	r3, r2
 801bca6:	00db      	lsls	r3, r3, #3
 801bca8:	4403      	add	r3, r0
 801bcaa:	3304      	adds	r3, #4
 801bcac:	681b      	ldr	r3, [r3, #0]
 801bcae:	4299      	cmp	r1, r3
 801bcb0:	d112      	bne.n	801bcd8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801bcb2:	687b      	ldr	r3, [r7, #4]
 801bcb4:	2b00      	cmp	r3, #0
 801bcb6:	d00c      	beq.n	801bcd2 <etharp_find_entry+0xc2>
 801bcb8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bcbc:	4989      	ldr	r1, [pc, #548]	; (801bee4 <etharp_find_entry+0x2d4>)
 801bcbe:	4613      	mov	r3, r2
 801bcc0:	005b      	lsls	r3, r3, #1
 801bcc2:	4413      	add	r3, r2
 801bcc4:	00db      	lsls	r3, r3, #3
 801bcc6:	440b      	add	r3, r1
 801bcc8:	3308      	adds	r3, #8
 801bcca:	681b      	ldr	r3, [r3, #0]
 801bccc:	687a      	ldr	r2, [r7, #4]
 801bcce:	429a      	cmp	r2, r3
 801bcd0:	d102      	bne.n	801bcd8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801bcd2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801bcd6:	e100      	b.n	801beda <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801bcd8:	7dfb      	ldrb	r3, [r7, #23]
 801bcda:	2b01      	cmp	r3, #1
 801bcdc:	d140      	bne.n	801bd60 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801bcde:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bce2:	4980      	ldr	r1, [pc, #512]	; (801bee4 <etharp_find_entry+0x2d4>)
 801bce4:	4613      	mov	r3, r2
 801bce6:	005b      	lsls	r3, r3, #1
 801bce8:	4413      	add	r3, r2
 801bcea:	00db      	lsls	r3, r3, #3
 801bcec:	440b      	add	r3, r1
 801bcee:	681b      	ldr	r3, [r3, #0]
 801bcf0:	2b00      	cmp	r3, #0
 801bcf2:	d01a      	beq.n	801bd2a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801bcf4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bcf8:	497a      	ldr	r1, [pc, #488]	; (801bee4 <etharp_find_entry+0x2d4>)
 801bcfa:	4613      	mov	r3, r2
 801bcfc:	005b      	lsls	r3, r3, #1
 801bcfe:	4413      	add	r3, r2
 801bd00:	00db      	lsls	r3, r3, #3
 801bd02:	440b      	add	r3, r1
 801bd04:	3312      	adds	r3, #18
 801bd06:	881b      	ldrh	r3, [r3, #0]
 801bd08:	8bba      	ldrh	r2, [r7, #28]
 801bd0a:	429a      	cmp	r2, r3
 801bd0c:	d845      	bhi.n	801bd9a <etharp_find_entry+0x18a>
            old_queue = i;
 801bd0e:	8c3b      	ldrh	r3, [r7, #32]
 801bd10:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801bd12:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bd16:	4973      	ldr	r1, [pc, #460]	; (801bee4 <etharp_find_entry+0x2d4>)
 801bd18:	4613      	mov	r3, r2
 801bd1a:	005b      	lsls	r3, r3, #1
 801bd1c:	4413      	add	r3, r2
 801bd1e:	00db      	lsls	r3, r3, #3
 801bd20:	440b      	add	r3, r1
 801bd22:	3312      	adds	r3, #18
 801bd24:	881b      	ldrh	r3, [r3, #0]
 801bd26:	83bb      	strh	r3, [r7, #28]
 801bd28:	e037      	b.n	801bd9a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801bd2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bd2e:	496d      	ldr	r1, [pc, #436]	; (801bee4 <etharp_find_entry+0x2d4>)
 801bd30:	4613      	mov	r3, r2
 801bd32:	005b      	lsls	r3, r3, #1
 801bd34:	4413      	add	r3, r2
 801bd36:	00db      	lsls	r3, r3, #3
 801bd38:	440b      	add	r3, r1
 801bd3a:	3312      	adds	r3, #18
 801bd3c:	881b      	ldrh	r3, [r3, #0]
 801bd3e:	8b7a      	ldrh	r2, [r7, #26]
 801bd40:	429a      	cmp	r2, r3
 801bd42:	d82a      	bhi.n	801bd9a <etharp_find_entry+0x18a>
            old_pending = i;
 801bd44:	8c3b      	ldrh	r3, [r7, #32]
 801bd46:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801bd48:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bd4c:	4965      	ldr	r1, [pc, #404]	; (801bee4 <etharp_find_entry+0x2d4>)
 801bd4e:	4613      	mov	r3, r2
 801bd50:	005b      	lsls	r3, r3, #1
 801bd52:	4413      	add	r3, r2
 801bd54:	00db      	lsls	r3, r3, #3
 801bd56:	440b      	add	r3, r1
 801bd58:	3312      	adds	r3, #18
 801bd5a:	881b      	ldrh	r3, [r3, #0]
 801bd5c:	837b      	strh	r3, [r7, #26]
 801bd5e:	e01c      	b.n	801bd9a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801bd60:	7dfb      	ldrb	r3, [r7, #23]
 801bd62:	2b01      	cmp	r3, #1
 801bd64:	d919      	bls.n	801bd9a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801bd66:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bd6a:	495e      	ldr	r1, [pc, #376]	; (801bee4 <etharp_find_entry+0x2d4>)
 801bd6c:	4613      	mov	r3, r2
 801bd6e:	005b      	lsls	r3, r3, #1
 801bd70:	4413      	add	r3, r2
 801bd72:	00db      	lsls	r3, r3, #3
 801bd74:	440b      	add	r3, r1
 801bd76:	3312      	adds	r3, #18
 801bd78:	881b      	ldrh	r3, [r3, #0]
 801bd7a:	8b3a      	ldrh	r2, [r7, #24]
 801bd7c:	429a      	cmp	r2, r3
 801bd7e:	d80c      	bhi.n	801bd9a <etharp_find_entry+0x18a>
            old_stable = i;
 801bd80:	8c3b      	ldrh	r3, [r7, #32]
 801bd82:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801bd84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bd88:	4956      	ldr	r1, [pc, #344]	; (801bee4 <etharp_find_entry+0x2d4>)
 801bd8a:	4613      	mov	r3, r2
 801bd8c:	005b      	lsls	r3, r3, #1
 801bd8e:	4413      	add	r3, r2
 801bd90:	00db      	lsls	r3, r3, #3
 801bd92:	440b      	add	r3, r1
 801bd94:	3312      	adds	r3, #18
 801bd96:	881b      	ldrh	r3, [r3, #0]
 801bd98:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801bd9a:	8c3b      	ldrh	r3, [r7, #32]
 801bd9c:	3301      	adds	r3, #1
 801bd9e:	b29b      	uxth	r3, r3
 801bda0:	843b      	strh	r3, [r7, #32]
 801bda2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801bda6:	2b09      	cmp	r3, #9
 801bda8:	f77f af4c 	ble.w	801bc44 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801bdac:	7afb      	ldrb	r3, [r7, #11]
 801bdae:	f003 0302 	and.w	r3, r3, #2
 801bdb2:	2b00      	cmp	r3, #0
 801bdb4:	d108      	bne.n	801bdc8 <etharp_find_entry+0x1b8>
 801bdb6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801bdba:	2b0a      	cmp	r3, #10
 801bdbc:	d107      	bne.n	801bdce <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801bdbe:	7afb      	ldrb	r3, [r7, #11]
 801bdc0:	f003 0301 	and.w	r3, r3, #1
 801bdc4:	2b00      	cmp	r3, #0
 801bdc6:	d102      	bne.n	801bdce <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801bdc8:	f04f 33ff 	mov.w	r3, #4294967295
 801bdcc:	e085      	b.n	801beda <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801bdce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801bdd2:	2b09      	cmp	r3, #9
 801bdd4:	dc02      	bgt.n	801bddc <etharp_find_entry+0x1cc>
    i = empty;
 801bdd6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801bdd8:	843b      	strh	r3, [r7, #32]
 801bdda:	e039      	b.n	801be50 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801bddc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801bde0:	2b09      	cmp	r3, #9
 801bde2:	dc14      	bgt.n	801be0e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801bde4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bde6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801bde8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bdec:	493d      	ldr	r1, [pc, #244]	; (801bee4 <etharp_find_entry+0x2d4>)
 801bdee:	4613      	mov	r3, r2
 801bdf0:	005b      	lsls	r3, r3, #1
 801bdf2:	4413      	add	r3, r2
 801bdf4:	00db      	lsls	r3, r3, #3
 801bdf6:	440b      	add	r3, r1
 801bdf8:	681b      	ldr	r3, [r3, #0]
 801bdfa:	2b00      	cmp	r3, #0
 801bdfc:	d018      	beq.n	801be30 <etharp_find_entry+0x220>
 801bdfe:	4b3a      	ldr	r3, [pc, #232]	; (801bee8 <etharp_find_entry+0x2d8>)
 801be00:	f240 126d 	movw	r2, #365	; 0x16d
 801be04:	493b      	ldr	r1, [pc, #236]	; (801bef4 <etharp_find_entry+0x2e4>)
 801be06:	483a      	ldr	r0, [pc, #232]	; (801bef0 <etharp_find_entry+0x2e0>)
 801be08:	f002 fa66 	bl	801e2d8 <printf>
 801be0c:	e010      	b.n	801be30 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801be0e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801be12:	2b09      	cmp	r3, #9
 801be14:	dc02      	bgt.n	801be1c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801be16:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801be18:	843b      	strh	r3, [r7, #32]
 801be1a:	e009      	b.n	801be30 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801be1c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801be20:	2b09      	cmp	r3, #9
 801be22:	dc02      	bgt.n	801be2a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801be24:	8bfb      	ldrh	r3, [r7, #30]
 801be26:	843b      	strh	r3, [r7, #32]
 801be28:	e002      	b.n	801be30 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801be2a:	f04f 33ff 	mov.w	r3, #4294967295
 801be2e:	e054      	b.n	801beda <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801be30:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801be34:	2b09      	cmp	r3, #9
 801be36:	dd06      	ble.n	801be46 <etharp_find_entry+0x236>
 801be38:	4b2b      	ldr	r3, [pc, #172]	; (801bee8 <etharp_find_entry+0x2d8>)
 801be3a:	f240 127f 	movw	r2, #383	; 0x17f
 801be3e:	492e      	ldr	r1, [pc, #184]	; (801bef8 <etharp_find_entry+0x2e8>)
 801be40:	482b      	ldr	r0, [pc, #172]	; (801bef0 <etharp_find_entry+0x2e0>)
 801be42:	f002 fa49 	bl	801e2d8 <printf>
    etharp_free_entry(i);
 801be46:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801be4a:	4618      	mov	r0, r3
 801be4c:	f7ff fe06 	bl	801ba5c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801be50:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801be54:	2b09      	cmp	r3, #9
 801be56:	dd06      	ble.n	801be66 <etharp_find_entry+0x256>
 801be58:	4b23      	ldr	r3, [pc, #140]	; (801bee8 <etharp_find_entry+0x2d8>)
 801be5a:	f240 1283 	movw	r2, #387	; 0x183
 801be5e:	4926      	ldr	r1, [pc, #152]	; (801bef8 <etharp_find_entry+0x2e8>)
 801be60:	4823      	ldr	r0, [pc, #140]	; (801bef0 <etharp_find_entry+0x2e0>)
 801be62:	f002 fa39 	bl	801e2d8 <printf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801be66:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801be6a:	491e      	ldr	r1, [pc, #120]	; (801bee4 <etharp_find_entry+0x2d4>)
 801be6c:	4613      	mov	r3, r2
 801be6e:	005b      	lsls	r3, r3, #1
 801be70:	4413      	add	r3, r2
 801be72:	00db      	lsls	r3, r3, #3
 801be74:	440b      	add	r3, r1
 801be76:	3314      	adds	r3, #20
 801be78:	781b      	ldrb	r3, [r3, #0]
 801be7a:	2b00      	cmp	r3, #0
 801be7c:	d006      	beq.n	801be8c <etharp_find_entry+0x27c>
 801be7e:	4b1a      	ldr	r3, [pc, #104]	; (801bee8 <etharp_find_entry+0x2d8>)
 801be80:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801be84:	491d      	ldr	r1, [pc, #116]	; (801befc <etharp_find_entry+0x2ec>)
 801be86:	481a      	ldr	r0, [pc, #104]	; (801bef0 <etharp_find_entry+0x2e0>)
 801be88:	f002 fa26 	bl	801e2d8 <printf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801be8c:	68fb      	ldr	r3, [r7, #12]
 801be8e:	2b00      	cmp	r3, #0
 801be90:	d00b      	beq.n	801beaa <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801be92:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801be96:	68fb      	ldr	r3, [r7, #12]
 801be98:	6819      	ldr	r1, [r3, #0]
 801be9a:	4812      	ldr	r0, [pc, #72]	; (801bee4 <etharp_find_entry+0x2d4>)
 801be9c:	4613      	mov	r3, r2
 801be9e:	005b      	lsls	r3, r3, #1
 801bea0:	4413      	add	r3, r2
 801bea2:	00db      	lsls	r3, r3, #3
 801bea4:	4403      	add	r3, r0
 801bea6:	3304      	adds	r3, #4
 801bea8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801beaa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801beae:	490d      	ldr	r1, [pc, #52]	; (801bee4 <etharp_find_entry+0x2d4>)
 801beb0:	4613      	mov	r3, r2
 801beb2:	005b      	lsls	r3, r3, #1
 801beb4:	4413      	add	r3, r2
 801beb6:	00db      	lsls	r3, r3, #3
 801beb8:	440b      	add	r3, r1
 801beba:	3312      	adds	r3, #18
 801bebc:	2200      	movs	r2, #0
 801bebe:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801bec0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bec4:	4907      	ldr	r1, [pc, #28]	; (801bee4 <etharp_find_entry+0x2d4>)
 801bec6:	4613      	mov	r3, r2
 801bec8:	005b      	lsls	r3, r3, #1
 801beca:	4413      	add	r3, r2
 801becc:	00db      	lsls	r3, r3, #3
 801bece:	440b      	add	r3, r1
 801bed0:	3308      	adds	r3, #8
 801bed2:	687a      	ldr	r2, [r7, #4]
 801bed4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801bed6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801beda:	4618      	mov	r0, r3
 801bedc:	3728      	adds	r7, #40	; 0x28
 801bede:	46bd      	mov	sp, r7
 801bee0:	bd80      	pop	{r7, pc}
 801bee2:	bf00      	nop
 801bee4:	2000c248 	.word	0x2000c248
 801bee8:	08026d20 	.word	0x08026d20
 801beec:	08026d58 	.word	0x08026d58
 801bef0:	08026d98 	.word	0x08026d98
 801bef4:	08026dc0 	.word	0x08026dc0
 801bef8:	08026dd8 	.word	0x08026dd8
 801befc:	08026dec 	.word	0x08026dec

0801bf00 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801bf00:	b580      	push	{r7, lr}
 801bf02:	b088      	sub	sp, #32
 801bf04:	af02      	add	r7, sp, #8
 801bf06:	60f8      	str	r0, [r7, #12]
 801bf08:	60b9      	str	r1, [r7, #8]
 801bf0a:	607a      	str	r2, [r7, #4]
 801bf0c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801bf0e:	68fb      	ldr	r3, [r7, #12]
 801bf10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801bf14:	2b06      	cmp	r3, #6
 801bf16:	d006      	beq.n	801bf26 <etharp_update_arp_entry+0x26>
 801bf18:	4b48      	ldr	r3, [pc, #288]	; (801c03c <etharp_update_arp_entry+0x13c>)
 801bf1a:	f240 12a9 	movw	r2, #425	; 0x1a9
 801bf1e:	4948      	ldr	r1, [pc, #288]	; (801c040 <etharp_update_arp_entry+0x140>)
 801bf20:	4848      	ldr	r0, [pc, #288]	; (801c044 <etharp_update_arp_entry+0x144>)
 801bf22:	f002 f9d9 	bl	801e2d8 <printf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801bf26:	68bb      	ldr	r3, [r7, #8]
 801bf28:	2b00      	cmp	r3, #0
 801bf2a:	d012      	beq.n	801bf52 <etharp_update_arp_entry+0x52>
 801bf2c:	68bb      	ldr	r3, [r7, #8]
 801bf2e:	681b      	ldr	r3, [r3, #0]
 801bf30:	2b00      	cmp	r3, #0
 801bf32:	d00e      	beq.n	801bf52 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801bf34:	68bb      	ldr	r3, [r7, #8]
 801bf36:	681b      	ldr	r3, [r3, #0]
 801bf38:	68f9      	ldr	r1, [r7, #12]
 801bf3a:	4618      	mov	r0, r3
 801bf3c:	f001 f920 	bl	801d180 <ip4_addr_isbroadcast_u32>
 801bf40:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801bf42:	2b00      	cmp	r3, #0
 801bf44:	d105      	bne.n	801bf52 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801bf46:	68bb      	ldr	r3, [r7, #8]
 801bf48:	681b      	ldr	r3, [r3, #0]
 801bf4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801bf4e:	2be0      	cmp	r3, #224	; 0xe0
 801bf50:	d102      	bne.n	801bf58 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801bf52:	f06f 030f 	mvn.w	r3, #15
 801bf56:	e06c      	b.n	801c032 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801bf58:	78fb      	ldrb	r3, [r7, #3]
 801bf5a:	68fa      	ldr	r2, [r7, #12]
 801bf5c:	4619      	mov	r1, r3
 801bf5e:	68b8      	ldr	r0, [r7, #8]
 801bf60:	f7ff fe56 	bl	801bc10 <etharp_find_entry>
 801bf64:	4603      	mov	r3, r0
 801bf66:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801bf68:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801bf6c:	2b00      	cmp	r3, #0
 801bf6e:	da02      	bge.n	801bf76 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801bf70:	8afb      	ldrh	r3, [r7, #22]
 801bf72:	b25b      	sxtb	r3, r3
 801bf74:	e05d      	b.n	801c032 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801bf76:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bf7a:	4933      	ldr	r1, [pc, #204]	; (801c048 <etharp_update_arp_entry+0x148>)
 801bf7c:	4613      	mov	r3, r2
 801bf7e:	005b      	lsls	r3, r3, #1
 801bf80:	4413      	add	r3, r2
 801bf82:	00db      	lsls	r3, r3, #3
 801bf84:	440b      	add	r3, r1
 801bf86:	3314      	adds	r3, #20
 801bf88:	2202      	movs	r2, #2
 801bf8a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801bf8c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bf90:	492d      	ldr	r1, [pc, #180]	; (801c048 <etharp_update_arp_entry+0x148>)
 801bf92:	4613      	mov	r3, r2
 801bf94:	005b      	lsls	r3, r3, #1
 801bf96:	4413      	add	r3, r2
 801bf98:	00db      	lsls	r3, r3, #3
 801bf9a:	440b      	add	r3, r1
 801bf9c:	3308      	adds	r3, #8
 801bf9e:	68fa      	ldr	r2, [r7, #12]
 801bfa0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801bfa2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bfa6:	4613      	mov	r3, r2
 801bfa8:	005b      	lsls	r3, r3, #1
 801bfaa:	4413      	add	r3, r2
 801bfac:	00db      	lsls	r3, r3, #3
 801bfae:	3308      	adds	r3, #8
 801bfb0:	4a25      	ldr	r2, [pc, #148]	; (801c048 <etharp_update_arp_entry+0x148>)
 801bfb2:	4413      	add	r3, r2
 801bfb4:	3304      	adds	r3, #4
 801bfb6:	2206      	movs	r2, #6
 801bfb8:	6879      	ldr	r1, [r7, #4]
 801bfba:	4618      	mov	r0, r3
 801bfbc:	f002 f95c 	bl	801e278 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801bfc0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bfc4:	4920      	ldr	r1, [pc, #128]	; (801c048 <etharp_update_arp_entry+0x148>)
 801bfc6:	4613      	mov	r3, r2
 801bfc8:	005b      	lsls	r3, r3, #1
 801bfca:	4413      	add	r3, r2
 801bfcc:	00db      	lsls	r3, r3, #3
 801bfce:	440b      	add	r3, r1
 801bfd0:	3312      	adds	r3, #18
 801bfd2:	2200      	movs	r2, #0
 801bfd4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801bfd6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bfda:	491b      	ldr	r1, [pc, #108]	; (801c048 <etharp_update_arp_entry+0x148>)
 801bfdc:	4613      	mov	r3, r2
 801bfde:	005b      	lsls	r3, r3, #1
 801bfe0:	4413      	add	r3, r2
 801bfe2:	00db      	lsls	r3, r3, #3
 801bfe4:	440b      	add	r3, r1
 801bfe6:	681b      	ldr	r3, [r3, #0]
 801bfe8:	2b00      	cmp	r3, #0
 801bfea:	d021      	beq.n	801c030 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801bfec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bff0:	4915      	ldr	r1, [pc, #84]	; (801c048 <etharp_update_arp_entry+0x148>)
 801bff2:	4613      	mov	r3, r2
 801bff4:	005b      	lsls	r3, r3, #1
 801bff6:	4413      	add	r3, r2
 801bff8:	00db      	lsls	r3, r3, #3
 801bffa:	440b      	add	r3, r1
 801bffc:	681b      	ldr	r3, [r3, #0]
 801bffe:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801c000:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c004:	4910      	ldr	r1, [pc, #64]	; (801c048 <etharp_update_arp_entry+0x148>)
 801c006:	4613      	mov	r3, r2
 801c008:	005b      	lsls	r3, r3, #1
 801c00a:	4413      	add	r3, r2
 801c00c:	00db      	lsls	r3, r3, #3
 801c00e:	440b      	add	r3, r1
 801c010:	2200      	movs	r2, #0
 801c012:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801c014:	68fb      	ldr	r3, [r7, #12]
 801c016:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801c01a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801c01e:	9300      	str	r3, [sp, #0]
 801c020:	687b      	ldr	r3, [r7, #4]
 801c022:	6939      	ldr	r1, [r7, #16]
 801c024:	68f8      	ldr	r0, [r7, #12]
 801c026:	f001 ffb9 	bl	801df9c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801c02a:	6938      	ldr	r0, [r7, #16]
 801c02c:	f7f7 fc48 	bl	80138c0 <pbuf_free>
  }
  return ERR_OK;
 801c030:	2300      	movs	r3, #0
}
 801c032:	4618      	mov	r0, r3
 801c034:	3718      	adds	r7, #24
 801c036:	46bd      	mov	sp, r7
 801c038:	bd80      	pop	{r7, pc}
 801c03a:	bf00      	nop
 801c03c:	08026d20 	.word	0x08026d20
 801c040:	08026e18 	.word	0x08026e18
 801c044:	08026d98 	.word	0x08026d98
 801c048:	2000c248 	.word	0x2000c248

0801c04c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801c04c:	b580      	push	{r7, lr}
 801c04e:	b084      	sub	sp, #16
 801c050:	af00      	add	r7, sp, #0
 801c052:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c054:	2300      	movs	r3, #0
 801c056:	60fb      	str	r3, [r7, #12]
 801c058:	e01e      	b.n	801c098 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801c05a:	4913      	ldr	r1, [pc, #76]	; (801c0a8 <etharp_cleanup_netif+0x5c>)
 801c05c:	68fa      	ldr	r2, [r7, #12]
 801c05e:	4613      	mov	r3, r2
 801c060:	005b      	lsls	r3, r3, #1
 801c062:	4413      	add	r3, r2
 801c064:	00db      	lsls	r3, r3, #3
 801c066:	440b      	add	r3, r1
 801c068:	3314      	adds	r3, #20
 801c06a:	781b      	ldrb	r3, [r3, #0]
 801c06c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801c06e:	7afb      	ldrb	r3, [r7, #11]
 801c070:	2b00      	cmp	r3, #0
 801c072:	d00e      	beq.n	801c092 <etharp_cleanup_netif+0x46>
 801c074:	490c      	ldr	r1, [pc, #48]	; (801c0a8 <etharp_cleanup_netif+0x5c>)
 801c076:	68fa      	ldr	r2, [r7, #12]
 801c078:	4613      	mov	r3, r2
 801c07a:	005b      	lsls	r3, r3, #1
 801c07c:	4413      	add	r3, r2
 801c07e:	00db      	lsls	r3, r3, #3
 801c080:	440b      	add	r3, r1
 801c082:	3308      	adds	r3, #8
 801c084:	681b      	ldr	r3, [r3, #0]
 801c086:	687a      	ldr	r2, [r7, #4]
 801c088:	429a      	cmp	r2, r3
 801c08a:	d102      	bne.n	801c092 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801c08c:	68f8      	ldr	r0, [r7, #12]
 801c08e:	f7ff fce5 	bl	801ba5c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c092:	68fb      	ldr	r3, [r7, #12]
 801c094:	3301      	adds	r3, #1
 801c096:	60fb      	str	r3, [r7, #12]
 801c098:	68fb      	ldr	r3, [r7, #12]
 801c09a:	2b09      	cmp	r3, #9
 801c09c:	dddd      	ble.n	801c05a <etharp_cleanup_netif+0xe>
    }
  }
}
 801c09e:	bf00      	nop
 801c0a0:	bf00      	nop
 801c0a2:	3710      	adds	r7, #16
 801c0a4:	46bd      	mov	sp, r7
 801c0a6:	bd80      	pop	{r7, pc}
 801c0a8:	2000c248 	.word	0x2000c248

0801c0ac <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801c0ac:	b5b0      	push	{r4, r5, r7, lr}
 801c0ae:	b08a      	sub	sp, #40	; 0x28
 801c0b0:	af04      	add	r7, sp, #16
 801c0b2:	6078      	str	r0, [r7, #4]
 801c0b4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801c0b6:	683b      	ldr	r3, [r7, #0]
 801c0b8:	2b00      	cmp	r3, #0
 801c0ba:	d107      	bne.n	801c0cc <etharp_input+0x20>
 801c0bc:	4b3f      	ldr	r3, [pc, #252]	; (801c1bc <etharp_input+0x110>)
 801c0be:	f240 228a 	movw	r2, #650	; 0x28a
 801c0c2:	493f      	ldr	r1, [pc, #252]	; (801c1c0 <etharp_input+0x114>)
 801c0c4:	483f      	ldr	r0, [pc, #252]	; (801c1c4 <etharp_input+0x118>)
 801c0c6:	f002 f907 	bl	801e2d8 <printf>
 801c0ca:	e074      	b.n	801c1b6 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801c0cc:	687b      	ldr	r3, [r7, #4]
 801c0ce:	685b      	ldr	r3, [r3, #4]
 801c0d0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801c0d2:	693b      	ldr	r3, [r7, #16]
 801c0d4:	881b      	ldrh	r3, [r3, #0]
 801c0d6:	b29b      	uxth	r3, r3
 801c0d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c0dc:	d10c      	bne.n	801c0f8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801c0de:	693b      	ldr	r3, [r7, #16]
 801c0e0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801c0e2:	2b06      	cmp	r3, #6
 801c0e4:	d108      	bne.n	801c0f8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801c0e6:	693b      	ldr	r3, [r7, #16]
 801c0e8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801c0ea:	2b04      	cmp	r3, #4
 801c0ec:	d104      	bne.n	801c0f8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801c0ee:	693b      	ldr	r3, [r7, #16]
 801c0f0:	885b      	ldrh	r3, [r3, #2]
 801c0f2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801c0f4:	2b08      	cmp	r3, #8
 801c0f6:	d003      	beq.n	801c100 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801c0f8:	6878      	ldr	r0, [r7, #4]
 801c0fa:	f7f7 fbe1 	bl	80138c0 <pbuf_free>
    return;
 801c0fe:	e05a      	b.n	801c1b6 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801c100:	693b      	ldr	r3, [r7, #16]
 801c102:	330e      	adds	r3, #14
 801c104:	681b      	ldr	r3, [r3, #0]
 801c106:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801c108:	693b      	ldr	r3, [r7, #16]
 801c10a:	3318      	adds	r3, #24
 801c10c:	681b      	ldr	r3, [r3, #0]
 801c10e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801c110:	683b      	ldr	r3, [r7, #0]
 801c112:	3304      	adds	r3, #4
 801c114:	681b      	ldr	r3, [r3, #0]
 801c116:	2b00      	cmp	r3, #0
 801c118:	d102      	bne.n	801c120 <etharp_input+0x74>
    for_us = 0;
 801c11a:	2300      	movs	r3, #0
 801c11c:	75fb      	strb	r3, [r7, #23]
 801c11e:	e009      	b.n	801c134 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801c120:	68ba      	ldr	r2, [r7, #8]
 801c122:	683b      	ldr	r3, [r7, #0]
 801c124:	3304      	adds	r3, #4
 801c126:	681b      	ldr	r3, [r3, #0]
 801c128:	429a      	cmp	r2, r3
 801c12a:	bf0c      	ite	eq
 801c12c:	2301      	moveq	r3, #1
 801c12e:	2300      	movne	r3, #0
 801c130:	b2db      	uxtb	r3, r3
 801c132:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801c134:	693b      	ldr	r3, [r7, #16]
 801c136:	f103 0208 	add.w	r2, r3, #8
 801c13a:	7dfb      	ldrb	r3, [r7, #23]
 801c13c:	2b00      	cmp	r3, #0
 801c13e:	d001      	beq.n	801c144 <etharp_input+0x98>
 801c140:	2301      	movs	r3, #1
 801c142:	e000      	b.n	801c146 <etharp_input+0x9a>
 801c144:	2302      	movs	r3, #2
 801c146:	f107 010c 	add.w	r1, r7, #12
 801c14a:	6838      	ldr	r0, [r7, #0]
 801c14c:	f7ff fed8 	bl	801bf00 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801c150:	693b      	ldr	r3, [r7, #16]
 801c152:	88db      	ldrh	r3, [r3, #6]
 801c154:	b29b      	uxth	r3, r3
 801c156:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c15a:	d003      	beq.n	801c164 <etharp_input+0xb8>
 801c15c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c160:	d01e      	beq.n	801c1a0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801c162:	e025      	b.n	801c1b0 <etharp_input+0x104>
      if (for_us) {
 801c164:	7dfb      	ldrb	r3, [r7, #23]
 801c166:	2b00      	cmp	r3, #0
 801c168:	d021      	beq.n	801c1ae <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801c16a:	683b      	ldr	r3, [r7, #0]
 801c16c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801c170:	693b      	ldr	r3, [r7, #16]
 801c172:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801c176:	683b      	ldr	r3, [r7, #0]
 801c178:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801c17c:	683b      	ldr	r3, [r7, #0]
 801c17e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801c180:	693a      	ldr	r2, [r7, #16]
 801c182:	3208      	adds	r2, #8
        etharp_raw(netif,
 801c184:	2102      	movs	r1, #2
 801c186:	9103      	str	r1, [sp, #12]
 801c188:	f107 010c 	add.w	r1, r7, #12
 801c18c:	9102      	str	r1, [sp, #8]
 801c18e:	9201      	str	r2, [sp, #4]
 801c190:	9300      	str	r3, [sp, #0]
 801c192:	462b      	mov	r3, r5
 801c194:	4622      	mov	r2, r4
 801c196:	4601      	mov	r1, r0
 801c198:	6838      	ldr	r0, [r7, #0]
 801c19a:	f000 faef 	bl	801c77c <etharp_raw>
      break;
 801c19e:	e006      	b.n	801c1ae <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801c1a0:	f107 030c 	add.w	r3, r7, #12
 801c1a4:	4619      	mov	r1, r3
 801c1a6:	6838      	ldr	r0, [r7, #0]
 801c1a8:	f7fe f9fc 	bl	801a5a4 <dhcp_arp_reply>
      break;
 801c1ac:	e000      	b.n	801c1b0 <etharp_input+0x104>
      break;
 801c1ae:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801c1b0:	6878      	ldr	r0, [r7, #4]
 801c1b2:	f7f7 fb85 	bl	80138c0 <pbuf_free>
}
 801c1b6:	3718      	adds	r7, #24
 801c1b8:	46bd      	mov	sp, r7
 801c1ba:	bdb0      	pop	{r4, r5, r7, pc}
 801c1bc:	08026d20 	.word	0x08026d20
 801c1c0:	08026e70 	.word	0x08026e70
 801c1c4:	08026d98 	.word	0x08026d98

0801c1c8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801c1c8:	b580      	push	{r7, lr}
 801c1ca:	b086      	sub	sp, #24
 801c1cc:	af02      	add	r7, sp, #8
 801c1ce:	60f8      	str	r0, [r7, #12]
 801c1d0:	60b9      	str	r1, [r7, #8]
 801c1d2:	4613      	mov	r3, r2
 801c1d4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801c1d6:	79fa      	ldrb	r2, [r7, #7]
 801c1d8:	4944      	ldr	r1, [pc, #272]	; (801c2ec <etharp_output_to_arp_index+0x124>)
 801c1da:	4613      	mov	r3, r2
 801c1dc:	005b      	lsls	r3, r3, #1
 801c1de:	4413      	add	r3, r2
 801c1e0:	00db      	lsls	r3, r3, #3
 801c1e2:	440b      	add	r3, r1
 801c1e4:	3314      	adds	r3, #20
 801c1e6:	781b      	ldrb	r3, [r3, #0]
 801c1e8:	2b01      	cmp	r3, #1
 801c1ea:	d806      	bhi.n	801c1fa <etharp_output_to_arp_index+0x32>
 801c1ec:	4b40      	ldr	r3, [pc, #256]	; (801c2f0 <etharp_output_to_arp_index+0x128>)
 801c1ee:	f240 22ee 	movw	r2, #750	; 0x2ee
 801c1f2:	4940      	ldr	r1, [pc, #256]	; (801c2f4 <etharp_output_to_arp_index+0x12c>)
 801c1f4:	4840      	ldr	r0, [pc, #256]	; (801c2f8 <etharp_output_to_arp_index+0x130>)
 801c1f6:	f002 f86f 	bl	801e2d8 <printf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801c1fa:	79fa      	ldrb	r2, [r7, #7]
 801c1fc:	493b      	ldr	r1, [pc, #236]	; (801c2ec <etharp_output_to_arp_index+0x124>)
 801c1fe:	4613      	mov	r3, r2
 801c200:	005b      	lsls	r3, r3, #1
 801c202:	4413      	add	r3, r2
 801c204:	00db      	lsls	r3, r3, #3
 801c206:	440b      	add	r3, r1
 801c208:	3314      	adds	r3, #20
 801c20a:	781b      	ldrb	r3, [r3, #0]
 801c20c:	2b02      	cmp	r3, #2
 801c20e:	d153      	bne.n	801c2b8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801c210:	79fa      	ldrb	r2, [r7, #7]
 801c212:	4936      	ldr	r1, [pc, #216]	; (801c2ec <etharp_output_to_arp_index+0x124>)
 801c214:	4613      	mov	r3, r2
 801c216:	005b      	lsls	r3, r3, #1
 801c218:	4413      	add	r3, r2
 801c21a:	00db      	lsls	r3, r3, #3
 801c21c:	440b      	add	r3, r1
 801c21e:	3312      	adds	r3, #18
 801c220:	881b      	ldrh	r3, [r3, #0]
 801c222:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801c226:	d919      	bls.n	801c25c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801c228:	79fa      	ldrb	r2, [r7, #7]
 801c22a:	4613      	mov	r3, r2
 801c22c:	005b      	lsls	r3, r3, #1
 801c22e:	4413      	add	r3, r2
 801c230:	00db      	lsls	r3, r3, #3
 801c232:	4a2e      	ldr	r2, [pc, #184]	; (801c2ec <etharp_output_to_arp_index+0x124>)
 801c234:	4413      	add	r3, r2
 801c236:	3304      	adds	r3, #4
 801c238:	4619      	mov	r1, r3
 801c23a:	68f8      	ldr	r0, [r7, #12]
 801c23c:	f000 fb4c 	bl	801c8d8 <etharp_request>
 801c240:	4603      	mov	r3, r0
 801c242:	2b00      	cmp	r3, #0
 801c244:	d138      	bne.n	801c2b8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801c246:	79fa      	ldrb	r2, [r7, #7]
 801c248:	4928      	ldr	r1, [pc, #160]	; (801c2ec <etharp_output_to_arp_index+0x124>)
 801c24a:	4613      	mov	r3, r2
 801c24c:	005b      	lsls	r3, r3, #1
 801c24e:	4413      	add	r3, r2
 801c250:	00db      	lsls	r3, r3, #3
 801c252:	440b      	add	r3, r1
 801c254:	3314      	adds	r3, #20
 801c256:	2203      	movs	r2, #3
 801c258:	701a      	strb	r2, [r3, #0]
 801c25a:	e02d      	b.n	801c2b8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801c25c:	79fa      	ldrb	r2, [r7, #7]
 801c25e:	4923      	ldr	r1, [pc, #140]	; (801c2ec <etharp_output_to_arp_index+0x124>)
 801c260:	4613      	mov	r3, r2
 801c262:	005b      	lsls	r3, r3, #1
 801c264:	4413      	add	r3, r2
 801c266:	00db      	lsls	r3, r3, #3
 801c268:	440b      	add	r3, r1
 801c26a:	3312      	adds	r3, #18
 801c26c:	881b      	ldrh	r3, [r3, #0]
 801c26e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801c272:	d321      	bcc.n	801c2b8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801c274:	79fa      	ldrb	r2, [r7, #7]
 801c276:	4613      	mov	r3, r2
 801c278:	005b      	lsls	r3, r3, #1
 801c27a:	4413      	add	r3, r2
 801c27c:	00db      	lsls	r3, r3, #3
 801c27e:	4a1b      	ldr	r2, [pc, #108]	; (801c2ec <etharp_output_to_arp_index+0x124>)
 801c280:	4413      	add	r3, r2
 801c282:	1d19      	adds	r1, r3, #4
 801c284:	79fa      	ldrb	r2, [r7, #7]
 801c286:	4613      	mov	r3, r2
 801c288:	005b      	lsls	r3, r3, #1
 801c28a:	4413      	add	r3, r2
 801c28c:	00db      	lsls	r3, r3, #3
 801c28e:	3308      	adds	r3, #8
 801c290:	4a16      	ldr	r2, [pc, #88]	; (801c2ec <etharp_output_to_arp_index+0x124>)
 801c292:	4413      	add	r3, r2
 801c294:	3304      	adds	r3, #4
 801c296:	461a      	mov	r2, r3
 801c298:	68f8      	ldr	r0, [r7, #12]
 801c29a:	f000 fafb 	bl	801c894 <etharp_request_dst>
 801c29e:	4603      	mov	r3, r0
 801c2a0:	2b00      	cmp	r3, #0
 801c2a2:	d109      	bne.n	801c2b8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801c2a4:	79fa      	ldrb	r2, [r7, #7]
 801c2a6:	4911      	ldr	r1, [pc, #68]	; (801c2ec <etharp_output_to_arp_index+0x124>)
 801c2a8:	4613      	mov	r3, r2
 801c2aa:	005b      	lsls	r3, r3, #1
 801c2ac:	4413      	add	r3, r2
 801c2ae:	00db      	lsls	r3, r3, #3
 801c2b0:	440b      	add	r3, r1
 801c2b2:	3314      	adds	r3, #20
 801c2b4:	2203      	movs	r2, #3
 801c2b6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801c2b8:	68fb      	ldr	r3, [r7, #12]
 801c2ba:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801c2be:	79fa      	ldrb	r2, [r7, #7]
 801c2c0:	4613      	mov	r3, r2
 801c2c2:	005b      	lsls	r3, r3, #1
 801c2c4:	4413      	add	r3, r2
 801c2c6:	00db      	lsls	r3, r3, #3
 801c2c8:	3308      	adds	r3, #8
 801c2ca:	4a08      	ldr	r2, [pc, #32]	; (801c2ec <etharp_output_to_arp_index+0x124>)
 801c2cc:	4413      	add	r3, r2
 801c2ce:	3304      	adds	r3, #4
 801c2d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801c2d4:	9200      	str	r2, [sp, #0]
 801c2d6:	460a      	mov	r2, r1
 801c2d8:	68b9      	ldr	r1, [r7, #8]
 801c2da:	68f8      	ldr	r0, [r7, #12]
 801c2dc:	f001 fe5e 	bl	801df9c <ethernet_output>
 801c2e0:	4603      	mov	r3, r0
}
 801c2e2:	4618      	mov	r0, r3
 801c2e4:	3710      	adds	r7, #16
 801c2e6:	46bd      	mov	sp, r7
 801c2e8:	bd80      	pop	{r7, pc}
 801c2ea:	bf00      	nop
 801c2ec:	2000c248 	.word	0x2000c248
 801c2f0:	08026d20 	.word	0x08026d20
 801c2f4:	08026e90 	.word	0x08026e90
 801c2f8:	08026d98 	.word	0x08026d98

0801c2fc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801c2fc:	b580      	push	{r7, lr}
 801c2fe:	b08a      	sub	sp, #40	; 0x28
 801c300:	af02      	add	r7, sp, #8
 801c302:	60f8      	str	r0, [r7, #12]
 801c304:	60b9      	str	r1, [r7, #8]
 801c306:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801c308:	687b      	ldr	r3, [r7, #4]
 801c30a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801c30c:	68fb      	ldr	r3, [r7, #12]
 801c30e:	2b00      	cmp	r3, #0
 801c310:	d106      	bne.n	801c320 <etharp_output+0x24>
 801c312:	4b73      	ldr	r3, [pc, #460]	; (801c4e0 <etharp_output+0x1e4>)
 801c314:	f240 321e 	movw	r2, #798	; 0x31e
 801c318:	4972      	ldr	r1, [pc, #456]	; (801c4e4 <etharp_output+0x1e8>)
 801c31a:	4873      	ldr	r0, [pc, #460]	; (801c4e8 <etharp_output+0x1ec>)
 801c31c:	f001 ffdc 	bl	801e2d8 <printf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801c320:	68bb      	ldr	r3, [r7, #8]
 801c322:	2b00      	cmp	r3, #0
 801c324:	d106      	bne.n	801c334 <etharp_output+0x38>
 801c326:	4b6e      	ldr	r3, [pc, #440]	; (801c4e0 <etharp_output+0x1e4>)
 801c328:	f240 321f 	movw	r2, #799	; 0x31f
 801c32c:	496f      	ldr	r1, [pc, #444]	; (801c4ec <etharp_output+0x1f0>)
 801c32e:	486e      	ldr	r0, [pc, #440]	; (801c4e8 <etharp_output+0x1ec>)
 801c330:	f001 ffd2 	bl	801e2d8 <printf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801c334:	687b      	ldr	r3, [r7, #4]
 801c336:	2b00      	cmp	r3, #0
 801c338:	d106      	bne.n	801c348 <etharp_output+0x4c>
 801c33a:	4b69      	ldr	r3, [pc, #420]	; (801c4e0 <etharp_output+0x1e4>)
 801c33c:	f44f 7248 	mov.w	r2, #800	; 0x320
 801c340:	496b      	ldr	r1, [pc, #428]	; (801c4f0 <etharp_output+0x1f4>)
 801c342:	4869      	ldr	r0, [pc, #420]	; (801c4e8 <etharp_output+0x1ec>)
 801c344:	f001 ffc8 	bl	801e2d8 <printf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801c348:	687b      	ldr	r3, [r7, #4]
 801c34a:	681b      	ldr	r3, [r3, #0]
 801c34c:	68f9      	ldr	r1, [r7, #12]
 801c34e:	4618      	mov	r0, r3
 801c350:	f000 ff16 	bl	801d180 <ip4_addr_isbroadcast_u32>
 801c354:	4603      	mov	r3, r0
 801c356:	2b00      	cmp	r3, #0
 801c358:	d002      	beq.n	801c360 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801c35a:	4b66      	ldr	r3, [pc, #408]	; (801c4f4 <etharp_output+0x1f8>)
 801c35c:	61fb      	str	r3, [r7, #28]
 801c35e:	e0af      	b.n	801c4c0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801c360:	687b      	ldr	r3, [r7, #4]
 801c362:	681b      	ldr	r3, [r3, #0]
 801c364:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c368:	2be0      	cmp	r3, #224	; 0xe0
 801c36a:	d118      	bne.n	801c39e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801c36c:	2301      	movs	r3, #1
 801c36e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801c370:	2300      	movs	r3, #0
 801c372:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801c374:	235e      	movs	r3, #94	; 0x5e
 801c376:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801c378:	687b      	ldr	r3, [r7, #4]
 801c37a:	3301      	adds	r3, #1
 801c37c:	781b      	ldrb	r3, [r3, #0]
 801c37e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c382:	b2db      	uxtb	r3, r3
 801c384:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801c386:	687b      	ldr	r3, [r7, #4]
 801c388:	3302      	adds	r3, #2
 801c38a:	781b      	ldrb	r3, [r3, #0]
 801c38c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801c38e:	687b      	ldr	r3, [r7, #4]
 801c390:	3303      	adds	r3, #3
 801c392:	781b      	ldrb	r3, [r3, #0]
 801c394:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801c396:	f107 0310 	add.w	r3, r7, #16
 801c39a:	61fb      	str	r3, [r7, #28]
 801c39c:	e090      	b.n	801c4c0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801c39e:	687b      	ldr	r3, [r7, #4]
 801c3a0:	681a      	ldr	r2, [r3, #0]
 801c3a2:	68fb      	ldr	r3, [r7, #12]
 801c3a4:	3304      	adds	r3, #4
 801c3a6:	681b      	ldr	r3, [r3, #0]
 801c3a8:	405a      	eors	r2, r3
 801c3aa:	68fb      	ldr	r3, [r7, #12]
 801c3ac:	3308      	adds	r3, #8
 801c3ae:	681b      	ldr	r3, [r3, #0]
 801c3b0:	4013      	ands	r3, r2
 801c3b2:	2b00      	cmp	r3, #0
 801c3b4:	d012      	beq.n	801c3dc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801c3b6:	687b      	ldr	r3, [r7, #4]
 801c3b8:	681b      	ldr	r3, [r3, #0]
 801c3ba:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801c3bc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801c3c0:	4293      	cmp	r3, r2
 801c3c2:	d00b      	beq.n	801c3dc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801c3c4:	68fb      	ldr	r3, [r7, #12]
 801c3c6:	330c      	adds	r3, #12
 801c3c8:	681b      	ldr	r3, [r3, #0]
 801c3ca:	2b00      	cmp	r3, #0
 801c3cc:	d003      	beq.n	801c3d6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801c3ce:	68fb      	ldr	r3, [r7, #12]
 801c3d0:	330c      	adds	r3, #12
 801c3d2:	61bb      	str	r3, [r7, #24]
 801c3d4:	e002      	b.n	801c3dc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801c3d6:	f06f 0303 	mvn.w	r3, #3
 801c3da:	e07d      	b.n	801c4d8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801c3dc:	4b46      	ldr	r3, [pc, #280]	; (801c4f8 <etharp_output+0x1fc>)
 801c3de:	781b      	ldrb	r3, [r3, #0]
 801c3e0:	4619      	mov	r1, r3
 801c3e2:	4a46      	ldr	r2, [pc, #280]	; (801c4fc <etharp_output+0x200>)
 801c3e4:	460b      	mov	r3, r1
 801c3e6:	005b      	lsls	r3, r3, #1
 801c3e8:	440b      	add	r3, r1
 801c3ea:	00db      	lsls	r3, r3, #3
 801c3ec:	4413      	add	r3, r2
 801c3ee:	3314      	adds	r3, #20
 801c3f0:	781b      	ldrb	r3, [r3, #0]
 801c3f2:	2b01      	cmp	r3, #1
 801c3f4:	d925      	bls.n	801c442 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801c3f6:	4b40      	ldr	r3, [pc, #256]	; (801c4f8 <etharp_output+0x1fc>)
 801c3f8:	781b      	ldrb	r3, [r3, #0]
 801c3fa:	4619      	mov	r1, r3
 801c3fc:	4a3f      	ldr	r2, [pc, #252]	; (801c4fc <etharp_output+0x200>)
 801c3fe:	460b      	mov	r3, r1
 801c400:	005b      	lsls	r3, r3, #1
 801c402:	440b      	add	r3, r1
 801c404:	00db      	lsls	r3, r3, #3
 801c406:	4413      	add	r3, r2
 801c408:	3308      	adds	r3, #8
 801c40a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801c40c:	68fa      	ldr	r2, [r7, #12]
 801c40e:	429a      	cmp	r2, r3
 801c410:	d117      	bne.n	801c442 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801c412:	69bb      	ldr	r3, [r7, #24]
 801c414:	681a      	ldr	r2, [r3, #0]
 801c416:	4b38      	ldr	r3, [pc, #224]	; (801c4f8 <etharp_output+0x1fc>)
 801c418:	781b      	ldrb	r3, [r3, #0]
 801c41a:	4618      	mov	r0, r3
 801c41c:	4937      	ldr	r1, [pc, #220]	; (801c4fc <etharp_output+0x200>)
 801c41e:	4603      	mov	r3, r0
 801c420:	005b      	lsls	r3, r3, #1
 801c422:	4403      	add	r3, r0
 801c424:	00db      	lsls	r3, r3, #3
 801c426:	440b      	add	r3, r1
 801c428:	3304      	adds	r3, #4
 801c42a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801c42c:	429a      	cmp	r2, r3
 801c42e:	d108      	bne.n	801c442 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801c430:	4b31      	ldr	r3, [pc, #196]	; (801c4f8 <etharp_output+0x1fc>)
 801c432:	781b      	ldrb	r3, [r3, #0]
 801c434:	461a      	mov	r2, r3
 801c436:	68b9      	ldr	r1, [r7, #8]
 801c438:	68f8      	ldr	r0, [r7, #12]
 801c43a:	f7ff fec5 	bl	801c1c8 <etharp_output_to_arp_index>
 801c43e:	4603      	mov	r3, r0
 801c440:	e04a      	b.n	801c4d8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801c442:	2300      	movs	r3, #0
 801c444:	75fb      	strb	r3, [r7, #23]
 801c446:	e031      	b.n	801c4ac <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801c448:	7dfa      	ldrb	r2, [r7, #23]
 801c44a:	492c      	ldr	r1, [pc, #176]	; (801c4fc <etharp_output+0x200>)
 801c44c:	4613      	mov	r3, r2
 801c44e:	005b      	lsls	r3, r3, #1
 801c450:	4413      	add	r3, r2
 801c452:	00db      	lsls	r3, r3, #3
 801c454:	440b      	add	r3, r1
 801c456:	3314      	adds	r3, #20
 801c458:	781b      	ldrb	r3, [r3, #0]
 801c45a:	2b01      	cmp	r3, #1
 801c45c:	d923      	bls.n	801c4a6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801c45e:	7dfa      	ldrb	r2, [r7, #23]
 801c460:	4926      	ldr	r1, [pc, #152]	; (801c4fc <etharp_output+0x200>)
 801c462:	4613      	mov	r3, r2
 801c464:	005b      	lsls	r3, r3, #1
 801c466:	4413      	add	r3, r2
 801c468:	00db      	lsls	r3, r3, #3
 801c46a:	440b      	add	r3, r1
 801c46c:	3308      	adds	r3, #8
 801c46e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801c470:	68fa      	ldr	r2, [r7, #12]
 801c472:	429a      	cmp	r2, r3
 801c474:	d117      	bne.n	801c4a6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801c476:	69bb      	ldr	r3, [r7, #24]
 801c478:	6819      	ldr	r1, [r3, #0]
 801c47a:	7dfa      	ldrb	r2, [r7, #23]
 801c47c:	481f      	ldr	r0, [pc, #124]	; (801c4fc <etharp_output+0x200>)
 801c47e:	4613      	mov	r3, r2
 801c480:	005b      	lsls	r3, r3, #1
 801c482:	4413      	add	r3, r2
 801c484:	00db      	lsls	r3, r3, #3
 801c486:	4403      	add	r3, r0
 801c488:	3304      	adds	r3, #4
 801c48a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801c48c:	4299      	cmp	r1, r3
 801c48e:	d10a      	bne.n	801c4a6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801c490:	4a19      	ldr	r2, [pc, #100]	; (801c4f8 <etharp_output+0x1fc>)
 801c492:	7dfb      	ldrb	r3, [r7, #23]
 801c494:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801c496:	7dfb      	ldrb	r3, [r7, #23]
 801c498:	461a      	mov	r2, r3
 801c49a:	68b9      	ldr	r1, [r7, #8]
 801c49c:	68f8      	ldr	r0, [r7, #12]
 801c49e:	f7ff fe93 	bl	801c1c8 <etharp_output_to_arp_index>
 801c4a2:	4603      	mov	r3, r0
 801c4a4:	e018      	b.n	801c4d8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801c4a6:	7dfb      	ldrb	r3, [r7, #23]
 801c4a8:	3301      	adds	r3, #1
 801c4aa:	75fb      	strb	r3, [r7, #23]
 801c4ac:	7dfb      	ldrb	r3, [r7, #23]
 801c4ae:	2b09      	cmp	r3, #9
 801c4b0:	d9ca      	bls.n	801c448 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801c4b2:	68ba      	ldr	r2, [r7, #8]
 801c4b4:	69b9      	ldr	r1, [r7, #24]
 801c4b6:	68f8      	ldr	r0, [r7, #12]
 801c4b8:	f000 f822 	bl	801c500 <etharp_query>
 801c4bc:	4603      	mov	r3, r0
 801c4be:	e00b      	b.n	801c4d8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801c4c0:	68fb      	ldr	r3, [r7, #12]
 801c4c2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801c4c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801c4ca:	9300      	str	r3, [sp, #0]
 801c4cc:	69fb      	ldr	r3, [r7, #28]
 801c4ce:	68b9      	ldr	r1, [r7, #8]
 801c4d0:	68f8      	ldr	r0, [r7, #12]
 801c4d2:	f001 fd63 	bl	801df9c <ethernet_output>
 801c4d6:	4603      	mov	r3, r0
}
 801c4d8:	4618      	mov	r0, r3
 801c4da:	3720      	adds	r7, #32
 801c4dc:	46bd      	mov	sp, r7
 801c4de:	bd80      	pop	{r7, pc}
 801c4e0:	08026d20 	.word	0x08026d20
 801c4e4:	08026e70 	.word	0x08026e70
 801c4e8:	08026d98 	.word	0x08026d98
 801c4ec:	08026ec0 	.word	0x08026ec0
 801c4f0:	08026e60 	.word	0x08026e60
 801c4f4:	0806f654 	.word	0x0806f654
 801c4f8:	2000c338 	.word	0x2000c338
 801c4fc:	2000c248 	.word	0x2000c248

0801c500 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801c500:	b580      	push	{r7, lr}
 801c502:	b08c      	sub	sp, #48	; 0x30
 801c504:	af02      	add	r7, sp, #8
 801c506:	60f8      	str	r0, [r7, #12]
 801c508:	60b9      	str	r1, [r7, #8]
 801c50a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801c50c:	68fb      	ldr	r3, [r7, #12]
 801c50e:	332a      	adds	r3, #42	; 0x2a
 801c510:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801c512:	23ff      	movs	r3, #255	; 0xff
 801c514:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801c518:	2300      	movs	r3, #0
 801c51a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801c51c:	68bb      	ldr	r3, [r7, #8]
 801c51e:	681b      	ldr	r3, [r3, #0]
 801c520:	68f9      	ldr	r1, [r7, #12]
 801c522:	4618      	mov	r0, r3
 801c524:	f000 fe2c 	bl	801d180 <ip4_addr_isbroadcast_u32>
 801c528:	4603      	mov	r3, r0
 801c52a:	2b00      	cmp	r3, #0
 801c52c:	d10c      	bne.n	801c548 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801c52e:	68bb      	ldr	r3, [r7, #8]
 801c530:	681b      	ldr	r3, [r3, #0]
 801c532:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801c536:	2be0      	cmp	r3, #224	; 0xe0
 801c538:	d006      	beq.n	801c548 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801c53a:	68bb      	ldr	r3, [r7, #8]
 801c53c:	2b00      	cmp	r3, #0
 801c53e:	d003      	beq.n	801c548 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801c540:	68bb      	ldr	r3, [r7, #8]
 801c542:	681b      	ldr	r3, [r3, #0]
 801c544:	2b00      	cmp	r3, #0
 801c546:	d102      	bne.n	801c54e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801c548:	f06f 030f 	mvn.w	r3, #15
 801c54c:	e101      	b.n	801c752 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801c54e:	68fa      	ldr	r2, [r7, #12]
 801c550:	2101      	movs	r1, #1
 801c552:	68b8      	ldr	r0, [r7, #8]
 801c554:	f7ff fb5c 	bl	801bc10 <etharp_find_entry>
 801c558:	4603      	mov	r3, r0
 801c55a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801c55c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801c560:	2b00      	cmp	r3, #0
 801c562:	da02      	bge.n	801c56a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801c564:	8a7b      	ldrh	r3, [r7, #18]
 801c566:	b25b      	sxtb	r3, r3
 801c568:	e0f3      	b.n	801c752 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801c56a:	8a7b      	ldrh	r3, [r7, #18]
 801c56c:	2b7e      	cmp	r3, #126	; 0x7e
 801c56e:	d906      	bls.n	801c57e <etharp_query+0x7e>
 801c570:	4b7a      	ldr	r3, [pc, #488]	; (801c75c <etharp_query+0x25c>)
 801c572:	f240 32c1 	movw	r2, #961	; 0x3c1
 801c576:	497a      	ldr	r1, [pc, #488]	; (801c760 <etharp_query+0x260>)
 801c578:	487a      	ldr	r0, [pc, #488]	; (801c764 <etharp_query+0x264>)
 801c57a:	f001 fead 	bl	801e2d8 <printf>
  i = (netif_addr_idx_t)i_err;
 801c57e:	8a7b      	ldrh	r3, [r7, #18]
 801c580:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801c582:	7c7a      	ldrb	r2, [r7, #17]
 801c584:	4978      	ldr	r1, [pc, #480]	; (801c768 <etharp_query+0x268>)
 801c586:	4613      	mov	r3, r2
 801c588:	005b      	lsls	r3, r3, #1
 801c58a:	4413      	add	r3, r2
 801c58c:	00db      	lsls	r3, r3, #3
 801c58e:	440b      	add	r3, r1
 801c590:	3314      	adds	r3, #20
 801c592:	781b      	ldrb	r3, [r3, #0]
 801c594:	2b00      	cmp	r3, #0
 801c596:	d115      	bne.n	801c5c4 <etharp_query+0xc4>
    is_new_entry = 1;
 801c598:	2301      	movs	r3, #1
 801c59a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801c59c:	7c7a      	ldrb	r2, [r7, #17]
 801c59e:	4972      	ldr	r1, [pc, #456]	; (801c768 <etharp_query+0x268>)
 801c5a0:	4613      	mov	r3, r2
 801c5a2:	005b      	lsls	r3, r3, #1
 801c5a4:	4413      	add	r3, r2
 801c5a6:	00db      	lsls	r3, r3, #3
 801c5a8:	440b      	add	r3, r1
 801c5aa:	3314      	adds	r3, #20
 801c5ac:	2201      	movs	r2, #1
 801c5ae:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801c5b0:	7c7a      	ldrb	r2, [r7, #17]
 801c5b2:	496d      	ldr	r1, [pc, #436]	; (801c768 <etharp_query+0x268>)
 801c5b4:	4613      	mov	r3, r2
 801c5b6:	005b      	lsls	r3, r3, #1
 801c5b8:	4413      	add	r3, r2
 801c5ba:	00db      	lsls	r3, r3, #3
 801c5bc:	440b      	add	r3, r1
 801c5be:	3308      	adds	r3, #8
 801c5c0:	68fa      	ldr	r2, [r7, #12]
 801c5c2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801c5c4:	7c7a      	ldrb	r2, [r7, #17]
 801c5c6:	4968      	ldr	r1, [pc, #416]	; (801c768 <etharp_query+0x268>)
 801c5c8:	4613      	mov	r3, r2
 801c5ca:	005b      	lsls	r3, r3, #1
 801c5cc:	4413      	add	r3, r2
 801c5ce:	00db      	lsls	r3, r3, #3
 801c5d0:	440b      	add	r3, r1
 801c5d2:	3314      	adds	r3, #20
 801c5d4:	781b      	ldrb	r3, [r3, #0]
 801c5d6:	2b01      	cmp	r3, #1
 801c5d8:	d011      	beq.n	801c5fe <etharp_query+0xfe>
 801c5da:	7c7a      	ldrb	r2, [r7, #17]
 801c5dc:	4962      	ldr	r1, [pc, #392]	; (801c768 <etharp_query+0x268>)
 801c5de:	4613      	mov	r3, r2
 801c5e0:	005b      	lsls	r3, r3, #1
 801c5e2:	4413      	add	r3, r2
 801c5e4:	00db      	lsls	r3, r3, #3
 801c5e6:	440b      	add	r3, r1
 801c5e8:	3314      	adds	r3, #20
 801c5ea:	781b      	ldrb	r3, [r3, #0]
 801c5ec:	2b01      	cmp	r3, #1
 801c5ee:	d806      	bhi.n	801c5fe <etharp_query+0xfe>
 801c5f0:	4b5a      	ldr	r3, [pc, #360]	; (801c75c <etharp_query+0x25c>)
 801c5f2:	f240 32cd 	movw	r2, #973	; 0x3cd
 801c5f6:	495d      	ldr	r1, [pc, #372]	; (801c76c <etharp_query+0x26c>)
 801c5f8:	485a      	ldr	r0, [pc, #360]	; (801c764 <etharp_query+0x264>)
 801c5fa:	f001 fe6d 	bl	801e2d8 <printf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801c5fe:	6a3b      	ldr	r3, [r7, #32]
 801c600:	2b00      	cmp	r3, #0
 801c602:	d102      	bne.n	801c60a <etharp_query+0x10a>
 801c604:	687b      	ldr	r3, [r7, #4]
 801c606:	2b00      	cmp	r3, #0
 801c608:	d10c      	bne.n	801c624 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801c60a:	68b9      	ldr	r1, [r7, #8]
 801c60c:	68f8      	ldr	r0, [r7, #12]
 801c60e:	f000 f963 	bl	801c8d8 <etharp_request>
 801c612:	4603      	mov	r3, r0
 801c614:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801c618:	687b      	ldr	r3, [r7, #4]
 801c61a:	2b00      	cmp	r3, #0
 801c61c:	d102      	bne.n	801c624 <etharp_query+0x124>
      return result;
 801c61e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801c622:	e096      	b.n	801c752 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801c624:	687b      	ldr	r3, [r7, #4]
 801c626:	2b00      	cmp	r3, #0
 801c628:	d106      	bne.n	801c638 <etharp_query+0x138>
 801c62a:	4b4c      	ldr	r3, [pc, #304]	; (801c75c <etharp_query+0x25c>)
 801c62c:	f240 32e1 	movw	r2, #993	; 0x3e1
 801c630:	494f      	ldr	r1, [pc, #316]	; (801c770 <etharp_query+0x270>)
 801c632:	484c      	ldr	r0, [pc, #304]	; (801c764 <etharp_query+0x264>)
 801c634:	f001 fe50 	bl	801e2d8 <printf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801c638:	7c7a      	ldrb	r2, [r7, #17]
 801c63a:	494b      	ldr	r1, [pc, #300]	; (801c768 <etharp_query+0x268>)
 801c63c:	4613      	mov	r3, r2
 801c63e:	005b      	lsls	r3, r3, #1
 801c640:	4413      	add	r3, r2
 801c642:	00db      	lsls	r3, r3, #3
 801c644:	440b      	add	r3, r1
 801c646:	3314      	adds	r3, #20
 801c648:	781b      	ldrb	r3, [r3, #0]
 801c64a:	2b01      	cmp	r3, #1
 801c64c:	d917      	bls.n	801c67e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801c64e:	4a49      	ldr	r2, [pc, #292]	; (801c774 <etharp_query+0x274>)
 801c650:	7c7b      	ldrb	r3, [r7, #17]
 801c652:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801c654:	7c7a      	ldrb	r2, [r7, #17]
 801c656:	4613      	mov	r3, r2
 801c658:	005b      	lsls	r3, r3, #1
 801c65a:	4413      	add	r3, r2
 801c65c:	00db      	lsls	r3, r3, #3
 801c65e:	3308      	adds	r3, #8
 801c660:	4a41      	ldr	r2, [pc, #260]	; (801c768 <etharp_query+0x268>)
 801c662:	4413      	add	r3, r2
 801c664:	3304      	adds	r3, #4
 801c666:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801c66a:	9200      	str	r2, [sp, #0]
 801c66c:	697a      	ldr	r2, [r7, #20]
 801c66e:	6879      	ldr	r1, [r7, #4]
 801c670:	68f8      	ldr	r0, [r7, #12]
 801c672:	f001 fc93 	bl	801df9c <ethernet_output>
 801c676:	4603      	mov	r3, r0
 801c678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c67c:	e067      	b.n	801c74e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801c67e:	7c7a      	ldrb	r2, [r7, #17]
 801c680:	4939      	ldr	r1, [pc, #228]	; (801c768 <etharp_query+0x268>)
 801c682:	4613      	mov	r3, r2
 801c684:	005b      	lsls	r3, r3, #1
 801c686:	4413      	add	r3, r2
 801c688:	00db      	lsls	r3, r3, #3
 801c68a:	440b      	add	r3, r1
 801c68c:	3314      	adds	r3, #20
 801c68e:	781b      	ldrb	r3, [r3, #0]
 801c690:	2b01      	cmp	r3, #1
 801c692:	d15c      	bne.n	801c74e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801c694:	2300      	movs	r3, #0
 801c696:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801c698:	687b      	ldr	r3, [r7, #4]
 801c69a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801c69c:	e01c      	b.n	801c6d8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801c69e:	69fb      	ldr	r3, [r7, #28]
 801c6a0:	895a      	ldrh	r2, [r3, #10]
 801c6a2:	69fb      	ldr	r3, [r7, #28]
 801c6a4:	891b      	ldrh	r3, [r3, #8]
 801c6a6:	429a      	cmp	r2, r3
 801c6a8:	d10a      	bne.n	801c6c0 <etharp_query+0x1c0>
 801c6aa:	69fb      	ldr	r3, [r7, #28]
 801c6ac:	681b      	ldr	r3, [r3, #0]
 801c6ae:	2b00      	cmp	r3, #0
 801c6b0:	d006      	beq.n	801c6c0 <etharp_query+0x1c0>
 801c6b2:	4b2a      	ldr	r3, [pc, #168]	; (801c75c <etharp_query+0x25c>)
 801c6b4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801c6b8:	492f      	ldr	r1, [pc, #188]	; (801c778 <etharp_query+0x278>)
 801c6ba:	482a      	ldr	r0, [pc, #168]	; (801c764 <etharp_query+0x264>)
 801c6bc:	f001 fe0c 	bl	801e2d8 <printf>
      if (PBUF_NEEDS_COPY(p)) {
 801c6c0:	69fb      	ldr	r3, [r7, #28]
 801c6c2:	7b1b      	ldrb	r3, [r3, #12]
 801c6c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c6c8:	2b00      	cmp	r3, #0
 801c6ca:	d002      	beq.n	801c6d2 <etharp_query+0x1d2>
        copy_needed = 1;
 801c6cc:	2301      	movs	r3, #1
 801c6ce:	61bb      	str	r3, [r7, #24]
        break;
 801c6d0:	e005      	b.n	801c6de <etharp_query+0x1de>
      }
      p = p->next;
 801c6d2:	69fb      	ldr	r3, [r7, #28]
 801c6d4:	681b      	ldr	r3, [r3, #0]
 801c6d6:	61fb      	str	r3, [r7, #28]
    while (p) {
 801c6d8:	69fb      	ldr	r3, [r7, #28]
 801c6da:	2b00      	cmp	r3, #0
 801c6dc:	d1df      	bne.n	801c69e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801c6de:	69bb      	ldr	r3, [r7, #24]
 801c6e0:	2b00      	cmp	r3, #0
 801c6e2:	d007      	beq.n	801c6f4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801c6e4:	687a      	ldr	r2, [r7, #4]
 801c6e6:	f44f 7120 	mov.w	r1, #640	; 0x280
 801c6ea:	200e      	movs	r0, #14
 801c6ec:	f7f7 fb60 	bl	8013db0 <pbuf_clone>
 801c6f0:	61f8      	str	r0, [r7, #28]
 801c6f2:	e004      	b.n	801c6fe <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801c6f4:	687b      	ldr	r3, [r7, #4]
 801c6f6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801c6f8:	69f8      	ldr	r0, [r7, #28]
 801c6fa:	f7f7 f987 	bl	8013a0c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801c6fe:	69fb      	ldr	r3, [r7, #28]
 801c700:	2b00      	cmp	r3, #0
 801c702:	d021      	beq.n	801c748 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801c704:	7c7a      	ldrb	r2, [r7, #17]
 801c706:	4918      	ldr	r1, [pc, #96]	; (801c768 <etharp_query+0x268>)
 801c708:	4613      	mov	r3, r2
 801c70a:	005b      	lsls	r3, r3, #1
 801c70c:	4413      	add	r3, r2
 801c70e:	00db      	lsls	r3, r3, #3
 801c710:	440b      	add	r3, r1
 801c712:	681b      	ldr	r3, [r3, #0]
 801c714:	2b00      	cmp	r3, #0
 801c716:	d00a      	beq.n	801c72e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801c718:	7c7a      	ldrb	r2, [r7, #17]
 801c71a:	4913      	ldr	r1, [pc, #76]	; (801c768 <etharp_query+0x268>)
 801c71c:	4613      	mov	r3, r2
 801c71e:	005b      	lsls	r3, r3, #1
 801c720:	4413      	add	r3, r2
 801c722:	00db      	lsls	r3, r3, #3
 801c724:	440b      	add	r3, r1
 801c726:	681b      	ldr	r3, [r3, #0]
 801c728:	4618      	mov	r0, r3
 801c72a:	f7f7 f8c9 	bl	80138c0 <pbuf_free>
      }
      arp_table[i].q = p;
 801c72e:	7c7a      	ldrb	r2, [r7, #17]
 801c730:	490d      	ldr	r1, [pc, #52]	; (801c768 <etharp_query+0x268>)
 801c732:	4613      	mov	r3, r2
 801c734:	005b      	lsls	r3, r3, #1
 801c736:	4413      	add	r3, r2
 801c738:	00db      	lsls	r3, r3, #3
 801c73a:	440b      	add	r3, r1
 801c73c:	69fa      	ldr	r2, [r7, #28]
 801c73e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801c740:	2300      	movs	r3, #0
 801c742:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c746:	e002      	b.n	801c74e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801c748:	23ff      	movs	r3, #255	; 0xff
 801c74a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801c74e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801c752:	4618      	mov	r0, r3
 801c754:	3728      	adds	r7, #40	; 0x28
 801c756:	46bd      	mov	sp, r7
 801c758:	bd80      	pop	{r7, pc}
 801c75a:	bf00      	nop
 801c75c:	08026d20 	.word	0x08026d20
 801c760:	08026ecc 	.word	0x08026ecc
 801c764:	08026d98 	.word	0x08026d98
 801c768:	2000c248 	.word	0x2000c248
 801c76c:	08026edc 	.word	0x08026edc
 801c770:	08026ec0 	.word	0x08026ec0
 801c774:	2000c338 	.word	0x2000c338
 801c778:	08026f04 	.word	0x08026f04

0801c77c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801c77c:	b580      	push	{r7, lr}
 801c77e:	b08a      	sub	sp, #40	; 0x28
 801c780:	af02      	add	r7, sp, #8
 801c782:	60f8      	str	r0, [r7, #12]
 801c784:	60b9      	str	r1, [r7, #8]
 801c786:	607a      	str	r2, [r7, #4]
 801c788:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801c78a:	2300      	movs	r3, #0
 801c78c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801c78e:	68fb      	ldr	r3, [r7, #12]
 801c790:	2b00      	cmp	r3, #0
 801c792:	d106      	bne.n	801c7a2 <etharp_raw+0x26>
 801c794:	4b3a      	ldr	r3, [pc, #232]	; (801c880 <etharp_raw+0x104>)
 801c796:	f240 4257 	movw	r2, #1111	; 0x457
 801c79a:	493a      	ldr	r1, [pc, #232]	; (801c884 <etharp_raw+0x108>)
 801c79c:	483a      	ldr	r0, [pc, #232]	; (801c888 <etharp_raw+0x10c>)
 801c79e:	f001 fd9b 	bl	801e2d8 <printf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801c7a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c7a6:	211c      	movs	r1, #28
 801c7a8:	200e      	movs	r0, #14
 801c7aa:	f7f6 fda5 	bl	80132f8 <pbuf_alloc>
 801c7ae:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801c7b0:	69bb      	ldr	r3, [r7, #24]
 801c7b2:	2b00      	cmp	r3, #0
 801c7b4:	d102      	bne.n	801c7bc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801c7b6:	f04f 33ff 	mov.w	r3, #4294967295
 801c7ba:	e05d      	b.n	801c878 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801c7bc:	69bb      	ldr	r3, [r7, #24]
 801c7be:	895b      	ldrh	r3, [r3, #10]
 801c7c0:	2b1b      	cmp	r3, #27
 801c7c2:	d806      	bhi.n	801c7d2 <etharp_raw+0x56>
 801c7c4:	4b2e      	ldr	r3, [pc, #184]	; (801c880 <etharp_raw+0x104>)
 801c7c6:	f240 4262 	movw	r2, #1122	; 0x462
 801c7ca:	4930      	ldr	r1, [pc, #192]	; (801c88c <etharp_raw+0x110>)
 801c7cc:	482e      	ldr	r0, [pc, #184]	; (801c888 <etharp_raw+0x10c>)
 801c7ce:	f001 fd83 	bl	801e2d8 <printf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801c7d2:	69bb      	ldr	r3, [r7, #24]
 801c7d4:	685b      	ldr	r3, [r3, #4]
 801c7d6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801c7d8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801c7da:	4618      	mov	r0, r3
 801c7dc:	f7f5 fcb8 	bl	8012150 <lwip_htons>
 801c7e0:	4603      	mov	r3, r0
 801c7e2:	461a      	mov	r2, r3
 801c7e4:	697b      	ldr	r3, [r7, #20]
 801c7e6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801c7e8:	68fb      	ldr	r3, [r7, #12]
 801c7ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c7ee:	2b06      	cmp	r3, #6
 801c7f0:	d006      	beq.n	801c800 <etharp_raw+0x84>
 801c7f2:	4b23      	ldr	r3, [pc, #140]	; (801c880 <etharp_raw+0x104>)
 801c7f4:	f240 4269 	movw	r2, #1129	; 0x469
 801c7f8:	4925      	ldr	r1, [pc, #148]	; (801c890 <etharp_raw+0x114>)
 801c7fa:	4823      	ldr	r0, [pc, #140]	; (801c888 <etharp_raw+0x10c>)
 801c7fc:	f001 fd6c 	bl	801e2d8 <printf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801c800:	697b      	ldr	r3, [r7, #20]
 801c802:	3308      	adds	r3, #8
 801c804:	2206      	movs	r2, #6
 801c806:	6839      	ldr	r1, [r7, #0]
 801c808:	4618      	mov	r0, r3
 801c80a:	f001 fd35 	bl	801e278 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801c80e:	697b      	ldr	r3, [r7, #20]
 801c810:	3312      	adds	r3, #18
 801c812:	2206      	movs	r2, #6
 801c814:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c816:	4618      	mov	r0, r3
 801c818:	f001 fd2e 	bl	801e278 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801c81c:	697b      	ldr	r3, [r7, #20]
 801c81e:	330e      	adds	r3, #14
 801c820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c822:	6812      	ldr	r2, [r2, #0]
 801c824:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801c826:	697b      	ldr	r3, [r7, #20]
 801c828:	3318      	adds	r3, #24
 801c82a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c82c:	6812      	ldr	r2, [r2, #0]
 801c82e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801c830:	697b      	ldr	r3, [r7, #20]
 801c832:	2200      	movs	r2, #0
 801c834:	701a      	strb	r2, [r3, #0]
 801c836:	2200      	movs	r2, #0
 801c838:	f042 0201 	orr.w	r2, r2, #1
 801c83c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801c83e:	697b      	ldr	r3, [r7, #20]
 801c840:	2200      	movs	r2, #0
 801c842:	f042 0208 	orr.w	r2, r2, #8
 801c846:	709a      	strb	r2, [r3, #2]
 801c848:	2200      	movs	r2, #0
 801c84a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801c84c:	697b      	ldr	r3, [r7, #20]
 801c84e:	2206      	movs	r2, #6
 801c850:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801c852:	697b      	ldr	r3, [r7, #20]
 801c854:	2204      	movs	r2, #4
 801c856:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801c858:	f640 0306 	movw	r3, #2054	; 0x806
 801c85c:	9300      	str	r3, [sp, #0]
 801c85e:	687b      	ldr	r3, [r7, #4]
 801c860:	68ba      	ldr	r2, [r7, #8]
 801c862:	69b9      	ldr	r1, [r7, #24]
 801c864:	68f8      	ldr	r0, [r7, #12]
 801c866:	f001 fb99 	bl	801df9c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801c86a:	69b8      	ldr	r0, [r7, #24]
 801c86c:	f7f7 f828 	bl	80138c0 <pbuf_free>
  p = NULL;
 801c870:	2300      	movs	r3, #0
 801c872:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801c874:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c878:	4618      	mov	r0, r3
 801c87a:	3720      	adds	r7, #32
 801c87c:	46bd      	mov	sp, r7
 801c87e:	bd80      	pop	{r7, pc}
 801c880:	08026d20 	.word	0x08026d20
 801c884:	08026e70 	.word	0x08026e70
 801c888:	08026d98 	.word	0x08026d98
 801c88c:	08026f20 	.word	0x08026f20
 801c890:	08026f54 	.word	0x08026f54

0801c894 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801c894:	b580      	push	{r7, lr}
 801c896:	b088      	sub	sp, #32
 801c898:	af04      	add	r7, sp, #16
 801c89a:	60f8      	str	r0, [r7, #12]
 801c89c:	60b9      	str	r1, [r7, #8]
 801c89e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801c8a0:	68fb      	ldr	r3, [r7, #12]
 801c8a2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801c8a6:	68fb      	ldr	r3, [r7, #12]
 801c8a8:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801c8ac:	68fb      	ldr	r3, [r7, #12]
 801c8ae:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801c8b0:	2201      	movs	r2, #1
 801c8b2:	9203      	str	r2, [sp, #12]
 801c8b4:	68ba      	ldr	r2, [r7, #8]
 801c8b6:	9202      	str	r2, [sp, #8]
 801c8b8:	4a06      	ldr	r2, [pc, #24]	; (801c8d4 <etharp_request_dst+0x40>)
 801c8ba:	9201      	str	r2, [sp, #4]
 801c8bc:	9300      	str	r3, [sp, #0]
 801c8be:	4603      	mov	r3, r0
 801c8c0:	687a      	ldr	r2, [r7, #4]
 801c8c2:	68f8      	ldr	r0, [r7, #12]
 801c8c4:	f7ff ff5a 	bl	801c77c <etharp_raw>
 801c8c8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801c8ca:	4618      	mov	r0, r3
 801c8cc:	3710      	adds	r7, #16
 801c8ce:	46bd      	mov	sp, r7
 801c8d0:	bd80      	pop	{r7, pc}
 801c8d2:	bf00      	nop
 801c8d4:	0806f65c 	.word	0x0806f65c

0801c8d8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801c8d8:	b580      	push	{r7, lr}
 801c8da:	b082      	sub	sp, #8
 801c8dc:	af00      	add	r7, sp, #0
 801c8de:	6078      	str	r0, [r7, #4]
 801c8e0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801c8e2:	4a05      	ldr	r2, [pc, #20]	; (801c8f8 <etharp_request+0x20>)
 801c8e4:	6839      	ldr	r1, [r7, #0]
 801c8e6:	6878      	ldr	r0, [r7, #4]
 801c8e8:	f7ff ffd4 	bl	801c894 <etharp_request_dst>
 801c8ec:	4603      	mov	r3, r0
}
 801c8ee:	4618      	mov	r0, r3
 801c8f0:	3708      	adds	r7, #8
 801c8f2:	46bd      	mov	sp, r7
 801c8f4:	bd80      	pop	{r7, pc}
 801c8f6:	bf00      	nop
 801c8f8:	0806f654 	.word	0x0806f654

0801c8fc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801c8fc:	b580      	push	{r7, lr}
 801c8fe:	b08e      	sub	sp, #56	; 0x38
 801c900:	af04      	add	r7, sp, #16
 801c902:	6078      	str	r0, [r7, #4]
 801c904:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801c906:	4b79      	ldr	r3, [pc, #484]	; (801caec <icmp_input+0x1f0>)
 801c908:	689b      	ldr	r3, [r3, #8]
 801c90a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801c90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c90e:	781b      	ldrb	r3, [r3, #0]
 801c910:	f003 030f 	and.w	r3, r3, #15
 801c914:	b2db      	uxtb	r3, r3
 801c916:	009b      	lsls	r3, r3, #2
 801c918:	b2db      	uxtb	r3, r3
 801c91a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801c91c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c91e:	2b13      	cmp	r3, #19
 801c920:	f240 80cd 	bls.w	801cabe <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801c924:	687b      	ldr	r3, [r7, #4]
 801c926:	895b      	ldrh	r3, [r3, #10]
 801c928:	2b03      	cmp	r3, #3
 801c92a:	f240 80ca 	bls.w	801cac2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801c92e:	687b      	ldr	r3, [r7, #4]
 801c930:	685b      	ldr	r3, [r3, #4]
 801c932:	781b      	ldrb	r3, [r3, #0]
 801c934:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801c938:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801c93c:	2b00      	cmp	r3, #0
 801c93e:	f000 80b7 	beq.w	801cab0 <icmp_input+0x1b4>
 801c942:	2b08      	cmp	r3, #8
 801c944:	f040 80b7 	bne.w	801cab6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801c948:	4b69      	ldr	r3, [pc, #420]	; (801caf0 <icmp_input+0x1f4>)
 801c94a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801c94c:	4b67      	ldr	r3, [pc, #412]	; (801caec <icmp_input+0x1f0>)
 801c94e:	695b      	ldr	r3, [r3, #20]
 801c950:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c954:	2be0      	cmp	r3, #224	; 0xe0
 801c956:	f000 80bb 	beq.w	801cad0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801c95a:	4b64      	ldr	r3, [pc, #400]	; (801caec <icmp_input+0x1f0>)
 801c95c:	695b      	ldr	r3, [r3, #20]
 801c95e:	4a63      	ldr	r2, [pc, #396]	; (801caec <icmp_input+0x1f0>)
 801c960:	6812      	ldr	r2, [r2, #0]
 801c962:	4611      	mov	r1, r2
 801c964:	4618      	mov	r0, r3
 801c966:	f000 fc0b 	bl	801d180 <ip4_addr_isbroadcast_u32>
 801c96a:	4603      	mov	r3, r0
 801c96c:	2b00      	cmp	r3, #0
 801c96e:	f040 80b1 	bne.w	801cad4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801c972:	687b      	ldr	r3, [r7, #4]
 801c974:	891b      	ldrh	r3, [r3, #8]
 801c976:	2b07      	cmp	r3, #7
 801c978:	f240 80a5 	bls.w	801cac6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801c97c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c97e:	330e      	adds	r3, #14
 801c980:	4619      	mov	r1, r3
 801c982:	6878      	ldr	r0, [r7, #4]
 801c984:	f7f6 ff06 	bl	8013794 <pbuf_add_header>
 801c988:	4603      	mov	r3, r0
 801c98a:	2b00      	cmp	r3, #0
 801c98c:	d04b      	beq.n	801ca26 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801c98e:	687b      	ldr	r3, [r7, #4]
 801c990:	891a      	ldrh	r2, [r3, #8]
 801c992:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c994:	4413      	add	r3, r2
 801c996:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801c998:	687b      	ldr	r3, [r7, #4]
 801c99a:	891b      	ldrh	r3, [r3, #8]
 801c99c:	8b7a      	ldrh	r2, [r7, #26]
 801c99e:	429a      	cmp	r2, r3
 801c9a0:	f0c0 809a 	bcc.w	801cad8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801c9a4:	8b7b      	ldrh	r3, [r7, #26]
 801c9a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c9aa:	4619      	mov	r1, r3
 801c9ac:	200e      	movs	r0, #14
 801c9ae:	f7f6 fca3 	bl	80132f8 <pbuf_alloc>
 801c9b2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801c9b4:	697b      	ldr	r3, [r7, #20]
 801c9b6:	2b00      	cmp	r3, #0
 801c9b8:	f000 8090 	beq.w	801cadc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801c9bc:	697b      	ldr	r3, [r7, #20]
 801c9be:	895b      	ldrh	r3, [r3, #10]
 801c9c0:	461a      	mov	r2, r3
 801c9c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c9c4:	3308      	adds	r3, #8
 801c9c6:	429a      	cmp	r2, r3
 801c9c8:	d203      	bcs.n	801c9d2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801c9ca:	6978      	ldr	r0, [r7, #20]
 801c9cc:	f7f6 ff78 	bl	80138c0 <pbuf_free>
          goto icmperr;
 801c9d0:	e085      	b.n	801cade <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801c9d2:	697b      	ldr	r3, [r7, #20]
 801c9d4:	685b      	ldr	r3, [r3, #4]
 801c9d6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801c9d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c9da:	4618      	mov	r0, r3
 801c9dc:	f001 fc4c 	bl	801e278 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801c9e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c9e2:	4619      	mov	r1, r3
 801c9e4:	6978      	ldr	r0, [r7, #20]
 801c9e6:	f7f6 fee5 	bl	80137b4 <pbuf_remove_header>
 801c9ea:	4603      	mov	r3, r0
 801c9ec:	2b00      	cmp	r3, #0
 801c9ee:	d009      	beq.n	801ca04 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801c9f0:	4b40      	ldr	r3, [pc, #256]	; (801caf4 <icmp_input+0x1f8>)
 801c9f2:	22b6      	movs	r2, #182	; 0xb6
 801c9f4:	4940      	ldr	r1, [pc, #256]	; (801caf8 <icmp_input+0x1fc>)
 801c9f6:	4841      	ldr	r0, [pc, #260]	; (801cafc <icmp_input+0x200>)
 801c9f8:	f001 fc6e 	bl	801e2d8 <printf>
          pbuf_free(r);
 801c9fc:	6978      	ldr	r0, [r7, #20]
 801c9fe:	f7f6 ff5f 	bl	80138c0 <pbuf_free>
          goto icmperr;
 801ca02:	e06c      	b.n	801cade <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801ca04:	6879      	ldr	r1, [r7, #4]
 801ca06:	6978      	ldr	r0, [r7, #20]
 801ca08:	f7f7 f88e 	bl	8013b28 <pbuf_copy>
 801ca0c:	4603      	mov	r3, r0
 801ca0e:	2b00      	cmp	r3, #0
 801ca10:	d003      	beq.n	801ca1a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801ca12:	6978      	ldr	r0, [r7, #20]
 801ca14:	f7f6 ff54 	bl	80138c0 <pbuf_free>
          goto icmperr;
 801ca18:	e061      	b.n	801cade <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801ca1a:	6878      	ldr	r0, [r7, #4]
 801ca1c:	f7f6 ff50 	bl	80138c0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801ca20:	697b      	ldr	r3, [r7, #20]
 801ca22:	607b      	str	r3, [r7, #4]
 801ca24:	e00f      	b.n	801ca46 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801ca26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ca28:	330e      	adds	r3, #14
 801ca2a:	4619      	mov	r1, r3
 801ca2c:	6878      	ldr	r0, [r7, #4]
 801ca2e:	f7f6 fec1 	bl	80137b4 <pbuf_remove_header>
 801ca32:	4603      	mov	r3, r0
 801ca34:	2b00      	cmp	r3, #0
 801ca36:	d006      	beq.n	801ca46 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801ca38:	4b2e      	ldr	r3, [pc, #184]	; (801caf4 <icmp_input+0x1f8>)
 801ca3a:	22c7      	movs	r2, #199	; 0xc7
 801ca3c:	4930      	ldr	r1, [pc, #192]	; (801cb00 <icmp_input+0x204>)
 801ca3e:	482f      	ldr	r0, [pc, #188]	; (801cafc <icmp_input+0x200>)
 801ca40:	f001 fc4a 	bl	801e2d8 <printf>
          goto icmperr;
 801ca44:	e04b      	b.n	801cade <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801ca46:	687b      	ldr	r3, [r7, #4]
 801ca48:	685b      	ldr	r3, [r3, #4]
 801ca4a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801ca4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ca4e:	4619      	mov	r1, r3
 801ca50:	6878      	ldr	r0, [r7, #4]
 801ca52:	f7f6 fe9f 	bl	8013794 <pbuf_add_header>
 801ca56:	4603      	mov	r3, r0
 801ca58:	2b00      	cmp	r3, #0
 801ca5a:	d12b      	bne.n	801cab4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801ca5c:	687b      	ldr	r3, [r7, #4]
 801ca5e:	685b      	ldr	r3, [r3, #4]
 801ca60:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801ca62:	69fb      	ldr	r3, [r7, #28]
 801ca64:	681a      	ldr	r2, [r3, #0]
 801ca66:	68fb      	ldr	r3, [r7, #12]
 801ca68:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801ca6a:	4b20      	ldr	r3, [pc, #128]	; (801caec <icmp_input+0x1f0>)
 801ca6c:	691a      	ldr	r2, [r3, #16]
 801ca6e:	68fb      	ldr	r3, [r7, #12]
 801ca70:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801ca72:	693b      	ldr	r3, [r7, #16]
 801ca74:	2200      	movs	r2, #0
 801ca76:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801ca78:	693b      	ldr	r3, [r7, #16]
 801ca7a:	2200      	movs	r2, #0
 801ca7c:	709a      	strb	r2, [r3, #2]
 801ca7e:	2200      	movs	r2, #0
 801ca80:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801ca82:	68fb      	ldr	r3, [r7, #12]
 801ca84:	22ff      	movs	r2, #255	; 0xff
 801ca86:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801ca88:	68fb      	ldr	r3, [r7, #12]
 801ca8a:	2200      	movs	r2, #0
 801ca8c:	729a      	strb	r2, [r3, #10]
 801ca8e:	2200      	movs	r2, #0
 801ca90:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801ca92:	683b      	ldr	r3, [r7, #0]
 801ca94:	9302      	str	r3, [sp, #8]
 801ca96:	2301      	movs	r3, #1
 801ca98:	9301      	str	r3, [sp, #4]
 801ca9a:	2300      	movs	r3, #0
 801ca9c:	9300      	str	r3, [sp, #0]
 801ca9e:	23ff      	movs	r3, #255	; 0xff
 801caa0:	2200      	movs	r2, #0
 801caa2:	69f9      	ldr	r1, [r7, #28]
 801caa4:	6878      	ldr	r0, [r7, #4]
 801caa6:	f000 fa93 	bl	801cfd0 <ip4_output_if>
 801caaa:	4603      	mov	r3, r0
 801caac:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801caae:	e001      	b.n	801cab4 <icmp_input+0x1b8>
      break;
 801cab0:	bf00      	nop
 801cab2:	e000      	b.n	801cab6 <icmp_input+0x1ba>
      break;
 801cab4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801cab6:	6878      	ldr	r0, [r7, #4]
 801cab8:	f7f6 ff02 	bl	80138c0 <pbuf_free>
  return;
 801cabc:	e013      	b.n	801cae6 <icmp_input+0x1ea>
    goto lenerr;
 801cabe:	bf00      	nop
 801cac0:	e002      	b.n	801cac8 <icmp_input+0x1cc>
    goto lenerr;
 801cac2:	bf00      	nop
 801cac4:	e000      	b.n	801cac8 <icmp_input+0x1cc>
        goto lenerr;
 801cac6:	bf00      	nop
lenerr:
  pbuf_free(p);
 801cac8:	6878      	ldr	r0, [r7, #4]
 801caca:	f7f6 fef9 	bl	80138c0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801cace:	e00a      	b.n	801cae6 <icmp_input+0x1ea>
        goto icmperr;
 801cad0:	bf00      	nop
 801cad2:	e004      	b.n	801cade <icmp_input+0x1e2>
        goto icmperr;
 801cad4:	bf00      	nop
 801cad6:	e002      	b.n	801cade <icmp_input+0x1e2>
          goto icmperr;
 801cad8:	bf00      	nop
 801cada:	e000      	b.n	801cade <icmp_input+0x1e2>
          goto icmperr;
 801cadc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801cade:	6878      	ldr	r0, [r7, #4]
 801cae0:	f7f6 feee 	bl	80138c0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801cae4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801cae6:	3728      	adds	r7, #40	; 0x28
 801cae8:	46bd      	mov	sp, r7
 801caea:	bd80      	pop	{r7, pc}
 801caec:	20008a40 	.word	0x20008a40
 801caf0:	20008a54 	.word	0x20008a54
 801caf4:	08026f98 	.word	0x08026f98
 801caf8:	08026fd0 	.word	0x08026fd0
 801cafc:	08027008 	.word	0x08027008
 801cb00:	08027030 	.word	0x08027030

0801cb04 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801cb04:	b580      	push	{r7, lr}
 801cb06:	b082      	sub	sp, #8
 801cb08:	af00      	add	r7, sp, #0
 801cb0a:	6078      	str	r0, [r7, #4]
 801cb0c:	460b      	mov	r3, r1
 801cb0e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801cb10:	78fb      	ldrb	r3, [r7, #3]
 801cb12:	461a      	mov	r2, r3
 801cb14:	2103      	movs	r1, #3
 801cb16:	6878      	ldr	r0, [r7, #4]
 801cb18:	f000 f814 	bl	801cb44 <icmp_send_response>
}
 801cb1c:	bf00      	nop
 801cb1e:	3708      	adds	r7, #8
 801cb20:	46bd      	mov	sp, r7
 801cb22:	bd80      	pop	{r7, pc}

0801cb24 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801cb24:	b580      	push	{r7, lr}
 801cb26:	b082      	sub	sp, #8
 801cb28:	af00      	add	r7, sp, #0
 801cb2a:	6078      	str	r0, [r7, #4]
 801cb2c:	460b      	mov	r3, r1
 801cb2e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801cb30:	78fb      	ldrb	r3, [r7, #3]
 801cb32:	461a      	mov	r2, r3
 801cb34:	210b      	movs	r1, #11
 801cb36:	6878      	ldr	r0, [r7, #4]
 801cb38:	f000 f804 	bl	801cb44 <icmp_send_response>
}
 801cb3c:	bf00      	nop
 801cb3e:	3708      	adds	r7, #8
 801cb40:	46bd      	mov	sp, r7
 801cb42:	bd80      	pop	{r7, pc}

0801cb44 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801cb44:	b580      	push	{r7, lr}
 801cb46:	b08c      	sub	sp, #48	; 0x30
 801cb48:	af04      	add	r7, sp, #16
 801cb4a:	6078      	str	r0, [r7, #4]
 801cb4c:	460b      	mov	r3, r1
 801cb4e:	70fb      	strb	r3, [r7, #3]
 801cb50:	4613      	mov	r3, r2
 801cb52:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801cb54:	f44f 7220 	mov.w	r2, #640	; 0x280
 801cb58:	2124      	movs	r1, #36	; 0x24
 801cb5a:	2022      	movs	r0, #34	; 0x22
 801cb5c:	f7f6 fbcc 	bl	80132f8 <pbuf_alloc>
 801cb60:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801cb62:	69fb      	ldr	r3, [r7, #28]
 801cb64:	2b00      	cmp	r3, #0
 801cb66:	d04c      	beq.n	801cc02 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801cb68:	69fb      	ldr	r3, [r7, #28]
 801cb6a:	895b      	ldrh	r3, [r3, #10]
 801cb6c:	2b23      	cmp	r3, #35	; 0x23
 801cb6e:	d806      	bhi.n	801cb7e <icmp_send_response+0x3a>
 801cb70:	4b26      	ldr	r3, [pc, #152]	; (801cc0c <icmp_send_response+0xc8>)
 801cb72:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801cb76:	4926      	ldr	r1, [pc, #152]	; (801cc10 <icmp_send_response+0xcc>)
 801cb78:	4826      	ldr	r0, [pc, #152]	; (801cc14 <icmp_send_response+0xd0>)
 801cb7a:	f001 fbad 	bl	801e2d8 <printf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801cb7e:	687b      	ldr	r3, [r7, #4]
 801cb80:	685b      	ldr	r3, [r3, #4]
 801cb82:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801cb84:	69fb      	ldr	r3, [r7, #28]
 801cb86:	685b      	ldr	r3, [r3, #4]
 801cb88:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801cb8a:	697b      	ldr	r3, [r7, #20]
 801cb8c:	78fa      	ldrb	r2, [r7, #3]
 801cb8e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801cb90:	697b      	ldr	r3, [r7, #20]
 801cb92:	78ba      	ldrb	r2, [r7, #2]
 801cb94:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801cb96:	697b      	ldr	r3, [r7, #20]
 801cb98:	2200      	movs	r2, #0
 801cb9a:	711a      	strb	r2, [r3, #4]
 801cb9c:	2200      	movs	r2, #0
 801cb9e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801cba0:	697b      	ldr	r3, [r7, #20]
 801cba2:	2200      	movs	r2, #0
 801cba4:	719a      	strb	r2, [r3, #6]
 801cba6:	2200      	movs	r2, #0
 801cba8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801cbaa:	69fb      	ldr	r3, [r7, #28]
 801cbac:	685b      	ldr	r3, [r3, #4]
 801cbae:	f103 0008 	add.w	r0, r3, #8
 801cbb2:	687b      	ldr	r3, [r7, #4]
 801cbb4:	685b      	ldr	r3, [r3, #4]
 801cbb6:	221c      	movs	r2, #28
 801cbb8:	4619      	mov	r1, r3
 801cbba:	f001 fb5d 	bl	801e278 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801cbbe:	69bb      	ldr	r3, [r7, #24]
 801cbc0:	68db      	ldr	r3, [r3, #12]
 801cbc2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801cbc4:	f107 030c 	add.w	r3, r7, #12
 801cbc8:	4618      	mov	r0, r3
 801cbca:	f000 f825 	bl	801cc18 <ip4_route>
 801cbce:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801cbd0:	693b      	ldr	r3, [r7, #16]
 801cbd2:	2b00      	cmp	r3, #0
 801cbd4:	d011      	beq.n	801cbfa <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801cbd6:	697b      	ldr	r3, [r7, #20]
 801cbd8:	2200      	movs	r2, #0
 801cbda:	709a      	strb	r2, [r3, #2]
 801cbdc:	2200      	movs	r2, #0
 801cbde:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801cbe0:	f107 020c 	add.w	r2, r7, #12
 801cbe4:	693b      	ldr	r3, [r7, #16]
 801cbe6:	9302      	str	r3, [sp, #8]
 801cbe8:	2301      	movs	r3, #1
 801cbea:	9301      	str	r3, [sp, #4]
 801cbec:	2300      	movs	r3, #0
 801cbee:	9300      	str	r3, [sp, #0]
 801cbf0:	23ff      	movs	r3, #255	; 0xff
 801cbf2:	2100      	movs	r1, #0
 801cbf4:	69f8      	ldr	r0, [r7, #28]
 801cbf6:	f000 f9eb 	bl	801cfd0 <ip4_output_if>
  }
  pbuf_free(q);
 801cbfa:	69f8      	ldr	r0, [r7, #28]
 801cbfc:	f7f6 fe60 	bl	80138c0 <pbuf_free>
 801cc00:	e000      	b.n	801cc04 <icmp_send_response+0xc0>
    return;
 801cc02:	bf00      	nop
}
 801cc04:	3720      	adds	r7, #32
 801cc06:	46bd      	mov	sp, r7
 801cc08:	bd80      	pop	{r7, pc}
 801cc0a:	bf00      	nop
 801cc0c:	08026f98 	.word	0x08026f98
 801cc10:	08027064 	.word	0x08027064
 801cc14:	08027008 	.word	0x08027008

0801cc18 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801cc18:	b480      	push	{r7}
 801cc1a:	b085      	sub	sp, #20
 801cc1c:	af00      	add	r7, sp, #0
 801cc1e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801cc20:	4b33      	ldr	r3, [pc, #204]	; (801ccf0 <ip4_route+0xd8>)
 801cc22:	681b      	ldr	r3, [r3, #0]
 801cc24:	60fb      	str	r3, [r7, #12]
 801cc26:	e036      	b.n	801cc96 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801cc28:	68fb      	ldr	r3, [r7, #12]
 801cc2a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801cc2e:	f003 0301 	and.w	r3, r3, #1
 801cc32:	b2db      	uxtb	r3, r3
 801cc34:	2b00      	cmp	r3, #0
 801cc36:	d02b      	beq.n	801cc90 <ip4_route+0x78>
 801cc38:	68fb      	ldr	r3, [r7, #12]
 801cc3a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801cc3e:	089b      	lsrs	r3, r3, #2
 801cc40:	f003 0301 	and.w	r3, r3, #1
 801cc44:	b2db      	uxtb	r3, r3
 801cc46:	2b00      	cmp	r3, #0
 801cc48:	d022      	beq.n	801cc90 <ip4_route+0x78>
 801cc4a:	68fb      	ldr	r3, [r7, #12]
 801cc4c:	3304      	adds	r3, #4
 801cc4e:	681b      	ldr	r3, [r3, #0]
 801cc50:	2b00      	cmp	r3, #0
 801cc52:	d01d      	beq.n	801cc90 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801cc54:	687b      	ldr	r3, [r7, #4]
 801cc56:	681a      	ldr	r2, [r3, #0]
 801cc58:	68fb      	ldr	r3, [r7, #12]
 801cc5a:	3304      	adds	r3, #4
 801cc5c:	681b      	ldr	r3, [r3, #0]
 801cc5e:	405a      	eors	r2, r3
 801cc60:	68fb      	ldr	r3, [r7, #12]
 801cc62:	3308      	adds	r3, #8
 801cc64:	681b      	ldr	r3, [r3, #0]
 801cc66:	4013      	ands	r3, r2
 801cc68:	2b00      	cmp	r3, #0
 801cc6a:	d101      	bne.n	801cc70 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801cc6c:	68fb      	ldr	r3, [r7, #12]
 801cc6e:	e038      	b.n	801cce2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801cc70:	68fb      	ldr	r3, [r7, #12]
 801cc72:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801cc76:	f003 0302 	and.w	r3, r3, #2
 801cc7a:	2b00      	cmp	r3, #0
 801cc7c:	d108      	bne.n	801cc90 <ip4_route+0x78>
 801cc7e:	687b      	ldr	r3, [r7, #4]
 801cc80:	681a      	ldr	r2, [r3, #0]
 801cc82:	68fb      	ldr	r3, [r7, #12]
 801cc84:	330c      	adds	r3, #12
 801cc86:	681b      	ldr	r3, [r3, #0]
 801cc88:	429a      	cmp	r2, r3
 801cc8a:	d101      	bne.n	801cc90 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801cc8c:	68fb      	ldr	r3, [r7, #12]
 801cc8e:	e028      	b.n	801cce2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801cc90:	68fb      	ldr	r3, [r7, #12]
 801cc92:	681b      	ldr	r3, [r3, #0]
 801cc94:	60fb      	str	r3, [r7, #12]
 801cc96:	68fb      	ldr	r3, [r7, #12]
 801cc98:	2b00      	cmp	r3, #0
 801cc9a:	d1c5      	bne.n	801cc28 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801cc9c:	4b15      	ldr	r3, [pc, #84]	; (801ccf4 <ip4_route+0xdc>)
 801cc9e:	681b      	ldr	r3, [r3, #0]
 801cca0:	2b00      	cmp	r3, #0
 801cca2:	d01a      	beq.n	801ccda <ip4_route+0xc2>
 801cca4:	4b13      	ldr	r3, [pc, #76]	; (801ccf4 <ip4_route+0xdc>)
 801cca6:	681b      	ldr	r3, [r3, #0]
 801cca8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ccac:	f003 0301 	and.w	r3, r3, #1
 801ccb0:	2b00      	cmp	r3, #0
 801ccb2:	d012      	beq.n	801ccda <ip4_route+0xc2>
 801ccb4:	4b0f      	ldr	r3, [pc, #60]	; (801ccf4 <ip4_route+0xdc>)
 801ccb6:	681b      	ldr	r3, [r3, #0]
 801ccb8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ccbc:	f003 0304 	and.w	r3, r3, #4
 801ccc0:	2b00      	cmp	r3, #0
 801ccc2:	d00a      	beq.n	801ccda <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801ccc4:	4b0b      	ldr	r3, [pc, #44]	; (801ccf4 <ip4_route+0xdc>)
 801ccc6:	681b      	ldr	r3, [r3, #0]
 801ccc8:	3304      	adds	r3, #4
 801ccca:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801cccc:	2b00      	cmp	r3, #0
 801ccce:	d004      	beq.n	801ccda <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801ccd0:	687b      	ldr	r3, [r7, #4]
 801ccd2:	681b      	ldr	r3, [r3, #0]
 801ccd4:	b2db      	uxtb	r3, r3
 801ccd6:	2b7f      	cmp	r3, #127	; 0x7f
 801ccd8:	d101      	bne.n	801ccde <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801ccda:	2300      	movs	r3, #0
 801ccdc:	e001      	b.n	801cce2 <ip4_route+0xca>
  }

  return netif_default;
 801ccde:	4b05      	ldr	r3, [pc, #20]	; (801ccf4 <ip4_route+0xdc>)
 801cce0:	681b      	ldr	r3, [r3, #0]
}
 801cce2:	4618      	mov	r0, r3
 801cce4:	3714      	adds	r7, #20
 801cce6:	46bd      	mov	sp, r7
 801cce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ccec:	4770      	bx	lr
 801ccee:	bf00      	nop
 801ccf0:	2000c1a8 	.word	0x2000c1a8
 801ccf4:	2000c1ac 	.word	0x2000c1ac

0801ccf8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801ccf8:	b580      	push	{r7, lr}
 801ccfa:	b082      	sub	sp, #8
 801ccfc:	af00      	add	r7, sp, #0
 801ccfe:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801cd00:	687b      	ldr	r3, [r7, #4]
 801cd02:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801cd06:	f003 0301 	and.w	r3, r3, #1
 801cd0a:	b2db      	uxtb	r3, r3
 801cd0c:	2b00      	cmp	r3, #0
 801cd0e:	d016      	beq.n	801cd3e <ip4_input_accept+0x46>
 801cd10:	687b      	ldr	r3, [r7, #4]
 801cd12:	3304      	adds	r3, #4
 801cd14:	681b      	ldr	r3, [r3, #0]
 801cd16:	2b00      	cmp	r3, #0
 801cd18:	d011      	beq.n	801cd3e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801cd1a:	4b0b      	ldr	r3, [pc, #44]	; (801cd48 <ip4_input_accept+0x50>)
 801cd1c:	695a      	ldr	r2, [r3, #20]
 801cd1e:	687b      	ldr	r3, [r7, #4]
 801cd20:	3304      	adds	r3, #4
 801cd22:	681b      	ldr	r3, [r3, #0]
 801cd24:	429a      	cmp	r2, r3
 801cd26:	d008      	beq.n	801cd3a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801cd28:	4b07      	ldr	r3, [pc, #28]	; (801cd48 <ip4_input_accept+0x50>)
 801cd2a:	695b      	ldr	r3, [r3, #20]
 801cd2c:	6879      	ldr	r1, [r7, #4]
 801cd2e:	4618      	mov	r0, r3
 801cd30:	f000 fa26 	bl	801d180 <ip4_addr_isbroadcast_u32>
 801cd34:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801cd36:	2b00      	cmp	r3, #0
 801cd38:	d001      	beq.n	801cd3e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801cd3a:	2301      	movs	r3, #1
 801cd3c:	e000      	b.n	801cd40 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801cd3e:	2300      	movs	r3, #0
}
 801cd40:	4618      	mov	r0, r3
 801cd42:	3708      	adds	r7, #8
 801cd44:	46bd      	mov	sp, r7
 801cd46:	bd80      	pop	{r7, pc}
 801cd48:	20008a40 	.word	0x20008a40

0801cd4c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801cd4c:	b580      	push	{r7, lr}
 801cd4e:	b088      	sub	sp, #32
 801cd50:	af00      	add	r7, sp, #0
 801cd52:	6078      	str	r0, [r7, #4]
 801cd54:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801cd56:	2301      	movs	r3, #1
 801cd58:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801cd5a:	687b      	ldr	r3, [r7, #4]
 801cd5c:	685b      	ldr	r3, [r3, #4]
 801cd5e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801cd60:	69fb      	ldr	r3, [r7, #28]
 801cd62:	781b      	ldrb	r3, [r3, #0]
 801cd64:	091b      	lsrs	r3, r3, #4
 801cd66:	b2db      	uxtb	r3, r3
 801cd68:	2b04      	cmp	r3, #4
 801cd6a:	d004      	beq.n	801cd76 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801cd6c:	6878      	ldr	r0, [r7, #4]
 801cd6e:	f7f6 fda7 	bl	80138c0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801cd72:	2300      	movs	r3, #0
 801cd74:	e123      	b.n	801cfbe <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801cd76:	69fb      	ldr	r3, [r7, #28]
 801cd78:	781b      	ldrb	r3, [r3, #0]
 801cd7a:	f003 030f 	and.w	r3, r3, #15
 801cd7e:	b2db      	uxtb	r3, r3
 801cd80:	009b      	lsls	r3, r3, #2
 801cd82:	b2db      	uxtb	r3, r3
 801cd84:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801cd86:	69fb      	ldr	r3, [r7, #28]
 801cd88:	885b      	ldrh	r3, [r3, #2]
 801cd8a:	b29b      	uxth	r3, r3
 801cd8c:	4618      	mov	r0, r3
 801cd8e:	f7f5 f9df 	bl	8012150 <lwip_htons>
 801cd92:	4603      	mov	r3, r0
 801cd94:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801cd96:	687b      	ldr	r3, [r7, #4]
 801cd98:	891b      	ldrh	r3, [r3, #8]
 801cd9a:	8a3a      	ldrh	r2, [r7, #16]
 801cd9c:	429a      	cmp	r2, r3
 801cd9e:	d204      	bcs.n	801cdaa <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801cda0:	8a3b      	ldrh	r3, [r7, #16]
 801cda2:	4619      	mov	r1, r3
 801cda4:	6878      	ldr	r0, [r7, #4]
 801cda6:	f7f6 fc05 	bl	80135b4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801cdaa:	687b      	ldr	r3, [r7, #4]
 801cdac:	895b      	ldrh	r3, [r3, #10]
 801cdae:	8a7a      	ldrh	r2, [r7, #18]
 801cdb0:	429a      	cmp	r2, r3
 801cdb2:	d807      	bhi.n	801cdc4 <ip4_input+0x78>
 801cdb4:	687b      	ldr	r3, [r7, #4]
 801cdb6:	891b      	ldrh	r3, [r3, #8]
 801cdb8:	8a3a      	ldrh	r2, [r7, #16]
 801cdba:	429a      	cmp	r2, r3
 801cdbc:	d802      	bhi.n	801cdc4 <ip4_input+0x78>
 801cdbe:	8a7b      	ldrh	r3, [r7, #18]
 801cdc0:	2b13      	cmp	r3, #19
 801cdc2:	d804      	bhi.n	801cdce <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801cdc4:	6878      	ldr	r0, [r7, #4]
 801cdc6:	f7f6 fd7b 	bl	80138c0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801cdca:	2300      	movs	r3, #0
 801cdcc:	e0f7      	b.n	801cfbe <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801cdce:	69fb      	ldr	r3, [r7, #28]
 801cdd0:	691b      	ldr	r3, [r3, #16]
 801cdd2:	4a7d      	ldr	r2, [pc, #500]	; (801cfc8 <ip4_input+0x27c>)
 801cdd4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801cdd6:	69fb      	ldr	r3, [r7, #28]
 801cdd8:	68db      	ldr	r3, [r3, #12]
 801cdda:	4a7b      	ldr	r2, [pc, #492]	; (801cfc8 <ip4_input+0x27c>)
 801cddc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801cdde:	4b7a      	ldr	r3, [pc, #488]	; (801cfc8 <ip4_input+0x27c>)
 801cde0:	695b      	ldr	r3, [r3, #20]
 801cde2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801cde6:	2be0      	cmp	r3, #224	; 0xe0
 801cde8:	d112      	bne.n	801ce10 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801cdea:	683b      	ldr	r3, [r7, #0]
 801cdec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801cdf0:	f003 0301 	and.w	r3, r3, #1
 801cdf4:	b2db      	uxtb	r3, r3
 801cdf6:	2b00      	cmp	r3, #0
 801cdf8:	d007      	beq.n	801ce0a <ip4_input+0xbe>
 801cdfa:	683b      	ldr	r3, [r7, #0]
 801cdfc:	3304      	adds	r3, #4
 801cdfe:	681b      	ldr	r3, [r3, #0]
 801ce00:	2b00      	cmp	r3, #0
 801ce02:	d002      	beq.n	801ce0a <ip4_input+0xbe>
      netif = inp;
 801ce04:	683b      	ldr	r3, [r7, #0]
 801ce06:	61bb      	str	r3, [r7, #24]
 801ce08:	e02a      	b.n	801ce60 <ip4_input+0x114>
    } else {
      netif = NULL;
 801ce0a:	2300      	movs	r3, #0
 801ce0c:	61bb      	str	r3, [r7, #24]
 801ce0e:	e027      	b.n	801ce60 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801ce10:	6838      	ldr	r0, [r7, #0]
 801ce12:	f7ff ff71 	bl	801ccf8 <ip4_input_accept>
 801ce16:	4603      	mov	r3, r0
 801ce18:	2b00      	cmp	r3, #0
 801ce1a:	d002      	beq.n	801ce22 <ip4_input+0xd6>
      netif = inp;
 801ce1c:	683b      	ldr	r3, [r7, #0]
 801ce1e:	61bb      	str	r3, [r7, #24]
 801ce20:	e01e      	b.n	801ce60 <ip4_input+0x114>
    } else {
      netif = NULL;
 801ce22:	2300      	movs	r3, #0
 801ce24:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801ce26:	4b68      	ldr	r3, [pc, #416]	; (801cfc8 <ip4_input+0x27c>)
 801ce28:	695b      	ldr	r3, [r3, #20]
 801ce2a:	b2db      	uxtb	r3, r3
 801ce2c:	2b7f      	cmp	r3, #127	; 0x7f
 801ce2e:	d017      	beq.n	801ce60 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801ce30:	4b66      	ldr	r3, [pc, #408]	; (801cfcc <ip4_input+0x280>)
 801ce32:	681b      	ldr	r3, [r3, #0]
 801ce34:	61bb      	str	r3, [r7, #24]
 801ce36:	e00e      	b.n	801ce56 <ip4_input+0x10a>
          if (netif == inp) {
 801ce38:	69ba      	ldr	r2, [r7, #24]
 801ce3a:	683b      	ldr	r3, [r7, #0]
 801ce3c:	429a      	cmp	r2, r3
 801ce3e:	d006      	beq.n	801ce4e <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801ce40:	69b8      	ldr	r0, [r7, #24]
 801ce42:	f7ff ff59 	bl	801ccf8 <ip4_input_accept>
 801ce46:	4603      	mov	r3, r0
 801ce48:	2b00      	cmp	r3, #0
 801ce4a:	d108      	bne.n	801ce5e <ip4_input+0x112>
 801ce4c:	e000      	b.n	801ce50 <ip4_input+0x104>
            continue;
 801ce4e:	bf00      	nop
        NETIF_FOREACH(netif) {
 801ce50:	69bb      	ldr	r3, [r7, #24]
 801ce52:	681b      	ldr	r3, [r3, #0]
 801ce54:	61bb      	str	r3, [r7, #24]
 801ce56:	69bb      	ldr	r3, [r7, #24]
 801ce58:	2b00      	cmp	r3, #0
 801ce5a:	d1ed      	bne.n	801ce38 <ip4_input+0xec>
 801ce5c:	e000      	b.n	801ce60 <ip4_input+0x114>
            break;
 801ce5e:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801ce60:	69bb      	ldr	r3, [r7, #24]
 801ce62:	2b00      	cmp	r3, #0
 801ce64:	d111      	bne.n	801ce8a <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801ce66:	69fb      	ldr	r3, [r7, #28]
 801ce68:	7a5b      	ldrb	r3, [r3, #9]
 801ce6a:	2b11      	cmp	r3, #17
 801ce6c:	d10d      	bne.n	801ce8a <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801ce6e:	8a7b      	ldrh	r3, [r7, #18]
 801ce70:	69fa      	ldr	r2, [r7, #28]
 801ce72:	4413      	add	r3, r2
 801ce74:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801ce76:	68fb      	ldr	r3, [r7, #12]
 801ce78:	885b      	ldrh	r3, [r3, #2]
 801ce7a:	b29b      	uxth	r3, r3
 801ce7c:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801ce80:	d103      	bne.n	801ce8a <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801ce82:	683b      	ldr	r3, [r7, #0]
 801ce84:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801ce86:	2300      	movs	r3, #0
 801ce88:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801ce8a:	697b      	ldr	r3, [r7, #20]
 801ce8c:	2b00      	cmp	r3, #0
 801ce8e:	d017      	beq.n	801cec0 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801ce90:	4b4d      	ldr	r3, [pc, #308]	; (801cfc8 <ip4_input+0x27c>)
 801ce92:	691b      	ldr	r3, [r3, #16]
 801ce94:	2b00      	cmp	r3, #0
 801ce96:	d013      	beq.n	801cec0 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801ce98:	4b4b      	ldr	r3, [pc, #300]	; (801cfc8 <ip4_input+0x27c>)
 801ce9a:	691b      	ldr	r3, [r3, #16]
 801ce9c:	6839      	ldr	r1, [r7, #0]
 801ce9e:	4618      	mov	r0, r3
 801cea0:	f000 f96e 	bl	801d180 <ip4_addr_isbroadcast_u32>
 801cea4:	4603      	mov	r3, r0
 801cea6:	2b00      	cmp	r3, #0
 801cea8:	d105      	bne.n	801ceb6 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801ceaa:	4b47      	ldr	r3, [pc, #284]	; (801cfc8 <ip4_input+0x27c>)
 801ceac:	691b      	ldr	r3, [r3, #16]
 801ceae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801ceb2:	2be0      	cmp	r3, #224	; 0xe0
 801ceb4:	d104      	bne.n	801cec0 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801ceb6:	6878      	ldr	r0, [r7, #4]
 801ceb8:	f7f6 fd02 	bl	80138c0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801cebc:	2300      	movs	r3, #0
 801cebe:	e07e      	b.n	801cfbe <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801cec0:	69bb      	ldr	r3, [r7, #24]
 801cec2:	2b00      	cmp	r3, #0
 801cec4:	d104      	bne.n	801ced0 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801cec6:	6878      	ldr	r0, [r7, #4]
 801cec8:	f7f6 fcfa 	bl	80138c0 <pbuf_free>
    return ERR_OK;
 801cecc:	2300      	movs	r3, #0
 801cece:	e076      	b.n	801cfbe <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801ced0:	69fb      	ldr	r3, [r7, #28]
 801ced2:	88db      	ldrh	r3, [r3, #6]
 801ced4:	b29b      	uxth	r3, r3
 801ced6:	461a      	mov	r2, r3
 801ced8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801cedc:	4013      	ands	r3, r2
 801cede:	2b00      	cmp	r3, #0
 801cee0:	d00b      	beq.n	801cefa <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801cee2:	6878      	ldr	r0, [r7, #4]
 801cee4:	f000 fc92 	bl	801d80c <ip4_reass>
 801cee8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801ceea:	687b      	ldr	r3, [r7, #4]
 801ceec:	2b00      	cmp	r3, #0
 801ceee:	d101      	bne.n	801cef4 <ip4_input+0x1a8>
      return ERR_OK;
 801cef0:	2300      	movs	r3, #0
 801cef2:	e064      	b.n	801cfbe <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801cef4:	687b      	ldr	r3, [r7, #4]
 801cef6:	685b      	ldr	r3, [r3, #4]
 801cef8:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801cefa:	4a33      	ldr	r2, [pc, #204]	; (801cfc8 <ip4_input+0x27c>)
 801cefc:	69bb      	ldr	r3, [r7, #24]
 801cefe:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801cf00:	4a31      	ldr	r2, [pc, #196]	; (801cfc8 <ip4_input+0x27c>)
 801cf02:	683b      	ldr	r3, [r7, #0]
 801cf04:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801cf06:	4a30      	ldr	r2, [pc, #192]	; (801cfc8 <ip4_input+0x27c>)
 801cf08:	69fb      	ldr	r3, [r7, #28]
 801cf0a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801cf0c:	69fb      	ldr	r3, [r7, #28]
 801cf0e:	781b      	ldrb	r3, [r3, #0]
 801cf10:	f003 030f 	and.w	r3, r3, #15
 801cf14:	b2db      	uxtb	r3, r3
 801cf16:	009b      	lsls	r3, r3, #2
 801cf18:	b2db      	uxtb	r3, r3
 801cf1a:	b29a      	uxth	r2, r3
 801cf1c:	4b2a      	ldr	r3, [pc, #168]	; (801cfc8 <ip4_input+0x27c>)
 801cf1e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801cf20:	8a7b      	ldrh	r3, [r7, #18]
 801cf22:	4619      	mov	r1, r3
 801cf24:	6878      	ldr	r0, [r7, #4]
 801cf26:	f7f6 fc45 	bl	80137b4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801cf2a:	69fb      	ldr	r3, [r7, #28]
 801cf2c:	7a5b      	ldrb	r3, [r3, #9]
 801cf2e:	2b11      	cmp	r3, #17
 801cf30:	d006      	beq.n	801cf40 <ip4_input+0x1f4>
 801cf32:	2b11      	cmp	r3, #17
 801cf34:	dc13      	bgt.n	801cf5e <ip4_input+0x212>
 801cf36:	2b01      	cmp	r3, #1
 801cf38:	d00c      	beq.n	801cf54 <ip4_input+0x208>
 801cf3a:	2b06      	cmp	r3, #6
 801cf3c:	d005      	beq.n	801cf4a <ip4_input+0x1fe>
 801cf3e:	e00e      	b.n	801cf5e <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801cf40:	6839      	ldr	r1, [r7, #0]
 801cf42:	6878      	ldr	r0, [r7, #4]
 801cf44:	f7fc faea 	bl	801951c <udp_input>
        break;
 801cf48:	e026      	b.n	801cf98 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801cf4a:	6839      	ldr	r1, [r7, #0]
 801cf4c:	6878      	ldr	r0, [r7, #4]
 801cf4e:	f7f8 fafb 	bl	8015548 <tcp_input>
        break;
 801cf52:	e021      	b.n	801cf98 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801cf54:	6839      	ldr	r1, [r7, #0]
 801cf56:	6878      	ldr	r0, [r7, #4]
 801cf58:	f7ff fcd0 	bl	801c8fc <icmp_input>
        break;
 801cf5c:	e01c      	b.n	801cf98 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801cf5e:	4b1a      	ldr	r3, [pc, #104]	; (801cfc8 <ip4_input+0x27c>)
 801cf60:	695b      	ldr	r3, [r3, #20]
 801cf62:	69b9      	ldr	r1, [r7, #24]
 801cf64:	4618      	mov	r0, r3
 801cf66:	f000 f90b 	bl	801d180 <ip4_addr_isbroadcast_u32>
 801cf6a:	4603      	mov	r3, r0
 801cf6c:	2b00      	cmp	r3, #0
 801cf6e:	d10f      	bne.n	801cf90 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801cf70:	4b15      	ldr	r3, [pc, #84]	; (801cfc8 <ip4_input+0x27c>)
 801cf72:	695b      	ldr	r3, [r3, #20]
 801cf74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801cf78:	2be0      	cmp	r3, #224	; 0xe0
 801cf7a:	d009      	beq.n	801cf90 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801cf7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801cf80:	4619      	mov	r1, r3
 801cf82:	6878      	ldr	r0, [r7, #4]
 801cf84:	f7f6 fc89 	bl	801389a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801cf88:	2102      	movs	r1, #2
 801cf8a:	6878      	ldr	r0, [r7, #4]
 801cf8c:	f7ff fdba 	bl	801cb04 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801cf90:	6878      	ldr	r0, [r7, #4]
 801cf92:	f7f6 fc95 	bl	80138c0 <pbuf_free>
        break;
 801cf96:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801cf98:	4b0b      	ldr	r3, [pc, #44]	; (801cfc8 <ip4_input+0x27c>)
 801cf9a:	2200      	movs	r2, #0
 801cf9c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801cf9e:	4b0a      	ldr	r3, [pc, #40]	; (801cfc8 <ip4_input+0x27c>)
 801cfa0:	2200      	movs	r2, #0
 801cfa2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801cfa4:	4b08      	ldr	r3, [pc, #32]	; (801cfc8 <ip4_input+0x27c>)
 801cfa6:	2200      	movs	r2, #0
 801cfa8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801cfaa:	4b07      	ldr	r3, [pc, #28]	; (801cfc8 <ip4_input+0x27c>)
 801cfac:	2200      	movs	r2, #0
 801cfae:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801cfb0:	4b05      	ldr	r3, [pc, #20]	; (801cfc8 <ip4_input+0x27c>)
 801cfb2:	2200      	movs	r2, #0
 801cfb4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801cfb6:	4b04      	ldr	r3, [pc, #16]	; (801cfc8 <ip4_input+0x27c>)
 801cfb8:	2200      	movs	r2, #0
 801cfba:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801cfbc:	2300      	movs	r3, #0
}
 801cfbe:	4618      	mov	r0, r3
 801cfc0:	3720      	adds	r7, #32
 801cfc2:	46bd      	mov	sp, r7
 801cfc4:	bd80      	pop	{r7, pc}
 801cfc6:	bf00      	nop
 801cfc8:	20008a40 	.word	0x20008a40
 801cfcc:	2000c1a8 	.word	0x2000c1a8

0801cfd0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801cfd0:	b580      	push	{r7, lr}
 801cfd2:	b08a      	sub	sp, #40	; 0x28
 801cfd4:	af04      	add	r7, sp, #16
 801cfd6:	60f8      	str	r0, [r7, #12]
 801cfd8:	60b9      	str	r1, [r7, #8]
 801cfda:	607a      	str	r2, [r7, #4]
 801cfdc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801cfde:	68bb      	ldr	r3, [r7, #8]
 801cfe0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801cfe2:	687b      	ldr	r3, [r7, #4]
 801cfe4:	2b00      	cmp	r3, #0
 801cfe6:	d009      	beq.n	801cffc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801cfe8:	68bb      	ldr	r3, [r7, #8]
 801cfea:	2b00      	cmp	r3, #0
 801cfec:	d003      	beq.n	801cff6 <ip4_output_if+0x26>
 801cfee:	68bb      	ldr	r3, [r7, #8]
 801cff0:	681b      	ldr	r3, [r3, #0]
 801cff2:	2b00      	cmp	r3, #0
 801cff4:	d102      	bne.n	801cffc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801cff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cff8:	3304      	adds	r3, #4
 801cffa:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801cffc:	78fa      	ldrb	r2, [r7, #3]
 801cffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d000:	9302      	str	r3, [sp, #8]
 801d002:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801d006:	9301      	str	r3, [sp, #4]
 801d008:	f897 3020 	ldrb.w	r3, [r7, #32]
 801d00c:	9300      	str	r3, [sp, #0]
 801d00e:	4613      	mov	r3, r2
 801d010:	687a      	ldr	r2, [r7, #4]
 801d012:	6979      	ldr	r1, [r7, #20]
 801d014:	68f8      	ldr	r0, [r7, #12]
 801d016:	f000 f805 	bl	801d024 <ip4_output_if_src>
 801d01a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801d01c:	4618      	mov	r0, r3
 801d01e:	3718      	adds	r7, #24
 801d020:	46bd      	mov	sp, r7
 801d022:	bd80      	pop	{r7, pc}

0801d024 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801d024:	b580      	push	{r7, lr}
 801d026:	b088      	sub	sp, #32
 801d028:	af00      	add	r7, sp, #0
 801d02a:	60f8      	str	r0, [r7, #12]
 801d02c:	60b9      	str	r1, [r7, #8]
 801d02e:	607a      	str	r2, [r7, #4]
 801d030:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801d032:	68fb      	ldr	r3, [r7, #12]
 801d034:	7b9b      	ldrb	r3, [r3, #14]
 801d036:	2b01      	cmp	r3, #1
 801d038:	d006      	beq.n	801d048 <ip4_output_if_src+0x24>
 801d03a:	4b4b      	ldr	r3, [pc, #300]	; (801d168 <ip4_output_if_src+0x144>)
 801d03c:	f44f 7255 	mov.w	r2, #852	; 0x354
 801d040:	494a      	ldr	r1, [pc, #296]	; (801d16c <ip4_output_if_src+0x148>)
 801d042:	484b      	ldr	r0, [pc, #300]	; (801d170 <ip4_output_if_src+0x14c>)
 801d044:	f001 f948 	bl	801e2d8 <printf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801d048:	687b      	ldr	r3, [r7, #4]
 801d04a:	2b00      	cmp	r3, #0
 801d04c:	d060      	beq.n	801d110 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801d04e:	2314      	movs	r3, #20
 801d050:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801d052:	2114      	movs	r1, #20
 801d054:	68f8      	ldr	r0, [r7, #12]
 801d056:	f7f6 fb9d 	bl	8013794 <pbuf_add_header>
 801d05a:	4603      	mov	r3, r0
 801d05c:	2b00      	cmp	r3, #0
 801d05e:	d002      	beq.n	801d066 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801d060:	f06f 0301 	mvn.w	r3, #1
 801d064:	e07c      	b.n	801d160 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801d066:	68fb      	ldr	r3, [r7, #12]
 801d068:	685b      	ldr	r3, [r3, #4]
 801d06a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801d06c:	68fb      	ldr	r3, [r7, #12]
 801d06e:	895b      	ldrh	r3, [r3, #10]
 801d070:	2b13      	cmp	r3, #19
 801d072:	d806      	bhi.n	801d082 <ip4_output_if_src+0x5e>
 801d074:	4b3c      	ldr	r3, [pc, #240]	; (801d168 <ip4_output_if_src+0x144>)
 801d076:	f44f 7262 	mov.w	r2, #904	; 0x388
 801d07a:	493e      	ldr	r1, [pc, #248]	; (801d174 <ip4_output_if_src+0x150>)
 801d07c:	483c      	ldr	r0, [pc, #240]	; (801d170 <ip4_output_if_src+0x14c>)
 801d07e:	f001 f92b 	bl	801e2d8 <printf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801d082:	69fb      	ldr	r3, [r7, #28]
 801d084:	78fa      	ldrb	r2, [r7, #3]
 801d086:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801d088:	69fb      	ldr	r3, [r7, #28]
 801d08a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801d08e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801d090:	687b      	ldr	r3, [r7, #4]
 801d092:	681a      	ldr	r2, [r3, #0]
 801d094:	69fb      	ldr	r3, [r7, #28]
 801d096:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801d098:	8b7b      	ldrh	r3, [r7, #26]
 801d09a:	089b      	lsrs	r3, r3, #2
 801d09c:	b29b      	uxth	r3, r3
 801d09e:	b2db      	uxtb	r3, r3
 801d0a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d0a4:	b2da      	uxtb	r2, r3
 801d0a6:	69fb      	ldr	r3, [r7, #28]
 801d0a8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801d0aa:	69fb      	ldr	r3, [r7, #28]
 801d0ac:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801d0b0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801d0b2:	68fb      	ldr	r3, [r7, #12]
 801d0b4:	891b      	ldrh	r3, [r3, #8]
 801d0b6:	4618      	mov	r0, r3
 801d0b8:	f7f5 f84a 	bl	8012150 <lwip_htons>
 801d0bc:	4603      	mov	r3, r0
 801d0be:	461a      	mov	r2, r3
 801d0c0:	69fb      	ldr	r3, [r7, #28]
 801d0c2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801d0c4:	69fb      	ldr	r3, [r7, #28]
 801d0c6:	2200      	movs	r2, #0
 801d0c8:	719a      	strb	r2, [r3, #6]
 801d0ca:	2200      	movs	r2, #0
 801d0cc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801d0ce:	4b2a      	ldr	r3, [pc, #168]	; (801d178 <ip4_output_if_src+0x154>)
 801d0d0:	881b      	ldrh	r3, [r3, #0]
 801d0d2:	4618      	mov	r0, r3
 801d0d4:	f7f5 f83c 	bl	8012150 <lwip_htons>
 801d0d8:	4603      	mov	r3, r0
 801d0da:	461a      	mov	r2, r3
 801d0dc:	69fb      	ldr	r3, [r7, #28]
 801d0de:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801d0e0:	4b25      	ldr	r3, [pc, #148]	; (801d178 <ip4_output_if_src+0x154>)
 801d0e2:	881b      	ldrh	r3, [r3, #0]
 801d0e4:	3301      	adds	r3, #1
 801d0e6:	b29a      	uxth	r2, r3
 801d0e8:	4b23      	ldr	r3, [pc, #140]	; (801d178 <ip4_output_if_src+0x154>)
 801d0ea:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801d0ec:	68bb      	ldr	r3, [r7, #8]
 801d0ee:	2b00      	cmp	r3, #0
 801d0f0:	d104      	bne.n	801d0fc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801d0f2:	4b22      	ldr	r3, [pc, #136]	; (801d17c <ip4_output_if_src+0x158>)
 801d0f4:	681a      	ldr	r2, [r3, #0]
 801d0f6:	69fb      	ldr	r3, [r7, #28]
 801d0f8:	60da      	str	r2, [r3, #12]
 801d0fa:	e003      	b.n	801d104 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801d0fc:	68bb      	ldr	r3, [r7, #8]
 801d0fe:	681a      	ldr	r2, [r3, #0]
 801d100:	69fb      	ldr	r3, [r7, #28]
 801d102:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801d104:	69fb      	ldr	r3, [r7, #28]
 801d106:	2200      	movs	r2, #0
 801d108:	729a      	strb	r2, [r3, #10]
 801d10a:	2200      	movs	r2, #0
 801d10c:	72da      	strb	r2, [r3, #11]
 801d10e:	e00f      	b.n	801d130 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801d110:	68fb      	ldr	r3, [r7, #12]
 801d112:	895b      	ldrh	r3, [r3, #10]
 801d114:	2b13      	cmp	r3, #19
 801d116:	d802      	bhi.n	801d11e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801d118:	f06f 0301 	mvn.w	r3, #1
 801d11c:	e020      	b.n	801d160 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801d11e:	68fb      	ldr	r3, [r7, #12]
 801d120:	685b      	ldr	r3, [r3, #4]
 801d122:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801d124:	69fb      	ldr	r3, [r7, #28]
 801d126:	691b      	ldr	r3, [r3, #16]
 801d128:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801d12a:	f107 0314 	add.w	r3, r7, #20
 801d12e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801d130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d134:	2b00      	cmp	r3, #0
 801d136:	d00c      	beq.n	801d152 <ip4_output_if_src+0x12e>
 801d138:	68fb      	ldr	r3, [r7, #12]
 801d13a:	891a      	ldrh	r2, [r3, #8]
 801d13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d13e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d140:	429a      	cmp	r2, r3
 801d142:	d906      	bls.n	801d152 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801d144:	687a      	ldr	r2, [r7, #4]
 801d146:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801d148:	68f8      	ldr	r0, [r7, #12]
 801d14a:	f000 fd53 	bl	801dbf4 <ip4_frag>
 801d14e:	4603      	mov	r3, r0
 801d150:	e006      	b.n	801d160 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801d152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d154:	695b      	ldr	r3, [r3, #20]
 801d156:	687a      	ldr	r2, [r7, #4]
 801d158:	68f9      	ldr	r1, [r7, #12]
 801d15a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d15c:	4798      	blx	r3
 801d15e:	4603      	mov	r3, r0
}
 801d160:	4618      	mov	r0, r3
 801d162:	3720      	adds	r7, #32
 801d164:	46bd      	mov	sp, r7
 801d166:	bd80      	pop	{r7, pc}
 801d168:	08027090 	.word	0x08027090
 801d16c:	080270c4 	.word	0x080270c4
 801d170:	080270d0 	.word	0x080270d0
 801d174:	080270f8 	.word	0x080270f8
 801d178:	2000c33a 	.word	0x2000c33a
 801d17c:	0806f64c 	.word	0x0806f64c

0801d180 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801d180:	b480      	push	{r7}
 801d182:	b085      	sub	sp, #20
 801d184:	af00      	add	r7, sp, #0
 801d186:	6078      	str	r0, [r7, #4]
 801d188:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801d18a:	687b      	ldr	r3, [r7, #4]
 801d18c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801d18e:	687b      	ldr	r3, [r7, #4]
 801d190:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d194:	d002      	beq.n	801d19c <ip4_addr_isbroadcast_u32+0x1c>
 801d196:	687b      	ldr	r3, [r7, #4]
 801d198:	2b00      	cmp	r3, #0
 801d19a:	d101      	bne.n	801d1a0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801d19c:	2301      	movs	r3, #1
 801d19e:	e02a      	b.n	801d1f6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801d1a0:	683b      	ldr	r3, [r7, #0]
 801d1a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d1a6:	f003 0302 	and.w	r3, r3, #2
 801d1aa:	2b00      	cmp	r3, #0
 801d1ac:	d101      	bne.n	801d1b2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801d1ae:	2300      	movs	r3, #0
 801d1b0:	e021      	b.n	801d1f6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801d1b2:	683b      	ldr	r3, [r7, #0]
 801d1b4:	3304      	adds	r3, #4
 801d1b6:	681b      	ldr	r3, [r3, #0]
 801d1b8:	687a      	ldr	r2, [r7, #4]
 801d1ba:	429a      	cmp	r2, r3
 801d1bc:	d101      	bne.n	801d1c2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801d1be:	2300      	movs	r3, #0
 801d1c0:	e019      	b.n	801d1f6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801d1c2:	68fa      	ldr	r2, [r7, #12]
 801d1c4:	683b      	ldr	r3, [r7, #0]
 801d1c6:	3304      	adds	r3, #4
 801d1c8:	681b      	ldr	r3, [r3, #0]
 801d1ca:	405a      	eors	r2, r3
 801d1cc:	683b      	ldr	r3, [r7, #0]
 801d1ce:	3308      	adds	r3, #8
 801d1d0:	681b      	ldr	r3, [r3, #0]
 801d1d2:	4013      	ands	r3, r2
 801d1d4:	2b00      	cmp	r3, #0
 801d1d6:	d10d      	bne.n	801d1f4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801d1d8:	683b      	ldr	r3, [r7, #0]
 801d1da:	3308      	adds	r3, #8
 801d1dc:	681b      	ldr	r3, [r3, #0]
 801d1de:	43da      	mvns	r2, r3
 801d1e0:	687b      	ldr	r3, [r7, #4]
 801d1e2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801d1e4:	683b      	ldr	r3, [r7, #0]
 801d1e6:	3308      	adds	r3, #8
 801d1e8:	681b      	ldr	r3, [r3, #0]
 801d1ea:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801d1ec:	429a      	cmp	r2, r3
 801d1ee:	d101      	bne.n	801d1f4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801d1f0:	2301      	movs	r3, #1
 801d1f2:	e000      	b.n	801d1f6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801d1f4:	2300      	movs	r3, #0
  }
}
 801d1f6:	4618      	mov	r0, r3
 801d1f8:	3714      	adds	r7, #20
 801d1fa:	46bd      	mov	sp, r7
 801d1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d200:	4770      	bx	lr
	...

0801d204 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801d204:	b580      	push	{r7, lr}
 801d206:	b084      	sub	sp, #16
 801d208:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801d20a:	2300      	movs	r3, #0
 801d20c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801d20e:	4b12      	ldr	r3, [pc, #72]	; (801d258 <ip_reass_tmr+0x54>)
 801d210:	681b      	ldr	r3, [r3, #0]
 801d212:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801d214:	e018      	b.n	801d248 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801d216:	68fb      	ldr	r3, [r7, #12]
 801d218:	7fdb      	ldrb	r3, [r3, #31]
 801d21a:	2b00      	cmp	r3, #0
 801d21c:	d00b      	beq.n	801d236 <ip_reass_tmr+0x32>
      r->timer--;
 801d21e:	68fb      	ldr	r3, [r7, #12]
 801d220:	7fdb      	ldrb	r3, [r3, #31]
 801d222:	3b01      	subs	r3, #1
 801d224:	b2da      	uxtb	r2, r3
 801d226:	68fb      	ldr	r3, [r7, #12]
 801d228:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801d22a:	68fb      	ldr	r3, [r7, #12]
 801d22c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801d22e:	68fb      	ldr	r3, [r7, #12]
 801d230:	681b      	ldr	r3, [r3, #0]
 801d232:	60fb      	str	r3, [r7, #12]
 801d234:	e008      	b.n	801d248 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801d236:	68fb      	ldr	r3, [r7, #12]
 801d238:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801d23a:	68fb      	ldr	r3, [r7, #12]
 801d23c:	681b      	ldr	r3, [r3, #0]
 801d23e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801d240:	68b9      	ldr	r1, [r7, #8]
 801d242:	6878      	ldr	r0, [r7, #4]
 801d244:	f000 f80a 	bl	801d25c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801d248:	68fb      	ldr	r3, [r7, #12]
 801d24a:	2b00      	cmp	r3, #0
 801d24c:	d1e3      	bne.n	801d216 <ip_reass_tmr+0x12>
    }
  }
}
 801d24e:	bf00      	nop
 801d250:	bf00      	nop
 801d252:	3710      	adds	r7, #16
 801d254:	46bd      	mov	sp, r7
 801d256:	bd80      	pop	{r7, pc}
 801d258:	2000c33c 	.word	0x2000c33c

0801d25c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801d25c:	b580      	push	{r7, lr}
 801d25e:	b088      	sub	sp, #32
 801d260:	af00      	add	r7, sp, #0
 801d262:	6078      	str	r0, [r7, #4]
 801d264:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801d266:	2300      	movs	r3, #0
 801d268:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801d26a:	683a      	ldr	r2, [r7, #0]
 801d26c:	687b      	ldr	r3, [r7, #4]
 801d26e:	429a      	cmp	r2, r3
 801d270:	d105      	bne.n	801d27e <ip_reass_free_complete_datagram+0x22>
 801d272:	4b45      	ldr	r3, [pc, #276]	; (801d388 <ip_reass_free_complete_datagram+0x12c>)
 801d274:	22ab      	movs	r2, #171	; 0xab
 801d276:	4945      	ldr	r1, [pc, #276]	; (801d38c <ip_reass_free_complete_datagram+0x130>)
 801d278:	4845      	ldr	r0, [pc, #276]	; (801d390 <ip_reass_free_complete_datagram+0x134>)
 801d27a:	f001 f82d 	bl	801e2d8 <printf>
  if (prev != NULL) {
 801d27e:	683b      	ldr	r3, [r7, #0]
 801d280:	2b00      	cmp	r3, #0
 801d282:	d00a      	beq.n	801d29a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801d284:	683b      	ldr	r3, [r7, #0]
 801d286:	681b      	ldr	r3, [r3, #0]
 801d288:	687a      	ldr	r2, [r7, #4]
 801d28a:	429a      	cmp	r2, r3
 801d28c:	d005      	beq.n	801d29a <ip_reass_free_complete_datagram+0x3e>
 801d28e:	4b3e      	ldr	r3, [pc, #248]	; (801d388 <ip_reass_free_complete_datagram+0x12c>)
 801d290:	22ad      	movs	r2, #173	; 0xad
 801d292:	4940      	ldr	r1, [pc, #256]	; (801d394 <ip_reass_free_complete_datagram+0x138>)
 801d294:	483e      	ldr	r0, [pc, #248]	; (801d390 <ip_reass_free_complete_datagram+0x134>)
 801d296:	f001 f81f 	bl	801e2d8 <printf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801d29a:	687b      	ldr	r3, [r7, #4]
 801d29c:	685b      	ldr	r3, [r3, #4]
 801d29e:	685b      	ldr	r3, [r3, #4]
 801d2a0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801d2a2:	697b      	ldr	r3, [r7, #20]
 801d2a4:	889b      	ldrh	r3, [r3, #4]
 801d2a6:	b29b      	uxth	r3, r3
 801d2a8:	2b00      	cmp	r3, #0
 801d2aa:	d12a      	bne.n	801d302 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801d2ac:	687b      	ldr	r3, [r7, #4]
 801d2ae:	685b      	ldr	r3, [r3, #4]
 801d2b0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801d2b2:	697b      	ldr	r3, [r7, #20]
 801d2b4:	681a      	ldr	r2, [r3, #0]
 801d2b6:	687b      	ldr	r3, [r7, #4]
 801d2b8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801d2ba:	69bb      	ldr	r3, [r7, #24]
 801d2bc:	6858      	ldr	r0, [r3, #4]
 801d2be:	687b      	ldr	r3, [r7, #4]
 801d2c0:	3308      	adds	r3, #8
 801d2c2:	2214      	movs	r2, #20
 801d2c4:	4619      	mov	r1, r3
 801d2c6:	f000 ffd7 	bl	801e278 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801d2ca:	2101      	movs	r1, #1
 801d2cc:	69b8      	ldr	r0, [r7, #24]
 801d2ce:	f7ff fc29 	bl	801cb24 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801d2d2:	69b8      	ldr	r0, [r7, #24]
 801d2d4:	f7f6 fb82 	bl	80139dc <pbuf_clen>
 801d2d8:	4603      	mov	r3, r0
 801d2da:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801d2dc:	8bfa      	ldrh	r2, [r7, #30]
 801d2de:	8a7b      	ldrh	r3, [r7, #18]
 801d2e0:	4413      	add	r3, r2
 801d2e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d2e6:	db05      	blt.n	801d2f4 <ip_reass_free_complete_datagram+0x98>
 801d2e8:	4b27      	ldr	r3, [pc, #156]	; (801d388 <ip_reass_free_complete_datagram+0x12c>)
 801d2ea:	22bc      	movs	r2, #188	; 0xbc
 801d2ec:	492a      	ldr	r1, [pc, #168]	; (801d398 <ip_reass_free_complete_datagram+0x13c>)
 801d2ee:	4828      	ldr	r0, [pc, #160]	; (801d390 <ip_reass_free_complete_datagram+0x134>)
 801d2f0:	f000 fff2 	bl	801e2d8 <printf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801d2f4:	8bfa      	ldrh	r2, [r7, #30]
 801d2f6:	8a7b      	ldrh	r3, [r7, #18]
 801d2f8:	4413      	add	r3, r2
 801d2fa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801d2fc:	69b8      	ldr	r0, [r7, #24]
 801d2fe:	f7f6 fadf 	bl	80138c0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801d302:	687b      	ldr	r3, [r7, #4]
 801d304:	685b      	ldr	r3, [r3, #4]
 801d306:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801d308:	e01f      	b.n	801d34a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801d30a:	69bb      	ldr	r3, [r7, #24]
 801d30c:	685b      	ldr	r3, [r3, #4]
 801d30e:	617b      	str	r3, [r7, #20]
    pcur = p;
 801d310:	69bb      	ldr	r3, [r7, #24]
 801d312:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801d314:	697b      	ldr	r3, [r7, #20]
 801d316:	681b      	ldr	r3, [r3, #0]
 801d318:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801d31a:	68f8      	ldr	r0, [r7, #12]
 801d31c:	f7f6 fb5e 	bl	80139dc <pbuf_clen>
 801d320:	4603      	mov	r3, r0
 801d322:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801d324:	8bfa      	ldrh	r2, [r7, #30]
 801d326:	8a7b      	ldrh	r3, [r7, #18]
 801d328:	4413      	add	r3, r2
 801d32a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d32e:	db05      	blt.n	801d33c <ip_reass_free_complete_datagram+0xe0>
 801d330:	4b15      	ldr	r3, [pc, #84]	; (801d388 <ip_reass_free_complete_datagram+0x12c>)
 801d332:	22cc      	movs	r2, #204	; 0xcc
 801d334:	4918      	ldr	r1, [pc, #96]	; (801d398 <ip_reass_free_complete_datagram+0x13c>)
 801d336:	4816      	ldr	r0, [pc, #88]	; (801d390 <ip_reass_free_complete_datagram+0x134>)
 801d338:	f000 ffce 	bl	801e2d8 <printf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801d33c:	8bfa      	ldrh	r2, [r7, #30]
 801d33e:	8a7b      	ldrh	r3, [r7, #18]
 801d340:	4413      	add	r3, r2
 801d342:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801d344:	68f8      	ldr	r0, [r7, #12]
 801d346:	f7f6 fabb 	bl	80138c0 <pbuf_free>
  while (p != NULL) {
 801d34a:	69bb      	ldr	r3, [r7, #24]
 801d34c:	2b00      	cmp	r3, #0
 801d34e:	d1dc      	bne.n	801d30a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801d350:	6839      	ldr	r1, [r7, #0]
 801d352:	6878      	ldr	r0, [r7, #4]
 801d354:	f000 f8c2 	bl	801d4dc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801d358:	4b10      	ldr	r3, [pc, #64]	; (801d39c <ip_reass_free_complete_datagram+0x140>)
 801d35a:	881b      	ldrh	r3, [r3, #0]
 801d35c:	8bfa      	ldrh	r2, [r7, #30]
 801d35e:	429a      	cmp	r2, r3
 801d360:	d905      	bls.n	801d36e <ip_reass_free_complete_datagram+0x112>
 801d362:	4b09      	ldr	r3, [pc, #36]	; (801d388 <ip_reass_free_complete_datagram+0x12c>)
 801d364:	22d2      	movs	r2, #210	; 0xd2
 801d366:	490e      	ldr	r1, [pc, #56]	; (801d3a0 <ip_reass_free_complete_datagram+0x144>)
 801d368:	4809      	ldr	r0, [pc, #36]	; (801d390 <ip_reass_free_complete_datagram+0x134>)
 801d36a:	f000 ffb5 	bl	801e2d8 <printf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801d36e:	4b0b      	ldr	r3, [pc, #44]	; (801d39c <ip_reass_free_complete_datagram+0x140>)
 801d370:	881a      	ldrh	r2, [r3, #0]
 801d372:	8bfb      	ldrh	r3, [r7, #30]
 801d374:	1ad3      	subs	r3, r2, r3
 801d376:	b29a      	uxth	r2, r3
 801d378:	4b08      	ldr	r3, [pc, #32]	; (801d39c <ip_reass_free_complete_datagram+0x140>)
 801d37a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801d37c:	8bfb      	ldrh	r3, [r7, #30]
}
 801d37e:	4618      	mov	r0, r3
 801d380:	3720      	adds	r7, #32
 801d382:	46bd      	mov	sp, r7
 801d384:	bd80      	pop	{r7, pc}
 801d386:	bf00      	nop
 801d388:	08027128 	.word	0x08027128
 801d38c:	08027164 	.word	0x08027164
 801d390:	08027170 	.word	0x08027170
 801d394:	08027198 	.word	0x08027198
 801d398:	080271ac 	.word	0x080271ac
 801d39c:	2000c340 	.word	0x2000c340
 801d3a0:	080271cc 	.word	0x080271cc

0801d3a4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801d3a4:	b580      	push	{r7, lr}
 801d3a6:	b08a      	sub	sp, #40	; 0x28
 801d3a8:	af00      	add	r7, sp, #0
 801d3aa:	6078      	str	r0, [r7, #4]
 801d3ac:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801d3ae:	2300      	movs	r3, #0
 801d3b0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801d3b2:	2300      	movs	r3, #0
 801d3b4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801d3b6:	2300      	movs	r3, #0
 801d3b8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801d3ba:	2300      	movs	r3, #0
 801d3bc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801d3be:	2300      	movs	r3, #0
 801d3c0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801d3c2:	4b28      	ldr	r3, [pc, #160]	; (801d464 <ip_reass_remove_oldest_datagram+0xc0>)
 801d3c4:	681b      	ldr	r3, [r3, #0]
 801d3c6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801d3c8:	e030      	b.n	801d42c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801d3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d3cc:	695a      	ldr	r2, [r3, #20]
 801d3ce:	687b      	ldr	r3, [r7, #4]
 801d3d0:	68db      	ldr	r3, [r3, #12]
 801d3d2:	429a      	cmp	r2, r3
 801d3d4:	d10c      	bne.n	801d3f0 <ip_reass_remove_oldest_datagram+0x4c>
 801d3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d3d8:	699a      	ldr	r2, [r3, #24]
 801d3da:	687b      	ldr	r3, [r7, #4]
 801d3dc:	691b      	ldr	r3, [r3, #16]
 801d3de:	429a      	cmp	r2, r3
 801d3e0:	d106      	bne.n	801d3f0 <ip_reass_remove_oldest_datagram+0x4c>
 801d3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d3e4:	899a      	ldrh	r2, [r3, #12]
 801d3e6:	687b      	ldr	r3, [r7, #4]
 801d3e8:	889b      	ldrh	r3, [r3, #4]
 801d3ea:	b29b      	uxth	r3, r3
 801d3ec:	429a      	cmp	r2, r3
 801d3ee:	d014      	beq.n	801d41a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801d3f0:	693b      	ldr	r3, [r7, #16]
 801d3f2:	3301      	adds	r3, #1
 801d3f4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801d3f6:	6a3b      	ldr	r3, [r7, #32]
 801d3f8:	2b00      	cmp	r3, #0
 801d3fa:	d104      	bne.n	801d406 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801d3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d3fe:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801d400:	69fb      	ldr	r3, [r7, #28]
 801d402:	61bb      	str	r3, [r7, #24]
 801d404:	e009      	b.n	801d41a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801d406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d408:	7fda      	ldrb	r2, [r3, #31]
 801d40a:	6a3b      	ldr	r3, [r7, #32]
 801d40c:	7fdb      	ldrb	r3, [r3, #31]
 801d40e:	429a      	cmp	r2, r3
 801d410:	d803      	bhi.n	801d41a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801d412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d414:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801d416:	69fb      	ldr	r3, [r7, #28]
 801d418:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801d41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d41c:	681b      	ldr	r3, [r3, #0]
 801d41e:	2b00      	cmp	r3, #0
 801d420:	d001      	beq.n	801d426 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801d422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d424:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801d426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d428:	681b      	ldr	r3, [r3, #0]
 801d42a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801d42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d42e:	2b00      	cmp	r3, #0
 801d430:	d1cb      	bne.n	801d3ca <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801d432:	6a3b      	ldr	r3, [r7, #32]
 801d434:	2b00      	cmp	r3, #0
 801d436:	d008      	beq.n	801d44a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801d438:	69b9      	ldr	r1, [r7, #24]
 801d43a:	6a38      	ldr	r0, [r7, #32]
 801d43c:	f7ff ff0e 	bl	801d25c <ip_reass_free_complete_datagram>
 801d440:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801d442:	697a      	ldr	r2, [r7, #20]
 801d444:	68fb      	ldr	r3, [r7, #12]
 801d446:	4413      	add	r3, r2
 801d448:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801d44a:	697a      	ldr	r2, [r7, #20]
 801d44c:	683b      	ldr	r3, [r7, #0]
 801d44e:	429a      	cmp	r2, r3
 801d450:	da02      	bge.n	801d458 <ip_reass_remove_oldest_datagram+0xb4>
 801d452:	693b      	ldr	r3, [r7, #16]
 801d454:	2b01      	cmp	r3, #1
 801d456:	dcac      	bgt.n	801d3b2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801d458:	697b      	ldr	r3, [r7, #20]
}
 801d45a:	4618      	mov	r0, r3
 801d45c:	3728      	adds	r7, #40	; 0x28
 801d45e:	46bd      	mov	sp, r7
 801d460:	bd80      	pop	{r7, pc}
 801d462:	bf00      	nop
 801d464:	2000c33c 	.word	0x2000c33c

0801d468 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801d468:	b580      	push	{r7, lr}
 801d46a:	b084      	sub	sp, #16
 801d46c:	af00      	add	r7, sp, #0
 801d46e:	6078      	str	r0, [r7, #4]
 801d470:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801d472:	2004      	movs	r0, #4
 801d474:	f7f5 fb22 	bl	8012abc <memp_malloc>
 801d478:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801d47a:	68fb      	ldr	r3, [r7, #12]
 801d47c:	2b00      	cmp	r3, #0
 801d47e:	d110      	bne.n	801d4a2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801d480:	6839      	ldr	r1, [r7, #0]
 801d482:	6878      	ldr	r0, [r7, #4]
 801d484:	f7ff ff8e 	bl	801d3a4 <ip_reass_remove_oldest_datagram>
 801d488:	4602      	mov	r2, r0
 801d48a:	683b      	ldr	r3, [r7, #0]
 801d48c:	4293      	cmp	r3, r2
 801d48e:	dc03      	bgt.n	801d498 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801d490:	2004      	movs	r0, #4
 801d492:	f7f5 fb13 	bl	8012abc <memp_malloc>
 801d496:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801d498:	68fb      	ldr	r3, [r7, #12]
 801d49a:	2b00      	cmp	r3, #0
 801d49c:	d101      	bne.n	801d4a2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801d49e:	2300      	movs	r3, #0
 801d4a0:	e016      	b.n	801d4d0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801d4a2:	2220      	movs	r2, #32
 801d4a4:	2100      	movs	r1, #0
 801d4a6:	68f8      	ldr	r0, [r7, #12]
 801d4a8:	f000 ff0e 	bl	801e2c8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801d4ac:	68fb      	ldr	r3, [r7, #12]
 801d4ae:	220f      	movs	r2, #15
 801d4b0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801d4b2:	4b09      	ldr	r3, [pc, #36]	; (801d4d8 <ip_reass_enqueue_new_datagram+0x70>)
 801d4b4:	681a      	ldr	r2, [r3, #0]
 801d4b6:	68fb      	ldr	r3, [r7, #12]
 801d4b8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801d4ba:	4a07      	ldr	r2, [pc, #28]	; (801d4d8 <ip_reass_enqueue_new_datagram+0x70>)
 801d4bc:	68fb      	ldr	r3, [r7, #12]
 801d4be:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801d4c0:	68fb      	ldr	r3, [r7, #12]
 801d4c2:	3308      	adds	r3, #8
 801d4c4:	2214      	movs	r2, #20
 801d4c6:	6879      	ldr	r1, [r7, #4]
 801d4c8:	4618      	mov	r0, r3
 801d4ca:	f000 fed5 	bl	801e278 <memcpy>
  return ipr;
 801d4ce:	68fb      	ldr	r3, [r7, #12]
}
 801d4d0:	4618      	mov	r0, r3
 801d4d2:	3710      	adds	r7, #16
 801d4d4:	46bd      	mov	sp, r7
 801d4d6:	bd80      	pop	{r7, pc}
 801d4d8:	2000c33c 	.word	0x2000c33c

0801d4dc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801d4dc:	b580      	push	{r7, lr}
 801d4de:	b082      	sub	sp, #8
 801d4e0:	af00      	add	r7, sp, #0
 801d4e2:	6078      	str	r0, [r7, #4]
 801d4e4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801d4e6:	4b10      	ldr	r3, [pc, #64]	; (801d528 <ip_reass_dequeue_datagram+0x4c>)
 801d4e8:	681b      	ldr	r3, [r3, #0]
 801d4ea:	687a      	ldr	r2, [r7, #4]
 801d4ec:	429a      	cmp	r2, r3
 801d4ee:	d104      	bne.n	801d4fa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801d4f0:	687b      	ldr	r3, [r7, #4]
 801d4f2:	681b      	ldr	r3, [r3, #0]
 801d4f4:	4a0c      	ldr	r2, [pc, #48]	; (801d528 <ip_reass_dequeue_datagram+0x4c>)
 801d4f6:	6013      	str	r3, [r2, #0]
 801d4f8:	e00d      	b.n	801d516 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801d4fa:	683b      	ldr	r3, [r7, #0]
 801d4fc:	2b00      	cmp	r3, #0
 801d4fe:	d106      	bne.n	801d50e <ip_reass_dequeue_datagram+0x32>
 801d500:	4b0a      	ldr	r3, [pc, #40]	; (801d52c <ip_reass_dequeue_datagram+0x50>)
 801d502:	f240 1245 	movw	r2, #325	; 0x145
 801d506:	490a      	ldr	r1, [pc, #40]	; (801d530 <ip_reass_dequeue_datagram+0x54>)
 801d508:	480a      	ldr	r0, [pc, #40]	; (801d534 <ip_reass_dequeue_datagram+0x58>)
 801d50a:	f000 fee5 	bl	801e2d8 <printf>
    prev->next = ipr->next;
 801d50e:	687b      	ldr	r3, [r7, #4]
 801d510:	681a      	ldr	r2, [r3, #0]
 801d512:	683b      	ldr	r3, [r7, #0]
 801d514:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801d516:	6879      	ldr	r1, [r7, #4]
 801d518:	2004      	movs	r0, #4
 801d51a:	f7f5 fb21 	bl	8012b60 <memp_free>
}
 801d51e:	bf00      	nop
 801d520:	3708      	adds	r7, #8
 801d522:	46bd      	mov	sp, r7
 801d524:	bd80      	pop	{r7, pc}
 801d526:	bf00      	nop
 801d528:	2000c33c 	.word	0x2000c33c
 801d52c:	08027128 	.word	0x08027128
 801d530:	080271f0 	.word	0x080271f0
 801d534:	08027170 	.word	0x08027170

0801d538 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801d538:	b580      	push	{r7, lr}
 801d53a:	b08c      	sub	sp, #48	; 0x30
 801d53c:	af00      	add	r7, sp, #0
 801d53e:	60f8      	str	r0, [r7, #12]
 801d540:	60b9      	str	r1, [r7, #8]
 801d542:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801d544:	2300      	movs	r3, #0
 801d546:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801d548:	2301      	movs	r3, #1
 801d54a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801d54c:	68bb      	ldr	r3, [r7, #8]
 801d54e:	685b      	ldr	r3, [r3, #4]
 801d550:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801d552:	69fb      	ldr	r3, [r7, #28]
 801d554:	885b      	ldrh	r3, [r3, #2]
 801d556:	b29b      	uxth	r3, r3
 801d558:	4618      	mov	r0, r3
 801d55a:	f7f4 fdf9 	bl	8012150 <lwip_htons>
 801d55e:	4603      	mov	r3, r0
 801d560:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801d562:	69fb      	ldr	r3, [r7, #28]
 801d564:	781b      	ldrb	r3, [r3, #0]
 801d566:	f003 030f 	and.w	r3, r3, #15
 801d56a:	b2db      	uxtb	r3, r3
 801d56c:	009b      	lsls	r3, r3, #2
 801d56e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801d570:	7e7b      	ldrb	r3, [r7, #25]
 801d572:	b29b      	uxth	r3, r3
 801d574:	8b7a      	ldrh	r2, [r7, #26]
 801d576:	429a      	cmp	r2, r3
 801d578:	d202      	bcs.n	801d580 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d57a:	f04f 33ff 	mov.w	r3, #4294967295
 801d57e:	e135      	b.n	801d7ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801d580:	7e7b      	ldrb	r3, [r7, #25]
 801d582:	b29b      	uxth	r3, r3
 801d584:	8b7a      	ldrh	r2, [r7, #26]
 801d586:	1ad3      	subs	r3, r2, r3
 801d588:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801d58a:	69fb      	ldr	r3, [r7, #28]
 801d58c:	88db      	ldrh	r3, [r3, #6]
 801d58e:	b29b      	uxth	r3, r3
 801d590:	4618      	mov	r0, r3
 801d592:	f7f4 fddd 	bl	8012150 <lwip_htons>
 801d596:	4603      	mov	r3, r0
 801d598:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d59c:	b29b      	uxth	r3, r3
 801d59e:	00db      	lsls	r3, r3, #3
 801d5a0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801d5a2:	68bb      	ldr	r3, [r7, #8]
 801d5a4:	685b      	ldr	r3, [r3, #4]
 801d5a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801d5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d5aa:	2200      	movs	r2, #0
 801d5ac:	701a      	strb	r2, [r3, #0]
 801d5ae:	2200      	movs	r2, #0
 801d5b0:	705a      	strb	r2, [r3, #1]
 801d5b2:	2200      	movs	r2, #0
 801d5b4:	709a      	strb	r2, [r3, #2]
 801d5b6:	2200      	movs	r2, #0
 801d5b8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801d5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d5bc:	8afa      	ldrh	r2, [r7, #22]
 801d5be:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801d5c0:	8afa      	ldrh	r2, [r7, #22]
 801d5c2:	8b7b      	ldrh	r3, [r7, #26]
 801d5c4:	4413      	add	r3, r2
 801d5c6:	b29a      	uxth	r2, r3
 801d5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d5ca:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801d5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d5ce:	88db      	ldrh	r3, [r3, #6]
 801d5d0:	b29b      	uxth	r3, r3
 801d5d2:	8afa      	ldrh	r2, [r7, #22]
 801d5d4:	429a      	cmp	r2, r3
 801d5d6:	d902      	bls.n	801d5de <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d5d8:	f04f 33ff 	mov.w	r3, #4294967295
 801d5dc:	e106      	b.n	801d7ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801d5de:	68fb      	ldr	r3, [r7, #12]
 801d5e0:	685b      	ldr	r3, [r3, #4]
 801d5e2:	627b      	str	r3, [r7, #36]	; 0x24
 801d5e4:	e068      	b.n	801d6b8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801d5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5e8:	685b      	ldr	r3, [r3, #4]
 801d5ea:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801d5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d5ee:	889b      	ldrh	r3, [r3, #4]
 801d5f0:	b29a      	uxth	r2, r3
 801d5f2:	693b      	ldr	r3, [r7, #16]
 801d5f4:	889b      	ldrh	r3, [r3, #4]
 801d5f6:	b29b      	uxth	r3, r3
 801d5f8:	429a      	cmp	r2, r3
 801d5fa:	d235      	bcs.n	801d668 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801d5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d5fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d600:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801d602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d604:	2b00      	cmp	r3, #0
 801d606:	d020      	beq.n	801d64a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801d608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d60a:	889b      	ldrh	r3, [r3, #4]
 801d60c:	b29a      	uxth	r2, r3
 801d60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d610:	88db      	ldrh	r3, [r3, #6]
 801d612:	b29b      	uxth	r3, r3
 801d614:	429a      	cmp	r2, r3
 801d616:	d307      	bcc.n	801d628 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801d618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d61a:	88db      	ldrh	r3, [r3, #6]
 801d61c:	b29a      	uxth	r2, r3
 801d61e:	693b      	ldr	r3, [r7, #16]
 801d620:	889b      	ldrh	r3, [r3, #4]
 801d622:	b29b      	uxth	r3, r3
 801d624:	429a      	cmp	r2, r3
 801d626:	d902      	bls.n	801d62e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d628:	f04f 33ff 	mov.w	r3, #4294967295
 801d62c:	e0de      	b.n	801d7ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801d62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d630:	68ba      	ldr	r2, [r7, #8]
 801d632:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801d634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d636:	88db      	ldrh	r3, [r3, #6]
 801d638:	b29a      	uxth	r2, r3
 801d63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d63c:	889b      	ldrh	r3, [r3, #4]
 801d63e:	b29b      	uxth	r3, r3
 801d640:	429a      	cmp	r2, r3
 801d642:	d03d      	beq.n	801d6c0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801d644:	2300      	movs	r3, #0
 801d646:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801d648:	e03a      	b.n	801d6c0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801d64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d64c:	88db      	ldrh	r3, [r3, #6]
 801d64e:	b29a      	uxth	r2, r3
 801d650:	693b      	ldr	r3, [r7, #16]
 801d652:	889b      	ldrh	r3, [r3, #4]
 801d654:	b29b      	uxth	r3, r3
 801d656:	429a      	cmp	r2, r3
 801d658:	d902      	bls.n	801d660 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d65a:	f04f 33ff 	mov.w	r3, #4294967295
 801d65e:	e0c5      	b.n	801d7ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801d660:	68fb      	ldr	r3, [r7, #12]
 801d662:	68ba      	ldr	r2, [r7, #8]
 801d664:	605a      	str	r2, [r3, #4]
      break;
 801d666:	e02b      	b.n	801d6c0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801d668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d66a:	889b      	ldrh	r3, [r3, #4]
 801d66c:	b29a      	uxth	r2, r3
 801d66e:	693b      	ldr	r3, [r7, #16]
 801d670:	889b      	ldrh	r3, [r3, #4]
 801d672:	b29b      	uxth	r3, r3
 801d674:	429a      	cmp	r2, r3
 801d676:	d102      	bne.n	801d67e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d678:	f04f 33ff 	mov.w	r3, #4294967295
 801d67c:	e0b6      	b.n	801d7ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801d67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d680:	889b      	ldrh	r3, [r3, #4]
 801d682:	b29a      	uxth	r2, r3
 801d684:	693b      	ldr	r3, [r7, #16]
 801d686:	88db      	ldrh	r3, [r3, #6]
 801d688:	b29b      	uxth	r3, r3
 801d68a:	429a      	cmp	r2, r3
 801d68c:	d202      	bcs.n	801d694 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d68e:	f04f 33ff 	mov.w	r3, #4294967295
 801d692:	e0ab      	b.n	801d7ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801d694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d696:	2b00      	cmp	r3, #0
 801d698:	d009      	beq.n	801d6ae <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801d69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d69c:	88db      	ldrh	r3, [r3, #6]
 801d69e:	b29a      	uxth	r2, r3
 801d6a0:	693b      	ldr	r3, [r7, #16]
 801d6a2:	889b      	ldrh	r3, [r3, #4]
 801d6a4:	b29b      	uxth	r3, r3
 801d6a6:	429a      	cmp	r2, r3
 801d6a8:	d001      	beq.n	801d6ae <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801d6aa:	2300      	movs	r3, #0
 801d6ac:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801d6ae:	693b      	ldr	r3, [r7, #16]
 801d6b0:	681b      	ldr	r3, [r3, #0]
 801d6b2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801d6b4:	693b      	ldr	r3, [r7, #16]
 801d6b6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801d6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d6ba:	2b00      	cmp	r3, #0
 801d6bc:	d193      	bne.n	801d5e6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801d6be:	e000      	b.n	801d6c2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801d6c0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801d6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d6c4:	2b00      	cmp	r3, #0
 801d6c6:	d12d      	bne.n	801d724 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801d6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d6ca:	2b00      	cmp	r3, #0
 801d6cc:	d01c      	beq.n	801d708 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801d6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d6d0:	88db      	ldrh	r3, [r3, #6]
 801d6d2:	b29a      	uxth	r2, r3
 801d6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d6d6:	889b      	ldrh	r3, [r3, #4]
 801d6d8:	b29b      	uxth	r3, r3
 801d6da:	429a      	cmp	r2, r3
 801d6dc:	d906      	bls.n	801d6ec <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801d6de:	4b45      	ldr	r3, [pc, #276]	; (801d7f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d6e0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801d6e4:	4944      	ldr	r1, [pc, #272]	; (801d7f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801d6e6:	4845      	ldr	r0, [pc, #276]	; (801d7fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d6e8:	f000 fdf6 	bl	801e2d8 <printf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801d6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d6ee:	68ba      	ldr	r2, [r7, #8]
 801d6f0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801d6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d6f4:	88db      	ldrh	r3, [r3, #6]
 801d6f6:	b29a      	uxth	r2, r3
 801d6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d6fa:	889b      	ldrh	r3, [r3, #4]
 801d6fc:	b29b      	uxth	r3, r3
 801d6fe:	429a      	cmp	r2, r3
 801d700:	d010      	beq.n	801d724 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801d702:	2300      	movs	r3, #0
 801d704:	623b      	str	r3, [r7, #32]
 801d706:	e00d      	b.n	801d724 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801d708:	68fb      	ldr	r3, [r7, #12]
 801d70a:	685b      	ldr	r3, [r3, #4]
 801d70c:	2b00      	cmp	r3, #0
 801d70e:	d006      	beq.n	801d71e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801d710:	4b38      	ldr	r3, [pc, #224]	; (801d7f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d712:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801d716:	493a      	ldr	r1, [pc, #232]	; (801d800 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801d718:	4838      	ldr	r0, [pc, #224]	; (801d7fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d71a:	f000 fddd 	bl	801e2d8 <printf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801d71e:	68fb      	ldr	r3, [r7, #12]
 801d720:	68ba      	ldr	r2, [r7, #8]
 801d722:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801d724:	687b      	ldr	r3, [r7, #4]
 801d726:	2b00      	cmp	r3, #0
 801d728:	d105      	bne.n	801d736 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801d72a:	68fb      	ldr	r3, [r7, #12]
 801d72c:	7f9b      	ldrb	r3, [r3, #30]
 801d72e:	f003 0301 	and.w	r3, r3, #1
 801d732:	2b00      	cmp	r3, #0
 801d734:	d059      	beq.n	801d7ea <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801d736:	6a3b      	ldr	r3, [r7, #32]
 801d738:	2b00      	cmp	r3, #0
 801d73a:	d04f      	beq.n	801d7dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801d73c:	68fb      	ldr	r3, [r7, #12]
 801d73e:	685b      	ldr	r3, [r3, #4]
 801d740:	2b00      	cmp	r3, #0
 801d742:	d006      	beq.n	801d752 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801d744:	68fb      	ldr	r3, [r7, #12]
 801d746:	685b      	ldr	r3, [r3, #4]
 801d748:	685b      	ldr	r3, [r3, #4]
 801d74a:	889b      	ldrh	r3, [r3, #4]
 801d74c:	b29b      	uxth	r3, r3
 801d74e:	2b00      	cmp	r3, #0
 801d750:	d002      	beq.n	801d758 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801d752:	2300      	movs	r3, #0
 801d754:	623b      	str	r3, [r7, #32]
 801d756:	e041      	b.n	801d7dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801d758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d75a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801d75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d75e:	681b      	ldr	r3, [r3, #0]
 801d760:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801d762:	e012      	b.n	801d78a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801d764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d766:	685b      	ldr	r3, [r3, #4]
 801d768:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801d76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d76c:	88db      	ldrh	r3, [r3, #6]
 801d76e:	b29a      	uxth	r2, r3
 801d770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d772:	889b      	ldrh	r3, [r3, #4]
 801d774:	b29b      	uxth	r3, r3
 801d776:	429a      	cmp	r2, r3
 801d778:	d002      	beq.n	801d780 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801d77a:	2300      	movs	r3, #0
 801d77c:	623b      	str	r3, [r7, #32]
            break;
 801d77e:	e007      	b.n	801d790 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801d780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d782:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801d784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d786:	681b      	ldr	r3, [r3, #0]
 801d788:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801d78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d78c:	2b00      	cmp	r3, #0
 801d78e:	d1e9      	bne.n	801d764 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801d790:	6a3b      	ldr	r3, [r7, #32]
 801d792:	2b00      	cmp	r3, #0
 801d794:	d022      	beq.n	801d7dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801d796:	68fb      	ldr	r3, [r7, #12]
 801d798:	685b      	ldr	r3, [r3, #4]
 801d79a:	2b00      	cmp	r3, #0
 801d79c:	d106      	bne.n	801d7ac <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801d79e:	4b15      	ldr	r3, [pc, #84]	; (801d7f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d7a0:	f240 12df 	movw	r2, #479	; 0x1df
 801d7a4:	4917      	ldr	r1, [pc, #92]	; (801d804 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801d7a6:	4815      	ldr	r0, [pc, #84]	; (801d7fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d7a8:	f000 fd96 	bl	801e2d8 <printf>
          LWIP_ASSERT("sanity check",
 801d7ac:	68fb      	ldr	r3, [r7, #12]
 801d7ae:	685b      	ldr	r3, [r3, #4]
 801d7b0:	685b      	ldr	r3, [r3, #4]
 801d7b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d7b4:	429a      	cmp	r2, r3
 801d7b6:	d106      	bne.n	801d7c6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801d7b8:	4b0e      	ldr	r3, [pc, #56]	; (801d7f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d7ba:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801d7be:	4911      	ldr	r1, [pc, #68]	; (801d804 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801d7c0:	480e      	ldr	r0, [pc, #56]	; (801d7fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d7c2:	f000 fd89 	bl	801e2d8 <printf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801d7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7c8:	681b      	ldr	r3, [r3, #0]
 801d7ca:	2b00      	cmp	r3, #0
 801d7cc:	d006      	beq.n	801d7dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801d7ce:	4b09      	ldr	r3, [pc, #36]	; (801d7f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d7d0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801d7d4:	490c      	ldr	r1, [pc, #48]	; (801d808 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801d7d6:	4809      	ldr	r0, [pc, #36]	; (801d7fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d7d8:	f000 fd7e 	bl	801e2d8 <printf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801d7dc:	6a3b      	ldr	r3, [r7, #32]
 801d7de:	2b00      	cmp	r3, #0
 801d7e0:	bf14      	ite	ne
 801d7e2:	2301      	movne	r3, #1
 801d7e4:	2300      	moveq	r3, #0
 801d7e6:	b2db      	uxtb	r3, r3
 801d7e8:	e000      	b.n	801d7ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801d7ea:	2300      	movs	r3, #0
}
 801d7ec:	4618      	mov	r0, r3
 801d7ee:	3730      	adds	r7, #48	; 0x30
 801d7f0:	46bd      	mov	sp, r7
 801d7f2:	bd80      	pop	{r7, pc}
 801d7f4:	08027128 	.word	0x08027128
 801d7f8:	0802720c 	.word	0x0802720c
 801d7fc:	08027170 	.word	0x08027170
 801d800:	0802722c 	.word	0x0802722c
 801d804:	08027264 	.word	0x08027264
 801d808:	08027274 	.word	0x08027274

0801d80c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801d80c:	b580      	push	{r7, lr}
 801d80e:	b08e      	sub	sp, #56	; 0x38
 801d810:	af00      	add	r7, sp, #0
 801d812:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801d814:	687b      	ldr	r3, [r7, #4]
 801d816:	685b      	ldr	r3, [r3, #4]
 801d818:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801d81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d81c:	781b      	ldrb	r3, [r3, #0]
 801d81e:	f003 030f 	and.w	r3, r3, #15
 801d822:	b2db      	uxtb	r3, r3
 801d824:	009b      	lsls	r3, r3, #2
 801d826:	b2db      	uxtb	r3, r3
 801d828:	2b14      	cmp	r3, #20
 801d82a:	f040 8171 	bne.w	801db10 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801d82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d830:	88db      	ldrh	r3, [r3, #6]
 801d832:	b29b      	uxth	r3, r3
 801d834:	4618      	mov	r0, r3
 801d836:	f7f4 fc8b 	bl	8012150 <lwip_htons>
 801d83a:	4603      	mov	r3, r0
 801d83c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d840:	b29b      	uxth	r3, r3
 801d842:	00db      	lsls	r3, r3, #3
 801d844:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801d846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d848:	885b      	ldrh	r3, [r3, #2]
 801d84a:	b29b      	uxth	r3, r3
 801d84c:	4618      	mov	r0, r3
 801d84e:	f7f4 fc7f 	bl	8012150 <lwip_htons>
 801d852:	4603      	mov	r3, r0
 801d854:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801d856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d858:	781b      	ldrb	r3, [r3, #0]
 801d85a:	f003 030f 	and.w	r3, r3, #15
 801d85e:	b2db      	uxtb	r3, r3
 801d860:	009b      	lsls	r3, r3, #2
 801d862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801d866:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801d86a:	b29b      	uxth	r3, r3
 801d86c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d86e:	429a      	cmp	r2, r3
 801d870:	f0c0 8150 	bcc.w	801db14 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801d874:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801d878:	b29b      	uxth	r3, r3
 801d87a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d87c:	1ad3      	subs	r3, r2, r3
 801d87e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801d880:	6878      	ldr	r0, [r7, #4]
 801d882:	f7f6 f8ab 	bl	80139dc <pbuf_clen>
 801d886:	4603      	mov	r3, r0
 801d888:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801d88a:	4b8c      	ldr	r3, [pc, #560]	; (801dabc <ip4_reass+0x2b0>)
 801d88c:	881b      	ldrh	r3, [r3, #0]
 801d88e:	461a      	mov	r2, r3
 801d890:	8c3b      	ldrh	r3, [r7, #32]
 801d892:	4413      	add	r3, r2
 801d894:	2b0a      	cmp	r3, #10
 801d896:	dd10      	ble.n	801d8ba <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801d898:	8c3b      	ldrh	r3, [r7, #32]
 801d89a:	4619      	mov	r1, r3
 801d89c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d89e:	f7ff fd81 	bl	801d3a4 <ip_reass_remove_oldest_datagram>
 801d8a2:	4603      	mov	r3, r0
 801d8a4:	2b00      	cmp	r3, #0
 801d8a6:	f000 8137 	beq.w	801db18 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801d8aa:	4b84      	ldr	r3, [pc, #528]	; (801dabc <ip4_reass+0x2b0>)
 801d8ac:	881b      	ldrh	r3, [r3, #0]
 801d8ae:	461a      	mov	r2, r3
 801d8b0:	8c3b      	ldrh	r3, [r7, #32]
 801d8b2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801d8b4:	2b0a      	cmp	r3, #10
 801d8b6:	f300 812f 	bgt.w	801db18 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801d8ba:	4b81      	ldr	r3, [pc, #516]	; (801dac0 <ip4_reass+0x2b4>)
 801d8bc:	681b      	ldr	r3, [r3, #0]
 801d8be:	633b      	str	r3, [r7, #48]	; 0x30
 801d8c0:	e015      	b.n	801d8ee <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801d8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d8c4:	695a      	ldr	r2, [r3, #20]
 801d8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d8c8:	68db      	ldr	r3, [r3, #12]
 801d8ca:	429a      	cmp	r2, r3
 801d8cc:	d10c      	bne.n	801d8e8 <ip4_reass+0xdc>
 801d8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d8d0:	699a      	ldr	r2, [r3, #24]
 801d8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d8d4:	691b      	ldr	r3, [r3, #16]
 801d8d6:	429a      	cmp	r2, r3
 801d8d8:	d106      	bne.n	801d8e8 <ip4_reass+0xdc>
 801d8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d8dc:	899a      	ldrh	r2, [r3, #12]
 801d8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d8e0:	889b      	ldrh	r3, [r3, #4]
 801d8e2:	b29b      	uxth	r3, r3
 801d8e4:	429a      	cmp	r2, r3
 801d8e6:	d006      	beq.n	801d8f6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801d8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d8ea:	681b      	ldr	r3, [r3, #0]
 801d8ec:	633b      	str	r3, [r7, #48]	; 0x30
 801d8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d8f0:	2b00      	cmp	r3, #0
 801d8f2:	d1e6      	bne.n	801d8c2 <ip4_reass+0xb6>
 801d8f4:	e000      	b.n	801d8f8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801d8f6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801d8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d8fa:	2b00      	cmp	r3, #0
 801d8fc:	d109      	bne.n	801d912 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801d8fe:	8c3b      	ldrh	r3, [r7, #32]
 801d900:	4619      	mov	r1, r3
 801d902:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d904:	f7ff fdb0 	bl	801d468 <ip_reass_enqueue_new_datagram>
 801d908:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801d90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d90c:	2b00      	cmp	r3, #0
 801d90e:	d11c      	bne.n	801d94a <ip4_reass+0x13e>
      goto nullreturn;
 801d910:	e105      	b.n	801db1e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801d912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d914:	88db      	ldrh	r3, [r3, #6]
 801d916:	b29b      	uxth	r3, r3
 801d918:	4618      	mov	r0, r3
 801d91a:	f7f4 fc19 	bl	8012150 <lwip_htons>
 801d91e:	4603      	mov	r3, r0
 801d920:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d924:	2b00      	cmp	r3, #0
 801d926:	d110      	bne.n	801d94a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801d928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d92a:	89db      	ldrh	r3, [r3, #14]
 801d92c:	4618      	mov	r0, r3
 801d92e:	f7f4 fc0f 	bl	8012150 <lwip_htons>
 801d932:	4603      	mov	r3, r0
 801d934:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801d938:	2b00      	cmp	r3, #0
 801d93a:	d006      	beq.n	801d94a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801d93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d93e:	3308      	adds	r3, #8
 801d940:	2214      	movs	r2, #20
 801d942:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801d944:	4618      	mov	r0, r3
 801d946:	f000 fc97 	bl	801e278 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801d94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d94c:	88db      	ldrh	r3, [r3, #6]
 801d94e:	b29b      	uxth	r3, r3
 801d950:	f003 0320 	and.w	r3, r3, #32
 801d954:	2b00      	cmp	r3, #0
 801d956:	bf0c      	ite	eq
 801d958:	2301      	moveq	r3, #1
 801d95a:	2300      	movne	r3, #0
 801d95c:	b2db      	uxtb	r3, r3
 801d95e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801d960:	69fb      	ldr	r3, [r7, #28]
 801d962:	2b00      	cmp	r3, #0
 801d964:	d00e      	beq.n	801d984 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801d966:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801d968:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d96a:	4413      	add	r3, r2
 801d96c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801d96e:	8b7a      	ldrh	r2, [r7, #26]
 801d970:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801d972:	429a      	cmp	r2, r3
 801d974:	f0c0 80a0 	bcc.w	801dab8 <ip4_reass+0x2ac>
 801d978:	8b7b      	ldrh	r3, [r7, #26]
 801d97a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801d97e:	4293      	cmp	r3, r2
 801d980:	f200 809a 	bhi.w	801dab8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801d984:	69fa      	ldr	r2, [r7, #28]
 801d986:	6879      	ldr	r1, [r7, #4]
 801d988:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d98a:	f7ff fdd5 	bl	801d538 <ip_reass_chain_frag_into_datagram_and_validate>
 801d98e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801d990:	697b      	ldr	r3, [r7, #20]
 801d992:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d996:	f000 809b 	beq.w	801dad0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801d99a:	4b48      	ldr	r3, [pc, #288]	; (801dabc <ip4_reass+0x2b0>)
 801d99c:	881a      	ldrh	r2, [r3, #0]
 801d99e:	8c3b      	ldrh	r3, [r7, #32]
 801d9a0:	4413      	add	r3, r2
 801d9a2:	b29a      	uxth	r2, r3
 801d9a4:	4b45      	ldr	r3, [pc, #276]	; (801dabc <ip4_reass+0x2b0>)
 801d9a6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801d9a8:	69fb      	ldr	r3, [r7, #28]
 801d9aa:	2b00      	cmp	r3, #0
 801d9ac:	d00d      	beq.n	801d9ca <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801d9ae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801d9b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d9b2:	4413      	add	r3, r2
 801d9b4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801d9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d9b8:	8a7a      	ldrh	r2, [r7, #18]
 801d9ba:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801d9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d9be:	7f9b      	ldrb	r3, [r3, #30]
 801d9c0:	f043 0301 	orr.w	r3, r3, #1
 801d9c4:	b2da      	uxtb	r2, r3
 801d9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d9c8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801d9ca:	697b      	ldr	r3, [r7, #20]
 801d9cc:	2b01      	cmp	r3, #1
 801d9ce:	d171      	bne.n	801dab4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801d9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d9d2:	8b9b      	ldrh	r3, [r3, #28]
 801d9d4:	3314      	adds	r3, #20
 801d9d6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801d9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d9da:	685b      	ldr	r3, [r3, #4]
 801d9dc:	685b      	ldr	r3, [r3, #4]
 801d9de:	681b      	ldr	r3, [r3, #0]
 801d9e0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801d9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d9e4:	685b      	ldr	r3, [r3, #4]
 801d9e6:	685b      	ldr	r3, [r3, #4]
 801d9e8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801d9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d9ec:	3308      	adds	r3, #8
 801d9ee:	2214      	movs	r2, #20
 801d9f0:	4619      	mov	r1, r3
 801d9f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d9f4:	f000 fc40 	bl	801e278 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801d9f8:	8a3b      	ldrh	r3, [r7, #16]
 801d9fa:	4618      	mov	r0, r3
 801d9fc:	f7f4 fba8 	bl	8012150 <lwip_htons>
 801da00:	4603      	mov	r3, r0
 801da02:	461a      	mov	r2, r3
 801da04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801da06:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801da08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801da0a:	2200      	movs	r2, #0
 801da0c:	719a      	strb	r2, [r3, #6]
 801da0e:	2200      	movs	r2, #0
 801da10:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801da12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801da14:	2200      	movs	r2, #0
 801da16:	729a      	strb	r2, [r3, #10]
 801da18:	2200      	movs	r2, #0
 801da1a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801da1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801da1e:	685b      	ldr	r3, [r3, #4]
 801da20:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801da22:	e00d      	b.n	801da40 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801da24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801da26:	685b      	ldr	r3, [r3, #4]
 801da28:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801da2a:	2114      	movs	r1, #20
 801da2c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801da2e:	f7f5 fec1 	bl	80137b4 <pbuf_remove_header>
      pbuf_cat(p, r);
 801da32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801da34:	6878      	ldr	r0, [r7, #4]
 801da36:	f7f6 f811 	bl	8013a5c <pbuf_cat>
      r = iprh->next_pbuf;
 801da3a:	68fb      	ldr	r3, [r7, #12]
 801da3c:	681b      	ldr	r3, [r3, #0]
 801da3e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801da40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801da42:	2b00      	cmp	r3, #0
 801da44:	d1ee      	bne.n	801da24 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801da46:	4b1e      	ldr	r3, [pc, #120]	; (801dac0 <ip4_reass+0x2b4>)
 801da48:	681b      	ldr	r3, [r3, #0]
 801da4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801da4c:	429a      	cmp	r2, r3
 801da4e:	d102      	bne.n	801da56 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801da50:	2300      	movs	r3, #0
 801da52:	62fb      	str	r3, [r7, #44]	; 0x2c
 801da54:	e010      	b.n	801da78 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801da56:	4b1a      	ldr	r3, [pc, #104]	; (801dac0 <ip4_reass+0x2b4>)
 801da58:	681b      	ldr	r3, [r3, #0]
 801da5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801da5c:	e007      	b.n	801da6e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801da5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da60:	681b      	ldr	r3, [r3, #0]
 801da62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801da64:	429a      	cmp	r2, r3
 801da66:	d006      	beq.n	801da76 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801da68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da6a:	681b      	ldr	r3, [r3, #0]
 801da6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801da6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da70:	2b00      	cmp	r3, #0
 801da72:	d1f4      	bne.n	801da5e <ip4_reass+0x252>
 801da74:	e000      	b.n	801da78 <ip4_reass+0x26c>
          break;
 801da76:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801da78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801da7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801da7c:	f7ff fd2e 	bl	801d4dc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801da80:	6878      	ldr	r0, [r7, #4]
 801da82:	f7f5 ffab 	bl	80139dc <pbuf_clen>
 801da86:	4603      	mov	r3, r0
 801da88:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801da8a:	4b0c      	ldr	r3, [pc, #48]	; (801dabc <ip4_reass+0x2b0>)
 801da8c:	881b      	ldrh	r3, [r3, #0]
 801da8e:	8c3a      	ldrh	r2, [r7, #32]
 801da90:	429a      	cmp	r2, r3
 801da92:	d906      	bls.n	801daa2 <ip4_reass+0x296>
 801da94:	4b0b      	ldr	r3, [pc, #44]	; (801dac4 <ip4_reass+0x2b8>)
 801da96:	f240 229b 	movw	r2, #667	; 0x29b
 801da9a:	490b      	ldr	r1, [pc, #44]	; (801dac8 <ip4_reass+0x2bc>)
 801da9c:	480b      	ldr	r0, [pc, #44]	; (801dacc <ip4_reass+0x2c0>)
 801da9e:	f000 fc1b 	bl	801e2d8 <printf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801daa2:	4b06      	ldr	r3, [pc, #24]	; (801dabc <ip4_reass+0x2b0>)
 801daa4:	881a      	ldrh	r2, [r3, #0]
 801daa6:	8c3b      	ldrh	r3, [r7, #32]
 801daa8:	1ad3      	subs	r3, r2, r3
 801daaa:	b29a      	uxth	r2, r3
 801daac:	4b03      	ldr	r3, [pc, #12]	; (801dabc <ip4_reass+0x2b0>)
 801daae:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801dab0:	687b      	ldr	r3, [r7, #4]
 801dab2:	e038      	b.n	801db26 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801dab4:	2300      	movs	r3, #0
 801dab6:	e036      	b.n	801db26 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801dab8:	bf00      	nop
 801daba:	e00a      	b.n	801dad2 <ip4_reass+0x2c6>
 801dabc:	2000c340 	.word	0x2000c340
 801dac0:	2000c33c 	.word	0x2000c33c
 801dac4:	08027128 	.word	0x08027128
 801dac8:	08027298 	.word	0x08027298
 801dacc:	08027170 	.word	0x08027170
    goto nullreturn_ipr;
 801dad0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801dad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dad4:	2b00      	cmp	r3, #0
 801dad6:	d106      	bne.n	801dae6 <ip4_reass+0x2da>
 801dad8:	4b15      	ldr	r3, [pc, #84]	; (801db30 <ip4_reass+0x324>)
 801dada:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801dade:	4915      	ldr	r1, [pc, #84]	; (801db34 <ip4_reass+0x328>)
 801dae0:	4815      	ldr	r0, [pc, #84]	; (801db38 <ip4_reass+0x32c>)
 801dae2:	f000 fbf9 	bl	801e2d8 <printf>
  if (ipr->p == NULL) {
 801dae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dae8:	685b      	ldr	r3, [r3, #4]
 801daea:	2b00      	cmp	r3, #0
 801daec:	d116      	bne.n	801db1c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801daee:	4b13      	ldr	r3, [pc, #76]	; (801db3c <ip4_reass+0x330>)
 801daf0:	681b      	ldr	r3, [r3, #0]
 801daf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801daf4:	429a      	cmp	r2, r3
 801daf6:	d006      	beq.n	801db06 <ip4_reass+0x2fa>
 801daf8:	4b0d      	ldr	r3, [pc, #52]	; (801db30 <ip4_reass+0x324>)
 801dafa:	f240 22ab 	movw	r2, #683	; 0x2ab
 801dafe:	4910      	ldr	r1, [pc, #64]	; (801db40 <ip4_reass+0x334>)
 801db00:	480d      	ldr	r0, [pc, #52]	; (801db38 <ip4_reass+0x32c>)
 801db02:	f000 fbe9 	bl	801e2d8 <printf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801db06:	2100      	movs	r1, #0
 801db08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801db0a:	f7ff fce7 	bl	801d4dc <ip_reass_dequeue_datagram>
 801db0e:	e006      	b.n	801db1e <ip4_reass+0x312>
    goto nullreturn;
 801db10:	bf00      	nop
 801db12:	e004      	b.n	801db1e <ip4_reass+0x312>
    goto nullreturn;
 801db14:	bf00      	nop
 801db16:	e002      	b.n	801db1e <ip4_reass+0x312>
      goto nullreturn;
 801db18:	bf00      	nop
 801db1a:	e000      	b.n	801db1e <ip4_reass+0x312>
  }

nullreturn:
 801db1c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801db1e:	6878      	ldr	r0, [r7, #4]
 801db20:	f7f5 fece 	bl	80138c0 <pbuf_free>
  return NULL;
 801db24:	2300      	movs	r3, #0
}
 801db26:	4618      	mov	r0, r3
 801db28:	3738      	adds	r7, #56	; 0x38
 801db2a:	46bd      	mov	sp, r7
 801db2c:	bd80      	pop	{r7, pc}
 801db2e:	bf00      	nop
 801db30:	08027128 	.word	0x08027128
 801db34:	080272b4 	.word	0x080272b4
 801db38:	08027170 	.word	0x08027170
 801db3c:	2000c33c 	.word	0x2000c33c
 801db40:	080272c0 	.word	0x080272c0

0801db44 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801db44:	b580      	push	{r7, lr}
 801db46:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801db48:	2005      	movs	r0, #5
 801db4a:	f7f4 ffb7 	bl	8012abc <memp_malloc>
 801db4e:	4603      	mov	r3, r0
}
 801db50:	4618      	mov	r0, r3
 801db52:	bd80      	pop	{r7, pc}

0801db54 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801db54:	b580      	push	{r7, lr}
 801db56:	b082      	sub	sp, #8
 801db58:	af00      	add	r7, sp, #0
 801db5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801db5c:	687b      	ldr	r3, [r7, #4]
 801db5e:	2b00      	cmp	r3, #0
 801db60:	d106      	bne.n	801db70 <ip_frag_free_pbuf_custom_ref+0x1c>
 801db62:	4b07      	ldr	r3, [pc, #28]	; (801db80 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801db64:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801db68:	4906      	ldr	r1, [pc, #24]	; (801db84 <ip_frag_free_pbuf_custom_ref+0x30>)
 801db6a:	4807      	ldr	r0, [pc, #28]	; (801db88 <ip_frag_free_pbuf_custom_ref+0x34>)
 801db6c:	f000 fbb4 	bl	801e2d8 <printf>
  memp_free(MEMP_FRAG_PBUF, p);
 801db70:	6879      	ldr	r1, [r7, #4]
 801db72:	2005      	movs	r0, #5
 801db74:	f7f4 fff4 	bl	8012b60 <memp_free>
}
 801db78:	bf00      	nop
 801db7a:	3708      	adds	r7, #8
 801db7c:	46bd      	mov	sp, r7
 801db7e:	bd80      	pop	{r7, pc}
 801db80:	08027128 	.word	0x08027128
 801db84:	080272e0 	.word	0x080272e0
 801db88:	08027170 	.word	0x08027170

0801db8c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801db8c:	b580      	push	{r7, lr}
 801db8e:	b084      	sub	sp, #16
 801db90:	af00      	add	r7, sp, #0
 801db92:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801db94:	687b      	ldr	r3, [r7, #4]
 801db96:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801db98:	68fb      	ldr	r3, [r7, #12]
 801db9a:	2b00      	cmp	r3, #0
 801db9c:	d106      	bne.n	801dbac <ipfrag_free_pbuf_custom+0x20>
 801db9e:	4b11      	ldr	r3, [pc, #68]	; (801dbe4 <ipfrag_free_pbuf_custom+0x58>)
 801dba0:	f240 22ce 	movw	r2, #718	; 0x2ce
 801dba4:	4910      	ldr	r1, [pc, #64]	; (801dbe8 <ipfrag_free_pbuf_custom+0x5c>)
 801dba6:	4811      	ldr	r0, [pc, #68]	; (801dbec <ipfrag_free_pbuf_custom+0x60>)
 801dba8:	f000 fb96 	bl	801e2d8 <printf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801dbac:	68fa      	ldr	r2, [r7, #12]
 801dbae:	687b      	ldr	r3, [r7, #4]
 801dbb0:	429a      	cmp	r2, r3
 801dbb2:	d006      	beq.n	801dbc2 <ipfrag_free_pbuf_custom+0x36>
 801dbb4:	4b0b      	ldr	r3, [pc, #44]	; (801dbe4 <ipfrag_free_pbuf_custom+0x58>)
 801dbb6:	f240 22cf 	movw	r2, #719	; 0x2cf
 801dbba:	490d      	ldr	r1, [pc, #52]	; (801dbf0 <ipfrag_free_pbuf_custom+0x64>)
 801dbbc:	480b      	ldr	r0, [pc, #44]	; (801dbec <ipfrag_free_pbuf_custom+0x60>)
 801dbbe:	f000 fb8b 	bl	801e2d8 <printf>
  if (pcr->original != NULL) {
 801dbc2:	68fb      	ldr	r3, [r7, #12]
 801dbc4:	695b      	ldr	r3, [r3, #20]
 801dbc6:	2b00      	cmp	r3, #0
 801dbc8:	d004      	beq.n	801dbd4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801dbca:	68fb      	ldr	r3, [r7, #12]
 801dbcc:	695b      	ldr	r3, [r3, #20]
 801dbce:	4618      	mov	r0, r3
 801dbd0:	f7f5 fe76 	bl	80138c0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801dbd4:	68f8      	ldr	r0, [r7, #12]
 801dbd6:	f7ff ffbd 	bl	801db54 <ip_frag_free_pbuf_custom_ref>
}
 801dbda:	bf00      	nop
 801dbdc:	3710      	adds	r7, #16
 801dbde:	46bd      	mov	sp, r7
 801dbe0:	bd80      	pop	{r7, pc}
 801dbe2:	bf00      	nop
 801dbe4:	08027128 	.word	0x08027128
 801dbe8:	080272ec 	.word	0x080272ec
 801dbec:	08027170 	.word	0x08027170
 801dbf0:	080272f8 	.word	0x080272f8

0801dbf4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801dbf4:	b580      	push	{r7, lr}
 801dbf6:	b094      	sub	sp, #80	; 0x50
 801dbf8:	af02      	add	r7, sp, #8
 801dbfa:	60f8      	str	r0, [r7, #12]
 801dbfc:	60b9      	str	r1, [r7, #8]
 801dbfe:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801dc00:	2300      	movs	r3, #0
 801dc02:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801dc06:	68bb      	ldr	r3, [r7, #8]
 801dc08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801dc0a:	3b14      	subs	r3, #20
 801dc0c:	2b00      	cmp	r3, #0
 801dc0e:	da00      	bge.n	801dc12 <ip4_frag+0x1e>
 801dc10:	3307      	adds	r3, #7
 801dc12:	10db      	asrs	r3, r3, #3
 801dc14:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801dc16:	2314      	movs	r3, #20
 801dc18:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801dc1a:	68fb      	ldr	r3, [r7, #12]
 801dc1c:	685b      	ldr	r3, [r3, #4]
 801dc1e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801dc20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dc22:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801dc24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dc26:	781b      	ldrb	r3, [r3, #0]
 801dc28:	f003 030f 	and.w	r3, r3, #15
 801dc2c:	b2db      	uxtb	r3, r3
 801dc2e:	009b      	lsls	r3, r3, #2
 801dc30:	b2db      	uxtb	r3, r3
 801dc32:	2b14      	cmp	r3, #20
 801dc34:	d002      	beq.n	801dc3c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801dc36:	f06f 0305 	mvn.w	r3, #5
 801dc3a:	e110      	b.n	801de5e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801dc3c:	68fb      	ldr	r3, [r7, #12]
 801dc3e:	895b      	ldrh	r3, [r3, #10]
 801dc40:	2b13      	cmp	r3, #19
 801dc42:	d809      	bhi.n	801dc58 <ip4_frag+0x64>
 801dc44:	4b88      	ldr	r3, [pc, #544]	; (801de68 <ip4_frag+0x274>)
 801dc46:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801dc4a:	4988      	ldr	r1, [pc, #544]	; (801de6c <ip4_frag+0x278>)
 801dc4c:	4888      	ldr	r0, [pc, #544]	; (801de70 <ip4_frag+0x27c>)
 801dc4e:	f000 fb43 	bl	801e2d8 <printf>
 801dc52:	f06f 0305 	mvn.w	r3, #5
 801dc56:	e102      	b.n	801de5e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801dc58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dc5a:	88db      	ldrh	r3, [r3, #6]
 801dc5c:	b29b      	uxth	r3, r3
 801dc5e:	4618      	mov	r0, r3
 801dc60:	f7f4 fa76 	bl	8012150 <lwip_htons>
 801dc64:	4603      	mov	r3, r0
 801dc66:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801dc68:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801dc6a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801dc6e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801dc72:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801dc74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801dc78:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801dc7a:	68fb      	ldr	r3, [r7, #12]
 801dc7c:	891b      	ldrh	r3, [r3, #8]
 801dc7e:	3b14      	subs	r3, #20
 801dc80:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801dc84:	e0e1      	b.n	801de4a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801dc86:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801dc88:	00db      	lsls	r3, r3, #3
 801dc8a:	b29b      	uxth	r3, r3
 801dc8c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801dc90:	4293      	cmp	r3, r2
 801dc92:	bf28      	it	cs
 801dc94:	4613      	movcs	r3, r2
 801dc96:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801dc98:	f44f 7220 	mov.w	r2, #640	; 0x280
 801dc9c:	2114      	movs	r1, #20
 801dc9e:	200e      	movs	r0, #14
 801dca0:	f7f5 fb2a 	bl	80132f8 <pbuf_alloc>
 801dca4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801dca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dca8:	2b00      	cmp	r3, #0
 801dcaa:	f000 80d5 	beq.w	801de58 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801dcae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dcb0:	895b      	ldrh	r3, [r3, #10]
 801dcb2:	2b13      	cmp	r3, #19
 801dcb4:	d806      	bhi.n	801dcc4 <ip4_frag+0xd0>
 801dcb6:	4b6c      	ldr	r3, [pc, #432]	; (801de68 <ip4_frag+0x274>)
 801dcb8:	f44f 7249 	mov.w	r2, #804	; 0x324
 801dcbc:	496d      	ldr	r1, [pc, #436]	; (801de74 <ip4_frag+0x280>)
 801dcbe:	486c      	ldr	r0, [pc, #432]	; (801de70 <ip4_frag+0x27c>)
 801dcc0:	f000 fb0a 	bl	801e2d8 <printf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801dcc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dcc6:	685b      	ldr	r3, [r3, #4]
 801dcc8:	2214      	movs	r2, #20
 801dcca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801dccc:	4618      	mov	r0, r3
 801dcce:	f000 fad3 	bl	801e278 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801dcd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dcd4:	685b      	ldr	r3, [r3, #4]
 801dcd6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801dcd8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801dcda:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801dcde:	e064      	b.n	801ddaa <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801dce0:	68fb      	ldr	r3, [r7, #12]
 801dce2:	895a      	ldrh	r2, [r3, #10]
 801dce4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801dce6:	1ad3      	subs	r3, r2, r3
 801dce8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801dcea:	68fb      	ldr	r3, [r7, #12]
 801dcec:	895b      	ldrh	r3, [r3, #10]
 801dcee:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801dcf0:	429a      	cmp	r2, r3
 801dcf2:	d906      	bls.n	801dd02 <ip4_frag+0x10e>
 801dcf4:	4b5c      	ldr	r3, [pc, #368]	; (801de68 <ip4_frag+0x274>)
 801dcf6:	f240 322d 	movw	r2, #813	; 0x32d
 801dcfa:	495f      	ldr	r1, [pc, #380]	; (801de78 <ip4_frag+0x284>)
 801dcfc:	485c      	ldr	r0, [pc, #368]	; (801de70 <ip4_frag+0x27c>)
 801dcfe:	f000 faeb 	bl	801e2d8 <printf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801dd02:	8bfa      	ldrh	r2, [r7, #30]
 801dd04:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801dd08:	4293      	cmp	r3, r2
 801dd0a:	bf28      	it	cs
 801dd0c:	4613      	movcs	r3, r2
 801dd0e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801dd12:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801dd16:	2b00      	cmp	r3, #0
 801dd18:	d105      	bne.n	801dd26 <ip4_frag+0x132>
        poff = 0;
 801dd1a:	2300      	movs	r3, #0
 801dd1c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801dd1e:	68fb      	ldr	r3, [r7, #12]
 801dd20:	681b      	ldr	r3, [r3, #0]
 801dd22:	60fb      	str	r3, [r7, #12]
        continue;
 801dd24:	e041      	b.n	801ddaa <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801dd26:	f7ff ff0d 	bl	801db44 <ip_frag_alloc_pbuf_custom_ref>
 801dd2a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801dd2c:	69bb      	ldr	r3, [r7, #24]
 801dd2e:	2b00      	cmp	r3, #0
 801dd30:	d103      	bne.n	801dd3a <ip4_frag+0x146>
        pbuf_free(rambuf);
 801dd32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801dd34:	f7f5 fdc4 	bl	80138c0 <pbuf_free>
        goto memerr;
 801dd38:	e08f      	b.n	801de5a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801dd3a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801dd3c:	68fb      	ldr	r3, [r7, #12]
 801dd3e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801dd40:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801dd42:	4413      	add	r3, r2
 801dd44:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801dd48:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801dd4c:	9201      	str	r2, [sp, #4]
 801dd4e:	9300      	str	r3, [sp, #0]
 801dd50:	4603      	mov	r3, r0
 801dd52:	2241      	movs	r2, #65	; 0x41
 801dd54:	2000      	movs	r0, #0
 801dd56:	f7f5 fbf9 	bl	801354c <pbuf_alloced_custom>
 801dd5a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801dd5c:	697b      	ldr	r3, [r7, #20]
 801dd5e:	2b00      	cmp	r3, #0
 801dd60:	d106      	bne.n	801dd70 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801dd62:	69b8      	ldr	r0, [r7, #24]
 801dd64:	f7ff fef6 	bl	801db54 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801dd68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801dd6a:	f7f5 fda9 	bl	80138c0 <pbuf_free>
        goto memerr;
 801dd6e:	e074      	b.n	801de5a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801dd70:	68f8      	ldr	r0, [r7, #12]
 801dd72:	f7f5 fe4b 	bl	8013a0c <pbuf_ref>
      pcr->original = p;
 801dd76:	69bb      	ldr	r3, [r7, #24]
 801dd78:	68fa      	ldr	r2, [r7, #12]
 801dd7a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801dd7c:	69bb      	ldr	r3, [r7, #24]
 801dd7e:	4a3f      	ldr	r2, [pc, #252]	; (801de7c <ip4_frag+0x288>)
 801dd80:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801dd82:	6979      	ldr	r1, [r7, #20]
 801dd84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801dd86:	f7f5 fe69 	bl	8013a5c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801dd8a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801dd8e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801dd92:	1ad3      	subs	r3, r2, r3
 801dd94:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801dd98:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801dd9c:	2b00      	cmp	r3, #0
 801dd9e:	d004      	beq.n	801ddaa <ip4_frag+0x1b6>
        poff = 0;
 801dda0:	2300      	movs	r3, #0
 801dda2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801dda4:	68fb      	ldr	r3, [r7, #12]
 801dda6:	681b      	ldr	r3, [r3, #0]
 801dda8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801ddaa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801ddae:	2b00      	cmp	r3, #0
 801ddb0:	d196      	bne.n	801dce0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801ddb2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801ddb4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ddb8:	4413      	add	r3, r2
 801ddba:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801ddbc:	68bb      	ldr	r3, [r7, #8]
 801ddbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ddc0:	f1a3 0213 	sub.w	r2, r3, #19
 801ddc4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ddc8:	429a      	cmp	r2, r3
 801ddca:	bfcc      	ite	gt
 801ddcc:	2301      	movgt	r3, #1
 801ddce:	2300      	movle	r3, #0
 801ddd0:	b2db      	uxtb	r3, r3
 801ddd2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801ddd4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801ddd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801dddc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801ddde:	6a3b      	ldr	r3, [r7, #32]
 801dde0:	2b00      	cmp	r3, #0
 801dde2:	d002      	beq.n	801ddea <ip4_frag+0x1f6>
 801dde4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dde6:	2b00      	cmp	r3, #0
 801dde8:	d003      	beq.n	801ddf2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801ddea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ddec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801ddf0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801ddf2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ddf4:	4618      	mov	r0, r3
 801ddf6:	f7f4 f9ab 	bl	8012150 <lwip_htons>
 801ddfa:	4603      	mov	r3, r0
 801ddfc:	461a      	mov	r2, r3
 801ddfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de00:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801de02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801de04:	3314      	adds	r3, #20
 801de06:	b29b      	uxth	r3, r3
 801de08:	4618      	mov	r0, r3
 801de0a:	f7f4 f9a1 	bl	8012150 <lwip_htons>
 801de0e:	4603      	mov	r3, r0
 801de10:	461a      	mov	r2, r3
 801de12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de14:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801de16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de18:	2200      	movs	r2, #0
 801de1a:	729a      	strb	r2, [r3, #10]
 801de1c:	2200      	movs	r2, #0
 801de1e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801de20:	68bb      	ldr	r3, [r7, #8]
 801de22:	695b      	ldr	r3, [r3, #20]
 801de24:	687a      	ldr	r2, [r7, #4]
 801de26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801de28:	68b8      	ldr	r0, [r7, #8]
 801de2a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801de2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801de2e:	f7f5 fd47 	bl	80138c0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801de32:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801de36:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801de38:	1ad3      	subs	r3, r2, r3
 801de3a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801de3e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801de42:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801de44:	4413      	add	r3, r2
 801de46:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801de4a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801de4e:	2b00      	cmp	r3, #0
 801de50:	f47f af19 	bne.w	801dc86 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801de54:	2300      	movs	r3, #0
 801de56:	e002      	b.n	801de5e <ip4_frag+0x26a>
      goto memerr;
 801de58:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801de5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801de5e:	4618      	mov	r0, r3
 801de60:	3748      	adds	r7, #72	; 0x48
 801de62:	46bd      	mov	sp, r7
 801de64:	bd80      	pop	{r7, pc}
 801de66:	bf00      	nop
 801de68:	08027128 	.word	0x08027128
 801de6c:	08027304 	.word	0x08027304
 801de70:	08027170 	.word	0x08027170
 801de74:	08027320 	.word	0x08027320
 801de78:	08027340 	.word	0x08027340
 801de7c:	0801db8d 	.word	0x0801db8d

0801de80 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801de80:	b580      	push	{r7, lr}
 801de82:	b086      	sub	sp, #24
 801de84:	af00      	add	r7, sp, #0
 801de86:	6078      	str	r0, [r7, #4]
 801de88:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801de8a:	230e      	movs	r3, #14
 801de8c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801de8e:	687b      	ldr	r3, [r7, #4]
 801de90:	895b      	ldrh	r3, [r3, #10]
 801de92:	2b0e      	cmp	r3, #14
 801de94:	d96e      	bls.n	801df74 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801de96:	687b      	ldr	r3, [r7, #4]
 801de98:	7bdb      	ldrb	r3, [r3, #15]
 801de9a:	2b00      	cmp	r3, #0
 801de9c:	d106      	bne.n	801deac <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801de9e:	683b      	ldr	r3, [r7, #0]
 801dea0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801dea4:	3301      	adds	r3, #1
 801dea6:	b2da      	uxtb	r2, r3
 801dea8:	687b      	ldr	r3, [r7, #4]
 801deaa:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801deac:	687b      	ldr	r3, [r7, #4]
 801deae:	685b      	ldr	r3, [r3, #4]
 801deb0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801deb2:	693b      	ldr	r3, [r7, #16]
 801deb4:	7b1a      	ldrb	r2, [r3, #12]
 801deb6:	7b5b      	ldrb	r3, [r3, #13]
 801deb8:	021b      	lsls	r3, r3, #8
 801deba:	4313      	orrs	r3, r2
 801debc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801debe:	693b      	ldr	r3, [r7, #16]
 801dec0:	781b      	ldrb	r3, [r3, #0]
 801dec2:	f003 0301 	and.w	r3, r3, #1
 801dec6:	2b00      	cmp	r3, #0
 801dec8:	d023      	beq.n	801df12 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801deca:	693b      	ldr	r3, [r7, #16]
 801decc:	781b      	ldrb	r3, [r3, #0]
 801dece:	2b01      	cmp	r3, #1
 801ded0:	d10f      	bne.n	801def2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801ded2:	693b      	ldr	r3, [r7, #16]
 801ded4:	785b      	ldrb	r3, [r3, #1]
 801ded6:	2b00      	cmp	r3, #0
 801ded8:	d11b      	bne.n	801df12 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801deda:	693b      	ldr	r3, [r7, #16]
 801dedc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801dede:	2b5e      	cmp	r3, #94	; 0x5e
 801dee0:	d117      	bne.n	801df12 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801dee2:	687b      	ldr	r3, [r7, #4]
 801dee4:	7b5b      	ldrb	r3, [r3, #13]
 801dee6:	f043 0310 	orr.w	r3, r3, #16
 801deea:	b2da      	uxtb	r2, r3
 801deec:	687b      	ldr	r3, [r7, #4]
 801deee:	735a      	strb	r2, [r3, #13]
 801def0:	e00f      	b.n	801df12 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801def2:	693b      	ldr	r3, [r7, #16]
 801def4:	2206      	movs	r2, #6
 801def6:	4928      	ldr	r1, [pc, #160]	; (801df98 <ethernet_input+0x118>)
 801def8:	4618      	mov	r0, r3
 801defa:	f000 f9ad 	bl	801e258 <memcmp>
 801defe:	4603      	mov	r3, r0
 801df00:	2b00      	cmp	r3, #0
 801df02:	d106      	bne.n	801df12 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801df04:	687b      	ldr	r3, [r7, #4]
 801df06:	7b5b      	ldrb	r3, [r3, #13]
 801df08:	f043 0308 	orr.w	r3, r3, #8
 801df0c:	b2da      	uxtb	r2, r3
 801df0e:	687b      	ldr	r3, [r7, #4]
 801df10:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801df12:	89fb      	ldrh	r3, [r7, #14]
 801df14:	2b08      	cmp	r3, #8
 801df16:	d003      	beq.n	801df20 <ethernet_input+0xa0>
 801df18:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801df1c:	d014      	beq.n	801df48 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801df1e:	e032      	b.n	801df86 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801df20:	683b      	ldr	r3, [r7, #0]
 801df22:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801df26:	f003 0308 	and.w	r3, r3, #8
 801df2a:	2b00      	cmp	r3, #0
 801df2c:	d024      	beq.n	801df78 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801df2e:	8afb      	ldrh	r3, [r7, #22]
 801df30:	4619      	mov	r1, r3
 801df32:	6878      	ldr	r0, [r7, #4]
 801df34:	f7f5 fc3e 	bl	80137b4 <pbuf_remove_header>
 801df38:	4603      	mov	r3, r0
 801df3a:	2b00      	cmp	r3, #0
 801df3c:	d11e      	bne.n	801df7c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801df3e:	6839      	ldr	r1, [r7, #0]
 801df40:	6878      	ldr	r0, [r7, #4]
 801df42:	f7fe ff03 	bl	801cd4c <ip4_input>
      break;
 801df46:	e013      	b.n	801df70 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801df48:	683b      	ldr	r3, [r7, #0]
 801df4a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801df4e:	f003 0308 	and.w	r3, r3, #8
 801df52:	2b00      	cmp	r3, #0
 801df54:	d014      	beq.n	801df80 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801df56:	8afb      	ldrh	r3, [r7, #22]
 801df58:	4619      	mov	r1, r3
 801df5a:	6878      	ldr	r0, [r7, #4]
 801df5c:	f7f5 fc2a 	bl	80137b4 <pbuf_remove_header>
 801df60:	4603      	mov	r3, r0
 801df62:	2b00      	cmp	r3, #0
 801df64:	d10e      	bne.n	801df84 <ethernet_input+0x104>
        etharp_input(p, netif);
 801df66:	6839      	ldr	r1, [r7, #0]
 801df68:	6878      	ldr	r0, [r7, #4]
 801df6a:	f7fe f89f 	bl	801c0ac <etharp_input>
      break;
 801df6e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801df70:	2300      	movs	r3, #0
 801df72:	e00c      	b.n	801df8e <ethernet_input+0x10e>
    goto free_and_return;
 801df74:	bf00      	nop
 801df76:	e006      	b.n	801df86 <ethernet_input+0x106>
        goto free_and_return;
 801df78:	bf00      	nop
 801df7a:	e004      	b.n	801df86 <ethernet_input+0x106>
        goto free_and_return;
 801df7c:	bf00      	nop
 801df7e:	e002      	b.n	801df86 <ethernet_input+0x106>
        goto free_and_return;
 801df80:	bf00      	nop
 801df82:	e000      	b.n	801df86 <ethernet_input+0x106>
        goto free_and_return;
 801df84:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801df86:	6878      	ldr	r0, [r7, #4]
 801df88:	f7f5 fc9a 	bl	80138c0 <pbuf_free>
  return ERR_OK;
 801df8c:	2300      	movs	r3, #0
}
 801df8e:	4618      	mov	r0, r3
 801df90:	3718      	adds	r7, #24
 801df92:	46bd      	mov	sp, r7
 801df94:	bd80      	pop	{r7, pc}
 801df96:	bf00      	nop
 801df98:	0806f654 	.word	0x0806f654

0801df9c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801df9c:	b580      	push	{r7, lr}
 801df9e:	b086      	sub	sp, #24
 801dfa0:	af00      	add	r7, sp, #0
 801dfa2:	60f8      	str	r0, [r7, #12]
 801dfa4:	60b9      	str	r1, [r7, #8]
 801dfa6:	607a      	str	r2, [r7, #4]
 801dfa8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801dfaa:	8c3b      	ldrh	r3, [r7, #32]
 801dfac:	4618      	mov	r0, r3
 801dfae:	f7f4 f8cf 	bl	8012150 <lwip_htons>
 801dfb2:	4603      	mov	r3, r0
 801dfb4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801dfb6:	210e      	movs	r1, #14
 801dfb8:	68b8      	ldr	r0, [r7, #8]
 801dfba:	f7f5 fbeb 	bl	8013794 <pbuf_add_header>
 801dfbe:	4603      	mov	r3, r0
 801dfc0:	2b00      	cmp	r3, #0
 801dfc2:	d125      	bne.n	801e010 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801dfc4:	68bb      	ldr	r3, [r7, #8]
 801dfc6:	685b      	ldr	r3, [r3, #4]
 801dfc8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801dfca:	693b      	ldr	r3, [r7, #16]
 801dfcc:	8afa      	ldrh	r2, [r7, #22]
 801dfce:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801dfd0:	693b      	ldr	r3, [r7, #16]
 801dfd2:	2206      	movs	r2, #6
 801dfd4:	6839      	ldr	r1, [r7, #0]
 801dfd6:	4618      	mov	r0, r3
 801dfd8:	f000 f94e 	bl	801e278 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801dfdc:	693b      	ldr	r3, [r7, #16]
 801dfde:	3306      	adds	r3, #6
 801dfe0:	2206      	movs	r2, #6
 801dfe2:	6879      	ldr	r1, [r7, #4]
 801dfe4:	4618      	mov	r0, r3
 801dfe6:	f000 f947 	bl	801e278 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801dfea:	68fb      	ldr	r3, [r7, #12]
 801dfec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801dff0:	2b06      	cmp	r3, #6
 801dff2:	d006      	beq.n	801e002 <ethernet_output+0x66>
 801dff4:	4b0a      	ldr	r3, [pc, #40]	; (801e020 <ethernet_output+0x84>)
 801dff6:	f44f 7299 	mov.w	r2, #306	; 0x132
 801dffa:	490a      	ldr	r1, [pc, #40]	; (801e024 <ethernet_output+0x88>)
 801dffc:	480a      	ldr	r0, [pc, #40]	; (801e028 <ethernet_output+0x8c>)
 801dffe:	f000 f96b 	bl	801e2d8 <printf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801e002:	68fb      	ldr	r3, [r7, #12]
 801e004:	699b      	ldr	r3, [r3, #24]
 801e006:	68b9      	ldr	r1, [r7, #8]
 801e008:	68f8      	ldr	r0, [r7, #12]
 801e00a:	4798      	blx	r3
 801e00c:	4603      	mov	r3, r0
 801e00e:	e002      	b.n	801e016 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801e010:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801e012:	f06f 0301 	mvn.w	r3, #1
}
 801e016:	4618      	mov	r0, r3
 801e018:	3718      	adds	r7, #24
 801e01a:	46bd      	mov	sp, r7
 801e01c:	bd80      	pop	{r7, pc}
 801e01e:	bf00      	nop
 801e020:	08027350 	.word	0x08027350
 801e024:	08027388 	.word	0x08027388
 801e028:	080273bc 	.word	0x080273bc

0801e02c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801e02c:	b580      	push	{r7, lr}
 801e02e:	b082      	sub	sp, #8
 801e030:	af00      	add	r7, sp, #0
 801e032:	6078      	str	r0, [r7, #4]
 801e034:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801e036:	683b      	ldr	r3, [r7, #0]
 801e038:	2200      	movs	r2, #0
 801e03a:	2104      	movs	r1, #4
 801e03c:	4618      	mov	r0, r3
 801e03e:	f7f0 fc63 	bl	800e908 <osMessageQueueNew>
 801e042:	4602      	mov	r2, r0
 801e044:	687b      	ldr	r3, [r7, #4]
 801e046:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801e048:	687b      	ldr	r3, [r7, #4]
 801e04a:	681b      	ldr	r3, [r3, #0]
 801e04c:	2b00      	cmp	r3, #0
 801e04e:	d102      	bne.n	801e056 <sys_mbox_new+0x2a>
    return ERR_MEM;
 801e050:	f04f 33ff 	mov.w	r3, #4294967295
 801e054:	e000      	b.n	801e058 <sys_mbox_new+0x2c>

  return ERR_OK;
 801e056:	2300      	movs	r3, #0
}
 801e058:	4618      	mov	r0, r3
 801e05a:	3708      	adds	r7, #8
 801e05c:	46bd      	mov	sp, r7
 801e05e:	bd80      	pop	{r7, pc}

0801e060 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801e060:	b580      	push	{r7, lr}
 801e062:	b084      	sub	sp, #16
 801e064:	af00      	add	r7, sp, #0
 801e066:	6078      	str	r0, [r7, #4]
 801e068:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801e06a:	687b      	ldr	r3, [r7, #4]
 801e06c:	6818      	ldr	r0, [r3, #0]
 801e06e:	4639      	mov	r1, r7
 801e070:	2300      	movs	r3, #0
 801e072:	2200      	movs	r2, #0
 801e074:	f7f0 fcbc 	bl	800e9f0 <osMessageQueuePut>
 801e078:	4603      	mov	r3, r0
 801e07a:	2b00      	cmp	r3, #0
 801e07c:	d102      	bne.n	801e084 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801e07e:	2300      	movs	r3, #0
 801e080:	73fb      	strb	r3, [r7, #15]
 801e082:	e001      	b.n	801e088 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801e084:	23ff      	movs	r3, #255	; 0xff
 801e086:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801e088:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801e08c:	4618      	mov	r0, r3
 801e08e:	3710      	adds	r7, #16
 801e090:	46bd      	mov	sp, r7
 801e092:	bd80      	pop	{r7, pc}

0801e094 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801e094:	b580      	push	{r7, lr}
 801e096:	b086      	sub	sp, #24
 801e098:	af00      	add	r7, sp, #0
 801e09a:	60f8      	str	r0, [r7, #12]
 801e09c:	60b9      	str	r1, [r7, #8]
 801e09e:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801e0a0:	f7f0 f91e 	bl	800e2e0 <osKernelGetTickCount>
 801e0a4:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801e0a6:	687b      	ldr	r3, [r7, #4]
 801e0a8:	2b00      	cmp	r3, #0
 801e0aa:	d013      	beq.n	801e0d4 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801e0ac:	68fb      	ldr	r3, [r7, #12]
 801e0ae:	6818      	ldr	r0, [r3, #0]
 801e0b0:	687b      	ldr	r3, [r7, #4]
 801e0b2:	2200      	movs	r2, #0
 801e0b4:	68b9      	ldr	r1, [r7, #8]
 801e0b6:	f7f0 fcfb 	bl	800eab0 <osMessageQueueGet>
 801e0ba:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801e0bc:	693b      	ldr	r3, [r7, #16]
 801e0be:	2b00      	cmp	r3, #0
 801e0c0:	d105      	bne.n	801e0ce <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801e0c2:	f7f0 f90d 	bl	800e2e0 <osKernelGetTickCount>
 801e0c6:	4602      	mov	r2, r0
 801e0c8:	697b      	ldr	r3, [r7, #20]
 801e0ca:	1ad3      	subs	r3, r2, r3
 801e0cc:	e00f      	b.n	801e0ee <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801e0ce:	f04f 33ff 	mov.w	r3, #4294967295
 801e0d2:	e00c      	b.n	801e0ee <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801e0d4:	68fb      	ldr	r3, [r7, #12]
 801e0d6:	6818      	ldr	r0, [r3, #0]
 801e0d8:	f04f 33ff 	mov.w	r3, #4294967295
 801e0dc:	2200      	movs	r2, #0
 801e0de:	68b9      	ldr	r1, [r7, #8]
 801e0e0:	f7f0 fce6 	bl	800eab0 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801e0e4:	f7f0 f8fc 	bl	800e2e0 <osKernelGetTickCount>
 801e0e8:	4602      	mov	r2, r0
 801e0ea:	697b      	ldr	r3, [r7, #20]
 801e0ec:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801e0ee:	4618      	mov	r0, r3
 801e0f0:	3718      	adds	r7, #24
 801e0f2:	46bd      	mov	sp, r7
 801e0f4:	bd80      	pop	{r7, pc}

0801e0f6 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801e0f6:	b480      	push	{r7}
 801e0f8:	b083      	sub	sp, #12
 801e0fa:	af00      	add	r7, sp, #0
 801e0fc:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801e0fe:	687b      	ldr	r3, [r7, #4]
 801e100:	681b      	ldr	r3, [r3, #0]
 801e102:	2b00      	cmp	r3, #0
 801e104:	d101      	bne.n	801e10a <sys_mbox_valid+0x14>
    return 0;
 801e106:	2300      	movs	r3, #0
 801e108:	e000      	b.n	801e10c <sys_mbox_valid+0x16>
  else
    return 1;
 801e10a:	2301      	movs	r3, #1
}
 801e10c:	4618      	mov	r0, r3
 801e10e:	370c      	adds	r7, #12
 801e110:	46bd      	mov	sp, r7
 801e112:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e116:	4770      	bx	lr

0801e118 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801e118:	b580      	push	{r7, lr}
 801e11a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801e11c:	2000      	movs	r0, #0
 801e11e:	f7f0 f9a1 	bl	800e464 <osMutexNew>
 801e122:	4603      	mov	r3, r0
 801e124:	4a01      	ldr	r2, [pc, #4]	; (801e12c <sys_init+0x14>)
 801e126:	6013      	str	r3, [r2, #0]
#endif
}
 801e128:	bf00      	nop
 801e12a:	bd80      	pop	{r7, pc}
 801e12c:	2000c348 	.word	0x2000c348

0801e130 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801e130:	b580      	push	{r7, lr}
 801e132:	b082      	sub	sp, #8
 801e134:	af00      	add	r7, sp, #0
 801e136:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801e138:	2000      	movs	r0, #0
 801e13a:	f7f0 f993 	bl	800e464 <osMutexNew>
 801e13e:	4602      	mov	r2, r0
 801e140:	687b      	ldr	r3, [r7, #4]
 801e142:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801e144:	687b      	ldr	r3, [r7, #4]
 801e146:	681b      	ldr	r3, [r3, #0]
 801e148:	2b00      	cmp	r3, #0
 801e14a:	d102      	bne.n	801e152 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801e14c:	f04f 33ff 	mov.w	r3, #4294967295
 801e150:	e000      	b.n	801e154 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801e152:	2300      	movs	r3, #0
}
 801e154:	4618      	mov	r0, r3
 801e156:	3708      	adds	r7, #8
 801e158:	46bd      	mov	sp, r7
 801e15a:	bd80      	pop	{r7, pc}

0801e15c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801e15c:	b580      	push	{r7, lr}
 801e15e:	b082      	sub	sp, #8
 801e160:	af00      	add	r7, sp, #0
 801e162:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801e164:	687b      	ldr	r3, [r7, #4]
 801e166:	681b      	ldr	r3, [r3, #0]
 801e168:	f04f 31ff 	mov.w	r1, #4294967295
 801e16c:	4618      	mov	r0, r3
 801e16e:	f7f0 f9ff 	bl	800e570 <osMutexAcquire>
#endif
}
 801e172:	bf00      	nop
 801e174:	3708      	adds	r7, #8
 801e176:	46bd      	mov	sp, r7
 801e178:	bd80      	pop	{r7, pc}

0801e17a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801e17a:	b580      	push	{r7, lr}
 801e17c:	b082      	sub	sp, #8
 801e17e:	af00      	add	r7, sp, #0
 801e180:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801e182:	687b      	ldr	r3, [r7, #4]
 801e184:	681b      	ldr	r3, [r3, #0]
 801e186:	4618      	mov	r0, r3
 801e188:	f7f0 fa3d 	bl	800e606 <osMutexRelease>
}
 801e18c:	bf00      	nop
 801e18e:	3708      	adds	r7, #8
 801e190:	46bd      	mov	sp, r7
 801e192:	bd80      	pop	{r7, pc}

0801e194 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801e194:	b580      	push	{r7, lr}
 801e196:	b08e      	sub	sp, #56	; 0x38
 801e198:	af00      	add	r7, sp, #0
 801e19a:	60f8      	str	r0, [r7, #12]
 801e19c:	60b9      	str	r1, [r7, #8]
 801e19e:	607a      	str	r2, [r7, #4]
 801e1a0:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801e1a2:	f107 0314 	add.w	r3, r7, #20
 801e1a6:	2224      	movs	r2, #36	; 0x24
 801e1a8:	2100      	movs	r1, #0
 801e1aa:	4618      	mov	r0, r3
 801e1ac:	f000 f88c 	bl	801e2c8 <memset>
 801e1b0:	68fb      	ldr	r3, [r7, #12]
 801e1b2:	617b      	str	r3, [r7, #20]
 801e1b4:	683b      	ldr	r3, [r7, #0]
 801e1b6:	62bb      	str	r3, [r7, #40]	; 0x28
 801e1b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e1ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801e1bc:	f107 0314 	add.w	r3, r7, #20
 801e1c0:	461a      	mov	r2, r3
 801e1c2:	6879      	ldr	r1, [r7, #4]
 801e1c4:	68b8      	ldr	r0, [r7, #8]
 801e1c6:	f7f0 f8a0 	bl	800e30a <osThreadNew>
 801e1ca:	4603      	mov	r3, r0
#endif
}
 801e1cc:	4618      	mov	r0, r3
 801e1ce:	3738      	adds	r7, #56	; 0x38
 801e1d0:	46bd      	mov	sp, r7
 801e1d2:	bd80      	pop	{r7, pc}

0801e1d4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801e1d4:	b580      	push	{r7, lr}
 801e1d6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801e1d8:	4b04      	ldr	r3, [pc, #16]	; (801e1ec <sys_arch_protect+0x18>)
 801e1da:	681b      	ldr	r3, [r3, #0]
 801e1dc:	f04f 31ff 	mov.w	r1, #4294967295
 801e1e0:	4618      	mov	r0, r3
 801e1e2:	f7f0 f9c5 	bl	800e570 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801e1e6:	2301      	movs	r3, #1
}
 801e1e8:	4618      	mov	r0, r3
 801e1ea:	bd80      	pop	{r7, pc}
 801e1ec:	2000c348 	.word	0x2000c348

0801e1f0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801e1f0:	b580      	push	{r7, lr}
 801e1f2:	b082      	sub	sp, #8
 801e1f4:	af00      	add	r7, sp, #0
 801e1f6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801e1f8:	4b04      	ldr	r3, [pc, #16]	; (801e20c <sys_arch_unprotect+0x1c>)
 801e1fa:	681b      	ldr	r3, [r3, #0]
 801e1fc:	4618      	mov	r0, r3
 801e1fe:	f7f0 fa02 	bl	800e606 <osMutexRelease>
}
 801e202:	bf00      	nop
 801e204:	3708      	adds	r7, #8
 801e206:	46bd      	mov	sp, r7
 801e208:	bd80      	pop	{r7, pc}
 801e20a:	bf00      	nop
 801e20c:	2000c348 	.word	0x2000c348

0801e210 <__libc_init_array>:
 801e210:	b570      	push	{r4, r5, r6, lr}
 801e212:	4d0d      	ldr	r5, [pc, #52]	; (801e248 <__libc_init_array+0x38>)
 801e214:	4c0d      	ldr	r4, [pc, #52]	; (801e24c <__libc_init_array+0x3c>)
 801e216:	1b64      	subs	r4, r4, r5
 801e218:	10a4      	asrs	r4, r4, #2
 801e21a:	2600      	movs	r6, #0
 801e21c:	42a6      	cmp	r6, r4
 801e21e:	d109      	bne.n	801e234 <__libc_init_array+0x24>
 801e220:	4d0b      	ldr	r5, [pc, #44]	; (801e250 <__libc_init_array+0x40>)
 801e222:	4c0c      	ldr	r4, [pc, #48]	; (801e254 <__libc_init_array+0x44>)
 801e224:	f006 f842 	bl	80242ac <_init>
 801e228:	1b64      	subs	r4, r4, r5
 801e22a:	10a4      	asrs	r4, r4, #2
 801e22c:	2600      	movs	r6, #0
 801e22e:	42a6      	cmp	r6, r4
 801e230:	d105      	bne.n	801e23e <__libc_init_array+0x2e>
 801e232:	bd70      	pop	{r4, r5, r6, pc}
 801e234:	f855 3b04 	ldr.w	r3, [r5], #4
 801e238:	4798      	blx	r3
 801e23a:	3601      	adds	r6, #1
 801e23c:	e7ee      	b.n	801e21c <__libc_init_array+0xc>
 801e23e:	f855 3b04 	ldr.w	r3, [r5], #4
 801e242:	4798      	blx	r3
 801e244:	3601      	adds	r6, #1
 801e246:	e7f2      	b.n	801e22e <__libc_init_array+0x1e>
 801e248:	0806fa24 	.word	0x0806fa24
 801e24c:	0806fa24 	.word	0x0806fa24
 801e250:	0806fa24 	.word	0x0806fa24
 801e254:	0806fa2c 	.word	0x0806fa2c

0801e258 <memcmp>:
 801e258:	b510      	push	{r4, lr}
 801e25a:	3901      	subs	r1, #1
 801e25c:	4402      	add	r2, r0
 801e25e:	4290      	cmp	r0, r2
 801e260:	d101      	bne.n	801e266 <memcmp+0xe>
 801e262:	2000      	movs	r0, #0
 801e264:	e005      	b.n	801e272 <memcmp+0x1a>
 801e266:	7803      	ldrb	r3, [r0, #0]
 801e268:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e26c:	42a3      	cmp	r3, r4
 801e26e:	d001      	beq.n	801e274 <memcmp+0x1c>
 801e270:	1b18      	subs	r0, r3, r4
 801e272:	bd10      	pop	{r4, pc}
 801e274:	3001      	adds	r0, #1
 801e276:	e7f2      	b.n	801e25e <memcmp+0x6>

0801e278 <memcpy>:
 801e278:	440a      	add	r2, r1
 801e27a:	4291      	cmp	r1, r2
 801e27c:	f100 33ff 	add.w	r3, r0, #4294967295
 801e280:	d100      	bne.n	801e284 <memcpy+0xc>
 801e282:	4770      	bx	lr
 801e284:	b510      	push	{r4, lr}
 801e286:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e28a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e28e:	4291      	cmp	r1, r2
 801e290:	d1f9      	bne.n	801e286 <memcpy+0xe>
 801e292:	bd10      	pop	{r4, pc}

0801e294 <memmove>:
 801e294:	4288      	cmp	r0, r1
 801e296:	b510      	push	{r4, lr}
 801e298:	eb01 0402 	add.w	r4, r1, r2
 801e29c:	d902      	bls.n	801e2a4 <memmove+0x10>
 801e29e:	4284      	cmp	r4, r0
 801e2a0:	4623      	mov	r3, r4
 801e2a2:	d807      	bhi.n	801e2b4 <memmove+0x20>
 801e2a4:	1e43      	subs	r3, r0, #1
 801e2a6:	42a1      	cmp	r1, r4
 801e2a8:	d008      	beq.n	801e2bc <memmove+0x28>
 801e2aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e2ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e2b2:	e7f8      	b.n	801e2a6 <memmove+0x12>
 801e2b4:	4402      	add	r2, r0
 801e2b6:	4601      	mov	r1, r0
 801e2b8:	428a      	cmp	r2, r1
 801e2ba:	d100      	bne.n	801e2be <memmove+0x2a>
 801e2bc:	bd10      	pop	{r4, pc}
 801e2be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e2c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e2c6:	e7f7      	b.n	801e2b8 <memmove+0x24>

0801e2c8 <memset>:
 801e2c8:	4402      	add	r2, r0
 801e2ca:	4603      	mov	r3, r0
 801e2cc:	4293      	cmp	r3, r2
 801e2ce:	d100      	bne.n	801e2d2 <memset+0xa>
 801e2d0:	4770      	bx	lr
 801e2d2:	f803 1b01 	strb.w	r1, [r3], #1
 801e2d6:	e7f9      	b.n	801e2cc <memset+0x4>

0801e2d8 <printf>:
 801e2d8:	b40f      	push	{r0, r1, r2, r3}
 801e2da:	b507      	push	{r0, r1, r2, lr}
 801e2dc:	4906      	ldr	r1, [pc, #24]	; (801e2f8 <printf+0x20>)
 801e2de:	ab04      	add	r3, sp, #16
 801e2e0:	6808      	ldr	r0, [r1, #0]
 801e2e2:	f853 2b04 	ldr.w	r2, [r3], #4
 801e2e6:	6881      	ldr	r1, [r0, #8]
 801e2e8:	9301      	str	r3, [sp, #4]
 801e2ea:	f001 fa75 	bl	801f7d8 <_vfprintf_r>
 801e2ee:	b003      	add	sp, #12
 801e2f0:	f85d eb04 	ldr.w	lr, [sp], #4
 801e2f4:	b004      	add	sp, #16
 801e2f6:	4770      	bx	lr
 801e2f8:	20000020 	.word	0x20000020

0801e2fc <_puts_r>:
 801e2fc:	b530      	push	{r4, r5, lr}
 801e2fe:	4605      	mov	r5, r0
 801e300:	b089      	sub	sp, #36	; 0x24
 801e302:	4608      	mov	r0, r1
 801e304:	460c      	mov	r4, r1
 801e306:	f7e1 ff73 	bl	80001f0 <strlen>
 801e30a:	4b1e      	ldr	r3, [pc, #120]	; (801e384 <_puts_r+0x88>)
 801e30c:	9306      	str	r3, [sp, #24]
 801e30e:	2301      	movs	r3, #1
 801e310:	e9cd 4004 	strd	r4, r0, [sp, #16]
 801e314:	9307      	str	r3, [sp, #28]
 801e316:	4418      	add	r0, r3
 801e318:	ab04      	add	r3, sp, #16
 801e31a:	9301      	str	r3, [sp, #4]
 801e31c:	2302      	movs	r3, #2
 801e31e:	9302      	str	r3, [sp, #8]
 801e320:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801e322:	68ac      	ldr	r4, [r5, #8]
 801e324:	9003      	str	r0, [sp, #12]
 801e326:	b913      	cbnz	r3, 801e32e <_puts_r+0x32>
 801e328:	4628      	mov	r0, r5
 801e32a:	f003 fc9b 	bl	8021c64 <__sinit>
 801e32e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e330:	07db      	lsls	r3, r3, #31
 801e332:	d405      	bmi.n	801e340 <_puts_r+0x44>
 801e334:	89a3      	ldrh	r3, [r4, #12]
 801e336:	0598      	lsls	r0, r3, #22
 801e338:	d402      	bmi.n	801e340 <_puts_r+0x44>
 801e33a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e33c:	f003 ff52 	bl	80221e4 <__retarget_lock_acquire_recursive>
 801e340:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e344:	0499      	lsls	r1, r3, #18
 801e346:	d406      	bmi.n	801e356 <_puts_r+0x5a>
 801e348:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801e34c:	81a3      	strh	r3, [r4, #12]
 801e34e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e350:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801e354:	6663      	str	r3, [r4, #100]	; 0x64
 801e356:	4628      	mov	r0, r5
 801e358:	aa01      	add	r2, sp, #4
 801e35a:	4621      	mov	r1, r4
 801e35c:	f003 fdd2 	bl	8021f04 <__sfvwrite_r>
 801e360:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e362:	2800      	cmp	r0, #0
 801e364:	bf14      	ite	ne
 801e366:	f04f 35ff 	movne.w	r5, #4294967295
 801e36a:	250a      	moveq	r5, #10
 801e36c:	07da      	lsls	r2, r3, #31
 801e36e:	d405      	bmi.n	801e37c <_puts_r+0x80>
 801e370:	89a3      	ldrh	r3, [r4, #12]
 801e372:	059b      	lsls	r3, r3, #22
 801e374:	d402      	bmi.n	801e37c <_puts_r+0x80>
 801e376:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e378:	f003 ff35 	bl	80221e6 <__retarget_lock_release_recursive>
 801e37c:	4628      	mov	r0, r5
 801e37e:	b009      	add	sp, #36	; 0x24
 801e380:	bd30      	pop	{r4, r5, pc}
 801e382:	bf00      	nop
 801e384:	0806fa0e 	.word	0x0806fa0e

0801e388 <puts>:
 801e388:	4b02      	ldr	r3, [pc, #8]	; (801e394 <puts+0xc>)
 801e38a:	4601      	mov	r1, r0
 801e38c:	6818      	ldr	r0, [r3, #0]
 801e38e:	f7ff bfb5 	b.w	801e2fc <_puts_r>
 801e392:	bf00      	nop
 801e394:	20000020 	.word	0x20000020

0801e398 <rand>:
 801e398:	4b0a      	ldr	r3, [pc, #40]	; (801e3c4 <rand+0x2c>)
 801e39a:	4a0b      	ldr	r2, [pc, #44]	; (801e3c8 <rand+0x30>)
 801e39c:	490b      	ldr	r1, [pc, #44]	; (801e3cc <rand+0x34>)
 801e39e:	b510      	push	{r4, lr}
 801e3a0:	681c      	ldr	r4, [r3, #0]
 801e3a2:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 801e3a6:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 801e3aa:	4342      	muls	r2, r0
 801e3ac:	fb01 2203 	mla	r2, r1, r3, r2
 801e3b0:	fba0 0101 	umull	r0, r1, r0, r1
 801e3b4:	1c43      	adds	r3, r0, #1
 801e3b6:	eb42 0001 	adc.w	r0, r2, r1
 801e3ba:	e9c4 302a 	strd	r3, r0, [r4, #168]	; 0xa8
 801e3be:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801e3c2:	bd10      	pop	{r4, pc}
 801e3c4:	20000020 	.word	0x20000020
 801e3c8:	5851f42d 	.word	0x5851f42d
 801e3cc:	4c957f2d 	.word	0x4c957f2d

0801e3d0 <sprintf>:
 801e3d0:	b40e      	push	{r1, r2, r3}
 801e3d2:	b500      	push	{lr}
 801e3d4:	b09c      	sub	sp, #112	; 0x70
 801e3d6:	ab1d      	add	r3, sp, #116	; 0x74
 801e3d8:	9002      	str	r0, [sp, #8]
 801e3da:	9006      	str	r0, [sp, #24]
 801e3dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801e3e0:	4809      	ldr	r0, [pc, #36]	; (801e408 <sprintf+0x38>)
 801e3e2:	9107      	str	r1, [sp, #28]
 801e3e4:	9104      	str	r1, [sp, #16]
 801e3e6:	4909      	ldr	r1, [pc, #36]	; (801e40c <sprintf+0x3c>)
 801e3e8:	f853 2b04 	ldr.w	r2, [r3], #4
 801e3ec:	9105      	str	r1, [sp, #20]
 801e3ee:	6800      	ldr	r0, [r0, #0]
 801e3f0:	9301      	str	r3, [sp, #4]
 801e3f2:	a902      	add	r1, sp, #8
 801e3f4:	f000 f80c 	bl	801e410 <_svfprintf_r>
 801e3f8:	9b02      	ldr	r3, [sp, #8]
 801e3fa:	2200      	movs	r2, #0
 801e3fc:	701a      	strb	r2, [r3, #0]
 801e3fe:	b01c      	add	sp, #112	; 0x70
 801e400:	f85d eb04 	ldr.w	lr, [sp], #4
 801e404:	b003      	add	sp, #12
 801e406:	4770      	bx	lr
 801e408:	20000020 	.word	0x20000020
 801e40c:	ffff0208 	.word	0xffff0208

0801e410 <_svfprintf_r>:
 801e410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e414:	ed2d 8b04 	vpush	{d8-d9}
 801e418:	b0cf      	sub	sp, #316	; 0x13c
 801e41a:	4688      	mov	r8, r1
 801e41c:	4691      	mov	r9, r2
 801e41e:	461e      	mov	r6, r3
 801e420:	4682      	mov	sl, r0
 801e422:	f003 fed9 	bl	80221d8 <_localeconv_r>
 801e426:	6803      	ldr	r3, [r0, #0]
 801e428:	9313      	str	r3, [sp, #76]	; 0x4c
 801e42a:	4618      	mov	r0, r3
 801e42c:	f7e1 fee0 	bl	80001f0 <strlen>
 801e430:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 801e434:	900d      	str	r0, [sp, #52]	; 0x34
 801e436:	0618      	lsls	r0, r3, #24
 801e438:	d51a      	bpl.n	801e470 <_svfprintf_r+0x60>
 801e43a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801e43e:	b9bb      	cbnz	r3, 801e470 <_svfprintf_r+0x60>
 801e440:	2140      	movs	r1, #64	; 0x40
 801e442:	4650      	mov	r0, sl
 801e444:	f003 ff3c 	bl	80222c0 <_malloc_r>
 801e448:	f8c8 0000 	str.w	r0, [r8]
 801e44c:	f8c8 0010 	str.w	r0, [r8, #16]
 801e450:	b958      	cbnz	r0, 801e46a <_svfprintf_r+0x5a>
 801e452:	230c      	movs	r3, #12
 801e454:	f8ca 3000 	str.w	r3, [sl]
 801e458:	f04f 33ff 	mov.w	r3, #4294967295
 801e45c:	930c      	str	r3, [sp, #48]	; 0x30
 801e45e:	980c      	ldr	r0, [sp, #48]	; 0x30
 801e460:	b04f      	add	sp, #316	; 0x13c
 801e462:	ecbd 8b04 	vpop	{d8-d9}
 801e466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e46a:	2340      	movs	r3, #64	; 0x40
 801e46c:	f8c8 3014 	str.w	r3, [r8, #20]
 801e470:	ed9f 7b93 	vldr	d7, [pc, #588]	; 801e6c0 <_svfprintf_r+0x2b0>
 801e474:	2500      	movs	r5, #0
 801e476:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 801e47a:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 801e47e:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 801e482:	ac25      	add	r4, sp, #148	; 0x94
 801e484:	9422      	str	r4, [sp, #136]	; 0x88
 801e486:	9505      	str	r5, [sp, #20]
 801e488:	950a      	str	r5, [sp, #40]	; 0x28
 801e48a:	9512      	str	r5, [sp, #72]	; 0x48
 801e48c:	9514      	str	r5, [sp, #80]	; 0x50
 801e48e:	950c      	str	r5, [sp, #48]	; 0x30
 801e490:	464b      	mov	r3, r9
 801e492:	461d      	mov	r5, r3
 801e494:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e498:	b10a      	cbz	r2, 801e49e <_svfprintf_r+0x8e>
 801e49a:	2a25      	cmp	r2, #37	; 0x25
 801e49c:	d1f9      	bne.n	801e492 <_svfprintf_r+0x82>
 801e49e:	ebb5 0709 	subs.w	r7, r5, r9
 801e4a2:	d00d      	beq.n	801e4c0 <_svfprintf_r+0xb0>
 801e4a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e4a6:	443b      	add	r3, r7
 801e4a8:	9324      	str	r3, [sp, #144]	; 0x90
 801e4aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e4ac:	3301      	adds	r3, #1
 801e4ae:	2b07      	cmp	r3, #7
 801e4b0:	e9c4 9700 	strd	r9, r7, [r4]
 801e4b4:	9323      	str	r3, [sp, #140]	; 0x8c
 801e4b6:	dc79      	bgt.n	801e5ac <_svfprintf_r+0x19c>
 801e4b8:	3408      	adds	r4, #8
 801e4ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e4bc:	443b      	add	r3, r7
 801e4be:	930c      	str	r3, [sp, #48]	; 0x30
 801e4c0:	782b      	ldrb	r3, [r5, #0]
 801e4c2:	2b00      	cmp	r3, #0
 801e4c4:	f001 8148 	beq.w	801f758 <_svfprintf_r+0x1348>
 801e4c8:	2300      	movs	r3, #0
 801e4ca:	f04f 32ff 	mov.w	r2, #4294967295
 801e4ce:	9204      	str	r2, [sp, #16]
 801e4d0:	3501      	adds	r5, #1
 801e4d2:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801e4d6:	9310      	str	r3, [sp, #64]	; 0x40
 801e4d8:	469b      	mov	fp, r3
 801e4da:	270a      	movs	r7, #10
 801e4dc:	222b      	movs	r2, #43	; 0x2b
 801e4de:	462b      	mov	r3, r5
 801e4e0:	f813 1b01 	ldrb.w	r1, [r3], #1
 801e4e4:	9106      	str	r1, [sp, #24]
 801e4e6:	930b      	str	r3, [sp, #44]	; 0x2c
 801e4e8:	9b06      	ldr	r3, [sp, #24]
 801e4ea:	3b20      	subs	r3, #32
 801e4ec:	2b5a      	cmp	r3, #90	; 0x5a
 801e4ee:	f200 85bf 	bhi.w	801f070 <_svfprintf_r+0xc60>
 801e4f2:	e8df f013 	tbh	[pc, r3, lsl #1]
 801e4f6:	007e      	.short	0x007e
 801e4f8:	05bd05bd 	.word	0x05bd05bd
 801e4fc:	05bd0086 	.word	0x05bd0086
 801e500:	05bd05bd 	.word	0x05bd05bd
 801e504:	05bd0065 	.word	0x05bd0065
 801e508:	008905bd 	.word	0x008905bd
 801e50c:	05bd0093 	.word	0x05bd0093
 801e510:	00960090 	.word	0x00960090
 801e514:	00b305bd 	.word	0x00b305bd
 801e518:	00b600b6 	.word	0x00b600b6
 801e51c:	00b600b6 	.word	0x00b600b6
 801e520:	00b600b6 	.word	0x00b600b6
 801e524:	00b600b6 	.word	0x00b600b6
 801e528:	05bd00b6 	.word	0x05bd00b6
 801e52c:	05bd05bd 	.word	0x05bd05bd
 801e530:	05bd05bd 	.word	0x05bd05bd
 801e534:	05bd05bd 	.word	0x05bd05bd
 801e538:	05bd012c 	.word	0x05bd012c
 801e53c:	00fc00e9 	.word	0x00fc00e9
 801e540:	012c012c 	.word	0x012c012c
 801e544:	05bd012c 	.word	0x05bd012c
 801e548:	05bd05bd 	.word	0x05bd05bd
 801e54c:	00c605bd 	.word	0x00c605bd
 801e550:	05bd05bd 	.word	0x05bd05bd
 801e554:	05bd0498 	.word	0x05bd0498
 801e558:	05bd05bd 	.word	0x05bd05bd
 801e55c:	05bd04e2 	.word	0x05bd04e2
 801e560:	05bd0503 	.word	0x05bd0503
 801e564:	052505bd 	.word	0x052505bd
 801e568:	05bd05bd 	.word	0x05bd05bd
 801e56c:	05bd05bd 	.word	0x05bd05bd
 801e570:	05bd05bd 	.word	0x05bd05bd
 801e574:	05bd05bd 	.word	0x05bd05bd
 801e578:	05bd012c 	.word	0x05bd012c
 801e57c:	00fe00e9 	.word	0x00fe00e9
 801e580:	012c012c 	.word	0x012c012c
 801e584:	00c9012c 	.word	0x00c9012c
 801e588:	00dd00fe 	.word	0x00dd00fe
 801e58c:	00d605bd 	.word	0x00d605bd
 801e590:	047305bd 	.word	0x047305bd
 801e594:	04d0049a 	.word	0x04d0049a
 801e598:	05bd00dd 	.word	0x05bd00dd
 801e59c:	007c04e2 	.word	0x007c04e2
 801e5a0:	05bd0505 	.word	0x05bd0505
 801e5a4:	054405bd 	.word	0x054405bd
 801e5a8:	007c05bd 	.word	0x007c05bd
 801e5ac:	aa22      	add	r2, sp, #136	; 0x88
 801e5ae:	4641      	mov	r1, r8
 801e5b0:	4650      	mov	r0, sl
 801e5b2:	f004 fe45 	bl	8023240 <__ssprint_r>
 801e5b6:	2800      	cmp	r0, #0
 801e5b8:	f040 8137 	bne.w	801e82a <_svfprintf_r+0x41a>
 801e5bc:	ac25      	add	r4, sp, #148	; 0x94
 801e5be:	e77c      	b.n	801e4ba <_svfprintf_r+0xaa>
 801e5c0:	4650      	mov	r0, sl
 801e5c2:	f003 fe09 	bl	80221d8 <_localeconv_r>
 801e5c6:	6843      	ldr	r3, [r0, #4]
 801e5c8:	9314      	str	r3, [sp, #80]	; 0x50
 801e5ca:	4618      	mov	r0, r3
 801e5cc:	f7e1 fe10 	bl	80001f0 <strlen>
 801e5d0:	9012      	str	r0, [sp, #72]	; 0x48
 801e5d2:	4650      	mov	r0, sl
 801e5d4:	f003 fe00 	bl	80221d8 <_localeconv_r>
 801e5d8:	6883      	ldr	r3, [r0, #8]
 801e5da:	930a      	str	r3, [sp, #40]	; 0x28
 801e5dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e5de:	222b      	movs	r2, #43	; 0x2b
 801e5e0:	b12b      	cbz	r3, 801e5ee <_svfprintf_r+0x1de>
 801e5e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e5e4:	b11b      	cbz	r3, 801e5ee <_svfprintf_r+0x1de>
 801e5e6:	781b      	ldrb	r3, [r3, #0]
 801e5e8:	b10b      	cbz	r3, 801e5ee <_svfprintf_r+0x1de>
 801e5ea:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 801e5ee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801e5f0:	e775      	b.n	801e4de <_svfprintf_r+0xce>
 801e5f2:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801e5f6:	2b00      	cmp	r3, #0
 801e5f8:	d1f9      	bne.n	801e5ee <_svfprintf_r+0x1de>
 801e5fa:	2320      	movs	r3, #32
 801e5fc:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801e600:	e7f5      	b.n	801e5ee <_svfprintf_r+0x1de>
 801e602:	f04b 0b01 	orr.w	fp, fp, #1
 801e606:	e7f2      	b.n	801e5ee <_svfprintf_r+0x1de>
 801e608:	f856 3b04 	ldr.w	r3, [r6], #4
 801e60c:	9310      	str	r3, [sp, #64]	; 0x40
 801e60e:	2b00      	cmp	r3, #0
 801e610:	daed      	bge.n	801e5ee <_svfprintf_r+0x1de>
 801e612:	425b      	negs	r3, r3
 801e614:	9310      	str	r3, [sp, #64]	; 0x40
 801e616:	f04b 0b04 	orr.w	fp, fp, #4
 801e61a:	e7e8      	b.n	801e5ee <_svfprintf_r+0x1de>
 801e61c:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 801e620:	e7e5      	b.n	801e5ee <_svfprintf_r+0x1de>
 801e622:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801e624:	f815 3b01 	ldrb.w	r3, [r5], #1
 801e628:	9306      	str	r3, [sp, #24]
 801e62a:	2b2a      	cmp	r3, #42	; 0x2a
 801e62c:	d113      	bne.n	801e656 <_svfprintf_r+0x246>
 801e62e:	f856 0b04 	ldr.w	r0, [r6], #4
 801e632:	950b      	str	r5, [sp, #44]	; 0x2c
 801e634:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 801e638:	9304      	str	r3, [sp, #16]
 801e63a:	e7d8      	b.n	801e5ee <_svfprintf_r+0x1de>
 801e63c:	9904      	ldr	r1, [sp, #16]
 801e63e:	fb07 3301 	mla	r3, r7, r1, r3
 801e642:	9304      	str	r3, [sp, #16]
 801e644:	f815 3b01 	ldrb.w	r3, [r5], #1
 801e648:	9306      	str	r3, [sp, #24]
 801e64a:	9b06      	ldr	r3, [sp, #24]
 801e64c:	3b30      	subs	r3, #48	; 0x30
 801e64e:	2b09      	cmp	r3, #9
 801e650:	d9f4      	bls.n	801e63c <_svfprintf_r+0x22c>
 801e652:	950b      	str	r5, [sp, #44]	; 0x2c
 801e654:	e748      	b.n	801e4e8 <_svfprintf_r+0xd8>
 801e656:	2300      	movs	r3, #0
 801e658:	9304      	str	r3, [sp, #16]
 801e65a:	e7f6      	b.n	801e64a <_svfprintf_r+0x23a>
 801e65c:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 801e660:	e7c5      	b.n	801e5ee <_svfprintf_r+0x1de>
 801e662:	2300      	movs	r3, #0
 801e664:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801e666:	9310      	str	r3, [sp, #64]	; 0x40
 801e668:	9b06      	ldr	r3, [sp, #24]
 801e66a:	9910      	ldr	r1, [sp, #64]	; 0x40
 801e66c:	3b30      	subs	r3, #48	; 0x30
 801e66e:	fb07 3301 	mla	r3, r7, r1, r3
 801e672:	9310      	str	r3, [sp, #64]	; 0x40
 801e674:	f815 3b01 	ldrb.w	r3, [r5], #1
 801e678:	9306      	str	r3, [sp, #24]
 801e67a:	3b30      	subs	r3, #48	; 0x30
 801e67c:	2b09      	cmp	r3, #9
 801e67e:	d9f3      	bls.n	801e668 <_svfprintf_r+0x258>
 801e680:	e7e7      	b.n	801e652 <_svfprintf_r+0x242>
 801e682:	f04b 0b08 	orr.w	fp, fp, #8
 801e686:	e7b2      	b.n	801e5ee <_svfprintf_r+0x1de>
 801e688:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e68a:	781b      	ldrb	r3, [r3, #0]
 801e68c:	2b68      	cmp	r3, #104	; 0x68
 801e68e:	bf01      	itttt	eq
 801e690:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 801e692:	3301      	addeq	r3, #1
 801e694:	930b      	streq	r3, [sp, #44]	; 0x2c
 801e696:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 801e69a:	bf18      	it	ne
 801e69c:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 801e6a0:	e7a5      	b.n	801e5ee <_svfprintf_r+0x1de>
 801e6a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e6a4:	781b      	ldrb	r3, [r3, #0]
 801e6a6:	2b6c      	cmp	r3, #108	; 0x6c
 801e6a8:	d105      	bne.n	801e6b6 <_svfprintf_r+0x2a6>
 801e6aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e6ac:	3301      	adds	r3, #1
 801e6ae:	930b      	str	r3, [sp, #44]	; 0x2c
 801e6b0:	f04b 0b20 	orr.w	fp, fp, #32
 801e6b4:	e79b      	b.n	801e5ee <_svfprintf_r+0x1de>
 801e6b6:	f04b 0b10 	orr.w	fp, fp, #16
 801e6ba:	e798      	b.n	801e5ee <_svfprintf_r+0x1de>
 801e6bc:	f3af 8000 	nop.w
	...
 801e6c8:	4632      	mov	r2, r6
 801e6ca:	2000      	movs	r0, #0
 801e6cc:	f852 3b04 	ldr.w	r3, [r2], #4
 801e6d0:	9207      	str	r2, [sp, #28]
 801e6d2:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 801e6d6:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 801e6da:	2301      	movs	r3, #1
 801e6dc:	e9cd 0008 	strd	r0, r0, [sp, #32]
 801e6e0:	9003      	str	r0, [sp, #12]
 801e6e2:	9304      	str	r3, [sp, #16]
 801e6e4:	4606      	mov	r6, r0
 801e6e6:	4605      	mov	r5, r0
 801e6e8:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 801e6ec:	e1bc      	b.n	801ea68 <_svfprintf_r+0x658>
 801e6ee:	f04b 0b10 	orr.w	fp, fp, #16
 801e6f2:	f01b 0f20 	tst.w	fp, #32
 801e6f6:	d012      	beq.n	801e71e <_svfprintf_r+0x30e>
 801e6f8:	1df3      	adds	r3, r6, #7
 801e6fa:	f023 0307 	bic.w	r3, r3, #7
 801e6fe:	461a      	mov	r2, r3
 801e700:	685d      	ldr	r5, [r3, #4]
 801e702:	f852 6b08 	ldr.w	r6, [r2], #8
 801e706:	9207      	str	r2, [sp, #28]
 801e708:	2d00      	cmp	r5, #0
 801e70a:	da06      	bge.n	801e71a <_svfprintf_r+0x30a>
 801e70c:	4276      	negs	r6, r6
 801e70e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801e712:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 801e716:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801e71a:	2301      	movs	r3, #1
 801e71c:	e396      	b.n	801ee4c <_svfprintf_r+0xa3c>
 801e71e:	4633      	mov	r3, r6
 801e720:	f01b 0f10 	tst.w	fp, #16
 801e724:	f853 5b04 	ldr.w	r5, [r3], #4
 801e728:	9307      	str	r3, [sp, #28]
 801e72a:	d002      	beq.n	801e732 <_svfprintf_r+0x322>
 801e72c:	462e      	mov	r6, r5
 801e72e:	17ed      	asrs	r5, r5, #31
 801e730:	e7ea      	b.n	801e708 <_svfprintf_r+0x2f8>
 801e732:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801e736:	d003      	beq.n	801e740 <_svfprintf_r+0x330>
 801e738:	b22e      	sxth	r6, r5
 801e73a:	f345 35c0 	sbfx	r5, r5, #15, #1
 801e73e:	e7e3      	b.n	801e708 <_svfprintf_r+0x2f8>
 801e740:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801e744:	d0f2      	beq.n	801e72c <_svfprintf_r+0x31c>
 801e746:	b26e      	sxtb	r6, r5
 801e748:	f345 15c0 	sbfx	r5, r5, #7, #1
 801e74c:	e7dc      	b.n	801e708 <_svfprintf_r+0x2f8>
 801e74e:	3607      	adds	r6, #7
 801e750:	f026 0307 	bic.w	r3, r6, #7
 801e754:	ecb3 7b02 	vldmia	r3!, {d7}
 801e758:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 801e75c:	9307      	str	r3, [sp, #28]
 801e75e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e760:	ee09 3a10 	vmov	s18, r3
 801e764:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e766:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e76a:	ee09 3a90 	vmov	s19, r3
 801e76e:	f04f 32ff 	mov.w	r2, #4294967295
 801e772:	4b3a      	ldr	r3, [pc, #232]	; (801e85c <_svfprintf_r+0x44c>)
 801e774:	ec51 0b19 	vmov	r0, r1, d9
 801e778:	f7e2 f9e8 	bl	8000b4c <__aeabi_dcmpun>
 801e77c:	bb10      	cbnz	r0, 801e7c4 <_svfprintf_r+0x3b4>
 801e77e:	4b37      	ldr	r3, [pc, #220]	; (801e85c <_svfprintf_r+0x44c>)
 801e780:	ec51 0b19 	vmov	r0, r1, d9
 801e784:	f04f 32ff 	mov.w	r2, #4294967295
 801e788:	f7e2 f9c2 	bl	8000b10 <__aeabi_dcmple>
 801e78c:	b9d0      	cbnz	r0, 801e7c4 <_svfprintf_r+0x3b4>
 801e78e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801e792:	2200      	movs	r2, #0
 801e794:	2300      	movs	r3, #0
 801e796:	f7e2 f9b1 	bl	8000afc <__aeabi_dcmplt>
 801e79a:	b110      	cbz	r0, 801e7a2 <_svfprintf_r+0x392>
 801e79c:	232d      	movs	r3, #45	; 0x2d
 801e79e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801e7a2:	4a2f      	ldr	r2, [pc, #188]	; (801e860 <_svfprintf_r+0x450>)
 801e7a4:	482f      	ldr	r0, [pc, #188]	; (801e864 <_svfprintf_r+0x454>)
 801e7a6:	9b06      	ldr	r3, [sp, #24]
 801e7a8:	2100      	movs	r1, #0
 801e7aa:	2b47      	cmp	r3, #71	; 0x47
 801e7ac:	bfd4      	ite	le
 801e7ae:	4691      	movle	r9, r2
 801e7b0:	4681      	movgt	r9, r0
 801e7b2:	2303      	movs	r3, #3
 801e7b4:	e9cd 1303 	strd	r1, r3, [sp, #12]
 801e7b8:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 801e7bc:	2600      	movs	r6, #0
 801e7be:	4633      	mov	r3, r6
 801e7c0:	f001 b800 	b.w	801f7c4 <_svfprintf_r+0x13b4>
 801e7c4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801e7c8:	4610      	mov	r0, r2
 801e7ca:	4619      	mov	r1, r3
 801e7cc:	f7e2 f9be 	bl	8000b4c <__aeabi_dcmpun>
 801e7d0:	b140      	cbz	r0, 801e7e4 <_svfprintf_r+0x3d4>
 801e7d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e7d4:	4a24      	ldr	r2, [pc, #144]	; (801e868 <_svfprintf_r+0x458>)
 801e7d6:	4825      	ldr	r0, [pc, #148]	; (801e86c <_svfprintf_r+0x45c>)
 801e7d8:	2b00      	cmp	r3, #0
 801e7da:	bfbc      	itt	lt
 801e7dc:	232d      	movlt	r3, #45	; 0x2d
 801e7de:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 801e7e2:	e7e0      	b.n	801e7a6 <_svfprintf_r+0x396>
 801e7e4:	9b06      	ldr	r3, [sp, #24]
 801e7e6:	f023 0320 	bic.w	r3, r3, #32
 801e7ea:	2b41      	cmp	r3, #65	; 0x41
 801e7ec:	9308      	str	r3, [sp, #32]
 801e7ee:	d125      	bne.n	801e83c <_svfprintf_r+0x42c>
 801e7f0:	2330      	movs	r3, #48	; 0x30
 801e7f2:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801e7f6:	9b06      	ldr	r3, [sp, #24]
 801e7f8:	2b61      	cmp	r3, #97	; 0x61
 801e7fa:	bf0c      	ite	eq
 801e7fc:	2378      	moveq	r3, #120	; 0x78
 801e7fe:	2358      	movne	r3, #88	; 0x58
 801e800:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 801e804:	9b04      	ldr	r3, [sp, #16]
 801e806:	2b63      	cmp	r3, #99	; 0x63
 801e808:	f04b 0b02 	orr.w	fp, fp, #2
 801e80c:	dd30      	ble.n	801e870 <_svfprintf_r+0x460>
 801e80e:	1c59      	adds	r1, r3, #1
 801e810:	4650      	mov	r0, sl
 801e812:	f003 fd55 	bl	80222c0 <_malloc_r>
 801e816:	4681      	mov	r9, r0
 801e818:	2800      	cmp	r0, #0
 801e81a:	f040 81fd 	bne.w	801ec18 <_svfprintf_r+0x808>
 801e81e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 801e822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e826:	f8a8 300c 	strh.w	r3, [r8, #12]
 801e82a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 801e82e:	f013 0f40 	tst.w	r3, #64	; 0x40
 801e832:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e834:	bf18      	it	ne
 801e836:	f04f 33ff 	movne.w	r3, #4294967295
 801e83a:	e60f      	b.n	801e45c <_svfprintf_r+0x4c>
 801e83c:	9b04      	ldr	r3, [sp, #16]
 801e83e:	3301      	adds	r3, #1
 801e840:	f000 81ec 	beq.w	801ec1c <_svfprintf_r+0x80c>
 801e844:	9b08      	ldr	r3, [sp, #32]
 801e846:	2b47      	cmp	r3, #71	; 0x47
 801e848:	f040 81eb 	bne.w	801ec22 <_svfprintf_r+0x812>
 801e84c:	9b04      	ldr	r3, [sp, #16]
 801e84e:	2b00      	cmp	r3, #0
 801e850:	f040 81e7 	bne.w	801ec22 <_svfprintf_r+0x812>
 801e854:	9303      	str	r3, [sp, #12]
 801e856:	2301      	movs	r3, #1
 801e858:	9304      	str	r3, [sp, #16]
 801e85a:	e00c      	b.n	801e876 <_svfprintf_r+0x466>
 801e85c:	7fefffff 	.word	0x7fefffff
 801e860:	0806f768 	.word	0x0806f768
 801e864:	0806f76c 	.word	0x0806f76c
 801e868:	0806f770 	.word	0x0806f770
 801e86c:	0806f774 	.word	0x0806f774
 801e870:	9003      	str	r0, [sp, #12]
 801e872:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 801e876:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 801e87a:	9311      	str	r3, [sp, #68]	; 0x44
 801e87c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e87e:	2b00      	cmp	r3, #0
 801e880:	f280 81d1 	bge.w	801ec26 <_svfprintf_r+0x816>
 801e884:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e886:	ee08 3a10 	vmov	s16, r3
 801e88a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e88c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801e890:	ee08 3a90 	vmov	s17, r3
 801e894:	232d      	movs	r3, #45	; 0x2d
 801e896:	9318      	str	r3, [sp, #96]	; 0x60
 801e898:	9b08      	ldr	r3, [sp, #32]
 801e89a:	2b41      	cmp	r3, #65	; 0x41
 801e89c:	f040 81e1 	bne.w	801ec62 <_svfprintf_r+0x852>
 801e8a0:	eeb0 0a48 	vmov.f32	s0, s16
 801e8a4:	eef0 0a68 	vmov.f32	s1, s17
 801e8a8:	a81c      	add	r0, sp, #112	; 0x70
 801e8aa:	f004 fc2b 	bl	8023104 <frexp>
 801e8ae:	2200      	movs	r2, #0
 801e8b0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801e8b4:	ec51 0b10 	vmov	r0, r1, d0
 801e8b8:	f7e1 feae 	bl	8000618 <__aeabi_dmul>
 801e8bc:	2200      	movs	r2, #0
 801e8be:	2300      	movs	r3, #0
 801e8c0:	4606      	mov	r6, r0
 801e8c2:	460f      	mov	r7, r1
 801e8c4:	f7e2 f910 	bl	8000ae8 <__aeabi_dcmpeq>
 801e8c8:	b108      	cbz	r0, 801e8ce <_svfprintf_r+0x4be>
 801e8ca:	2301      	movs	r3, #1
 801e8cc:	931c      	str	r3, [sp, #112]	; 0x70
 801e8ce:	4ba7      	ldr	r3, [pc, #668]	; (801eb6c <_svfprintf_r+0x75c>)
 801e8d0:	4aa7      	ldr	r2, [pc, #668]	; (801eb70 <_svfprintf_r+0x760>)
 801e8d2:	9906      	ldr	r1, [sp, #24]
 801e8d4:	2961      	cmp	r1, #97	; 0x61
 801e8d6:	bf18      	it	ne
 801e8d8:	461a      	movne	r2, r3
 801e8da:	9b04      	ldr	r3, [sp, #16]
 801e8dc:	9217      	str	r2, [sp, #92]	; 0x5c
 801e8de:	3b01      	subs	r3, #1
 801e8e0:	9305      	str	r3, [sp, #20]
 801e8e2:	464d      	mov	r5, r9
 801e8e4:	4ba3      	ldr	r3, [pc, #652]	; (801eb74 <_svfprintf_r+0x764>)
 801e8e6:	2200      	movs	r2, #0
 801e8e8:	4630      	mov	r0, r6
 801e8ea:	4639      	mov	r1, r7
 801e8ec:	f7e1 fe94 	bl	8000618 <__aeabi_dmul>
 801e8f0:	460f      	mov	r7, r1
 801e8f2:	4606      	mov	r6, r0
 801e8f4:	f7e2 f940 	bl	8000b78 <__aeabi_d2iz>
 801e8f8:	9019      	str	r0, [sp, #100]	; 0x64
 801e8fa:	f7e1 fe23 	bl	8000544 <__aeabi_i2d>
 801e8fe:	4602      	mov	r2, r0
 801e900:	460b      	mov	r3, r1
 801e902:	4630      	mov	r0, r6
 801e904:	4639      	mov	r1, r7
 801e906:	f7e1 fccf 	bl	80002a8 <__aeabi_dsub>
 801e90a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801e90c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e90e:	5c9b      	ldrb	r3, [r3, r2]
 801e910:	f805 3b01 	strb.w	r3, [r5], #1
 801e914:	9b05      	ldr	r3, [sp, #20]
 801e916:	9309      	str	r3, [sp, #36]	; 0x24
 801e918:	1c5a      	adds	r2, r3, #1
 801e91a:	4606      	mov	r6, r0
 801e91c:	460f      	mov	r7, r1
 801e91e:	d007      	beq.n	801e930 <_svfprintf_r+0x520>
 801e920:	3b01      	subs	r3, #1
 801e922:	9305      	str	r3, [sp, #20]
 801e924:	2200      	movs	r2, #0
 801e926:	2300      	movs	r3, #0
 801e928:	f7e2 f8de 	bl	8000ae8 <__aeabi_dcmpeq>
 801e92c:	2800      	cmp	r0, #0
 801e92e:	d0d9      	beq.n	801e8e4 <_svfprintf_r+0x4d4>
 801e930:	4b91      	ldr	r3, [pc, #580]	; (801eb78 <_svfprintf_r+0x768>)
 801e932:	2200      	movs	r2, #0
 801e934:	4630      	mov	r0, r6
 801e936:	4639      	mov	r1, r7
 801e938:	f7e2 f8fe 	bl	8000b38 <__aeabi_dcmpgt>
 801e93c:	b960      	cbnz	r0, 801e958 <_svfprintf_r+0x548>
 801e93e:	4b8e      	ldr	r3, [pc, #568]	; (801eb78 <_svfprintf_r+0x768>)
 801e940:	2200      	movs	r2, #0
 801e942:	4630      	mov	r0, r6
 801e944:	4639      	mov	r1, r7
 801e946:	f7e2 f8cf 	bl	8000ae8 <__aeabi_dcmpeq>
 801e94a:	2800      	cmp	r0, #0
 801e94c:	f000 8184 	beq.w	801ec58 <_svfprintf_r+0x848>
 801e950:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e952:	07db      	lsls	r3, r3, #31
 801e954:	f140 8180 	bpl.w	801ec58 <_svfprintf_r+0x848>
 801e958:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e95a:	9520      	str	r5, [sp, #128]	; 0x80
 801e95c:	7bd9      	ldrb	r1, [r3, #15]
 801e95e:	2030      	movs	r0, #48	; 0x30
 801e960:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801e962:	1e53      	subs	r3, r2, #1
 801e964:	9320      	str	r3, [sp, #128]	; 0x80
 801e966:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 801e96a:	428b      	cmp	r3, r1
 801e96c:	f000 8163 	beq.w	801ec36 <_svfprintf_r+0x826>
 801e970:	2b39      	cmp	r3, #57	; 0x39
 801e972:	bf0b      	itete	eq
 801e974:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 801e976:	3301      	addne	r3, #1
 801e978:	7a9b      	ldrbeq	r3, [r3, #10]
 801e97a:	b2db      	uxtbne	r3, r3
 801e97c:	f802 3c01 	strb.w	r3, [r2, #-1]
 801e980:	eba5 0309 	sub.w	r3, r5, r9
 801e984:	9305      	str	r3, [sp, #20]
 801e986:	9b08      	ldr	r3, [sp, #32]
 801e988:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801e98a:	2b47      	cmp	r3, #71	; 0x47
 801e98c:	f040 81b1 	bne.w	801ecf2 <_svfprintf_r+0x8e2>
 801e990:	1cef      	adds	r7, r5, #3
 801e992:	db03      	blt.n	801e99c <_svfprintf_r+0x58c>
 801e994:	9b04      	ldr	r3, [sp, #16]
 801e996:	42ab      	cmp	r3, r5
 801e998:	f280 81d6 	bge.w	801ed48 <_svfprintf_r+0x938>
 801e99c:	9b06      	ldr	r3, [sp, #24]
 801e99e:	3b02      	subs	r3, #2
 801e9a0:	9306      	str	r3, [sp, #24]
 801e9a2:	9906      	ldr	r1, [sp, #24]
 801e9a4:	f89d 2018 	ldrb.w	r2, [sp, #24]
 801e9a8:	f021 0120 	bic.w	r1, r1, #32
 801e9ac:	2941      	cmp	r1, #65	; 0x41
 801e9ae:	bf08      	it	eq
 801e9b0:	320f      	addeq	r2, #15
 801e9b2:	f105 33ff 	add.w	r3, r5, #4294967295
 801e9b6:	bf06      	itte	eq
 801e9b8:	b2d2      	uxtbeq	r2, r2
 801e9ba:	2101      	moveq	r1, #1
 801e9bc:	2100      	movne	r1, #0
 801e9be:	2b00      	cmp	r3, #0
 801e9c0:	931c      	str	r3, [sp, #112]	; 0x70
 801e9c2:	bfb8      	it	lt
 801e9c4:	f1c5 0301 	rsblt	r3, r5, #1
 801e9c8:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 801e9cc:	bfb4      	ite	lt
 801e9ce:	222d      	movlt	r2, #45	; 0x2d
 801e9d0:	222b      	movge	r2, #43	; 0x2b
 801e9d2:	2b09      	cmp	r3, #9
 801e9d4:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 801e9d8:	f340 81a4 	ble.w	801ed24 <_svfprintf_r+0x914>
 801e9dc:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 801e9e0:	260a      	movs	r6, #10
 801e9e2:	4611      	mov	r1, r2
 801e9e4:	fb93 f5f6 	sdiv	r5, r3, r6
 801e9e8:	fb06 3015 	mls	r0, r6, r5, r3
 801e9ec:	3030      	adds	r0, #48	; 0x30
 801e9ee:	f801 0c01 	strb.w	r0, [r1, #-1]
 801e9f2:	4618      	mov	r0, r3
 801e9f4:	2863      	cmp	r0, #99	; 0x63
 801e9f6:	f102 32ff 	add.w	r2, r2, #4294967295
 801e9fa:	462b      	mov	r3, r5
 801e9fc:	dcf1      	bgt.n	801e9e2 <_svfprintf_r+0x5d2>
 801e9fe:	3330      	adds	r3, #48	; 0x30
 801ea00:	1e88      	subs	r0, r1, #2
 801ea02:	f802 3c01 	strb.w	r3, [r2, #-1]
 801ea06:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 801ea0a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 801ea0e:	4603      	mov	r3, r0
 801ea10:	42ab      	cmp	r3, r5
 801ea12:	f0c0 8182 	bcc.w	801ed1a <_svfprintf_r+0x90a>
 801ea16:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 801ea1a:	1a52      	subs	r2, r2, r1
 801ea1c:	42a8      	cmp	r0, r5
 801ea1e:	bf88      	it	hi
 801ea20:	2200      	movhi	r2, #0
 801ea22:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 801ea26:	441a      	add	r2, r3
 801ea28:	ab1e      	add	r3, sp, #120	; 0x78
 801ea2a:	1ad3      	subs	r3, r2, r3
 801ea2c:	9a05      	ldr	r2, [sp, #20]
 801ea2e:	9315      	str	r3, [sp, #84]	; 0x54
 801ea30:	2a01      	cmp	r2, #1
 801ea32:	4413      	add	r3, r2
 801ea34:	9304      	str	r3, [sp, #16]
 801ea36:	dc02      	bgt.n	801ea3e <_svfprintf_r+0x62e>
 801ea38:	f01b 0f01 	tst.w	fp, #1
 801ea3c:	d003      	beq.n	801ea46 <_svfprintf_r+0x636>
 801ea3e:	9b04      	ldr	r3, [sp, #16]
 801ea40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ea42:	4413      	add	r3, r2
 801ea44:	9304      	str	r3, [sp, #16]
 801ea46:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 801ea4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801ea4e:	9311      	str	r3, [sp, #68]	; 0x44
 801ea50:	2300      	movs	r3, #0
 801ea52:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801ea56:	461d      	mov	r5, r3
 801ea58:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ea5a:	b113      	cbz	r3, 801ea62 <_svfprintf_r+0x652>
 801ea5c:	232d      	movs	r3, #45	; 0x2d
 801ea5e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801ea62:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 801ea66:	2600      	movs	r6, #0
 801ea68:	9b04      	ldr	r3, [sp, #16]
 801ea6a:	42b3      	cmp	r3, r6
 801ea6c:	bfb8      	it	lt
 801ea6e:	4633      	movlt	r3, r6
 801ea70:	9311      	str	r3, [sp, #68]	; 0x44
 801ea72:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801ea76:	b113      	cbz	r3, 801ea7e <_svfprintf_r+0x66e>
 801ea78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ea7a:	3301      	adds	r3, #1
 801ea7c:	9311      	str	r3, [sp, #68]	; 0x44
 801ea7e:	f01b 0302 	ands.w	r3, fp, #2
 801ea82:	9317      	str	r3, [sp, #92]	; 0x5c
 801ea84:	bf1e      	ittt	ne
 801ea86:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 801ea88:	3302      	addne	r3, #2
 801ea8a:	9311      	strne	r3, [sp, #68]	; 0x44
 801ea8c:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 801ea90:	9318      	str	r3, [sp, #96]	; 0x60
 801ea92:	d11f      	bne.n	801ead4 <_svfprintf_r+0x6c4>
 801ea94:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801ea98:	1a9f      	subs	r7, r3, r2
 801ea9a:	2f00      	cmp	r7, #0
 801ea9c:	dd1a      	ble.n	801ead4 <_svfprintf_r+0x6c4>
 801ea9e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801eaa2:	4836      	ldr	r0, [pc, #216]	; (801eb7c <_svfprintf_r+0x76c>)
 801eaa4:	6020      	str	r0, [r4, #0]
 801eaa6:	2f10      	cmp	r7, #16
 801eaa8:	f103 0301 	add.w	r3, r3, #1
 801eaac:	f104 0108 	add.w	r1, r4, #8
 801eab0:	f300 82ed 	bgt.w	801f08e <_svfprintf_r+0xc7e>
 801eab4:	6067      	str	r7, [r4, #4]
 801eab6:	2b07      	cmp	r3, #7
 801eab8:	4417      	add	r7, r2
 801eaba:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 801eabe:	f340 82f9 	ble.w	801f0b4 <_svfprintf_r+0xca4>
 801eac2:	aa22      	add	r2, sp, #136	; 0x88
 801eac4:	4641      	mov	r1, r8
 801eac6:	4650      	mov	r0, sl
 801eac8:	f004 fbba 	bl	8023240 <__ssprint_r>
 801eacc:	2800      	cmp	r0, #0
 801eace:	f040 8621 	bne.w	801f714 <_svfprintf_r+0x1304>
 801ead2:	ac25      	add	r4, sp, #148	; 0x94
 801ead4:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801ead8:	b173      	cbz	r3, 801eaf8 <_svfprintf_r+0x6e8>
 801eada:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 801eade:	6023      	str	r3, [r4, #0]
 801eae0:	2301      	movs	r3, #1
 801eae2:	6063      	str	r3, [r4, #4]
 801eae4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801eae6:	3301      	adds	r3, #1
 801eae8:	9324      	str	r3, [sp, #144]	; 0x90
 801eaea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801eaec:	3301      	adds	r3, #1
 801eaee:	2b07      	cmp	r3, #7
 801eaf0:	9323      	str	r3, [sp, #140]	; 0x8c
 801eaf2:	f300 82e1 	bgt.w	801f0b8 <_svfprintf_r+0xca8>
 801eaf6:	3408      	adds	r4, #8
 801eaf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801eafa:	b16b      	cbz	r3, 801eb18 <_svfprintf_r+0x708>
 801eafc:	ab1b      	add	r3, sp, #108	; 0x6c
 801eafe:	6023      	str	r3, [r4, #0]
 801eb00:	2302      	movs	r3, #2
 801eb02:	6063      	str	r3, [r4, #4]
 801eb04:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801eb06:	3302      	adds	r3, #2
 801eb08:	9324      	str	r3, [sp, #144]	; 0x90
 801eb0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801eb0c:	3301      	adds	r3, #1
 801eb0e:	2b07      	cmp	r3, #7
 801eb10:	9323      	str	r3, [sp, #140]	; 0x8c
 801eb12:	f300 82db 	bgt.w	801f0cc <_svfprintf_r+0xcbc>
 801eb16:	3408      	adds	r4, #8
 801eb18:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801eb1a:	2b80      	cmp	r3, #128	; 0x80
 801eb1c:	d11f      	bne.n	801eb5e <_svfprintf_r+0x74e>
 801eb1e:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801eb22:	1a9f      	subs	r7, r3, r2
 801eb24:	2f00      	cmp	r7, #0
 801eb26:	dd1a      	ble.n	801eb5e <_svfprintf_r+0x74e>
 801eb28:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801eb2c:	4814      	ldr	r0, [pc, #80]	; (801eb80 <_svfprintf_r+0x770>)
 801eb2e:	6020      	str	r0, [r4, #0]
 801eb30:	2f10      	cmp	r7, #16
 801eb32:	f103 0301 	add.w	r3, r3, #1
 801eb36:	f104 0108 	add.w	r1, r4, #8
 801eb3a:	f300 82d1 	bgt.w	801f0e0 <_svfprintf_r+0xcd0>
 801eb3e:	6067      	str	r7, [r4, #4]
 801eb40:	2b07      	cmp	r3, #7
 801eb42:	4417      	add	r7, r2
 801eb44:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 801eb48:	f340 82dd 	ble.w	801f106 <_svfprintf_r+0xcf6>
 801eb4c:	aa22      	add	r2, sp, #136	; 0x88
 801eb4e:	4641      	mov	r1, r8
 801eb50:	4650      	mov	r0, sl
 801eb52:	f004 fb75 	bl	8023240 <__ssprint_r>
 801eb56:	2800      	cmp	r0, #0
 801eb58:	f040 85dc 	bne.w	801f714 <_svfprintf_r+0x1304>
 801eb5c:	ac25      	add	r4, sp, #148	; 0x94
 801eb5e:	9b04      	ldr	r3, [sp, #16]
 801eb60:	1af6      	subs	r6, r6, r3
 801eb62:	2e00      	cmp	r6, #0
 801eb64:	dd28      	ble.n	801ebb8 <_svfprintf_r+0x7a8>
 801eb66:	4f06      	ldr	r7, [pc, #24]	; (801eb80 <_svfprintf_r+0x770>)
 801eb68:	e00c      	b.n	801eb84 <_svfprintf_r+0x774>
 801eb6a:	bf00      	nop
 801eb6c:	0806f789 	.word	0x0806f789
 801eb70:	0806f778 	.word	0x0806f778
 801eb74:	40300000 	.word	0x40300000
 801eb78:	3fe00000 	.word	0x3fe00000
 801eb7c:	0806f79c 	.word	0x0806f79c
 801eb80:	0806f7ac 	.word	0x0806f7ac
 801eb84:	6027      	str	r7, [r4, #0]
 801eb86:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801eb8a:	2e10      	cmp	r6, #16
 801eb8c:	f103 0301 	add.w	r3, r3, #1
 801eb90:	f104 0108 	add.w	r1, r4, #8
 801eb94:	f300 82b9 	bgt.w	801f10a <_svfprintf_r+0xcfa>
 801eb98:	6066      	str	r6, [r4, #4]
 801eb9a:	2b07      	cmp	r3, #7
 801eb9c:	4416      	add	r6, r2
 801eb9e:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801eba2:	f340 82c5 	ble.w	801f130 <_svfprintf_r+0xd20>
 801eba6:	aa22      	add	r2, sp, #136	; 0x88
 801eba8:	4641      	mov	r1, r8
 801ebaa:	4650      	mov	r0, sl
 801ebac:	f004 fb48 	bl	8023240 <__ssprint_r>
 801ebb0:	2800      	cmp	r0, #0
 801ebb2:	f040 85af 	bne.w	801f714 <_svfprintf_r+0x1304>
 801ebb6:	ac25      	add	r4, sp, #148	; 0x94
 801ebb8:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801ebbc:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801ebbe:	f040 82bd 	bne.w	801f13c <_svfprintf_r+0xd2c>
 801ebc2:	9b04      	ldr	r3, [sp, #16]
 801ebc4:	f8c4 9000 	str.w	r9, [r4]
 801ebc8:	441e      	add	r6, r3
 801ebca:	6063      	str	r3, [r4, #4]
 801ebcc:	9624      	str	r6, [sp, #144]	; 0x90
 801ebce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ebd0:	3301      	adds	r3, #1
 801ebd2:	2b07      	cmp	r3, #7
 801ebd4:	9323      	str	r3, [sp, #140]	; 0x8c
 801ebd6:	f300 82f6 	bgt.w	801f1c6 <_svfprintf_r+0xdb6>
 801ebda:	3408      	adds	r4, #8
 801ebdc:	f01b 0f04 	tst.w	fp, #4
 801ebe0:	f040 857a 	bne.w	801f6d8 <_svfprintf_r+0x12c8>
 801ebe4:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
 801ebe8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ebea:	428a      	cmp	r2, r1
 801ebec:	bfac      	ite	ge
 801ebee:	189b      	addge	r3, r3, r2
 801ebf0:	185b      	addlt	r3, r3, r1
 801ebf2:	930c      	str	r3, [sp, #48]	; 0x30
 801ebf4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ebf6:	b13b      	cbz	r3, 801ec08 <_svfprintf_r+0x7f8>
 801ebf8:	aa22      	add	r2, sp, #136	; 0x88
 801ebfa:	4641      	mov	r1, r8
 801ebfc:	4650      	mov	r0, sl
 801ebfe:	f004 fb1f 	bl	8023240 <__ssprint_r>
 801ec02:	2800      	cmp	r0, #0
 801ec04:	f040 8586 	bne.w	801f714 <_svfprintf_r+0x1304>
 801ec08:	2300      	movs	r3, #0
 801ec0a:	9323      	str	r3, [sp, #140]	; 0x8c
 801ec0c:	9b03      	ldr	r3, [sp, #12]
 801ec0e:	2b00      	cmp	r3, #0
 801ec10:	f040 859c 	bne.w	801f74c <_svfprintf_r+0x133c>
 801ec14:	ac25      	add	r4, sp, #148	; 0x94
 801ec16:	e0ec      	b.n	801edf2 <_svfprintf_r+0x9e2>
 801ec18:	9003      	str	r0, [sp, #12]
 801ec1a:	e62c      	b.n	801e876 <_svfprintf_r+0x466>
 801ec1c:	9003      	str	r0, [sp, #12]
 801ec1e:	2306      	movs	r3, #6
 801ec20:	e61a      	b.n	801e858 <_svfprintf_r+0x448>
 801ec22:	9003      	str	r0, [sp, #12]
 801ec24:	e627      	b.n	801e876 <_svfprintf_r+0x466>
 801ec26:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 801ec2a:	2300      	movs	r3, #0
 801ec2c:	eeb0 8a47 	vmov.f32	s16, s14
 801ec30:	eef0 8a67 	vmov.f32	s17, s15
 801ec34:	e62f      	b.n	801e896 <_svfprintf_r+0x486>
 801ec36:	f802 0c01 	strb.w	r0, [r2, #-1]
 801ec3a:	e691      	b.n	801e960 <_svfprintf_r+0x550>
 801ec3c:	f803 0b01 	strb.w	r0, [r3], #1
 801ec40:	1aca      	subs	r2, r1, r3
 801ec42:	2a00      	cmp	r2, #0
 801ec44:	dafa      	bge.n	801ec3c <_svfprintf_r+0x82c>
 801ec46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ec48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ec4a:	3201      	adds	r2, #1
 801ec4c:	f103 0301 	add.w	r3, r3, #1
 801ec50:	bfb8      	it	lt
 801ec52:	2300      	movlt	r3, #0
 801ec54:	441d      	add	r5, r3
 801ec56:	e693      	b.n	801e980 <_svfprintf_r+0x570>
 801ec58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ec5a:	462b      	mov	r3, r5
 801ec5c:	18a9      	adds	r1, r5, r2
 801ec5e:	2030      	movs	r0, #48	; 0x30
 801ec60:	e7ee      	b.n	801ec40 <_svfprintf_r+0x830>
 801ec62:	9b08      	ldr	r3, [sp, #32]
 801ec64:	2b46      	cmp	r3, #70	; 0x46
 801ec66:	d005      	beq.n	801ec74 <_svfprintf_r+0x864>
 801ec68:	2b45      	cmp	r3, #69	; 0x45
 801ec6a:	d11b      	bne.n	801eca4 <_svfprintf_r+0x894>
 801ec6c:	9b04      	ldr	r3, [sp, #16]
 801ec6e:	1c5d      	adds	r5, r3, #1
 801ec70:	2102      	movs	r1, #2
 801ec72:	e001      	b.n	801ec78 <_svfprintf_r+0x868>
 801ec74:	9d04      	ldr	r5, [sp, #16]
 801ec76:	2103      	movs	r1, #3
 801ec78:	ab20      	add	r3, sp, #128	; 0x80
 801ec7a:	9301      	str	r3, [sp, #4]
 801ec7c:	ab1d      	add	r3, sp, #116	; 0x74
 801ec7e:	9300      	str	r3, [sp, #0]
 801ec80:	462a      	mov	r2, r5
 801ec82:	ab1c      	add	r3, sp, #112	; 0x70
 801ec84:	4650      	mov	r0, sl
 801ec86:	eeb0 0a48 	vmov.f32	s0, s16
 801ec8a:	eef0 0a68 	vmov.f32	s1, s17
 801ec8e:	f002 f913 	bl	8020eb8 <_dtoa_r>
 801ec92:	9b08      	ldr	r3, [sp, #32]
 801ec94:	2b47      	cmp	r3, #71	; 0x47
 801ec96:	4681      	mov	r9, r0
 801ec98:	d106      	bne.n	801eca8 <_svfprintf_r+0x898>
 801ec9a:	f01b 0f01 	tst.w	fp, #1
 801ec9e:	d103      	bne.n	801eca8 <_svfprintf_r+0x898>
 801eca0:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801eca2:	e66d      	b.n	801e980 <_svfprintf_r+0x570>
 801eca4:	9d04      	ldr	r5, [sp, #16]
 801eca6:	e7e3      	b.n	801ec70 <_svfprintf_r+0x860>
 801eca8:	9b08      	ldr	r3, [sp, #32]
 801ecaa:	2b46      	cmp	r3, #70	; 0x46
 801ecac:	eb09 0605 	add.w	r6, r9, r5
 801ecb0:	d10f      	bne.n	801ecd2 <_svfprintf_r+0x8c2>
 801ecb2:	f899 3000 	ldrb.w	r3, [r9]
 801ecb6:	2b30      	cmp	r3, #48	; 0x30
 801ecb8:	d109      	bne.n	801ecce <_svfprintf_r+0x8be>
 801ecba:	ec51 0b18 	vmov	r0, r1, d8
 801ecbe:	2200      	movs	r2, #0
 801ecc0:	2300      	movs	r3, #0
 801ecc2:	f7e1 ff11 	bl	8000ae8 <__aeabi_dcmpeq>
 801ecc6:	b910      	cbnz	r0, 801ecce <_svfprintf_r+0x8be>
 801ecc8:	f1c5 0501 	rsb	r5, r5, #1
 801eccc:	951c      	str	r5, [sp, #112]	; 0x70
 801ecce:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ecd0:	441e      	add	r6, r3
 801ecd2:	ec51 0b18 	vmov	r0, r1, d8
 801ecd6:	2200      	movs	r2, #0
 801ecd8:	2300      	movs	r3, #0
 801ecda:	f7e1 ff05 	bl	8000ae8 <__aeabi_dcmpeq>
 801ecde:	b100      	cbz	r0, 801ece2 <_svfprintf_r+0x8d2>
 801ece0:	9620      	str	r6, [sp, #128]	; 0x80
 801ece2:	2230      	movs	r2, #48	; 0x30
 801ece4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ece6:	429e      	cmp	r6, r3
 801ece8:	d9da      	bls.n	801eca0 <_svfprintf_r+0x890>
 801ecea:	1c59      	adds	r1, r3, #1
 801ecec:	9120      	str	r1, [sp, #128]	; 0x80
 801ecee:	701a      	strb	r2, [r3, #0]
 801ecf0:	e7f8      	b.n	801ece4 <_svfprintf_r+0x8d4>
 801ecf2:	9b08      	ldr	r3, [sp, #32]
 801ecf4:	2b46      	cmp	r3, #70	; 0x46
 801ecf6:	f47f ae54 	bne.w	801e9a2 <_svfprintf_r+0x592>
 801ecfa:	9a04      	ldr	r2, [sp, #16]
 801ecfc:	f00b 0301 	and.w	r3, fp, #1
 801ed00:	2d00      	cmp	r5, #0
 801ed02:	ea43 0302 	orr.w	r3, r3, r2
 801ed06:	dd1a      	ble.n	801ed3e <_svfprintf_r+0x92e>
 801ed08:	2b00      	cmp	r3, #0
 801ed0a:	d034      	beq.n	801ed76 <_svfprintf_r+0x966>
 801ed0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ed0e:	18eb      	adds	r3, r5, r3
 801ed10:	441a      	add	r2, r3
 801ed12:	9204      	str	r2, [sp, #16]
 801ed14:	2366      	movs	r3, #102	; 0x66
 801ed16:	9306      	str	r3, [sp, #24]
 801ed18:	e033      	b.n	801ed82 <_svfprintf_r+0x972>
 801ed1a:	f813 6b01 	ldrb.w	r6, [r3], #1
 801ed1e:	f802 6b01 	strb.w	r6, [r2], #1
 801ed22:	e675      	b.n	801ea10 <_svfprintf_r+0x600>
 801ed24:	b941      	cbnz	r1, 801ed38 <_svfprintf_r+0x928>
 801ed26:	2230      	movs	r2, #48	; 0x30
 801ed28:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 801ed2c:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 801ed30:	3330      	adds	r3, #48	; 0x30
 801ed32:	f802 3b01 	strb.w	r3, [r2], #1
 801ed36:	e677      	b.n	801ea28 <_svfprintf_r+0x618>
 801ed38:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 801ed3c:	e7f8      	b.n	801ed30 <_svfprintf_r+0x920>
 801ed3e:	b1e3      	cbz	r3, 801ed7a <_svfprintf_r+0x96a>
 801ed40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ed42:	9a04      	ldr	r2, [sp, #16]
 801ed44:	3301      	adds	r3, #1
 801ed46:	e7e3      	b.n	801ed10 <_svfprintf_r+0x900>
 801ed48:	9b05      	ldr	r3, [sp, #20]
 801ed4a:	429d      	cmp	r5, r3
 801ed4c:	db07      	blt.n	801ed5e <_svfprintf_r+0x94e>
 801ed4e:	f01b 0f01 	tst.w	fp, #1
 801ed52:	d02d      	beq.n	801edb0 <_svfprintf_r+0x9a0>
 801ed54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ed56:	18eb      	adds	r3, r5, r3
 801ed58:	9304      	str	r3, [sp, #16]
 801ed5a:	2367      	movs	r3, #103	; 0x67
 801ed5c:	e7db      	b.n	801ed16 <_svfprintf_r+0x906>
 801ed5e:	9b05      	ldr	r3, [sp, #20]
 801ed60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ed62:	2d00      	cmp	r5, #0
 801ed64:	4413      	add	r3, r2
 801ed66:	9304      	str	r3, [sp, #16]
 801ed68:	dcf7      	bgt.n	801ed5a <_svfprintf_r+0x94a>
 801ed6a:	9a04      	ldr	r2, [sp, #16]
 801ed6c:	f1c5 0301 	rsb	r3, r5, #1
 801ed70:	441a      	add	r2, r3
 801ed72:	9204      	str	r2, [sp, #16]
 801ed74:	e7f1      	b.n	801ed5a <_svfprintf_r+0x94a>
 801ed76:	9504      	str	r5, [sp, #16]
 801ed78:	e7cc      	b.n	801ed14 <_svfprintf_r+0x904>
 801ed7a:	2366      	movs	r3, #102	; 0x66
 801ed7c:	9306      	str	r3, [sp, #24]
 801ed7e:	2301      	movs	r3, #1
 801ed80:	9304      	str	r3, [sp, #16]
 801ed82:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 801ed86:	9309      	str	r3, [sp, #36]	; 0x24
 801ed88:	d025      	beq.n	801edd6 <_svfprintf_r+0x9c6>
 801ed8a:	2300      	movs	r3, #0
 801ed8c:	2d00      	cmp	r5, #0
 801ed8e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801ed92:	f77f ae61 	ble.w	801ea58 <_svfprintf_r+0x648>
 801ed96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ed98:	781b      	ldrb	r3, [r3, #0]
 801ed9a:	2bff      	cmp	r3, #255	; 0xff
 801ed9c:	d10a      	bne.n	801edb4 <_svfprintf_r+0x9a4>
 801ed9e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801eda2:	9912      	ldr	r1, [sp, #72]	; 0x48
 801eda4:	4413      	add	r3, r2
 801eda6:	9a04      	ldr	r2, [sp, #16]
 801eda8:	fb01 2303 	mla	r3, r1, r3, r2
 801edac:	9304      	str	r3, [sp, #16]
 801edae:	e653      	b.n	801ea58 <_svfprintf_r+0x648>
 801edb0:	9504      	str	r5, [sp, #16]
 801edb2:	e7d2      	b.n	801ed5a <_svfprintf_r+0x94a>
 801edb4:	42ab      	cmp	r3, r5
 801edb6:	daf2      	bge.n	801ed9e <_svfprintf_r+0x98e>
 801edb8:	1aed      	subs	r5, r5, r3
 801edba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801edbc:	785b      	ldrb	r3, [r3, #1]
 801edbe:	b133      	cbz	r3, 801edce <_svfprintf_r+0x9be>
 801edc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801edc2:	3301      	adds	r3, #1
 801edc4:	9309      	str	r3, [sp, #36]	; 0x24
 801edc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801edc8:	3301      	adds	r3, #1
 801edca:	930a      	str	r3, [sp, #40]	; 0x28
 801edcc:	e7e3      	b.n	801ed96 <_svfprintf_r+0x986>
 801edce:	9b08      	ldr	r3, [sp, #32]
 801edd0:	3301      	adds	r3, #1
 801edd2:	9308      	str	r3, [sp, #32]
 801edd4:	e7df      	b.n	801ed96 <_svfprintf_r+0x986>
 801edd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801edd8:	9308      	str	r3, [sp, #32]
 801edda:	e63d      	b.n	801ea58 <_svfprintf_r+0x648>
 801eddc:	1d33      	adds	r3, r6, #4
 801edde:	f01b 0f20 	tst.w	fp, #32
 801ede2:	9307      	str	r3, [sp, #28]
 801ede4:	d00a      	beq.n	801edfc <_svfprintf_r+0x9ec>
 801ede6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ede8:	6833      	ldr	r3, [r6, #0]
 801edea:	990c      	ldr	r1, [sp, #48]	; 0x30
 801edec:	17d2      	asrs	r2, r2, #31
 801edee:	e9c3 1200 	strd	r1, r2, [r3]
 801edf2:	9e07      	ldr	r6, [sp, #28]
 801edf4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 801edf8:	f7ff bb4a 	b.w	801e490 <_svfprintf_r+0x80>
 801edfc:	f01b 0f10 	tst.w	fp, #16
 801ee00:	d003      	beq.n	801ee0a <_svfprintf_r+0x9fa>
 801ee02:	6833      	ldr	r3, [r6, #0]
 801ee04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ee06:	601a      	str	r2, [r3, #0]
 801ee08:	e7f3      	b.n	801edf2 <_svfprintf_r+0x9e2>
 801ee0a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801ee0e:	d003      	beq.n	801ee18 <_svfprintf_r+0xa08>
 801ee10:	6833      	ldr	r3, [r6, #0]
 801ee12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ee14:	801a      	strh	r2, [r3, #0]
 801ee16:	e7ec      	b.n	801edf2 <_svfprintf_r+0x9e2>
 801ee18:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801ee1c:	d0f1      	beq.n	801ee02 <_svfprintf_r+0x9f2>
 801ee1e:	6833      	ldr	r3, [r6, #0]
 801ee20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ee22:	701a      	strb	r2, [r3, #0]
 801ee24:	e7e5      	b.n	801edf2 <_svfprintf_r+0x9e2>
 801ee26:	f04b 0b10 	orr.w	fp, fp, #16
 801ee2a:	f01b 0320 	ands.w	r3, fp, #32
 801ee2e:	d01f      	beq.n	801ee70 <_svfprintf_r+0xa60>
 801ee30:	1df3      	adds	r3, r6, #7
 801ee32:	f023 0307 	bic.w	r3, r3, #7
 801ee36:	461a      	mov	r2, r3
 801ee38:	685d      	ldr	r5, [r3, #4]
 801ee3a:	f852 6b08 	ldr.w	r6, [r2], #8
 801ee3e:	9207      	str	r2, [sp, #28]
 801ee40:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 801ee44:	2300      	movs	r3, #0
 801ee46:	2200      	movs	r2, #0
 801ee48:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 801ee4c:	9a04      	ldr	r2, [sp, #16]
 801ee4e:	3201      	adds	r2, #1
 801ee50:	f000 848d 	beq.w	801f76e <_svfprintf_r+0x135e>
 801ee54:	ea56 0205 	orrs.w	r2, r6, r5
 801ee58:	f02b 0780 	bic.w	r7, fp, #128	; 0x80
 801ee5c:	f040 848c 	bne.w	801f778 <_svfprintf_r+0x1368>
 801ee60:	9a04      	ldr	r2, [sp, #16]
 801ee62:	2a00      	cmp	r2, #0
 801ee64:	f000 80f9 	beq.w	801f05a <_svfprintf_r+0xc4a>
 801ee68:	2b01      	cmp	r3, #1
 801ee6a:	f040 8488 	bne.w	801f77e <_svfprintf_r+0x136e>
 801ee6e:	e09f      	b.n	801efb0 <_svfprintf_r+0xba0>
 801ee70:	4632      	mov	r2, r6
 801ee72:	f01b 0510 	ands.w	r5, fp, #16
 801ee76:	f852 6b04 	ldr.w	r6, [r2], #4
 801ee7a:	9207      	str	r2, [sp, #28]
 801ee7c:	d001      	beq.n	801ee82 <_svfprintf_r+0xa72>
 801ee7e:	461d      	mov	r5, r3
 801ee80:	e7de      	b.n	801ee40 <_svfprintf_r+0xa30>
 801ee82:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 801ee86:	d001      	beq.n	801ee8c <_svfprintf_r+0xa7c>
 801ee88:	b2b6      	uxth	r6, r6
 801ee8a:	e7d9      	b.n	801ee40 <_svfprintf_r+0xa30>
 801ee8c:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 801ee90:	d0d6      	beq.n	801ee40 <_svfprintf_r+0xa30>
 801ee92:	b2f6      	uxtb	r6, r6
 801ee94:	e7f3      	b.n	801ee7e <_svfprintf_r+0xa6e>
 801ee96:	4633      	mov	r3, r6
 801ee98:	2278      	movs	r2, #120	; 0x78
 801ee9a:	f853 6b04 	ldr.w	r6, [r3], #4
 801ee9e:	9307      	str	r3, [sp, #28]
 801eea0:	2330      	movs	r3, #48	; 0x30
 801eea2:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801eea6:	4ba3      	ldr	r3, [pc, #652]	; (801f134 <_svfprintf_r+0xd24>)
 801eea8:	9316      	str	r3, [sp, #88]	; 0x58
 801eeaa:	2500      	movs	r5, #0
 801eeac:	f04b 0b02 	orr.w	fp, fp, #2
 801eeb0:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 801eeb4:	2302      	movs	r3, #2
 801eeb6:	9206      	str	r2, [sp, #24]
 801eeb8:	e7c5      	b.n	801ee46 <_svfprintf_r+0xa36>
 801eeba:	4633      	mov	r3, r6
 801eebc:	2500      	movs	r5, #0
 801eebe:	f853 9b04 	ldr.w	r9, [r3], #4
 801eec2:	9307      	str	r3, [sp, #28]
 801eec4:	9b04      	ldr	r3, [sp, #16]
 801eec6:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 801eeca:	1c58      	adds	r0, r3, #1
 801eecc:	d010      	beq.n	801eef0 <_svfprintf_r+0xae0>
 801eece:	461a      	mov	r2, r3
 801eed0:	4629      	mov	r1, r5
 801eed2:	4648      	mov	r0, r9
 801eed4:	f7e1 f994 	bl	8000200 <memchr>
 801eed8:	9003      	str	r0, [sp, #12]
 801eeda:	2800      	cmp	r0, #0
 801eedc:	f000 80d4 	beq.w	801f088 <_svfprintf_r+0xc78>
 801eee0:	eba0 0309 	sub.w	r3, r0, r9
 801eee4:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801eee8:	e9cd 5508 	strd	r5, r5, [sp, #32]
 801eeec:	462e      	mov	r6, r5
 801eeee:	e5bb      	b.n	801ea68 <_svfprintf_r+0x658>
 801eef0:	4648      	mov	r0, r9
 801eef2:	f7e1 f97d 	bl	80001f0 <strlen>
 801eef6:	e9cd 5003 	strd	r5, r0, [sp, #12]
 801eefa:	e45f      	b.n	801e7bc <_svfprintf_r+0x3ac>
 801eefc:	f04b 0b10 	orr.w	fp, fp, #16
 801ef00:	f01b 0320 	ands.w	r3, fp, #32
 801ef04:	d009      	beq.n	801ef1a <_svfprintf_r+0xb0a>
 801ef06:	1df3      	adds	r3, r6, #7
 801ef08:	f023 0307 	bic.w	r3, r3, #7
 801ef0c:	461a      	mov	r2, r3
 801ef0e:	685d      	ldr	r5, [r3, #4]
 801ef10:	f852 6b08 	ldr.w	r6, [r2], #8
 801ef14:	9207      	str	r2, [sp, #28]
 801ef16:	2301      	movs	r3, #1
 801ef18:	e795      	b.n	801ee46 <_svfprintf_r+0xa36>
 801ef1a:	4632      	mov	r2, r6
 801ef1c:	f01b 0510 	ands.w	r5, fp, #16
 801ef20:	f852 6b04 	ldr.w	r6, [r2], #4
 801ef24:	9207      	str	r2, [sp, #28]
 801ef26:	d001      	beq.n	801ef2c <_svfprintf_r+0xb1c>
 801ef28:	461d      	mov	r5, r3
 801ef2a:	e7f4      	b.n	801ef16 <_svfprintf_r+0xb06>
 801ef2c:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 801ef30:	d001      	beq.n	801ef36 <_svfprintf_r+0xb26>
 801ef32:	b2b6      	uxth	r6, r6
 801ef34:	e7ef      	b.n	801ef16 <_svfprintf_r+0xb06>
 801ef36:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 801ef3a:	d0ec      	beq.n	801ef16 <_svfprintf_r+0xb06>
 801ef3c:	b2f6      	uxtb	r6, r6
 801ef3e:	e7f3      	b.n	801ef28 <_svfprintf_r+0xb18>
 801ef40:	4b7d      	ldr	r3, [pc, #500]	; (801f138 <_svfprintf_r+0xd28>)
 801ef42:	9316      	str	r3, [sp, #88]	; 0x58
 801ef44:	f01b 0320 	ands.w	r3, fp, #32
 801ef48:	d01b      	beq.n	801ef82 <_svfprintf_r+0xb72>
 801ef4a:	1df3      	adds	r3, r6, #7
 801ef4c:	f023 0307 	bic.w	r3, r3, #7
 801ef50:	461a      	mov	r2, r3
 801ef52:	685d      	ldr	r5, [r3, #4]
 801ef54:	f852 6b08 	ldr.w	r6, [r2], #8
 801ef58:	9207      	str	r2, [sp, #28]
 801ef5a:	f01b 0f01 	tst.w	fp, #1
 801ef5e:	d00a      	beq.n	801ef76 <_svfprintf_r+0xb66>
 801ef60:	ea56 0305 	orrs.w	r3, r6, r5
 801ef64:	d007      	beq.n	801ef76 <_svfprintf_r+0xb66>
 801ef66:	2330      	movs	r3, #48	; 0x30
 801ef68:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801ef6c:	9b06      	ldr	r3, [sp, #24]
 801ef6e:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 801ef72:	f04b 0b02 	orr.w	fp, fp, #2
 801ef76:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 801ef7a:	2302      	movs	r3, #2
 801ef7c:	e763      	b.n	801ee46 <_svfprintf_r+0xa36>
 801ef7e:	4b6d      	ldr	r3, [pc, #436]	; (801f134 <_svfprintf_r+0xd24>)
 801ef80:	e7df      	b.n	801ef42 <_svfprintf_r+0xb32>
 801ef82:	4632      	mov	r2, r6
 801ef84:	f01b 0510 	ands.w	r5, fp, #16
 801ef88:	f852 6b04 	ldr.w	r6, [r2], #4
 801ef8c:	9207      	str	r2, [sp, #28]
 801ef8e:	d001      	beq.n	801ef94 <_svfprintf_r+0xb84>
 801ef90:	461d      	mov	r5, r3
 801ef92:	e7e2      	b.n	801ef5a <_svfprintf_r+0xb4a>
 801ef94:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 801ef98:	d001      	beq.n	801ef9e <_svfprintf_r+0xb8e>
 801ef9a:	b2b6      	uxth	r6, r6
 801ef9c:	e7dd      	b.n	801ef5a <_svfprintf_r+0xb4a>
 801ef9e:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 801efa2:	d0da      	beq.n	801ef5a <_svfprintf_r+0xb4a>
 801efa4:	b2f6      	uxtb	r6, r6
 801efa6:	e7f3      	b.n	801ef90 <_svfprintf_r+0xb80>
 801efa8:	2e0a      	cmp	r6, #10
 801efaa:	f175 0300 	sbcs.w	r3, r5, #0
 801efae:	d205      	bcs.n	801efbc <_svfprintf_r+0xbac>
 801efb0:	3630      	adds	r6, #48	; 0x30
 801efb2:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 801efb6:	f20d 1937 	addw	r9, sp, #311	; 0x137
 801efba:	e3fb      	b.n	801f7b4 <_svfprintf_r+0x13a4>
 801efbc:	2300      	movs	r3, #0
 801efbe:	9305      	str	r3, [sp, #20]
 801efc0:	f407 6380 	and.w	r3, r7, #1024	; 0x400
 801efc4:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 801efc8:	9303      	str	r3, [sp, #12]
 801efca:	220a      	movs	r2, #10
 801efcc:	2300      	movs	r3, #0
 801efce:	4630      	mov	r0, r6
 801efd0:	4629      	mov	r1, r5
 801efd2:	f7e1 fdf9 	bl	8000bc8 <__aeabi_uldivmod>
 801efd6:	9b05      	ldr	r3, [sp, #20]
 801efd8:	3301      	adds	r3, #1
 801efda:	9305      	str	r3, [sp, #20]
 801efdc:	9b03      	ldr	r3, [sp, #12]
 801efde:	3230      	adds	r2, #48	; 0x30
 801efe0:	f10b 39ff 	add.w	r9, fp, #4294967295
 801efe4:	f80b 2c01 	strb.w	r2, [fp, #-1]
 801efe8:	b1d3      	cbz	r3, 801f020 <_svfprintf_r+0xc10>
 801efea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801efec:	9a05      	ldr	r2, [sp, #20]
 801efee:	781b      	ldrb	r3, [r3, #0]
 801eff0:	429a      	cmp	r2, r3
 801eff2:	d115      	bne.n	801f020 <_svfprintf_r+0xc10>
 801eff4:	2aff      	cmp	r2, #255	; 0xff
 801eff6:	d013      	beq.n	801f020 <_svfprintf_r+0xc10>
 801eff8:	2e0a      	cmp	r6, #10
 801effa:	f175 0300 	sbcs.w	r3, r5, #0
 801effe:	d30f      	bcc.n	801f020 <_svfprintf_r+0xc10>
 801f000:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f002:	9914      	ldr	r1, [sp, #80]	; 0x50
 801f004:	eba9 0903 	sub.w	r9, r9, r3
 801f008:	461a      	mov	r2, r3
 801f00a:	4648      	mov	r0, r9
 801f00c:	f004 f905 	bl	802321a <strncpy>
 801f010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f012:	785b      	ldrb	r3, [r3, #1]
 801f014:	b11b      	cbz	r3, 801f01e <_svfprintf_r+0xc0e>
 801f016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f018:	3301      	adds	r3, #1
 801f01a:	930a      	str	r3, [sp, #40]	; 0x28
 801f01c:	2300      	movs	r3, #0
 801f01e:	9305      	str	r3, [sp, #20]
 801f020:	2300      	movs	r3, #0
 801f022:	220a      	movs	r2, #10
 801f024:	4630      	mov	r0, r6
 801f026:	4629      	mov	r1, r5
 801f028:	f7e1 fdce 	bl	8000bc8 <__aeabi_uldivmod>
 801f02c:	2e0a      	cmp	r6, #10
 801f02e:	f175 0300 	sbcs.w	r3, r5, #0
 801f032:	f0c0 83bf 	bcc.w	801f7b4 <_svfprintf_r+0x13a4>
 801f036:	4606      	mov	r6, r0
 801f038:	460d      	mov	r5, r1
 801f03a:	46cb      	mov	fp, r9
 801f03c:	e7c5      	b.n	801efca <_svfprintf_r+0xbba>
 801f03e:	f006 030f 	and.w	r3, r6, #15
 801f042:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801f044:	0936      	lsrs	r6, r6, #4
 801f046:	5cd3      	ldrb	r3, [r2, r3]
 801f048:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801f04c:	ea46 7605 	orr.w	r6, r6, r5, lsl #28
 801f050:	092d      	lsrs	r5, r5, #4
 801f052:	ea56 0305 	orrs.w	r3, r6, r5
 801f056:	d1f2      	bne.n	801f03e <_svfprintf_r+0xc2e>
 801f058:	e3ac      	b.n	801f7b4 <_svfprintf_r+0x13a4>
 801f05a:	b933      	cbnz	r3, 801f06a <_svfprintf_r+0xc5a>
 801f05c:	f01b 0f01 	tst.w	fp, #1
 801f060:	d003      	beq.n	801f06a <_svfprintf_r+0xc5a>
 801f062:	2330      	movs	r3, #48	; 0x30
 801f064:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 801f068:	e7a5      	b.n	801efb6 <_svfprintf_r+0xba6>
 801f06a:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 801f06e:	e3a1      	b.n	801f7b4 <_svfprintf_r+0x13a4>
 801f070:	9b06      	ldr	r3, [sp, #24]
 801f072:	2b00      	cmp	r3, #0
 801f074:	f000 8370 	beq.w	801f758 <_svfprintf_r+0x1348>
 801f078:	2000      	movs	r0, #0
 801f07a:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 801f07e:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 801f082:	9607      	str	r6, [sp, #28]
 801f084:	f7ff bb29 	b.w	801e6da <_svfprintf_r+0x2ca>
 801f088:	9e03      	ldr	r6, [sp, #12]
 801f08a:	f7ff bb98 	b.w	801e7be <_svfprintf_r+0x3ae>
 801f08e:	2010      	movs	r0, #16
 801f090:	4402      	add	r2, r0
 801f092:	2b07      	cmp	r3, #7
 801f094:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801f098:	6060      	str	r0, [r4, #4]
 801f09a:	dd08      	ble.n	801f0ae <_svfprintf_r+0xc9e>
 801f09c:	aa22      	add	r2, sp, #136	; 0x88
 801f09e:	4641      	mov	r1, r8
 801f0a0:	4650      	mov	r0, sl
 801f0a2:	f004 f8cd 	bl	8023240 <__ssprint_r>
 801f0a6:	2800      	cmp	r0, #0
 801f0a8:	f040 8334 	bne.w	801f714 <_svfprintf_r+0x1304>
 801f0ac:	a925      	add	r1, sp, #148	; 0x94
 801f0ae:	3f10      	subs	r7, #16
 801f0b0:	460c      	mov	r4, r1
 801f0b2:	e4f4      	b.n	801ea9e <_svfprintf_r+0x68e>
 801f0b4:	460c      	mov	r4, r1
 801f0b6:	e50d      	b.n	801ead4 <_svfprintf_r+0x6c4>
 801f0b8:	aa22      	add	r2, sp, #136	; 0x88
 801f0ba:	4641      	mov	r1, r8
 801f0bc:	4650      	mov	r0, sl
 801f0be:	f004 f8bf 	bl	8023240 <__ssprint_r>
 801f0c2:	2800      	cmp	r0, #0
 801f0c4:	f040 8326 	bne.w	801f714 <_svfprintf_r+0x1304>
 801f0c8:	ac25      	add	r4, sp, #148	; 0x94
 801f0ca:	e515      	b.n	801eaf8 <_svfprintf_r+0x6e8>
 801f0cc:	aa22      	add	r2, sp, #136	; 0x88
 801f0ce:	4641      	mov	r1, r8
 801f0d0:	4650      	mov	r0, sl
 801f0d2:	f004 f8b5 	bl	8023240 <__ssprint_r>
 801f0d6:	2800      	cmp	r0, #0
 801f0d8:	f040 831c 	bne.w	801f714 <_svfprintf_r+0x1304>
 801f0dc:	ac25      	add	r4, sp, #148	; 0x94
 801f0de:	e51b      	b.n	801eb18 <_svfprintf_r+0x708>
 801f0e0:	2010      	movs	r0, #16
 801f0e2:	4402      	add	r2, r0
 801f0e4:	2b07      	cmp	r3, #7
 801f0e6:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801f0ea:	6060      	str	r0, [r4, #4]
 801f0ec:	dd08      	ble.n	801f100 <_svfprintf_r+0xcf0>
 801f0ee:	aa22      	add	r2, sp, #136	; 0x88
 801f0f0:	4641      	mov	r1, r8
 801f0f2:	4650      	mov	r0, sl
 801f0f4:	f004 f8a4 	bl	8023240 <__ssprint_r>
 801f0f8:	2800      	cmp	r0, #0
 801f0fa:	f040 830b 	bne.w	801f714 <_svfprintf_r+0x1304>
 801f0fe:	a925      	add	r1, sp, #148	; 0x94
 801f100:	3f10      	subs	r7, #16
 801f102:	460c      	mov	r4, r1
 801f104:	e510      	b.n	801eb28 <_svfprintf_r+0x718>
 801f106:	460c      	mov	r4, r1
 801f108:	e529      	b.n	801eb5e <_svfprintf_r+0x74e>
 801f10a:	2010      	movs	r0, #16
 801f10c:	4402      	add	r2, r0
 801f10e:	2b07      	cmp	r3, #7
 801f110:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801f114:	6060      	str	r0, [r4, #4]
 801f116:	dd08      	ble.n	801f12a <_svfprintf_r+0xd1a>
 801f118:	aa22      	add	r2, sp, #136	; 0x88
 801f11a:	4641      	mov	r1, r8
 801f11c:	4650      	mov	r0, sl
 801f11e:	f004 f88f 	bl	8023240 <__ssprint_r>
 801f122:	2800      	cmp	r0, #0
 801f124:	f040 82f6 	bne.w	801f714 <_svfprintf_r+0x1304>
 801f128:	a925      	add	r1, sp, #148	; 0x94
 801f12a:	3e10      	subs	r6, #16
 801f12c:	460c      	mov	r4, r1
 801f12e:	e529      	b.n	801eb84 <_svfprintf_r+0x774>
 801f130:	460c      	mov	r4, r1
 801f132:	e541      	b.n	801ebb8 <_svfprintf_r+0x7a8>
 801f134:	0806f778 	.word	0x0806f778
 801f138:	0806f789 	.word	0x0806f789
 801f13c:	9b06      	ldr	r3, [sp, #24]
 801f13e:	2b65      	cmp	r3, #101	; 0x65
 801f140:	f340 8230 	ble.w	801f5a4 <_svfprintf_r+0x1194>
 801f144:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801f148:	2200      	movs	r2, #0
 801f14a:	2300      	movs	r3, #0
 801f14c:	f7e1 fccc 	bl	8000ae8 <__aeabi_dcmpeq>
 801f150:	2800      	cmp	r0, #0
 801f152:	d068      	beq.n	801f226 <_svfprintf_r+0xe16>
 801f154:	4b6d      	ldr	r3, [pc, #436]	; (801f30c <_svfprintf_r+0xefc>)
 801f156:	6023      	str	r3, [r4, #0]
 801f158:	2301      	movs	r3, #1
 801f15a:	441e      	add	r6, r3
 801f15c:	6063      	str	r3, [r4, #4]
 801f15e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f160:	9624      	str	r6, [sp, #144]	; 0x90
 801f162:	3301      	adds	r3, #1
 801f164:	2b07      	cmp	r3, #7
 801f166:	9323      	str	r3, [sp, #140]	; 0x8c
 801f168:	dc37      	bgt.n	801f1da <_svfprintf_r+0xdca>
 801f16a:	3408      	adds	r4, #8
 801f16c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f16e:	9a05      	ldr	r2, [sp, #20]
 801f170:	4293      	cmp	r3, r2
 801f172:	db03      	blt.n	801f17c <_svfprintf_r+0xd6c>
 801f174:	f01b 0f01 	tst.w	fp, #1
 801f178:	f43f ad30 	beq.w	801ebdc <_svfprintf_r+0x7cc>
 801f17c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f17e:	6023      	str	r3, [r4, #0]
 801f180:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f182:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f184:	6063      	str	r3, [r4, #4]
 801f186:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f188:	4413      	add	r3, r2
 801f18a:	9324      	str	r3, [sp, #144]	; 0x90
 801f18c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f18e:	3301      	adds	r3, #1
 801f190:	2b07      	cmp	r3, #7
 801f192:	9323      	str	r3, [sp, #140]	; 0x8c
 801f194:	dc2b      	bgt.n	801f1ee <_svfprintf_r+0xdde>
 801f196:	3408      	adds	r4, #8
 801f198:	9b05      	ldr	r3, [sp, #20]
 801f19a:	1e5d      	subs	r5, r3, #1
 801f19c:	2d00      	cmp	r5, #0
 801f19e:	f77f ad1d 	ble.w	801ebdc <_svfprintf_r+0x7cc>
 801f1a2:	4e5b      	ldr	r6, [pc, #364]	; (801f310 <_svfprintf_r+0xf00>)
 801f1a4:	2710      	movs	r7, #16
 801f1a6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801f1aa:	2d10      	cmp	r5, #16
 801f1ac:	f103 0301 	add.w	r3, r3, #1
 801f1b0:	f104 0108 	add.w	r1, r4, #8
 801f1b4:	6026      	str	r6, [r4, #0]
 801f1b6:	dc24      	bgt.n	801f202 <_svfprintf_r+0xdf2>
 801f1b8:	6065      	str	r5, [r4, #4]
 801f1ba:	2b07      	cmp	r3, #7
 801f1bc:	4415      	add	r5, r2
 801f1be:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 801f1c2:	f340 8286 	ble.w	801f6d2 <_svfprintf_r+0x12c2>
 801f1c6:	aa22      	add	r2, sp, #136	; 0x88
 801f1c8:	4641      	mov	r1, r8
 801f1ca:	4650      	mov	r0, sl
 801f1cc:	f004 f838 	bl	8023240 <__ssprint_r>
 801f1d0:	2800      	cmp	r0, #0
 801f1d2:	f040 829f 	bne.w	801f714 <_svfprintf_r+0x1304>
 801f1d6:	ac25      	add	r4, sp, #148	; 0x94
 801f1d8:	e500      	b.n	801ebdc <_svfprintf_r+0x7cc>
 801f1da:	aa22      	add	r2, sp, #136	; 0x88
 801f1dc:	4641      	mov	r1, r8
 801f1de:	4650      	mov	r0, sl
 801f1e0:	f004 f82e 	bl	8023240 <__ssprint_r>
 801f1e4:	2800      	cmp	r0, #0
 801f1e6:	f040 8295 	bne.w	801f714 <_svfprintf_r+0x1304>
 801f1ea:	ac25      	add	r4, sp, #148	; 0x94
 801f1ec:	e7be      	b.n	801f16c <_svfprintf_r+0xd5c>
 801f1ee:	aa22      	add	r2, sp, #136	; 0x88
 801f1f0:	4641      	mov	r1, r8
 801f1f2:	4650      	mov	r0, sl
 801f1f4:	f004 f824 	bl	8023240 <__ssprint_r>
 801f1f8:	2800      	cmp	r0, #0
 801f1fa:	f040 828b 	bne.w	801f714 <_svfprintf_r+0x1304>
 801f1fe:	ac25      	add	r4, sp, #148	; 0x94
 801f200:	e7ca      	b.n	801f198 <_svfprintf_r+0xd88>
 801f202:	3210      	adds	r2, #16
 801f204:	2b07      	cmp	r3, #7
 801f206:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801f20a:	6067      	str	r7, [r4, #4]
 801f20c:	dd08      	ble.n	801f220 <_svfprintf_r+0xe10>
 801f20e:	aa22      	add	r2, sp, #136	; 0x88
 801f210:	4641      	mov	r1, r8
 801f212:	4650      	mov	r0, sl
 801f214:	f004 f814 	bl	8023240 <__ssprint_r>
 801f218:	2800      	cmp	r0, #0
 801f21a:	f040 827b 	bne.w	801f714 <_svfprintf_r+0x1304>
 801f21e:	a925      	add	r1, sp, #148	; 0x94
 801f220:	3d10      	subs	r5, #16
 801f222:	460c      	mov	r4, r1
 801f224:	e7bf      	b.n	801f1a6 <_svfprintf_r+0xd96>
 801f226:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f228:	2b00      	cmp	r3, #0
 801f22a:	dc73      	bgt.n	801f314 <_svfprintf_r+0xf04>
 801f22c:	4b37      	ldr	r3, [pc, #220]	; (801f30c <_svfprintf_r+0xefc>)
 801f22e:	6023      	str	r3, [r4, #0]
 801f230:	2301      	movs	r3, #1
 801f232:	441e      	add	r6, r3
 801f234:	6063      	str	r3, [r4, #4]
 801f236:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f238:	9624      	str	r6, [sp, #144]	; 0x90
 801f23a:	3301      	adds	r3, #1
 801f23c:	2b07      	cmp	r3, #7
 801f23e:	9323      	str	r3, [sp, #140]	; 0x8c
 801f240:	dc3d      	bgt.n	801f2be <_svfprintf_r+0xeae>
 801f242:	3408      	adds	r4, #8
 801f244:	9905      	ldr	r1, [sp, #20]
 801f246:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801f248:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f24a:	430a      	orrs	r2, r1
 801f24c:	f00b 0101 	and.w	r1, fp, #1
 801f250:	430a      	orrs	r2, r1
 801f252:	f43f acc3 	beq.w	801ebdc <_svfprintf_r+0x7cc>
 801f256:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f258:	6022      	str	r2, [r4, #0]
 801f25a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f25c:	6062      	str	r2, [r4, #4]
 801f25e:	4413      	add	r3, r2
 801f260:	9324      	str	r3, [sp, #144]	; 0x90
 801f262:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f264:	3301      	adds	r3, #1
 801f266:	2b07      	cmp	r3, #7
 801f268:	9323      	str	r3, [sp, #140]	; 0x8c
 801f26a:	dc32      	bgt.n	801f2d2 <_svfprintf_r+0xec2>
 801f26c:	3408      	adds	r4, #8
 801f26e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801f270:	2d00      	cmp	r5, #0
 801f272:	da1b      	bge.n	801f2ac <_svfprintf_r+0xe9c>
 801f274:	4e26      	ldr	r6, [pc, #152]	; (801f310 <_svfprintf_r+0xf00>)
 801f276:	426d      	negs	r5, r5
 801f278:	4623      	mov	r3, r4
 801f27a:	2710      	movs	r7, #16
 801f27c:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 801f280:	2d10      	cmp	r5, #16
 801f282:	f102 0201 	add.w	r2, r2, #1
 801f286:	f104 0408 	add.w	r4, r4, #8
 801f28a:	601e      	str	r6, [r3, #0]
 801f28c:	dc2b      	bgt.n	801f2e6 <_svfprintf_r+0xed6>
 801f28e:	605d      	str	r5, [r3, #4]
 801f290:	2a07      	cmp	r2, #7
 801f292:	440d      	add	r5, r1
 801f294:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 801f298:	dd08      	ble.n	801f2ac <_svfprintf_r+0xe9c>
 801f29a:	aa22      	add	r2, sp, #136	; 0x88
 801f29c:	4641      	mov	r1, r8
 801f29e:	4650      	mov	r0, sl
 801f2a0:	f003 ffce 	bl	8023240 <__ssprint_r>
 801f2a4:	2800      	cmp	r0, #0
 801f2a6:	f040 8235 	bne.w	801f714 <_svfprintf_r+0x1304>
 801f2aa:	ac25      	add	r4, sp, #148	; 0x94
 801f2ac:	9b05      	ldr	r3, [sp, #20]
 801f2ae:	9a05      	ldr	r2, [sp, #20]
 801f2b0:	6063      	str	r3, [r4, #4]
 801f2b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f2b4:	f8c4 9000 	str.w	r9, [r4]
 801f2b8:	4413      	add	r3, r2
 801f2ba:	9324      	str	r3, [sp, #144]	; 0x90
 801f2bc:	e487      	b.n	801ebce <_svfprintf_r+0x7be>
 801f2be:	aa22      	add	r2, sp, #136	; 0x88
 801f2c0:	4641      	mov	r1, r8
 801f2c2:	4650      	mov	r0, sl
 801f2c4:	f003 ffbc 	bl	8023240 <__ssprint_r>
 801f2c8:	2800      	cmp	r0, #0
 801f2ca:	f040 8223 	bne.w	801f714 <_svfprintf_r+0x1304>
 801f2ce:	ac25      	add	r4, sp, #148	; 0x94
 801f2d0:	e7b8      	b.n	801f244 <_svfprintf_r+0xe34>
 801f2d2:	aa22      	add	r2, sp, #136	; 0x88
 801f2d4:	4641      	mov	r1, r8
 801f2d6:	4650      	mov	r0, sl
 801f2d8:	f003 ffb2 	bl	8023240 <__ssprint_r>
 801f2dc:	2800      	cmp	r0, #0
 801f2de:	f040 8219 	bne.w	801f714 <_svfprintf_r+0x1304>
 801f2e2:	ac25      	add	r4, sp, #148	; 0x94
 801f2e4:	e7c3      	b.n	801f26e <_svfprintf_r+0xe5e>
 801f2e6:	3110      	adds	r1, #16
 801f2e8:	2a07      	cmp	r2, #7
 801f2ea:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 801f2ee:	605f      	str	r7, [r3, #4]
 801f2f0:	dd08      	ble.n	801f304 <_svfprintf_r+0xef4>
 801f2f2:	aa22      	add	r2, sp, #136	; 0x88
 801f2f4:	4641      	mov	r1, r8
 801f2f6:	4650      	mov	r0, sl
 801f2f8:	f003 ffa2 	bl	8023240 <__ssprint_r>
 801f2fc:	2800      	cmp	r0, #0
 801f2fe:	f040 8209 	bne.w	801f714 <_svfprintf_r+0x1304>
 801f302:	ac25      	add	r4, sp, #148	; 0x94
 801f304:	3d10      	subs	r5, #16
 801f306:	4623      	mov	r3, r4
 801f308:	e7b8      	b.n	801f27c <_svfprintf_r+0xe6c>
 801f30a:	bf00      	nop
 801f30c:	0806f79a 	.word	0x0806f79a
 801f310:	0806f7ac 	.word	0x0806f7ac
 801f314:	9f05      	ldr	r7, [sp, #20]
 801f316:	42af      	cmp	r7, r5
 801f318:	bfa8      	it	ge
 801f31a:	462f      	movge	r7, r5
 801f31c:	2f00      	cmp	r7, #0
 801f31e:	dd0a      	ble.n	801f336 <_svfprintf_r+0xf26>
 801f320:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f322:	3301      	adds	r3, #1
 801f324:	443e      	add	r6, r7
 801f326:	2b07      	cmp	r3, #7
 801f328:	e9c4 9700 	strd	r9, r7, [r4]
 801f32c:	9624      	str	r6, [sp, #144]	; 0x90
 801f32e:	9323      	str	r3, [sp, #140]	; 0x8c
 801f330:	f300 8085 	bgt.w	801f43e <_svfprintf_r+0x102e>
 801f334:	3408      	adds	r4, #8
 801f336:	2f00      	cmp	r7, #0
 801f338:	bfac      	ite	ge
 801f33a:	1bee      	subge	r6, r5, r7
 801f33c:	462e      	movlt	r6, r5
 801f33e:	2e00      	cmp	r6, #0
 801f340:	dd19      	ble.n	801f376 <_svfprintf_r+0xf66>
 801f342:	4f97      	ldr	r7, [pc, #604]	; (801f5a0 <_svfprintf_r+0x1190>)
 801f344:	6027      	str	r7, [r4, #0]
 801f346:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801f34a:	2e10      	cmp	r6, #16
 801f34c:	f103 0301 	add.w	r3, r3, #1
 801f350:	f104 0108 	add.w	r1, r4, #8
 801f354:	dc7d      	bgt.n	801f452 <_svfprintf_r+0x1042>
 801f356:	6066      	str	r6, [r4, #4]
 801f358:	2b07      	cmp	r3, #7
 801f35a:	4416      	add	r6, r2
 801f35c:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801f360:	f340 808a 	ble.w	801f478 <_svfprintf_r+0x1068>
 801f364:	aa22      	add	r2, sp, #136	; 0x88
 801f366:	4641      	mov	r1, r8
 801f368:	4650      	mov	r0, sl
 801f36a:	f003 ff69 	bl	8023240 <__ssprint_r>
 801f36e:	2800      	cmp	r0, #0
 801f370:	f040 81d0 	bne.w	801f714 <_svfprintf_r+0x1304>
 801f374:	ac25      	add	r4, sp, #148	; 0x94
 801f376:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 801f37a:	444d      	add	r5, r9
 801f37c:	d00a      	beq.n	801f394 <_svfprintf_r+0xf84>
 801f37e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f380:	2b00      	cmp	r3, #0
 801f382:	d17b      	bne.n	801f47c <_svfprintf_r+0x106c>
 801f384:	9b08      	ldr	r3, [sp, #32]
 801f386:	2b00      	cmp	r3, #0
 801f388:	d17b      	bne.n	801f482 <_svfprintf_r+0x1072>
 801f38a:	9b05      	ldr	r3, [sp, #20]
 801f38c:	444b      	add	r3, r9
 801f38e:	429d      	cmp	r5, r3
 801f390:	bf28      	it	cs
 801f392:	461d      	movcs	r5, r3
 801f394:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f396:	9a05      	ldr	r2, [sp, #20]
 801f398:	4293      	cmp	r3, r2
 801f39a:	db02      	blt.n	801f3a2 <_svfprintf_r+0xf92>
 801f39c:	f01b 0f01 	tst.w	fp, #1
 801f3a0:	d00e      	beq.n	801f3c0 <_svfprintf_r+0xfb0>
 801f3a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f3a4:	6023      	str	r3, [r4, #0]
 801f3a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f3a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f3aa:	6063      	str	r3, [r4, #4]
 801f3ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f3ae:	4413      	add	r3, r2
 801f3b0:	9324      	str	r3, [sp, #144]	; 0x90
 801f3b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f3b4:	3301      	adds	r3, #1
 801f3b6:	2b07      	cmp	r3, #7
 801f3b8:	9323      	str	r3, [sp, #140]	; 0x8c
 801f3ba:	f300 80dd 	bgt.w	801f578 <_svfprintf_r+0x1168>
 801f3be:	3408      	adds	r4, #8
 801f3c0:	9b05      	ldr	r3, [sp, #20]
 801f3c2:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 801f3c4:	eb09 0203 	add.w	r2, r9, r3
 801f3c8:	1b9e      	subs	r6, r3, r6
 801f3ca:	1b52      	subs	r2, r2, r5
 801f3cc:	4296      	cmp	r6, r2
 801f3ce:	bfa8      	it	ge
 801f3d0:	4616      	movge	r6, r2
 801f3d2:	2e00      	cmp	r6, #0
 801f3d4:	dd0b      	ble.n	801f3ee <_svfprintf_r+0xfde>
 801f3d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f3d8:	4433      	add	r3, r6
 801f3da:	9324      	str	r3, [sp, #144]	; 0x90
 801f3dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f3de:	3301      	adds	r3, #1
 801f3e0:	2b07      	cmp	r3, #7
 801f3e2:	e9c4 5600 	strd	r5, r6, [r4]
 801f3e6:	9323      	str	r3, [sp, #140]	; 0x8c
 801f3e8:	f300 80d0 	bgt.w	801f58c <_svfprintf_r+0x117c>
 801f3ec:	3408      	adds	r4, #8
 801f3ee:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801f3f0:	9b05      	ldr	r3, [sp, #20]
 801f3f2:	2e00      	cmp	r6, #0
 801f3f4:	eba3 0505 	sub.w	r5, r3, r5
 801f3f8:	bfa8      	it	ge
 801f3fa:	1bad      	subge	r5, r5, r6
 801f3fc:	2d00      	cmp	r5, #0
 801f3fe:	f77f abed 	ble.w	801ebdc <_svfprintf_r+0x7cc>
 801f402:	4e67      	ldr	r6, [pc, #412]	; (801f5a0 <_svfprintf_r+0x1190>)
 801f404:	2710      	movs	r7, #16
 801f406:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801f40a:	2d10      	cmp	r5, #16
 801f40c:	f103 0301 	add.w	r3, r3, #1
 801f410:	f104 0108 	add.w	r1, r4, #8
 801f414:	6026      	str	r6, [r4, #0]
 801f416:	f77f aecf 	ble.w	801f1b8 <_svfprintf_r+0xda8>
 801f41a:	3210      	adds	r2, #16
 801f41c:	2b07      	cmp	r3, #7
 801f41e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801f422:	6067      	str	r7, [r4, #4]
 801f424:	dd08      	ble.n	801f438 <_svfprintf_r+0x1028>
 801f426:	aa22      	add	r2, sp, #136	; 0x88
 801f428:	4641      	mov	r1, r8
 801f42a:	4650      	mov	r0, sl
 801f42c:	f003 ff08 	bl	8023240 <__ssprint_r>
 801f430:	2800      	cmp	r0, #0
 801f432:	f040 816f 	bne.w	801f714 <_svfprintf_r+0x1304>
 801f436:	a925      	add	r1, sp, #148	; 0x94
 801f438:	3d10      	subs	r5, #16
 801f43a:	460c      	mov	r4, r1
 801f43c:	e7e3      	b.n	801f406 <_svfprintf_r+0xff6>
 801f43e:	aa22      	add	r2, sp, #136	; 0x88
 801f440:	4641      	mov	r1, r8
 801f442:	4650      	mov	r0, sl
 801f444:	f003 fefc 	bl	8023240 <__ssprint_r>
 801f448:	2800      	cmp	r0, #0
 801f44a:	f040 8163 	bne.w	801f714 <_svfprintf_r+0x1304>
 801f44e:	ac25      	add	r4, sp, #148	; 0x94
 801f450:	e771      	b.n	801f336 <_svfprintf_r+0xf26>
 801f452:	2010      	movs	r0, #16
 801f454:	4402      	add	r2, r0
 801f456:	2b07      	cmp	r3, #7
 801f458:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801f45c:	6060      	str	r0, [r4, #4]
 801f45e:	dd08      	ble.n	801f472 <_svfprintf_r+0x1062>
 801f460:	aa22      	add	r2, sp, #136	; 0x88
 801f462:	4641      	mov	r1, r8
 801f464:	4650      	mov	r0, sl
 801f466:	f003 feeb 	bl	8023240 <__ssprint_r>
 801f46a:	2800      	cmp	r0, #0
 801f46c:	f040 8152 	bne.w	801f714 <_svfprintf_r+0x1304>
 801f470:	a925      	add	r1, sp, #148	; 0x94
 801f472:	3e10      	subs	r6, #16
 801f474:	460c      	mov	r4, r1
 801f476:	e765      	b.n	801f344 <_svfprintf_r+0xf34>
 801f478:	460c      	mov	r4, r1
 801f47a:	e77c      	b.n	801f376 <_svfprintf_r+0xf66>
 801f47c:	9b08      	ldr	r3, [sp, #32]
 801f47e:	2b00      	cmp	r3, #0
 801f480:	d04a      	beq.n	801f518 <_svfprintf_r+0x1108>
 801f482:	9b08      	ldr	r3, [sp, #32]
 801f484:	3b01      	subs	r3, #1
 801f486:	9308      	str	r3, [sp, #32]
 801f488:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f48a:	6023      	str	r3, [r4, #0]
 801f48c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f48e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f490:	6063      	str	r3, [r4, #4]
 801f492:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f494:	4413      	add	r3, r2
 801f496:	9324      	str	r3, [sp, #144]	; 0x90
 801f498:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f49a:	3301      	adds	r3, #1
 801f49c:	2b07      	cmp	r3, #7
 801f49e:	9323      	str	r3, [sp, #140]	; 0x8c
 801f4a0:	dc41      	bgt.n	801f526 <_svfprintf_r+0x1116>
 801f4a2:	3408      	adds	r4, #8
 801f4a4:	9b05      	ldr	r3, [sp, #20]
 801f4a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f4a8:	eb09 0703 	add.w	r7, r9, r3
 801f4ac:	1b7b      	subs	r3, r7, r5
 801f4ae:	7817      	ldrb	r7, [r2, #0]
 801f4b0:	429f      	cmp	r7, r3
 801f4b2:	bfa8      	it	ge
 801f4b4:	461f      	movge	r7, r3
 801f4b6:	2f00      	cmp	r7, #0
 801f4b8:	dd0a      	ble.n	801f4d0 <_svfprintf_r+0x10c0>
 801f4ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f4bc:	443b      	add	r3, r7
 801f4be:	9324      	str	r3, [sp, #144]	; 0x90
 801f4c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f4c2:	3301      	adds	r3, #1
 801f4c4:	2b07      	cmp	r3, #7
 801f4c6:	e9c4 5700 	strd	r5, r7, [r4]
 801f4ca:	9323      	str	r3, [sp, #140]	; 0x8c
 801f4cc:	dc35      	bgt.n	801f53a <_svfprintf_r+0x112a>
 801f4ce:	3408      	adds	r4, #8
 801f4d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f4d2:	781e      	ldrb	r6, [r3, #0]
 801f4d4:	2f00      	cmp	r7, #0
 801f4d6:	bfa8      	it	ge
 801f4d8:	1bf6      	subge	r6, r6, r7
 801f4da:	2e00      	cmp	r6, #0
 801f4dc:	dd18      	ble.n	801f510 <_svfprintf_r+0x1100>
 801f4de:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801f4e2:	482f      	ldr	r0, [pc, #188]	; (801f5a0 <_svfprintf_r+0x1190>)
 801f4e4:	6020      	str	r0, [r4, #0]
 801f4e6:	2e10      	cmp	r6, #16
 801f4e8:	f103 0301 	add.w	r3, r3, #1
 801f4ec:	f104 0108 	add.w	r1, r4, #8
 801f4f0:	dc2d      	bgt.n	801f54e <_svfprintf_r+0x113e>
 801f4f2:	4432      	add	r2, r6
 801f4f4:	2b07      	cmp	r3, #7
 801f4f6:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801f4fa:	6066      	str	r6, [r4, #4]
 801f4fc:	dd3a      	ble.n	801f574 <_svfprintf_r+0x1164>
 801f4fe:	aa22      	add	r2, sp, #136	; 0x88
 801f500:	4641      	mov	r1, r8
 801f502:	4650      	mov	r0, sl
 801f504:	f003 fe9c 	bl	8023240 <__ssprint_r>
 801f508:	2800      	cmp	r0, #0
 801f50a:	f040 8103 	bne.w	801f714 <_svfprintf_r+0x1304>
 801f50e:	ac25      	add	r4, sp, #148	; 0x94
 801f510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f512:	781b      	ldrb	r3, [r3, #0]
 801f514:	441d      	add	r5, r3
 801f516:	e732      	b.n	801f37e <_svfprintf_r+0xf6e>
 801f518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f51a:	3b01      	subs	r3, #1
 801f51c:	930a      	str	r3, [sp, #40]	; 0x28
 801f51e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f520:	3b01      	subs	r3, #1
 801f522:	9309      	str	r3, [sp, #36]	; 0x24
 801f524:	e7b0      	b.n	801f488 <_svfprintf_r+0x1078>
 801f526:	aa22      	add	r2, sp, #136	; 0x88
 801f528:	4641      	mov	r1, r8
 801f52a:	4650      	mov	r0, sl
 801f52c:	f003 fe88 	bl	8023240 <__ssprint_r>
 801f530:	2800      	cmp	r0, #0
 801f532:	f040 80ef 	bne.w	801f714 <_svfprintf_r+0x1304>
 801f536:	ac25      	add	r4, sp, #148	; 0x94
 801f538:	e7b4      	b.n	801f4a4 <_svfprintf_r+0x1094>
 801f53a:	aa22      	add	r2, sp, #136	; 0x88
 801f53c:	4641      	mov	r1, r8
 801f53e:	4650      	mov	r0, sl
 801f540:	f003 fe7e 	bl	8023240 <__ssprint_r>
 801f544:	2800      	cmp	r0, #0
 801f546:	f040 80e5 	bne.w	801f714 <_svfprintf_r+0x1304>
 801f54a:	ac25      	add	r4, sp, #148	; 0x94
 801f54c:	e7c0      	b.n	801f4d0 <_svfprintf_r+0x10c0>
 801f54e:	2010      	movs	r0, #16
 801f550:	4402      	add	r2, r0
 801f552:	2b07      	cmp	r3, #7
 801f554:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801f558:	6060      	str	r0, [r4, #4]
 801f55a:	dd08      	ble.n	801f56e <_svfprintf_r+0x115e>
 801f55c:	aa22      	add	r2, sp, #136	; 0x88
 801f55e:	4641      	mov	r1, r8
 801f560:	4650      	mov	r0, sl
 801f562:	f003 fe6d 	bl	8023240 <__ssprint_r>
 801f566:	2800      	cmp	r0, #0
 801f568:	f040 80d4 	bne.w	801f714 <_svfprintf_r+0x1304>
 801f56c:	a925      	add	r1, sp, #148	; 0x94
 801f56e:	3e10      	subs	r6, #16
 801f570:	460c      	mov	r4, r1
 801f572:	e7b4      	b.n	801f4de <_svfprintf_r+0x10ce>
 801f574:	460c      	mov	r4, r1
 801f576:	e7cb      	b.n	801f510 <_svfprintf_r+0x1100>
 801f578:	aa22      	add	r2, sp, #136	; 0x88
 801f57a:	4641      	mov	r1, r8
 801f57c:	4650      	mov	r0, sl
 801f57e:	f003 fe5f 	bl	8023240 <__ssprint_r>
 801f582:	2800      	cmp	r0, #0
 801f584:	f040 80c6 	bne.w	801f714 <_svfprintf_r+0x1304>
 801f588:	ac25      	add	r4, sp, #148	; 0x94
 801f58a:	e719      	b.n	801f3c0 <_svfprintf_r+0xfb0>
 801f58c:	aa22      	add	r2, sp, #136	; 0x88
 801f58e:	4641      	mov	r1, r8
 801f590:	4650      	mov	r0, sl
 801f592:	f003 fe55 	bl	8023240 <__ssprint_r>
 801f596:	2800      	cmp	r0, #0
 801f598:	f040 80bc 	bne.w	801f714 <_svfprintf_r+0x1304>
 801f59c:	ac25      	add	r4, sp, #148	; 0x94
 801f59e:	e726      	b.n	801f3ee <_svfprintf_r+0xfde>
 801f5a0:	0806f7ac 	.word	0x0806f7ac
 801f5a4:	9a05      	ldr	r2, [sp, #20]
 801f5a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f5a8:	2a01      	cmp	r2, #1
 801f5aa:	f106 0601 	add.w	r6, r6, #1
 801f5ae:	f103 0301 	add.w	r3, r3, #1
 801f5b2:	f104 0508 	add.w	r5, r4, #8
 801f5b6:	dc02      	bgt.n	801f5be <_svfprintf_r+0x11ae>
 801f5b8:	f01b 0f01 	tst.w	fp, #1
 801f5bc:	d07e      	beq.n	801f6bc <_svfprintf_r+0x12ac>
 801f5be:	2201      	movs	r2, #1
 801f5c0:	2b07      	cmp	r3, #7
 801f5c2:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801f5c6:	f8c4 9000 	str.w	r9, [r4]
 801f5ca:	6062      	str	r2, [r4, #4]
 801f5cc:	dd08      	ble.n	801f5e0 <_svfprintf_r+0x11d0>
 801f5ce:	aa22      	add	r2, sp, #136	; 0x88
 801f5d0:	4641      	mov	r1, r8
 801f5d2:	4650      	mov	r0, sl
 801f5d4:	f003 fe34 	bl	8023240 <__ssprint_r>
 801f5d8:	2800      	cmp	r0, #0
 801f5da:	f040 809b 	bne.w	801f714 <_svfprintf_r+0x1304>
 801f5de:	ad25      	add	r5, sp, #148	; 0x94
 801f5e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f5e2:	602b      	str	r3, [r5, #0]
 801f5e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f5e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f5e8:	606b      	str	r3, [r5, #4]
 801f5ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f5ec:	4413      	add	r3, r2
 801f5ee:	9324      	str	r3, [sp, #144]	; 0x90
 801f5f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f5f2:	3301      	adds	r3, #1
 801f5f4:	2b07      	cmp	r3, #7
 801f5f6:	9323      	str	r3, [sp, #140]	; 0x8c
 801f5f8:	dc32      	bgt.n	801f660 <_svfprintf_r+0x1250>
 801f5fa:	3508      	adds	r5, #8
 801f5fc:	9b05      	ldr	r3, [sp, #20]
 801f5fe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801f602:	1e5c      	subs	r4, r3, #1
 801f604:	2200      	movs	r2, #0
 801f606:	2300      	movs	r3, #0
 801f608:	f7e1 fa6e 	bl	8000ae8 <__aeabi_dcmpeq>
 801f60c:	2800      	cmp	r0, #0
 801f60e:	d130      	bne.n	801f672 <_svfprintf_r+0x1262>
 801f610:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801f612:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f614:	9a05      	ldr	r2, [sp, #20]
 801f616:	3101      	adds	r1, #1
 801f618:	3b01      	subs	r3, #1
 801f61a:	f109 0001 	add.w	r0, r9, #1
 801f61e:	4413      	add	r3, r2
 801f620:	2907      	cmp	r1, #7
 801f622:	e9c5 0400 	strd	r0, r4, [r5]
 801f626:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 801f62a:	dd50      	ble.n	801f6ce <_svfprintf_r+0x12be>
 801f62c:	aa22      	add	r2, sp, #136	; 0x88
 801f62e:	4641      	mov	r1, r8
 801f630:	4650      	mov	r0, sl
 801f632:	f003 fe05 	bl	8023240 <__ssprint_r>
 801f636:	2800      	cmp	r0, #0
 801f638:	d16c      	bne.n	801f714 <_svfprintf_r+0x1304>
 801f63a:	ad25      	add	r5, sp, #148	; 0x94
 801f63c:	ab1e      	add	r3, sp, #120	; 0x78
 801f63e:	602b      	str	r3, [r5, #0]
 801f640:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f642:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801f644:	606b      	str	r3, [r5, #4]
 801f646:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f648:	4413      	add	r3, r2
 801f64a:	9324      	str	r3, [sp, #144]	; 0x90
 801f64c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f64e:	3301      	adds	r3, #1
 801f650:	2b07      	cmp	r3, #7
 801f652:	9323      	str	r3, [sp, #140]	; 0x8c
 801f654:	f73f adb7 	bgt.w	801f1c6 <_svfprintf_r+0xdb6>
 801f658:	f105 0408 	add.w	r4, r5, #8
 801f65c:	f7ff babe 	b.w	801ebdc <_svfprintf_r+0x7cc>
 801f660:	aa22      	add	r2, sp, #136	; 0x88
 801f662:	4641      	mov	r1, r8
 801f664:	4650      	mov	r0, sl
 801f666:	f003 fdeb 	bl	8023240 <__ssprint_r>
 801f66a:	2800      	cmp	r0, #0
 801f66c:	d152      	bne.n	801f714 <_svfprintf_r+0x1304>
 801f66e:	ad25      	add	r5, sp, #148	; 0x94
 801f670:	e7c4      	b.n	801f5fc <_svfprintf_r+0x11ec>
 801f672:	2c00      	cmp	r4, #0
 801f674:	dde2      	ble.n	801f63c <_svfprintf_r+0x122c>
 801f676:	4e56      	ldr	r6, [pc, #344]	; (801f7d0 <_svfprintf_r+0x13c0>)
 801f678:	2710      	movs	r7, #16
 801f67a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801f67e:	2c10      	cmp	r4, #16
 801f680:	f103 0301 	add.w	r3, r3, #1
 801f684:	f105 0108 	add.w	r1, r5, #8
 801f688:	602e      	str	r6, [r5, #0]
 801f68a:	dc07      	bgt.n	801f69c <_svfprintf_r+0x128c>
 801f68c:	606c      	str	r4, [r5, #4]
 801f68e:	2b07      	cmp	r3, #7
 801f690:	4414      	add	r4, r2
 801f692:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 801f696:	dcc9      	bgt.n	801f62c <_svfprintf_r+0x121c>
 801f698:	460d      	mov	r5, r1
 801f69a:	e7cf      	b.n	801f63c <_svfprintf_r+0x122c>
 801f69c:	3210      	adds	r2, #16
 801f69e:	2b07      	cmp	r3, #7
 801f6a0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801f6a4:	606f      	str	r7, [r5, #4]
 801f6a6:	dd06      	ble.n	801f6b6 <_svfprintf_r+0x12a6>
 801f6a8:	aa22      	add	r2, sp, #136	; 0x88
 801f6aa:	4641      	mov	r1, r8
 801f6ac:	4650      	mov	r0, sl
 801f6ae:	f003 fdc7 	bl	8023240 <__ssprint_r>
 801f6b2:	bb78      	cbnz	r0, 801f714 <_svfprintf_r+0x1304>
 801f6b4:	a925      	add	r1, sp, #148	; 0x94
 801f6b6:	3c10      	subs	r4, #16
 801f6b8:	460d      	mov	r5, r1
 801f6ba:	e7de      	b.n	801f67a <_svfprintf_r+0x126a>
 801f6bc:	2201      	movs	r2, #1
 801f6be:	2b07      	cmp	r3, #7
 801f6c0:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801f6c4:	f8c4 9000 	str.w	r9, [r4]
 801f6c8:	6062      	str	r2, [r4, #4]
 801f6ca:	ddb7      	ble.n	801f63c <_svfprintf_r+0x122c>
 801f6cc:	e7ae      	b.n	801f62c <_svfprintf_r+0x121c>
 801f6ce:	3508      	adds	r5, #8
 801f6d0:	e7b4      	b.n	801f63c <_svfprintf_r+0x122c>
 801f6d2:	460c      	mov	r4, r1
 801f6d4:	f7ff ba82 	b.w	801ebdc <_svfprintf_r+0x7cc>
 801f6d8:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801f6dc:	1a9d      	subs	r5, r3, r2
 801f6de:	2d00      	cmp	r5, #0
 801f6e0:	f77f aa80 	ble.w	801ebe4 <_svfprintf_r+0x7d4>
 801f6e4:	4e3b      	ldr	r6, [pc, #236]	; (801f7d4 <_svfprintf_r+0x13c4>)
 801f6e6:	2710      	movs	r7, #16
 801f6e8:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801f6ec:	2d10      	cmp	r5, #16
 801f6ee:	f103 0301 	add.w	r3, r3, #1
 801f6f2:	6026      	str	r6, [r4, #0]
 801f6f4:	dc18      	bgt.n	801f728 <_svfprintf_r+0x1318>
 801f6f6:	6065      	str	r5, [r4, #4]
 801f6f8:	2b07      	cmp	r3, #7
 801f6fa:	4415      	add	r5, r2
 801f6fc:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 801f700:	f77f aa70 	ble.w	801ebe4 <_svfprintf_r+0x7d4>
 801f704:	aa22      	add	r2, sp, #136	; 0x88
 801f706:	4641      	mov	r1, r8
 801f708:	4650      	mov	r0, sl
 801f70a:	f003 fd99 	bl	8023240 <__ssprint_r>
 801f70e:	2800      	cmp	r0, #0
 801f710:	f43f aa68 	beq.w	801ebe4 <_svfprintf_r+0x7d4>
 801f714:	9b03      	ldr	r3, [sp, #12]
 801f716:	2b00      	cmp	r3, #0
 801f718:	f43f a887 	beq.w	801e82a <_svfprintf_r+0x41a>
 801f71c:	4619      	mov	r1, r3
 801f71e:	4650      	mov	r0, sl
 801f720:	f002 fb30 	bl	8021d84 <_free_r>
 801f724:	f7ff b881 	b.w	801e82a <_svfprintf_r+0x41a>
 801f728:	3210      	adds	r2, #16
 801f72a:	2b07      	cmp	r3, #7
 801f72c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801f730:	6067      	str	r7, [r4, #4]
 801f732:	dc02      	bgt.n	801f73a <_svfprintf_r+0x132a>
 801f734:	3408      	adds	r4, #8
 801f736:	3d10      	subs	r5, #16
 801f738:	e7d6      	b.n	801f6e8 <_svfprintf_r+0x12d8>
 801f73a:	aa22      	add	r2, sp, #136	; 0x88
 801f73c:	4641      	mov	r1, r8
 801f73e:	4650      	mov	r0, sl
 801f740:	f003 fd7e 	bl	8023240 <__ssprint_r>
 801f744:	2800      	cmp	r0, #0
 801f746:	d1e5      	bne.n	801f714 <_svfprintf_r+0x1304>
 801f748:	ac25      	add	r4, sp, #148	; 0x94
 801f74a:	e7f4      	b.n	801f736 <_svfprintf_r+0x1326>
 801f74c:	9903      	ldr	r1, [sp, #12]
 801f74e:	4650      	mov	r0, sl
 801f750:	f002 fb18 	bl	8021d84 <_free_r>
 801f754:	f7ff ba5e 	b.w	801ec14 <_svfprintf_r+0x804>
 801f758:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f75a:	2b00      	cmp	r3, #0
 801f75c:	f43f a865 	beq.w	801e82a <_svfprintf_r+0x41a>
 801f760:	aa22      	add	r2, sp, #136	; 0x88
 801f762:	4641      	mov	r1, r8
 801f764:	4650      	mov	r0, sl
 801f766:	f003 fd6b 	bl	8023240 <__ssprint_r>
 801f76a:	f7ff b85e 	b.w	801e82a <_svfprintf_r+0x41a>
 801f76e:	ea56 0205 	orrs.w	r2, r6, r5
 801f772:	465f      	mov	r7, fp
 801f774:	f43f ab78 	beq.w	801ee68 <_svfprintf_r+0xa58>
 801f778:	2b01      	cmp	r3, #1
 801f77a:	f43f ac15 	beq.w	801efa8 <_svfprintf_r+0xb98>
 801f77e:	2b02      	cmp	r3, #2
 801f780:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 801f784:	f43f ac5b 	beq.w	801f03e <_svfprintf_r+0xc2e>
 801f788:	f006 0307 	and.w	r3, r6, #7
 801f78c:	08f6      	lsrs	r6, r6, #3
 801f78e:	ea46 7645 	orr.w	r6, r6, r5, lsl #29
 801f792:	08ed      	lsrs	r5, r5, #3
 801f794:	3330      	adds	r3, #48	; 0x30
 801f796:	ea56 0105 	orrs.w	r1, r6, r5
 801f79a:	464a      	mov	r2, r9
 801f79c:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801f7a0:	d1f2      	bne.n	801f788 <_svfprintf_r+0x1378>
 801f7a2:	07f9      	lsls	r1, r7, #31
 801f7a4:	d506      	bpl.n	801f7b4 <_svfprintf_r+0x13a4>
 801f7a6:	2b30      	cmp	r3, #48	; 0x30
 801f7a8:	d004      	beq.n	801f7b4 <_svfprintf_r+0x13a4>
 801f7aa:	2330      	movs	r3, #48	; 0x30
 801f7ac:	f809 3c01 	strb.w	r3, [r9, #-1]
 801f7b0:	f1a2 0902 	sub.w	r9, r2, #2
 801f7b4:	ab4e      	add	r3, sp, #312	; 0x138
 801f7b6:	eba3 0309 	sub.w	r3, r3, r9
 801f7ba:	9e04      	ldr	r6, [sp, #16]
 801f7bc:	9304      	str	r3, [sp, #16]
 801f7be:	2300      	movs	r3, #0
 801f7c0:	46bb      	mov	fp, r7
 801f7c2:	9303      	str	r3, [sp, #12]
 801f7c4:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801f7c8:	461d      	mov	r5, r3
 801f7ca:	f7ff b94d 	b.w	801ea68 <_svfprintf_r+0x658>
 801f7ce:	bf00      	nop
 801f7d0:	0806f7ac 	.word	0x0806f7ac
 801f7d4:	0806f79c 	.word	0x0806f79c

0801f7d8 <_vfprintf_r>:
 801f7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7dc:	ed2d 8b04 	vpush	{d8-d9}
 801f7e0:	b0cf      	sub	sp, #316	; 0x13c
 801f7e2:	4689      	mov	r9, r1
 801f7e4:	4690      	mov	r8, r2
 801f7e6:	461c      	mov	r4, r3
 801f7e8:	461e      	mov	r6, r3
 801f7ea:	4682      	mov	sl, r0
 801f7ec:	f002 fcf4 	bl	80221d8 <_localeconv_r>
 801f7f0:	6803      	ldr	r3, [r0, #0]
 801f7f2:	9313      	str	r3, [sp, #76]	; 0x4c
 801f7f4:	4618      	mov	r0, r3
 801f7f6:	f7e0 fcfb 	bl	80001f0 <strlen>
 801f7fa:	900e      	str	r0, [sp, #56]	; 0x38
 801f7fc:	f1ba 0f00 	cmp.w	sl, #0
 801f800:	d005      	beq.n	801f80e <_vfprintf_r+0x36>
 801f802:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 801f806:	b913      	cbnz	r3, 801f80e <_vfprintf_r+0x36>
 801f808:	4650      	mov	r0, sl
 801f80a:	f002 fa2b 	bl	8021c64 <__sinit>
 801f80e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 801f812:	07d8      	lsls	r0, r3, #31
 801f814:	d407      	bmi.n	801f826 <_vfprintf_r+0x4e>
 801f816:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801f81a:	0599      	lsls	r1, r3, #22
 801f81c:	d403      	bmi.n	801f826 <_vfprintf_r+0x4e>
 801f81e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 801f822:	f002 fcdf 	bl	80221e4 <__retarget_lock_acquire_recursive>
 801f826:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
 801f82a:	049a      	lsls	r2, r3, #18
 801f82c:	d409      	bmi.n	801f842 <_vfprintf_r+0x6a>
 801f82e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801f832:	f8a9 300c 	strh.w	r3, [r9, #12]
 801f836:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 801f83a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801f83e:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
 801f842:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801f846:	071b      	lsls	r3, r3, #28
 801f848:	d502      	bpl.n	801f850 <_vfprintf_r+0x78>
 801f84a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f84e:	b9d3      	cbnz	r3, 801f886 <_vfprintf_r+0xae>
 801f850:	4649      	mov	r1, r9
 801f852:	4650      	mov	r0, sl
 801f854:	f001 fa3a 	bl	8020ccc <__swsetup_r>
 801f858:	b1a8      	cbz	r0, 801f886 <_vfprintf_r+0xae>
 801f85a:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 801f85e:	07df      	lsls	r7, r3, #31
 801f860:	d508      	bpl.n	801f874 <_vfprintf_r+0x9c>
 801f862:	f04f 33ff 	mov.w	r3, #4294967295
 801f866:	930f      	str	r3, [sp, #60]	; 0x3c
 801f868:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801f86a:	b04f      	add	sp, #316	; 0x13c
 801f86c:	ecbd 8b04 	vpop	{d8-d9}
 801f870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f874:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801f878:	059e      	lsls	r6, r3, #22
 801f87a:	d4f2      	bmi.n	801f862 <_vfprintf_r+0x8a>
 801f87c:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 801f880:	f002 fcb1 	bl	80221e6 <__retarget_lock_release_recursive>
 801f884:	e7ed      	b.n	801f862 <_vfprintf_r+0x8a>
 801f886:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801f88a:	f003 021a 	and.w	r2, r3, #26
 801f88e:	2a0a      	cmp	r2, #10
 801f890:	d118      	bne.n	801f8c4 <_vfprintf_r+0xec>
 801f892:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
 801f896:	2a00      	cmp	r2, #0
 801f898:	db14      	blt.n	801f8c4 <_vfprintf_r+0xec>
 801f89a:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
 801f89e:	07d5      	lsls	r5, r2, #31
 801f8a0:	d405      	bmi.n	801f8ae <_vfprintf_r+0xd6>
 801f8a2:	0598      	lsls	r0, r3, #22
 801f8a4:	d403      	bmi.n	801f8ae <_vfprintf_r+0xd6>
 801f8a6:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 801f8aa:	f002 fc9c 	bl	80221e6 <__retarget_lock_release_recursive>
 801f8ae:	4623      	mov	r3, r4
 801f8b0:	4642      	mov	r2, r8
 801f8b2:	4649      	mov	r1, r9
 801f8b4:	4650      	mov	r0, sl
 801f8b6:	b04f      	add	sp, #316	; 0x13c
 801f8b8:	ecbd 8b04 	vpop	{d8-d9}
 801f8bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8c0:	f001 b9c4 	b.w	8020c4c <__sbprintf>
 801f8c4:	ed9f 7b92 	vldr	d7, [pc, #584]	; 801fb10 <_vfprintf_r+0x338>
 801f8c8:	2500      	movs	r5, #0
 801f8ca:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 801f8ce:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801f8d2:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 801f8d6:	ac25      	add	r4, sp, #148	; 0x94
 801f8d8:	9422      	str	r4, [sp, #136]	; 0x88
 801f8da:	9505      	str	r5, [sp, #20]
 801f8dc:	950a      	str	r5, [sp, #40]	; 0x28
 801f8de:	9512      	str	r5, [sp, #72]	; 0x48
 801f8e0:	9514      	str	r5, [sp, #80]	; 0x50
 801f8e2:	950f      	str	r5, [sp, #60]	; 0x3c
 801f8e4:	4643      	mov	r3, r8
 801f8e6:	461d      	mov	r5, r3
 801f8e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f8ec:	b10a      	cbz	r2, 801f8f2 <_vfprintf_r+0x11a>
 801f8ee:	2a25      	cmp	r2, #37	; 0x25
 801f8f0:	d1f9      	bne.n	801f8e6 <_vfprintf_r+0x10e>
 801f8f2:	ebb5 0708 	subs.w	r7, r5, r8
 801f8f6:	d00d      	beq.n	801f914 <_vfprintf_r+0x13c>
 801f8f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f8fa:	443b      	add	r3, r7
 801f8fc:	9324      	str	r3, [sp, #144]	; 0x90
 801f8fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f900:	3301      	adds	r3, #1
 801f902:	2b07      	cmp	r3, #7
 801f904:	e9c4 8700 	strd	r8, r7, [r4]
 801f908:	9323      	str	r3, [sp, #140]	; 0x8c
 801f90a:	dc79      	bgt.n	801fa00 <_vfprintf_r+0x228>
 801f90c:	3408      	adds	r4, #8
 801f90e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f910:	443b      	add	r3, r7
 801f912:	930f      	str	r3, [sp, #60]	; 0x3c
 801f914:	782b      	ldrb	r3, [r5, #0]
 801f916:	2b00      	cmp	r3, #0
 801f918:	f001 8154 	beq.w	8020bc4 <_vfprintf_r+0x13ec>
 801f91c:	2300      	movs	r3, #0
 801f91e:	f04f 32ff 	mov.w	r2, #4294967295
 801f922:	3501      	adds	r5, #1
 801f924:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801f928:	9204      	str	r2, [sp, #16]
 801f92a:	9310      	str	r3, [sp, #64]	; 0x40
 801f92c:	469b      	mov	fp, r3
 801f92e:	270a      	movs	r7, #10
 801f930:	212b      	movs	r1, #43	; 0x2b
 801f932:	462b      	mov	r3, r5
 801f934:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f938:	9206      	str	r2, [sp, #24]
 801f93a:	930b      	str	r3, [sp, #44]	; 0x2c
 801f93c:	9b06      	ldr	r3, [sp, #24]
 801f93e:	3b20      	subs	r3, #32
 801f940:	2b5a      	cmp	r3, #90	; 0x5a
 801f942:	f200 85c8 	bhi.w	80204d6 <_vfprintf_r+0xcfe>
 801f946:	e8df f013 	tbh	[pc, r3, lsl #1]
 801f94a:	007e      	.short	0x007e
 801f94c:	05c605c6 	.word	0x05c605c6
 801f950:	05c60086 	.word	0x05c60086
 801f954:	05c605c6 	.word	0x05c605c6
 801f958:	05c60065 	.word	0x05c60065
 801f95c:	008905c6 	.word	0x008905c6
 801f960:	05c60093 	.word	0x05c60093
 801f964:	00960090 	.word	0x00960090
 801f968:	00b205c6 	.word	0x00b205c6
 801f96c:	00b500b5 	.word	0x00b500b5
 801f970:	00b500b5 	.word	0x00b500b5
 801f974:	00b500b5 	.word	0x00b500b5
 801f978:	00b500b5 	.word	0x00b500b5
 801f97c:	05c600b5 	.word	0x05c600b5
 801f980:	05c605c6 	.word	0x05c605c6
 801f984:	05c605c6 	.word	0x05c605c6
 801f988:	05c605c6 	.word	0x05c605c6
 801f98c:	05c6012a 	.word	0x05c6012a
 801f990:	00fa00e7 	.word	0x00fa00e7
 801f994:	012a012a 	.word	0x012a012a
 801f998:	05c6012a 	.word	0x05c6012a
 801f99c:	05c605c6 	.word	0x05c605c6
 801f9a0:	00c505c6 	.word	0x00c505c6
 801f9a4:	05c605c6 	.word	0x05c605c6
 801f9a8:	05c604a0 	.word	0x05c604a0
 801f9ac:	05c605c6 	.word	0x05c605c6
 801f9b0:	05c604ea 	.word	0x05c604ea
 801f9b4:	05c6050b 	.word	0x05c6050b
 801f9b8:	052d05c6 	.word	0x052d05c6
 801f9bc:	05c605c6 	.word	0x05c605c6
 801f9c0:	05c605c6 	.word	0x05c605c6
 801f9c4:	05c605c6 	.word	0x05c605c6
 801f9c8:	05c605c6 	.word	0x05c605c6
 801f9cc:	05c6012a 	.word	0x05c6012a
 801f9d0:	00fc00e7 	.word	0x00fc00e7
 801f9d4:	012a012a 	.word	0x012a012a
 801f9d8:	00c8012a 	.word	0x00c8012a
 801f9dc:	00dc00fc 	.word	0x00dc00fc
 801f9e0:	00d505c6 	.word	0x00d505c6
 801f9e4:	047b05c6 	.word	0x047b05c6
 801f9e8:	04d804a2 	.word	0x04d804a2
 801f9ec:	05c600dc 	.word	0x05c600dc
 801f9f0:	007c04ea 	.word	0x007c04ea
 801f9f4:	05c6050d 	.word	0x05c6050d
 801f9f8:	054c05c6 	.word	0x054c05c6
 801f9fc:	007c05c6 	.word	0x007c05c6
 801fa00:	aa22      	add	r2, sp, #136	; 0x88
 801fa02:	4649      	mov	r1, r9
 801fa04:	4650      	mov	r0, sl
 801fa06:	f003 fca3 	bl	8023350 <__sprint_r>
 801fa0a:	2800      	cmp	r0, #0
 801fa0c:	f040 8135 	bne.w	801fc7a <_vfprintf_r+0x4a2>
 801fa10:	ac25      	add	r4, sp, #148	; 0x94
 801fa12:	e77c      	b.n	801f90e <_vfprintf_r+0x136>
 801fa14:	4650      	mov	r0, sl
 801fa16:	f002 fbdf 	bl	80221d8 <_localeconv_r>
 801fa1a:	6843      	ldr	r3, [r0, #4]
 801fa1c:	9314      	str	r3, [sp, #80]	; 0x50
 801fa1e:	4618      	mov	r0, r3
 801fa20:	f7e0 fbe6 	bl	80001f0 <strlen>
 801fa24:	9012      	str	r0, [sp, #72]	; 0x48
 801fa26:	4650      	mov	r0, sl
 801fa28:	f002 fbd6 	bl	80221d8 <_localeconv_r>
 801fa2c:	6883      	ldr	r3, [r0, #8]
 801fa2e:	930a      	str	r3, [sp, #40]	; 0x28
 801fa30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fa32:	212b      	movs	r1, #43	; 0x2b
 801fa34:	b12b      	cbz	r3, 801fa42 <_vfprintf_r+0x26a>
 801fa36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fa38:	b11b      	cbz	r3, 801fa42 <_vfprintf_r+0x26a>
 801fa3a:	781b      	ldrb	r3, [r3, #0]
 801fa3c:	b10b      	cbz	r3, 801fa42 <_vfprintf_r+0x26a>
 801fa3e:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 801fa42:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801fa44:	e775      	b.n	801f932 <_vfprintf_r+0x15a>
 801fa46:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801fa4a:	2b00      	cmp	r3, #0
 801fa4c:	d1f9      	bne.n	801fa42 <_vfprintf_r+0x26a>
 801fa4e:	2320      	movs	r3, #32
 801fa50:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801fa54:	e7f5      	b.n	801fa42 <_vfprintf_r+0x26a>
 801fa56:	f04b 0b01 	orr.w	fp, fp, #1
 801fa5a:	e7f2      	b.n	801fa42 <_vfprintf_r+0x26a>
 801fa5c:	f856 3b04 	ldr.w	r3, [r6], #4
 801fa60:	9310      	str	r3, [sp, #64]	; 0x40
 801fa62:	2b00      	cmp	r3, #0
 801fa64:	daed      	bge.n	801fa42 <_vfprintf_r+0x26a>
 801fa66:	425b      	negs	r3, r3
 801fa68:	9310      	str	r3, [sp, #64]	; 0x40
 801fa6a:	f04b 0b04 	orr.w	fp, fp, #4
 801fa6e:	e7e8      	b.n	801fa42 <_vfprintf_r+0x26a>
 801fa70:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 801fa74:	e7e5      	b.n	801fa42 <_vfprintf_r+0x26a>
 801fa76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fa78:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fa7c:	9206      	str	r2, [sp, #24]
 801fa7e:	2a2a      	cmp	r2, #42	; 0x2a
 801fa80:	d112      	bne.n	801faa8 <_vfprintf_r+0x2d0>
 801fa82:	f856 0b04 	ldr.w	r0, [r6], #4
 801fa86:	930b      	str	r3, [sp, #44]	; 0x2c
 801fa88:	ea40 72e0 	orr.w	r2, r0, r0, asr #31
 801fa8c:	9204      	str	r2, [sp, #16]
 801fa8e:	e7d8      	b.n	801fa42 <_vfprintf_r+0x26a>
 801fa90:	9804      	ldr	r0, [sp, #16]
 801fa92:	fb07 2200 	mla	r2, r7, r0, r2
 801fa96:	9204      	str	r2, [sp, #16]
 801fa98:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fa9c:	9206      	str	r2, [sp, #24]
 801fa9e:	9a06      	ldr	r2, [sp, #24]
 801faa0:	3a30      	subs	r2, #48	; 0x30
 801faa2:	2a09      	cmp	r2, #9
 801faa4:	d9f4      	bls.n	801fa90 <_vfprintf_r+0x2b8>
 801faa6:	e748      	b.n	801f93a <_vfprintf_r+0x162>
 801faa8:	2200      	movs	r2, #0
 801faaa:	9204      	str	r2, [sp, #16]
 801faac:	e7f7      	b.n	801fa9e <_vfprintf_r+0x2c6>
 801faae:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 801fab2:	e7c6      	b.n	801fa42 <_vfprintf_r+0x26a>
 801fab4:	2200      	movs	r2, #0
 801fab6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fab8:	9210      	str	r2, [sp, #64]	; 0x40
 801faba:	9a06      	ldr	r2, [sp, #24]
 801fabc:	9810      	ldr	r0, [sp, #64]	; 0x40
 801fabe:	3a30      	subs	r2, #48	; 0x30
 801fac0:	fb07 2200 	mla	r2, r7, r0, r2
 801fac4:	9210      	str	r2, [sp, #64]	; 0x40
 801fac6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801faca:	9206      	str	r2, [sp, #24]
 801facc:	3a30      	subs	r2, #48	; 0x30
 801face:	2a09      	cmp	r2, #9
 801fad0:	d9f3      	bls.n	801faba <_vfprintf_r+0x2e2>
 801fad2:	e732      	b.n	801f93a <_vfprintf_r+0x162>
 801fad4:	f04b 0b08 	orr.w	fp, fp, #8
 801fad8:	e7b3      	b.n	801fa42 <_vfprintf_r+0x26a>
 801fada:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fadc:	781b      	ldrb	r3, [r3, #0]
 801fade:	2b68      	cmp	r3, #104	; 0x68
 801fae0:	bf01      	itttt	eq
 801fae2:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 801fae4:	3301      	addeq	r3, #1
 801fae6:	930b      	streq	r3, [sp, #44]	; 0x2c
 801fae8:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 801faec:	bf18      	it	ne
 801faee:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 801faf2:	e7a6      	b.n	801fa42 <_vfprintf_r+0x26a>
 801faf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801faf6:	781b      	ldrb	r3, [r3, #0]
 801faf8:	2b6c      	cmp	r3, #108	; 0x6c
 801fafa:	d105      	bne.n	801fb08 <_vfprintf_r+0x330>
 801fafc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fafe:	3301      	adds	r3, #1
 801fb00:	930b      	str	r3, [sp, #44]	; 0x2c
 801fb02:	f04b 0b20 	orr.w	fp, fp, #32
 801fb06:	e79c      	b.n	801fa42 <_vfprintf_r+0x26a>
 801fb08:	f04b 0b10 	orr.w	fp, fp, #16
 801fb0c:	e799      	b.n	801fa42 <_vfprintf_r+0x26a>
 801fb0e:	bf00      	nop
	...
 801fb18:	4632      	mov	r2, r6
 801fb1a:	2000      	movs	r0, #0
 801fb1c:	f852 3b04 	ldr.w	r3, [r2], #4
 801fb20:	9207      	str	r2, [sp, #28]
 801fb22:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 801fb26:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 801fb2a:	2301      	movs	r3, #1
 801fb2c:	e9cd 0008 	strd	r0, r0, [sp, #32]
 801fb30:	9003      	str	r0, [sp, #12]
 801fb32:	9304      	str	r3, [sp, #16]
 801fb34:	4606      	mov	r6, r0
 801fb36:	4605      	mov	r5, r0
 801fb38:	f10d 08d4 	add.w	r8, sp, #212	; 0xd4
 801fb3c:	e1c6      	b.n	801fecc <_vfprintf_r+0x6f4>
 801fb3e:	f04b 0b10 	orr.w	fp, fp, #16
 801fb42:	f01b 0f20 	tst.w	fp, #32
 801fb46:	d012      	beq.n	801fb6e <_vfprintf_r+0x396>
 801fb48:	3607      	adds	r6, #7
 801fb4a:	f026 0307 	bic.w	r3, r6, #7
 801fb4e:	461a      	mov	r2, r3
 801fb50:	685d      	ldr	r5, [r3, #4]
 801fb52:	f852 6b08 	ldr.w	r6, [r2], #8
 801fb56:	9207      	str	r2, [sp, #28]
 801fb58:	2d00      	cmp	r5, #0
 801fb5a:	da06      	bge.n	801fb6a <_vfprintf_r+0x392>
 801fb5c:	4276      	negs	r6, r6
 801fb5e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801fb62:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 801fb66:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801fb6a:	2301      	movs	r3, #1
 801fb6c:	e3a0      	b.n	80202b0 <_vfprintf_r+0xad8>
 801fb6e:	4633      	mov	r3, r6
 801fb70:	f01b 0f10 	tst.w	fp, #16
 801fb74:	f853 5b04 	ldr.w	r5, [r3], #4
 801fb78:	9307      	str	r3, [sp, #28]
 801fb7a:	d002      	beq.n	801fb82 <_vfprintf_r+0x3aa>
 801fb7c:	462e      	mov	r6, r5
 801fb7e:	17ed      	asrs	r5, r5, #31
 801fb80:	e7ea      	b.n	801fb58 <_vfprintf_r+0x380>
 801fb82:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801fb86:	d003      	beq.n	801fb90 <_vfprintf_r+0x3b8>
 801fb88:	b22e      	sxth	r6, r5
 801fb8a:	f345 35c0 	sbfx	r5, r5, #15, #1
 801fb8e:	e7e3      	b.n	801fb58 <_vfprintf_r+0x380>
 801fb90:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801fb94:	d0f2      	beq.n	801fb7c <_vfprintf_r+0x3a4>
 801fb96:	b26e      	sxtb	r6, r5
 801fb98:	f345 15c0 	sbfx	r5, r5, #7, #1
 801fb9c:	e7dc      	b.n	801fb58 <_vfprintf_r+0x380>
 801fb9e:	3607      	adds	r6, #7
 801fba0:	f026 0307 	bic.w	r3, r6, #7
 801fba4:	ecb3 7b02 	vldmia	r3!, {d7}
 801fba8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801fbac:	9307      	str	r3, [sp, #28]
 801fbae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fbb0:	ee09 3a10 	vmov	s18, r3
 801fbb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fbb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801fbba:	ee09 3a90 	vmov	s19, r3
 801fbbe:	f04f 32ff 	mov.w	r2, #4294967295
 801fbc2:	4b3f      	ldr	r3, [pc, #252]	; (801fcc0 <_vfprintf_r+0x4e8>)
 801fbc4:	ec51 0b19 	vmov	r0, r1, d9
 801fbc8:	f7e0 ffc0 	bl	8000b4c <__aeabi_dcmpun>
 801fbcc:	bb10      	cbnz	r0, 801fc14 <_vfprintf_r+0x43c>
 801fbce:	4b3c      	ldr	r3, [pc, #240]	; (801fcc0 <_vfprintf_r+0x4e8>)
 801fbd0:	ec51 0b19 	vmov	r0, r1, d9
 801fbd4:	f04f 32ff 	mov.w	r2, #4294967295
 801fbd8:	f7e0 ff9a 	bl	8000b10 <__aeabi_dcmple>
 801fbdc:	b9d0      	cbnz	r0, 801fc14 <_vfprintf_r+0x43c>
 801fbde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801fbe2:	2200      	movs	r2, #0
 801fbe4:	2300      	movs	r3, #0
 801fbe6:	f7e0 ff89 	bl	8000afc <__aeabi_dcmplt>
 801fbea:	b110      	cbz	r0, 801fbf2 <_vfprintf_r+0x41a>
 801fbec:	232d      	movs	r3, #45	; 0x2d
 801fbee:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801fbf2:	4a34      	ldr	r2, [pc, #208]	; (801fcc4 <_vfprintf_r+0x4ec>)
 801fbf4:	4834      	ldr	r0, [pc, #208]	; (801fcc8 <_vfprintf_r+0x4f0>)
 801fbf6:	9b06      	ldr	r3, [sp, #24]
 801fbf8:	2100      	movs	r1, #0
 801fbfa:	2b47      	cmp	r3, #71	; 0x47
 801fbfc:	bfd4      	ite	le
 801fbfe:	4690      	movle	r8, r2
 801fc00:	4680      	movgt	r8, r0
 801fc02:	2303      	movs	r3, #3
 801fc04:	e9cd 1303 	strd	r1, r3, [sp, #12]
 801fc08:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 801fc0c:	2600      	movs	r6, #0
 801fc0e:	4633      	mov	r3, r6
 801fc10:	f001 b812 	b.w	8020c38 <_vfprintf_r+0x1460>
 801fc14:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801fc18:	4610      	mov	r0, r2
 801fc1a:	4619      	mov	r1, r3
 801fc1c:	f7e0 ff96 	bl	8000b4c <__aeabi_dcmpun>
 801fc20:	b140      	cbz	r0, 801fc34 <_vfprintf_r+0x45c>
 801fc22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fc24:	4a29      	ldr	r2, [pc, #164]	; (801fccc <_vfprintf_r+0x4f4>)
 801fc26:	482a      	ldr	r0, [pc, #168]	; (801fcd0 <_vfprintf_r+0x4f8>)
 801fc28:	2b00      	cmp	r3, #0
 801fc2a:	bfbc      	itt	lt
 801fc2c:	232d      	movlt	r3, #45	; 0x2d
 801fc2e:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 801fc32:	e7e0      	b.n	801fbf6 <_vfprintf_r+0x41e>
 801fc34:	9b06      	ldr	r3, [sp, #24]
 801fc36:	f023 0320 	bic.w	r3, r3, #32
 801fc3a:	2b41      	cmp	r3, #65	; 0x41
 801fc3c:	9308      	str	r3, [sp, #32]
 801fc3e:	d12e      	bne.n	801fc9e <_vfprintf_r+0x4c6>
 801fc40:	2330      	movs	r3, #48	; 0x30
 801fc42:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801fc46:	9b06      	ldr	r3, [sp, #24]
 801fc48:	2b61      	cmp	r3, #97	; 0x61
 801fc4a:	bf0c      	ite	eq
 801fc4c:	2378      	moveq	r3, #120	; 0x78
 801fc4e:	2358      	movne	r3, #88	; 0x58
 801fc50:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 801fc54:	9b04      	ldr	r3, [sp, #16]
 801fc56:	2b63      	cmp	r3, #99	; 0x63
 801fc58:	f04b 0b02 	orr.w	fp, fp, #2
 801fc5c:	dd3a      	ble.n	801fcd4 <_vfprintf_r+0x4fc>
 801fc5e:	1c59      	adds	r1, r3, #1
 801fc60:	4650      	mov	r0, sl
 801fc62:	f002 fb2d 	bl	80222c0 <_malloc_r>
 801fc66:	4680      	mov	r8, r0
 801fc68:	2800      	cmp	r0, #0
 801fc6a:	f040 8207 	bne.w	802007c <_vfprintf_r+0x8a4>
 801fc6e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801fc72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fc76:	f8a9 300c 	strh.w	r3, [r9, #12]
 801fc7a:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 801fc7e:	07d9      	lsls	r1, r3, #31
 801fc80:	d407      	bmi.n	801fc92 <_vfprintf_r+0x4ba>
 801fc82:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801fc86:	059a      	lsls	r2, r3, #22
 801fc88:	d403      	bmi.n	801fc92 <_vfprintf_r+0x4ba>
 801fc8a:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 801fc8e:	f002 faaa 	bl	80221e6 <__retarget_lock_release_recursive>
 801fc92:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801fc96:	065b      	lsls	r3, r3, #25
 801fc98:	f57f ade6 	bpl.w	801f868 <_vfprintf_r+0x90>
 801fc9c:	e5e1      	b.n	801f862 <_vfprintf_r+0x8a>
 801fc9e:	9b04      	ldr	r3, [sp, #16]
 801fca0:	3301      	adds	r3, #1
 801fca2:	f000 81ed 	beq.w	8020080 <_vfprintf_r+0x8a8>
 801fca6:	9b08      	ldr	r3, [sp, #32]
 801fca8:	2b47      	cmp	r3, #71	; 0x47
 801fcaa:	f040 81ec 	bne.w	8020086 <_vfprintf_r+0x8ae>
 801fcae:	9b04      	ldr	r3, [sp, #16]
 801fcb0:	2b00      	cmp	r3, #0
 801fcb2:	f040 81e8 	bne.w	8020086 <_vfprintf_r+0x8ae>
 801fcb6:	9303      	str	r3, [sp, #12]
 801fcb8:	2301      	movs	r3, #1
 801fcba:	9304      	str	r3, [sp, #16]
 801fcbc:	e00d      	b.n	801fcda <_vfprintf_r+0x502>
 801fcbe:	bf00      	nop
 801fcc0:	7fefffff 	.word	0x7fefffff
 801fcc4:	0806f768 	.word	0x0806f768
 801fcc8:	0806f76c 	.word	0x0806f76c
 801fccc:	0806f770 	.word	0x0806f770
 801fcd0:	0806f774 	.word	0x0806f774
 801fcd4:	9003      	str	r0, [sp, #12]
 801fcd6:	f10d 08d4 	add.w	r8, sp, #212	; 0xd4
 801fcda:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 801fcde:	9311      	str	r3, [sp, #68]	; 0x44
 801fce0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fce2:	2b00      	cmp	r3, #0
 801fce4:	f280 81d1 	bge.w	802008a <_vfprintf_r+0x8b2>
 801fce8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fcea:	ee08 3a10 	vmov	s16, r3
 801fcee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fcf0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801fcf4:	ee08 3a90 	vmov	s17, r3
 801fcf8:	232d      	movs	r3, #45	; 0x2d
 801fcfa:	9318      	str	r3, [sp, #96]	; 0x60
 801fcfc:	9b08      	ldr	r3, [sp, #32]
 801fcfe:	2b41      	cmp	r3, #65	; 0x41
 801fd00:	f040 81e1 	bne.w	80200c6 <_vfprintf_r+0x8ee>
 801fd04:	eeb0 0a48 	vmov.f32	s0, s16
 801fd08:	eef0 0a68 	vmov.f32	s1, s17
 801fd0c:	a81c      	add	r0, sp, #112	; 0x70
 801fd0e:	f003 f9f9 	bl	8023104 <frexp>
 801fd12:	2200      	movs	r2, #0
 801fd14:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801fd18:	ec51 0b10 	vmov	r0, r1, d0
 801fd1c:	f7e0 fc7c 	bl	8000618 <__aeabi_dmul>
 801fd20:	2200      	movs	r2, #0
 801fd22:	2300      	movs	r3, #0
 801fd24:	4606      	mov	r6, r0
 801fd26:	460f      	mov	r7, r1
 801fd28:	f7e0 fede 	bl	8000ae8 <__aeabi_dcmpeq>
 801fd2c:	b108      	cbz	r0, 801fd32 <_vfprintf_r+0x55a>
 801fd2e:	2301      	movs	r3, #1
 801fd30:	931c      	str	r3, [sp, #112]	; 0x70
 801fd32:	4ba7      	ldr	r3, [pc, #668]	; (801ffd0 <_vfprintf_r+0x7f8>)
 801fd34:	4aa7      	ldr	r2, [pc, #668]	; (801ffd4 <_vfprintf_r+0x7fc>)
 801fd36:	9906      	ldr	r1, [sp, #24]
 801fd38:	2961      	cmp	r1, #97	; 0x61
 801fd3a:	bf18      	it	ne
 801fd3c:	461a      	movne	r2, r3
 801fd3e:	9b04      	ldr	r3, [sp, #16]
 801fd40:	9217      	str	r2, [sp, #92]	; 0x5c
 801fd42:	3b01      	subs	r3, #1
 801fd44:	9305      	str	r3, [sp, #20]
 801fd46:	4645      	mov	r5, r8
 801fd48:	4ba3      	ldr	r3, [pc, #652]	; (801ffd8 <_vfprintf_r+0x800>)
 801fd4a:	2200      	movs	r2, #0
 801fd4c:	4630      	mov	r0, r6
 801fd4e:	4639      	mov	r1, r7
 801fd50:	f7e0 fc62 	bl	8000618 <__aeabi_dmul>
 801fd54:	460f      	mov	r7, r1
 801fd56:	4606      	mov	r6, r0
 801fd58:	f7e0 ff0e 	bl	8000b78 <__aeabi_d2iz>
 801fd5c:	9019      	str	r0, [sp, #100]	; 0x64
 801fd5e:	f7e0 fbf1 	bl	8000544 <__aeabi_i2d>
 801fd62:	4602      	mov	r2, r0
 801fd64:	460b      	mov	r3, r1
 801fd66:	4630      	mov	r0, r6
 801fd68:	4639      	mov	r1, r7
 801fd6a:	f7e0 fa9d 	bl	80002a8 <__aeabi_dsub>
 801fd6e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801fd70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fd72:	5c9b      	ldrb	r3, [r3, r2]
 801fd74:	f805 3b01 	strb.w	r3, [r5], #1
 801fd78:	9b05      	ldr	r3, [sp, #20]
 801fd7a:	9309      	str	r3, [sp, #36]	; 0x24
 801fd7c:	1c5a      	adds	r2, r3, #1
 801fd7e:	4606      	mov	r6, r0
 801fd80:	460f      	mov	r7, r1
 801fd82:	d007      	beq.n	801fd94 <_vfprintf_r+0x5bc>
 801fd84:	3b01      	subs	r3, #1
 801fd86:	9305      	str	r3, [sp, #20]
 801fd88:	2200      	movs	r2, #0
 801fd8a:	2300      	movs	r3, #0
 801fd8c:	f7e0 feac 	bl	8000ae8 <__aeabi_dcmpeq>
 801fd90:	2800      	cmp	r0, #0
 801fd92:	d0d9      	beq.n	801fd48 <_vfprintf_r+0x570>
 801fd94:	4b91      	ldr	r3, [pc, #580]	; (801ffdc <_vfprintf_r+0x804>)
 801fd96:	2200      	movs	r2, #0
 801fd98:	4630      	mov	r0, r6
 801fd9a:	4639      	mov	r1, r7
 801fd9c:	f7e0 fecc 	bl	8000b38 <__aeabi_dcmpgt>
 801fda0:	b960      	cbnz	r0, 801fdbc <_vfprintf_r+0x5e4>
 801fda2:	4b8e      	ldr	r3, [pc, #568]	; (801ffdc <_vfprintf_r+0x804>)
 801fda4:	2200      	movs	r2, #0
 801fda6:	4630      	mov	r0, r6
 801fda8:	4639      	mov	r1, r7
 801fdaa:	f7e0 fe9d 	bl	8000ae8 <__aeabi_dcmpeq>
 801fdae:	2800      	cmp	r0, #0
 801fdb0:	f000 8184 	beq.w	80200bc <_vfprintf_r+0x8e4>
 801fdb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801fdb6:	07da      	lsls	r2, r3, #31
 801fdb8:	f140 8180 	bpl.w	80200bc <_vfprintf_r+0x8e4>
 801fdbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fdbe:	9520      	str	r5, [sp, #128]	; 0x80
 801fdc0:	7bd9      	ldrb	r1, [r3, #15]
 801fdc2:	2030      	movs	r0, #48	; 0x30
 801fdc4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801fdc6:	1e53      	subs	r3, r2, #1
 801fdc8:	9320      	str	r3, [sp, #128]	; 0x80
 801fdca:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 801fdce:	428b      	cmp	r3, r1
 801fdd0:	f000 8163 	beq.w	802009a <_vfprintf_r+0x8c2>
 801fdd4:	2b39      	cmp	r3, #57	; 0x39
 801fdd6:	bf0b      	itete	eq
 801fdd8:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 801fdda:	3301      	addne	r3, #1
 801fddc:	7a9b      	ldrbeq	r3, [r3, #10]
 801fdde:	b2db      	uxtbne	r3, r3
 801fde0:	f802 3c01 	strb.w	r3, [r2, #-1]
 801fde4:	eba5 0308 	sub.w	r3, r5, r8
 801fde8:	9305      	str	r3, [sp, #20]
 801fdea:	9b08      	ldr	r3, [sp, #32]
 801fdec:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801fdee:	2b47      	cmp	r3, #71	; 0x47
 801fdf0:	f040 81b1 	bne.w	8020156 <_vfprintf_r+0x97e>
 801fdf4:	1ceb      	adds	r3, r5, #3
 801fdf6:	db03      	blt.n	801fe00 <_vfprintf_r+0x628>
 801fdf8:	9b04      	ldr	r3, [sp, #16]
 801fdfa:	42ab      	cmp	r3, r5
 801fdfc:	f280 81d6 	bge.w	80201ac <_vfprintf_r+0x9d4>
 801fe00:	9b06      	ldr	r3, [sp, #24]
 801fe02:	3b02      	subs	r3, #2
 801fe04:	9306      	str	r3, [sp, #24]
 801fe06:	9906      	ldr	r1, [sp, #24]
 801fe08:	f89d 2018 	ldrb.w	r2, [sp, #24]
 801fe0c:	f021 0120 	bic.w	r1, r1, #32
 801fe10:	2941      	cmp	r1, #65	; 0x41
 801fe12:	bf08      	it	eq
 801fe14:	320f      	addeq	r2, #15
 801fe16:	f105 33ff 	add.w	r3, r5, #4294967295
 801fe1a:	bf06      	itte	eq
 801fe1c:	b2d2      	uxtbeq	r2, r2
 801fe1e:	2101      	moveq	r1, #1
 801fe20:	2100      	movne	r1, #0
 801fe22:	2b00      	cmp	r3, #0
 801fe24:	931c      	str	r3, [sp, #112]	; 0x70
 801fe26:	bfb8      	it	lt
 801fe28:	f1c5 0301 	rsblt	r3, r5, #1
 801fe2c:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 801fe30:	bfb4      	ite	lt
 801fe32:	222d      	movlt	r2, #45	; 0x2d
 801fe34:	222b      	movge	r2, #43	; 0x2b
 801fe36:	2b09      	cmp	r3, #9
 801fe38:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 801fe3c:	f340 81a4 	ble.w	8020188 <_vfprintf_r+0x9b0>
 801fe40:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 801fe44:	260a      	movs	r6, #10
 801fe46:	4611      	mov	r1, r2
 801fe48:	fb93 f5f6 	sdiv	r5, r3, r6
 801fe4c:	fb06 3015 	mls	r0, r6, r5, r3
 801fe50:	3030      	adds	r0, #48	; 0x30
 801fe52:	f801 0c01 	strb.w	r0, [r1, #-1]
 801fe56:	4618      	mov	r0, r3
 801fe58:	2863      	cmp	r0, #99	; 0x63
 801fe5a:	f102 32ff 	add.w	r2, r2, #4294967295
 801fe5e:	462b      	mov	r3, r5
 801fe60:	dcf1      	bgt.n	801fe46 <_vfprintf_r+0x66e>
 801fe62:	3330      	adds	r3, #48	; 0x30
 801fe64:	1e88      	subs	r0, r1, #2
 801fe66:	f802 3c01 	strb.w	r3, [r2, #-1]
 801fe6a:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 801fe6e:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 801fe72:	4603      	mov	r3, r0
 801fe74:	42ab      	cmp	r3, r5
 801fe76:	f0c0 8182 	bcc.w	802017e <_vfprintf_r+0x9a6>
 801fe7a:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 801fe7e:	1a52      	subs	r2, r2, r1
 801fe80:	42a8      	cmp	r0, r5
 801fe82:	bf88      	it	hi
 801fe84:	2200      	movhi	r2, #0
 801fe86:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 801fe8a:	441a      	add	r2, r3
 801fe8c:	ab1e      	add	r3, sp, #120	; 0x78
 801fe8e:	1ad3      	subs	r3, r2, r3
 801fe90:	9a05      	ldr	r2, [sp, #20]
 801fe92:	9315      	str	r3, [sp, #84]	; 0x54
 801fe94:	2a01      	cmp	r2, #1
 801fe96:	4413      	add	r3, r2
 801fe98:	9304      	str	r3, [sp, #16]
 801fe9a:	dc02      	bgt.n	801fea2 <_vfprintf_r+0x6ca>
 801fe9c:	f01b 0f01 	tst.w	fp, #1
 801fea0:	d003      	beq.n	801feaa <_vfprintf_r+0x6d2>
 801fea2:	9b04      	ldr	r3, [sp, #16]
 801fea4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fea6:	4413      	add	r3, r2
 801fea8:	9304      	str	r3, [sp, #16]
 801feaa:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 801feae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801feb2:	9311      	str	r3, [sp, #68]	; 0x44
 801feb4:	2300      	movs	r3, #0
 801feb6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801feba:	461d      	mov	r5, r3
 801febc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801febe:	b113      	cbz	r3, 801fec6 <_vfprintf_r+0x6ee>
 801fec0:	232d      	movs	r3, #45	; 0x2d
 801fec2:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801fec6:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 801feca:	2600      	movs	r6, #0
 801fecc:	9b04      	ldr	r3, [sp, #16]
 801fece:	42b3      	cmp	r3, r6
 801fed0:	bfb8      	it	lt
 801fed2:	4633      	movlt	r3, r6
 801fed4:	9311      	str	r3, [sp, #68]	; 0x44
 801fed6:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801feda:	b113      	cbz	r3, 801fee2 <_vfprintf_r+0x70a>
 801fedc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fede:	3301      	adds	r3, #1
 801fee0:	9311      	str	r3, [sp, #68]	; 0x44
 801fee2:	f01b 0302 	ands.w	r3, fp, #2
 801fee6:	9317      	str	r3, [sp, #92]	; 0x5c
 801fee8:	bf1e      	ittt	ne
 801feea:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 801feec:	3302      	addne	r3, #2
 801feee:	9311      	strne	r3, [sp, #68]	; 0x44
 801fef0:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 801fef4:	9318      	str	r3, [sp, #96]	; 0x60
 801fef6:	d11f      	bne.n	801ff38 <_vfprintf_r+0x760>
 801fef8:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801fefc:	1a9f      	subs	r7, r3, r2
 801fefe:	2f00      	cmp	r7, #0
 801ff00:	dd1a      	ble.n	801ff38 <_vfprintf_r+0x760>
 801ff02:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801ff06:	4836      	ldr	r0, [pc, #216]	; (801ffe0 <_vfprintf_r+0x808>)
 801ff08:	6020      	str	r0, [r4, #0]
 801ff0a:	2f10      	cmp	r7, #16
 801ff0c:	f103 0301 	add.w	r3, r3, #1
 801ff10:	f104 0108 	add.w	r1, r4, #8
 801ff14:	f300 82ee 	bgt.w	80204f4 <_vfprintf_r+0xd1c>
 801ff18:	443a      	add	r2, r7
 801ff1a:	2b07      	cmp	r3, #7
 801ff1c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801ff20:	6067      	str	r7, [r4, #4]
 801ff22:	f340 82fa 	ble.w	802051a <_vfprintf_r+0xd42>
 801ff26:	aa22      	add	r2, sp, #136	; 0x88
 801ff28:	4649      	mov	r1, r9
 801ff2a:	4650      	mov	r0, sl
 801ff2c:	f003 fa10 	bl	8023350 <__sprint_r>
 801ff30:	2800      	cmp	r0, #0
 801ff32:	f040 8625 	bne.w	8020b80 <_vfprintf_r+0x13a8>
 801ff36:	ac25      	add	r4, sp, #148	; 0x94
 801ff38:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801ff3c:	b173      	cbz	r3, 801ff5c <_vfprintf_r+0x784>
 801ff3e:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 801ff42:	6023      	str	r3, [r4, #0]
 801ff44:	2301      	movs	r3, #1
 801ff46:	6063      	str	r3, [r4, #4]
 801ff48:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ff4a:	3301      	adds	r3, #1
 801ff4c:	9324      	str	r3, [sp, #144]	; 0x90
 801ff4e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ff50:	3301      	adds	r3, #1
 801ff52:	2b07      	cmp	r3, #7
 801ff54:	9323      	str	r3, [sp, #140]	; 0x8c
 801ff56:	f300 82e2 	bgt.w	802051e <_vfprintf_r+0xd46>
 801ff5a:	3408      	adds	r4, #8
 801ff5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ff5e:	b16b      	cbz	r3, 801ff7c <_vfprintf_r+0x7a4>
 801ff60:	ab1b      	add	r3, sp, #108	; 0x6c
 801ff62:	6023      	str	r3, [r4, #0]
 801ff64:	2302      	movs	r3, #2
 801ff66:	6063      	str	r3, [r4, #4]
 801ff68:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ff6a:	3302      	adds	r3, #2
 801ff6c:	9324      	str	r3, [sp, #144]	; 0x90
 801ff6e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ff70:	3301      	adds	r3, #1
 801ff72:	2b07      	cmp	r3, #7
 801ff74:	9323      	str	r3, [sp, #140]	; 0x8c
 801ff76:	f300 82dc 	bgt.w	8020532 <_vfprintf_r+0xd5a>
 801ff7a:	3408      	adds	r4, #8
 801ff7c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ff7e:	2b80      	cmp	r3, #128	; 0x80
 801ff80:	d11f      	bne.n	801ffc2 <_vfprintf_r+0x7ea>
 801ff82:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801ff86:	1a9f      	subs	r7, r3, r2
 801ff88:	2f00      	cmp	r7, #0
 801ff8a:	dd1a      	ble.n	801ffc2 <_vfprintf_r+0x7ea>
 801ff8c:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801ff90:	4814      	ldr	r0, [pc, #80]	; (801ffe4 <_vfprintf_r+0x80c>)
 801ff92:	6020      	str	r0, [r4, #0]
 801ff94:	2f10      	cmp	r7, #16
 801ff96:	f103 0301 	add.w	r3, r3, #1
 801ff9a:	f104 0108 	add.w	r1, r4, #8
 801ff9e:	f300 82d2 	bgt.w	8020546 <_vfprintf_r+0xd6e>
 801ffa2:	6067      	str	r7, [r4, #4]
 801ffa4:	2b07      	cmp	r3, #7
 801ffa6:	4417      	add	r7, r2
 801ffa8:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 801ffac:	f340 82de 	ble.w	802056c <_vfprintf_r+0xd94>
 801ffb0:	aa22      	add	r2, sp, #136	; 0x88
 801ffb2:	4649      	mov	r1, r9
 801ffb4:	4650      	mov	r0, sl
 801ffb6:	f003 f9cb 	bl	8023350 <__sprint_r>
 801ffba:	2800      	cmp	r0, #0
 801ffbc:	f040 85e0 	bne.w	8020b80 <_vfprintf_r+0x13a8>
 801ffc0:	ac25      	add	r4, sp, #148	; 0x94
 801ffc2:	9b04      	ldr	r3, [sp, #16]
 801ffc4:	1af6      	subs	r6, r6, r3
 801ffc6:	2e00      	cmp	r6, #0
 801ffc8:	dd28      	ble.n	802001c <_vfprintf_r+0x844>
 801ffca:	4f06      	ldr	r7, [pc, #24]	; (801ffe4 <_vfprintf_r+0x80c>)
 801ffcc:	e00c      	b.n	801ffe8 <_vfprintf_r+0x810>
 801ffce:	bf00      	nop
 801ffd0:	0806f789 	.word	0x0806f789
 801ffd4:	0806f778 	.word	0x0806f778
 801ffd8:	40300000 	.word	0x40300000
 801ffdc:	3fe00000 	.word	0x3fe00000
 801ffe0:	0806f7bc 	.word	0x0806f7bc
 801ffe4:	0806f7cc 	.word	0x0806f7cc
 801ffe8:	6027      	str	r7, [r4, #0]
 801ffea:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801ffee:	2e10      	cmp	r6, #16
 801fff0:	f103 0301 	add.w	r3, r3, #1
 801fff4:	f104 0108 	add.w	r1, r4, #8
 801fff8:	f300 82ba 	bgt.w	8020570 <_vfprintf_r+0xd98>
 801fffc:	6066      	str	r6, [r4, #4]
 801fffe:	2b07      	cmp	r3, #7
 8020000:	4416      	add	r6, r2
 8020002:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8020006:	f340 82c6 	ble.w	8020596 <_vfprintf_r+0xdbe>
 802000a:	aa22      	add	r2, sp, #136	; 0x88
 802000c:	4649      	mov	r1, r9
 802000e:	4650      	mov	r0, sl
 8020010:	f003 f99e 	bl	8023350 <__sprint_r>
 8020014:	2800      	cmp	r0, #0
 8020016:	f040 85b3 	bne.w	8020b80 <_vfprintf_r+0x13a8>
 802001a:	ac25      	add	r4, sp, #148	; 0x94
 802001c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8020020:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8020022:	f040 82bf 	bne.w	80205a4 <_vfprintf_r+0xdcc>
 8020026:	9b04      	ldr	r3, [sp, #16]
 8020028:	f8c4 8000 	str.w	r8, [r4]
 802002c:	441e      	add	r6, r3
 802002e:	6063      	str	r3, [r4, #4]
 8020030:	9624      	str	r6, [sp, #144]	; 0x90
 8020032:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020034:	3301      	adds	r3, #1
 8020036:	2b07      	cmp	r3, #7
 8020038:	9323      	str	r3, [sp, #140]	; 0x8c
 802003a:	f300 82f8 	bgt.w	802062e <_vfprintf_r+0xe56>
 802003e:	3408      	adds	r4, #8
 8020040:	f01b 0f04 	tst.w	fp, #4
 8020044:	f040 857e 	bne.w	8020b44 <_vfprintf_r+0x136c>
 8020048:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 802004c:	9911      	ldr	r1, [sp, #68]	; 0x44
 802004e:	428a      	cmp	r2, r1
 8020050:	bfac      	ite	ge
 8020052:	189b      	addge	r3, r3, r2
 8020054:	185b      	addlt	r3, r3, r1
 8020056:	930f      	str	r3, [sp, #60]	; 0x3c
 8020058:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802005a:	b13b      	cbz	r3, 802006c <_vfprintf_r+0x894>
 802005c:	aa22      	add	r2, sp, #136	; 0x88
 802005e:	4649      	mov	r1, r9
 8020060:	4650      	mov	r0, sl
 8020062:	f003 f975 	bl	8023350 <__sprint_r>
 8020066:	2800      	cmp	r0, #0
 8020068:	f040 858a 	bne.w	8020b80 <_vfprintf_r+0x13a8>
 802006c:	2300      	movs	r3, #0
 802006e:	9323      	str	r3, [sp, #140]	; 0x8c
 8020070:	9b03      	ldr	r3, [sp, #12]
 8020072:	2b00      	cmp	r3, #0
 8020074:	f040 85a0 	bne.w	8020bb8 <_vfprintf_r+0x13e0>
 8020078:	ac25      	add	r4, sp, #148	; 0x94
 802007a:	e0ec      	b.n	8020256 <_vfprintf_r+0xa7e>
 802007c:	9003      	str	r0, [sp, #12]
 802007e:	e62c      	b.n	801fcda <_vfprintf_r+0x502>
 8020080:	9003      	str	r0, [sp, #12]
 8020082:	2306      	movs	r3, #6
 8020084:	e619      	b.n	801fcba <_vfprintf_r+0x4e2>
 8020086:	9003      	str	r0, [sp, #12]
 8020088:	e627      	b.n	801fcda <_vfprintf_r+0x502>
 802008a:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 802008e:	2300      	movs	r3, #0
 8020090:	eeb0 8a47 	vmov.f32	s16, s14
 8020094:	eef0 8a67 	vmov.f32	s17, s15
 8020098:	e62f      	b.n	801fcfa <_vfprintf_r+0x522>
 802009a:	f802 0c01 	strb.w	r0, [r2, #-1]
 802009e:	e691      	b.n	801fdc4 <_vfprintf_r+0x5ec>
 80200a0:	f803 0b01 	strb.w	r0, [r3], #1
 80200a4:	1aca      	subs	r2, r1, r3
 80200a6:	2a00      	cmp	r2, #0
 80200a8:	dafa      	bge.n	80200a0 <_vfprintf_r+0x8c8>
 80200aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80200ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80200ae:	3201      	adds	r2, #1
 80200b0:	f103 0301 	add.w	r3, r3, #1
 80200b4:	bfb8      	it	lt
 80200b6:	2300      	movlt	r3, #0
 80200b8:	441d      	add	r5, r3
 80200ba:	e693      	b.n	801fde4 <_vfprintf_r+0x60c>
 80200bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80200be:	462b      	mov	r3, r5
 80200c0:	18a9      	adds	r1, r5, r2
 80200c2:	2030      	movs	r0, #48	; 0x30
 80200c4:	e7ee      	b.n	80200a4 <_vfprintf_r+0x8cc>
 80200c6:	9b08      	ldr	r3, [sp, #32]
 80200c8:	2b46      	cmp	r3, #70	; 0x46
 80200ca:	d005      	beq.n	80200d8 <_vfprintf_r+0x900>
 80200cc:	2b45      	cmp	r3, #69	; 0x45
 80200ce:	d11b      	bne.n	8020108 <_vfprintf_r+0x930>
 80200d0:	9b04      	ldr	r3, [sp, #16]
 80200d2:	1c5d      	adds	r5, r3, #1
 80200d4:	2102      	movs	r1, #2
 80200d6:	e001      	b.n	80200dc <_vfprintf_r+0x904>
 80200d8:	9d04      	ldr	r5, [sp, #16]
 80200da:	2103      	movs	r1, #3
 80200dc:	ab20      	add	r3, sp, #128	; 0x80
 80200de:	9301      	str	r3, [sp, #4]
 80200e0:	ab1d      	add	r3, sp, #116	; 0x74
 80200e2:	9300      	str	r3, [sp, #0]
 80200e4:	462a      	mov	r2, r5
 80200e6:	ab1c      	add	r3, sp, #112	; 0x70
 80200e8:	4650      	mov	r0, sl
 80200ea:	eeb0 0a48 	vmov.f32	s0, s16
 80200ee:	eef0 0a68 	vmov.f32	s1, s17
 80200f2:	f000 fee1 	bl	8020eb8 <_dtoa_r>
 80200f6:	9b08      	ldr	r3, [sp, #32]
 80200f8:	2b47      	cmp	r3, #71	; 0x47
 80200fa:	4680      	mov	r8, r0
 80200fc:	d106      	bne.n	802010c <_vfprintf_r+0x934>
 80200fe:	f01b 0f01 	tst.w	fp, #1
 8020102:	d103      	bne.n	802010c <_vfprintf_r+0x934>
 8020104:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8020106:	e66d      	b.n	801fde4 <_vfprintf_r+0x60c>
 8020108:	9d04      	ldr	r5, [sp, #16]
 802010a:	e7e3      	b.n	80200d4 <_vfprintf_r+0x8fc>
 802010c:	9b08      	ldr	r3, [sp, #32]
 802010e:	2b46      	cmp	r3, #70	; 0x46
 8020110:	eb08 0605 	add.w	r6, r8, r5
 8020114:	d10f      	bne.n	8020136 <_vfprintf_r+0x95e>
 8020116:	f898 3000 	ldrb.w	r3, [r8]
 802011a:	2b30      	cmp	r3, #48	; 0x30
 802011c:	d109      	bne.n	8020132 <_vfprintf_r+0x95a>
 802011e:	ec51 0b18 	vmov	r0, r1, d8
 8020122:	2200      	movs	r2, #0
 8020124:	2300      	movs	r3, #0
 8020126:	f7e0 fcdf 	bl	8000ae8 <__aeabi_dcmpeq>
 802012a:	b910      	cbnz	r0, 8020132 <_vfprintf_r+0x95a>
 802012c:	f1c5 0501 	rsb	r5, r5, #1
 8020130:	951c      	str	r5, [sp, #112]	; 0x70
 8020132:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020134:	441e      	add	r6, r3
 8020136:	ec51 0b18 	vmov	r0, r1, d8
 802013a:	2200      	movs	r2, #0
 802013c:	2300      	movs	r3, #0
 802013e:	f7e0 fcd3 	bl	8000ae8 <__aeabi_dcmpeq>
 8020142:	b100      	cbz	r0, 8020146 <_vfprintf_r+0x96e>
 8020144:	9620      	str	r6, [sp, #128]	; 0x80
 8020146:	2230      	movs	r2, #48	; 0x30
 8020148:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802014a:	429e      	cmp	r6, r3
 802014c:	d9da      	bls.n	8020104 <_vfprintf_r+0x92c>
 802014e:	1c59      	adds	r1, r3, #1
 8020150:	9120      	str	r1, [sp, #128]	; 0x80
 8020152:	701a      	strb	r2, [r3, #0]
 8020154:	e7f8      	b.n	8020148 <_vfprintf_r+0x970>
 8020156:	9b08      	ldr	r3, [sp, #32]
 8020158:	2b46      	cmp	r3, #70	; 0x46
 802015a:	f47f ae54 	bne.w	801fe06 <_vfprintf_r+0x62e>
 802015e:	9a04      	ldr	r2, [sp, #16]
 8020160:	f00b 0301 	and.w	r3, fp, #1
 8020164:	2d00      	cmp	r5, #0
 8020166:	ea43 0302 	orr.w	r3, r3, r2
 802016a:	dd1a      	ble.n	80201a2 <_vfprintf_r+0x9ca>
 802016c:	2b00      	cmp	r3, #0
 802016e:	d034      	beq.n	80201da <_vfprintf_r+0xa02>
 8020170:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020172:	18eb      	adds	r3, r5, r3
 8020174:	441a      	add	r2, r3
 8020176:	9204      	str	r2, [sp, #16]
 8020178:	2366      	movs	r3, #102	; 0x66
 802017a:	9306      	str	r3, [sp, #24]
 802017c:	e033      	b.n	80201e6 <_vfprintf_r+0xa0e>
 802017e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8020182:	f802 6b01 	strb.w	r6, [r2], #1
 8020186:	e675      	b.n	801fe74 <_vfprintf_r+0x69c>
 8020188:	b941      	cbnz	r1, 802019c <_vfprintf_r+0x9c4>
 802018a:	2230      	movs	r2, #48	; 0x30
 802018c:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 8020190:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8020194:	3330      	adds	r3, #48	; 0x30
 8020196:	f802 3b01 	strb.w	r3, [r2], #1
 802019a:	e677      	b.n	801fe8c <_vfprintf_r+0x6b4>
 802019c:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 80201a0:	e7f8      	b.n	8020194 <_vfprintf_r+0x9bc>
 80201a2:	b1e3      	cbz	r3, 80201de <_vfprintf_r+0xa06>
 80201a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80201a6:	9a04      	ldr	r2, [sp, #16]
 80201a8:	3301      	adds	r3, #1
 80201aa:	e7e3      	b.n	8020174 <_vfprintf_r+0x99c>
 80201ac:	9b05      	ldr	r3, [sp, #20]
 80201ae:	42ab      	cmp	r3, r5
 80201b0:	dc07      	bgt.n	80201c2 <_vfprintf_r+0x9ea>
 80201b2:	f01b 0f01 	tst.w	fp, #1
 80201b6:	d02d      	beq.n	8020214 <_vfprintf_r+0xa3c>
 80201b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80201ba:	18eb      	adds	r3, r5, r3
 80201bc:	9304      	str	r3, [sp, #16]
 80201be:	2367      	movs	r3, #103	; 0x67
 80201c0:	e7db      	b.n	802017a <_vfprintf_r+0x9a2>
 80201c2:	9b05      	ldr	r3, [sp, #20]
 80201c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80201c6:	2d00      	cmp	r5, #0
 80201c8:	4413      	add	r3, r2
 80201ca:	9304      	str	r3, [sp, #16]
 80201cc:	dcf7      	bgt.n	80201be <_vfprintf_r+0x9e6>
 80201ce:	9a04      	ldr	r2, [sp, #16]
 80201d0:	f1c5 0301 	rsb	r3, r5, #1
 80201d4:	441a      	add	r2, r3
 80201d6:	9204      	str	r2, [sp, #16]
 80201d8:	e7f1      	b.n	80201be <_vfprintf_r+0x9e6>
 80201da:	9504      	str	r5, [sp, #16]
 80201dc:	e7cc      	b.n	8020178 <_vfprintf_r+0x9a0>
 80201de:	2366      	movs	r3, #102	; 0x66
 80201e0:	9306      	str	r3, [sp, #24]
 80201e2:	2301      	movs	r3, #1
 80201e4:	9304      	str	r3, [sp, #16]
 80201e6:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 80201ea:	9309      	str	r3, [sp, #36]	; 0x24
 80201ec:	d025      	beq.n	802023a <_vfprintf_r+0xa62>
 80201ee:	2300      	movs	r3, #0
 80201f0:	2d00      	cmp	r5, #0
 80201f2:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80201f6:	f77f ae61 	ble.w	801febc <_vfprintf_r+0x6e4>
 80201fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80201fc:	781b      	ldrb	r3, [r3, #0]
 80201fe:	2bff      	cmp	r3, #255	; 0xff
 8020200:	d10a      	bne.n	8020218 <_vfprintf_r+0xa40>
 8020202:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8020206:	9912      	ldr	r1, [sp, #72]	; 0x48
 8020208:	4413      	add	r3, r2
 802020a:	9a04      	ldr	r2, [sp, #16]
 802020c:	fb01 2303 	mla	r3, r1, r3, r2
 8020210:	9304      	str	r3, [sp, #16]
 8020212:	e653      	b.n	801febc <_vfprintf_r+0x6e4>
 8020214:	9504      	str	r5, [sp, #16]
 8020216:	e7d2      	b.n	80201be <_vfprintf_r+0x9e6>
 8020218:	42ab      	cmp	r3, r5
 802021a:	daf2      	bge.n	8020202 <_vfprintf_r+0xa2a>
 802021c:	1aed      	subs	r5, r5, r3
 802021e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020220:	785b      	ldrb	r3, [r3, #1]
 8020222:	b133      	cbz	r3, 8020232 <_vfprintf_r+0xa5a>
 8020224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020226:	3301      	adds	r3, #1
 8020228:	9309      	str	r3, [sp, #36]	; 0x24
 802022a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802022c:	3301      	adds	r3, #1
 802022e:	930a      	str	r3, [sp, #40]	; 0x28
 8020230:	e7e3      	b.n	80201fa <_vfprintf_r+0xa22>
 8020232:	9b08      	ldr	r3, [sp, #32]
 8020234:	3301      	adds	r3, #1
 8020236:	9308      	str	r3, [sp, #32]
 8020238:	e7df      	b.n	80201fa <_vfprintf_r+0xa22>
 802023a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802023c:	9308      	str	r3, [sp, #32]
 802023e:	e63d      	b.n	801febc <_vfprintf_r+0x6e4>
 8020240:	1d33      	adds	r3, r6, #4
 8020242:	f01b 0f20 	tst.w	fp, #32
 8020246:	9307      	str	r3, [sp, #28]
 8020248:	d00a      	beq.n	8020260 <_vfprintf_r+0xa88>
 802024a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802024c:	6833      	ldr	r3, [r6, #0]
 802024e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8020250:	17d2      	asrs	r2, r2, #31
 8020252:	e9c3 1200 	strd	r1, r2, [r3]
 8020256:	9e07      	ldr	r6, [sp, #28]
 8020258:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 802025c:	f7ff bb42 	b.w	801f8e4 <_vfprintf_r+0x10c>
 8020260:	f01b 0f10 	tst.w	fp, #16
 8020264:	d003      	beq.n	802026e <_vfprintf_r+0xa96>
 8020266:	6833      	ldr	r3, [r6, #0]
 8020268:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802026a:	601a      	str	r2, [r3, #0]
 802026c:	e7f3      	b.n	8020256 <_vfprintf_r+0xa7e>
 802026e:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8020272:	d003      	beq.n	802027c <_vfprintf_r+0xaa4>
 8020274:	6833      	ldr	r3, [r6, #0]
 8020276:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020278:	801a      	strh	r2, [r3, #0]
 802027a:	e7ec      	b.n	8020256 <_vfprintf_r+0xa7e>
 802027c:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8020280:	d0f1      	beq.n	8020266 <_vfprintf_r+0xa8e>
 8020282:	6833      	ldr	r3, [r6, #0]
 8020284:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020286:	701a      	strb	r2, [r3, #0]
 8020288:	e7e5      	b.n	8020256 <_vfprintf_r+0xa7e>
 802028a:	f04b 0b10 	orr.w	fp, fp, #16
 802028e:	f01b 0320 	ands.w	r3, fp, #32
 8020292:	d01f      	beq.n	80202d4 <_vfprintf_r+0xafc>
 8020294:	3607      	adds	r6, #7
 8020296:	f026 0307 	bic.w	r3, r6, #7
 802029a:	461a      	mov	r2, r3
 802029c:	685d      	ldr	r5, [r3, #4]
 802029e:	f852 6b08 	ldr.w	r6, [r2], #8
 80202a2:	9207      	str	r2, [sp, #28]
 80202a4:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 80202a8:	2300      	movs	r3, #0
 80202aa:	2200      	movs	r2, #0
 80202ac:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 80202b0:	9a04      	ldr	r2, [sp, #16]
 80202b2:	3201      	adds	r2, #1
 80202b4:	f000 8495 	beq.w	8020be2 <_vfprintf_r+0x140a>
 80202b8:	ea56 0205 	orrs.w	r2, r6, r5
 80202bc:	f02b 0780 	bic.w	r7, fp, #128	; 0x80
 80202c0:	f040 8494 	bne.w	8020bec <_vfprintf_r+0x1414>
 80202c4:	9a04      	ldr	r2, [sp, #16]
 80202c6:	2a00      	cmp	r2, #0
 80202c8:	f000 80fa 	beq.w	80204c0 <_vfprintf_r+0xce8>
 80202cc:	2b01      	cmp	r3, #1
 80202ce:	f040 8490 	bne.w	8020bf2 <_vfprintf_r+0x141a>
 80202d2:	e09f      	b.n	8020414 <_vfprintf_r+0xc3c>
 80202d4:	4632      	mov	r2, r6
 80202d6:	f01b 0510 	ands.w	r5, fp, #16
 80202da:	f852 6b04 	ldr.w	r6, [r2], #4
 80202de:	9207      	str	r2, [sp, #28]
 80202e0:	d001      	beq.n	80202e6 <_vfprintf_r+0xb0e>
 80202e2:	461d      	mov	r5, r3
 80202e4:	e7de      	b.n	80202a4 <_vfprintf_r+0xacc>
 80202e6:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 80202ea:	d001      	beq.n	80202f0 <_vfprintf_r+0xb18>
 80202ec:	b2b6      	uxth	r6, r6
 80202ee:	e7d9      	b.n	80202a4 <_vfprintf_r+0xacc>
 80202f0:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 80202f4:	d0d6      	beq.n	80202a4 <_vfprintf_r+0xacc>
 80202f6:	b2f6      	uxtb	r6, r6
 80202f8:	e7f3      	b.n	80202e2 <_vfprintf_r+0xb0a>
 80202fa:	4633      	mov	r3, r6
 80202fc:	2278      	movs	r2, #120	; 0x78
 80202fe:	f853 6b04 	ldr.w	r6, [r3], #4
 8020302:	9307      	str	r3, [sp, #28]
 8020304:	2330      	movs	r3, #48	; 0x30
 8020306:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 802030a:	4ba4      	ldr	r3, [pc, #656]	; (802059c <_vfprintf_r+0xdc4>)
 802030c:	9316      	str	r3, [sp, #88]	; 0x58
 802030e:	2500      	movs	r5, #0
 8020310:	f04b 0b02 	orr.w	fp, fp, #2
 8020314:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8020318:	2302      	movs	r3, #2
 802031a:	9206      	str	r2, [sp, #24]
 802031c:	e7c5      	b.n	80202aa <_vfprintf_r+0xad2>
 802031e:	4633      	mov	r3, r6
 8020320:	2500      	movs	r5, #0
 8020322:	f853 8b04 	ldr.w	r8, [r3], #4
 8020326:	9307      	str	r3, [sp, #28]
 8020328:	9b04      	ldr	r3, [sp, #16]
 802032a:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 802032e:	1c5e      	adds	r6, r3, #1
 8020330:	d010      	beq.n	8020354 <_vfprintf_r+0xb7c>
 8020332:	461a      	mov	r2, r3
 8020334:	4629      	mov	r1, r5
 8020336:	4640      	mov	r0, r8
 8020338:	f7df ff62 	bl	8000200 <memchr>
 802033c:	9003      	str	r0, [sp, #12]
 802033e:	2800      	cmp	r0, #0
 8020340:	f000 80d5 	beq.w	80204ee <_vfprintf_r+0xd16>
 8020344:	eba0 0308 	sub.w	r3, r0, r8
 8020348:	e9cd 5303 	strd	r5, r3, [sp, #12]
 802034c:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8020350:	462e      	mov	r6, r5
 8020352:	e5bb      	b.n	801fecc <_vfprintf_r+0x6f4>
 8020354:	4640      	mov	r0, r8
 8020356:	f7df ff4b 	bl	80001f0 <strlen>
 802035a:	e9cd 5003 	strd	r5, r0, [sp, #12]
 802035e:	e455      	b.n	801fc0c <_vfprintf_r+0x434>
 8020360:	f04b 0b10 	orr.w	fp, fp, #16
 8020364:	f01b 0320 	ands.w	r3, fp, #32
 8020368:	d009      	beq.n	802037e <_vfprintf_r+0xba6>
 802036a:	3607      	adds	r6, #7
 802036c:	f026 0307 	bic.w	r3, r6, #7
 8020370:	461a      	mov	r2, r3
 8020372:	685d      	ldr	r5, [r3, #4]
 8020374:	f852 6b08 	ldr.w	r6, [r2], #8
 8020378:	9207      	str	r2, [sp, #28]
 802037a:	2301      	movs	r3, #1
 802037c:	e795      	b.n	80202aa <_vfprintf_r+0xad2>
 802037e:	4632      	mov	r2, r6
 8020380:	f01b 0510 	ands.w	r5, fp, #16
 8020384:	f852 6b04 	ldr.w	r6, [r2], #4
 8020388:	9207      	str	r2, [sp, #28]
 802038a:	d001      	beq.n	8020390 <_vfprintf_r+0xbb8>
 802038c:	461d      	mov	r5, r3
 802038e:	e7f4      	b.n	802037a <_vfprintf_r+0xba2>
 8020390:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8020394:	d001      	beq.n	802039a <_vfprintf_r+0xbc2>
 8020396:	b2b6      	uxth	r6, r6
 8020398:	e7ef      	b.n	802037a <_vfprintf_r+0xba2>
 802039a:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 802039e:	d0ec      	beq.n	802037a <_vfprintf_r+0xba2>
 80203a0:	b2f6      	uxtb	r6, r6
 80203a2:	e7f3      	b.n	802038c <_vfprintf_r+0xbb4>
 80203a4:	4b7e      	ldr	r3, [pc, #504]	; (80205a0 <_vfprintf_r+0xdc8>)
 80203a6:	9316      	str	r3, [sp, #88]	; 0x58
 80203a8:	f01b 0320 	ands.w	r3, fp, #32
 80203ac:	d01b      	beq.n	80203e6 <_vfprintf_r+0xc0e>
 80203ae:	3607      	adds	r6, #7
 80203b0:	f026 0307 	bic.w	r3, r6, #7
 80203b4:	461a      	mov	r2, r3
 80203b6:	685d      	ldr	r5, [r3, #4]
 80203b8:	f852 6b08 	ldr.w	r6, [r2], #8
 80203bc:	9207      	str	r2, [sp, #28]
 80203be:	f01b 0f01 	tst.w	fp, #1
 80203c2:	d00a      	beq.n	80203da <_vfprintf_r+0xc02>
 80203c4:	ea56 0305 	orrs.w	r3, r6, r5
 80203c8:	d007      	beq.n	80203da <_vfprintf_r+0xc02>
 80203ca:	2330      	movs	r3, #48	; 0x30
 80203cc:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 80203d0:	9b06      	ldr	r3, [sp, #24]
 80203d2:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 80203d6:	f04b 0b02 	orr.w	fp, fp, #2
 80203da:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 80203de:	2302      	movs	r3, #2
 80203e0:	e763      	b.n	80202aa <_vfprintf_r+0xad2>
 80203e2:	4b6e      	ldr	r3, [pc, #440]	; (802059c <_vfprintf_r+0xdc4>)
 80203e4:	e7df      	b.n	80203a6 <_vfprintf_r+0xbce>
 80203e6:	4632      	mov	r2, r6
 80203e8:	f01b 0510 	ands.w	r5, fp, #16
 80203ec:	f852 6b04 	ldr.w	r6, [r2], #4
 80203f0:	9207      	str	r2, [sp, #28]
 80203f2:	d001      	beq.n	80203f8 <_vfprintf_r+0xc20>
 80203f4:	461d      	mov	r5, r3
 80203f6:	e7e2      	b.n	80203be <_vfprintf_r+0xbe6>
 80203f8:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 80203fc:	d001      	beq.n	8020402 <_vfprintf_r+0xc2a>
 80203fe:	b2b6      	uxth	r6, r6
 8020400:	e7dd      	b.n	80203be <_vfprintf_r+0xbe6>
 8020402:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 8020406:	d0da      	beq.n	80203be <_vfprintf_r+0xbe6>
 8020408:	b2f6      	uxtb	r6, r6
 802040a:	e7f3      	b.n	80203f4 <_vfprintf_r+0xc1c>
 802040c:	2e0a      	cmp	r6, #10
 802040e:	f175 0300 	sbcs.w	r3, r5, #0
 8020412:	d206      	bcs.n	8020422 <_vfprintf_r+0xc4a>
 8020414:	3630      	adds	r6, #48	; 0x30
 8020416:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 802041a:	f20d 1837 	addw	r8, sp, #311	; 0x137
 802041e:	f000 bc03 	b.w	8020c28 <_vfprintf_r+0x1450>
 8020422:	2300      	movs	r3, #0
 8020424:	9305      	str	r3, [sp, #20]
 8020426:	f407 6380 	and.w	r3, r7, #1024	; 0x400
 802042a:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 802042e:	9303      	str	r3, [sp, #12]
 8020430:	220a      	movs	r2, #10
 8020432:	2300      	movs	r3, #0
 8020434:	4630      	mov	r0, r6
 8020436:	4629      	mov	r1, r5
 8020438:	f7e0 fbc6 	bl	8000bc8 <__aeabi_uldivmod>
 802043c:	9b05      	ldr	r3, [sp, #20]
 802043e:	3301      	adds	r3, #1
 8020440:	9305      	str	r3, [sp, #20]
 8020442:	9b03      	ldr	r3, [sp, #12]
 8020444:	3230      	adds	r2, #48	; 0x30
 8020446:	f10b 38ff 	add.w	r8, fp, #4294967295
 802044a:	f80b 2c01 	strb.w	r2, [fp, #-1]
 802044e:	b1d3      	cbz	r3, 8020486 <_vfprintf_r+0xcae>
 8020450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020452:	9a05      	ldr	r2, [sp, #20]
 8020454:	781b      	ldrb	r3, [r3, #0]
 8020456:	429a      	cmp	r2, r3
 8020458:	d115      	bne.n	8020486 <_vfprintf_r+0xcae>
 802045a:	2aff      	cmp	r2, #255	; 0xff
 802045c:	d013      	beq.n	8020486 <_vfprintf_r+0xcae>
 802045e:	2e0a      	cmp	r6, #10
 8020460:	f175 0300 	sbcs.w	r3, r5, #0
 8020464:	d30f      	bcc.n	8020486 <_vfprintf_r+0xcae>
 8020466:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020468:	9914      	ldr	r1, [sp, #80]	; 0x50
 802046a:	eba8 0803 	sub.w	r8, r8, r3
 802046e:	461a      	mov	r2, r3
 8020470:	4640      	mov	r0, r8
 8020472:	f002 fed2 	bl	802321a <strncpy>
 8020476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020478:	785b      	ldrb	r3, [r3, #1]
 802047a:	b11b      	cbz	r3, 8020484 <_vfprintf_r+0xcac>
 802047c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802047e:	3301      	adds	r3, #1
 8020480:	930a      	str	r3, [sp, #40]	; 0x28
 8020482:	2300      	movs	r3, #0
 8020484:	9305      	str	r3, [sp, #20]
 8020486:	2300      	movs	r3, #0
 8020488:	220a      	movs	r2, #10
 802048a:	4630      	mov	r0, r6
 802048c:	4629      	mov	r1, r5
 802048e:	f7e0 fb9b 	bl	8000bc8 <__aeabi_uldivmod>
 8020492:	2e0a      	cmp	r6, #10
 8020494:	f175 0300 	sbcs.w	r3, r5, #0
 8020498:	f0c0 83c6 	bcc.w	8020c28 <_vfprintf_r+0x1450>
 802049c:	4606      	mov	r6, r0
 802049e:	460d      	mov	r5, r1
 80204a0:	46c3      	mov	fp, r8
 80204a2:	e7c5      	b.n	8020430 <_vfprintf_r+0xc58>
 80204a4:	f006 030f 	and.w	r3, r6, #15
 80204a8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80204aa:	0936      	lsrs	r6, r6, #4
 80204ac:	5cd3      	ldrb	r3, [r2, r3]
 80204ae:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80204b2:	ea46 7605 	orr.w	r6, r6, r5, lsl #28
 80204b6:	092d      	lsrs	r5, r5, #4
 80204b8:	ea56 0305 	orrs.w	r3, r6, r5
 80204bc:	d1f2      	bne.n	80204a4 <_vfprintf_r+0xccc>
 80204be:	e3b3      	b.n	8020c28 <_vfprintf_r+0x1450>
 80204c0:	b933      	cbnz	r3, 80204d0 <_vfprintf_r+0xcf8>
 80204c2:	f01b 0f01 	tst.w	fp, #1
 80204c6:	d003      	beq.n	80204d0 <_vfprintf_r+0xcf8>
 80204c8:	2330      	movs	r3, #48	; 0x30
 80204ca:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 80204ce:	e7a4      	b.n	802041a <_vfprintf_r+0xc42>
 80204d0:	f50d 789c 	add.w	r8, sp, #312	; 0x138
 80204d4:	e3a8      	b.n	8020c28 <_vfprintf_r+0x1450>
 80204d6:	9b06      	ldr	r3, [sp, #24]
 80204d8:	2b00      	cmp	r3, #0
 80204da:	f000 8373 	beq.w	8020bc4 <_vfprintf_r+0x13ec>
 80204de:	2000      	movs	r0, #0
 80204e0:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 80204e4:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 80204e8:	9607      	str	r6, [sp, #28]
 80204ea:	f7ff bb1e 	b.w	801fb2a <_vfprintf_r+0x352>
 80204ee:	9e03      	ldr	r6, [sp, #12]
 80204f0:	f7ff bb8d 	b.w	801fc0e <_vfprintf_r+0x436>
 80204f4:	2010      	movs	r0, #16
 80204f6:	4402      	add	r2, r0
 80204f8:	2b07      	cmp	r3, #7
 80204fa:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80204fe:	6060      	str	r0, [r4, #4]
 8020500:	dd08      	ble.n	8020514 <_vfprintf_r+0xd3c>
 8020502:	aa22      	add	r2, sp, #136	; 0x88
 8020504:	4649      	mov	r1, r9
 8020506:	4650      	mov	r0, sl
 8020508:	f002 ff22 	bl	8023350 <__sprint_r>
 802050c:	2800      	cmp	r0, #0
 802050e:	f040 8337 	bne.w	8020b80 <_vfprintf_r+0x13a8>
 8020512:	a925      	add	r1, sp, #148	; 0x94
 8020514:	3f10      	subs	r7, #16
 8020516:	460c      	mov	r4, r1
 8020518:	e4f3      	b.n	801ff02 <_vfprintf_r+0x72a>
 802051a:	460c      	mov	r4, r1
 802051c:	e50c      	b.n	801ff38 <_vfprintf_r+0x760>
 802051e:	aa22      	add	r2, sp, #136	; 0x88
 8020520:	4649      	mov	r1, r9
 8020522:	4650      	mov	r0, sl
 8020524:	f002 ff14 	bl	8023350 <__sprint_r>
 8020528:	2800      	cmp	r0, #0
 802052a:	f040 8329 	bne.w	8020b80 <_vfprintf_r+0x13a8>
 802052e:	ac25      	add	r4, sp, #148	; 0x94
 8020530:	e514      	b.n	801ff5c <_vfprintf_r+0x784>
 8020532:	aa22      	add	r2, sp, #136	; 0x88
 8020534:	4649      	mov	r1, r9
 8020536:	4650      	mov	r0, sl
 8020538:	f002 ff0a 	bl	8023350 <__sprint_r>
 802053c:	2800      	cmp	r0, #0
 802053e:	f040 831f 	bne.w	8020b80 <_vfprintf_r+0x13a8>
 8020542:	ac25      	add	r4, sp, #148	; 0x94
 8020544:	e51a      	b.n	801ff7c <_vfprintf_r+0x7a4>
 8020546:	2010      	movs	r0, #16
 8020548:	4402      	add	r2, r0
 802054a:	2b07      	cmp	r3, #7
 802054c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8020550:	6060      	str	r0, [r4, #4]
 8020552:	dd08      	ble.n	8020566 <_vfprintf_r+0xd8e>
 8020554:	aa22      	add	r2, sp, #136	; 0x88
 8020556:	4649      	mov	r1, r9
 8020558:	4650      	mov	r0, sl
 802055a:	f002 fef9 	bl	8023350 <__sprint_r>
 802055e:	2800      	cmp	r0, #0
 8020560:	f040 830e 	bne.w	8020b80 <_vfprintf_r+0x13a8>
 8020564:	a925      	add	r1, sp, #148	; 0x94
 8020566:	3f10      	subs	r7, #16
 8020568:	460c      	mov	r4, r1
 802056a:	e50f      	b.n	801ff8c <_vfprintf_r+0x7b4>
 802056c:	460c      	mov	r4, r1
 802056e:	e528      	b.n	801ffc2 <_vfprintf_r+0x7ea>
 8020570:	2010      	movs	r0, #16
 8020572:	4402      	add	r2, r0
 8020574:	2b07      	cmp	r3, #7
 8020576:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 802057a:	6060      	str	r0, [r4, #4]
 802057c:	dd08      	ble.n	8020590 <_vfprintf_r+0xdb8>
 802057e:	aa22      	add	r2, sp, #136	; 0x88
 8020580:	4649      	mov	r1, r9
 8020582:	4650      	mov	r0, sl
 8020584:	f002 fee4 	bl	8023350 <__sprint_r>
 8020588:	2800      	cmp	r0, #0
 802058a:	f040 82f9 	bne.w	8020b80 <_vfprintf_r+0x13a8>
 802058e:	a925      	add	r1, sp, #148	; 0x94
 8020590:	3e10      	subs	r6, #16
 8020592:	460c      	mov	r4, r1
 8020594:	e528      	b.n	801ffe8 <_vfprintf_r+0x810>
 8020596:	460c      	mov	r4, r1
 8020598:	e540      	b.n	802001c <_vfprintf_r+0x844>
 802059a:	bf00      	nop
 802059c:	0806f778 	.word	0x0806f778
 80205a0:	0806f789 	.word	0x0806f789
 80205a4:	9b06      	ldr	r3, [sp, #24]
 80205a6:	2b65      	cmp	r3, #101	; 0x65
 80205a8:	f340 8232 	ble.w	8020a10 <_vfprintf_r+0x1238>
 80205ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80205b0:	2200      	movs	r2, #0
 80205b2:	2300      	movs	r3, #0
 80205b4:	f7e0 fa98 	bl	8000ae8 <__aeabi_dcmpeq>
 80205b8:	2800      	cmp	r0, #0
 80205ba:	d068      	beq.n	802068e <_vfprintf_r+0xeb6>
 80205bc:	4b6d      	ldr	r3, [pc, #436]	; (8020774 <_vfprintf_r+0xf9c>)
 80205be:	6023      	str	r3, [r4, #0]
 80205c0:	2301      	movs	r3, #1
 80205c2:	441e      	add	r6, r3
 80205c4:	6063      	str	r3, [r4, #4]
 80205c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80205c8:	9624      	str	r6, [sp, #144]	; 0x90
 80205ca:	3301      	adds	r3, #1
 80205cc:	2b07      	cmp	r3, #7
 80205ce:	9323      	str	r3, [sp, #140]	; 0x8c
 80205d0:	dc37      	bgt.n	8020642 <_vfprintf_r+0xe6a>
 80205d2:	3408      	adds	r4, #8
 80205d4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80205d6:	9a05      	ldr	r2, [sp, #20]
 80205d8:	4293      	cmp	r3, r2
 80205da:	db03      	blt.n	80205e4 <_vfprintf_r+0xe0c>
 80205dc:	f01b 0f01 	tst.w	fp, #1
 80205e0:	f43f ad2e 	beq.w	8020040 <_vfprintf_r+0x868>
 80205e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80205e6:	6023      	str	r3, [r4, #0]
 80205e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80205ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80205ec:	6063      	str	r3, [r4, #4]
 80205ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80205f0:	4413      	add	r3, r2
 80205f2:	9324      	str	r3, [sp, #144]	; 0x90
 80205f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80205f6:	3301      	adds	r3, #1
 80205f8:	2b07      	cmp	r3, #7
 80205fa:	9323      	str	r3, [sp, #140]	; 0x8c
 80205fc:	dc2b      	bgt.n	8020656 <_vfprintf_r+0xe7e>
 80205fe:	3408      	adds	r4, #8
 8020600:	9b05      	ldr	r3, [sp, #20]
 8020602:	1e5d      	subs	r5, r3, #1
 8020604:	2d00      	cmp	r5, #0
 8020606:	f77f ad1b 	ble.w	8020040 <_vfprintf_r+0x868>
 802060a:	4e5b      	ldr	r6, [pc, #364]	; (8020778 <_vfprintf_r+0xfa0>)
 802060c:	2710      	movs	r7, #16
 802060e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8020612:	2d10      	cmp	r5, #16
 8020614:	f103 0301 	add.w	r3, r3, #1
 8020618:	f104 0108 	add.w	r1, r4, #8
 802061c:	6026      	str	r6, [r4, #0]
 802061e:	dc24      	bgt.n	802066a <_vfprintf_r+0xe92>
 8020620:	442a      	add	r2, r5
 8020622:	6065      	str	r5, [r4, #4]
 8020624:	9224      	str	r2, [sp, #144]	; 0x90
 8020626:	2b07      	cmp	r3, #7
 8020628:	9323      	str	r3, [sp, #140]	; 0x8c
 802062a:	f340 8288 	ble.w	8020b3e <_vfprintf_r+0x1366>
 802062e:	aa22      	add	r2, sp, #136	; 0x88
 8020630:	4649      	mov	r1, r9
 8020632:	4650      	mov	r0, sl
 8020634:	f002 fe8c 	bl	8023350 <__sprint_r>
 8020638:	2800      	cmp	r0, #0
 802063a:	f040 82a1 	bne.w	8020b80 <_vfprintf_r+0x13a8>
 802063e:	ac25      	add	r4, sp, #148	; 0x94
 8020640:	e4fe      	b.n	8020040 <_vfprintf_r+0x868>
 8020642:	aa22      	add	r2, sp, #136	; 0x88
 8020644:	4649      	mov	r1, r9
 8020646:	4650      	mov	r0, sl
 8020648:	f002 fe82 	bl	8023350 <__sprint_r>
 802064c:	2800      	cmp	r0, #0
 802064e:	f040 8297 	bne.w	8020b80 <_vfprintf_r+0x13a8>
 8020652:	ac25      	add	r4, sp, #148	; 0x94
 8020654:	e7be      	b.n	80205d4 <_vfprintf_r+0xdfc>
 8020656:	aa22      	add	r2, sp, #136	; 0x88
 8020658:	4649      	mov	r1, r9
 802065a:	4650      	mov	r0, sl
 802065c:	f002 fe78 	bl	8023350 <__sprint_r>
 8020660:	2800      	cmp	r0, #0
 8020662:	f040 828d 	bne.w	8020b80 <_vfprintf_r+0x13a8>
 8020666:	ac25      	add	r4, sp, #148	; 0x94
 8020668:	e7ca      	b.n	8020600 <_vfprintf_r+0xe28>
 802066a:	3210      	adds	r2, #16
 802066c:	2b07      	cmp	r3, #7
 802066e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8020672:	6067      	str	r7, [r4, #4]
 8020674:	dd08      	ble.n	8020688 <_vfprintf_r+0xeb0>
 8020676:	aa22      	add	r2, sp, #136	; 0x88
 8020678:	4649      	mov	r1, r9
 802067a:	4650      	mov	r0, sl
 802067c:	f002 fe68 	bl	8023350 <__sprint_r>
 8020680:	2800      	cmp	r0, #0
 8020682:	f040 827d 	bne.w	8020b80 <_vfprintf_r+0x13a8>
 8020686:	a925      	add	r1, sp, #148	; 0x94
 8020688:	3d10      	subs	r5, #16
 802068a:	460c      	mov	r4, r1
 802068c:	e7bf      	b.n	802060e <_vfprintf_r+0xe36>
 802068e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020690:	2b00      	cmp	r3, #0
 8020692:	dc73      	bgt.n	802077c <_vfprintf_r+0xfa4>
 8020694:	4b37      	ldr	r3, [pc, #220]	; (8020774 <_vfprintf_r+0xf9c>)
 8020696:	6023      	str	r3, [r4, #0]
 8020698:	2301      	movs	r3, #1
 802069a:	441e      	add	r6, r3
 802069c:	6063      	str	r3, [r4, #4]
 802069e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80206a0:	9624      	str	r6, [sp, #144]	; 0x90
 80206a2:	3301      	adds	r3, #1
 80206a4:	2b07      	cmp	r3, #7
 80206a6:	9323      	str	r3, [sp, #140]	; 0x8c
 80206a8:	dc3d      	bgt.n	8020726 <_vfprintf_r+0xf4e>
 80206aa:	3408      	adds	r4, #8
 80206ac:	9905      	ldr	r1, [sp, #20]
 80206ae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80206b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80206b2:	430a      	orrs	r2, r1
 80206b4:	f00b 0101 	and.w	r1, fp, #1
 80206b8:	430a      	orrs	r2, r1
 80206ba:	f43f acc1 	beq.w	8020040 <_vfprintf_r+0x868>
 80206be:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80206c0:	6022      	str	r2, [r4, #0]
 80206c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80206c4:	6062      	str	r2, [r4, #4]
 80206c6:	4413      	add	r3, r2
 80206c8:	9324      	str	r3, [sp, #144]	; 0x90
 80206ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80206cc:	3301      	adds	r3, #1
 80206ce:	2b07      	cmp	r3, #7
 80206d0:	9323      	str	r3, [sp, #140]	; 0x8c
 80206d2:	dc32      	bgt.n	802073a <_vfprintf_r+0xf62>
 80206d4:	3408      	adds	r4, #8
 80206d6:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80206d8:	2d00      	cmp	r5, #0
 80206da:	da1b      	bge.n	8020714 <_vfprintf_r+0xf3c>
 80206dc:	4e26      	ldr	r6, [pc, #152]	; (8020778 <_vfprintf_r+0xfa0>)
 80206de:	426d      	negs	r5, r5
 80206e0:	4623      	mov	r3, r4
 80206e2:	2710      	movs	r7, #16
 80206e4:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 80206e8:	2d10      	cmp	r5, #16
 80206ea:	f102 0201 	add.w	r2, r2, #1
 80206ee:	f104 0408 	add.w	r4, r4, #8
 80206f2:	601e      	str	r6, [r3, #0]
 80206f4:	dc2b      	bgt.n	802074e <_vfprintf_r+0xf76>
 80206f6:	605d      	str	r5, [r3, #4]
 80206f8:	2a07      	cmp	r2, #7
 80206fa:	440d      	add	r5, r1
 80206fc:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 8020700:	dd08      	ble.n	8020714 <_vfprintf_r+0xf3c>
 8020702:	aa22      	add	r2, sp, #136	; 0x88
 8020704:	4649      	mov	r1, r9
 8020706:	4650      	mov	r0, sl
 8020708:	f002 fe22 	bl	8023350 <__sprint_r>
 802070c:	2800      	cmp	r0, #0
 802070e:	f040 8237 	bne.w	8020b80 <_vfprintf_r+0x13a8>
 8020712:	ac25      	add	r4, sp, #148	; 0x94
 8020714:	9b05      	ldr	r3, [sp, #20]
 8020716:	9a05      	ldr	r2, [sp, #20]
 8020718:	6063      	str	r3, [r4, #4]
 802071a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802071c:	f8c4 8000 	str.w	r8, [r4]
 8020720:	4413      	add	r3, r2
 8020722:	9324      	str	r3, [sp, #144]	; 0x90
 8020724:	e485      	b.n	8020032 <_vfprintf_r+0x85a>
 8020726:	aa22      	add	r2, sp, #136	; 0x88
 8020728:	4649      	mov	r1, r9
 802072a:	4650      	mov	r0, sl
 802072c:	f002 fe10 	bl	8023350 <__sprint_r>
 8020730:	2800      	cmp	r0, #0
 8020732:	f040 8225 	bne.w	8020b80 <_vfprintf_r+0x13a8>
 8020736:	ac25      	add	r4, sp, #148	; 0x94
 8020738:	e7b8      	b.n	80206ac <_vfprintf_r+0xed4>
 802073a:	aa22      	add	r2, sp, #136	; 0x88
 802073c:	4649      	mov	r1, r9
 802073e:	4650      	mov	r0, sl
 8020740:	f002 fe06 	bl	8023350 <__sprint_r>
 8020744:	2800      	cmp	r0, #0
 8020746:	f040 821b 	bne.w	8020b80 <_vfprintf_r+0x13a8>
 802074a:	ac25      	add	r4, sp, #148	; 0x94
 802074c:	e7c3      	b.n	80206d6 <_vfprintf_r+0xefe>
 802074e:	3110      	adds	r1, #16
 8020750:	2a07      	cmp	r2, #7
 8020752:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 8020756:	605f      	str	r7, [r3, #4]
 8020758:	dd08      	ble.n	802076c <_vfprintf_r+0xf94>
 802075a:	aa22      	add	r2, sp, #136	; 0x88
 802075c:	4649      	mov	r1, r9
 802075e:	4650      	mov	r0, sl
 8020760:	f002 fdf6 	bl	8023350 <__sprint_r>
 8020764:	2800      	cmp	r0, #0
 8020766:	f040 820b 	bne.w	8020b80 <_vfprintf_r+0x13a8>
 802076a:	ac25      	add	r4, sp, #148	; 0x94
 802076c:	3d10      	subs	r5, #16
 802076e:	4623      	mov	r3, r4
 8020770:	e7b8      	b.n	80206e4 <_vfprintf_r+0xf0c>
 8020772:	bf00      	nop
 8020774:	0806f79a 	.word	0x0806f79a
 8020778:	0806f7cc 	.word	0x0806f7cc
 802077c:	9f05      	ldr	r7, [sp, #20]
 802077e:	42af      	cmp	r7, r5
 8020780:	bfa8      	it	ge
 8020782:	462f      	movge	r7, r5
 8020784:	2f00      	cmp	r7, #0
 8020786:	dd09      	ble.n	802079c <_vfprintf_r+0xfc4>
 8020788:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802078a:	3301      	adds	r3, #1
 802078c:	443e      	add	r6, r7
 802078e:	2b07      	cmp	r3, #7
 8020790:	e9c4 8700 	strd	r8, r7, [r4]
 8020794:	9624      	str	r6, [sp, #144]	; 0x90
 8020796:	9323      	str	r3, [sp, #140]	; 0x8c
 8020798:	dc75      	bgt.n	8020886 <_vfprintf_r+0x10ae>
 802079a:	3408      	adds	r4, #8
 802079c:	2f00      	cmp	r7, #0
 802079e:	bfac      	ite	ge
 80207a0:	1bee      	subge	r6, r5, r7
 80207a2:	462e      	movlt	r6, r5
 80207a4:	2e00      	cmp	r6, #0
 80207a6:	dd18      	ble.n	80207da <_vfprintf_r+0x1002>
 80207a8:	4f98      	ldr	r7, [pc, #608]	; (8020a0c <_vfprintf_r+0x1234>)
 80207aa:	6027      	str	r7, [r4, #0]
 80207ac:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80207b0:	2e10      	cmp	r6, #16
 80207b2:	f103 0301 	add.w	r3, r3, #1
 80207b6:	f104 0108 	add.w	r1, r4, #8
 80207ba:	dc6e      	bgt.n	802089a <_vfprintf_r+0x10c2>
 80207bc:	6066      	str	r6, [r4, #4]
 80207be:	2b07      	cmp	r3, #7
 80207c0:	4416      	add	r6, r2
 80207c2:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80207c6:	dd7b      	ble.n	80208c0 <_vfprintf_r+0x10e8>
 80207c8:	aa22      	add	r2, sp, #136	; 0x88
 80207ca:	4649      	mov	r1, r9
 80207cc:	4650      	mov	r0, sl
 80207ce:	f002 fdbf 	bl	8023350 <__sprint_r>
 80207d2:	2800      	cmp	r0, #0
 80207d4:	f040 81d4 	bne.w	8020b80 <_vfprintf_r+0x13a8>
 80207d8:	ac25      	add	r4, sp, #148	; 0x94
 80207da:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 80207de:	4445      	add	r5, r8
 80207e0:	d00a      	beq.n	80207f8 <_vfprintf_r+0x1020>
 80207e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80207e4:	2b00      	cmp	r3, #0
 80207e6:	d16d      	bne.n	80208c4 <_vfprintf_r+0x10ec>
 80207e8:	9b08      	ldr	r3, [sp, #32]
 80207ea:	2b00      	cmp	r3, #0
 80207ec:	d16d      	bne.n	80208ca <_vfprintf_r+0x10f2>
 80207ee:	9b05      	ldr	r3, [sp, #20]
 80207f0:	4443      	add	r3, r8
 80207f2:	429d      	cmp	r5, r3
 80207f4:	bf28      	it	cs
 80207f6:	461d      	movcs	r5, r3
 80207f8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80207fa:	9a05      	ldr	r2, [sp, #20]
 80207fc:	4293      	cmp	r3, r2
 80207fe:	db02      	blt.n	8020806 <_vfprintf_r+0x102e>
 8020800:	f01b 0f01 	tst.w	fp, #1
 8020804:	d00e      	beq.n	8020824 <_vfprintf_r+0x104c>
 8020806:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020808:	6023      	str	r3, [r4, #0]
 802080a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802080c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802080e:	6063      	str	r3, [r4, #4]
 8020810:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020812:	4413      	add	r3, r2
 8020814:	9324      	str	r3, [sp, #144]	; 0x90
 8020816:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020818:	3301      	adds	r3, #1
 802081a:	2b07      	cmp	r3, #7
 802081c:	9323      	str	r3, [sp, #140]	; 0x8c
 802081e:	f300 80cf 	bgt.w	80209c0 <_vfprintf_r+0x11e8>
 8020822:	3408      	adds	r4, #8
 8020824:	9b05      	ldr	r3, [sp, #20]
 8020826:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8020828:	eb08 0203 	add.w	r2, r8, r3
 802082c:	1b9e      	subs	r6, r3, r6
 802082e:	1b52      	subs	r2, r2, r5
 8020830:	4296      	cmp	r6, r2
 8020832:	bfa8      	it	ge
 8020834:	4616      	movge	r6, r2
 8020836:	2e00      	cmp	r6, #0
 8020838:	dd0b      	ble.n	8020852 <_vfprintf_r+0x107a>
 802083a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802083c:	4433      	add	r3, r6
 802083e:	9324      	str	r3, [sp, #144]	; 0x90
 8020840:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020842:	3301      	adds	r3, #1
 8020844:	2b07      	cmp	r3, #7
 8020846:	e9c4 5600 	strd	r5, r6, [r4]
 802084a:	9323      	str	r3, [sp, #140]	; 0x8c
 802084c:	f300 80c2 	bgt.w	80209d4 <_vfprintf_r+0x11fc>
 8020850:	3408      	adds	r4, #8
 8020852:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8020854:	9b05      	ldr	r3, [sp, #20]
 8020856:	2e00      	cmp	r6, #0
 8020858:	eba3 0505 	sub.w	r5, r3, r5
 802085c:	bfa8      	it	ge
 802085e:	1bad      	subge	r5, r5, r6
 8020860:	2d00      	cmp	r5, #0
 8020862:	f77f abed 	ble.w	8020040 <_vfprintf_r+0x868>
 8020866:	4e69      	ldr	r6, [pc, #420]	; (8020a0c <_vfprintf_r+0x1234>)
 8020868:	2710      	movs	r7, #16
 802086a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 802086e:	2d10      	cmp	r5, #16
 8020870:	f103 0301 	add.w	r3, r3, #1
 8020874:	f104 0108 	add.w	r1, r4, #8
 8020878:	6026      	str	r6, [r4, #0]
 802087a:	f300 80b5 	bgt.w	80209e8 <_vfprintf_r+0x1210>
 802087e:	6065      	str	r5, [r4, #4]
 8020880:	4415      	add	r5, r2
 8020882:	9524      	str	r5, [sp, #144]	; 0x90
 8020884:	e6cf      	b.n	8020626 <_vfprintf_r+0xe4e>
 8020886:	aa22      	add	r2, sp, #136	; 0x88
 8020888:	4649      	mov	r1, r9
 802088a:	4650      	mov	r0, sl
 802088c:	f002 fd60 	bl	8023350 <__sprint_r>
 8020890:	2800      	cmp	r0, #0
 8020892:	f040 8175 	bne.w	8020b80 <_vfprintf_r+0x13a8>
 8020896:	ac25      	add	r4, sp, #148	; 0x94
 8020898:	e780      	b.n	802079c <_vfprintf_r+0xfc4>
 802089a:	2010      	movs	r0, #16
 802089c:	4402      	add	r2, r0
 802089e:	2b07      	cmp	r3, #7
 80208a0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80208a4:	6060      	str	r0, [r4, #4]
 80208a6:	dd08      	ble.n	80208ba <_vfprintf_r+0x10e2>
 80208a8:	aa22      	add	r2, sp, #136	; 0x88
 80208aa:	4649      	mov	r1, r9
 80208ac:	4650      	mov	r0, sl
 80208ae:	f002 fd4f 	bl	8023350 <__sprint_r>
 80208b2:	2800      	cmp	r0, #0
 80208b4:	f040 8164 	bne.w	8020b80 <_vfprintf_r+0x13a8>
 80208b8:	a925      	add	r1, sp, #148	; 0x94
 80208ba:	3e10      	subs	r6, #16
 80208bc:	460c      	mov	r4, r1
 80208be:	e774      	b.n	80207aa <_vfprintf_r+0xfd2>
 80208c0:	460c      	mov	r4, r1
 80208c2:	e78a      	b.n	80207da <_vfprintf_r+0x1002>
 80208c4:	9b08      	ldr	r3, [sp, #32]
 80208c6:	2b00      	cmp	r3, #0
 80208c8:	d04a      	beq.n	8020960 <_vfprintf_r+0x1188>
 80208ca:	9b08      	ldr	r3, [sp, #32]
 80208cc:	3b01      	subs	r3, #1
 80208ce:	9308      	str	r3, [sp, #32]
 80208d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80208d2:	6023      	str	r3, [r4, #0]
 80208d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80208d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80208d8:	6063      	str	r3, [r4, #4]
 80208da:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80208dc:	4413      	add	r3, r2
 80208de:	9324      	str	r3, [sp, #144]	; 0x90
 80208e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80208e2:	3301      	adds	r3, #1
 80208e4:	2b07      	cmp	r3, #7
 80208e6:	9323      	str	r3, [sp, #140]	; 0x8c
 80208e8:	dc41      	bgt.n	802096e <_vfprintf_r+0x1196>
 80208ea:	3408      	adds	r4, #8
 80208ec:	9b05      	ldr	r3, [sp, #20]
 80208ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80208f0:	eb08 0703 	add.w	r7, r8, r3
 80208f4:	1b7b      	subs	r3, r7, r5
 80208f6:	7817      	ldrb	r7, [r2, #0]
 80208f8:	429f      	cmp	r7, r3
 80208fa:	bfa8      	it	ge
 80208fc:	461f      	movge	r7, r3
 80208fe:	2f00      	cmp	r7, #0
 8020900:	dd0a      	ble.n	8020918 <_vfprintf_r+0x1140>
 8020902:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020904:	443b      	add	r3, r7
 8020906:	9324      	str	r3, [sp, #144]	; 0x90
 8020908:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802090a:	3301      	adds	r3, #1
 802090c:	2b07      	cmp	r3, #7
 802090e:	e9c4 5700 	strd	r5, r7, [r4]
 8020912:	9323      	str	r3, [sp, #140]	; 0x8c
 8020914:	dc35      	bgt.n	8020982 <_vfprintf_r+0x11aa>
 8020916:	3408      	adds	r4, #8
 8020918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802091a:	781e      	ldrb	r6, [r3, #0]
 802091c:	2f00      	cmp	r7, #0
 802091e:	bfa8      	it	ge
 8020920:	1bf6      	subge	r6, r6, r7
 8020922:	2e00      	cmp	r6, #0
 8020924:	dd18      	ble.n	8020958 <_vfprintf_r+0x1180>
 8020926:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 802092a:	4838      	ldr	r0, [pc, #224]	; (8020a0c <_vfprintf_r+0x1234>)
 802092c:	6020      	str	r0, [r4, #0]
 802092e:	2e10      	cmp	r6, #16
 8020930:	f103 0301 	add.w	r3, r3, #1
 8020934:	f104 0108 	add.w	r1, r4, #8
 8020938:	dc2d      	bgt.n	8020996 <_vfprintf_r+0x11be>
 802093a:	6066      	str	r6, [r4, #4]
 802093c:	2b07      	cmp	r3, #7
 802093e:	4416      	add	r6, r2
 8020940:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8020944:	dd3a      	ble.n	80209bc <_vfprintf_r+0x11e4>
 8020946:	aa22      	add	r2, sp, #136	; 0x88
 8020948:	4649      	mov	r1, r9
 802094a:	4650      	mov	r0, sl
 802094c:	f002 fd00 	bl	8023350 <__sprint_r>
 8020950:	2800      	cmp	r0, #0
 8020952:	f040 8115 	bne.w	8020b80 <_vfprintf_r+0x13a8>
 8020956:	ac25      	add	r4, sp, #148	; 0x94
 8020958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802095a:	781b      	ldrb	r3, [r3, #0]
 802095c:	441d      	add	r5, r3
 802095e:	e740      	b.n	80207e2 <_vfprintf_r+0x100a>
 8020960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020962:	3b01      	subs	r3, #1
 8020964:	930a      	str	r3, [sp, #40]	; 0x28
 8020966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020968:	3b01      	subs	r3, #1
 802096a:	9309      	str	r3, [sp, #36]	; 0x24
 802096c:	e7b0      	b.n	80208d0 <_vfprintf_r+0x10f8>
 802096e:	aa22      	add	r2, sp, #136	; 0x88
 8020970:	4649      	mov	r1, r9
 8020972:	4650      	mov	r0, sl
 8020974:	f002 fcec 	bl	8023350 <__sprint_r>
 8020978:	2800      	cmp	r0, #0
 802097a:	f040 8101 	bne.w	8020b80 <_vfprintf_r+0x13a8>
 802097e:	ac25      	add	r4, sp, #148	; 0x94
 8020980:	e7b4      	b.n	80208ec <_vfprintf_r+0x1114>
 8020982:	aa22      	add	r2, sp, #136	; 0x88
 8020984:	4649      	mov	r1, r9
 8020986:	4650      	mov	r0, sl
 8020988:	f002 fce2 	bl	8023350 <__sprint_r>
 802098c:	2800      	cmp	r0, #0
 802098e:	f040 80f7 	bne.w	8020b80 <_vfprintf_r+0x13a8>
 8020992:	ac25      	add	r4, sp, #148	; 0x94
 8020994:	e7c0      	b.n	8020918 <_vfprintf_r+0x1140>
 8020996:	2010      	movs	r0, #16
 8020998:	4402      	add	r2, r0
 802099a:	2b07      	cmp	r3, #7
 802099c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80209a0:	6060      	str	r0, [r4, #4]
 80209a2:	dd08      	ble.n	80209b6 <_vfprintf_r+0x11de>
 80209a4:	aa22      	add	r2, sp, #136	; 0x88
 80209a6:	4649      	mov	r1, r9
 80209a8:	4650      	mov	r0, sl
 80209aa:	f002 fcd1 	bl	8023350 <__sprint_r>
 80209ae:	2800      	cmp	r0, #0
 80209b0:	f040 80e6 	bne.w	8020b80 <_vfprintf_r+0x13a8>
 80209b4:	a925      	add	r1, sp, #148	; 0x94
 80209b6:	3e10      	subs	r6, #16
 80209b8:	460c      	mov	r4, r1
 80209ba:	e7b4      	b.n	8020926 <_vfprintf_r+0x114e>
 80209bc:	460c      	mov	r4, r1
 80209be:	e7cb      	b.n	8020958 <_vfprintf_r+0x1180>
 80209c0:	aa22      	add	r2, sp, #136	; 0x88
 80209c2:	4649      	mov	r1, r9
 80209c4:	4650      	mov	r0, sl
 80209c6:	f002 fcc3 	bl	8023350 <__sprint_r>
 80209ca:	2800      	cmp	r0, #0
 80209cc:	f040 80d8 	bne.w	8020b80 <_vfprintf_r+0x13a8>
 80209d0:	ac25      	add	r4, sp, #148	; 0x94
 80209d2:	e727      	b.n	8020824 <_vfprintf_r+0x104c>
 80209d4:	aa22      	add	r2, sp, #136	; 0x88
 80209d6:	4649      	mov	r1, r9
 80209d8:	4650      	mov	r0, sl
 80209da:	f002 fcb9 	bl	8023350 <__sprint_r>
 80209de:	2800      	cmp	r0, #0
 80209e0:	f040 80ce 	bne.w	8020b80 <_vfprintf_r+0x13a8>
 80209e4:	ac25      	add	r4, sp, #148	; 0x94
 80209e6:	e734      	b.n	8020852 <_vfprintf_r+0x107a>
 80209e8:	3210      	adds	r2, #16
 80209ea:	2b07      	cmp	r3, #7
 80209ec:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80209f0:	6067      	str	r7, [r4, #4]
 80209f2:	dd08      	ble.n	8020a06 <_vfprintf_r+0x122e>
 80209f4:	aa22      	add	r2, sp, #136	; 0x88
 80209f6:	4649      	mov	r1, r9
 80209f8:	4650      	mov	r0, sl
 80209fa:	f002 fca9 	bl	8023350 <__sprint_r>
 80209fe:	2800      	cmp	r0, #0
 8020a00:	f040 80be 	bne.w	8020b80 <_vfprintf_r+0x13a8>
 8020a04:	a925      	add	r1, sp, #148	; 0x94
 8020a06:	3d10      	subs	r5, #16
 8020a08:	460c      	mov	r4, r1
 8020a0a:	e72e      	b.n	802086a <_vfprintf_r+0x1092>
 8020a0c:	0806f7cc 	.word	0x0806f7cc
 8020a10:	9a05      	ldr	r2, [sp, #20]
 8020a12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020a14:	2a01      	cmp	r2, #1
 8020a16:	f106 0601 	add.w	r6, r6, #1
 8020a1a:	f103 0301 	add.w	r3, r3, #1
 8020a1e:	f104 0508 	add.w	r5, r4, #8
 8020a22:	dc02      	bgt.n	8020a2a <_vfprintf_r+0x1252>
 8020a24:	f01b 0f01 	tst.w	fp, #1
 8020a28:	d07e      	beq.n	8020b28 <_vfprintf_r+0x1350>
 8020a2a:	2201      	movs	r2, #1
 8020a2c:	2b07      	cmp	r3, #7
 8020a2e:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8020a32:	f8c4 8000 	str.w	r8, [r4]
 8020a36:	6062      	str	r2, [r4, #4]
 8020a38:	dd08      	ble.n	8020a4c <_vfprintf_r+0x1274>
 8020a3a:	aa22      	add	r2, sp, #136	; 0x88
 8020a3c:	4649      	mov	r1, r9
 8020a3e:	4650      	mov	r0, sl
 8020a40:	f002 fc86 	bl	8023350 <__sprint_r>
 8020a44:	2800      	cmp	r0, #0
 8020a46:	f040 809b 	bne.w	8020b80 <_vfprintf_r+0x13a8>
 8020a4a:	ad25      	add	r5, sp, #148	; 0x94
 8020a4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020a4e:	602b      	str	r3, [r5, #0]
 8020a50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020a52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020a54:	606b      	str	r3, [r5, #4]
 8020a56:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020a58:	4413      	add	r3, r2
 8020a5a:	9324      	str	r3, [sp, #144]	; 0x90
 8020a5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020a5e:	3301      	adds	r3, #1
 8020a60:	2b07      	cmp	r3, #7
 8020a62:	9323      	str	r3, [sp, #140]	; 0x8c
 8020a64:	dc32      	bgt.n	8020acc <_vfprintf_r+0x12f4>
 8020a66:	3508      	adds	r5, #8
 8020a68:	9b05      	ldr	r3, [sp, #20]
 8020a6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8020a6e:	1e5c      	subs	r4, r3, #1
 8020a70:	2200      	movs	r2, #0
 8020a72:	2300      	movs	r3, #0
 8020a74:	f7e0 f838 	bl	8000ae8 <__aeabi_dcmpeq>
 8020a78:	2800      	cmp	r0, #0
 8020a7a:	d130      	bne.n	8020ade <_vfprintf_r+0x1306>
 8020a7c:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8020a7e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020a80:	9a05      	ldr	r2, [sp, #20]
 8020a82:	3101      	adds	r1, #1
 8020a84:	3b01      	subs	r3, #1
 8020a86:	f108 0001 	add.w	r0, r8, #1
 8020a8a:	4413      	add	r3, r2
 8020a8c:	2907      	cmp	r1, #7
 8020a8e:	e9c5 0400 	strd	r0, r4, [r5]
 8020a92:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 8020a96:	dd50      	ble.n	8020b3a <_vfprintf_r+0x1362>
 8020a98:	aa22      	add	r2, sp, #136	; 0x88
 8020a9a:	4649      	mov	r1, r9
 8020a9c:	4650      	mov	r0, sl
 8020a9e:	f002 fc57 	bl	8023350 <__sprint_r>
 8020aa2:	2800      	cmp	r0, #0
 8020aa4:	d16c      	bne.n	8020b80 <_vfprintf_r+0x13a8>
 8020aa6:	ad25      	add	r5, sp, #148	; 0x94
 8020aa8:	ab1e      	add	r3, sp, #120	; 0x78
 8020aaa:	602b      	str	r3, [r5, #0]
 8020aac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020aae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8020ab0:	606b      	str	r3, [r5, #4]
 8020ab2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020ab4:	4413      	add	r3, r2
 8020ab6:	9324      	str	r3, [sp, #144]	; 0x90
 8020ab8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020aba:	3301      	adds	r3, #1
 8020abc:	2b07      	cmp	r3, #7
 8020abe:	9323      	str	r3, [sp, #140]	; 0x8c
 8020ac0:	f73f adb5 	bgt.w	802062e <_vfprintf_r+0xe56>
 8020ac4:	f105 0408 	add.w	r4, r5, #8
 8020ac8:	f7ff baba 	b.w	8020040 <_vfprintf_r+0x868>
 8020acc:	aa22      	add	r2, sp, #136	; 0x88
 8020ace:	4649      	mov	r1, r9
 8020ad0:	4650      	mov	r0, sl
 8020ad2:	f002 fc3d 	bl	8023350 <__sprint_r>
 8020ad6:	2800      	cmp	r0, #0
 8020ad8:	d152      	bne.n	8020b80 <_vfprintf_r+0x13a8>
 8020ada:	ad25      	add	r5, sp, #148	; 0x94
 8020adc:	e7c4      	b.n	8020a68 <_vfprintf_r+0x1290>
 8020ade:	2c00      	cmp	r4, #0
 8020ae0:	dde2      	ble.n	8020aa8 <_vfprintf_r+0x12d0>
 8020ae2:	4e58      	ldr	r6, [pc, #352]	; (8020c44 <_vfprintf_r+0x146c>)
 8020ae4:	2710      	movs	r7, #16
 8020ae6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8020aea:	2c10      	cmp	r4, #16
 8020aec:	f103 0301 	add.w	r3, r3, #1
 8020af0:	f105 0108 	add.w	r1, r5, #8
 8020af4:	602e      	str	r6, [r5, #0]
 8020af6:	dc07      	bgt.n	8020b08 <_vfprintf_r+0x1330>
 8020af8:	606c      	str	r4, [r5, #4]
 8020afa:	2b07      	cmp	r3, #7
 8020afc:	4414      	add	r4, r2
 8020afe:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 8020b02:	dcc9      	bgt.n	8020a98 <_vfprintf_r+0x12c0>
 8020b04:	460d      	mov	r5, r1
 8020b06:	e7cf      	b.n	8020aa8 <_vfprintf_r+0x12d0>
 8020b08:	3210      	adds	r2, #16
 8020b0a:	2b07      	cmp	r3, #7
 8020b0c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8020b10:	606f      	str	r7, [r5, #4]
 8020b12:	dd06      	ble.n	8020b22 <_vfprintf_r+0x134a>
 8020b14:	aa22      	add	r2, sp, #136	; 0x88
 8020b16:	4649      	mov	r1, r9
 8020b18:	4650      	mov	r0, sl
 8020b1a:	f002 fc19 	bl	8023350 <__sprint_r>
 8020b1e:	bb78      	cbnz	r0, 8020b80 <_vfprintf_r+0x13a8>
 8020b20:	a925      	add	r1, sp, #148	; 0x94
 8020b22:	3c10      	subs	r4, #16
 8020b24:	460d      	mov	r5, r1
 8020b26:	e7de      	b.n	8020ae6 <_vfprintf_r+0x130e>
 8020b28:	2201      	movs	r2, #1
 8020b2a:	2b07      	cmp	r3, #7
 8020b2c:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8020b30:	f8c4 8000 	str.w	r8, [r4]
 8020b34:	6062      	str	r2, [r4, #4]
 8020b36:	ddb7      	ble.n	8020aa8 <_vfprintf_r+0x12d0>
 8020b38:	e7ae      	b.n	8020a98 <_vfprintf_r+0x12c0>
 8020b3a:	3508      	adds	r5, #8
 8020b3c:	e7b4      	b.n	8020aa8 <_vfprintf_r+0x12d0>
 8020b3e:	460c      	mov	r4, r1
 8020b40:	f7ff ba7e 	b.w	8020040 <_vfprintf_r+0x868>
 8020b44:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8020b48:	1a9d      	subs	r5, r3, r2
 8020b4a:	2d00      	cmp	r5, #0
 8020b4c:	f77f aa7c 	ble.w	8020048 <_vfprintf_r+0x870>
 8020b50:	4e3d      	ldr	r6, [pc, #244]	; (8020c48 <_vfprintf_r+0x1470>)
 8020b52:	2710      	movs	r7, #16
 8020b54:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8020b58:	2d10      	cmp	r5, #16
 8020b5a:	f103 0301 	add.w	r3, r3, #1
 8020b5e:	6026      	str	r6, [r4, #0]
 8020b60:	dc18      	bgt.n	8020b94 <_vfprintf_r+0x13bc>
 8020b62:	6065      	str	r5, [r4, #4]
 8020b64:	2b07      	cmp	r3, #7
 8020b66:	4415      	add	r5, r2
 8020b68:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8020b6c:	f77f aa6c 	ble.w	8020048 <_vfprintf_r+0x870>
 8020b70:	aa22      	add	r2, sp, #136	; 0x88
 8020b72:	4649      	mov	r1, r9
 8020b74:	4650      	mov	r0, sl
 8020b76:	f002 fbeb 	bl	8023350 <__sprint_r>
 8020b7a:	2800      	cmp	r0, #0
 8020b7c:	f43f aa64 	beq.w	8020048 <_vfprintf_r+0x870>
 8020b80:	9b03      	ldr	r3, [sp, #12]
 8020b82:	2b00      	cmp	r3, #0
 8020b84:	f43f a879 	beq.w	801fc7a <_vfprintf_r+0x4a2>
 8020b88:	4619      	mov	r1, r3
 8020b8a:	4650      	mov	r0, sl
 8020b8c:	f001 f8fa 	bl	8021d84 <_free_r>
 8020b90:	f7ff b873 	b.w	801fc7a <_vfprintf_r+0x4a2>
 8020b94:	3210      	adds	r2, #16
 8020b96:	2b07      	cmp	r3, #7
 8020b98:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8020b9c:	6067      	str	r7, [r4, #4]
 8020b9e:	dc02      	bgt.n	8020ba6 <_vfprintf_r+0x13ce>
 8020ba0:	3408      	adds	r4, #8
 8020ba2:	3d10      	subs	r5, #16
 8020ba4:	e7d6      	b.n	8020b54 <_vfprintf_r+0x137c>
 8020ba6:	aa22      	add	r2, sp, #136	; 0x88
 8020ba8:	4649      	mov	r1, r9
 8020baa:	4650      	mov	r0, sl
 8020bac:	f002 fbd0 	bl	8023350 <__sprint_r>
 8020bb0:	2800      	cmp	r0, #0
 8020bb2:	d1e5      	bne.n	8020b80 <_vfprintf_r+0x13a8>
 8020bb4:	ac25      	add	r4, sp, #148	; 0x94
 8020bb6:	e7f4      	b.n	8020ba2 <_vfprintf_r+0x13ca>
 8020bb8:	9903      	ldr	r1, [sp, #12]
 8020bba:	4650      	mov	r0, sl
 8020bbc:	f001 f8e2 	bl	8021d84 <_free_r>
 8020bc0:	f7ff ba5a 	b.w	8020078 <_vfprintf_r+0x8a0>
 8020bc4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020bc6:	b91b      	cbnz	r3, 8020bd0 <_vfprintf_r+0x13f8>
 8020bc8:	2300      	movs	r3, #0
 8020bca:	9323      	str	r3, [sp, #140]	; 0x8c
 8020bcc:	f7ff b855 	b.w	801fc7a <_vfprintf_r+0x4a2>
 8020bd0:	aa22      	add	r2, sp, #136	; 0x88
 8020bd2:	4649      	mov	r1, r9
 8020bd4:	4650      	mov	r0, sl
 8020bd6:	f002 fbbb 	bl	8023350 <__sprint_r>
 8020bda:	2800      	cmp	r0, #0
 8020bdc:	d0f4      	beq.n	8020bc8 <_vfprintf_r+0x13f0>
 8020bde:	f7ff b84c 	b.w	801fc7a <_vfprintf_r+0x4a2>
 8020be2:	ea56 0205 	orrs.w	r2, r6, r5
 8020be6:	465f      	mov	r7, fp
 8020be8:	f43f ab70 	beq.w	80202cc <_vfprintf_r+0xaf4>
 8020bec:	2b01      	cmp	r3, #1
 8020bee:	f43f ac0d 	beq.w	802040c <_vfprintf_r+0xc34>
 8020bf2:	2b02      	cmp	r3, #2
 8020bf4:	f50d 789c 	add.w	r8, sp, #312	; 0x138
 8020bf8:	f43f ac54 	beq.w	80204a4 <_vfprintf_r+0xccc>
 8020bfc:	f006 0307 	and.w	r3, r6, #7
 8020c00:	08f6      	lsrs	r6, r6, #3
 8020c02:	ea46 7645 	orr.w	r6, r6, r5, lsl #29
 8020c06:	08ed      	lsrs	r5, r5, #3
 8020c08:	3330      	adds	r3, #48	; 0x30
 8020c0a:	ea56 0105 	orrs.w	r1, r6, r5
 8020c0e:	4642      	mov	r2, r8
 8020c10:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8020c14:	d1f2      	bne.n	8020bfc <_vfprintf_r+0x1424>
 8020c16:	07f8      	lsls	r0, r7, #31
 8020c18:	d506      	bpl.n	8020c28 <_vfprintf_r+0x1450>
 8020c1a:	2b30      	cmp	r3, #48	; 0x30
 8020c1c:	d004      	beq.n	8020c28 <_vfprintf_r+0x1450>
 8020c1e:	2330      	movs	r3, #48	; 0x30
 8020c20:	f808 3c01 	strb.w	r3, [r8, #-1]
 8020c24:	f1a2 0802 	sub.w	r8, r2, #2
 8020c28:	ab4e      	add	r3, sp, #312	; 0x138
 8020c2a:	eba3 0308 	sub.w	r3, r3, r8
 8020c2e:	9e04      	ldr	r6, [sp, #16]
 8020c30:	9304      	str	r3, [sp, #16]
 8020c32:	2300      	movs	r3, #0
 8020c34:	46bb      	mov	fp, r7
 8020c36:	9303      	str	r3, [sp, #12]
 8020c38:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8020c3c:	461d      	mov	r5, r3
 8020c3e:	f7ff b945 	b.w	801fecc <_vfprintf_r+0x6f4>
 8020c42:	bf00      	nop
 8020c44:	0806f7cc 	.word	0x0806f7cc
 8020c48:	0806f7bc 	.word	0x0806f7bc

08020c4c <__sbprintf>:
 8020c4c:	b570      	push	{r4, r5, r6, lr}
 8020c4e:	460c      	mov	r4, r1
 8020c50:	8989      	ldrh	r1, [r1, #12]
 8020c52:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8020c56:	f021 0102 	bic.w	r1, r1, #2
 8020c5a:	f8ad 1014 	strh.w	r1, [sp, #20]
 8020c5e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8020c60:	911b      	str	r1, [sp, #108]	; 0x6c
 8020c62:	89e1      	ldrh	r1, [r4, #14]
 8020c64:	f8ad 1016 	strh.w	r1, [sp, #22]
 8020c68:	69e1      	ldr	r1, [r4, #28]
 8020c6a:	9109      	str	r1, [sp, #36]	; 0x24
 8020c6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8020c6e:	910b      	str	r1, [sp, #44]	; 0x2c
 8020c70:	a91c      	add	r1, sp, #112	; 0x70
 8020c72:	9102      	str	r1, [sp, #8]
 8020c74:	9106      	str	r1, [sp, #24]
 8020c76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8020c7a:	4606      	mov	r6, r0
 8020c7c:	9104      	str	r1, [sp, #16]
 8020c7e:	9107      	str	r1, [sp, #28]
 8020c80:	a818      	add	r0, sp, #96	; 0x60
 8020c82:	2100      	movs	r1, #0
 8020c84:	e9cd 3200 	strd	r3, r2, [sp]
 8020c88:	9108      	str	r1, [sp, #32]
 8020c8a:	f001 faa9 	bl	80221e0 <__retarget_lock_init_recursive>
 8020c8e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8020c92:	a902      	add	r1, sp, #8
 8020c94:	4630      	mov	r0, r6
 8020c96:	f7fe fd9f 	bl	801f7d8 <_vfprintf_r>
 8020c9a:	1e05      	subs	r5, r0, #0
 8020c9c:	db07      	blt.n	8020cae <__sbprintf+0x62>
 8020c9e:	a902      	add	r1, sp, #8
 8020ca0:	4630      	mov	r0, r6
 8020ca2:	f000 ff73 	bl	8021b8c <_fflush_r>
 8020ca6:	2800      	cmp	r0, #0
 8020ca8:	bf18      	it	ne
 8020caa:	f04f 35ff 	movne.w	r5, #4294967295
 8020cae:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8020cb2:	9818      	ldr	r0, [sp, #96]	; 0x60
 8020cb4:	065b      	lsls	r3, r3, #25
 8020cb6:	bf42      	ittt	mi
 8020cb8:	89a3      	ldrhmi	r3, [r4, #12]
 8020cba:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8020cbe:	81a3      	strhmi	r3, [r4, #12]
 8020cc0:	f001 fa8f 	bl	80221e2 <__retarget_lock_close_recursive>
 8020cc4:	4628      	mov	r0, r5
 8020cc6:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 8020cca:	bd70      	pop	{r4, r5, r6, pc}

08020ccc <__swsetup_r>:
 8020ccc:	b538      	push	{r3, r4, r5, lr}
 8020cce:	4b2a      	ldr	r3, [pc, #168]	; (8020d78 <__swsetup_r+0xac>)
 8020cd0:	4605      	mov	r5, r0
 8020cd2:	6818      	ldr	r0, [r3, #0]
 8020cd4:	460c      	mov	r4, r1
 8020cd6:	b118      	cbz	r0, 8020ce0 <__swsetup_r+0x14>
 8020cd8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8020cda:	b90b      	cbnz	r3, 8020ce0 <__swsetup_r+0x14>
 8020cdc:	f000 ffc2 	bl	8021c64 <__sinit>
 8020ce0:	89a3      	ldrh	r3, [r4, #12]
 8020ce2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020ce6:	0718      	lsls	r0, r3, #28
 8020ce8:	d422      	bmi.n	8020d30 <__swsetup_r+0x64>
 8020cea:	06d9      	lsls	r1, r3, #27
 8020cec:	d407      	bmi.n	8020cfe <__swsetup_r+0x32>
 8020cee:	2309      	movs	r3, #9
 8020cf0:	602b      	str	r3, [r5, #0]
 8020cf2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8020cf6:	81a3      	strh	r3, [r4, #12]
 8020cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8020cfc:	e034      	b.n	8020d68 <__swsetup_r+0x9c>
 8020cfe:	0758      	lsls	r0, r3, #29
 8020d00:	d512      	bpl.n	8020d28 <__swsetup_r+0x5c>
 8020d02:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8020d04:	b141      	cbz	r1, 8020d18 <__swsetup_r+0x4c>
 8020d06:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8020d0a:	4299      	cmp	r1, r3
 8020d0c:	d002      	beq.n	8020d14 <__swsetup_r+0x48>
 8020d0e:	4628      	mov	r0, r5
 8020d10:	f001 f838 	bl	8021d84 <_free_r>
 8020d14:	2300      	movs	r3, #0
 8020d16:	6323      	str	r3, [r4, #48]	; 0x30
 8020d18:	89a3      	ldrh	r3, [r4, #12]
 8020d1a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8020d1e:	81a3      	strh	r3, [r4, #12]
 8020d20:	2300      	movs	r3, #0
 8020d22:	6063      	str	r3, [r4, #4]
 8020d24:	6923      	ldr	r3, [r4, #16]
 8020d26:	6023      	str	r3, [r4, #0]
 8020d28:	89a3      	ldrh	r3, [r4, #12]
 8020d2a:	f043 0308 	orr.w	r3, r3, #8
 8020d2e:	81a3      	strh	r3, [r4, #12]
 8020d30:	6923      	ldr	r3, [r4, #16]
 8020d32:	b94b      	cbnz	r3, 8020d48 <__swsetup_r+0x7c>
 8020d34:	89a3      	ldrh	r3, [r4, #12]
 8020d36:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8020d3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020d3e:	d003      	beq.n	8020d48 <__swsetup_r+0x7c>
 8020d40:	4621      	mov	r1, r4
 8020d42:	4628      	mov	r0, r5
 8020d44:	f001 fa7c 	bl	8022240 <__smakebuf_r>
 8020d48:	89a0      	ldrh	r0, [r4, #12]
 8020d4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020d4e:	f010 0301 	ands.w	r3, r0, #1
 8020d52:	d00a      	beq.n	8020d6a <__swsetup_r+0x9e>
 8020d54:	2300      	movs	r3, #0
 8020d56:	60a3      	str	r3, [r4, #8]
 8020d58:	6963      	ldr	r3, [r4, #20]
 8020d5a:	425b      	negs	r3, r3
 8020d5c:	61a3      	str	r3, [r4, #24]
 8020d5e:	6923      	ldr	r3, [r4, #16]
 8020d60:	b943      	cbnz	r3, 8020d74 <__swsetup_r+0xa8>
 8020d62:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8020d66:	d1c4      	bne.n	8020cf2 <__swsetup_r+0x26>
 8020d68:	bd38      	pop	{r3, r4, r5, pc}
 8020d6a:	0781      	lsls	r1, r0, #30
 8020d6c:	bf58      	it	pl
 8020d6e:	6963      	ldrpl	r3, [r4, #20]
 8020d70:	60a3      	str	r3, [r4, #8]
 8020d72:	e7f4      	b.n	8020d5e <__swsetup_r+0x92>
 8020d74:	2000      	movs	r0, #0
 8020d76:	e7f7      	b.n	8020d68 <__swsetup_r+0x9c>
 8020d78:	20000020 	.word	0x20000020

08020d7c <register_fini>:
 8020d7c:	4b02      	ldr	r3, [pc, #8]	; (8020d88 <register_fini+0xc>)
 8020d7e:	b113      	cbz	r3, 8020d86 <register_fini+0xa>
 8020d80:	4802      	ldr	r0, [pc, #8]	; (8020d8c <register_fini+0x10>)
 8020d82:	f000 b805 	b.w	8020d90 <atexit>
 8020d86:	4770      	bx	lr
 8020d88:	00000000 	.word	0x00000000
 8020d8c:	08021cb5 	.word	0x08021cb5

08020d90 <atexit>:
 8020d90:	2300      	movs	r3, #0
 8020d92:	4601      	mov	r1, r0
 8020d94:	461a      	mov	r2, r3
 8020d96:	4618      	mov	r0, r3
 8020d98:	f002 bff4 	b.w	8023d84 <__register_exitproc>

08020d9c <quorem>:
 8020d9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020da0:	6903      	ldr	r3, [r0, #16]
 8020da2:	690c      	ldr	r4, [r1, #16]
 8020da4:	42a3      	cmp	r3, r4
 8020da6:	4607      	mov	r7, r0
 8020da8:	f2c0 8081 	blt.w	8020eae <quorem+0x112>
 8020dac:	3c01      	subs	r4, #1
 8020dae:	f101 0814 	add.w	r8, r1, #20
 8020db2:	f100 0514 	add.w	r5, r0, #20
 8020db6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020dba:	9301      	str	r3, [sp, #4]
 8020dbc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8020dc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020dc4:	3301      	adds	r3, #1
 8020dc6:	429a      	cmp	r2, r3
 8020dc8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8020dcc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8020dd0:	fbb2 f6f3 	udiv	r6, r2, r3
 8020dd4:	d331      	bcc.n	8020e3a <quorem+0x9e>
 8020dd6:	f04f 0e00 	mov.w	lr, #0
 8020dda:	4640      	mov	r0, r8
 8020ddc:	46ac      	mov	ip, r5
 8020dde:	46f2      	mov	sl, lr
 8020de0:	f850 2b04 	ldr.w	r2, [r0], #4
 8020de4:	b293      	uxth	r3, r2
 8020de6:	fb06 e303 	mla	r3, r6, r3, lr
 8020dea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8020dee:	b29b      	uxth	r3, r3
 8020df0:	ebaa 0303 	sub.w	r3, sl, r3
 8020df4:	f8dc a000 	ldr.w	sl, [ip]
 8020df8:	0c12      	lsrs	r2, r2, #16
 8020dfa:	fa13 f38a 	uxtah	r3, r3, sl
 8020dfe:	fb06 e202 	mla	r2, r6, r2, lr
 8020e02:	9300      	str	r3, [sp, #0]
 8020e04:	9b00      	ldr	r3, [sp, #0]
 8020e06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8020e0a:	b292      	uxth	r2, r2
 8020e0c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8020e10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020e14:	f8bd 3000 	ldrh.w	r3, [sp]
 8020e18:	4581      	cmp	r9, r0
 8020e1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020e1e:	f84c 3b04 	str.w	r3, [ip], #4
 8020e22:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8020e26:	d2db      	bcs.n	8020de0 <quorem+0x44>
 8020e28:	f855 300b 	ldr.w	r3, [r5, fp]
 8020e2c:	b92b      	cbnz	r3, 8020e3a <quorem+0x9e>
 8020e2e:	9b01      	ldr	r3, [sp, #4]
 8020e30:	3b04      	subs	r3, #4
 8020e32:	429d      	cmp	r5, r3
 8020e34:	461a      	mov	r2, r3
 8020e36:	d32e      	bcc.n	8020e96 <quorem+0xfa>
 8020e38:	613c      	str	r4, [r7, #16]
 8020e3a:	4638      	mov	r0, r7
 8020e3c:	f001 febc 	bl	8022bb8 <__mcmp>
 8020e40:	2800      	cmp	r0, #0
 8020e42:	db24      	blt.n	8020e8e <quorem+0xf2>
 8020e44:	3601      	adds	r6, #1
 8020e46:	4628      	mov	r0, r5
 8020e48:	f04f 0c00 	mov.w	ip, #0
 8020e4c:	f858 2b04 	ldr.w	r2, [r8], #4
 8020e50:	f8d0 e000 	ldr.w	lr, [r0]
 8020e54:	b293      	uxth	r3, r2
 8020e56:	ebac 0303 	sub.w	r3, ip, r3
 8020e5a:	0c12      	lsrs	r2, r2, #16
 8020e5c:	fa13 f38e 	uxtah	r3, r3, lr
 8020e60:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8020e64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020e68:	b29b      	uxth	r3, r3
 8020e6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020e6e:	45c1      	cmp	r9, r8
 8020e70:	f840 3b04 	str.w	r3, [r0], #4
 8020e74:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8020e78:	d2e8      	bcs.n	8020e4c <quorem+0xb0>
 8020e7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020e7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020e82:	b922      	cbnz	r2, 8020e8e <quorem+0xf2>
 8020e84:	3b04      	subs	r3, #4
 8020e86:	429d      	cmp	r5, r3
 8020e88:	461a      	mov	r2, r3
 8020e8a:	d30a      	bcc.n	8020ea2 <quorem+0x106>
 8020e8c:	613c      	str	r4, [r7, #16]
 8020e8e:	4630      	mov	r0, r6
 8020e90:	b003      	add	sp, #12
 8020e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e96:	6812      	ldr	r2, [r2, #0]
 8020e98:	3b04      	subs	r3, #4
 8020e9a:	2a00      	cmp	r2, #0
 8020e9c:	d1cc      	bne.n	8020e38 <quorem+0x9c>
 8020e9e:	3c01      	subs	r4, #1
 8020ea0:	e7c7      	b.n	8020e32 <quorem+0x96>
 8020ea2:	6812      	ldr	r2, [r2, #0]
 8020ea4:	3b04      	subs	r3, #4
 8020ea6:	2a00      	cmp	r2, #0
 8020ea8:	d1f0      	bne.n	8020e8c <quorem+0xf0>
 8020eaa:	3c01      	subs	r4, #1
 8020eac:	e7eb      	b.n	8020e86 <quorem+0xea>
 8020eae:	2000      	movs	r0, #0
 8020eb0:	e7ee      	b.n	8020e90 <quorem+0xf4>
 8020eb2:	0000      	movs	r0, r0
 8020eb4:	0000      	movs	r0, r0
	...

08020eb8 <_dtoa_r>:
 8020eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ebc:	ed2d 8b04 	vpush	{d8-d9}
 8020ec0:	b093      	sub	sp, #76	; 0x4c
 8020ec2:	ec57 6b10 	vmov	r6, r7, d0
 8020ec6:	9106      	str	r1, [sp, #24]
 8020ec8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8020eca:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8020ecc:	9209      	str	r2, [sp, #36]	; 0x24
 8020ece:	ee10 aa10 	vmov	sl, s0
 8020ed2:	4604      	mov	r4, r0
 8020ed4:	930c      	str	r3, [sp, #48]	; 0x30
 8020ed6:	46bb      	mov	fp, r7
 8020ed8:	b141      	cbz	r1, 8020eec <_dtoa_r+0x34>
 8020eda:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8020edc:	604a      	str	r2, [r1, #4]
 8020ede:	2301      	movs	r3, #1
 8020ee0:	4093      	lsls	r3, r2
 8020ee2:	608b      	str	r3, [r1, #8]
 8020ee4:	f001 fc59 	bl	802279a <_Bfree>
 8020ee8:	2300      	movs	r3, #0
 8020eea:	6423      	str	r3, [r4, #64]	; 0x40
 8020eec:	1e3b      	subs	r3, r7, #0
 8020eee:	bfaa      	itet	ge
 8020ef0:	2300      	movge	r3, #0
 8020ef2:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8020ef6:	602b      	strge	r3, [r5, #0]
 8020ef8:	4ba3      	ldr	r3, [pc, #652]	; (8021188 <_dtoa_r+0x2d0>)
 8020efa:	bfbc      	itt	lt
 8020efc:	2201      	movlt	r2, #1
 8020efe:	602a      	strlt	r2, [r5, #0]
 8020f00:	ea33 030b 	bics.w	r3, r3, fp
 8020f04:	d11b      	bne.n	8020f3e <_dtoa_r+0x86>
 8020f06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020f08:	f242 730f 	movw	r3, #9999	; 0x270f
 8020f0c:	6013      	str	r3, [r2, #0]
 8020f0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020f12:	4333      	orrs	r3, r6
 8020f14:	f000 8590 	beq.w	8021a38 <_dtoa_r+0xb80>
 8020f18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020f1a:	b90b      	cbnz	r3, 8020f20 <_dtoa_r+0x68>
 8020f1c:	4b9b      	ldr	r3, [pc, #620]	; (802118c <_dtoa_r+0x2d4>)
 8020f1e:	e022      	b.n	8020f66 <_dtoa_r+0xae>
 8020f20:	4b9a      	ldr	r3, [pc, #616]	; (802118c <_dtoa_r+0x2d4>)
 8020f22:	9301      	str	r3, [sp, #4]
 8020f24:	3303      	adds	r3, #3
 8020f26:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8020f28:	6013      	str	r3, [r2, #0]
 8020f2a:	9801      	ldr	r0, [sp, #4]
 8020f2c:	b013      	add	sp, #76	; 0x4c
 8020f2e:	ecbd 8b04 	vpop	{d8-d9}
 8020f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f36:	4b96      	ldr	r3, [pc, #600]	; (8021190 <_dtoa_r+0x2d8>)
 8020f38:	9301      	str	r3, [sp, #4]
 8020f3a:	3308      	adds	r3, #8
 8020f3c:	e7f3      	b.n	8020f26 <_dtoa_r+0x6e>
 8020f3e:	2200      	movs	r2, #0
 8020f40:	2300      	movs	r3, #0
 8020f42:	4650      	mov	r0, sl
 8020f44:	4659      	mov	r1, fp
 8020f46:	f7df fdcf 	bl	8000ae8 <__aeabi_dcmpeq>
 8020f4a:	ec4b ab19 	vmov	d9, sl, fp
 8020f4e:	4680      	mov	r8, r0
 8020f50:	b158      	cbz	r0, 8020f6a <_dtoa_r+0xb2>
 8020f52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020f54:	2301      	movs	r3, #1
 8020f56:	6013      	str	r3, [r2, #0]
 8020f58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020f5a:	2b00      	cmp	r3, #0
 8020f5c:	f000 8569 	beq.w	8021a32 <_dtoa_r+0xb7a>
 8020f60:	488c      	ldr	r0, [pc, #560]	; (8021194 <_dtoa_r+0x2dc>)
 8020f62:	6018      	str	r0, [r3, #0]
 8020f64:	1e43      	subs	r3, r0, #1
 8020f66:	9301      	str	r3, [sp, #4]
 8020f68:	e7df      	b.n	8020f2a <_dtoa_r+0x72>
 8020f6a:	ec4b ab10 	vmov	d0, sl, fp
 8020f6e:	aa10      	add	r2, sp, #64	; 0x40
 8020f70:	a911      	add	r1, sp, #68	; 0x44
 8020f72:	4620      	mov	r0, r4
 8020f74:	f001 fec6 	bl	8022d04 <__d2b>
 8020f78:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8020f7c:	ee08 0a10 	vmov	s16, r0
 8020f80:	2d00      	cmp	r5, #0
 8020f82:	f000 8082 	beq.w	802108a <_dtoa_r+0x1d2>
 8020f86:	ee19 3a90 	vmov	r3, s19
 8020f8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8020f8e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8020f92:	4656      	mov	r6, sl
 8020f94:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8020f98:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8020f9c:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8020fa0:	4b7d      	ldr	r3, [pc, #500]	; (8021198 <_dtoa_r+0x2e0>)
 8020fa2:	2200      	movs	r2, #0
 8020fa4:	4630      	mov	r0, r6
 8020fa6:	4639      	mov	r1, r7
 8020fa8:	f7df f97e 	bl	80002a8 <__aeabi_dsub>
 8020fac:	a370      	add	r3, pc, #448	; (adr r3, 8021170 <_dtoa_r+0x2b8>)
 8020fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020fb2:	f7df fb31 	bl	8000618 <__aeabi_dmul>
 8020fb6:	a370      	add	r3, pc, #448	; (adr r3, 8021178 <_dtoa_r+0x2c0>)
 8020fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020fbc:	f7df f976 	bl	80002ac <__adddf3>
 8020fc0:	4606      	mov	r6, r0
 8020fc2:	4628      	mov	r0, r5
 8020fc4:	460f      	mov	r7, r1
 8020fc6:	f7df fabd 	bl	8000544 <__aeabi_i2d>
 8020fca:	a36d      	add	r3, pc, #436	; (adr r3, 8021180 <_dtoa_r+0x2c8>)
 8020fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020fd0:	f7df fb22 	bl	8000618 <__aeabi_dmul>
 8020fd4:	4602      	mov	r2, r0
 8020fd6:	460b      	mov	r3, r1
 8020fd8:	4630      	mov	r0, r6
 8020fda:	4639      	mov	r1, r7
 8020fdc:	f7df f966 	bl	80002ac <__adddf3>
 8020fe0:	4606      	mov	r6, r0
 8020fe2:	460f      	mov	r7, r1
 8020fe4:	f7df fdc8 	bl	8000b78 <__aeabi_d2iz>
 8020fe8:	2200      	movs	r2, #0
 8020fea:	9000      	str	r0, [sp, #0]
 8020fec:	2300      	movs	r3, #0
 8020fee:	4630      	mov	r0, r6
 8020ff0:	4639      	mov	r1, r7
 8020ff2:	f7df fd83 	bl	8000afc <__aeabi_dcmplt>
 8020ff6:	b150      	cbz	r0, 802100e <_dtoa_r+0x156>
 8020ff8:	9800      	ldr	r0, [sp, #0]
 8020ffa:	f7df faa3 	bl	8000544 <__aeabi_i2d>
 8020ffe:	4632      	mov	r2, r6
 8021000:	463b      	mov	r3, r7
 8021002:	f7df fd71 	bl	8000ae8 <__aeabi_dcmpeq>
 8021006:	b910      	cbnz	r0, 802100e <_dtoa_r+0x156>
 8021008:	9b00      	ldr	r3, [sp, #0]
 802100a:	3b01      	subs	r3, #1
 802100c:	9300      	str	r3, [sp, #0]
 802100e:	9b00      	ldr	r3, [sp, #0]
 8021010:	2b16      	cmp	r3, #22
 8021012:	d858      	bhi.n	80210c6 <_dtoa_r+0x20e>
 8021014:	9a00      	ldr	r2, [sp, #0]
 8021016:	4b61      	ldr	r3, [pc, #388]	; (802119c <_dtoa_r+0x2e4>)
 8021018:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802101c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021020:	ec51 0b19 	vmov	r0, r1, d9
 8021024:	f7df fd6a 	bl	8000afc <__aeabi_dcmplt>
 8021028:	2800      	cmp	r0, #0
 802102a:	d04e      	beq.n	80210ca <_dtoa_r+0x212>
 802102c:	9b00      	ldr	r3, [sp, #0]
 802102e:	3b01      	subs	r3, #1
 8021030:	9300      	str	r3, [sp, #0]
 8021032:	2300      	movs	r3, #0
 8021034:	930b      	str	r3, [sp, #44]	; 0x2c
 8021036:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021038:	1b5d      	subs	r5, r3, r5
 802103a:	1e6b      	subs	r3, r5, #1
 802103c:	9305      	str	r3, [sp, #20]
 802103e:	bf45      	ittet	mi
 8021040:	f1c5 0301 	rsbmi	r3, r5, #1
 8021044:	9304      	strmi	r3, [sp, #16]
 8021046:	2300      	movpl	r3, #0
 8021048:	2300      	movmi	r3, #0
 802104a:	bf4c      	ite	mi
 802104c:	9305      	strmi	r3, [sp, #20]
 802104e:	9304      	strpl	r3, [sp, #16]
 8021050:	9b00      	ldr	r3, [sp, #0]
 8021052:	2b00      	cmp	r3, #0
 8021054:	db3b      	blt.n	80210ce <_dtoa_r+0x216>
 8021056:	9b05      	ldr	r3, [sp, #20]
 8021058:	9a00      	ldr	r2, [sp, #0]
 802105a:	920a      	str	r2, [sp, #40]	; 0x28
 802105c:	4413      	add	r3, r2
 802105e:	9305      	str	r3, [sp, #20]
 8021060:	2300      	movs	r3, #0
 8021062:	9307      	str	r3, [sp, #28]
 8021064:	9b06      	ldr	r3, [sp, #24]
 8021066:	2b09      	cmp	r3, #9
 8021068:	d869      	bhi.n	802113e <_dtoa_r+0x286>
 802106a:	2b05      	cmp	r3, #5
 802106c:	bfc4      	itt	gt
 802106e:	3b04      	subgt	r3, #4
 8021070:	9306      	strgt	r3, [sp, #24]
 8021072:	9b06      	ldr	r3, [sp, #24]
 8021074:	f1a3 0302 	sub.w	r3, r3, #2
 8021078:	bfcc      	ite	gt
 802107a:	2500      	movgt	r5, #0
 802107c:	2501      	movle	r5, #1
 802107e:	2b03      	cmp	r3, #3
 8021080:	d868      	bhi.n	8021154 <_dtoa_r+0x29c>
 8021082:	e8df f003 	tbb	[pc, r3]
 8021086:	3a2d      	.short	0x3a2d
 8021088:	5a38      	.short	0x5a38
 802108a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 802108e:	441d      	add	r5, r3
 8021090:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8021094:	2b20      	cmp	r3, #32
 8021096:	bfc1      	itttt	gt
 8021098:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 802109c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80210a0:	fa0b f303 	lslgt.w	r3, fp, r3
 80210a4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80210a8:	bfda      	itte	le
 80210aa:	f1c3 0320 	rsble	r3, r3, #32
 80210ae:	fa06 f003 	lslle.w	r0, r6, r3
 80210b2:	4318      	orrgt	r0, r3
 80210b4:	f7df fa36 	bl	8000524 <__aeabi_ui2d>
 80210b8:	2301      	movs	r3, #1
 80210ba:	4606      	mov	r6, r0
 80210bc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80210c0:	3d01      	subs	r5, #1
 80210c2:	930e      	str	r3, [sp, #56]	; 0x38
 80210c4:	e76c      	b.n	8020fa0 <_dtoa_r+0xe8>
 80210c6:	2301      	movs	r3, #1
 80210c8:	e7b4      	b.n	8021034 <_dtoa_r+0x17c>
 80210ca:	900b      	str	r0, [sp, #44]	; 0x2c
 80210cc:	e7b3      	b.n	8021036 <_dtoa_r+0x17e>
 80210ce:	9b04      	ldr	r3, [sp, #16]
 80210d0:	9a00      	ldr	r2, [sp, #0]
 80210d2:	1a9b      	subs	r3, r3, r2
 80210d4:	9304      	str	r3, [sp, #16]
 80210d6:	4253      	negs	r3, r2
 80210d8:	9307      	str	r3, [sp, #28]
 80210da:	2300      	movs	r3, #0
 80210dc:	930a      	str	r3, [sp, #40]	; 0x28
 80210de:	e7c1      	b.n	8021064 <_dtoa_r+0x1ac>
 80210e0:	2300      	movs	r3, #0
 80210e2:	9308      	str	r3, [sp, #32]
 80210e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80210e6:	2b00      	cmp	r3, #0
 80210e8:	dc37      	bgt.n	802115a <_dtoa_r+0x2a2>
 80210ea:	2301      	movs	r3, #1
 80210ec:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80210f0:	461a      	mov	r2, r3
 80210f2:	9209      	str	r2, [sp, #36]	; 0x24
 80210f4:	e00c      	b.n	8021110 <_dtoa_r+0x258>
 80210f6:	2301      	movs	r3, #1
 80210f8:	e7f3      	b.n	80210e2 <_dtoa_r+0x22a>
 80210fa:	2300      	movs	r3, #0
 80210fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80210fe:	9308      	str	r3, [sp, #32]
 8021100:	9b00      	ldr	r3, [sp, #0]
 8021102:	4413      	add	r3, r2
 8021104:	9302      	str	r3, [sp, #8]
 8021106:	3301      	adds	r3, #1
 8021108:	2b01      	cmp	r3, #1
 802110a:	9303      	str	r3, [sp, #12]
 802110c:	bfb8      	it	lt
 802110e:	2301      	movlt	r3, #1
 8021110:	2200      	movs	r2, #0
 8021112:	6462      	str	r2, [r4, #68]	; 0x44
 8021114:	2204      	movs	r2, #4
 8021116:	f102 0014 	add.w	r0, r2, #20
 802111a:	4298      	cmp	r0, r3
 802111c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 802111e:	d920      	bls.n	8021162 <_dtoa_r+0x2aa>
 8021120:	4620      	mov	r0, r4
 8021122:	f001 fb15 	bl	8022750 <_Balloc>
 8021126:	9001      	str	r0, [sp, #4]
 8021128:	2800      	cmp	r0, #0
 802112a:	d13d      	bne.n	80211a8 <_dtoa_r+0x2f0>
 802112c:	4b1c      	ldr	r3, [pc, #112]	; (80211a0 <_dtoa_r+0x2e8>)
 802112e:	4602      	mov	r2, r0
 8021130:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8021134:	481b      	ldr	r0, [pc, #108]	; (80211a4 <_dtoa_r+0x2ec>)
 8021136:	f002 fe67 	bl	8023e08 <__assert_func>
 802113a:	2301      	movs	r3, #1
 802113c:	e7de      	b.n	80210fc <_dtoa_r+0x244>
 802113e:	2501      	movs	r5, #1
 8021140:	2300      	movs	r3, #0
 8021142:	9306      	str	r3, [sp, #24]
 8021144:	9508      	str	r5, [sp, #32]
 8021146:	f04f 33ff 	mov.w	r3, #4294967295
 802114a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 802114e:	2200      	movs	r2, #0
 8021150:	2312      	movs	r3, #18
 8021152:	e7ce      	b.n	80210f2 <_dtoa_r+0x23a>
 8021154:	2301      	movs	r3, #1
 8021156:	9308      	str	r3, [sp, #32]
 8021158:	e7f5      	b.n	8021146 <_dtoa_r+0x28e>
 802115a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802115c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8021160:	e7d6      	b.n	8021110 <_dtoa_r+0x258>
 8021162:	3101      	adds	r1, #1
 8021164:	6461      	str	r1, [r4, #68]	; 0x44
 8021166:	0052      	lsls	r2, r2, #1
 8021168:	e7d5      	b.n	8021116 <_dtoa_r+0x25e>
 802116a:	bf00      	nop
 802116c:	f3af 8000 	nop.w
 8021170:	636f4361 	.word	0x636f4361
 8021174:	3fd287a7 	.word	0x3fd287a7
 8021178:	8b60c8b3 	.word	0x8b60c8b3
 802117c:	3fc68a28 	.word	0x3fc68a28
 8021180:	509f79fb 	.word	0x509f79fb
 8021184:	3fd34413 	.word	0x3fd34413
 8021188:	7ff00000 	.word	0x7ff00000
 802118c:	0806f7dc 	.word	0x0806f7dc
 8021190:	0806f7e0 	.word	0x0806f7e0
 8021194:	0806f79b 	.word	0x0806f79b
 8021198:	3ff80000 	.word	0x3ff80000
 802119c:	0806f8e0 	.word	0x0806f8e0
 80211a0:	0806f7e9 	.word	0x0806f7e9
 80211a4:	0806f7fa 	.word	0x0806f7fa
 80211a8:	9b01      	ldr	r3, [sp, #4]
 80211aa:	6423      	str	r3, [r4, #64]	; 0x40
 80211ac:	9b03      	ldr	r3, [sp, #12]
 80211ae:	2b0e      	cmp	r3, #14
 80211b0:	f200 809d 	bhi.w	80212ee <_dtoa_r+0x436>
 80211b4:	2d00      	cmp	r5, #0
 80211b6:	f000 809a 	beq.w	80212ee <_dtoa_r+0x436>
 80211ba:	9b00      	ldr	r3, [sp, #0]
 80211bc:	2b00      	cmp	r3, #0
 80211be:	dd32      	ble.n	8021226 <_dtoa_r+0x36e>
 80211c0:	4ab7      	ldr	r2, [pc, #732]	; (80214a0 <_dtoa_r+0x5e8>)
 80211c2:	f003 030f 	and.w	r3, r3, #15
 80211c6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80211ca:	e9d3 8900 	ldrd	r8, r9, [r3]
 80211ce:	9b00      	ldr	r3, [sp, #0]
 80211d0:	05d8      	lsls	r0, r3, #23
 80211d2:	ea4f 1723 	mov.w	r7, r3, asr #4
 80211d6:	d516      	bpl.n	8021206 <_dtoa_r+0x34e>
 80211d8:	4bb2      	ldr	r3, [pc, #712]	; (80214a4 <_dtoa_r+0x5ec>)
 80211da:	ec51 0b19 	vmov	r0, r1, d9
 80211de:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80211e2:	f7df fb43 	bl	800086c <__aeabi_ddiv>
 80211e6:	f007 070f 	and.w	r7, r7, #15
 80211ea:	4682      	mov	sl, r0
 80211ec:	468b      	mov	fp, r1
 80211ee:	2503      	movs	r5, #3
 80211f0:	4eac      	ldr	r6, [pc, #688]	; (80214a4 <_dtoa_r+0x5ec>)
 80211f2:	b957      	cbnz	r7, 802120a <_dtoa_r+0x352>
 80211f4:	4642      	mov	r2, r8
 80211f6:	464b      	mov	r3, r9
 80211f8:	4650      	mov	r0, sl
 80211fa:	4659      	mov	r1, fp
 80211fc:	f7df fb36 	bl	800086c <__aeabi_ddiv>
 8021200:	4682      	mov	sl, r0
 8021202:	468b      	mov	fp, r1
 8021204:	e028      	b.n	8021258 <_dtoa_r+0x3a0>
 8021206:	2502      	movs	r5, #2
 8021208:	e7f2      	b.n	80211f0 <_dtoa_r+0x338>
 802120a:	07f9      	lsls	r1, r7, #31
 802120c:	d508      	bpl.n	8021220 <_dtoa_r+0x368>
 802120e:	4640      	mov	r0, r8
 8021210:	4649      	mov	r1, r9
 8021212:	e9d6 2300 	ldrd	r2, r3, [r6]
 8021216:	f7df f9ff 	bl	8000618 <__aeabi_dmul>
 802121a:	3501      	adds	r5, #1
 802121c:	4680      	mov	r8, r0
 802121e:	4689      	mov	r9, r1
 8021220:	107f      	asrs	r7, r7, #1
 8021222:	3608      	adds	r6, #8
 8021224:	e7e5      	b.n	80211f2 <_dtoa_r+0x33a>
 8021226:	f000 809b 	beq.w	8021360 <_dtoa_r+0x4a8>
 802122a:	9b00      	ldr	r3, [sp, #0]
 802122c:	4f9d      	ldr	r7, [pc, #628]	; (80214a4 <_dtoa_r+0x5ec>)
 802122e:	425e      	negs	r6, r3
 8021230:	4b9b      	ldr	r3, [pc, #620]	; (80214a0 <_dtoa_r+0x5e8>)
 8021232:	f006 020f 	and.w	r2, r6, #15
 8021236:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802123a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802123e:	ec51 0b19 	vmov	r0, r1, d9
 8021242:	f7df f9e9 	bl	8000618 <__aeabi_dmul>
 8021246:	1136      	asrs	r6, r6, #4
 8021248:	4682      	mov	sl, r0
 802124a:	468b      	mov	fp, r1
 802124c:	2300      	movs	r3, #0
 802124e:	2502      	movs	r5, #2
 8021250:	2e00      	cmp	r6, #0
 8021252:	d17a      	bne.n	802134a <_dtoa_r+0x492>
 8021254:	2b00      	cmp	r3, #0
 8021256:	d1d3      	bne.n	8021200 <_dtoa_r+0x348>
 8021258:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802125a:	2b00      	cmp	r3, #0
 802125c:	f000 8082 	beq.w	8021364 <_dtoa_r+0x4ac>
 8021260:	4b91      	ldr	r3, [pc, #580]	; (80214a8 <_dtoa_r+0x5f0>)
 8021262:	2200      	movs	r2, #0
 8021264:	4650      	mov	r0, sl
 8021266:	4659      	mov	r1, fp
 8021268:	f7df fc48 	bl	8000afc <__aeabi_dcmplt>
 802126c:	2800      	cmp	r0, #0
 802126e:	d079      	beq.n	8021364 <_dtoa_r+0x4ac>
 8021270:	9b03      	ldr	r3, [sp, #12]
 8021272:	2b00      	cmp	r3, #0
 8021274:	d076      	beq.n	8021364 <_dtoa_r+0x4ac>
 8021276:	9b02      	ldr	r3, [sp, #8]
 8021278:	2b00      	cmp	r3, #0
 802127a:	dd36      	ble.n	80212ea <_dtoa_r+0x432>
 802127c:	9b00      	ldr	r3, [sp, #0]
 802127e:	4650      	mov	r0, sl
 8021280:	4659      	mov	r1, fp
 8021282:	1e5f      	subs	r7, r3, #1
 8021284:	2200      	movs	r2, #0
 8021286:	4b89      	ldr	r3, [pc, #548]	; (80214ac <_dtoa_r+0x5f4>)
 8021288:	f7df f9c6 	bl	8000618 <__aeabi_dmul>
 802128c:	9e02      	ldr	r6, [sp, #8]
 802128e:	4682      	mov	sl, r0
 8021290:	468b      	mov	fp, r1
 8021292:	3501      	adds	r5, #1
 8021294:	4628      	mov	r0, r5
 8021296:	f7df f955 	bl	8000544 <__aeabi_i2d>
 802129a:	4652      	mov	r2, sl
 802129c:	465b      	mov	r3, fp
 802129e:	f7df f9bb 	bl	8000618 <__aeabi_dmul>
 80212a2:	4b83      	ldr	r3, [pc, #524]	; (80214b0 <_dtoa_r+0x5f8>)
 80212a4:	2200      	movs	r2, #0
 80212a6:	f7df f801 	bl	80002ac <__adddf3>
 80212aa:	46d0      	mov	r8, sl
 80212ac:	46d9      	mov	r9, fp
 80212ae:	4682      	mov	sl, r0
 80212b0:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80212b4:	2e00      	cmp	r6, #0
 80212b6:	d158      	bne.n	802136a <_dtoa_r+0x4b2>
 80212b8:	4b7e      	ldr	r3, [pc, #504]	; (80214b4 <_dtoa_r+0x5fc>)
 80212ba:	2200      	movs	r2, #0
 80212bc:	4640      	mov	r0, r8
 80212be:	4649      	mov	r1, r9
 80212c0:	f7de fff2 	bl	80002a8 <__aeabi_dsub>
 80212c4:	4652      	mov	r2, sl
 80212c6:	465b      	mov	r3, fp
 80212c8:	4680      	mov	r8, r0
 80212ca:	4689      	mov	r9, r1
 80212cc:	f7df fc34 	bl	8000b38 <__aeabi_dcmpgt>
 80212d0:	2800      	cmp	r0, #0
 80212d2:	f040 8296 	bne.w	8021802 <_dtoa_r+0x94a>
 80212d6:	4652      	mov	r2, sl
 80212d8:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80212dc:	4640      	mov	r0, r8
 80212de:	4649      	mov	r1, r9
 80212e0:	f7df fc0c 	bl	8000afc <__aeabi_dcmplt>
 80212e4:	2800      	cmp	r0, #0
 80212e6:	f040 828a 	bne.w	80217fe <_dtoa_r+0x946>
 80212ea:	ec5b ab19 	vmov	sl, fp, d9
 80212ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80212f0:	2b00      	cmp	r3, #0
 80212f2:	f2c0 8149 	blt.w	8021588 <_dtoa_r+0x6d0>
 80212f6:	9a00      	ldr	r2, [sp, #0]
 80212f8:	2a0e      	cmp	r2, #14
 80212fa:	f300 8145 	bgt.w	8021588 <_dtoa_r+0x6d0>
 80212fe:	4b68      	ldr	r3, [pc, #416]	; (80214a0 <_dtoa_r+0x5e8>)
 8021300:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8021304:	e9d3 8900 	ldrd	r8, r9, [r3]
 8021308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802130a:	2b00      	cmp	r3, #0
 802130c:	f280 80d6 	bge.w	80214bc <_dtoa_r+0x604>
 8021310:	9b03      	ldr	r3, [sp, #12]
 8021312:	2b00      	cmp	r3, #0
 8021314:	f300 80d2 	bgt.w	80214bc <_dtoa_r+0x604>
 8021318:	f040 8270 	bne.w	80217fc <_dtoa_r+0x944>
 802131c:	4b65      	ldr	r3, [pc, #404]	; (80214b4 <_dtoa_r+0x5fc>)
 802131e:	2200      	movs	r2, #0
 8021320:	4640      	mov	r0, r8
 8021322:	4649      	mov	r1, r9
 8021324:	f7df f978 	bl	8000618 <__aeabi_dmul>
 8021328:	4652      	mov	r2, sl
 802132a:	465b      	mov	r3, fp
 802132c:	f7df fbfa 	bl	8000b24 <__aeabi_dcmpge>
 8021330:	9e03      	ldr	r6, [sp, #12]
 8021332:	4637      	mov	r7, r6
 8021334:	2800      	cmp	r0, #0
 8021336:	f040 8246 	bne.w	80217c6 <_dtoa_r+0x90e>
 802133a:	9d01      	ldr	r5, [sp, #4]
 802133c:	2331      	movs	r3, #49	; 0x31
 802133e:	f805 3b01 	strb.w	r3, [r5], #1
 8021342:	9b00      	ldr	r3, [sp, #0]
 8021344:	3301      	adds	r3, #1
 8021346:	9300      	str	r3, [sp, #0]
 8021348:	e241      	b.n	80217ce <_dtoa_r+0x916>
 802134a:	07f2      	lsls	r2, r6, #31
 802134c:	d505      	bpl.n	802135a <_dtoa_r+0x4a2>
 802134e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021352:	f7df f961 	bl	8000618 <__aeabi_dmul>
 8021356:	3501      	adds	r5, #1
 8021358:	2301      	movs	r3, #1
 802135a:	1076      	asrs	r6, r6, #1
 802135c:	3708      	adds	r7, #8
 802135e:	e777      	b.n	8021250 <_dtoa_r+0x398>
 8021360:	2502      	movs	r5, #2
 8021362:	e779      	b.n	8021258 <_dtoa_r+0x3a0>
 8021364:	9f00      	ldr	r7, [sp, #0]
 8021366:	9e03      	ldr	r6, [sp, #12]
 8021368:	e794      	b.n	8021294 <_dtoa_r+0x3dc>
 802136a:	9901      	ldr	r1, [sp, #4]
 802136c:	4b4c      	ldr	r3, [pc, #304]	; (80214a0 <_dtoa_r+0x5e8>)
 802136e:	4431      	add	r1, r6
 8021370:	910d      	str	r1, [sp, #52]	; 0x34
 8021372:	9908      	ldr	r1, [sp, #32]
 8021374:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8021378:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802137c:	2900      	cmp	r1, #0
 802137e:	d043      	beq.n	8021408 <_dtoa_r+0x550>
 8021380:	494d      	ldr	r1, [pc, #308]	; (80214b8 <_dtoa_r+0x600>)
 8021382:	2000      	movs	r0, #0
 8021384:	f7df fa72 	bl	800086c <__aeabi_ddiv>
 8021388:	4652      	mov	r2, sl
 802138a:	465b      	mov	r3, fp
 802138c:	f7de ff8c 	bl	80002a8 <__aeabi_dsub>
 8021390:	9d01      	ldr	r5, [sp, #4]
 8021392:	4682      	mov	sl, r0
 8021394:	468b      	mov	fp, r1
 8021396:	4649      	mov	r1, r9
 8021398:	4640      	mov	r0, r8
 802139a:	f7df fbed 	bl	8000b78 <__aeabi_d2iz>
 802139e:	4606      	mov	r6, r0
 80213a0:	f7df f8d0 	bl	8000544 <__aeabi_i2d>
 80213a4:	4602      	mov	r2, r0
 80213a6:	460b      	mov	r3, r1
 80213a8:	4640      	mov	r0, r8
 80213aa:	4649      	mov	r1, r9
 80213ac:	f7de ff7c 	bl	80002a8 <__aeabi_dsub>
 80213b0:	3630      	adds	r6, #48	; 0x30
 80213b2:	f805 6b01 	strb.w	r6, [r5], #1
 80213b6:	4652      	mov	r2, sl
 80213b8:	465b      	mov	r3, fp
 80213ba:	4680      	mov	r8, r0
 80213bc:	4689      	mov	r9, r1
 80213be:	f7df fb9d 	bl	8000afc <__aeabi_dcmplt>
 80213c2:	2800      	cmp	r0, #0
 80213c4:	d163      	bne.n	802148e <_dtoa_r+0x5d6>
 80213c6:	4642      	mov	r2, r8
 80213c8:	464b      	mov	r3, r9
 80213ca:	4937      	ldr	r1, [pc, #220]	; (80214a8 <_dtoa_r+0x5f0>)
 80213cc:	2000      	movs	r0, #0
 80213ce:	f7de ff6b 	bl	80002a8 <__aeabi_dsub>
 80213d2:	4652      	mov	r2, sl
 80213d4:	465b      	mov	r3, fp
 80213d6:	f7df fb91 	bl	8000afc <__aeabi_dcmplt>
 80213da:	2800      	cmp	r0, #0
 80213dc:	f040 80b6 	bne.w	802154c <_dtoa_r+0x694>
 80213e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80213e2:	429d      	cmp	r5, r3
 80213e4:	d081      	beq.n	80212ea <_dtoa_r+0x432>
 80213e6:	4b31      	ldr	r3, [pc, #196]	; (80214ac <_dtoa_r+0x5f4>)
 80213e8:	2200      	movs	r2, #0
 80213ea:	4650      	mov	r0, sl
 80213ec:	4659      	mov	r1, fp
 80213ee:	f7df f913 	bl	8000618 <__aeabi_dmul>
 80213f2:	4b2e      	ldr	r3, [pc, #184]	; (80214ac <_dtoa_r+0x5f4>)
 80213f4:	4682      	mov	sl, r0
 80213f6:	468b      	mov	fp, r1
 80213f8:	4640      	mov	r0, r8
 80213fa:	4649      	mov	r1, r9
 80213fc:	2200      	movs	r2, #0
 80213fe:	f7df f90b 	bl	8000618 <__aeabi_dmul>
 8021402:	4680      	mov	r8, r0
 8021404:	4689      	mov	r9, r1
 8021406:	e7c6      	b.n	8021396 <_dtoa_r+0x4de>
 8021408:	4650      	mov	r0, sl
 802140a:	4659      	mov	r1, fp
 802140c:	f7df f904 	bl	8000618 <__aeabi_dmul>
 8021410:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021412:	9d01      	ldr	r5, [sp, #4]
 8021414:	930f      	str	r3, [sp, #60]	; 0x3c
 8021416:	4682      	mov	sl, r0
 8021418:	468b      	mov	fp, r1
 802141a:	4649      	mov	r1, r9
 802141c:	4640      	mov	r0, r8
 802141e:	f7df fbab 	bl	8000b78 <__aeabi_d2iz>
 8021422:	4606      	mov	r6, r0
 8021424:	f7df f88e 	bl	8000544 <__aeabi_i2d>
 8021428:	3630      	adds	r6, #48	; 0x30
 802142a:	4602      	mov	r2, r0
 802142c:	460b      	mov	r3, r1
 802142e:	4640      	mov	r0, r8
 8021430:	4649      	mov	r1, r9
 8021432:	f7de ff39 	bl	80002a8 <__aeabi_dsub>
 8021436:	f805 6b01 	strb.w	r6, [r5], #1
 802143a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802143c:	429d      	cmp	r5, r3
 802143e:	4680      	mov	r8, r0
 8021440:	4689      	mov	r9, r1
 8021442:	f04f 0200 	mov.w	r2, #0
 8021446:	d124      	bne.n	8021492 <_dtoa_r+0x5da>
 8021448:	4b1b      	ldr	r3, [pc, #108]	; (80214b8 <_dtoa_r+0x600>)
 802144a:	4650      	mov	r0, sl
 802144c:	4659      	mov	r1, fp
 802144e:	f7de ff2d 	bl	80002ac <__adddf3>
 8021452:	4602      	mov	r2, r0
 8021454:	460b      	mov	r3, r1
 8021456:	4640      	mov	r0, r8
 8021458:	4649      	mov	r1, r9
 802145a:	f7df fb6d 	bl	8000b38 <__aeabi_dcmpgt>
 802145e:	2800      	cmp	r0, #0
 8021460:	d174      	bne.n	802154c <_dtoa_r+0x694>
 8021462:	4652      	mov	r2, sl
 8021464:	465b      	mov	r3, fp
 8021466:	4914      	ldr	r1, [pc, #80]	; (80214b8 <_dtoa_r+0x600>)
 8021468:	2000      	movs	r0, #0
 802146a:	f7de ff1d 	bl	80002a8 <__aeabi_dsub>
 802146e:	4602      	mov	r2, r0
 8021470:	460b      	mov	r3, r1
 8021472:	4640      	mov	r0, r8
 8021474:	4649      	mov	r1, r9
 8021476:	f7df fb41 	bl	8000afc <__aeabi_dcmplt>
 802147a:	2800      	cmp	r0, #0
 802147c:	f43f af35 	beq.w	80212ea <_dtoa_r+0x432>
 8021480:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8021482:	1e6b      	subs	r3, r5, #1
 8021484:	930f      	str	r3, [sp, #60]	; 0x3c
 8021486:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802148a:	2b30      	cmp	r3, #48	; 0x30
 802148c:	d0f8      	beq.n	8021480 <_dtoa_r+0x5c8>
 802148e:	9700      	str	r7, [sp, #0]
 8021490:	e04a      	b.n	8021528 <_dtoa_r+0x670>
 8021492:	4b06      	ldr	r3, [pc, #24]	; (80214ac <_dtoa_r+0x5f4>)
 8021494:	f7df f8c0 	bl	8000618 <__aeabi_dmul>
 8021498:	4680      	mov	r8, r0
 802149a:	4689      	mov	r9, r1
 802149c:	e7bd      	b.n	802141a <_dtoa_r+0x562>
 802149e:	bf00      	nop
 80214a0:	0806f8e0 	.word	0x0806f8e0
 80214a4:	0806f8b8 	.word	0x0806f8b8
 80214a8:	3ff00000 	.word	0x3ff00000
 80214ac:	40240000 	.word	0x40240000
 80214b0:	401c0000 	.word	0x401c0000
 80214b4:	40140000 	.word	0x40140000
 80214b8:	3fe00000 	.word	0x3fe00000
 80214bc:	9d01      	ldr	r5, [sp, #4]
 80214be:	4656      	mov	r6, sl
 80214c0:	465f      	mov	r7, fp
 80214c2:	4642      	mov	r2, r8
 80214c4:	464b      	mov	r3, r9
 80214c6:	4630      	mov	r0, r6
 80214c8:	4639      	mov	r1, r7
 80214ca:	f7df f9cf 	bl	800086c <__aeabi_ddiv>
 80214ce:	f7df fb53 	bl	8000b78 <__aeabi_d2iz>
 80214d2:	4682      	mov	sl, r0
 80214d4:	f7df f836 	bl	8000544 <__aeabi_i2d>
 80214d8:	4642      	mov	r2, r8
 80214da:	464b      	mov	r3, r9
 80214dc:	f7df f89c 	bl	8000618 <__aeabi_dmul>
 80214e0:	4602      	mov	r2, r0
 80214e2:	460b      	mov	r3, r1
 80214e4:	4630      	mov	r0, r6
 80214e6:	4639      	mov	r1, r7
 80214e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80214ec:	f7de fedc 	bl	80002a8 <__aeabi_dsub>
 80214f0:	f805 6b01 	strb.w	r6, [r5], #1
 80214f4:	9e01      	ldr	r6, [sp, #4]
 80214f6:	9f03      	ldr	r7, [sp, #12]
 80214f8:	1bae      	subs	r6, r5, r6
 80214fa:	42b7      	cmp	r7, r6
 80214fc:	4602      	mov	r2, r0
 80214fe:	460b      	mov	r3, r1
 8021500:	d135      	bne.n	802156e <_dtoa_r+0x6b6>
 8021502:	f7de fed3 	bl	80002ac <__adddf3>
 8021506:	4642      	mov	r2, r8
 8021508:	464b      	mov	r3, r9
 802150a:	4606      	mov	r6, r0
 802150c:	460f      	mov	r7, r1
 802150e:	f7df fb13 	bl	8000b38 <__aeabi_dcmpgt>
 8021512:	b9d0      	cbnz	r0, 802154a <_dtoa_r+0x692>
 8021514:	4642      	mov	r2, r8
 8021516:	464b      	mov	r3, r9
 8021518:	4630      	mov	r0, r6
 802151a:	4639      	mov	r1, r7
 802151c:	f7df fae4 	bl	8000ae8 <__aeabi_dcmpeq>
 8021520:	b110      	cbz	r0, 8021528 <_dtoa_r+0x670>
 8021522:	f01a 0f01 	tst.w	sl, #1
 8021526:	d110      	bne.n	802154a <_dtoa_r+0x692>
 8021528:	4620      	mov	r0, r4
 802152a:	ee18 1a10 	vmov	r1, s16
 802152e:	f001 f934 	bl	802279a <_Bfree>
 8021532:	2300      	movs	r3, #0
 8021534:	9800      	ldr	r0, [sp, #0]
 8021536:	702b      	strb	r3, [r5, #0]
 8021538:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802153a:	3001      	adds	r0, #1
 802153c:	6018      	str	r0, [r3, #0]
 802153e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021540:	2b00      	cmp	r3, #0
 8021542:	f43f acf2 	beq.w	8020f2a <_dtoa_r+0x72>
 8021546:	601d      	str	r5, [r3, #0]
 8021548:	e4ef      	b.n	8020f2a <_dtoa_r+0x72>
 802154a:	9f00      	ldr	r7, [sp, #0]
 802154c:	462b      	mov	r3, r5
 802154e:	461d      	mov	r5, r3
 8021550:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8021554:	2a39      	cmp	r2, #57	; 0x39
 8021556:	d106      	bne.n	8021566 <_dtoa_r+0x6ae>
 8021558:	9a01      	ldr	r2, [sp, #4]
 802155a:	429a      	cmp	r2, r3
 802155c:	d1f7      	bne.n	802154e <_dtoa_r+0x696>
 802155e:	9901      	ldr	r1, [sp, #4]
 8021560:	2230      	movs	r2, #48	; 0x30
 8021562:	3701      	adds	r7, #1
 8021564:	700a      	strb	r2, [r1, #0]
 8021566:	781a      	ldrb	r2, [r3, #0]
 8021568:	3201      	adds	r2, #1
 802156a:	701a      	strb	r2, [r3, #0]
 802156c:	e78f      	b.n	802148e <_dtoa_r+0x5d6>
 802156e:	4ba6      	ldr	r3, [pc, #664]	; (8021808 <_dtoa_r+0x950>)
 8021570:	2200      	movs	r2, #0
 8021572:	f7df f851 	bl	8000618 <__aeabi_dmul>
 8021576:	2200      	movs	r2, #0
 8021578:	2300      	movs	r3, #0
 802157a:	4606      	mov	r6, r0
 802157c:	460f      	mov	r7, r1
 802157e:	f7df fab3 	bl	8000ae8 <__aeabi_dcmpeq>
 8021582:	2800      	cmp	r0, #0
 8021584:	d09d      	beq.n	80214c2 <_dtoa_r+0x60a>
 8021586:	e7cf      	b.n	8021528 <_dtoa_r+0x670>
 8021588:	9a08      	ldr	r2, [sp, #32]
 802158a:	2a00      	cmp	r2, #0
 802158c:	f000 80d7 	beq.w	802173e <_dtoa_r+0x886>
 8021590:	9a06      	ldr	r2, [sp, #24]
 8021592:	2a01      	cmp	r2, #1
 8021594:	f300 80ba 	bgt.w	802170c <_dtoa_r+0x854>
 8021598:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802159a:	2a00      	cmp	r2, #0
 802159c:	f000 80b2 	beq.w	8021704 <_dtoa_r+0x84c>
 80215a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80215a4:	9e07      	ldr	r6, [sp, #28]
 80215a6:	9d04      	ldr	r5, [sp, #16]
 80215a8:	9a04      	ldr	r2, [sp, #16]
 80215aa:	441a      	add	r2, r3
 80215ac:	9204      	str	r2, [sp, #16]
 80215ae:	9a05      	ldr	r2, [sp, #20]
 80215b0:	2101      	movs	r1, #1
 80215b2:	441a      	add	r2, r3
 80215b4:	4620      	mov	r0, r4
 80215b6:	9205      	str	r2, [sp, #20]
 80215b8:	f001 f98e 	bl	80228d8 <__i2b>
 80215bc:	4607      	mov	r7, r0
 80215be:	2d00      	cmp	r5, #0
 80215c0:	dd0c      	ble.n	80215dc <_dtoa_r+0x724>
 80215c2:	9b05      	ldr	r3, [sp, #20]
 80215c4:	2b00      	cmp	r3, #0
 80215c6:	dd09      	ble.n	80215dc <_dtoa_r+0x724>
 80215c8:	42ab      	cmp	r3, r5
 80215ca:	9a04      	ldr	r2, [sp, #16]
 80215cc:	bfa8      	it	ge
 80215ce:	462b      	movge	r3, r5
 80215d0:	1ad2      	subs	r2, r2, r3
 80215d2:	9204      	str	r2, [sp, #16]
 80215d4:	9a05      	ldr	r2, [sp, #20]
 80215d6:	1aed      	subs	r5, r5, r3
 80215d8:	1ad3      	subs	r3, r2, r3
 80215da:	9305      	str	r3, [sp, #20]
 80215dc:	9b07      	ldr	r3, [sp, #28]
 80215de:	b31b      	cbz	r3, 8021628 <_dtoa_r+0x770>
 80215e0:	9b08      	ldr	r3, [sp, #32]
 80215e2:	2b00      	cmp	r3, #0
 80215e4:	f000 80af 	beq.w	8021746 <_dtoa_r+0x88e>
 80215e8:	2e00      	cmp	r6, #0
 80215ea:	dd13      	ble.n	8021614 <_dtoa_r+0x75c>
 80215ec:	4639      	mov	r1, r7
 80215ee:	4632      	mov	r2, r6
 80215f0:	4620      	mov	r0, r4
 80215f2:	f001 fa31 	bl	8022a58 <__pow5mult>
 80215f6:	ee18 2a10 	vmov	r2, s16
 80215fa:	4601      	mov	r1, r0
 80215fc:	4607      	mov	r7, r0
 80215fe:	4620      	mov	r0, r4
 8021600:	f001 f980 	bl	8022904 <__multiply>
 8021604:	ee18 1a10 	vmov	r1, s16
 8021608:	4680      	mov	r8, r0
 802160a:	4620      	mov	r0, r4
 802160c:	f001 f8c5 	bl	802279a <_Bfree>
 8021610:	ee08 8a10 	vmov	s16, r8
 8021614:	9b07      	ldr	r3, [sp, #28]
 8021616:	1b9a      	subs	r2, r3, r6
 8021618:	d006      	beq.n	8021628 <_dtoa_r+0x770>
 802161a:	ee18 1a10 	vmov	r1, s16
 802161e:	4620      	mov	r0, r4
 8021620:	f001 fa1a 	bl	8022a58 <__pow5mult>
 8021624:	ee08 0a10 	vmov	s16, r0
 8021628:	2101      	movs	r1, #1
 802162a:	4620      	mov	r0, r4
 802162c:	f001 f954 	bl	80228d8 <__i2b>
 8021630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021632:	2b00      	cmp	r3, #0
 8021634:	4606      	mov	r6, r0
 8021636:	f340 8088 	ble.w	802174a <_dtoa_r+0x892>
 802163a:	461a      	mov	r2, r3
 802163c:	4601      	mov	r1, r0
 802163e:	4620      	mov	r0, r4
 8021640:	f001 fa0a 	bl	8022a58 <__pow5mult>
 8021644:	9b06      	ldr	r3, [sp, #24]
 8021646:	2b01      	cmp	r3, #1
 8021648:	4606      	mov	r6, r0
 802164a:	f340 8081 	ble.w	8021750 <_dtoa_r+0x898>
 802164e:	f04f 0800 	mov.w	r8, #0
 8021652:	6933      	ldr	r3, [r6, #16]
 8021654:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8021658:	6918      	ldr	r0, [r3, #16]
 802165a:	f001 f8ed 	bl	8022838 <__hi0bits>
 802165e:	f1c0 0020 	rsb	r0, r0, #32
 8021662:	9b05      	ldr	r3, [sp, #20]
 8021664:	4418      	add	r0, r3
 8021666:	f010 001f 	ands.w	r0, r0, #31
 802166a:	f000 8092 	beq.w	8021792 <_dtoa_r+0x8da>
 802166e:	f1c0 0320 	rsb	r3, r0, #32
 8021672:	2b04      	cmp	r3, #4
 8021674:	f340 808a 	ble.w	802178c <_dtoa_r+0x8d4>
 8021678:	f1c0 001c 	rsb	r0, r0, #28
 802167c:	9b04      	ldr	r3, [sp, #16]
 802167e:	4403      	add	r3, r0
 8021680:	9304      	str	r3, [sp, #16]
 8021682:	9b05      	ldr	r3, [sp, #20]
 8021684:	4403      	add	r3, r0
 8021686:	4405      	add	r5, r0
 8021688:	9305      	str	r3, [sp, #20]
 802168a:	9b04      	ldr	r3, [sp, #16]
 802168c:	2b00      	cmp	r3, #0
 802168e:	dd07      	ble.n	80216a0 <_dtoa_r+0x7e8>
 8021690:	ee18 1a10 	vmov	r1, s16
 8021694:	461a      	mov	r2, r3
 8021696:	4620      	mov	r0, r4
 8021698:	f001 fa1e 	bl	8022ad8 <__lshift>
 802169c:	ee08 0a10 	vmov	s16, r0
 80216a0:	9b05      	ldr	r3, [sp, #20]
 80216a2:	2b00      	cmp	r3, #0
 80216a4:	dd05      	ble.n	80216b2 <_dtoa_r+0x7fa>
 80216a6:	4631      	mov	r1, r6
 80216a8:	461a      	mov	r2, r3
 80216aa:	4620      	mov	r0, r4
 80216ac:	f001 fa14 	bl	8022ad8 <__lshift>
 80216b0:	4606      	mov	r6, r0
 80216b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80216b4:	2b00      	cmp	r3, #0
 80216b6:	d06e      	beq.n	8021796 <_dtoa_r+0x8de>
 80216b8:	ee18 0a10 	vmov	r0, s16
 80216bc:	4631      	mov	r1, r6
 80216be:	f001 fa7b 	bl	8022bb8 <__mcmp>
 80216c2:	2800      	cmp	r0, #0
 80216c4:	da67      	bge.n	8021796 <_dtoa_r+0x8de>
 80216c6:	9b00      	ldr	r3, [sp, #0]
 80216c8:	3b01      	subs	r3, #1
 80216ca:	ee18 1a10 	vmov	r1, s16
 80216ce:	9300      	str	r3, [sp, #0]
 80216d0:	220a      	movs	r2, #10
 80216d2:	2300      	movs	r3, #0
 80216d4:	4620      	mov	r0, r4
 80216d6:	f001 f869 	bl	80227ac <__multadd>
 80216da:	9b08      	ldr	r3, [sp, #32]
 80216dc:	ee08 0a10 	vmov	s16, r0
 80216e0:	2b00      	cmp	r3, #0
 80216e2:	f000 81b0 	beq.w	8021a46 <_dtoa_r+0xb8e>
 80216e6:	2300      	movs	r3, #0
 80216e8:	4639      	mov	r1, r7
 80216ea:	220a      	movs	r2, #10
 80216ec:	4620      	mov	r0, r4
 80216ee:	f001 f85d 	bl	80227ac <__multadd>
 80216f2:	9b02      	ldr	r3, [sp, #8]
 80216f4:	2b00      	cmp	r3, #0
 80216f6:	4607      	mov	r7, r0
 80216f8:	f300 808e 	bgt.w	8021818 <_dtoa_r+0x960>
 80216fc:	9b06      	ldr	r3, [sp, #24]
 80216fe:	2b02      	cmp	r3, #2
 8021700:	dc51      	bgt.n	80217a6 <_dtoa_r+0x8ee>
 8021702:	e089      	b.n	8021818 <_dtoa_r+0x960>
 8021704:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021706:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 802170a:	e74b      	b.n	80215a4 <_dtoa_r+0x6ec>
 802170c:	9b03      	ldr	r3, [sp, #12]
 802170e:	1e5e      	subs	r6, r3, #1
 8021710:	9b07      	ldr	r3, [sp, #28]
 8021712:	42b3      	cmp	r3, r6
 8021714:	bfbf      	itttt	lt
 8021716:	9b07      	ldrlt	r3, [sp, #28]
 8021718:	9607      	strlt	r6, [sp, #28]
 802171a:	1af2      	sublt	r2, r6, r3
 802171c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 802171e:	bfb6      	itet	lt
 8021720:	189b      	addlt	r3, r3, r2
 8021722:	1b9e      	subge	r6, r3, r6
 8021724:	930a      	strlt	r3, [sp, #40]	; 0x28
 8021726:	9b03      	ldr	r3, [sp, #12]
 8021728:	bfb8      	it	lt
 802172a:	2600      	movlt	r6, #0
 802172c:	2b00      	cmp	r3, #0
 802172e:	bfb7      	itett	lt
 8021730:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8021734:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8021738:	1a9d      	sublt	r5, r3, r2
 802173a:	2300      	movlt	r3, #0
 802173c:	e734      	b.n	80215a8 <_dtoa_r+0x6f0>
 802173e:	9e07      	ldr	r6, [sp, #28]
 8021740:	9d04      	ldr	r5, [sp, #16]
 8021742:	9f08      	ldr	r7, [sp, #32]
 8021744:	e73b      	b.n	80215be <_dtoa_r+0x706>
 8021746:	9a07      	ldr	r2, [sp, #28]
 8021748:	e767      	b.n	802161a <_dtoa_r+0x762>
 802174a:	9b06      	ldr	r3, [sp, #24]
 802174c:	2b01      	cmp	r3, #1
 802174e:	dc18      	bgt.n	8021782 <_dtoa_r+0x8ca>
 8021750:	f1ba 0f00 	cmp.w	sl, #0
 8021754:	d115      	bne.n	8021782 <_dtoa_r+0x8ca>
 8021756:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802175a:	b993      	cbnz	r3, 8021782 <_dtoa_r+0x8ca>
 802175c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8021760:	0d1b      	lsrs	r3, r3, #20
 8021762:	051b      	lsls	r3, r3, #20
 8021764:	b183      	cbz	r3, 8021788 <_dtoa_r+0x8d0>
 8021766:	9b04      	ldr	r3, [sp, #16]
 8021768:	3301      	adds	r3, #1
 802176a:	9304      	str	r3, [sp, #16]
 802176c:	9b05      	ldr	r3, [sp, #20]
 802176e:	3301      	adds	r3, #1
 8021770:	9305      	str	r3, [sp, #20]
 8021772:	f04f 0801 	mov.w	r8, #1
 8021776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021778:	2b00      	cmp	r3, #0
 802177a:	f47f af6a 	bne.w	8021652 <_dtoa_r+0x79a>
 802177e:	2001      	movs	r0, #1
 8021780:	e76f      	b.n	8021662 <_dtoa_r+0x7aa>
 8021782:	f04f 0800 	mov.w	r8, #0
 8021786:	e7f6      	b.n	8021776 <_dtoa_r+0x8be>
 8021788:	4698      	mov	r8, r3
 802178a:	e7f4      	b.n	8021776 <_dtoa_r+0x8be>
 802178c:	f43f af7d 	beq.w	802168a <_dtoa_r+0x7d2>
 8021790:	4618      	mov	r0, r3
 8021792:	301c      	adds	r0, #28
 8021794:	e772      	b.n	802167c <_dtoa_r+0x7c4>
 8021796:	9b03      	ldr	r3, [sp, #12]
 8021798:	2b00      	cmp	r3, #0
 802179a:	dc37      	bgt.n	802180c <_dtoa_r+0x954>
 802179c:	9b06      	ldr	r3, [sp, #24]
 802179e:	2b02      	cmp	r3, #2
 80217a0:	dd34      	ble.n	802180c <_dtoa_r+0x954>
 80217a2:	9b03      	ldr	r3, [sp, #12]
 80217a4:	9302      	str	r3, [sp, #8]
 80217a6:	9b02      	ldr	r3, [sp, #8]
 80217a8:	b96b      	cbnz	r3, 80217c6 <_dtoa_r+0x90e>
 80217aa:	4631      	mov	r1, r6
 80217ac:	2205      	movs	r2, #5
 80217ae:	4620      	mov	r0, r4
 80217b0:	f000 fffc 	bl	80227ac <__multadd>
 80217b4:	4601      	mov	r1, r0
 80217b6:	4606      	mov	r6, r0
 80217b8:	ee18 0a10 	vmov	r0, s16
 80217bc:	f001 f9fc 	bl	8022bb8 <__mcmp>
 80217c0:	2800      	cmp	r0, #0
 80217c2:	f73f adba 	bgt.w	802133a <_dtoa_r+0x482>
 80217c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80217c8:	9d01      	ldr	r5, [sp, #4]
 80217ca:	43db      	mvns	r3, r3
 80217cc:	9300      	str	r3, [sp, #0]
 80217ce:	f04f 0800 	mov.w	r8, #0
 80217d2:	4631      	mov	r1, r6
 80217d4:	4620      	mov	r0, r4
 80217d6:	f000 ffe0 	bl	802279a <_Bfree>
 80217da:	2f00      	cmp	r7, #0
 80217dc:	f43f aea4 	beq.w	8021528 <_dtoa_r+0x670>
 80217e0:	f1b8 0f00 	cmp.w	r8, #0
 80217e4:	d005      	beq.n	80217f2 <_dtoa_r+0x93a>
 80217e6:	45b8      	cmp	r8, r7
 80217e8:	d003      	beq.n	80217f2 <_dtoa_r+0x93a>
 80217ea:	4641      	mov	r1, r8
 80217ec:	4620      	mov	r0, r4
 80217ee:	f000 ffd4 	bl	802279a <_Bfree>
 80217f2:	4639      	mov	r1, r7
 80217f4:	4620      	mov	r0, r4
 80217f6:	f000 ffd0 	bl	802279a <_Bfree>
 80217fa:	e695      	b.n	8021528 <_dtoa_r+0x670>
 80217fc:	2600      	movs	r6, #0
 80217fe:	4637      	mov	r7, r6
 8021800:	e7e1      	b.n	80217c6 <_dtoa_r+0x90e>
 8021802:	9700      	str	r7, [sp, #0]
 8021804:	4637      	mov	r7, r6
 8021806:	e598      	b.n	802133a <_dtoa_r+0x482>
 8021808:	40240000 	.word	0x40240000
 802180c:	9b08      	ldr	r3, [sp, #32]
 802180e:	2b00      	cmp	r3, #0
 8021810:	f000 80c9 	beq.w	80219a6 <_dtoa_r+0xaee>
 8021814:	9b03      	ldr	r3, [sp, #12]
 8021816:	9302      	str	r3, [sp, #8]
 8021818:	2d00      	cmp	r5, #0
 802181a:	dd05      	ble.n	8021828 <_dtoa_r+0x970>
 802181c:	4639      	mov	r1, r7
 802181e:	462a      	mov	r2, r5
 8021820:	4620      	mov	r0, r4
 8021822:	f001 f959 	bl	8022ad8 <__lshift>
 8021826:	4607      	mov	r7, r0
 8021828:	f1b8 0f00 	cmp.w	r8, #0
 802182c:	d05a      	beq.n	80218e4 <_dtoa_r+0xa2c>
 802182e:	6879      	ldr	r1, [r7, #4]
 8021830:	4620      	mov	r0, r4
 8021832:	f000 ff8d 	bl	8022750 <_Balloc>
 8021836:	4605      	mov	r5, r0
 8021838:	b920      	cbnz	r0, 8021844 <_dtoa_r+0x98c>
 802183a:	4b87      	ldr	r3, [pc, #540]	; (8021a58 <_dtoa_r+0xba0>)
 802183c:	4602      	mov	r2, r0
 802183e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8021842:	e477      	b.n	8021134 <_dtoa_r+0x27c>
 8021844:	693a      	ldr	r2, [r7, #16]
 8021846:	3202      	adds	r2, #2
 8021848:	0092      	lsls	r2, r2, #2
 802184a:	f107 010c 	add.w	r1, r7, #12
 802184e:	300c      	adds	r0, #12
 8021850:	f7fc fd12 	bl	801e278 <memcpy>
 8021854:	2201      	movs	r2, #1
 8021856:	4629      	mov	r1, r5
 8021858:	4620      	mov	r0, r4
 802185a:	f001 f93d 	bl	8022ad8 <__lshift>
 802185e:	9b01      	ldr	r3, [sp, #4]
 8021860:	f103 0901 	add.w	r9, r3, #1
 8021864:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8021868:	4413      	add	r3, r2
 802186a:	9305      	str	r3, [sp, #20]
 802186c:	f00a 0301 	and.w	r3, sl, #1
 8021870:	46b8      	mov	r8, r7
 8021872:	9304      	str	r3, [sp, #16]
 8021874:	4607      	mov	r7, r0
 8021876:	4631      	mov	r1, r6
 8021878:	ee18 0a10 	vmov	r0, s16
 802187c:	f7ff fa8e 	bl	8020d9c <quorem>
 8021880:	4641      	mov	r1, r8
 8021882:	9002      	str	r0, [sp, #8]
 8021884:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8021888:	ee18 0a10 	vmov	r0, s16
 802188c:	f001 f994 	bl	8022bb8 <__mcmp>
 8021890:	463a      	mov	r2, r7
 8021892:	9003      	str	r0, [sp, #12]
 8021894:	4631      	mov	r1, r6
 8021896:	4620      	mov	r0, r4
 8021898:	f001 f9aa 	bl	8022bf0 <__mdiff>
 802189c:	68c2      	ldr	r2, [r0, #12]
 802189e:	f109 3bff 	add.w	fp, r9, #4294967295
 80218a2:	4605      	mov	r5, r0
 80218a4:	bb02      	cbnz	r2, 80218e8 <_dtoa_r+0xa30>
 80218a6:	4601      	mov	r1, r0
 80218a8:	ee18 0a10 	vmov	r0, s16
 80218ac:	f001 f984 	bl	8022bb8 <__mcmp>
 80218b0:	4602      	mov	r2, r0
 80218b2:	4629      	mov	r1, r5
 80218b4:	4620      	mov	r0, r4
 80218b6:	9207      	str	r2, [sp, #28]
 80218b8:	f000 ff6f 	bl	802279a <_Bfree>
 80218bc:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80218c0:	ea43 0102 	orr.w	r1, r3, r2
 80218c4:	9b04      	ldr	r3, [sp, #16]
 80218c6:	430b      	orrs	r3, r1
 80218c8:	464d      	mov	r5, r9
 80218ca:	d10f      	bne.n	80218ec <_dtoa_r+0xa34>
 80218cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80218d0:	d02a      	beq.n	8021928 <_dtoa_r+0xa70>
 80218d2:	9b03      	ldr	r3, [sp, #12]
 80218d4:	2b00      	cmp	r3, #0
 80218d6:	dd02      	ble.n	80218de <_dtoa_r+0xa26>
 80218d8:	9b02      	ldr	r3, [sp, #8]
 80218da:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80218de:	f88b a000 	strb.w	sl, [fp]
 80218e2:	e776      	b.n	80217d2 <_dtoa_r+0x91a>
 80218e4:	4638      	mov	r0, r7
 80218e6:	e7ba      	b.n	802185e <_dtoa_r+0x9a6>
 80218e8:	2201      	movs	r2, #1
 80218ea:	e7e2      	b.n	80218b2 <_dtoa_r+0x9fa>
 80218ec:	9b03      	ldr	r3, [sp, #12]
 80218ee:	2b00      	cmp	r3, #0
 80218f0:	db04      	blt.n	80218fc <_dtoa_r+0xa44>
 80218f2:	9906      	ldr	r1, [sp, #24]
 80218f4:	430b      	orrs	r3, r1
 80218f6:	9904      	ldr	r1, [sp, #16]
 80218f8:	430b      	orrs	r3, r1
 80218fa:	d122      	bne.n	8021942 <_dtoa_r+0xa8a>
 80218fc:	2a00      	cmp	r2, #0
 80218fe:	ddee      	ble.n	80218de <_dtoa_r+0xa26>
 8021900:	ee18 1a10 	vmov	r1, s16
 8021904:	2201      	movs	r2, #1
 8021906:	4620      	mov	r0, r4
 8021908:	f001 f8e6 	bl	8022ad8 <__lshift>
 802190c:	4631      	mov	r1, r6
 802190e:	ee08 0a10 	vmov	s16, r0
 8021912:	f001 f951 	bl	8022bb8 <__mcmp>
 8021916:	2800      	cmp	r0, #0
 8021918:	dc03      	bgt.n	8021922 <_dtoa_r+0xa6a>
 802191a:	d1e0      	bne.n	80218de <_dtoa_r+0xa26>
 802191c:	f01a 0f01 	tst.w	sl, #1
 8021920:	d0dd      	beq.n	80218de <_dtoa_r+0xa26>
 8021922:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8021926:	d1d7      	bne.n	80218d8 <_dtoa_r+0xa20>
 8021928:	2339      	movs	r3, #57	; 0x39
 802192a:	f88b 3000 	strb.w	r3, [fp]
 802192e:	462b      	mov	r3, r5
 8021930:	461d      	mov	r5, r3
 8021932:	3b01      	subs	r3, #1
 8021934:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8021938:	2a39      	cmp	r2, #57	; 0x39
 802193a:	d071      	beq.n	8021a20 <_dtoa_r+0xb68>
 802193c:	3201      	adds	r2, #1
 802193e:	701a      	strb	r2, [r3, #0]
 8021940:	e747      	b.n	80217d2 <_dtoa_r+0x91a>
 8021942:	2a00      	cmp	r2, #0
 8021944:	dd07      	ble.n	8021956 <_dtoa_r+0xa9e>
 8021946:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 802194a:	d0ed      	beq.n	8021928 <_dtoa_r+0xa70>
 802194c:	f10a 0301 	add.w	r3, sl, #1
 8021950:	f88b 3000 	strb.w	r3, [fp]
 8021954:	e73d      	b.n	80217d2 <_dtoa_r+0x91a>
 8021956:	9b05      	ldr	r3, [sp, #20]
 8021958:	f809 ac01 	strb.w	sl, [r9, #-1]
 802195c:	4599      	cmp	r9, r3
 802195e:	d047      	beq.n	80219f0 <_dtoa_r+0xb38>
 8021960:	ee18 1a10 	vmov	r1, s16
 8021964:	2300      	movs	r3, #0
 8021966:	220a      	movs	r2, #10
 8021968:	4620      	mov	r0, r4
 802196a:	f000 ff1f 	bl	80227ac <__multadd>
 802196e:	45b8      	cmp	r8, r7
 8021970:	ee08 0a10 	vmov	s16, r0
 8021974:	f04f 0300 	mov.w	r3, #0
 8021978:	f04f 020a 	mov.w	r2, #10
 802197c:	4641      	mov	r1, r8
 802197e:	4620      	mov	r0, r4
 8021980:	d106      	bne.n	8021990 <_dtoa_r+0xad8>
 8021982:	f000 ff13 	bl	80227ac <__multadd>
 8021986:	4680      	mov	r8, r0
 8021988:	4607      	mov	r7, r0
 802198a:	f109 0901 	add.w	r9, r9, #1
 802198e:	e772      	b.n	8021876 <_dtoa_r+0x9be>
 8021990:	f000 ff0c 	bl	80227ac <__multadd>
 8021994:	4639      	mov	r1, r7
 8021996:	4680      	mov	r8, r0
 8021998:	2300      	movs	r3, #0
 802199a:	220a      	movs	r2, #10
 802199c:	4620      	mov	r0, r4
 802199e:	f000 ff05 	bl	80227ac <__multadd>
 80219a2:	4607      	mov	r7, r0
 80219a4:	e7f1      	b.n	802198a <_dtoa_r+0xad2>
 80219a6:	9b03      	ldr	r3, [sp, #12]
 80219a8:	9302      	str	r3, [sp, #8]
 80219aa:	9d01      	ldr	r5, [sp, #4]
 80219ac:	ee18 0a10 	vmov	r0, s16
 80219b0:	4631      	mov	r1, r6
 80219b2:	f7ff f9f3 	bl	8020d9c <quorem>
 80219b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80219ba:	9b01      	ldr	r3, [sp, #4]
 80219bc:	f805 ab01 	strb.w	sl, [r5], #1
 80219c0:	1aea      	subs	r2, r5, r3
 80219c2:	9b02      	ldr	r3, [sp, #8]
 80219c4:	4293      	cmp	r3, r2
 80219c6:	dd09      	ble.n	80219dc <_dtoa_r+0xb24>
 80219c8:	ee18 1a10 	vmov	r1, s16
 80219cc:	2300      	movs	r3, #0
 80219ce:	220a      	movs	r2, #10
 80219d0:	4620      	mov	r0, r4
 80219d2:	f000 feeb 	bl	80227ac <__multadd>
 80219d6:	ee08 0a10 	vmov	s16, r0
 80219da:	e7e7      	b.n	80219ac <_dtoa_r+0xaf4>
 80219dc:	9b02      	ldr	r3, [sp, #8]
 80219de:	2b00      	cmp	r3, #0
 80219e0:	bfc8      	it	gt
 80219e2:	461d      	movgt	r5, r3
 80219e4:	9b01      	ldr	r3, [sp, #4]
 80219e6:	bfd8      	it	le
 80219e8:	2501      	movle	r5, #1
 80219ea:	441d      	add	r5, r3
 80219ec:	f04f 0800 	mov.w	r8, #0
 80219f0:	ee18 1a10 	vmov	r1, s16
 80219f4:	2201      	movs	r2, #1
 80219f6:	4620      	mov	r0, r4
 80219f8:	f001 f86e 	bl	8022ad8 <__lshift>
 80219fc:	4631      	mov	r1, r6
 80219fe:	ee08 0a10 	vmov	s16, r0
 8021a02:	f001 f8d9 	bl	8022bb8 <__mcmp>
 8021a06:	2800      	cmp	r0, #0
 8021a08:	dc91      	bgt.n	802192e <_dtoa_r+0xa76>
 8021a0a:	d102      	bne.n	8021a12 <_dtoa_r+0xb5a>
 8021a0c:	f01a 0f01 	tst.w	sl, #1
 8021a10:	d18d      	bne.n	802192e <_dtoa_r+0xa76>
 8021a12:	462b      	mov	r3, r5
 8021a14:	461d      	mov	r5, r3
 8021a16:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8021a1a:	2a30      	cmp	r2, #48	; 0x30
 8021a1c:	d0fa      	beq.n	8021a14 <_dtoa_r+0xb5c>
 8021a1e:	e6d8      	b.n	80217d2 <_dtoa_r+0x91a>
 8021a20:	9a01      	ldr	r2, [sp, #4]
 8021a22:	429a      	cmp	r2, r3
 8021a24:	d184      	bne.n	8021930 <_dtoa_r+0xa78>
 8021a26:	9b00      	ldr	r3, [sp, #0]
 8021a28:	3301      	adds	r3, #1
 8021a2a:	9300      	str	r3, [sp, #0]
 8021a2c:	2331      	movs	r3, #49	; 0x31
 8021a2e:	7013      	strb	r3, [r2, #0]
 8021a30:	e6cf      	b.n	80217d2 <_dtoa_r+0x91a>
 8021a32:	4b0a      	ldr	r3, [pc, #40]	; (8021a5c <_dtoa_r+0xba4>)
 8021a34:	f7ff ba97 	b.w	8020f66 <_dtoa_r+0xae>
 8021a38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021a3a:	2b00      	cmp	r3, #0
 8021a3c:	f47f aa7b 	bne.w	8020f36 <_dtoa_r+0x7e>
 8021a40:	4b07      	ldr	r3, [pc, #28]	; (8021a60 <_dtoa_r+0xba8>)
 8021a42:	f7ff ba90 	b.w	8020f66 <_dtoa_r+0xae>
 8021a46:	9b02      	ldr	r3, [sp, #8]
 8021a48:	2b00      	cmp	r3, #0
 8021a4a:	dcae      	bgt.n	80219aa <_dtoa_r+0xaf2>
 8021a4c:	9b06      	ldr	r3, [sp, #24]
 8021a4e:	2b02      	cmp	r3, #2
 8021a50:	f73f aea9 	bgt.w	80217a6 <_dtoa_r+0x8ee>
 8021a54:	e7a9      	b.n	80219aa <_dtoa_r+0xaf2>
 8021a56:	bf00      	nop
 8021a58:	0806f7e9 	.word	0x0806f7e9
 8021a5c:	0806f79a 	.word	0x0806f79a
 8021a60:	0806f7e0 	.word	0x0806f7e0

08021a64 <__errno>:
 8021a64:	4b01      	ldr	r3, [pc, #4]	; (8021a6c <__errno+0x8>)
 8021a66:	6818      	ldr	r0, [r3, #0]
 8021a68:	4770      	bx	lr
 8021a6a:	bf00      	nop
 8021a6c:	20000020 	.word	0x20000020

08021a70 <__sflush_r>:
 8021a70:	898b      	ldrh	r3, [r1, #12]
 8021a72:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8021a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021a7a:	4605      	mov	r5, r0
 8021a7c:	0718      	lsls	r0, r3, #28
 8021a7e:	460c      	mov	r4, r1
 8021a80:	d45f      	bmi.n	8021b42 <__sflush_r+0xd2>
 8021a82:	684b      	ldr	r3, [r1, #4]
 8021a84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8021a88:	2b00      	cmp	r3, #0
 8021a8a:	818a      	strh	r2, [r1, #12]
 8021a8c:	dc05      	bgt.n	8021a9a <__sflush_r+0x2a>
 8021a8e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8021a90:	2b00      	cmp	r3, #0
 8021a92:	dc02      	bgt.n	8021a9a <__sflush_r+0x2a>
 8021a94:	2000      	movs	r0, #0
 8021a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021a9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8021a9c:	2e00      	cmp	r6, #0
 8021a9e:	d0f9      	beq.n	8021a94 <__sflush_r+0x24>
 8021aa0:	2300      	movs	r3, #0
 8021aa2:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8021aa6:	682f      	ldr	r7, [r5, #0]
 8021aa8:	602b      	str	r3, [r5, #0]
 8021aaa:	d036      	beq.n	8021b1a <__sflush_r+0xaa>
 8021aac:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8021aae:	89a3      	ldrh	r3, [r4, #12]
 8021ab0:	075a      	lsls	r2, r3, #29
 8021ab2:	d505      	bpl.n	8021ac0 <__sflush_r+0x50>
 8021ab4:	6863      	ldr	r3, [r4, #4]
 8021ab6:	1ac0      	subs	r0, r0, r3
 8021ab8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8021aba:	b10b      	cbz	r3, 8021ac0 <__sflush_r+0x50>
 8021abc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8021abe:	1ac0      	subs	r0, r0, r3
 8021ac0:	2300      	movs	r3, #0
 8021ac2:	4602      	mov	r2, r0
 8021ac4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8021ac6:	69e1      	ldr	r1, [r4, #28]
 8021ac8:	4628      	mov	r0, r5
 8021aca:	47b0      	blx	r6
 8021acc:	1c43      	adds	r3, r0, #1
 8021ace:	89a3      	ldrh	r3, [r4, #12]
 8021ad0:	d106      	bne.n	8021ae0 <__sflush_r+0x70>
 8021ad2:	6829      	ldr	r1, [r5, #0]
 8021ad4:	291d      	cmp	r1, #29
 8021ad6:	d830      	bhi.n	8021b3a <__sflush_r+0xca>
 8021ad8:	4a2b      	ldr	r2, [pc, #172]	; (8021b88 <__sflush_r+0x118>)
 8021ada:	40ca      	lsrs	r2, r1
 8021adc:	07d6      	lsls	r6, r2, #31
 8021ade:	d52c      	bpl.n	8021b3a <__sflush_r+0xca>
 8021ae0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8021ae4:	b21b      	sxth	r3, r3
 8021ae6:	2200      	movs	r2, #0
 8021ae8:	6062      	str	r2, [r4, #4]
 8021aea:	04d9      	lsls	r1, r3, #19
 8021aec:	6922      	ldr	r2, [r4, #16]
 8021aee:	81a3      	strh	r3, [r4, #12]
 8021af0:	6022      	str	r2, [r4, #0]
 8021af2:	d504      	bpl.n	8021afe <__sflush_r+0x8e>
 8021af4:	1c42      	adds	r2, r0, #1
 8021af6:	d101      	bne.n	8021afc <__sflush_r+0x8c>
 8021af8:	682b      	ldr	r3, [r5, #0]
 8021afa:	b903      	cbnz	r3, 8021afe <__sflush_r+0x8e>
 8021afc:	6520      	str	r0, [r4, #80]	; 0x50
 8021afe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8021b00:	602f      	str	r7, [r5, #0]
 8021b02:	2900      	cmp	r1, #0
 8021b04:	d0c6      	beq.n	8021a94 <__sflush_r+0x24>
 8021b06:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8021b0a:	4299      	cmp	r1, r3
 8021b0c:	d002      	beq.n	8021b14 <__sflush_r+0xa4>
 8021b0e:	4628      	mov	r0, r5
 8021b10:	f000 f938 	bl	8021d84 <_free_r>
 8021b14:	2000      	movs	r0, #0
 8021b16:	6320      	str	r0, [r4, #48]	; 0x30
 8021b18:	e7bd      	b.n	8021a96 <__sflush_r+0x26>
 8021b1a:	69e1      	ldr	r1, [r4, #28]
 8021b1c:	2301      	movs	r3, #1
 8021b1e:	4628      	mov	r0, r5
 8021b20:	47b0      	blx	r6
 8021b22:	1c41      	adds	r1, r0, #1
 8021b24:	d1c3      	bne.n	8021aae <__sflush_r+0x3e>
 8021b26:	682b      	ldr	r3, [r5, #0]
 8021b28:	2b00      	cmp	r3, #0
 8021b2a:	d0c0      	beq.n	8021aae <__sflush_r+0x3e>
 8021b2c:	2b1d      	cmp	r3, #29
 8021b2e:	d001      	beq.n	8021b34 <__sflush_r+0xc4>
 8021b30:	2b16      	cmp	r3, #22
 8021b32:	d101      	bne.n	8021b38 <__sflush_r+0xc8>
 8021b34:	602f      	str	r7, [r5, #0]
 8021b36:	e7ad      	b.n	8021a94 <__sflush_r+0x24>
 8021b38:	89a3      	ldrh	r3, [r4, #12]
 8021b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021b3e:	81a3      	strh	r3, [r4, #12]
 8021b40:	e7a9      	b.n	8021a96 <__sflush_r+0x26>
 8021b42:	690f      	ldr	r7, [r1, #16]
 8021b44:	2f00      	cmp	r7, #0
 8021b46:	d0a5      	beq.n	8021a94 <__sflush_r+0x24>
 8021b48:	079b      	lsls	r3, r3, #30
 8021b4a:	680e      	ldr	r6, [r1, #0]
 8021b4c:	bf08      	it	eq
 8021b4e:	694b      	ldreq	r3, [r1, #20]
 8021b50:	600f      	str	r7, [r1, #0]
 8021b52:	bf18      	it	ne
 8021b54:	2300      	movne	r3, #0
 8021b56:	eba6 0807 	sub.w	r8, r6, r7
 8021b5a:	608b      	str	r3, [r1, #8]
 8021b5c:	f1b8 0f00 	cmp.w	r8, #0
 8021b60:	dd98      	ble.n	8021a94 <__sflush_r+0x24>
 8021b62:	69e1      	ldr	r1, [r4, #28]
 8021b64:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8021b66:	4643      	mov	r3, r8
 8021b68:	463a      	mov	r2, r7
 8021b6a:	4628      	mov	r0, r5
 8021b6c:	47b0      	blx	r6
 8021b6e:	2800      	cmp	r0, #0
 8021b70:	dc06      	bgt.n	8021b80 <__sflush_r+0x110>
 8021b72:	89a3      	ldrh	r3, [r4, #12]
 8021b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021b78:	81a3      	strh	r3, [r4, #12]
 8021b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8021b7e:	e78a      	b.n	8021a96 <__sflush_r+0x26>
 8021b80:	4407      	add	r7, r0
 8021b82:	eba8 0800 	sub.w	r8, r8, r0
 8021b86:	e7e9      	b.n	8021b5c <__sflush_r+0xec>
 8021b88:	20400001 	.word	0x20400001

08021b8c <_fflush_r>:
 8021b8c:	b538      	push	{r3, r4, r5, lr}
 8021b8e:	460c      	mov	r4, r1
 8021b90:	4605      	mov	r5, r0
 8021b92:	b118      	cbz	r0, 8021b9c <_fflush_r+0x10>
 8021b94:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8021b96:	b90b      	cbnz	r3, 8021b9c <_fflush_r+0x10>
 8021b98:	f000 f864 	bl	8021c64 <__sinit>
 8021b9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021ba0:	b1bb      	cbz	r3, 8021bd2 <_fflush_r+0x46>
 8021ba2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8021ba4:	07d0      	lsls	r0, r2, #31
 8021ba6:	d404      	bmi.n	8021bb2 <_fflush_r+0x26>
 8021ba8:	0599      	lsls	r1, r3, #22
 8021baa:	d402      	bmi.n	8021bb2 <_fflush_r+0x26>
 8021bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021bae:	f000 fb19 	bl	80221e4 <__retarget_lock_acquire_recursive>
 8021bb2:	4628      	mov	r0, r5
 8021bb4:	4621      	mov	r1, r4
 8021bb6:	f7ff ff5b 	bl	8021a70 <__sflush_r>
 8021bba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021bbc:	07da      	lsls	r2, r3, #31
 8021bbe:	4605      	mov	r5, r0
 8021bc0:	d405      	bmi.n	8021bce <_fflush_r+0x42>
 8021bc2:	89a3      	ldrh	r3, [r4, #12]
 8021bc4:	059b      	lsls	r3, r3, #22
 8021bc6:	d402      	bmi.n	8021bce <_fflush_r+0x42>
 8021bc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021bca:	f000 fb0c 	bl	80221e6 <__retarget_lock_release_recursive>
 8021bce:	4628      	mov	r0, r5
 8021bd0:	bd38      	pop	{r3, r4, r5, pc}
 8021bd2:	461d      	mov	r5, r3
 8021bd4:	e7fb      	b.n	8021bce <_fflush_r+0x42>
	...

08021bd8 <std>:
 8021bd8:	2300      	movs	r3, #0
 8021bda:	b510      	push	{r4, lr}
 8021bdc:	4604      	mov	r4, r0
 8021bde:	e9c0 3300 	strd	r3, r3, [r0]
 8021be2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021be6:	6083      	str	r3, [r0, #8]
 8021be8:	8181      	strh	r1, [r0, #12]
 8021bea:	6643      	str	r3, [r0, #100]	; 0x64
 8021bec:	81c2      	strh	r2, [r0, #14]
 8021bee:	6183      	str	r3, [r0, #24]
 8021bf0:	4619      	mov	r1, r3
 8021bf2:	2208      	movs	r2, #8
 8021bf4:	305c      	adds	r0, #92	; 0x5c
 8021bf6:	f7fc fb67 	bl	801e2c8 <memset>
 8021bfa:	4b07      	ldr	r3, [pc, #28]	; (8021c18 <std+0x40>)
 8021bfc:	6223      	str	r3, [r4, #32]
 8021bfe:	4b07      	ldr	r3, [pc, #28]	; (8021c1c <std+0x44>)
 8021c00:	6263      	str	r3, [r4, #36]	; 0x24
 8021c02:	4b07      	ldr	r3, [pc, #28]	; (8021c20 <std+0x48>)
 8021c04:	62a3      	str	r3, [r4, #40]	; 0x28
 8021c06:	4b07      	ldr	r3, [pc, #28]	; (8021c24 <std+0x4c>)
 8021c08:	61e4      	str	r4, [r4, #28]
 8021c0a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8021c0c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8021c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021c14:	f000 bae4 	b.w	80221e0 <__retarget_lock_init_recursive>
 8021c18:	08023195 	.word	0x08023195
 8021c1c:	080231b7 	.word	0x080231b7
 8021c20:	080231ef 	.word	0x080231ef
 8021c24:	08023213 	.word	0x08023213

08021c28 <_cleanup_r>:
 8021c28:	4901      	ldr	r1, [pc, #4]	; (8021c30 <_cleanup_r+0x8>)
 8021c2a:	f000 bab5 	b.w	8022198 <_fwalk_reent>
 8021c2e:	bf00      	nop
 8021c30:	08023ed1 	.word	0x08023ed1

08021c34 <__sfp_lock_acquire>:
 8021c34:	4801      	ldr	r0, [pc, #4]	; (8021c3c <__sfp_lock_acquire+0x8>)
 8021c36:	f000 bad5 	b.w	80221e4 <__retarget_lock_acquire_recursive>
 8021c3a:	bf00      	nop
 8021c3c:	2000c34e 	.word	0x2000c34e

08021c40 <__sfp_lock_release>:
 8021c40:	4801      	ldr	r0, [pc, #4]	; (8021c48 <__sfp_lock_release+0x8>)
 8021c42:	f000 bad0 	b.w	80221e6 <__retarget_lock_release_recursive>
 8021c46:	bf00      	nop
 8021c48:	2000c34e 	.word	0x2000c34e

08021c4c <__sinit_lock_acquire>:
 8021c4c:	4801      	ldr	r0, [pc, #4]	; (8021c54 <__sinit_lock_acquire+0x8>)
 8021c4e:	f000 bac9 	b.w	80221e4 <__retarget_lock_acquire_recursive>
 8021c52:	bf00      	nop
 8021c54:	2000c34f 	.word	0x2000c34f

08021c58 <__sinit_lock_release>:
 8021c58:	4801      	ldr	r0, [pc, #4]	; (8021c60 <__sinit_lock_release+0x8>)
 8021c5a:	f000 bac4 	b.w	80221e6 <__retarget_lock_release_recursive>
 8021c5e:	bf00      	nop
 8021c60:	2000c34f 	.word	0x2000c34f

08021c64 <__sinit>:
 8021c64:	b510      	push	{r4, lr}
 8021c66:	4604      	mov	r4, r0
 8021c68:	f7ff fff0 	bl	8021c4c <__sinit_lock_acquire>
 8021c6c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8021c6e:	b11a      	cbz	r2, 8021c78 <__sinit+0x14>
 8021c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021c74:	f7ff bff0 	b.w	8021c58 <__sinit_lock_release>
 8021c78:	4b0d      	ldr	r3, [pc, #52]	; (8021cb0 <__sinit+0x4c>)
 8021c7a:	63e3      	str	r3, [r4, #60]	; 0x3c
 8021c7c:	2303      	movs	r3, #3
 8021c7e:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 8021c82:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 8021c86:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 8021c8a:	6860      	ldr	r0, [r4, #4]
 8021c8c:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 8021c90:	2104      	movs	r1, #4
 8021c92:	f7ff ffa1 	bl	8021bd8 <std>
 8021c96:	68a0      	ldr	r0, [r4, #8]
 8021c98:	2201      	movs	r2, #1
 8021c9a:	2109      	movs	r1, #9
 8021c9c:	f7ff ff9c 	bl	8021bd8 <std>
 8021ca0:	68e0      	ldr	r0, [r4, #12]
 8021ca2:	2202      	movs	r2, #2
 8021ca4:	2112      	movs	r1, #18
 8021ca6:	f7ff ff97 	bl	8021bd8 <std>
 8021caa:	2301      	movs	r3, #1
 8021cac:	63a3      	str	r3, [r4, #56]	; 0x38
 8021cae:	e7df      	b.n	8021c70 <__sinit+0xc>
 8021cb0:	08021c29 	.word	0x08021c29

08021cb4 <__libc_fini_array>:
 8021cb4:	b538      	push	{r3, r4, r5, lr}
 8021cb6:	4d07      	ldr	r5, [pc, #28]	; (8021cd4 <__libc_fini_array+0x20>)
 8021cb8:	4c07      	ldr	r4, [pc, #28]	; (8021cd8 <__libc_fini_array+0x24>)
 8021cba:	1b64      	subs	r4, r4, r5
 8021cbc:	10a4      	asrs	r4, r4, #2
 8021cbe:	b91c      	cbnz	r4, 8021cc8 <__libc_fini_array+0x14>
 8021cc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021cc4:	f002 baf8 	b.w	80242b8 <_fini>
 8021cc8:	3c01      	subs	r4, #1
 8021cca:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8021cce:	4798      	blx	r3
 8021cd0:	e7f5      	b.n	8021cbe <__libc_fini_array+0xa>
 8021cd2:	bf00      	nop
 8021cd4:	0806fa2c 	.word	0x0806fa2c
 8021cd8:	0806fa30 	.word	0x0806fa30

08021cdc <_malloc_trim_r>:
 8021cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021ce0:	4606      	mov	r6, r0
 8021ce2:	2008      	movs	r0, #8
 8021ce4:	460c      	mov	r4, r1
 8021ce6:	f001 fb26 	bl	8023336 <sysconf>
 8021cea:	4f23      	ldr	r7, [pc, #140]	; (8021d78 <_malloc_trim_r+0x9c>)
 8021cec:	4680      	mov	r8, r0
 8021cee:	4630      	mov	r0, r6
 8021cf0:	f000 fd22 	bl	8022738 <__malloc_lock>
 8021cf4:	68bb      	ldr	r3, [r7, #8]
 8021cf6:	685d      	ldr	r5, [r3, #4]
 8021cf8:	f025 0503 	bic.w	r5, r5, #3
 8021cfc:	1b2c      	subs	r4, r5, r4
 8021cfe:	3c11      	subs	r4, #17
 8021d00:	4444      	add	r4, r8
 8021d02:	fbb4 f4f8 	udiv	r4, r4, r8
 8021d06:	3c01      	subs	r4, #1
 8021d08:	fb08 f404 	mul.w	r4, r8, r4
 8021d0c:	45a0      	cmp	r8, r4
 8021d0e:	dd05      	ble.n	8021d1c <_malloc_trim_r+0x40>
 8021d10:	4630      	mov	r0, r6
 8021d12:	f000 fd17 	bl	8022744 <__malloc_unlock>
 8021d16:	2000      	movs	r0, #0
 8021d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021d1c:	2100      	movs	r1, #0
 8021d1e:	4630      	mov	r0, r6
 8021d20:	f001 fa28 	bl	8023174 <_sbrk_r>
 8021d24:	68bb      	ldr	r3, [r7, #8]
 8021d26:	442b      	add	r3, r5
 8021d28:	4298      	cmp	r0, r3
 8021d2a:	d1f1      	bne.n	8021d10 <_malloc_trim_r+0x34>
 8021d2c:	4261      	negs	r1, r4
 8021d2e:	4630      	mov	r0, r6
 8021d30:	f001 fa20 	bl	8023174 <_sbrk_r>
 8021d34:	3001      	adds	r0, #1
 8021d36:	d110      	bne.n	8021d5a <_malloc_trim_r+0x7e>
 8021d38:	2100      	movs	r1, #0
 8021d3a:	4630      	mov	r0, r6
 8021d3c:	f001 fa1a 	bl	8023174 <_sbrk_r>
 8021d40:	68ba      	ldr	r2, [r7, #8]
 8021d42:	1a83      	subs	r3, r0, r2
 8021d44:	2b0f      	cmp	r3, #15
 8021d46:	dde3      	ble.n	8021d10 <_malloc_trim_r+0x34>
 8021d48:	490c      	ldr	r1, [pc, #48]	; (8021d7c <_malloc_trim_r+0xa0>)
 8021d4a:	6809      	ldr	r1, [r1, #0]
 8021d4c:	1a40      	subs	r0, r0, r1
 8021d4e:	490c      	ldr	r1, [pc, #48]	; (8021d80 <_malloc_trim_r+0xa4>)
 8021d50:	f043 0301 	orr.w	r3, r3, #1
 8021d54:	6008      	str	r0, [r1, #0]
 8021d56:	6053      	str	r3, [r2, #4]
 8021d58:	e7da      	b.n	8021d10 <_malloc_trim_r+0x34>
 8021d5a:	68bb      	ldr	r3, [r7, #8]
 8021d5c:	4a08      	ldr	r2, [pc, #32]	; (8021d80 <_malloc_trim_r+0xa4>)
 8021d5e:	1b2d      	subs	r5, r5, r4
 8021d60:	f045 0501 	orr.w	r5, r5, #1
 8021d64:	605d      	str	r5, [r3, #4]
 8021d66:	6813      	ldr	r3, [r2, #0]
 8021d68:	4630      	mov	r0, r6
 8021d6a:	1b1b      	subs	r3, r3, r4
 8021d6c:	6013      	str	r3, [r2, #0]
 8021d6e:	f000 fce9 	bl	8022744 <__malloc_unlock>
 8021d72:	2001      	movs	r0, #1
 8021d74:	e7d0      	b.n	8021d18 <_malloc_trim_r+0x3c>
 8021d76:	bf00      	nop
 8021d78:	20000454 	.word	0x20000454
 8021d7c:	2000085c 	.word	0x2000085c
 8021d80:	2000c350 	.word	0x2000c350

08021d84 <_free_r>:
 8021d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021d86:	4605      	mov	r5, r0
 8021d88:	460f      	mov	r7, r1
 8021d8a:	2900      	cmp	r1, #0
 8021d8c:	f000 80b1 	beq.w	8021ef2 <_free_r+0x16e>
 8021d90:	f000 fcd2 	bl	8022738 <__malloc_lock>
 8021d94:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8021d98:	4856      	ldr	r0, [pc, #344]	; (8021ef4 <_free_r+0x170>)
 8021d9a:	f022 0401 	bic.w	r4, r2, #1
 8021d9e:	f1a7 0308 	sub.w	r3, r7, #8
 8021da2:	eb03 0c04 	add.w	ip, r3, r4
 8021da6:	6881      	ldr	r1, [r0, #8]
 8021da8:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8021dac:	4561      	cmp	r1, ip
 8021dae:	f026 0603 	bic.w	r6, r6, #3
 8021db2:	f002 0201 	and.w	r2, r2, #1
 8021db6:	d11b      	bne.n	8021df0 <_free_r+0x6c>
 8021db8:	4434      	add	r4, r6
 8021dba:	b93a      	cbnz	r2, 8021dcc <_free_r+0x48>
 8021dbc:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8021dc0:	1a9b      	subs	r3, r3, r2
 8021dc2:	4414      	add	r4, r2
 8021dc4:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8021dc8:	60ca      	str	r2, [r1, #12]
 8021dca:	6091      	str	r1, [r2, #8]
 8021dcc:	f044 0201 	orr.w	r2, r4, #1
 8021dd0:	605a      	str	r2, [r3, #4]
 8021dd2:	6083      	str	r3, [r0, #8]
 8021dd4:	4b48      	ldr	r3, [pc, #288]	; (8021ef8 <_free_r+0x174>)
 8021dd6:	681b      	ldr	r3, [r3, #0]
 8021dd8:	42a3      	cmp	r3, r4
 8021dda:	d804      	bhi.n	8021de6 <_free_r+0x62>
 8021ddc:	4b47      	ldr	r3, [pc, #284]	; (8021efc <_free_r+0x178>)
 8021dde:	4628      	mov	r0, r5
 8021de0:	6819      	ldr	r1, [r3, #0]
 8021de2:	f7ff ff7b 	bl	8021cdc <_malloc_trim_r>
 8021de6:	4628      	mov	r0, r5
 8021de8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8021dec:	f000 bcaa 	b.w	8022744 <__malloc_unlock>
 8021df0:	f8cc 6004 	str.w	r6, [ip, #4]
 8021df4:	2a00      	cmp	r2, #0
 8021df6:	d138      	bne.n	8021e6a <_free_r+0xe6>
 8021df8:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8021dfc:	1a5b      	subs	r3, r3, r1
 8021dfe:	440c      	add	r4, r1
 8021e00:	6899      	ldr	r1, [r3, #8]
 8021e02:	f100 0708 	add.w	r7, r0, #8
 8021e06:	42b9      	cmp	r1, r7
 8021e08:	d031      	beq.n	8021e6e <_free_r+0xea>
 8021e0a:	68df      	ldr	r7, [r3, #12]
 8021e0c:	60cf      	str	r7, [r1, #12]
 8021e0e:	60b9      	str	r1, [r7, #8]
 8021e10:	eb0c 0106 	add.w	r1, ip, r6
 8021e14:	6849      	ldr	r1, [r1, #4]
 8021e16:	07c9      	lsls	r1, r1, #31
 8021e18:	d40b      	bmi.n	8021e32 <_free_r+0xae>
 8021e1a:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8021e1e:	4434      	add	r4, r6
 8021e20:	bb3a      	cbnz	r2, 8021e72 <_free_r+0xee>
 8021e22:	4e37      	ldr	r6, [pc, #220]	; (8021f00 <_free_r+0x17c>)
 8021e24:	42b1      	cmp	r1, r6
 8021e26:	d124      	bne.n	8021e72 <_free_r+0xee>
 8021e28:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021e2c:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8021e30:	2201      	movs	r2, #1
 8021e32:	f044 0101 	orr.w	r1, r4, #1
 8021e36:	6059      	str	r1, [r3, #4]
 8021e38:	511c      	str	r4, [r3, r4]
 8021e3a:	2a00      	cmp	r2, #0
 8021e3c:	d1d3      	bne.n	8021de6 <_free_r+0x62>
 8021e3e:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8021e42:	d21b      	bcs.n	8021e7c <_free_r+0xf8>
 8021e44:	0961      	lsrs	r1, r4, #5
 8021e46:	08e2      	lsrs	r2, r4, #3
 8021e48:	2401      	movs	r4, #1
 8021e4a:	408c      	lsls	r4, r1
 8021e4c:	6841      	ldr	r1, [r0, #4]
 8021e4e:	3201      	adds	r2, #1
 8021e50:	430c      	orrs	r4, r1
 8021e52:	6044      	str	r4, [r0, #4]
 8021e54:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8021e58:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8021e5c:	3908      	subs	r1, #8
 8021e5e:	e9c3 4102 	strd	r4, r1, [r3, #8]
 8021e62:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 8021e66:	60e3      	str	r3, [r4, #12]
 8021e68:	e7bd      	b.n	8021de6 <_free_r+0x62>
 8021e6a:	2200      	movs	r2, #0
 8021e6c:	e7d0      	b.n	8021e10 <_free_r+0x8c>
 8021e6e:	2201      	movs	r2, #1
 8021e70:	e7ce      	b.n	8021e10 <_free_r+0x8c>
 8021e72:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8021e76:	60ce      	str	r6, [r1, #12]
 8021e78:	60b1      	str	r1, [r6, #8]
 8021e7a:	e7da      	b.n	8021e32 <_free_r+0xae>
 8021e7c:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8021e80:	ea4f 2254 	mov.w	r2, r4, lsr #9
 8021e84:	d214      	bcs.n	8021eb0 <_free_r+0x12c>
 8021e86:	09a2      	lsrs	r2, r4, #6
 8021e88:	3238      	adds	r2, #56	; 0x38
 8021e8a:	1c51      	adds	r1, r2, #1
 8021e8c:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8021e90:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 8021e94:	428e      	cmp	r6, r1
 8021e96:	d125      	bne.n	8021ee4 <_free_r+0x160>
 8021e98:	2401      	movs	r4, #1
 8021e9a:	1092      	asrs	r2, r2, #2
 8021e9c:	fa04 f202 	lsl.w	r2, r4, r2
 8021ea0:	6844      	ldr	r4, [r0, #4]
 8021ea2:	4322      	orrs	r2, r4
 8021ea4:	6042      	str	r2, [r0, #4]
 8021ea6:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8021eaa:	60b3      	str	r3, [r6, #8]
 8021eac:	60cb      	str	r3, [r1, #12]
 8021eae:	e79a      	b.n	8021de6 <_free_r+0x62>
 8021eb0:	2a14      	cmp	r2, #20
 8021eb2:	d801      	bhi.n	8021eb8 <_free_r+0x134>
 8021eb4:	325b      	adds	r2, #91	; 0x5b
 8021eb6:	e7e8      	b.n	8021e8a <_free_r+0x106>
 8021eb8:	2a54      	cmp	r2, #84	; 0x54
 8021eba:	d802      	bhi.n	8021ec2 <_free_r+0x13e>
 8021ebc:	0b22      	lsrs	r2, r4, #12
 8021ebe:	326e      	adds	r2, #110	; 0x6e
 8021ec0:	e7e3      	b.n	8021e8a <_free_r+0x106>
 8021ec2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8021ec6:	d802      	bhi.n	8021ece <_free_r+0x14a>
 8021ec8:	0be2      	lsrs	r2, r4, #15
 8021eca:	3277      	adds	r2, #119	; 0x77
 8021ecc:	e7dd      	b.n	8021e8a <_free_r+0x106>
 8021ece:	f240 5154 	movw	r1, #1364	; 0x554
 8021ed2:	428a      	cmp	r2, r1
 8021ed4:	bf9a      	itte	ls
 8021ed6:	0ca2      	lsrls	r2, r4, #18
 8021ed8:	327c      	addls	r2, #124	; 0x7c
 8021eda:	227e      	movhi	r2, #126	; 0x7e
 8021edc:	e7d5      	b.n	8021e8a <_free_r+0x106>
 8021ede:	6889      	ldr	r1, [r1, #8]
 8021ee0:	428e      	cmp	r6, r1
 8021ee2:	d004      	beq.n	8021eee <_free_r+0x16a>
 8021ee4:	684a      	ldr	r2, [r1, #4]
 8021ee6:	f022 0203 	bic.w	r2, r2, #3
 8021eea:	42a2      	cmp	r2, r4
 8021eec:	d8f7      	bhi.n	8021ede <_free_r+0x15a>
 8021eee:	68ce      	ldr	r6, [r1, #12]
 8021ef0:	e7d9      	b.n	8021ea6 <_free_r+0x122>
 8021ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021ef4:	20000454 	.word	0x20000454
 8021ef8:	20000860 	.word	0x20000860
 8021efc:	2000c380 	.word	0x2000c380
 8021f00:	2000045c 	.word	0x2000045c

08021f04 <__sfvwrite_r>:
 8021f04:	6893      	ldr	r3, [r2, #8]
 8021f06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f0a:	4606      	mov	r6, r0
 8021f0c:	460c      	mov	r4, r1
 8021f0e:	4690      	mov	r8, r2
 8021f10:	b91b      	cbnz	r3, 8021f1a <__sfvwrite_r+0x16>
 8021f12:	2000      	movs	r0, #0
 8021f14:	b003      	add	sp, #12
 8021f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021f1a:	898b      	ldrh	r3, [r1, #12]
 8021f1c:	0718      	lsls	r0, r3, #28
 8021f1e:	d550      	bpl.n	8021fc2 <__sfvwrite_r+0xbe>
 8021f20:	690b      	ldr	r3, [r1, #16]
 8021f22:	2b00      	cmp	r3, #0
 8021f24:	d04d      	beq.n	8021fc2 <__sfvwrite_r+0xbe>
 8021f26:	89a3      	ldrh	r3, [r4, #12]
 8021f28:	f8d8 7000 	ldr.w	r7, [r8]
 8021f2c:	f013 0902 	ands.w	r9, r3, #2
 8021f30:	d16c      	bne.n	802200c <__sfvwrite_r+0x108>
 8021f32:	f013 0301 	ands.w	r3, r3, #1
 8021f36:	f000 809c 	beq.w	8022072 <__sfvwrite_r+0x16e>
 8021f3a:	4648      	mov	r0, r9
 8021f3c:	46ca      	mov	sl, r9
 8021f3e:	46cb      	mov	fp, r9
 8021f40:	f1bb 0f00 	cmp.w	fp, #0
 8021f44:	f000 8103 	beq.w	802214e <__sfvwrite_r+0x24a>
 8021f48:	b950      	cbnz	r0, 8021f60 <__sfvwrite_r+0x5c>
 8021f4a:	465a      	mov	r2, fp
 8021f4c:	210a      	movs	r1, #10
 8021f4e:	4650      	mov	r0, sl
 8021f50:	f7de f956 	bl	8000200 <memchr>
 8021f54:	2800      	cmp	r0, #0
 8021f56:	f000 80ff 	beq.w	8022158 <__sfvwrite_r+0x254>
 8021f5a:	3001      	adds	r0, #1
 8021f5c:	eba0 090a 	sub.w	r9, r0, sl
 8021f60:	6820      	ldr	r0, [r4, #0]
 8021f62:	6921      	ldr	r1, [r4, #16]
 8021f64:	6963      	ldr	r3, [r4, #20]
 8021f66:	45d9      	cmp	r9, fp
 8021f68:	464a      	mov	r2, r9
 8021f6a:	bf28      	it	cs
 8021f6c:	465a      	movcs	r2, fp
 8021f6e:	4288      	cmp	r0, r1
 8021f70:	f240 80f5 	bls.w	802215e <__sfvwrite_r+0x25a>
 8021f74:	68a5      	ldr	r5, [r4, #8]
 8021f76:	441d      	add	r5, r3
 8021f78:	42aa      	cmp	r2, r5
 8021f7a:	f340 80f0 	ble.w	802215e <__sfvwrite_r+0x25a>
 8021f7e:	4651      	mov	r1, sl
 8021f80:	462a      	mov	r2, r5
 8021f82:	f7fc f987 	bl	801e294 <memmove>
 8021f86:	6823      	ldr	r3, [r4, #0]
 8021f88:	442b      	add	r3, r5
 8021f8a:	6023      	str	r3, [r4, #0]
 8021f8c:	4621      	mov	r1, r4
 8021f8e:	4630      	mov	r0, r6
 8021f90:	f7ff fdfc 	bl	8021b8c <_fflush_r>
 8021f94:	2800      	cmp	r0, #0
 8021f96:	d167      	bne.n	8022068 <__sfvwrite_r+0x164>
 8021f98:	ebb9 0905 	subs.w	r9, r9, r5
 8021f9c:	f040 80f7 	bne.w	802218e <__sfvwrite_r+0x28a>
 8021fa0:	4621      	mov	r1, r4
 8021fa2:	4630      	mov	r0, r6
 8021fa4:	f7ff fdf2 	bl	8021b8c <_fflush_r>
 8021fa8:	2800      	cmp	r0, #0
 8021faa:	d15d      	bne.n	8022068 <__sfvwrite_r+0x164>
 8021fac:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8021fb0:	44aa      	add	sl, r5
 8021fb2:	ebab 0b05 	sub.w	fp, fp, r5
 8021fb6:	1b55      	subs	r5, r2, r5
 8021fb8:	f8c8 5008 	str.w	r5, [r8, #8]
 8021fbc:	2d00      	cmp	r5, #0
 8021fbe:	d1bf      	bne.n	8021f40 <__sfvwrite_r+0x3c>
 8021fc0:	e7a7      	b.n	8021f12 <__sfvwrite_r+0xe>
 8021fc2:	4621      	mov	r1, r4
 8021fc4:	4630      	mov	r0, r6
 8021fc6:	f7fe fe81 	bl	8020ccc <__swsetup_r>
 8021fca:	2800      	cmp	r0, #0
 8021fcc:	d0ab      	beq.n	8021f26 <__sfvwrite_r+0x22>
 8021fce:	f04f 30ff 	mov.w	r0, #4294967295
 8021fd2:	e79f      	b.n	8021f14 <__sfvwrite_r+0x10>
 8021fd4:	e9d7 b900 	ldrd	fp, r9, [r7]
 8021fd8:	3708      	adds	r7, #8
 8021fda:	f1b9 0f00 	cmp.w	r9, #0
 8021fde:	d0f9      	beq.n	8021fd4 <__sfvwrite_r+0xd0>
 8021fe0:	45d1      	cmp	r9, sl
 8021fe2:	464b      	mov	r3, r9
 8021fe4:	69e1      	ldr	r1, [r4, #28]
 8021fe6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8021fe8:	bf28      	it	cs
 8021fea:	4653      	movcs	r3, sl
 8021fec:	465a      	mov	r2, fp
 8021fee:	4630      	mov	r0, r6
 8021ff0:	47a8      	blx	r5
 8021ff2:	2800      	cmp	r0, #0
 8021ff4:	dd38      	ble.n	8022068 <__sfvwrite_r+0x164>
 8021ff6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021ffa:	4483      	add	fp, r0
 8021ffc:	eba9 0900 	sub.w	r9, r9, r0
 8022000:	1a18      	subs	r0, r3, r0
 8022002:	f8c8 0008 	str.w	r0, [r8, #8]
 8022006:	2800      	cmp	r0, #0
 8022008:	d1e7      	bne.n	8021fda <__sfvwrite_r+0xd6>
 802200a:	e782      	b.n	8021f12 <__sfvwrite_r+0xe>
 802200c:	f04f 0b00 	mov.w	fp, #0
 8022010:	f8df a180 	ldr.w	sl, [pc, #384]	; 8022194 <__sfvwrite_r+0x290>
 8022014:	46d9      	mov	r9, fp
 8022016:	e7e0      	b.n	8021fda <__sfvwrite_r+0xd6>
 8022018:	e9d7 9a00 	ldrd	r9, sl, [r7]
 802201c:	3708      	adds	r7, #8
 802201e:	f1ba 0f00 	cmp.w	sl, #0
 8022022:	d0f9      	beq.n	8022018 <__sfvwrite_r+0x114>
 8022024:	89a3      	ldrh	r3, [r4, #12]
 8022026:	6820      	ldr	r0, [r4, #0]
 8022028:	68a2      	ldr	r2, [r4, #8]
 802202a:	0599      	lsls	r1, r3, #22
 802202c:	d563      	bpl.n	80220f6 <__sfvwrite_r+0x1f2>
 802202e:	4552      	cmp	r2, sl
 8022030:	d836      	bhi.n	80220a0 <__sfvwrite_r+0x19c>
 8022032:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8022036:	d033      	beq.n	80220a0 <__sfvwrite_r+0x19c>
 8022038:	6921      	ldr	r1, [r4, #16]
 802203a:	6965      	ldr	r5, [r4, #20]
 802203c:	eba0 0b01 	sub.w	fp, r0, r1
 8022040:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022044:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8022048:	f10b 0201 	add.w	r2, fp, #1
 802204c:	106d      	asrs	r5, r5, #1
 802204e:	4452      	add	r2, sl
 8022050:	4295      	cmp	r5, r2
 8022052:	bf38      	it	cc
 8022054:	4615      	movcc	r5, r2
 8022056:	055b      	lsls	r3, r3, #21
 8022058:	d53d      	bpl.n	80220d6 <__sfvwrite_r+0x1d2>
 802205a:	4629      	mov	r1, r5
 802205c:	4630      	mov	r0, r6
 802205e:	f000 f92f 	bl	80222c0 <_malloc_r>
 8022062:	b948      	cbnz	r0, 8022078 <__sfvwrite_r+0x174>
 8022064:	230c      	movs	r3, #12
 8022066:	6033      	str	r3, [r6, #0]
 8022068:	89a3      	ldrh	r3, [r4, #12]
 802206a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802206e:	81a3      	strh	r3, [r4, #12]
 8022070:	e7ad      	b.n	8021fce <__sfvwrite_r+0xca>
 8022072:	4699      	mov	r9, r3
 8022074:	469a      	mov	sl, r3
 8022076:	e7d2      	b.n	802201e <__sfvwrite_r+0x11a>
 8022078:	465a      	mov	r2, fp
 802207a:	6921      	ldr	r1, [r4, #16]
 802207c:	9001      	str	r0, [sp, #4]
 802207e:	f7fc f8fb 	bl	801e278 <memcpy>
 8022082:	89a2      	ldrh	r2, [r4, #12]
 8022084:	9b01      	ldr	r3, [sp, #4]
 8022086:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 802208a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802208e:	81a2      	strh	r2, [r4, #12]
 8022090:	6123      	str	r3, [r4, #16]
 8022092:	6165      	str	r5, [r4, #20]
 8022094:	445b      	add	r3, fp
 8022096:	eba5 050b 	sub.w	r5, r5, fp
 802209a:	6023      	str	r3, [r4, #0]
 802209c:	4652      	mov	r2, sl
 802209e:	60a5      	str	r5, [r4, #8]
 80220a0:	4552      	cmp	r2, sl
 80220a2:	bf28      	it	cs
 80220a4:	4652      	movcs	r2, sl
 80220a6:	6820      	ldr	r0, [r4, #0]
 80220a8:	9201      	str	r2, [sp, #4]
 80220aa:	4649      	mov	r1, r9
 80220ac:	f7fc f8f2 	bl	801e294 <memmove>
 80220b0:	68a3      	ldr	r3, [r4, #8]
 80220b2:	9a01      	ldr	r2, [sp, #4]
 80220b4:	1a9b      	subs	r3, r3, r2
 80220b6:	60a3      	str	r3, [r4, #8]
 80220b8:	6823      	ldr	r3, [r4, #0]
 80220ba:	441a      	add	r2, r3
 80220bc:	4655      	mov	r5, sl
 80220be:	6022      	str	r2, [r4, #0]
 80220c0:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80220c4:	44a9      	add	r9, r5
 80220c6:	ebaa 0a05 	sub.w	sl, sl, r5
 80220ca:	1b45      	subs	r5, r0, r5
 80220cc:	f8c8 5008 	str.w	r5, [r8, #8]
 80220d0:	2d00      	cmp	r5, #0
 80220d2:	d1a4      	bne.n	802201e <__sfvwrite_r+0x11a>
 80220d4:	e71d      	b.n	8021f12 <__sfvwrite_r+0xe>
 80220d6:	462a      	mov	r2, r5
 80220d8:	4630      	mov	r0, r6
 80220da:	f000 fe6f 	bl	8022dbc <_realloc_r>
 80220de:	4603      	mov	r3, r0
 80220e0:	2800      	cmp	r0, #0
 80220e2:	d1d5      	bne.n	8022090 <__sfvwrite_r+0x18c>
 80220e4:	6921      	ldr	r1, [r4, #16]
 80220e6:	4630      	mov	r0, r6
 80220e8:	f7ff fe4c 	bl	8021d84 <_free_r>
 80220ec:	89a3      	ldrh	r3, [r4, #12]
 80220ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80220f2:	81a3      	strh	r3, [r4, #12]
 80220f4:	e7b6      	b.n	8022064 <__sfvwrite_r+0x160>
 80220f6:	6923      	ldr	r3, [r4, #16]
 80220f8:	4283      	cmp	r3, r0
 80220fa:	d302      	bcc.n	8022102 <__sfvwrite_r+0x1fe>
 80220fc:	6961      	ldr	r1, [r4, #20]
 80220fe:	4551      	cmp	r1, sl
 8022100:	d915      	bls.n	802212e <__sfvwrite_r+0x22a>
 8022102:	4552      	cmp	r2, sl
 8022104:	bf28      	it	cs
 8022106:	4652      	movcs	r2, sl
 8022108:	4649      	mov	r1, r9
 802210a:	4615      	mov	r5, r2
 802210c:	f7fc f8c2 	bl	801e294 <memmove>
 8022110:	68a3      	ldr	r3, [r4, #8]
 8022112:	6822      	ldr	r2, [r4, #0]
 8022114:	1b5b      	subs	r3, r3, r5
 8022116:	442a      	add	r2, r5
 8022118:	60a3      	str	r3, [r4, #8]
 802211a:	6022      	str	r2, [r4, #0]
 802211c:	2b00      	cmp	r3, #0
 802211e:	d1cf      	bne.n	80220c0 <__sfvwrite_r+0x1bc>
 8022120:	4621      	mov	r1, r4
 8022122:	4630      	mov	r0, r6
 8022124:	f7ff fd32 	bl	8021b8c <_fflush_r>
 8022128:	2800      	cmp	r0, #0
 802212a:	d0c9      	beq.n	80220c0 <__sfvwrite_r+0x1bc>
 802212c:	e79c      	b.n	8022068 <__sfvwrite_r+0x164>
 802212e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022132:	459a      	cmp	sl, r3
 8022134:	bf38      	it	cc
 8022136:	4653      	movcc	r3, sl
 8022138:	6a65      	ldr	r5, [r4, #36]	; 0x24
 802213a:	fb93 f3f1 	sdiv	r3, r3, r1
 802213e:	464a      	mov	r2, r9
 8022140:	434b      	muls	r3, r1
 8022142:	4630      	mov	r0, r6
 8022144:	69e1      	ldr	r1, [r4, #28]
 8022146:	47a8      	blx	r5
 8022148:	1e05      	subs	r5, r0, #0
 802214a:	dcb9      	bgt.n	80220c0 <__sfvwrite_r+0x1bc>
 802214c:	e78c      	b.n	8022068 <__sfvwrite_r+0x164>
 802214e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8022152:	2000      	movs	r0, #0
 8022154:	3708      	adds	r7, #8
 8022156:	e6f3      	b.n	8021f40 <__sfvwrite_r+0x3c>
 8022158:	f10b 0901 	add.w	r9, fp, #1
 802215c:	e700      	b.n	8021f60 <__sfvwrite_r+0x5c>
 802215e:	4293      	cmp	r3, r2
 8022160:	dc08      	bgt.n	8022174 <__sfvwrite_r+0x270>
 8022162:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8022164:	69e1      	ldr	r1, [r4, #28]
 8022166:	4652      	mov	r2, sl
 8022168:	4630      	mov	r0, r6
 802216a:	47a8      	blx	r5
 802216c:	1e05      	subs	r5, r0, #0
 802216e:	f73f af13 	bgt.w	8021f98 <__sfvwrite_r+0x94>
 8022172:	e779      	b.n	8022068 <__sfvwrite_r+0x164>
 8022174:	4651      	mov	r1, sl
 8022176:	9201      	str	r2, [sp, #4]
 8022178:	f7fc f88c 	bl	801e294 <memmove>
 802217c:	9a01      	ldr	r2, [sp, #4]
 802217e:	68a3      	ldr	r3, [r4, #8]
 8022180:	1a9b      	subs	r3, r3, r2
 8022182:	60a3      	str	r3, [r4, #8]
 8022184:	6823      	ldr	r3, [r4, #0]
 8022186:	4413      	add	r3, r2
 8022188:	6023      	str	r3, [r4, #0]
 802218a:	4615      	mov	r5, r2
 802218c:	e704      	b.n	8021f98 <__sfvwrite_r+0x94>
 802218e:	2001      	movs	r0, #1
 8022190:	e70c      	b.n	8021fac <__sfvwrite_r+0xa8>
 8022192:	bf00      	nop
 8022194:	7ffffc00 	.word	0x7ffffc00

08022198 <_fwalk_reent>:
 8022198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802219c:	4606      	mov	r6, r0
 802219e:	4688      	mov	r8, r1
 80221a0:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 80221a4:	2700      	movs	r7, #0
 80221a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80221aa:	f1b9 0901 	subs.w	r9, r9, #1
 80221ae:	d505      	bpl.n	80221bc <_fwalk_reent+0x24>
 80221b0:	6824      	ldr	r4, [r4, #0]
 80221b2:	2c00      	cmp	r4, #0
 80221b4:	d1f7      	bne.n	80221a6 <_fwalk_reent+0xe>
 80221b6:	4638      	mov	r0, r7
 80221b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80221bc:	89ab      	ldrh	r3, [r5, #12]
 80221be:	2b01      	cmp	r3, #1
 80221c0:	d907      	bls.n	80221d2 <_fwalk_reent+0x3a>
 80221c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80221c6:	3301      	adds	r3, #1
 80221c8:	d003      	beq.n	80221d2 <_fwalk_reent+0x3a>
 80221ca:	4629      	mov	r1, r5
 80221cc:	4630      	mov	r0, r6
 80221ce:	47c0      	blx	r8
 80221d0:	4307      	orrs	r7, r0
 80221d2:	3568      	adds	r5, #104	; 0x68
 80221d4:	e7e9      	b.n	80221aa <_fwalk_reent+0x12>
	...

080221d8 <_localeconv_r>:
 80221d8:	4800      	ldr	r0, [pc, #0]	; (80221dc <_localeconv_r+0x4>)
 80221da:	4770      	bx	lr
 80221dc:	20000954 	.word	0x20000954

080221e0 <__retarget_lock_init_recursive>:
 80221e0:	4770      	bx	lr

080221e2 <__retarget_lock_close_recursive>:
 80221e2:	4770      	bx	lr

080221e4 <__retarget_lock_acquire_recursive>:
 80221e4:	4770      	bx	lr

080221e6 <__retarget_lock_release_recursive>:
 80221e6:	4770      	bx	lr

080221e8 <__swhatbuf_r>:
 80221e8:	b570      	push	{r4, r5, r6, lr}
 80221ea:	460e      	mov	r6, r1
 80221ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80221f0:	2900      	cmp	r1, #0
 80221f2:	b096      	sub	sp, #88	; 0x58
 80221f4:	4614      	mov	r4, r2
 80221f6:	461d      	mov	r5, r3
 80221f8:	da0a      	bge.n	8022210 <__swhatbuf_r+0x28>
 80221fa:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 80221fe:	2300      	movs	r3, #0
 8022200:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 8022204:	602b      	str	r3, [r5, #0]
 8022206:	d116      	bne.n	8022236 <__swhatbuf_r+0x4e>
 8022208:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802220c:	6023      	str	r3, [r4, #0]
 802220e:	e015      	b.n	802223c <__swhatbuf_r+0x54>
 8022210:	466a      	mov	r2, sp
 8022212:	f001 ff33 	bl	802407c <_fstat_r>
 8022216:	2800      	cmp	r0, #0
 8022218:	dbef      	blt.n	80221fa <__swhatbuf_r+0x12>
 802221a:	9a01      	ldr	r2, [sp, #4]
 802221c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8022220:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8022224:	425a      	negs	r2, r3
 8022226:	415a      	adcs	r2, r3
 8022228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802222c:	602a      	str	r2, [r5, #0]
 802222e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8022232:	6023      	str	r3, [r4, #0]
 8022234:	e002      	b.n	802223c <__swhatbuf_r+0x54>
 8022236:	2240      	movs	r2, #64	; 0x40
 8022238:	6022      	str	r2, [r4, #0]
 802223a:	4618      	mov	r0, r3
 802223c:	b016      	add	sp, #88	; 0x58
 802223e:	bd70      	pop	{r4, r5, r6, pc}

08022240 <__smakebuf_r>:
 8022240:	898b      	ldrh	r3, [r1, #12]
 8022242:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022244:	079d      	lsls	r5, r3, #30
 8022246:	4606      	mov	r6, r0
 8022248:	460c      	mov	r4, r1
 802224a:	d507      	bpl.n	802225c <__smakebuf_r+0x1c>
 802224c:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8022250:	6023      	str	r3, [r4, #0]
 8022252:	6123      	str	r3, [r4, #16]
 8022254:	2301      	movs	r3, #1
 8022256:	6163      	str	r3, [r4, #20]
 8022258:	b002      	add	sp, #8
 802225a:	bd70      	pop	{r4, r5, r6, pc}
 802225c:	ab01      	add	r3, sp, #4
 802225e:	466a      	mov	r2, sp
 8022260:	f7ff ffc2 	bl	80221e8 <__swhatbuf_r>
 8022264:	9900      	ldr	r1, [sp, #0]
 8022266:	4605      	mov	r5, r0
 8022268:	4630      	mov	r0, r6
 802226a:	f000 f829 	bl	80222c0 <_malloc_r>
 802226e:	b948      	cbnz	r0, 8022284 <__smakebuf_r+0x44>
 8022270:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022274:	059a      	lsls	r2, r3, #22
 8022276:	d4ef      	bmi.n	8022258 <__smakebuf_r+0x18>
 8022278:	f023 0303 	bic.w	r3, r3, #3
 802227c:	f043 0302 	orr.w	r3, r3, #2
 8022280:	81a3      	strh	r3, [r4, #12]
 8022282:	e7e3      	b.n	802224c <__smakebuf_r+0xc>
 8022284:	4b0d      	ldr	r3, [pc, #52]	; (80222bc <__smakebuf_r+0x7c>)
 8022286:	63f3      	str	r3, [r6, #60]	; 0x3c
 8022288:	89a3      	ldrh	r3, [r4, #12]
 802228a:	6020      	str	r0, [r4, #0]
 802228c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022290:	81a3      	strh	r3, [r4, #12]
 8022292:	9b00      	ldr	r3, [sp, #0]
 8022294:	6163      	str	r3, [r4, #20]
 8022296:	9b01      	ldr	r3, [sp, #4]
 8022298:	6120      	str	r0, [r4, #16]
 802229a:	b15b      	cbz	r3, 80222b4 <__smakebuf_r+0x74>
 802229c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80222a0:	4630      	mov	r0, r6
 80222a2:	f001 fefd 	bl	80240a0 <_isatty_r>
 80222a6:	b128      	cbz	r0, 80222b4 <__smakebuf_r+0x74>
 80222a8:	89a3      	ldrh	r3, [r4, #12]
 80222aa:	f023 0303 	bic.w	r3, r3, #3
 80222ae:	f043 0301 	orr.w	r3, r3, #1
 80222b2:	81a3      	strh	r3, [r4, #12]
 80222b4:	89a0      	ldrh	r0, [r4, #12]
 80222b6:	4305      	orrs	r5, r0
 80222b8:	81a5      	strh	r5, [r4, #12]
 80222ba:	e7cd      	b.n	8022258 <__smakebuf_r+0x18>
 80222bc:	08021c29 	.word	0x08021c29

080222c0 <_malloc_r>:
 80222c0:	f101 030b 	add.w	r3, r1, #11
 80222c4:	2b16      	cmp	r3, #22
 80222c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80222ca:	4605      	mov	r5, r0
 80222cc:	d906      	bls.n	80222dc <_malloc_r+0x1c>
 80222ce:	f033 0707 	bics.w	r7, r3, #7
 80222d2:	d504      	bpl.n	80222de <_malloc_r+0x1e>
 80222d4:	230c      	movs	r3, #12
 80222d6:	602b      	str	r3, [r5, #0]
 80222d8:	2400      	movs	r4, #0
 80222da:	e1a5      	b.n	8022628 <_malloc_r+0x368>
 80222dc:	2710      	movs	r7, #16
 80222de:	42b9      	cmp	r1, r7
 80222e0:	d8f8      	bhi.n	80222d4 <_malloc_r+0x14>
 80222e2:	4628      	mov	r0, r5
 80222e4:	f000 fa28 	bl	8022738 <__malloc_lock>
 80222e8:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 80222ec:	4eb0      	ldr	r6, [pc, #704]	; (80225b0 <_malloc_r+0x2f0>)
 80222ee:	d237      	bcs.n	8022360 <_malloc_r+0xa0>
 80222f0:	f107 0208 	add.w	r2, r7, #8
 80222f4:	4432      	add	r2, r6
 80222f6:	f1a2 0108 	sub.w	r1, r2, #8
 80222fa:	6854      	ldr	r4, [r2, #4]
 80222fc:	428c      	cmp	r4, r1
 80222fe:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8022302:	d102      	bne.n	802230a <_malloc_r+0x4a>
 8022304:	68d4      	ldr	r4, [r2, #12]
 8022306:	42a2      	cmp	r2, r4
 8022308:	d010      	beq.n	802232c <_malloc_r+0x6c>
 802230a:	6863      	ldr	r3, [r4, #4]
 802230c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8022310:	f023 0303 	bic.w	r3, r3, #3
 8022314:	60ca      	str	r2, [r1, #12]
 8022316:	4423      	add	r3, r4
 8022318:	6091      	str	r1, [r2, #8]
 802231a:	685a      	ldr	r2, [r3, #4]
 802231c:	f042 0201 	orr.w	r2, r2, #1
 8022320:	605a      	str	r2, [r3, #4]
 8022322:	4628      	mov	r0, r5
 8022324:	f000 fa0e 	bl	8022744 <__malloc_unlock>
 8022328:	3408      	adds	r4, #8
 802232a:	e17d      	b.n	8022628 <_malloc_r+0x368>
 802232c:	3302      	adds	r3, #2
 802232e:	6934      	ldr	r4, [r6, #16]
 8022330:	49a0      	ldr	r1, [pc, #640]	; (80225b4 <_malloc_r+0x2f4>)
 8022332:	428c      	cmp	r4, r1
 8022334:	d077      	beq.n	8022426 <_malloc_r+0x166>
 8022336:	6862      	ldr	r2, [r4, #4]
 8022338:	f022 0c03 	bic.w	ip, r2, #3
 802233c:	ebac 0007 	sub.w	r0, ip, r7
 8022340:	280f      	cmp	r0, #15
 8022342:	dd48      	ble.n	80223d6 <_malloc_r+0x116>
 8022344:	19e2      	adds	r2, r4, r7
 8022346:	f040 0301 	orr.w	r3, r0, #1
 802234a:	f047 0701 	orr.w	r7, r7, #1
 802234e:	6067      	str	r7, [r4, #4]
 8022350:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8022354:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8022358:	6053      	str	r3, [r2, #4]
 802235a:	f844 000c 	str.w	r0, [r4, ip]
 802235e:	e7e0      	b.n	8022322 <_malloc_r+0x62>
 8022360:	0a7b      	lsrs	r3, r7, #9
 8022362:	d02a      	beq.n	80223ba <_malloc_r+0xfa>
 8022364:	2b04      	cmp	r3, #4
 8022366:	d812      	bhi.n	802238e <_malloc_r+0xce>
 8022368:	09bb      	lsrs	r3, r7, #6
 802236a:	3338      	adds	r3, #56	; 0x38
 802236c:	1c5a      	adds	r2, r3, #1
 802236e:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8022372:	f1a2 0c08 	sub.w	ip, r2, #8
 8022376:	6854      	ldr	r4, [r2, #4]
 8022378:	4564      	cmp	r4, ip
 802237a:	d006      	beq.n	802238a <_malloc_r+0xca>
 802237c:	6862      	ldr	r2, [r4, #4]
 802237e:	f022 0203 	bic.w	r2, r2, #3
 8022382:	1bd0      	subs	r0, r2, r7
 8022384:	280f      	cmp	r0, #15
 8022386:	dd1c      	ble.n	80223c2 <_malloc_r+0x102>
 8022388:	3b01      	subs	r3, #1
 802238a:	3301      	adds	r3, #1
 802238c:	e7cf      	b.n	802232e <_malloc_r+0x6e>
 802238e:	2b14      	cmp	r3, #20
 8022390:	d801      	bhi.n	8022396 <_malloc_r+0xd6>
 8022392:	335b      	adds	r3, #91	; 0x5b
 8022394:	e7ea      	b.n	802236c <_malloc_r+0xac>
 8022396:	2b54      	cmp	r3, #84	; 0x54
 8022398:	d802      	bhi.n	80223a0 <_malloc_r+0xe0>
 802239a:	0b3b      	lsrs	r3, r7, #12
 802239c:	336e      	adds	r3, #110	; 0x6e
 802239e:	e7e5      	b.n	802236c <_malloc_r+0xac>
 80223a0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80223a4:	d802      	bhi.n	80223ac <_malloc_r+0xec>
 80223a6:	0bfb      	lsrs	r3, r7, #15
 80223a8:	3377      	adds	r3, #119	; 0x77
 80223aa:	e7df      	b.n	802236c <_malloc_r+0xac>
 80223ac:	f240 5254 	movw	r2, #1364	; 0x554
 80223b0:	4293      	cmp	r3, r2
 80223b2:	d804      	bhi.n	80223be <_malloc_r+0xfe>
 80223b4:	0cbb      	lsrs	r3, r7, #18
 80223b6:	337c      	adds	r3, #124	; 0x7c
 80223b8:	e7d8      	b.n	802236c <_malloc_r+0xac>
 80223ba:	233f      	movs	r3, #63	; 0x3f
 80223bc:	e7d6      	b.n	802236c <_malloc_r+0xac>
 80223be:	237e      	movs	r3, #126	; 0x7e
 80223c0:	e7d4      	b.n	802236c <_malloc_r+0xac>
 80223c2:	2800      	cmp	r0, #0
 80223c4:	68e1      	ldr	r1, [r4, #12]
 80223c6:	db04      	blt.n	80223d2 <_malloc_r+0x112>
 80223c8:	68a3      	ldr	r3, [r4, #8]
 80223ca:	60d9      	str	r1, [r3, #12]
 80223cc:	608b      	str	r3, [r1, #8]
 80223ce:	18a3      	adds	r3, r4, r2
 80223d0:	e7a3      	b.n	802231a <_malloc_r+0x5a>
 80223d2:	460c      	mov	r4, r1
 80223d4:	e7d0      	b.n	8022378 <_malloc_r+0xb8>
 80223d6:	2800      	cmp	r0, #0
 80223d8:	e9c6 1104 	strd	r1, r1, [r6, #16]
 80223dc:	db07      	blt.n	80223ee <_malloc_r+0x12e>
 80223de:	44a4      	add	ip, r4
 80223e0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80223e4:	f043 0301 	orr.w	r3, r3, #1
 80223e8:	f8cc 3004 	str.w	r3, [ip, #4]
 80223ec:	e799      	b.n	8022322 <_malloc_r+0x62>
 80223ee:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 80223f2:	6870      	ldr	r0, [r6, #4]
 80223f4:	f080 8096 	bcs.w	8022524 <_malloc_r+0x264>
 80223f8:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 80223fc:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8022400:	f04f 0c01 	mov.w	ip, #1
 8022404:	3201      	adds	r2, #1
 8022406:	fa0c fc0e 	lsl.w	ip, ip, lr
 802240a:	ea4c 0000 	orr.w	r0, ip, r0
 802240e:	6070      	str	r0, [r6, #4]
 8022410:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8022414:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8022418:	3808      	subs	r0, #8
 802241a:	e9c4 c002 	strd	ip, r0, [r4, #8]
 802241e:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8022422:	f8cc 400c 	str.w	r4, [ip, #12]
 8022426:	2001      	movs	r0, #1
 8022428:	109a      	asrs	r2, r3, #2
 802242a:	fa00 f202 	lsl.w	r2, r0, r2
 802242e:	6870      	ldr	r0, [r6, #4]
 8022430:	4290      	cmp	r0, r2
 8022432:	d326      	bcc.n	8022482 <_malloc_r+0x1c2>
 8022434:	4210      	tst	r0, r2
 8022436:	d106      	bne.n	8022446 <_malloc_r+0x186>
 8022438:	f023 0303 	bic.w	r3, r3, #3
 802243c:	0052      	lsls	r2, r2, #1
 802243e:	4210      	tst	r0, r2
 8022440:	f103 0304 	add.w	r3, r3, #4
 8022444:	d0fa      	beq.n	802243c <_malloc_r+0x17c>
 8022446:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 802244a:	46c1      	mov	r9, r8
 802244c:	469e      	mov	lr, r3
 802244e:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8022452:	454c      	cmp	r4, r9
 8022454:	f040 80ba 	bne.w	80225cc <_malloc_r+0x30c>
 8022458:	f10e 0e01 	add.w	lr, lr, #1
 802245c:	f01e 0f03 	tst.w	lr, #3
 8022460:	f109 0908 	add.w	r9, r9, #8
 8022464:	d1f3      	bne.n	802244e <_malloc_r+0x18e>
 8022466:	0798      	lsls	r0, r3, #30
 8022468:	f040 80e4 	bne.w	8022634 <_malloc_r+0x374>
 802246c:	6873      	ldr	r3, [r6, #4]
 802246e:	ea23 0302 	bic.w	r3, r3, r2
 8022472:	6073      	str	r3, [r6, #4]
 8022474:	6870      	ldr	r0, [r6, #4]
 8022476:	0052      	lsls	r2, r2, #1
 8022478:	4290      	cmp	r0, r2
 802247a:	d302      	bcc.n	8022482 <_malloc_r+0x1c2>
 802247c:	2a00      	cmp	r2, #0
 802247e:	f040 80e6 	bne.w	802264e <_malloc_r+0x38e>
 8022482:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8022486:	f8da 3004 	ldr.w	r3, [sl, #4]
 802248a:	f023 0903 	bic.w	r9, r3, #3
 802248e:	45b9      	cmp	r9, r7
 8022490:	d304      	bcc.n	802249c <_malloc_r+0x1dc>
 8022492:	eba9 0207 	sub.w	r2, r9, r7
 8022496:	2a0f      	cmp	r2, #15
 8022498:	f300 8142 	bgt.w	8022720 <_malloc_r+0x460>
 802249c:	4b46      	ldr	r3, [pc, #280]	; (80225b8 <_malloc_r+0x2f8>)
 802249e:	6819      	ldr	r1, [r3, #0]
 80224a0:	3110      	adds	r1, #16
 80224a2:	4439      	add	r1, r7
 80224a4:	2008      	movs	r0, #8
 80224a6:	9101      	str	r1, [sp, #4]
 80224a8:	f000 ff45 	bl	8023336 <sysconf>
 80224ac:	4a43      	ldr	r2, [pc, #268]	; (80225bc <_malloc_r+0x2fc>)
 80224ae:	9901      	ldr	r1, [sp, #4]
 80224b0:	6813      	ldr	r3, [r2, #0]
 80224b2:	3301      	adds	r3, #1
 80224b4:	bf1f      	itttt	ne
 80224b6:	f101 31ff 	addne.w	r1, r1, #4294967295
 80224ba:	1809      	addne	r1, r1, r0
 80224bc:	4243      	negne	r3, r0
 80224be:	4019      	andne	r1, r3
 80224c0:	4680      	mov	r8, r0
 80224c2:	4628      	mov	r0, r5
 80224c4:	9101      	str	r1, [sp, #4]
 80224c6:	f000 fe55 	bl	8023174 <_sbrk_r>
 80224ca:	1c42      	adds	r2, r0, #1
 80224cc:	eb0a 0b09 	add.w	fp, sl, r9
 80224d0:	4604      	mov	r4, r0
 80224d2:	f000 80f8 	beq.w	80226c6 <_malloc_r+0x406>
 80224d6:	4583      	cmp	fp, r0
 80224d8:	9901      	ldr	r1, [sp, #4]
 80224da:	4a38      	ldr	r2, [pc, #224]	; (80225bc <_malloc_r+0x2fc>)
 80224dc:	d902      	bls.n	80224e4 <_malloc_r+0x224>
 80224de:	45b2      	cmp	sl, r6
 80224e0:	f040 80f1 	bne.w	80226c6 <_malloc_r+0x406>
 80224e4:	4b36      	ldr	r3, [pc, #216]	; (80225c0 <_malloc_r+0x300>)
 80224e6:	6818      	ldr	r0, [r3, #0]
 80224e8:	45a3      	cmp	fp, r4
 80224ea:	eb00 0e01 	add.w	lr, r0, r1
 80224ee:	f8c3 e000 	str.w	lr, [r3]
 80224f2:	f108 3cff 	add.w	ip, r8, #4294967295
 80224f6:	f040 80ac 	bne.w	8022652 <_malloc_r+0x392>
 80224fa:	ea1b 0f0c 	tst.w	fp, ip
 80224fe:	f040 80a8 	bne.w	8022652 <_malloc_r+0x392>
 8022502:	68b2      	ldr	r2, [r6, #8]
 8022504:	4449      	add	r1, r9
 8022506:	f041 0101 	orr.w	r1, r1, #1
 802250a:	6051      	str	r1, [r2, #4]
 802250c:	4a2d      	ldr	r2, [pc, #180]	; (80225c4 <_malloc_r+0x304>)
 802250e:	681b      	ldr	r3, [r3, #0]
 8022510:	6811      	ldr	r1, [r2, #0]
 8022512:	428b      	cmp	r3, r1
 8022514:	bf88      	it	hi
 8022516:	6013      	strhi	r3, [r2, #0]
 8022518:	4a2b      	ldr	r2, [pc, #172]	; (80225c8 <_malloc_r+0x308>)
 802251a:	6811      	ldr	r1, [r2, #0]
 802251c:	428b      	cmp	r3, r1
 802251e:	bf88      	it	hi
 8022520:	6013      	strhi	r3, [r2, #0]
 8022522:	e0d0      	b.n	80226c6 <_malloc_r+0x406>
 8022524:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 8022528:	ea4f 225c 	mov.w	r2, ip, lsr #9
 802252c:	d218      	bcs.n	8022560 <_malloc_r+0x2a0>
 802252e:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8022532:	3238      	adds	r2, #56	; 0x38
 8022534:	f102 0e01 	add.w	lr, r2, #1
 8022538:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 802253c:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8022540:	45f0      	cmp	r8, lr
 8022542:	d12b      	bne.n	802259c <_malloc_r+0x2dc>
 8022544:	1092      	asrs	r2, r2, #2
 8022546:	f04f 0c01 	mov.w	ip, #1
 802254a:	fa0c f202 	lsl.w	r2, ip, r2
 802254e:	4310      	orrs	r0, r2
 8022550:	6070      	str	r0, [r6, #4]
 8022552:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8022556:	f8c8 4008 	str.w	r4, [r8, #8]
 802255a:	f8ce 400c 	str.w	r4, [lr, #12]
 802255e:	e762      	b.n	8022426 <_malloc_r+0x166>
 8022560:	2a14      	cmp	r2, #20
 8022562:	d801      	bhi.n	8022568 <_malloc_r+0x2a8>
 8022564:	325b      	adds	r2, #91	; 0x5b
 8022566:	e7e5      	b.n	8022534 <_malloc_r+0x274>
 8022568:	2a54      	cmp	r2, #84	; 0x54
 802256a:	d803      	bhi.n	8022574 <_malloc_r+0x2b4>
 802256c:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8022570:	326e      	adds	r2, #110	; 0x6e
 8022572:	e7df      	b.n	8022534 <_malloc_r+0x274>
 8022574:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8022578:	d803      	bhi.n	8022582 <_malloc_r+0x2c2>
 802257a:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 802257e:	3277      	adds	r2, #119	; 0x77
 8022580:	e7d8      	b.n	8022534 <_malloc_r+0x274>
 8022582:	f240 5e54 	movw	lr, #1364	; 0x554
 8022586:	4572      	cmp	r2, lr
 8022588:	bf9a      	itte	ls
 802258a:	ea4f 429c 	movls.w	r2, ip, lsr #18
 802258e:	327c      	addls	r2, #124	; 0x7c
 8022590:	227e      	movhi	r2, #126	; 0x7e
 8022592:	e7cf      	b.n	8022534 <_malloc_r+0x274>
 8022594:	f8de e008 	ldr.w	lr, [lr, #8]
 8022598:	45f0      	cmp	r8, lr
 802259a:	d005      	beq.n	80225a8 <_malloc_r+0x2e8>
 802259c:	f8de 2004 	ldr.w	r2, [lr, #4]
 80225a0:	f022 0203 	bic.w	r2, r2, #3
 80225a4:	4562      	cmp	r2, ip
 80225a6:	d8f5      	bhi.n	8022594 <_malloc_r+0x2d4>
 80225a8:	f8de 800c 	ldr.w	r8, [lr, #12]
 80225ac:	e7d1      	b.n	8022552 <_malloc_r+0x292>
 80225ae:	bf00      	nop
 80225b0:	20000454 	.word	0x20000454
 80225b4:	2000045c 	.word	0x2000045c
 80225b8:	2000c380 	.word	0x2000c380
 80225bc:	2000085c 	.word	0x2000085c
 80225c0:	2000c350 	.word	0x2000c350
 80225c4:	2000c378 	.word	0x2000c378
 80225c8:	2000c37c 	.word	0x2000c37c
 80225cc:	6860      	ldr	r0, [r4, #4]
 80225ce:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80225d2:	f020 0003 	bic.w	r0, r0, #3
 80225d6:	eba0 0a07 	sub.w	sl, r0, r7
 80225da:	f1ba 0f0f 	cmp.w	sl, #15
 80225de:	dd12      	ble.n	8022606 <_malloc_r+0x346>
 80225e0:	68a3      	ldr	r3, [r4, #8]
 80225e2:	19e2      	adds	r2, r4, r7
 80225e4:	f047 0701 	orr.w	r7, r7, #1
 80225e8:	6067      	str	r7, [r4, #4]
 80225ea:	f8c3 c00c 	str.w	ip, [r3, #12]
 80225ee:	f8cc 3008 	str.w	r3, [ip, #8]
 80225f2:	f04a 0301 	orr.w	r3, sl, #1
 80225f6:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80225fa:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80225fe:	6053      	str	r3, [r2, #4]
 8022600:	f844 a000 	str.w	sl, [r4, r0]
 8022604:	e68d      	b.n	8022322 <_malloc_r+0x62>
 8022606:	f1ba 0f00 	cmp.w	sl, #0
 802260a:	db11      	blt.n	8022630 <_malloc_r+0x370>
 802260c:	4420      	add	r0, r4
 802260e:	6843      	ldr	r3, [r0, #4]
 8022610:	f043 0301 	orr.w	r3, r3, #1
 8022614:	6043      	str	r3, [r0, #4]
 8022616:	f854 3f08 	ldr.w	r3, [r4, #8]!
 802261a:	4628      	mov	r0, r5
 802261c:	f8c3 c00c 	str.w	ip, [r3, #12]
 8022620:	f8cc 3008 	str.w	r3, [ip, #8]
 8022624:	f000 f88e 	bl	8022744 <__malloc_unlock>
 8022628:	4620      	mov	r0, r4
 802262a:	b003      	add	sp, #12
 802262c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022630:	4664      	mov	r4, ip
 8022632:	e70e      	b.n	8022452 <_malloc_r+0x192>
 8022634:	f858 0908 	ldr.w	r0, [r8], #-8
 8022638:	4540      	cmp	r0, r8
 802263a:	f103 33ff 	add.w	r3, r3, #4294967295
 802263e:	f43f af12 	beq.w	8022466 <_malloc_r+0x1a6>
 8022642:	e717      	b.n	8022474 <_malloc_r+0x1b4>
 8022644:	3304      	adds	r3, #4
 8022646:	0052      	lsls	r2, r2, #1
 8022648:	4210      	tst	r0, r2
 802264a:	d0fb      	beq.n	8022644 <_malloc_r+0x384>
 802264c:	e6fb      	b.n	8022446 <_malloc_r+0x186>
 802264e:	4673      	mov	r3, lr
 8022650:	e7fa      	b.n	8022648 <_malloc_r+0x388>
 8022652:	6810      	ldr	r0, [r2, #0]
 8022654:	3001      	adds	r0, #1
 8022656:	bf1b      	ittet	ne
 8022658:	eba4 0b0b 	subne.w	fp, r4, fp
 802265c:	eb0b 020e 	addne.w	r2, fp, lr
 8022660:	6014      	streq	r4, [r2, #0]
 8022662:	601a      	strne	r2, [r3, #0]
 8022664:	f014 0b07 	ands.w	fp, r4, #7
 8022668:	bf1a      	itte	ne
 802266a:	f1cb 0008 	rsbne	r0, fp, #8
 802266e:	1824      	addne	r4, r4, r0
 8022670:	4658      	moveq	r0, fp
 8022672:	1862      	adds	r2, r4, r1
 8022674:	ea02 010c 	and.w	r1, r2, ip
 8022678:	4480      	add	r8, r0
 802267a:	eba8 0801 	sub.w	r8, r8, r1
 802267e:	ea08 080c 	and.w	r8, r8, ip
 8022682:	4641      	mov	r1, r8
 8022684:	4628      	mov	r0, r5
 8022686:	9201      	str	r2, [sp, #4]
 8022688:	f000 fd74 	bl	8023174 <_sbrk_r>
 802268c:	1c43      	adds	r3, r0, #1
 802268e:	9a01      	ldr	r2, [sp, #4]
 8022690:	4b28      	ldr	r3, [pc, #160]	; (8022734 <_malloc_r+0x474>)
 8022692:	d107      	bne.n	80226a4 <_malloc_r+0x3e4>
 8022694:	f1bb 0f00 	cmp.w	fp, #0
 8022698:	d023      	beq.n	80226e2 <_malloc_r+0x422>
 802269a:	f1ab 0008 	sub.w	r0, fp, #8
 802269e:	4410      	add	r0, r2
 80226a0:	f04f 0800 	mov.w	r8, #0
 80226a4:	681a      	ldr	r2, [r3, #0]
 80226a6:	60b4      	str	r4, [r6, #8]
 80226a8:	1b00      	subs	r0, r0, r4
 80226aa:	4440      	add	r0, r8
 80226ac:	4442      	add	r2, r8
 80226ae:	f040 0001 	orr.w	r0, r0, #1
 80226b2:	45b2      	cmp	sl, r6
 80226b4:	601a      	str	r2, [r3, #0]
 80226b6:	6060      	str	r0, [r4, #4]
 80226b8:	f43f af28 	beq.w	802250c <_malloc_r+0x24c>
 80226bc:	f1b9 0f0f 	cmp.w	r9, #15
 80226c0:	d812      	bhi.n	80226e8 <_malloc_r+0x428>
 80226c2:	2301      	movs	r3, #1
 80226c4:	6063      	str	r3, [r4, #4]
 80226c6:	68b3      	ldr	r3, [r6, #8]
 80226c8:	685b      	ldr	r3, [r3, #4]
 80226ca:	f023 0303 	bic.w	r3, r3, #3
 80226ce:	42bb      	cmp	r3, r7
 80226d0:	eba3 0207 	sub.w	r2, r3, r7
 80226d4:	d301      	bcc.n	80226da <_malloc_r+0x41a>
 80226d6:	2a0f      	cmp	r2, #15
 80226d8:	dc22      	bgt.n	8022720 <_malloc_r+0x460>
 80226da:	4628      	mov	r0, r5
 80226dc:	f000 f832 	bl	8022744 <__malloc_unlock>
 80226e0:	e5fa      	b.n	80222d8 <_malloc_r+0x18>
 80226e2:	4610      	mov	r0, r2
 80226e4:	46d8      	mov	r8, fp
 80226e6:	e7dd      	b.n	80226a4 <_malloc_r+0x3e4>
 80226e8:	f8da 2004 	ldr.w	r2, [sl, #4]
 80226ec:	f1a9 090c 	sub.w	r9, r9, #12
 80226f0:	f029 0907 	bic.w	r9, r9, #7
 80226f4:	f002 0201 	and.w	r2, r2, #1
 80226f8:	ea42 0209 	orr.w	r2, r2, r9
 80226fc:	f8ca 2004 	str.w	r2, [sl, #4]
 8022700:	2105      	movs	r1, #5
 8022702:	eb0a 0209 	add.w	r2, sl, r9
 8022706:	f1b9 0f0f 	cmp.w	r9, #15
 802270a:	e9c2 1101 	strd	r1, r1, [r2, #4]
 802270e:	f67f aefd 	bls.w	802250c <_malloc_r+0x24c>
 8022712:	f10a 0108 	add.w	r1, sl, #8
 8022716:	4628      	mov	r0, r5
 8022718:	f7ff fb34 	bl	8021d84 <_free_r>
 802271c:	4b05      	ldr	r3, [pc, #20]	; (8022734 <_malloc_r+0x474>)
 802271e:	e6f5      	b.n	802250c <_malloc_r+0x24c>
 8022720:	68b4      	ldr	r4, [r6, #8]
 8022722:	f047 0301 	orr.w	r3, r7, #1
 8022726:	4427      	add	r7, r4
 8022728:	f042 0201 	orr.w	r2, r2, #1
 802272c:	6063      	str	r3, [r4, #4]
 802272e:	60b7      	str	r7, [r6, #8]
 8022730:	607a      	str	r2, [r7, #4]
 8022732:	e5f6      	b.n	8022322 <_malloc_r+0x62>
 8022734:	2000c350 	.word	0x2000c350

08022738 <__malloc_lock>:
 8022738:	4801      	ldr	r0, [pc, #4]	; (8022740 <__malloc_lock+0x8>)
 802273a:	f7ff bd53 	b.w	80221e4 <__retarget_lock_acquire_recursive>
 802273e:	bf00      	nop
 8022740:	2000c34d 	.word	0x2000c34d

08022744 <__malloc_unlock>:
 8022744:	4801      	ldr	r0, [pc, #4]	; (802274c <__malloc_unlock+0x8>)
 8022746:	f7ff bd4e 	b.w	80221e6 <__retarget_lock_release_recursive>
 802274a:	bf00      	nop
 802274c:	2000c34d 	.word	0x2000c34d

08022750 <_Balloc>:
 8022750:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8022752:	b570      	push	{r4, r5, r6, lr}
 8022754:	4605      	mov	r5, r0
 8022756:	460c      	mov	r4, r1
 8022758:	b17b      	cbz	r3, 802277a <_Balloc+0x2a>
 802275a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 802275c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8022760:	b9a0      	cbnz	r0, 802278c <_Balloc+0x3c>
 8022762:	2101      	movs	r1, #1
 8022764:	fa01 f604 	lsl.w	r6, r1, r4
 8022768:	1d72      	adds	r2, r6, #5
 802276a:	0092      	lsls	r2, r2, #2
 802276c:	4628      	mov	r0, r5
 802276e:	f001 fb69 	bl	8023e44 <_calloc_r>
 8022772:	b148      	cbz	r0, 8022788 <_Balloc+0x38>
 8022774:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8022778:	e00b      	b.n	8022792 <_Balloc+0x42>
 802277a:	2221      	movs	r2, #33	; 0x21
 802277c:	2104      	movs	r1, #4
 802277e:	f001 fb61 	bl	8023e44 <_calloc_r>
 8022782:	64e8      	str	r0, [r5, #76]	; 0x4c
 8022784:	2800      	cmp	r0, #0
 8022786:	d1e8      	bne.n	802275a <_Balloc+0xa>
 8022788:	2000      	movs	r0, #0
 802278a:	bd70      	pop	{r4, r5, r6, pc}
 802278c:	6802      	ldr	r2, [r0, #0]
 802278e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8022792:	2300      	movs	r3, #0
 8022794:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8022798:	e7f7      	b.n	802278a <_Balloc+0x3a>

0802279a <_Bfree>:
 802279a:	b131      	cbz	r1, 80227aa <_Bfree+0x10>
 802279c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 802279e:	684a      	ldr	r2, [r1, #4]
 80227a0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80227a4:	6008      	str	r0, [r1, #0]
 80227a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80227aa:	4770      	bx	lr

080227ac <__multadd>:
 80227ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80227b0:	690d      	ldr	r5, [r1, #16]
 80227b2:	4607      	mov	r7, r0
 80227b4:	460c      	mov	r4, r1
 80227b6:	461e      	mov	r6, r3
 80227b8:	f101 0c14 	add.w	ip, r1, #20
 80227bc:	2000      	movs	r0, #0
 80227be:	f8dc 3000 	ldr.w	r3, [ip]
 80227c2:	b299      	uxth	r1, r3
 80227c4:	fb02 6101 	mla	r1, r2, r1, r6
 80227c8:	0c1e      	lsrs	r6, r3, #16
 80227ca:	0c0b      	lsrs	r3, r1, #16
 80227cc:	fb02 3306 	mla	r3, r2, r6, r3
 80227d0:	b289      	uxth	r1, r1
 80227d2:	3001      	adds	r0, #1
 80227d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80227d8:	4285      	cmp	r5, r0
 80227da:	f84c 1b04 	str.w	r1, [ip], #4
 80227de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80227e2:	dcec      	bgt.n	80227be <__multadd+0x12>
 80227e4:	b30e      	cbz	r6, 802282a <__multadd+0x7e>
 80227e6:	68a3      	ldr	r3, [r4, #8]
 80227e8:	42ab      	cmp	r3, r5
 80227ea:	dc19      	bgt.n	8022820 <__multadd+0x74>
 80227ec:	6861      	ldr	r1, [r4, #4]
 80227ee:	4638      	mov	r0, r7
 80227f0:	3101      	adds	r1, #1
 80227f2:	f7ff ffad 	bl	8022750 <_Balloc>
 80227f6:	4680      	mov	r8, r0
 80227f8:	b928      	cbnz	r0, 8022806 <__multadd+0x5a>
 80227fa:	4602      	mov	r2, r0
 80227fc:	4b0c      	ldr	r3, [pc, #48]	; (8022830 <__multadd+0x84>)
 80227fe:	480d      	ldr	r0, [pc, #52]	; (8022834 <__multadd+0x88>)
 8022800:	21b5      	movs	r1, #181	; 0xb5
 8022802:	f001 fb01 	bl	8023e08 <__assert_func>
 8022806:	6922      	ldr	r2, [r4, #16]
 8022808:	3202      	adds	r2, #2
 802280a:	f104 010c 	add.w	r1, r4, #12
 802280e:	0092      	lsls	r2, r2, #2
 8022810:	300c      	adds	r0, #12
 8022812:	f7fb fd31 	bl	801e278 <memcpy>
 8022816:	4621      	mov	r1, r4
 8022818:	4638      	mov	r0, r7
 802281a:	f7ff ffbe 	bl	802279a <_Bfree>
 802281e:	4644      	mov	r4, r8
 8022820:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8022824:	3501      	adds	r5, #1
 8022826:	615e      	str	r6, [r3, #20]
 8022828:	6125      	str	r5, [r4, #16]
 802282a:	4620      	mov	r0, r4
 802282c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022830:	0806f7e9 	.word	0x0806f7e9
 8022834:	0806f855 	.word	0x0806f855

08022838 <__hi0bits>:
 8022838:	0c03      	lsrs	r3, r0, #16
 802283a:	041b      	lsls	r3, r3, #16
 802283c:	b9d3      	cbnz	r3, 8022874 <__hi0bits+0x3c>
 802283e:	0400      	lsls	r0, r0, #16
 8022840:	2310      	movs	r3, #16
 8022842:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8022846:	bf04      	itt	eq
 8022848:	0200      	lsleq	r0, r0, #8
 802284a:	3308      	addeq	r3, #8
 802284c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8022850:	bf04      	itt	eq
 8022852:	0100      	lsleq	r0, r0, #4
 8022854:	3304      	addeq	r3, #4
 8022856:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802285a:	bf04      	itt	eq
 802285c:	0080      	lsleq	r0, r0, #2
 802285e:	3302      	addeq	r3, #2
 8022860:	2800      	cmp	r0, #0
 8022862:	db05      	blt.n	8022870 <__hi0bits+0x38>
 8022864:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8022868:	f103 0301 	add.w	r3, r3, #1
 802286c:	bf08      	it	eq
 802286e:	2320      	moveq	r3, #32
 8022870:	4618      	mov	r0, r3
 8022872:	4770      	bx	lr
 8022874:	2300      	movs	r3, #0
 8022876:	e7e4      	b.n	8022842 <__hi0bits+0xa>

08022878 <__lo0bits>:
 8022878:	6803      	ldr	r3, [r0, #0]
 802287a:	f013 0207 	ands.w	r2, r3, #7
 802287e:	4601      	mov	r1, r0
 8022880:	d00b      	beq.n	802289a <__lo0bits+0x22>
 8022882:	07da      	lsls	r2, r3, #31
 8022884:	d423      	bmi.n	80228ce <__lo0bits+0x56>
 8022886:	0798      	lsls	r0, r3, #30
 8022888:	bf49      	itett	mi
 802288a:	085b      	lsrmi	r3, r3, #1
 802288c:	089b      	lsrpl	r3, r3, #2
 802288e:	2001      	movmi	r0, #1
 8022890:	600b      	strmi	r3, [r1, #0]
 8022892:	bf5c      	itt	pl
 8022894:	600b      	strpl	r3, [r1, #0]
 8022896:	2002      	movpl	r0, #2
 8022898:	4770      	bx	lr
 802289a:	b298      	uxth	r0, r3
 802289c:	b9a8      	cbnz	r0, 80228ca <__lo0bits+0x52>
 802289e:	0c1b      	lsrs	r3, r3, #16
 80228a0:	2010      	movs	r0, #16
 80228a2:	b2da      	uxtb	r2, r3
 80228a4:	b90a      	cbnz	r2, 80228aa <__lo0bits+0x32>
 80228a6:	3008      	adds	r0, #8
 80228a8:	0a1b      	lsrs	r3, r3, #8
 80228aa:	071a      	lsls	r2, r3, #28
 80228ac:	bf04      	itt	eq
 80228ae:	091b      	lsreq	r3, r3, #4
 80228b0:	3004      	addeq	r0, #4
 80228b2:	079a      	lsls	r2, r3, #30
 80228b4:	bf04      	itt	eq
 80228b6:	089b      	lsreq	r3, r3, #2
 80228b8:	3002      	addeq	r0, #2
 80228ba:	07da      	lsls	r2, r3, #31
 80228bc:	d403      	bmi.n	80228c6 <__lo0bits+0x4e>
 80228be:	085b      	lsrs	r3, r3, #1
 80228c0:	f100 0001 	add.w	r0, r0, #1
 80228c4:	d005      	beq.n	80228d2 <__lo0bits+0x5a>
 80228c6:	600b      	str	r3, [r1, #0]
 80228c8:	4770      	bx	lr
 80228ca:	4610      	mov	r0, r2
 80228cc:	e7e9      	b.n	80228a2 <__lo0bits+0x2a>
 80228ce:	2000      	movs	r0, #0
 80228d0:	4770      	bx	lr
 80228d2:	2020      	movs	r0, #32
 80228d4:	4770      	bx	lr
	...

080228d8 <__i2b>:
 80228d8:	b510      	push	{r4, lr}
 80228da:	460c      	mov	r4, r1
 80228dc:	2101      	movs	r1, #1
 80228de:	f7ff ff37 	bl	8022750 <_Balloc>
 80228e2:	4602      	mov	r2, r0
 80228e4:	b928      	cbnz	r0, 80228f2 <__i2b+0x1a>
 80228e6:	4b05      	ldr	r3, [pc, #20]	; (80228fc <__i2b+0x24>)
 80228e8:	4805      	ldr	r0, [pc, #20]	; (8022900 <__i2b+0x28>)
 80228ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80228ee:	f001 fa8b 	bl	8023e08 <__assert_func>
 80228f2:	2301      	movs	r3, #1
 80228f4:	6144      	str	r4, [r0, #20]
 80228f6:	6103      	str	r3, [r0, #16]
 80228f8:	bd10      	pop	{r4, pc}
 80228fa:	bf00      	nop
 80228fc:	0806f7e9 	.word	0x0806f7e9
 8022900:	0806f855 	.word	0x0806f855

08022904 <__multiply>:
 8022904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022908:	4691      	mov	r9, r2
 802290a:	690a      	ldr	r2, [r1, #16]
 802290c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8022910:	429a      	cmp	r2, r3
 8022912:	bfb8      	it	lt
 8022914:	460b      	movlt	r3, r1
 8022916:	460c      	mov	r4, r1
 8022918:	bfbc      	itt	lt
 802291a:	464c      	movlt	r4, r9
 802291c:	4699      	movlt	r9, r3
 802291e:	6927      	ldr	r7, [r4, #16]
 8022920:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8022924:	68a3      	ldr	r3, [r4, #8]
 8022926:	6861      	ldr	r1, [r4, #4]
 8022928:	eb07 060a 	add.w	r6, r7, sl
 802292c:	42b3      	cmp	r3, r6
 802292e:	b085      	sub	sp, #20
 8022930:	bfb8      	it	lt
 8022932:	3101      	addlt	r1, #1
 8022934:	f7ff ff0c 	bl	8022750 <_Balloc>
 8022938:	b930      	cbnz	r0, 8022948 <__multiply+0x44>
 802293a:	4602      	mov	r2, r0
 802293c:	4b44      	ldr	r3, [pc, #272]	; (8022a50 <__multiply+0x14c>)
 802293e:	4845      	ldr	r0, [pc, #276]	; (8022a54 <__multiply+0x150>)
 8022940:	f240 115d 	movw	r1, #349	; 0x15d
 8022944:	f001 fa60 	bl	8023e08 <__assert_func>
 8022948:	f100 0514 	add.w	r5, r0, #20
 802294c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8022950:	462b      	mov	r3, r5
 8022952:	2200      	movs	r2, #0
 8022954:	4543      	cmp	r3, r8
 8022956:	d321      	bcc.n	802299c <__multiply+0x98>
 8022958:	f104 0314 	add.w	r3, r4, #20
 802295c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8022960:	f109 0314 	add.w	r3, r9, #20
 8022964:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8022968:	9202      	str	r2, [sp, #8]
 802296a:	1b3a      	subs	r2, r7, r4
 802296c:	3a15      	subs	r2, #21
 802296e:	f022 0203 	bic.w	r2, r2, #3
 8022972:	3204      	adds	r2, #4
 8022974:	f104 0115 	add.w	r1, r4, #21
 8022978:	428f      	cmp	r7, r1
 802297a:	bf38      	it	cc
 802297c:	2204      	movcc	r2, #4
 802297e:	9201      	str	r2, [sp, #4]
 8022980:	9a02      	ldr	r2, [sp, #8]
 8022982:	9303      	str	r3, [sp, #12]
 8022984:	429a      	cmp	r2, r3
 8022986:	d80c      	bhi.n	80229a2 <__multiply+0x9e>
 8022988:	2e00      	cmp	r6, #0
 802298a:	dd03      	ble.n	8022994 <__multiply+0x90>
 802298c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8022990:	2b00      	cmp	r3, #0
 8022992:	d05a      	beq.n	8022a4a <__multiply+0x146>
 8022994:	6106      	str	r6, [r0, #16]
 8022996:	b005      	add	sp, #20
 8022998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802299c:	f843 2b04 	str.w	r2, [r3], #4
 80229a0:	e7d8      	b.n	8022954 <__multiply+0x50>
 80229a2:	f8b3 a000 	ldrh.w	sl, [r3]
 80229a6:	f1ba 0f00 	cmp.w	sl, #0
 80229aa:	d024      	beq.n	80229f6 <__multiply+0xf2>
 80229ac:	f104 0e14 	add.w	lr, r4, #20
 80229b0:	46a9      	mov	r9, r5
 80229b2:	f04f 0c00 	mov.w	ip, #0
 80229b6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80229ba:	f8d9 1000 	ldr.w	r1, [r9]
 80229be:	fa1f fb82 	uxth.w	fp, r2
 80229c2:	b289      	uxth	r1, r1
 80229c4:	fb0a 110b 	mla	r1, sl, fp, r1
 80229c8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80229cc:	f8d9 2000 	ldr.w	r2, [r9]
 80229d0:	4461      	add	r1, ip
 80229d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80229d6:	fb0a c20b 	mla	r2, sl, fp, ip
 80229da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80229de:	b289      	uxth	r1, r1
 80229e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80229e4:	4577      	cmp	r7, lr
 80229e6:	f849 1b04 	str.w	r1, [r9], #4
 80229ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80229ee:	d8e2      	bhi.n	80229b6 <__multiply+0xb2>
 80229f0:	9a01      	ldr	r2, [sp, #4]
 80229f2:	f845 c002 	str.w	ip, [r5, r2]
 80229f6:	9a03      	ldr	r2, [sp, #12]
 80229f8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80229fc:	3304      	adds	r3, #4
 80229fe:	f1b9 0f00 	cmp.w	r9, #0
 8022a02:	d020      	beq.n	8022a46 <__multiply+0x142>
 8022a04:	6829      	ldr	r1, [r5, #0]
 8022a06:	f104 0c14 	add.w	ip, r4, #20
 8022a0a:	46ae      	mov	lr, r5
 8022a0c:	f04f 0a00 	mov.w	sl, #0
 8022a10:	f8bc b000 	ldrh.w	fp, [ip]
 8022a14:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8022a18:	fb09 220b 	mla	r2, r9, fp, r2
 8022a1c:	4492      	add	sl, r2
 8022a1e:	b289      	uxth	r1, r1
 8022a20:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8022a24:	f84e 1b04 	str.w	r1, [lr], #4
 8022a28:	f85c 2b04 	ldr.w	r2, [ip], #4
 8022a2c:	f8be 1000 	ldrh.w	r1, [lr]
 8022a30:	0c12      	lsrs	r2, r2, #16
 8022a32:	fb09 1102 	mla	r1, r9, r2, r1
 8022a36:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8022a3a:	4567      	cmp	r7, ip
 8022a3c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8022a40:	d8e6      	bhi.n	8022a10 <__multiply+0x10c>
 8022a42:	9a01      	ldr	r2, [sp, #4]
 8022a44:	50a9      	str	r1, [r5, r2]
 8022a46:	3504      	adds	r5, #4
 8022a48:	e79a      	b.n	8022980 <__multiply+0x7c>
 8022a4a:	3e01      	subs	r6, #1
 8022a4c:	e79c      	b.n	8022988 <__multiply+0x84>
 8022a4e:	bf00      	nop
 8022a50:	0806f7e9 	.word	0x0806f7e9
 8022a54:	0806f855 	.word	0x0806f855

08022a58 <__pow5mult>:
 8022a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022a5c:	4615      	mov	r5, r2
 8022a5e:	f012 0203 	ands.w	r2, r2, #3
 8022a62:	4606      	mov	r6, r0
 8022a64:	460f      	mov	r7, r1
 8022a66:	d007      	beq.n	8022a78 <__pow5mult+0x20>
 8022a68:	4c1a      	ldr	r4, [pc, #104]	; (8022ad4 <__pow5mult+0x7c>)
 8022a6a:	3a01      	subs	r2, #1
 8022a6c:	2300      	movs	r3, #0
 8022a6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8022a72:	f7ff fe9b 	bl	80227ac <__multadd>
 8022a76:	4607      	mov	r7, r0
 8022a78:	10ad      	asrs	r5, r5, #2
 8022a7a:	d027      	beq.n	8022acc <__pow5mult+0x74>
 8022a7c:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8022a7e:	b944      	cbnz	r4, 8022a92 <__pow5mult+0x3a>
 8022a80:	f240 2171 	movw	r1, #625	; 0x271
 8022a84:	4630      	mov	r0, r6
 8022a86:	f7ff ff27 	bl	80228d8 <__i2b>
 8022a8a:	2300      	movs	r3, #0
 8022a8c:	64b0      	str	r0, [r6, #72]	; 0x48
 8022a8e:	4604      	mov	r4, r0
 8022a90:	6003      	str	r3, [r0, #0]
 8022a92:	f04f 0900 	mov.w	r9, #0
 8022a96:	07eb      	lsls	r3, r5, #31
 8022a98:	d50a      	bpl.n	8022ab0 <__pow5mult+0x58>
 8022a9a:	4639      	mov	r1, r7
 8022a9c:	4622      	mov	r2, r4
 8022a9e:	4630      	mov	r0, r6
 8022aa0:	f7ff ff30 	bl	8022904 <__multiply>
 8022aa4:	4639      	mov	r1, r7
 8022aa6:	4680      	mov	r8, r0
 8022aa8:	4630      	mov	r0, r6
 8022aaa:	f7ff fe76 	bl	802279a <_Bfree>
 8022aae:	4647      	mov	r7, r8
 8022ab0:	106d      	asrs	r5, r5, #1
 8022ab2:	d00b      	beq.n	8022acc <__pow5mult+0x74>
 8022ab4:	6820      	ldr	r0, [r4, #0]
 8022ab6:	b938      	cbnz	r0, 8022ac8 <__pow5mult+0x70>
 8022ab8:	4622      	mov	r2, r4
 8022aba:	4621      	mov	r1, r4
 8022abc:	4630      	mov	r0, r6
 8022abe:	f7ff ff21 	bl	8022904 <__multiply>
 8022ac2:	6020      	str	r0, [r4, #0]
 8022ac4:	f8c0 9000 	str.w	r9, [r0]
 8022ac8:	4604      	mov	r4, r0
 8022aca:	e7e4      	b.n	8022a96 <__pow5mult+0x3e>
 8022acc:	4638      	mov	r0, r7
 8022ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022ad2:	bf00      	nop
 8022ad4:	0806f9a8 	.word	0x0806f9a8

08022ad8 <__lshift>:
 8022ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022adc:	460c      	mov	r4, r1
 8022ade:	6849      	ldr	r1, [r1, #4]
 8022ae0:	6923      	ldr	r3, [r4, #16]
 8022ae2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8022ae6:	68a3      	ldr	r3, [r4, #8]
 8022ae8:	4607      	mov	r7, r0
 8022aea:	4691      	mov	r9, r2
 8022aec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8022af0:	f108 0601 	add.w	r6, r8, #1
 8022af4:	42b3      	cmp	r3, r6
 8022af6:	db0b      	blt.n	8022b10 <__lshift+0x38>
 8022af8:	4638      	mov	r0, r7
 8022afa:	f7ff fe29 	bl	8022750 <_Balloc>
 8022afe:	4605      	mov	r5, r0
 8022b00:	b948      	cbnz	r0, 8022b16 <__lshift+0x3e>
 8022b02:	4602      	mov	r2, r0
 8022b04:	4b2a      	ldr	r3, [pc, #168]	; (8022bb0 <__lshift+0xd8>)
 8022b06:	482b      	ldr	r0, [pc, #172]	; (8022bb4 <__lshift+0xdc>)
 8022b08:	f240 11d9 	movw	r1, #473	; 0x1d9
 8022b0c:	f001 f97c 	bl	8023e08 <__assert_func>
 8022b10:	3101      	adds	r1, #1
 8022b12:	005b      	lsls	r3, r3, #1
 8022b14:	e7ee      	b.n	8022af4 <__lshift+0x1c>
 8022b16:	2300      	movs	r3, #0
 8022b18:	f100 0114 	add.w	r1, r0, #20
 8022b1c:	f100 0210 	add.w	r2, r0, #16
 8022b20:	4618      	mov	r0, r3
 8022b22:	4553      	cmp	r3, sl
 8022b24:	db37      	blt.n	8022b96 <__lshift+0xbe>
 8022b26:	6920      	ldr	r0, [r4, #16]
 8022b28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8022b2c:	f104 0314 	add.w	r3, r4, #20
 8022b30:	f019 091f 	ands.w	r9, r9, #31
 8022b34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8022b38:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8022b3c:	d02f      	beq.n	8022b9e <__lshift+0xc6>
 8022b3e:	f1c9 0e20 	rsb	lr, r9, #32
 8022b42:	468a      	mov	sl, r1
 8022b44:	f04f 0c00 	mov.w	ip, #0
 8022b48:	681a      	ldr	r2, [r3, #0]
 8022b4a:	fa02 f209 	lsl.w	r2, r2, r9
 8022b4e:	ea42 020c 	orr.w	r2, r2, ip
 8022b52:	f84a 2b04 	str.w	r2, [sl], #4
 8022b56:	f853 2b04 	ldr.w	r2, [r3], #4
 8022b5a:	4298      	cmp	r0, r3
 8022b5c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8022b60:	d8f2      	bhi.n	8022b48 <__lshift+0x70>
 8022b62:	1b03      	subs	r3, r0, r4
 8022b64:	3b15      	subs	r3, #21
 8022b66:	f023 0303 	bic.w	r3, r3, #3
 8022b6a:	3304      	adds	r3, #4
 8022b6c:	f104 0215 	add.w	r2, r4, #21
 8022b70:	4290      	cmp	r0, r2
 8022b72:	bf38      	it	cc
 8022b74:	2304      	movcc	r3, #4
 8022b76:	f841 c003 	str.w	ip, [r1, r3]
 8022b7a:	f1bc 0f00 	cmp.w	ip, #0
 8022b7e:	d001      	beq.n	8022b84 <__lshift+0xac>
 8022b80:	f108 0602 	add.w	r6, r8, #2
 8022b84:	3e01      	subs	r6, #1
 8022b86:	4638      	mov	r0, r7
 8022b88:	612e      	str	r6, [r5, #16]
 8022b8a:	4621      	mov	r1, r4
 8022b8c:	f7ff fe05 	bl	802279a <_Bfree>
 8022b90:	4628      	mov	r0, r5
 8022b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022b96:	f842 0f04 	str.w	r0, [r2, #4]!
 8022b9a:	3301      	adds	r3, #1
 8022b9c:	e7c1      	b.n	8022b22 <__lshift+0x4a>
 8022b9e:	3904      	subs	r1, #4
 8022ba0:	f853 2b04 	ldr.w	r2, [r3], #4
 8022ba4:	f841 2f04 	str.w	r2, [r1, #4]!
 8022ba8:	4298      	cmp	r0, r3
 8022baa:	d8f9      	bhi.n	8022ba0 <__lshift+0xc8>
 8022bac:	e7ea      	b.n	8022b84 <__lshift+0xac>
 8022bae:	bf00      	nop
 8022bb0:	0806f7e9 	.word	0x0806f7e9
 8022bb4:	0806f855 	.word	0x0806f855

08022bb8 <__mcmp>:
 8022bb8:	b530      	push	{r4, r5, lr}
 8022bba:	6902      	ldr	r2, [r0, #16]
 8022bbc:	690c      	ldr	r4, [r1, #16]
 8022bbe:	1b12      	subs	r2, r2, r4
 8022bc0:	d10e      	bne.n	8022be0 <__mcmp+0x28>
 8022bc2:	f100 0314 	add.w	r3, r0, #20
 8022bc6:	3114      	adds	r1, #20
 8022bc8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8022bcc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8022bd0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8022bd4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8022bd8:	42a5      	cmp	r5, r4
 8022bda:	d003      	beq.n	8022be4 <__mcmp+0x2c>
 8022bdc:	d305      	bcc.n	8022bea <__mcmp+0x32>
 8022bde:	2201      	movs	r2, #1
 8022be0:	4610      	mov	r0, r2
 8022be2:	bd30      	pop	{r4, r5, pc}
 8022be4:	4283      	cmp	r3, r0
 8022be6:	d3f3      	bcc.n	8022bd0 <__mcmp+0x18>
 8022be8:	e7fa      	b.n	8022be0 <__mcmp+0x28>
 8022bea:	f04f 32ff 	mov.w	r2, #4294967295
 8022bee:	e7f7      	b.n	8022be0 <__mcmp+0x28>

08022bf0 <__mdiff>:
 8022bf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022bf4:	460c      	mov	r4, r1
 8022bf6:	4606      	mov	r6, r0
 8022bf8:	4611      	mov	r1, r2
 8022bfa:	4620      	mov	r0, r4
 8022bfc:	4690      	mov	r8, r2
 8022bfe:	f7ff ffdb 	bl	8022bb8 <__mcmp>
 8022c02:	1e05      	subs	r5, r0, #0
 8022c04:	d110      	bne.n	8022c28 <__mdiff+0x38>
 8022c06:	4629      	mov	r1, r5
 8022c08:	4630      	mov	r0, r6
 8022c0a:	f7ff fda1 	bl	8022750 <_Balloc>
 8022c0e:	b930      	cbnz	r0, 8022c1e <__mdiff+0x2e>
 8022c10:	4b3a      	ldr	r3, [pc, #232]	; (8022cfc <__mdiff+0x10c>)
 8022c12:	4602      	mov	r2, r0
 8022c14:	f240 2132 	movw	r1, #562	; 0x232
 8022c18:	4839      	ldr	r0, [pc, #228]	; (8022d00 <__mdiff+0x110>)
 8022c1a:	f001 f8f5 	bl	8023e08 <__assert_func>
 8022c1e:	2301      	movs	r3, #1
 8022c20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8022c24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c28:	bfa4      	itt	ge
 8022c2a:	4643      	movge	r3, r8
 8022c2c:	46a0      	movge	r8, r4
 8022c2e:	4630      	mov	r0, r6
 8022c30:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8022c34:	bfa6      	itte	ge
 8022c36:	461c      	movge	r4, r3
 8022c38:	2500      	movge	r5, #0
 8022c3a:	2501      	movlt	r5, #1
 8022c3c:	f7ff fd88 	bl	8022750 <_Balloc>
 8022c40:	b920      	cbnz	r0, 8022c4c <__mdiff+0x5c>
 8022c42:	4b2e      	ldr	r3, [pc, #184]	; (8022cfc <__mdiff+0x10c>)
 8022c44:	4602      	mov	r2, r0
 8022c46:	f44f 7110 	mov.w	r1, #576	; 0x240
 8022c4a:	e7e5      	b.n	8022c18 <__mdiff+0x28>
 8022c4c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8022c50:	6926      	ldr	r6, [r4, #16]
 8022c52:	60c5      	str	r5, [r0, #12]
 8022c54:	f104 0914 	add.w	r9, r4, #20
 8022c58:	f108 0514 	add.w	r5, r8, #20
 8022c5c:	f100 0e14 	add.w	lr, r0, #20
 8022c60:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8022c64:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8022c68:	f108 0210 	add.w	r2, r8, #16
 8022c6c:	46f2      	mov	sl, lr
 8022c6e:	2100      	movs	r1, #0
 8022c70:	f859 3b04 	ldr.w	r3, [r9], #4
 8022c74:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8022c78:	fa1f f883 	uxth.w	r8, r3
 8022c7c:	fa11 f18b 	uxtah	r1, r1, fp
 8022c80:	0c1b      	lsrs	r3, r3, #16
 8022c82:	eba1 0808 	sub.w	r8, r1, r8
 8022c86:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8022c8a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8022c8e:	fa1f f888 	uxth.w	r8, r8
 8022c92:	1419      	asrs	r1, r3, #16
 8022c94:	454e      	cmp	r6, r9
 8022c96:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8022c9a:	f84a 3b04 	str.w	r3, [sl], #4
 8022c9e:	d8e7      	bhi.n	8022c70 <__mdiff+0x80>
 8022ca0:	1b33      	subs	r3, r6, r4
 8022ca2:	3b15      	subs	r3, #21
 8022ca4:	f023 0303 	bic.w	r3, r3, #3
 8022ca8:	3304      	adds	r3, #4
 8022caa:	3415      	adds	r4, #21
 8022cac:	42a6      	cmp	r6, r4
 8022cae:	bf38      	it	cc
 8022cb0:	2304      	movcc	r3, #4
 8022cb2:	441d      	add	r5, r3
 8022cb4:	4473      	add	r3, lr
 8022cb6:	469e      	mov	lr, r3
 8022cb8:	462e      	mov	r6, r5
 8022cba:	4566      	cmp	r6, ip
 8022cbc:	d30e      	bcc.n	8022cdc <__mdiff+0xec>
 8022cbe:	f10c 0203 	add.w	r2, ip, #3
 8022cc2:	1b52      	subs	r2, r2, r5
 8022cc4:	f022 0203 	bic.w	r2, r2, #3
 8022cc8:	3d03      	subs	r5, #3
 8022cca:	45ac      	cmp	ip, r5
 8022ccc:	bf38      	it	cc
 8022cce:	2200      	movcc	r2, #0
 8022cd0:	441a      	add	r2, r3
 8022cd2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8022cd6:	b17b      	cbz	r3, 8022cf8 <__mdiff+0x108>
 8022cd8:	6107      	str	r7, [r0, #16]
 8022cda:	e7a3      	b.n	8022c24 <__mdiff+0x34>
 8022cdc:	f856 8b04 	ldr.w	r8, [r6], #4
 8022ce0:	fa11 f288 	uxtah	r2, r1, r8
 8022ce4:	1414      	asrs	r4, r2, #16
 8022ce6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8022cea:	b292      	uxth	r2, r2
 8022cec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8022cf0:	f84e 2b04 	str.w	r2, [lr], #4
 8022cf4:	1421      	asrs	r1, r4, #16
 8022cf6:	e7e0      	b.n	8022cba <__mdiff+0xca>
 8022cf8:	3f01      	subs	r7, #1
 8022cfa:	e7ea      	b.n	8022cd2 <__mdiff+0xe2>
 8022cfc:	0806f7e9 	.word	0x0806f7e9
 8022d00:	0806f855 	.word	0x0806f855

08022d04 <__d2b>:
 8022d04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8022d08:	4689      	mov	r9, r1
 8022d0a:	2101      	movs	r1, #1
 8022d0c:	ec57 6b10 	vmov	r6, r7, d0
 8022d10:	4690      	mov	r8, r2
 8022d12:	f7ff fd1d 	bl	8022750 <_Balloc>
 8022d16:	4604      	mov	r4, r0
 8022d18:	b930      	cbnz	r0, 8022d28 <__d2b+0x24>
 8022d1a:	4602      	mov	r2, r0
 8022d1c:	4b25      	ldr	r3, [pc, #148]	; (8022db4 <__d2b+0xb0>)
 8022d1e:	4826      	ldr	r0, [pc, #152]	; (8022db8 <__d2b+0xb4>)
 8022d20:	f240 310a 	movw	r1, #778	; 0x30a
 8022d24:	f001 f870 	bl	8023e08 <__assert_func>
 8022d28:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8022d2c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8022d30:	bb35      	cbnz	r5, 8022d80 <__d2b+0x7c>
 8022d32:	2e00      	cmp	r6, #0
 8022d34:	9301      	str	r3, [sp, #4]
 8022d36:	d028      	beq.n	8022d8a <__d2b+0x86>
 8022d38:	4668      	mov	r0, sp
 8022d3a:	9600      	str	r6, [sp, #0]
 8022d3c:	f7ff fd9c 	bl	8022878 <__lo0bits>
 8022d40:	9900      	ldr	r1, [sp, #0]
 8022d42:	b300      	cbz	r0, 8022d86 <__d2b+0x82>
 8022d44:	9a01      	ldr	r2, [sp, #4]
 8022d46:	f1c0 0320 	rsb	r3, r0, #32
 8022d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8022d4e:	430b      	orrs	r3, r1
 8022d50:	40c2      	lsrs	r2, r0
 8022d52:	6163      	str	r3, [r4, #20]
 8022d54:	9201      	str	r2, [sp, #4]
 8022d56:	9b01      	ldr	r3, [sp, #4]
 8022d58:	61a3      	str	r3, [r4, #24]
 8022d5a:	2b00      	cmp	r3, #0
 8022d5c:	bf14      	ite	ne
 8022d5e:	2202      	movne	r2, #2
 8022d60:	2201      	moveq	r2, #1
 8022d62:	6122      	str	r2, [r4, #16]
 8022d64:	b1d5      	cbz	r5, 8022d9c <__d2b+0x98>
 8022d66:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8022d6a:	4405      	add	r5, r0
 8022d6c:	f8c9 5000 	str.w	r5, [r9]
 8022d70:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8022d74:	f8c8 0000 	str.w	r0, [r8]
 8022d78:	4620      	mov	r0, r4
 8022d7a:	b003      	add	sp, #12
 8022d7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022d80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8022d84:	e7d5      	b.n	8022d32 <__d2b+0x2e>
 8022d86:	6161      	str	r1, [r4, #20]
 8022d88:	e7e5      	b.n	8022d56 <__d2b+0x52>
 8022d8a:	a801      	add	r0, sp, #4
 8022d8c:	f7ff fd74 	bl	8022878 <__lo0bits>
 8022d90:	9b01      	ldr	r3, [sp, #4]
 8022d92:	6163      	str	r3, [r4, #20]
 8022d94:	2201      	movs	r2, #1
 8022d96:	6122      	str	r2, [r4, #16]
 8022d98:	3020      	adds	r0, #32
 8022d9a:	e7e3      	b.n	8022d64 <__d2b+0x60>
 8022d9c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8022da0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8022da4:	f8c9 0000 	str.w	r0, [r9]
 8022da8:	6918      	ldr	r0, [r3, #16]
 8022daa:	f7ff fd45 	bl	8022838 <__hi0bits>
 8022dae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8022db2:	e7df      	b.n	8022d74 <__d2b+0x70>
 8022db4:	0806f7e9 	.word	0x0806f7e9
 8022db8:	0806f855 	.word	0x0806f855

08022dbc <_realloc_r>:
 8022dbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022dc0:	4681      	mov	r9, r0
 8022dc2:	460c      	mov	r4, r1
 8022dc4:	b929      	cbnz	r1, 8022dd2 <_realloc_r+0x16>
 8022dc6:	4611      	mov	r1, r2
 8022dc8:	b003      	add	sp, #12
 8022dca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022dce:	f7ff ba77 	b.w	80222c0 <_malloc_r>
 8022dd2:	9201      	str	r2, [sp, #4]
 8022dd4:	f7ff fcb0 	bl	8022738 <__malloc_lock>
 8022dd8:	9a01      	ldr	r2, [sp, #4]
 8022dda:	f102 080b 	add.w	r8, r2, #11
 8022dde:	f1b8 0f16 	cmp.w	r8, #22
 8022de2:	d90b      	bls.n	8022dfc <_realloc_r+0x40>
 8022de4:	f038 0807 	bics.w	r8, r8, #7
 8022de8:	d50a      	bpl.n	8022e00 <_realloc_r+0x44>
 8022dea:	230c      	movs	r3, #12
 8022dec:	f8c9 3000 	str.w	r3, [r9]
 8022df0:	f04f 0b00 	mov.w	fp, #0
 8022df4:	4658      	mov	r0, fp
 8022df6:	b003      	add	sp, #12
 8022df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022dfc:	f04f 0810 	mov.w	r8, #16
 8022e00:	4590      	cmp	r8, r2
 8022e02:	d3f2      	bcc.n	8022dea <_realloc_r+0x2e>
 8022e04:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8022e08:	f025 0603 	bic.w	r6, r5, #3
 8022e0c:	45b0      	cmp	r8, r6
 8022e0e:	f1a4 0a08 	sub.w	sl, r4, #8
 8022e12:	f340 816e 	ble.w	80230f2 <_realloc_r+0x336>
 8022e16:	499b      	ldr	r1, [pc, #620]	; (8023084 <_realloc_r+0x2c8>)
 8022e18:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8022e1c:	eb0a 0306 	add.w	r3, sl, r6
 8022e20:	459c      	cmp	ip, r3
 8022e22:	6859      	ldr	r1, [r3, #4]
 8022e24:	d005      	beq.n	8022e32 <_realloc_r+0x76>
 8022e26:	f021 0001 	bic.w	r0, r1, #1
 8022e2a:	4418      	add	r0, r3
 8022e2c:	6840      	ldr	r0, [r0, #4]
 8022e2e:	07c7      	lsls	r7, r0, #31
 8022e30:	d427      	bmi.n	8022e82 <_realloc_r+0xc6>
 8022e32:	f021 0103 	bic.w	r1, r1, #3
 8022e36:	459c      	cmp	ip, r3
 8022e38:	eb06 0701 	add.w	r7, r6, r1
 8022e3c:	d119      	bne.n	8022e72 <_realloc_r+0xb6>
 8022e3e:	f108 0010 	add.w	r0, r8, #16
 8022e42:	42b8      	cmp	r0, r7
 8022e44:	dc1f      	bgt.n	8022e86 <_realloc_r+0xca>
 8022e46:	eb0a 0308 	add.w	r3, sl, r8
 8022e4a:	4a8e      	ldr	r2, [pc, #568]	; (8023084 <_realloc_r+0x2c8>)
 8022e4c:	eba7 0708 	sub.w	r7, r7, r8
 8022e50:	f047 0701 	orr.w	r7, r7, #1
 8022e54:	6093      	str	r3, [r2, #8]
 8022e56:	605f      	str	r7, [r3, #4]
 8022e58:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8022e5c:	f003 0301 	and.w	r3, r3, #1
 8022e60:	ea43 0308 	orr.w	r3, r3, r8
 8022e64:	f844 3c04 	str.w	r3, [r4, #-4]
 8022e68:	4648      	mov	r0, r9
 8022e6a:	f7ff fc6b 	bl	8022744 <__malloc_unlock>
 8022e6e:	46a3      	mov	fp, r4
 8022e70:	e7c0      	b.n	8022df4 <_realloc_r+0x38>
 8022e72:	45b8      	cmp	r8, r7
 8022e74:	dc07      	bgt.n	8022e86 <_realloc_r+0xca>
 8022e76:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8022e7a:	60da      	str	r2, [r3, #12]
 8022e7c:	6093      	str	r3, [r2, #8]
 8022e7e:	4655      	mov	r5, sl
 8022e80:	e07f      	b.n	8022f82 <_realloc_r+0x1c6>
 8022e82:	2100      	movs	r1, #0
 8022e84:	460b      	mov	r3, r1
 8022e86:	07e8      	lsls	r0, r5, #31
 8022e88:	f100 80e5 	bmi.w	8023056 <_realloc_r+0x29a>
 8022e8c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8022e90:	ebaa 0505 	sub.w	r5, sl, r5
 8022e94:	6868      	ldr	r0, [r5, #4]
 8022e96:	f020 0003 	bic.w	r0, r0, #3
 8022e9a:	eb00 0b06 	add.w	fp, r0, r6
 8022e9e:	2b00      	cmp	r3, #0
 8022ea0:	f000 80a5 	beq.w	8022fee <_realloc_r+0x232>
 8022ea4:	459c      	cmp	ip, r3
 8022ea6:	eb01 070b 	add.w	r7, r1, fp
 8022eaa:	d14a      	bne.n	8022f42 <_realloc_r+0x186>
 8022eac:	f108 0310 	add.w	r3, r8, #16
 8022eb0:	42bb      	cmp	r3, r7
 8022eb2:	f300 809c 	bgt.w	8022fee <_realloc_r+0x232>
 8022eb6:	46ab      	mov	fp, r5
 8022eb8:	68eb      	ldr	r3, [r5, #12]
 8022eba:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8022ebe:	60d3      	str	r3, [r2, #12]
 8022ec0:	609a      	str	r2, [r3, #8]
 8022ec2:	1f32      	subs	r2, r6, #4
 8022ec4:	2a24      	cmp	r2, #36	; 0x24
 8022ec6:	d837      	bhi.n	8022f38 <_realloc_r+0x17c>
 8022ec8:	2a13      	cmp	r2, #19
 8022eca:	d933      	bls.n	8022f34 <_realloc_r+0x178>
 8022ecc:	6823      	ldr	r3, [r4, #0]
 8022ece:	60ab      	str	r3, [r5, #8]
 8022ed0:	6863      	ldr	r3, [r4, #4]
 8022ed2:	60eb      	str	r3, [r5, #12]
 8022ed4:	2a1b      	cmp	r2, #27
 8022ed6:	d81b      	bhi.n	8022f10 <_realloc_r+0x154>
 8022ed8:	3408      	adds	r4, #8
 8022eda:	f105 0310 	add.w	r3, r5, #16
 8022ede:	6822      	ldr	r2, [r4, #0]
 8022ee0:	601a      	str	r2, [r3, #0]
 8022ee2:	6862      	ldr	r2, [r4, #4]
 8022ee4:	605a      	str	r2, [r3, #4]
 8022ee6:	68a2      	ldr	r2, [r4, #8]
 8022ee8:	609a      	str	r2, [r3, #8]
 8022eea:	eb05 0308 	add.w	r3, r5, r8
 8022eee:	4a65      	ldr	r2, [pc, #404]	; (8023084 <_realloc_r+0x2c8>)
 8022ef0:	eba7 0708 	sub.w	r7, r7, r8
 8022ef4:	f047 0701 	orr.w	r7, r7, #1
 8022ef8:	6093      	str	r3, [r2, #8]
 8022efa:	605f      	str	r7, [r3, #4]
 8022efc:	686b      	ldr	r3, [r5, #4]
 8022efe:	f003 0301 	and.w	r3, r3, #1
 8022f02:	ea43 0308 	orr.w	r3, r3, r8
 8022f06:	606b      	str	r3, [r5, #4]
 8022f08:	4648      	mov	r0, r9
 8022f0a:	f7ff fc1b 	bl	8022744 <__malloc_unlock>
 8022f0e:	e771      	b.n	8022df4 <_realloc_r+0x38>
 8022f10:	68a3      	ldr	r3, [r4, #8]
 8022f12:	612b      	str	r3, [r5, #16]
 8022f14:	68e3      	ldr	r3, [r4, #12]
 8022f16:	616b      	str	r3, [r5, #20]
 8022f18:	2a24      	cmp	r2, #36	; 0x24
 8022f1a:	bf01      	itttt	eq
 8022f1c:	6923      	ldreq	r3, [r4, #16]
 8022f1e:	61ab      	streq	r3, [r5, #24]
 8022f20:	6962      	ldreq	r2, [r4, #20]
 8022f22:	61ea      	streq	r2, [r5, #28]
 8022f24:	bf19      	ittee	ne
 8022f26:	3410      	addne	r4, #16
 8022f28:	f105 0318 	addne.w	r3, r5, #24
 8022f2c:	f105 0320 	addeq.w	r3, r5, #32
 8022f30:	3418      	addeq	r4, #24
 8022f32:	e7d4      	b.n	8022ede <_realloc_r+0x122>
 8022f34:	465b      	mov	r3, fp
 8022f36:	e7d2      	b.n	8022ede <_realloc_r+0x122>
 8022f38:	4621      	mov	r1, r4
 8022f3a:	4658      	mov	r0, fp
 8022f3c:	f7fb f9aa 	bl	801e294 <memmove>
 8022f40:	e7d3      	b.n	8022eea <_realloc_r+0x12e>
 8022f42:	45b8      	cmp	r8, r7
 8022f44:	dc53      	bgt.n	8022fee <_realloc_r+0x232>
 8022f46:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8022f4a:	4628      	mov	r0, r5
 8022f4c:	60da      	str	r2, [r3, #12]
 8022f4e:	6093      	str	r3, [r2, #8]
 8022f50:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8022f54:	68eb      	ldr	r3, [r5, #12]
 8022f56:	60d3      	str	r3, [r2, #12]
 8022f58:	609a      	str	r2, [r3, #8]
 8022f5a:	1f32      	subs	r2, r6, #4
 8022f5c:	2a24      	cmp	r2, #36	; 0x24
 8022f5e:	d842      	bhi.n	8022fe6 <_realloc_r+0x22a>
 8022f60:	2a13      	cmp	r2, #19
 8022f62:	d908      	bls.n	8022f76 <_realloc_r+0x1ba>
 8022f64:	6823      	ldr	r3, [r4, #0]
 8022f66:	60ab      	str	r3, [r5, #8]
 8022f68:	6863      	ldr	r3, [r4, #4]
 8022f6a:	60eb      	str	r3, [r5, #12]
 8022f6c:	2a1b      	cmp	r2, #27
 8022f6e:	d828      	bhi.n	8022fc2 <_realloc_r+0x206>
 8022f70:	3408      	adds	r4, #8
 8022f72:	f105 0010 	add.w	r0, r5, #16
 8022f76:	6823      	ldr	r3, [r4, #0]
 8022f78:	6003      	str	r3, [r0, #0]
 8022f7a:	6863      	ldr	r3, [r4, #4]
 8022f7c:	6043      	str	r3, [r0, #4]
 8022f7e:	68a3      	ldr	r3, [r4, #8]
 8022f80:	6083      	str	r3, [r0, #8]
 8022f82:	686b      	ldr	r3, [r5, #4]
 8022f84:	eba7 0008 	sub.w	r0, r7, r8
 8022f88:	280f      	cmp	r0, #15
 8022f8a:	f003 0301 	and.w	r3, r3, #1
 8022f8e:	eb05 0207 	add.w	r2, r5, r7
 8022f92:	f240 80b0 	bls.w	80230f6 <_realloc_r+0x33a>
 8022f96:	eb05 0108 	add.w	r1, r5, r8
 8022f9a:	ea48 0303 	orr.w	r3, r8, r3
 8022f9e:	f040 0001 	orr.w	r0, r0, #1
 8022fa2:	606b      	str	r3, [r5, #4]
 8022fa4:	6048      	str	r0, [r1, #4]
 8022fa6:	6853      	ldr	r3, [r2, #4]
 8022fa8:	f043 0301 	orr.w	r3, r3, #1
 8022fac:	6053      	str	r3, [r2, #4]
 8022fae:	3108      	adds	r1, #8
 8022fb0:	4648      	mov	r0, r9
 8022fb2:	f7fe fee7 	bl	8021d84 <_free_r>
 8022fb6:	4648      	mov	r0, r9
 8022fb8:	f7ff fbc4 	bl	8022744 <__malloc_unlock>
 8022fbc:	f105 0b08 	add.w	fp, r5, #8
 8022fc0:	e718      	b.n	8022df4 <_realloc_r+0x38>
 8022fc2:	68a3      	ldr	r3, [r4, #8]
 8022fc4:	612b      	str	r3, [r5, #16]
 8022fc6:	68e3      	ldr	r3, [r4, #12]
 8022fc8:	616b      	str	r3, [r5, #20]
 8022fca:	2a24      	cmp	r2, #36	; 0x24
 8022fcc:	bf01      	itttt	eq
 8022fce:	6923      	ldreq	r3, [r4, #16]
 8022fd0:	61ab      	streq	r3, [r5, #24]
 8022fd2:	6963      	ldreq	r3, [r4, #20]
 8022fd4:	61eb      	streq	r3, [r5, #28]
 8022fd6:	bf19      	ittee	ne
 8022fd8:	3410      	addne	r4, #16
 8022fda:	f105 0018 	addne.w	r0, r5, #24
 8022fde:	f105 0020 	addeq.w	r0, r5, #32
 8022fe2:	3418      	addeq	r4, #24
 8022fe4:	e7c7      	b.n	8022f76 <_realloc_r+0x1ba>
 8022fe6:	4621      	mov	r1, r4
 8022fe8:	f7fb f954 	bl	801e294 <memmove>
 8022fec:	e7c9      	b.n	8022f82 <_realloc_r+0x1c6>
 8022fee:	45d8      	cmp	r8, fp
 8022ff0:	dc31      	bgt.n	8023056 <_realloc_r+0x29a>
 8022ff2:	4628      	mov	r0, r5
 8022ff4:	68eb      	ldr	r3, [r5, #12]
 8022ff6:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8022ffa:	60d3      	str	r3, [r2, #12]
 8022ffc:	609a      	str	r2, [r3, #8]
 8022ffe:	1f32      	subs	r2, r6, #4
 8023000:	2a24      	cmp	r2, #36	; 0x24
 8023002:	d824      	bhi.n	802304e <_realloc_r+0x292>
 8023004:	2a13      	cmp	r2, #19
 8023006:	d908      	bls.n	802301a <_realloc_r+0x25e>
 8023008:	6823      	ldr	r3, [r4, #0]
 802300a:	60ab      	str	r3, [r5, #8]
 802300c:	6863      	ldr	r3, [r4, #4]
 802300e:	60eb      	str	r3, [r5, #12]
 8023010:	2a1b      	cmp	r2, #27
 8023012:	d80a      	bhi.n	802302a <_realloc_r+0x26e>
 8023014:	3408      	adds	r4, #8
 8023016:	f105 0010 	add.w	r0, r5, #16
 802301a:	6823      	ldr	r3, [r4, #0]
 802301c:	6003      	str	r3, [r0, #0]
 802301e:	6863      	ldr	r3, [r4, #4]
 8023020:	6043      	str	r3, [r0, #4]
 8023022:	68a3      	ldr	r3, [r4, #8]
 8023024:	6083      	str	r3, [r0, #8]
 8023026:	465f      	mov	r7, fp
 8023028:	e7ab      	b.n	8022f82 <_realloc_r+0x1c6>
 802302a:	68a3      	ldr	r3, [r4, #8]
 802302c:	612b      	str	r3, [r5, #16]
 802302e:	68e3      	ldr	r3, [r4, #12]
 8023030:	616b      	str	r3, [r5, #20]
 8023032:	2a24      	cmp	r2, #36	; 0x24
 8023034:	bf01      	itttt	eq
 8023036:	6923      	ldreq	r3, [r4, #16]
 8023038:	61ab      	streq	r3, [r5, #24]
 802303a:	6963      	ldreq	r3, [r4, #20]
 802303c:	61eb      	streq	r3, [r5, #28]
 802303e:	bf19      	ittee	ne
 8023040:	3410      	addne	r4, #16
 8023042:	f105 0018 	addne.w	r0, r5, #24
 8023046:	f105 0020 	addeq.w	r0, r5, #32
 802304a:	3418      	addeq	r4, #24
 802304c:	e7e5      	b.n	802301a <_realloc_r+0x25e>
 802304e:	4621      	mov	r1, r4
 8023050:	f7fb f920 	bl	801e294 <memmove>
 8023054:	e7e7      	b.n	8023026 <_realloc_r+0x26a>
 8023056:	4611      	mov	r1, r2
 8023058:	4648      	mov	r0, r9
 802305a:	f7ff f931 	bl	80222c0 <_malloc_r>
 802305e:	4683      	mov	fp, r0
 8023060:	2800      	cmp	r0, #0
 8023062:	f43f af51 	beq.w	8022f08 <_realloc_r+0x14c>
 8023066:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802306a:	f023 0301 	bic.w	r3, r3, #1
 802306e:	4453      	add	r3, sl
 8023070:	f1a0 0208 	sub.w	r2, r0, #8
 8023074:	4293      	cmp	r3, r2
 8023076:	d107      	bne.n	8023088 <_realloc_r+0x2cc>
 8023078:	f850 7c04 	ldr.w	r7, [r0, #-4]
 802307c:	f027 0703 	bic.w	r7, r7, #3
 8023080:	4437      	add	r7, r6
 8023082:	e6fc      	b.n	8022e7e <_realloc_r+0xc2>
 8023084:	20000454 	.word	0x20000454
 8023088:	1f32      	subs	r2, r6, #4
 802308a:	2a24      	cmp	r2, #36	; 0x24
 802308c:	d82d      	bhi.n	80230ea <_realloc_r+0x32e>
 802308e:	2a13      	cmp	r2, #19
 8023090:	d928      	bls.n	80230e4 <_realloc_r+0x328>
 8023092:	6823      	ldr	r3, [r4, #0]
 8023094:	6003      	str	r3, [r0, #0]
 8023096:	6863      	ldr	r3, [r4, #4]
 8023098:	6043      	str	r3, [r0, #4]
 802309a:	2a1b      	cmp	r2, #27
 802309c:	d80e      	bhi.n	80230bc <_realloc_r+0x300>
 802309e:	f104 0208 	add.w	r2, r4, #8
 80230a2:	f100 0308 	add.w	r3, r0, #8
 80230a6:	6811      	ldr	r1, [r2, #0]
 80230a8:	6019      	str	r1, [r3, #0]
 80230aa:	6851      	ldr	r1, [r2, #4]
 80230ac:	6059      	str	r1, [r3, #4]
 80230ae:	6892      	ldr	r2, [r2, #8]
 80230b0:	609a      	str	r2, [r3, #8]
 80230b2:	4621      	mov	r1, r4
 80230b4:	4648      	mov	r0, r9
 80230b6:	f7fe fe65 	bl	8021d84 <_free_r>
 80230ba:	e725      	b.n	8022f08 <_realloc_r+0x14c>
 80230bc:	68a3      	ldr	r3, [r4, #8]
 80230be:	6083      	str	r3, [r0, #8]
 80230c0:	68e3      	ldr	r3, [r4, #12]
 80230c2:	60c3      	str	r3, [r0, #12]
 80230c4:	2a24      	cmp	r2, #36	; 0x24
 80230c6:	bf01      	itttt	eq
 80230c8:	6923      	ldreq	r3, [r4, #16]
 80230ca:	6103      	streq	r3, [r0, #16]
 80230cc:	6961      	ldreq	r1, [r4, #20]
 80230ce:	6141      	streq	r1, [r0, #20]
 80230d0:	bf19      	ittee	ne
 80230d2:	f104 0210 	addne.w	r2, r4, #16
 80230d6:	f100 0310 	addne.w	r3, r0, #16
 80230da:	f104 0218 	addeq.w	r2, r4, #24
 80230de:	f100 0318 	addeq.w	r3, r0, #24
 80230e2:	e7e0      	b.n	80230a6 <_realloc_r+0x2ea>
 80230e4:	4603      	mov	r3, r0
 80230e6:	4622      	mov	r2, r4
 80230e8:	e7dd      	b.n	80230a6 <_realloc_r+0x2ea>
 80230ea:	4621      	mov	r1, r4
 80230ec:	f7fb f8d2 	bl	801e294 <memmove>
 80230f0:	e7df      	b.n	80230b2 <_realloc_r+0x2f6>
 80230f2:	4637      	mov	r7, r6
 80230f4:	e6c3      	b.n	8022e7e <_realloc_r+0xc2>
 80230f6:	431f      	orrs	r7, r3
 80230f8:	606f      	str	r7, [r5, #4]
 80230fa:	6853      	ldr	r3, [r2, #4]
 80230fc:	f043 0301 	orr.w	r3, r3, #1
 8023100:	6053      	str	r3, [r2, #4]
 8023102:	e758      	b.n	8022fb6 <_realloc_r+0x1fa>

08023104 <frexp>:
 8023104:	b570      	push	{r4, r5, r6, lr}
 8023106:	2100      	movs	r1, #0
 8023108:	ec55 4b10 	vmov	r4, r5, d0
 802310c:	6001      	str	r1, [r0, #0]
 802310e:	4916      	ldr	r1, [pc, #88]	; (8023168 <frexp+0x64>)
 8023110:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8023114:	428a      	cmp	r2, r1
 8023116:	4606      	mov	r6, r0
 8023118:	462b      	mov	r3, r5
 802311a:	dc22      	bgt.n	8023162 <frexp+0x5e>
 802311c:	ee10 1a10 	vmov	r1, s0
 8023120:	4311      	orrs	r1, r2
 8023122:	d01e      	beq.n	8023162 <frexp+0x5e>
 8023124:	4911      	ldr	r1, [pc, #68]	; (802316c <frexp+0x68>)
 8023126:	4029      	ands	r1, r5
 8023128:	b969      	cbnz	r1, 8023146 <frexp+0x42>
 802312a:	4b11      	ldr	r3, [pc, #68]	; (8023170 <frexp+0x6c>)
 802312c:	2200      	movs	r2, #0
 802312e:	ee10 0a10 	vmov	r0, s0
 8023132:	4629      	mov	r1, r5
 8023134:	f7dd fa70 	bl	8000618 <__aeabi_dmul>
 8023138:	460b      	mov	r3, r1
 802313a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 802313e:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8023142:	4604      	mov	r4, r0
 8023144:	6031      	str	r1, [r6, #0]
 8023146:	6831      	ldr	r1, [r6, #0]
 8023148:	1512      	asrs	r2, r2, #20
 802314a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802314e:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8023152:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8023156:	440a      	add	r2, r1
 8023158:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 802315c:	6032      	str	r2, [r6, #0]
 802315e:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8023162:	ec45 4b10 	vmov	d0, r4, r5
 8023166:	bd70      	pop	{r4, r5, r6, pc}
 8023168:	7fefffff 	.word	0x7fefffff
 802316c:	7ff00000 	.word	0x7ff00000
 8023170:	43500000 	.word	0x43500000

08023174 <_sbrk_r>:
 8023174:	b538      	push	{r3, r4, r5, lr}
 8023176:	4d06      	ldr	r5, [pc, #24]	; (8023190 <_sbrk_r+0x1c>)
 8023178:	2300      	movs	r3, #0
 802317a:	4604      	mov	r4, r0
 802317c:	4608      	mov	r0, r1
 802317e:	602b      	str	r3, [r5, #0]
 8023180:	f7df fa92 	bl	80026a8 <_sbrk>
 8023184:	1c43      	adds	r3, r0, #1
 8023186:	d102      	bne.n	802318e <_sbrk_r+0x1a>
 8023188:	682b      	ldr	r3, [r5, #0]
 802318a:	b103      	cbz	r3, 802318e <_sbrk_r+0x1a>
 802318c:	6023      	str	r3, [r4, #0]
 802318e:	bd38      	pop	{r3, r4, r5, pc}
 8023190:	2000c344 	.word	0x2000c344

08023194 <__sread>:
 8023194:	b510      	push	{r4, lr}
 8023196:	460c      	mov	r4, r1
 8023198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802319c:	f000 ffba 	bl	8024114 <_read_r>
 80231a0:	2800      	cmp	r0, #0
 80231a2:	bfab      	itete	ge
 80231a4:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 80231a6:	89a3      	ldrhlt	r3, [r4, #12]
 80231a8:	181b      	addge	r3, r3, r0
 80231aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80231ae:	bfac      	ite	ge
 80231b0:	6523      	strge	r3, [r4, #80]	; 0x50
 80231b2:	81a3      	strhlt	r3, [r4, #12]
 80231b4:	bd10      	pop	{r4, pc}

080231b6 <__swrite>:
 80231b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80231ba:	461f      	mov	r7, r3
 80231bc:	898b      	ldrh	r3, [r1, #12]
 80231be:	05db      	lsls	r3, r3, #23
 80231c0:	4605      	mov	r5, r0
 80231c2:	460c      	mov	r4, r1
 80231c4:	4616      	mov	r6, r2
 80231c6:	d505      	bpl.n	80231d4 <__swrite+0x1e>
 80231c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80231cc:	2302      	movs	r3, #2
 80231ce:	2200      	movs	r2, #0
 80231d0:	f000 ff7c 	bl	80240cc <_lseek_r>
 80231d4:	89a3      	ldrh	r3, [r4, #12]
 80231d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80231da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80231de:	81a3      	strh	r3, [r4, #12]
 80231e0:	4632      	mov	r2, r6
 80231e2:	463b      	mov	r3, r7
 80231e4:	4628      	mov	r0, r5
 80231e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80231ea:	f000 bdb9 	b.w	8023d60 <_write_r>

080231ee <__sseek>:
 80231ee:	b510      	push	{r4, lr}
 80231f0:	460c      	mov	r4, r1
 80231f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80231f6:	f000 ff69 	bl	80240cc <_lseek_r>
 80231fa:	1c43      	adds	r3, r0, #1
 80231fc:	89a3      	ldrh	r3, [r4, #12]
 80231fe:	bf15      	itete	ne
 8023200:	6520      	strne	r0, [r4, #80]	; 0x50
 8023202:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8023206:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802320a:	81a3      	strheq	r3, [r4, #12]
 802320c:	bf18      	it	ne
 802320e:	81a3      	strhne	r3, [r4, #12]
 8023210:	bd10      	pop	{r4, pc}

08023212 <__sclose>:
 8023212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023216:	f000 be4b 	b.w	8023eb0 <_close_r>

0802321a <strncpy>:
 802321a:	b510      	push	{r4, lr}
 802321c:	3901      	subs	r1, #1
 802321e:	4603      	mov	r3, r0
 8023220:	b132      	cbz	r2, 8023230 <strncpy+0x16>
 8023222:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8023226:	f803 4b01 	strb.w	r4, [r3], #1
 802322a:	3a01      	subs	r2, #1
 802322c:	2c00      	cmp	r4, #0
 802322e:	d1f7      	bne.n	8023220 <strncpy+0x6>
 8023230:	441a      	add	r2, r3
 8023232:	2100      	movs	r1, #0
 8023234:	4293      	cmp	r3, r2
 8023236:	d100      	bne.n	802323a <strncpy+0x20>
 8023238:	bd10      	pop	{r4, pc}
 802323a:	f803 1b01 	strb.w	r1, [r3], #1
 802323e:	e7f9      	b.n	8023234 <strncpy+0x1a>

08023240 <__ssprint_r>:
 8023240:	6893      	ldr	r3, [r2, #8]
 8023242:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023246:	4680      	mov	r8, r0
 8023248:	460c      	mov	r4, r1
 802324a:	4617      	mov	r7, r2
 802324c:	2b00      	cmp	r3, #0
 802324e:	d061      	beq.n	8023314 <__ssprint_r+0xd4>
 8023250:	2300      	movs	r3, #0
 8023252:	f8d2 a000 	ldr.w	sl, [r2]
 8023256:	9301      	str	r3, [sp, #4]
 8023258:	469b      	mov	fp, r3
 802325a:	f1bb 0f00 	cmp.w	fp, #0
 802325e:	d02b      	beq.n	80232b8 <__ssprint_r+0x78>
 8023260:	68a6      	ldr	r6, [r4, #8]
 8023262:	455e      	cmp	r6, fp
 8023264:	d844      	bhi.n	80232f0 <__ssprint_r+0xb0>
 8023266:	89a2      	ldrh	r2, [r4, #12]
 8023268:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802326c:	d03e      	beq.n	80232ec <__ssprint_r+0xac>
 802326e:	6820      	ldr	r0, [r4, #0]
 8023270:	6921      	ldr	r1, [r4, #16]
 8023272:	6965      	ldr	r5, [r4, #20]
 8023274:	eba0 0901 	sub.w	r9, r0, r1
 8023278:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802327c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8023280:	f109 0001 	add.w	r0, r9, #1
 8023284:	106d      	asrs	r5, r5, #1
 8023286:	4458      	add	r0, fp
 8023288:	4285      	cmp	r5, r0
 802328a:	bf38      	it	cc
 802328c:	4605      	movcc	r5, r0
 802328e:	0553      	lsls	r3, r2, #21
 8023290:	d545      	bpl.n	802331e <__ssprint_r+0xde>
 8023292:	4629      	mov	r1, r5
 8023294:	4640      	mov	r0, r8
 8023296:	f7ff f813 	bl	80222c0 <_malloc_r>
 802329a:	4606      	mov	r6, r0
 802329c:	b9a0      	cbnz	r0, 80232c8 <__ssprint_r+0x88>
 802329e:	230c      	movs	r3, #12
 80232a0:	f8c8 3000 	str.w	r3, [r8]
 80232a4:	89a3      	ldrh	r3, [r4, #12]
 80232a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80232aa:	81a3      	strh	r3, [r4, #12]
 80232ac:	2300      	movs	r3, #0
 80232ae:	e9c7 3301 	strd	r3, r3, [r7, #4]
 80232b2:	f04f 30ff 	mov.w	r0, #4294967295
 80232b6:	e02f      	b.n	8023318 <__ssprint_r+0xd8>
 80232b8:	f8da 3000 	ldr.w	r3, [sl]
 80232bc:	f8da b004 	ldr.w	fp, [sl, #4]
 80232c0:	9301      	str	r3, [sp, #4]
 80232c2:	f10a 0a08 	add.w	sl, sl, #8
 80232c6:	e7c8      	b.n	802325a <__ssprint_r+0x1a>
 80232c8:	464a      	mov	r2, r9
 80232ca:	6921      	ldr	r1, [r4, #16]
 80232cc:	f7fa ffd4 	bl	801e278 <memcpy>
 80232d0:	89a2      	ldrh	r2, [r4, #12]
 80232d2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80232d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80232da:	81a2      	strh	r2, [r4, #12]
 80232dc:	6126      	str	r6, [r4, #16]
 80232de:	6165      	str	r5, [r4, #20]
 80232e0:	444e      	add	r6, r9
 80232e2:	eba5 0509 	sub.w	r5, r5, r9
 80232e6:	6026      	str	r6, [r4, #0]
 80232e8:	60a5      	str	r5, [r4, #8]
 80232ea:	465e      	mov	r6, fp
 80232ec:	455e      	cmp	r6, fp
 80232ee:	d900      	bls.n	80232f2 <__ssprint_r+0xb2>
 80232f0:	465e      	mov	r6, fp
 80232f2:	4632      	mov	r2, r6
 80232f4:	9901      	ldr	r1, [sp, #4]
 80232f6:	6820      	ldr	r0, [r4, #0]
 80232f8:	f7fa ffcc 	bl	801e294 <memmove>
 80232fc:	68a2      	ldr	r2, [r4, #8]
 80232fe:	1b92      	subs	r2, r2, r6
 8023300:	60a2      	str	r2, [r4, #8]
 8023302:	6822      	ldr	r2, [r4, #0]
 8023304:	4432      	add	r2, r6
 8023306:	6022      	str	r2, [r4, #0]
 8023308:	68ba      	ldr	r2, [r7, #8]
 802330a:	eba2 030b 	sub.w	r3, r2, fp
 802330e:	60bb      	str	r3, [r7, #8]
 8023310:	2b00      	cmp	r3, #0
 8023312:	d1d1      	bne.n	80232b8 <__ssprint_r+0x78>
 8023314:	2000      	movs	r0, #0
 8023316:	6078      	str	r0, [r7, #4]
 8023318:	b003      	add	sp, #12
 802331a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802331e:	462a      	mov	r2, r5
 8023320:	4640      	mov	r0, r8
 8023322:	f7ff fd4b 	bl	8022dbc <_realloc_r>
 8023326:	4606      	mov	r6, r0
 8023328:	2800      	cmp	r0, #0
 802332a:	d1d7      	bne.n	80232dc <__ssprint_r+0x9c>
 802332c:	6921      	ldr	r1, [r4, #16]
 802332e:	4640      	mov	r0, r8
 8023330:	f7fe fd28 	bl	8021d84 <_free_r>
 8023334:	e7b3      	b.n	802329e <__ssprint_r+0x5e>

08023336 <sysconf>:
 8023336:	2808      	cmp	r0, #8
 8023338:	b508      	push	{r3, lr}
 802333a:	d006      	beq.n	802334a <sysconf+0x14>
 802333c:	f7fe fb92 	bl	8021a64 <__errno>
 8023340:	2316      	movs	r3, #22
 8023342:	6003      	str	r3, [r0, #0]
 8023344:	f04f 30ff 	mov.w	r0, #4294967295
 8023348:	bd08      	pop	{r3, pc}
 802334a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 802334e:	e7fb      	b.n	8023348 <sysconf+0x12>

08023350 <__sprint_r>:
 8023350:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023354:	6893      	ldr	r3, [r2, #8]
 8023356:	4680      	mov	r8, r0
 8023358:	460f      	mov	r7, r1
 802335a:	4614      	mov	r4, r2
 802335c:	b91b      	cbnz	r3, 8023366 <__sprint_r+0x16>
 802335e:	6053      	str	r3, [r2, #4]
 8023360:	4618      	mov	r0, r3
 8023362:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023366:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8023368:	049d      	lsls	r5, r3, #18
 802336a:	d520      	bpl.n	80233ae <__sprint_r+0x5e>
 802336c:	6815      	ldr	r5, [r2, #0]
 802336e:	3508      	adds	r5, #8
 8023370:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 8023374:	f04f 0900 	mov.w	r9, #0
 8023378:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 802337c:	45ca      	cmp	sl, r9
 802337e:	dc0b      	bgt.n	8023398 <__sprint_r+0x48>
 8023380:	68a3      	ldr	r3, [r4, #8]
 8023382:	f026 0003 	bic.w	r0, r6, #3
 8023386:	1a18      	subs	r0, r3, r0
 8023388:	60a0      	str	r0, [r4, #8]
 802338a:	3508      	adds	r5, #8
 802338c:	2800      	cmp	r0, #0
 802338e:	d1ef      	bne.n	8023370 <__sprint_r+0x20>
 8023390:	2300      	movs	r3, #0
 8023392:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8023396:	e7e4      	b.n	8023362 <__sprint_r+0x12>
 8023398:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 802339c:	463a      	mov	r2, r7
 802339e:	4640      	mov	r0, r8
 80233a0:	f000 fe41 	bl	8024026 <_fputwc_r>
 80233a4:	1c43      	adds	r3, r0, #1
 80233a6:	d0f3      	beq.n	8023390 <__sprint_r+0x40>
 80233a8:	f109 0901 	add.w	r9, r9, #1
 80233ac:	e7e6      	b.n	802337c <__sprint_r+0x2c>
 80233ae:	f7fe fda9 	bl	8021f04 <__sfvwrite_r>
 80233b2:	e7ed      	b.n	8023390 <__sprint_r+0x40>

080233b4 <_vfiprintf_r>:
 80233b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80233b8:	ed2d 8b02 	vpush	{d8}
 80233bc:	b0b9      	sub	sp, #228	; 0xe4
 80233be:	460f      	mov	r7, r1
 80233c0:	9201      	str	r2, [sp, #4]
 80233c2:	461d      	mov	r5, r3
 80233c4:	461c      	mov	r4, r3
 80233c6:	4681      	mov	r9, r0
 80233c8:	b118      	cbz	r0, 80233d2 <_vfiprintf_r+0x1e>
 80233ca:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80233cc:	b90b      	cbnz	r3, 80233d2 <_vfiprintf_r+0x1e>
 80233ce:	f7fe fc49 	bl	8021c64 <__sinit>
 80233d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80233d4:	07d8      	lsls	r0, r3, #31
 80233d6:	d405      	bmi.n	80233e4 <_vfiprintf_r+0x30>
 80233d8:	89bb      	ldrh	r3, [r7, #12]
 80233da:	0599      	lsls	r1, r3, #22
 80233dc:	d402      	bmi.n	80233e4 <_vfiprintf_r+0x30>
 80233de:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80233e0:	f7fe ff00 	bl	80221e4 <__retarget_lock_acquire_recursive>
 80233e4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80233e8:	049a      	lsls	r2, r3, #18
 80233ea:	d406      	bmi.n	80233fa <_vfiprintf_r+0x46>
 80233ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80233f0:	81bb      	strh	r3, [r7, #12]
 80233f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80233f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80233f8:	667b      	str	r3, [r7, #100]	; 0x64
 80233fa:	89bb      	ldrh	r3, [r7, #12]
 80233fc:	071e      	lsls	r6, r3, #28
 80233fe:	d501      	bpl.n	8023404 <_vfiprintf_r+0x50>
 8023400:	693b      	ldr	r3, [r7, #16]
 8023402:	b9bb      	cbnz	r3, 8023434 <_vfiprintf_r+0x80>
 8023404:	4639      	mov	r1, r7
 8023406:	4648      	mov	r0, r9
 8023408:	f7fd fc60 	bl	8020ccc <__swsetup_r>
 802340c:	b190      	cbz	r0, 8023434 <_vfiprintf_r+0x80>
 802340e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8023410:	07d8      	lsls	r0, r3, #31
 8023412:	d508      	bpl.n	8023426 <_vfiprintf_r+0x72>
 8023414:	f04f 33ff 	mov.w	r3, #4294967295
 8023418:	9302      	str	r3, [sp, #8]
 802341a:	9802      	ldr	r0, [sp, #8]
 802341c:	b039      	add	sp, #228	; 0xe4
 802341e:	ecbd 8b02 	vpop	{d8}
 8023422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023426:	89bb      	ldrh	r3, [r7, #12]
 8023428:	0599      	lsls	r1, r3, #22
 802342a:	d4f3      	bmi.n	8023414 <_vfiprintf_r+0x60>
 802342c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 802342e:	f7fe feda 	bl	80221e6 <__retarget_lock_release_recursive>
 8023432:	e7ef      	b.n	8023414 <_vfiprintf_r+0x60>
 8023434:	89bb      	ldrh	r3, [r7, #12]
 8023436:	f003 021a 	and.w	r2, r3, #26
 802343a:	2a0a      	cmp	r2, #10
 802343c:	d116      	bne.n	802346c <_vfiprintf_r+0xb8>
 802343e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8023442:	2a00      	cmp	r2, #0
 8023444:	db12      	blt.n	802346c <_vfiprintf_r+0xb8>
 8023446:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8023448:	07d2      	lsls	r2, r2, #31
 802344a:	d404      	bmi.n	8023456 <_vfiprintf_r+0xa2>
 802344c:	059e      	lsls	r6, r3, #22
 802344e:	d402      	bmi.n	8023456 <_vfiprintf_r+0xa2>
 8023450:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8023452:	f7fe fec8 	bl	80221e6 <__retarget_lock_release_recursive>
 8023456:	9a01      	ldr	r2, [sp, #4]
 8023458:	462b      	mov	r3, r5
 802345a:	4639      	mov	r1, r7
 802345c:	4648      	mov	r0, r9
 802345e:	b039      	add	sp, #228	; 0xe4
 8023460:	ecbd 8b02 	vpop	{d8}
 8023464:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023468:	f000 bc3a 	b.w	8023ce0 <__sbprintf>
 802346c:	2300      	movs	r3, #0
 802346e:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 8023472:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8023476:	ae0f      	add	r6, sp, #60	; 0x3c
 8023478:	ee08 3a10 	vmov	s16, r3
 802347c:	960c      	str	r6, [sp, #48]	; 0x30
 802347e:	9307      	str	r3, [sp, #28]
 8023480:	9302      	str	r3, [sp, #8]
 8023482:	9b01      	ldr	r3, [sp, #4]
 8023484:	461d      	mov	r5, r3
 8023486:	f813 2b01 	ldrb.w	r2, [r3], #1
 802348a:	b10a      	cbz	r2, 8023490 <_vfiprintf_r+0xdc>
 802348c:	2a25      	cmp	r2, #37	; 0x25
 802348e:	d1f9      	bne.n	8023484 <_vfiprintf_r+0xd0>
 8023490:	9b01      	ldr	r3, [sp, #4]
 8023492:	ebb5 0803 	subs.w	r8, r5, r3
 8023496:	d00d      	beq.n	80234b4 <_vfiprintf_r+0x100>
 8023498:	e9c6 3800 	strd	r3, r8, [r6]
 802349c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802349e:	4443      	add	r3, r8
 80234a0:	930e      	str	r3, [sp, #56]	; 0x38
 80234a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80234a4:	3301      	adds	r3, #1
 80234a6:	2b07      	cmp	r3, #7
 80234a8:	930d      	str	r3, [sp, #52]	; 0x34
 80234aa:	dc75      	bgt.n	8023598 <_vfiprintf_r+0x1e4>
 80234ac:	3608      	adds	r6, #8
 80234ae:	9b02      	ldr	r3, [sp, #8]
 80234b0:	4443      	add	r3, r8
 80234b2:	9302      	str	r3, [sp, #8]
 80234b4:	782b      	ldrb	r3, [r5, #0]
 80234b6:	2b00      	cmp	r3, #0
 80234b8:	f000 83d6 	beq.w	8023c68 <_vfiprintf_r+0x8b4>
 80234bc:	2300      	movs	r3, #0
 80234be:	f04f 31ff 	mov.w	r1, #4294967295
 80234c2:	1c6a      	adds	r2, r5, #1
 80234c4:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80234c8:	9100      	str	r1, [sp, #0]
 80234ca:	9303      	str	r3, [sp, #12]
 80234cc:	469a      	mov	sl, r3
 80234ce:	f812 3b01 	ldrb.w	r3, [r2], #1
 80234d2:	9201      	str	r2, [sp, #4]
 80234d4:	f1a3 0220 	sub.w	r2, r3, #32
 80234d8:	2a5a      	cmp	r2, #90	; 0x5a
 80234da:	f200 831f 	bhi.w	8023b1c <_vfiprintf_r+0x768>
 80234de:	e8df f012 	tbh	[pc, r2, lsl #1]
 80234e2:	009b      	.short	0x009b
 80234e4:	031d031d 	.word	0x031d031d
 80234e8:	031d00a3 	.word	0x031d00a3
 80234ec:	031d031d 	.word	0x031d031d
 80234f0:	031d0082 	.word	0x031d0082
 80234f4:	00a6031d 	.word	0x00a6031d
 80234f8:	031d00b0 	.word	0x031d00b0
 80234fc:	00b200ad 	.word	0x00b200ad
 8023500:	00cd031d 	.word	0x00cd031d
 8023504:	00d000d0 	.word	0x00d000d0
 8023508:	00d000d0 	.word	0x00d000d0
 802350c:	00d000d0 	.word	0x00d000d0
 8023510:	00d000d0 	.word	0x00d000d0
 8023514:	031d00d0 	.word	0x031d00d0
 8023518:	031d031d 	.word	0x031d031d
 802351c:	031d031d 	.word	0x031d031d
 8023520:	031d031d 	.word	0x031d031d
 8023524:	031d031d 	.word	0x031d031d
 8023528:	010800fa 	.word	0x010800fa
 802352c:	031d031d 	.word	0x031d031d
 8023530:	031d031d 	.word	0x031d031d
 8023534:	031d031d 	.word	0x031d031d
 8023538:	031d031d 	.word	0x031d031d
 802353c:	031d031d 	.word	0x031d031d
 8023540:	031d0158 	.word	0x031d0158
 8023544:	031d031d 	.word	0x031d031d
 8023548:	031d01a1 	.word	0x031d01a1
 802354c:	031d027e 	.word	0x031d027e
 8023550:	029e031d 	.word	0x029e031d
 8023554:	031d031d 	.word	0x031d031d
 8023558:	031d031d 	.word	0x031d031d
 802355c:	031d031d 	.word	0x031d031d
 8023560:	031d031d 	.word	0x031d031d
 8023564:	031d031d 	.word	0x031d031d
 8023568:	010a00fa 	.word	0x010a00fa
 802356c:	031d031d 	.word	0x031d031d
 8023570:	00e0031d 	.word	0x00e0031d
 8023574:	00f4010a 	.word	0x00f4010a
 8023578:	00ed031d 	.word	0x00ed031d
 802357c:	0136031d 	.word	0x0136031d
 8023580:	018f015a 	.word	0x018f015a
 8023584:	031d00f4 	.word	0x031d00f4
 8023588:	009901a1 	.word	0x009901a1
 802358c:	031d0280 	.word	0x031d0280
 8023590:	0065031d 	.word	0x0065031d
 8023594:	0099031d 	.word	0x0099031d
 8023598:	aa0c      	add	r2, sp, #48	; 0x30
 802359a:	4639      	mov	r1, r7
 802359c:	4648      	mov	r0, r9
 802359e:	f7ff fed7 	bl	8023350 <__sprint_r>
 80235a2:	2800      	cmp	r0, #0
 80235a4:	f040 833f 	bne.w	8023c26 <_vfiprintf_r+0x872>
 80235a8:	ae0f      	add	r6, sp, #60	; 0x3c
 80235aa:	e780      	b.n	80234ae <_vfiprintf_r+0xfa>
 80235ac:	4a9c      	ldr	r2, [pc, #624]	; (8023820 <_vfiprintf_r+0x46c>)
 80235ae:	9205      	str	r2, [sp, #20]
 80235b0:	f01a 0220 	ands.w	r2, sl, #32
 80235b4:	f000 8235 	beq.w	8023a22 <_vfiprintf_r+0x66e>
 80235b8:	3407      	adds	r4, #7
 80235ba:	f024 0207 	bic.w	r2, r4, #7
 80235be:	4693      	mov	fp, r2
 80235c0:	6855      	ldr	r5, [r2, #4]
 80235c2:	f85b 4b08 	ldr.w	r4, [fp], #8
 80235c6:	f01a 0f01 	tst.w	sl, #1
 80235ca:	d009      	beq.n	80235e0 <_vfiprintf_r+0x22c>
 80235cc:	ea54 0205 	orrs.w	r2, r4, r5
 80235d0:	bf1f      	itttt	ne
 80235d2:	2230      	movne	r2, #48	; 0x30
 80235d4:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 80235d8:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 80235dc:	f04a 0a02 	orrne.w	sl, sl, #2
 80235e0:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 80235e4:	e11a      	b.n	802381c <_vfiprintf_r+0x468>
 80235e6:	4648      	mov	r0, r9
 80235e8:	f7fe fdf6 	bl	80221d8 <_localeconv_r>
 80235ec:	6843      	ldr	r3, [r0, #4]
 80235ee:	4618      	mov	r0, r3
 80235f0:	ee08 3a10 	vmov	s16, r3
 80235f4:	f7dc fdfc 	bl	80001f0 <strlen>
 80235f8:	9007      	str	r0, [sp, #28]
 80235fa:	4648      	mov	r0, r9
 80235fc:	f7fe fdec 	bl	80221d8 <_localeconv_r>
 8023600:	6883      	ldr	r3, [r0, #8]
 8023602:	9306      	str	r3, [sp, #24]
 8023604:	9b07      	ldr	r3, [sp, #28]
 8023606:	b12b      	cbz	r3, 8023614 <_vfiprintf_r+0x260>
 8023608:	9b06      	ldr	r3, [sp, #24]
 802360a:	b11b      	cbz	r3, 8023614 <_vfiprintf_r+0x260>
 802360c:	781b      	ldrb	r3, [r3, #0]
 802360e:	b10b      	cbz	r3, 8023614 <_vfiprintf_r+0x260>
 8023610:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8023614:	9a01      	ldr	r2, [sp, #4]
 8023616:	e75a      	b.n	80234ce <_vfiprintf_r+0x11a>
 8023618:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 802361c:	2b00      	cmp	r3, #0
 802361e:	d1f9      	bne.n	8023614 <_vfiprintf_r+0x260>
 8023620:	2320      	movs	r3, #32
 8023622:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8023626:	e7f5      	b.n	8023614 <_vfiprintf_r+0x260>
 8023628:	f04a 0a01 	orr.w	sl, sl, #1
 802362c:	e7f2      	b.n	8023614 <_vfiprintf_r+0x260>
 802362e:	f854 3b04 	ldr.w	r3, [r4], #4
 8023632:	9303      	str	r3, [sp, #12]
 8023634:	2b00      	cmp	r3, #0
 8023636:	daed      	bge.n	8023614 <_vfiprintf_r+0x260>
 8023638:	425b      	negs	r3, r3
 802363a:	9303      	str	r3, [sp, #12]
 802363c:	f04a 0a04 	orr.w	sl, sl, #4
 8023640:	e7e8      	b.n	8023614 <_vfiprintf_r+0x260>
 8023642:	232b      	movs	r3, #43	; 0x2b
 8023644:	e7ed      	b.n	8023622 <_vfiprintf_r+0x26e>
 8023646:	9a01      	ldr	r2, [sp, #4]
 8023648:	f812 3b01 	ldrb.w	r3, [r2], #1
 802364c:	2b2a      	cmp	r3, #42	; 0x2a
 802364e:	d112      	bne.n	8023676 <_vfiprintf_r+0x2c2>
 8023650:	f854 0b04 	ldr.w	r0, [r4], #4
 8023654:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8023658:	e9cd 3200 	strd	r3, r2, [sp]
 802365c:	e7da      	b.n	8023614 <_vfiprintf_r+0x260>
 802365e:	9b00      	ldr	r3, [sp, #0]
 8023660:	200a      	movs	r0, #10
 8023662:	fb00 1303 	mla	r3, r0, r3, r1
 8023666:	9300      	str	r3, [sp, #0]
 8023668:	f812 3b01 	ldrb.w	r3, [r2], #1
 802366c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8023670:	2909      	cmp	r1, #9
 8023672:	d9f4      	bls.n	802365e <_vfiprintf_r+0x2aa>
 8023674:	e72d      	b.n	80234d2 <_vfiprintf_r+0x11e>
 8023676:	2100      	movs	r1, #0
 8023678:	9100      	str	r1, [sp, #0]
 802367a:	e7f7      	b.n	802366c <_vfiprintf_r+0x2b8>
 802367c:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8023680:	e7c8      	b.n	8023614 <_vfiprintf_r+0x260>
 8023682:	2100      	movs	r1, #0
 8023684:	9a01      	ldr	r2, [sp, #4]
 8023686:	9103      	str	r1, [sp, #12]
 8023688:	9903      	ldr	r1, [sp, #12]
 802368a:	3b30      	subs	r3, #48	; 0x30
 802368c:	200a      	movs	r0, #10
 802368e:	fb00 3301 	mla	r3, r0, r1, r3
 8023692:	9303      	str	r3, [sp, #12]
 8023694:	f812 3b01 	ldrb.w	r3, [r2], #1
 8023698:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 802369c:	2909      	cmp	r1, #9
 802369e:	d9f3      	bls.n	8023688 <_vfiprintf_r+0x2d4>
 80236a0:	e717      	b.n	80234d2 <_vfiprintf_r+0x11e>
 80236a2:	9b01      	ldr	r3, [sp, #4]
 80236a4:	781b      	ldrb	r3, [r3, #0]
 80236a6:	2b68      	cmp	r3, #104	; 0x68
 80236a8:	bf01      	itttt	eq
 80236aa:	9b01      	ldreq	r3, [sp, #4]
 80236ac:	3301      	addeq	r3, #1
 80236ae:	9301      	streq	r3, [sp, #4]
 80236b0:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 80236b4:	bf18      	it	ne
 80236b6:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 80236ba:	e7ab      	b.n	8023614 <_vfiprintf_r+0x260>
 80236bc:	9b01      	ldr	r3, [sp, #4]
 80236be:	781b      	ldrb	r3, [r3, #0]
 80236c0:	2b6c      	cmp	r3, #108	; 0x6c
 80236c2:	d105      	bne.n	80236d0 <_vfiprintf_r+0x31c>
 80236c4:	9b01      	ldr	r3, [sp, #4]
 80236c6:	3301      	adds	r3, #1
 80236c8:	9301      	str	r3, [sp, #4]
 80236ca:	f04a 0a20 	orr.w	sl, sl, #32
 80236ce:	e7a1      	b.n	8023614 <_vfiprintf_r+0x260>
 80236d0:	f04a 0a10 	orr.w	sl, sl, #16
 80236d4:	e79e      	b.n	8023614 <_vfiprintf_r+0x260>
 80236d6:	46a3      	mov	fp, r4
 80236d8:	2100      	movs	r1, #0
 80236da:	f85b 3b04 	ldr.w	r3, [fp], #4
 80236de:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 80236e2:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 80236e6:	2301      	movs	r3, #1
 80236e8:	9300      	str	r3, [sp, #0]
 80236ea:	460d      	mov	r5, r1
 80236ec:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 80236f0:	e0ad      	b.n	802384e <_vfiprintf_r+0x49a>
 80236f2:	f04a 0a10 	orr.w	sl, sl, #16
 80236f6:	f01a 0f20 	tst.w	sl, #32
 80236fa:	d011      	beq.n	8023720 <_vfiprintf_r+0x36c>
 80236fc:	3407      	adds	r4, #7
 80236fe:	f024 0307 	bic.w	r3, r4, #7
 8023702:	469b      	mov	fp, r3
 8023704:	685d      	ldr	r5, [r3, #4]
 8023706:	f85b 4b08 	ldr.w	r4, [fp], #8
 802370a:	2d00      	cmp	r5, #0
 802370c:	da06      	bge.n	802371c <_vfiprintf_r+0x368>
 802370e:	4264      	negs	r4, r4
 8023710:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8023714:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8023718:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 802371c:	2301      	movs	r3, #1
 802371e:	e04a      	b.n	80237b6 <_vfiprintf_r+0x402>
 8023720:	46a3      	mov	fp, r4
 8023722:	f01a 0f10 	tst.w	sl, #16
 8023726:	f85b 5b04 	ldr.w	r5, [fp], #4
 802372a:	d002      	beq.n	8023732 <_vfiprintf_r+0x37e>
 802372c:	462c      	mov	r4, r5
 802372e:	17ed      	asrs	r5, r5, #31
 8023730:	e7eb      	b.n	802370a <_vfiprintf_r+0x356>
 8023732:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8023736:	d003      	beq.n	8023740 <_vfiprintf_r+0x38c>
 8023738:	b22c      	sxth	r4, r5
 802373a:	f345 35c0 	sbfx	r5, r5, #15, #1
 802373e:	e7e4      	b.n	802370a <_vfiprintf_r+0x356>
 8023740:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8023744:	d0f2      	beq.n	802372c <_vfiprintf_r+0x378>
 8023746:	b26c      	sxtb	r4, r5
 8023748:	f345 15c0 	sbfx	r5, r5, #7, #1
 802374c:	e7dd      	b.n	802370a <_vfiprintf_r+0x356>
 802374e:	f01a 0f20 	tst.w	sl, #32
 8023752:	f104 0b04 	add.w	fp, r4, #4
 8023756:	d007      	beq.n	8023768 <_vfiprintf_r+0x3b4>
 8023758:	9a02      	ldr	r2, [sp, #8]
 802375a:	6823      	ldr	r3, [r4, #0]
 802375c:	9902      	ldr	r1, [sp, #8]
 802375e:	17d2      	asrs	r2, r2, #31
 8023760:	e9c3 1200 	strd	r1, r2, [r3]
 8023764:	465c      	mov	r4, fp
 8023766:	e68c      	b.n	8023482 <_vfiprintf_r+0xce>
 8023768:	f01a 0f10 	tst.w	sl, #16
 802376c:	d003      	beq.n	8023776 <_vfiprintf_r+0x3c2>
 802376e:	6823      	ldr	r3, [r4, #0]
 8023770:	9a02      	ldr	r2, [sp, #8]
 8023772:	601a      	str	r2, [r3, #0]
 8023774:	e7f6      	b.n	8023764 <_vfiprintf_r+0x3b0>
 8023776:	f01a 0f40 	tst.w	sl, #64	; 0x40
 802377a:	d003      	beq.n	8023784 <_vfiprintf_r+0x3d0>
 802377c:	6823      	ldr	r3, [r4, #0]
 802377e:	9a02      	ldr	r2, [sp, #8]
 8023780:	801a      	strh	r2, [r3, #0]
 8023782:	e7ef      	b.n	8023764 <_vfiprintf_r+0x3b0>
 8023784:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8023788:	d0f1      	beq.n	802376e <_vfiprintf_r+0x3ba>
 802378a:	6823      	ldr	r3, [r4, #0]
 802378c:	9a02      	ldr	r2, [sp, #8]
 802378e:	701a      	strb	r2, [r3, #0]
 8023790:	e7e8      	b.n	8023764 <_vfiprintf_r+0x3b0>
 8023792:	f04a 0a10 	orr.w	sl, sl, #16
 8023796:	f01a 0320 	ands.w	r3, sl, #32
 802379a:	d01f      	beq.n	80237dc <_vfiprintf_r+0x428>
 802379c:	3407      	adds	r4, #7
 802379e:	f024 0307 	bic.w	r3, r4, #7
 80237a2:	469b      	mov	fp, r3
 80237a4:	685d      	ldr	r5, [r3, #4]
 80237a6:	f85b 4b08 	ldr.w	r4, [fp], #8
 80237aa:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 80237ae:	2300      	movs	r3, #0
 80237b0:	2200      	movs	r2, #0
 80237b2:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 80237b6:	9a00      	ldr	r2, [sp, #0]
 80237b8:	3201      	adds	r2, #1
 80237ba:	f000 8262 	beq.w	8023c82 <_vfiprintf_r+0x8ce>
 80237be:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 80237c2:	9204      	str	r2, [sp, #16]
 80237c4:	ea54 0205 	orrs.w	r2, r4, r5
 80237c8:	f040 8261 	bne.w	8023c8e <_vfiprintf_r+0x8da>
 80237cc:	9a00      	ldr	r2, [sp, #0]
 80237ce:	2a00      	cmp	r2, #0
 80237d0:	f000 8199 	beq.w	8023b06 <_vfiprintf_r+0x752>
 80237d4:	2b01      	cmp	r3, #1
 80237d6:	f040 825d 	bne.w	8023c94 <_vfiprintf_r+0x8e0>
 80237da:	e139      	b.n	8023a50 <_vfiprintf_r+0x69c>
 80237dc:	46a3      	mov	fp, r4
 80237de:	f01a 0510 	ands.w	r5, sl, #16
 80237e2:	f85b 4b04 	ldr.w	r4, [fp], #4
 80237e6:	d001      	beq.n	80237ec <_vfiprintf_r+0x438>
 80237e8:	461d      	mov	r5, r3
 80237ea:	e7de      	b.n	80237aa <_vfiprintf_r+0x3f6>
 80237ec:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 80237f0:	d001      	beq.n	80237f6 <_vfiprintf_r+0x442>
 80237f2:	b2a4      	uxth	r4, r4
 80237f4:	e7d9      	b.n	80237aa <_vfiprintf_r+0x3f6>
 80237f6:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 80237fa:	d0d6      	beq.n	80237aa <_vfiprintf_r+0x3f6>
 80237fc:	b2e4      	uxtb	r4, r4
 80237fe:	e7f3      	b.n	80237e8 <_vfiprintf_r+0x434>
 8023800:	2330      	movs	r3, #48	; 0x30
 8023802:	46a3      	mov	fp, r4
 8023804:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8023808:	2378      	movs	r3, #120	; 0x78
 802380a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 802380e:	f85b 4b04 	ldr.w	r4, [fp], #4
 8023812:	4b03      	ldr	r3, [pc, #12]	; (8023820 <_vfiprintf_r+0x46c>)
 8023814:	9305      	str	r3, [sp, #20]
 8023816:	2500      	movs	r5, #0
 8023818:	f04a 0a02 	orr.w	sl, sl, #2
 802381c:	2302      	movs	r3, #2
 802381e:	e7c7      	b.n	80237b0 <_vfiprintf_r+0x3fc>
 8023820:	0806f778 	.word	0x0806f778
 8023824:	9b00      	ldr	r3, [sp, #0]
 8023826:	46a3      	mov	fp, r4
 8023828:	2500      	movs	r5, #0
 802382a:	1c5c      	adds	r4, r3, #1
 802382c:	f85b 8b04 	ldr.w	r8, [fp], #4
 8023830:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8023834:	f000 80ce 	beq.w	80239d4 <_vfiprintf_r+0x620>
 8023838:	461a      	mov	r2, r3
 802383a:	4629      	mov	r1, r5
 802383c:	4640      	mov	r0, r8
 802383e:	f7dc fcdf 	bl	8000200 <memchr>
 8023842:	2800      	cmp	r0, #0
 8023844:	f000 8174 	beq.w	8023b30 <_vfiprintf_r+0x77c>
 8023848:	eba0 0308 	sub.w	r3, r0, r8
 802384c:	9300      	str	r3, [sp, #0]
 802384e:	9b00      	ldr	r3, [sp, #0]
 8023850:	42ab      	cmp	r3, r5
 8023852:	bfb8      	it	lt
 8023854:	462b      	movlt	r3, r5
 8023856:	9304      	str	r3, [sp, #16]
 8023858:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 802385c:	b113      	cbz	r3, 8023864 <_vfiprintf_r+0x4b0>
 802385e:	9b04      	ldr	r3, [sp, #16]
 8023860:	3301      	adds	r3, #1
 8023862:	9304      	str	r3, [sp, #16]
 8023864:	f01a 0302 	ands.w	r3, sl, #2
 8023868:	9308      	str	r3, [sp, #32]
 802386a:	bf1e      	ittt	ne
 802386c:	9b04      	ldrne	r3, [sp, #16]
 802386e:	3302      	addne	r3, #2
 8023870:	9304      	strne	r3, [sp, #16]
 8023872:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8023876:	9309      	str	r3, [sp, #36]	; 0x24
 8023878:	d11f      	bne.n	80238ba <_vfiprintf_r+0x506>
 802387a:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 802387e:	1a9c      	subs	r4, r3, r2
 8023880:	2c00      	cmp	r4, #0
 8023882:	dd1a      	ble.n	80238ba <_vfiprintf_r+0x506>
 8023884:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8023888:	48aa      	ldr	r0, [pc, #680]	; (8023b34 <_vfiprintf_r+0x780>)
 802388a:	6030      	str	r0, [r6, #0]
 802388c:	2c10      	cmp	r4, #16
 802388e:	f103 0301 	add.w	r3, r3, #1
 8023892:	f106 0108 	add.w	r1, r6, #8
 8023896:	f300 8153 	bgt.w	8023b40 <_vfiprintf_r+0x78c>
 802389a:	6074      	str	r4, [r6, #4]
 802389c:	2b07      	cmp	r3, #7
 802389e:	4414      	add	r4, r2
 80238a0:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 80238a4:	f340 815e 	ble.w	8023b64 <_vfiprintf_r+0x7b0>
 80238a8:	aa0c      	add	r2, sp, #48	; 0x30
 80238aa:	4639      	mov	r1, r7
 80238ac:	4648      	mov	r0, r9
 80238ae:	f7ff fd4f 	bl	8023350 <__sprint_r>
 80238b2:	2800      	cmp	r0, #0
 80238b4:	f040 81b7 	bne.w	8023c26 <_vfiprintf_r+0x872>
 80238b8:	ae0f      	add	r6, sp, #60	; 0x3c
 80238ba:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 80238be:	b173      	cbz	r3, 80238de <_vfiprintf_r+0x52a>
 80238c0:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 80238c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80238c6:	6032      	str	r2, [r6, #0]
 80238c8:	2201      	movs	r2, #1
 80238ca:	6072      	str	r2, [r6, #4]
 80238cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80238ce:	3301      	adds	r3, #1
 80238d0:	3201      	adds	r2, #1
 80238d2:	2b07      	cmp	r3, #7
 80238d4:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 80238d8:	f300 8146 	bgt.w	8023b68 <_vfiprintf_r+0x7b4>
 80238dc:	3608      	adds	r6, #8
 80238de:	9b08      	ldr	r3, [sp, #32]
 80238e0:	b16b      	cbz	r3, 80238fe <_vfiprintf_r+0x54a>
 80238e2:	aa0b      	add	r2, sp, #44	; 0x2c
 80238e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80238e6:	6032      	str	r2, [r6, #0]
 80238e8:	2202      	movs	r2, #2
 80238ea:	6072      	str	r2, [r6, #4]
 80238ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80238ee:	3301      	adds	r3, #1
 80238f0:	3202      	adds	r2, #2
 80238f2:	2b07      	cmp	r3, #7
 80238f4:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 80238f8:	f300 813f 	bgt.w	8023b7a <_vfiprintf_r+0x7c6>
 80238fc:	3608      	adds	r6, #8
 80238fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023900:	2b80      	cmp	r3, #128	; 0x80
 8023902:	d11f      	bne.n	8023944 <_vfiprintf_r+0x590>
 8023904:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8023908:	1a9c      	subs	r4, r3, r2
 802390a:	2c00      	cmp	r4, #0
 802390c:	dd1a      	ble.n	8023944 <_vfiprintf_r+0x590>
 802390e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8023912:	4889      	ldr	r0, [pc, #548]	; (8023b38 <_vfiprintf_r+0x784>)
 8023914:	6030      	str	r0, [r6, #0]
 8023916:	2c10      	cmp	r4, #16
 8023918:	f103 0301 	add.w	r3, r3, #1
 802391c:	f106 0108 	add.w	r1, r6, #8
 8023920:	f300 8134 	bgt.w	8023b8c <_vfiprintf_r+0x7d8>
 8023924:	6074      	str	r4, [r6, #4]
 8023926:	2b07      	cmp	r3, #7
 8023928:	4414      	add	r4, r2
 802392a:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 802392e:	f340 813f 	ble.w	8023bb0 <_vfiprintf_r+0x7fc>
 8023932:	aa0c      	add	r2, sp, #48	; 0x30
 8023934:	4639      	mov	r1, r7
 8023936:	4648      	mov	r0, r9
 8023938:	f7ff fd0a 	bl	8023350 <__sprint_r>
 802393c:	2800      	cmp	r0, #0
 802393e:	f040 8172 	bne.w	8023c26 <_vfiprintf_r+0x872>
 8023942:	ae0f      	add	r6, sp, #60	; 0x3c
 8023944:	9b00      	ldr	r3, [sp, #0]
 8023946:	1aec      	subs	r4, r5, r3
 8023948:	2c00      	cmp	r4, #0
 802394a:	dd1a      	ble.n	8023982 <_vfiprintf_r+0x5ce>
 802394c:	4d7a      	ldr	r5, [pc, #488]	; (8023b38 <_vfiprintf_r+0x784>)
 802394e:	6035      	str	r5, [r6, #0]
 8023950:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 8023954:	2c10      	cmp	r4, #16
 8023956:	f103 0301 	add.w	r3, r3, #1
 802395a:	f106 0208 	add.w	r2, r6, #8
 802395e:	f300 8129 	bgt.w	8023bb4 <_vfiprintf_r+0x800>
 8023962:	6074      	str	r4, [r6, #4]
 8023964:	2b07      	cmp	r3, #7
 8023966:	440c      	add	r4, r1
 8023968:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 802396c:	f340 8133 	ble.w	8023bd6 <_vfiprintf_r+0x822>
 8023970:	aa0c      	add	r2, sp, #48	; 0x30
 8023972:	4639      	mov	r1, r7
 8023974:	4648      	mov	r0, r9
 8023976:	f7ff fceb 	bl	8023350 <__sprint_r>
 802397a:	2800      	cmp	r0, #0
 802397c:	f040 8153 	bne.w	8023c26 <_vfiprintf_r+0x872>
 8023980:	ae0f      	add	r6, sp, #60	; 0x3c
 8023982:	9b00      	ldr	r3, [sp, #0]
 8023984:	980e      	ldr	r0, [sp, #56]	; 0x38
 8023986:	6073      	str	r3, [r6, #4]
 8023988:	4418      	add	r0, r3
 802398a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802398c:	f8c6 8000 	str.w	r8, [r6]
 8023990:	3301      	adds	r3, #1
 8023992:	2b07      	cmp	r3, #7
 8023994:	900e      	str	r0, [sp, #56]	; 0x38
 8023996:	930d      	str	r3, [sp, #52]	; 0x34
 8023998:	f300 811f 	bgt.w	8023bda <_vfiprintf_r+0x826>
 802399c:	f106 0308 	add.w	r3, r6, #8
 80239a0:	f01a 0f04 	tst.w	sl, #4
 80239a4:	f040 8121 	bne.w	8023bea <_vfiprintf_r+0x836>
 80239a8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80239ac:	9904      	ldr	r1, [sp, #16]
 80239ae:	428a      	cmp	r2, r1
 80239b0:	bfac      	ite	ge
 80239b2:	189b      	addge	r3, r3, r2
 80239b4:	185b      	addlt	r3, r3, r1
 80239b6:	9302      	str	r3, [sp, #8]
 80239b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80239ba:	b13b      	cbz	r3, 80239cc <_vfiprintf_r+0x618>
 80239bc:	aa0c      	add	r2, sp, #48	; 0x30
 80239be:	4639      	mov	r1, r7
 80239c0:	4648      	mov	r0, r9
 80239c2:	f7ff fcc5 	bl	8023350 <__sprint_r>
 80239c6:	2800      	cmp	r0, #0
 80239c8:	f040 812d 	bne.w	8023c26 <_vfiprintf_r+0x872>
 80239cc:	2300      	movs	r3, #0
 80239ce:	930d      	str	r3, [sp, #52]	; 0x34
 80239d0:	ae0f      	add	r6, sp, #60	; 0x3c
 80239d2:	e6c7      	b.n	8023764 <_vfiprintf_r+0x3b0>
 80239d4:	4640      	mov	r0, r8
 80239d6:	f7dc fc0b 	bl	80001f0 <strlen>
 80239da:	9000      	str	r0, [sp, #0]
 80239dc:	e737      	b.n	802384e <_vfiprintf_r+0x49a>
 80239de:	f04a 0a10 	orr.w	sl, sl, #16
 80239e2:	f01a 0320 	ands.w	r3, sl, #32
 80239e6:	d008      	beq.n	80239fa <_vfiprintf_r+0x646>
 80239e8:	3407      	adds	r4, #7
 80239ea:	f024 0307 	bic.w	r3, r4, #7
 80239ee:	469b      	mov	fp, r3
 80239f0:	685d      	ldr	r5, [r3, #4]
 80239f2:	f85b 4b08 	ldr.w	r4, [fp], #8
 80239f6:	2301      	movs	r3, #1
 80239f8:	e6da      	b.n	80237b0 <_vfiprintf_r+0x3fc>
 80239fa:	46a3      	mov	fp, r4
 80239fc:	f01a 0510 	ands.w	r5, sl, #16
 8023a00:	f85b 4b04 	ldr.w	r4, [fp], #4
 8023a04:	d001      	beq.n	8023a0a <_vfiprintf_r+0x656>
 8023a06:	461d      	mov	r5, r3
 8023a08:	e7f5      	b.n	80239f6 <_vfiprintf_r+0x642>
 8023a0a:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 8023a0e:	d001      	beq.n	8023a14 <_vfiprintf_r+0x660>
 8023a10:	b2a4      	uxth	r4, r4
 8023a12:	e7f0      	b.n	80239f6 <_vfiprintf_r+0x642>
 8023a14:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8023a18:	d0ed      	beq.n	80239f6 <_vfiprintf_r+0x642>
 8023a1a:	b2e4      	uxtb	r4, r4
 8023a1c:	e7f3      	b.n	8023a06 <_vfiprintf_r+0x652>
 8023a1e:	4a47      	ldr	r2, [pc, #284]	; (8023b3c <_vfiprintf_r+0x788>)
 8023a20:	e5c5      	b.n	80235ae <_vfiprintf_r+0x1fa>
 8023a22:	46a3      	mov	fp, r4
 8023a24:	f01a 0510 	ands.w	r5, sl, #16
 8023a28:	f85b 4b04 	ldr.w	r4, [fp], #4
 8023a2c:	d001      	beq.n	8023a32 <_vfiprintf_r+0x67e>
 8023a2e:	4615      	mov	r5, r2
 8023a30:	e5c9      	b.n	80235c6 <_vfiprintf_r+0x212>
 8023a32:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 8023a36:	d001      	beq.n	8023a3c <_vfiprintf_r+0x688>
 8023a38:	b2a4      	uxth	r4, r4
 8023a3a:	e5c4      	b.n	80235c6 <_vfiprintf_r+0x212>
 8023a3c:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8023a40:	f43f adc1 	beq.w	80235c6 <_vfiprintf_r+0x212>
 8023a44:	b2e4      	uxtb	r4, r4
 8023a46:	e7f2      	b.n	8023a2e <_vfiprintf_r+0x67a>
 8023a48:	2c0a      	cmp	r4, #10
 8023a4a:	f175 0300 	sbcs.w	r3, r5, #0
 8023a4e:	d205      	bcs.n	8023a5c <_vfiprintf_r+0x6a8>
 8023a50:	3430      	adds	r4, #48	; 0x30
 8023a52:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 8023a56:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 8023a5a:	e137      	b.n	8023ccc <_vfiprintf_r+0x918>
 8023a5c:	ab38      	add	r3, sp, #224	; 0xe0
 8023a5e:	9308      	str	r3, [sp, #32]
 8023a60:	9b04      	ldr	r3, [sp, #16]
 8023a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8023a66:	f04f 0a00 	mov.w	sl, #0
 8023a6a:	9309      	str	r3, [sp, #36]	; 0x24
 8023a6c:	9b08      	ldr	r3, [sp, #32]
 8023a6e:	220a      	movs	r2, #10
 8023a70:	f103 38ff 	add.w	r8, r3, #4294967295
 8023a74:	4620      	mov	r0, r4
 8023a76:	2300      	movs	r3, #0
 8023a78:	4629      	mov	r1, r5
 8023a7a:	f7dd f8a5 	bl	8000bc8 <__aeabi_uldivmod>
 8023a7e:	9b08      	ldr	r3, [sp, #32]
 8023a80:	3230      	adds	r2, #48	; 0x30
 8023a82:	f803 2c01 	strb.w	r2, [r3, #-1]
 8023a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023a88:	f10a 0a01 	add.w	sl, sl, #1
 8023a8c:	b1db      	cbz	r3, 8023ac6 <_vfiprintf_r+0x712>
 8023a8e:	9b06      	ldr	r3, [sp, #24]
 8023a90:	781b      	ldrb	r3, [r3, #0]
 8023a92:	4553      	cmp	r3, sl
 8023a94:	d117      	bne.n	8023ac6 <_vfiprintf_r+0x712>
 8023a96:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8023a9a:	d014      	beq.n	8023ac6 <_vfiprintf_r+0x712>
 8023a9c:	2c0a      	cmp	r4, #10
 8023a9e:	f175 0300 	sbcs.w	r3, r5, #0
 8023aa2:	d310      	bcc.n	8023ac6 <_vfiprintf_r+0x712>
 8023aa4:	9b07      	ldr	r3, [sp, #28]
 8023aa6:	eba8 0803 	sub.w	r8, r8, r3
 8023aaa:	461a      	mov	r2, r3
 8023aac:	ee18 1a10 	vmov	r1, s16
 8023ab0:	4640      	mov	r0, r8
 8023ab2:	f7ff fbb2 	bl	802321a <strncpy>
 8023ab6:	9b06      	ldr	r3, [sp, #24]
 8023ab8:	785b      	ldrb	r3, [r3, #1]
 8023aba:	b1a3      	cbz	r3, 8023ae6 <_vfiprintf_r+0x732>
 8023abc:	9b06      	ldr	r3, [sp, #24]
 8023abe:	3301      	adds	r3, #1
 8023ac0:	9306      	str	r3, [sp, #24]
 8023ac2:	f04f 0a00 	mov.w	sl, #0
 8023ac6:	2300      	movs	r3, #0
 8023ac8:	220a      	movs	r2, #10
 8023aca:	4620      	mov	r0, r4
 8023acc:	4629      	mov	r1, r5
 8023ace:	f7dd f87b 	bl	8000bc8 <__aeabi_uldivmod>
 8023ad2:	2c0a      	cmp	r4, #10
 8023ad4:	f175 0300 	sbcs.w	r3, r5, #0
 8023ad8:	f0c0 80f8 	bcc.w	8023ccc <_vfiprintf_r+0x918>
 8023adc:	4604      	mov	r4, r0
 8023ade:	460d      	mov	r5, r1
 8023ae0:	f8cd 8020 	str.w	r8, [sp, #32]
 8023ae4:	e7c2      	b.n	8023a6c <_vfiprintf_r+0x6b8>
 8023ae6:	469a      	mov	sl, r3
 8023ae8:	e7ed      	b.n	8023ac6 <_vfiprintf_r+0x712>
 8023aea:	f004 030f 	and.w	r3, r4, #15
 8023aee:	9a05      	ldr	r2, [sp, #20]
 8023af0:	0924      	lsrs	r4, r4, #4
 8023af2:	5cd3      	ldrb	r3, [r2, r3]
 8023af4:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8023af8:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8023afc:	092d      	lsrs	r5, r5, #4
 8023afe:	ea54 0305 	orrs.w	r3, r4, r5
 8023b02:	d1f2      	bne.n	8023aea <_vfiprintf_r+0x736>
 8023b04:	e0e2      	b.n	8023ccc <_vfiprintf_r+0x918>
 8023b06:	b933      	cbnz	r3, 8023b16 <_vfiprintf_r+0x762>
 8023b08:	f01a 0f01 	tst.w	sl, #1
 8023b0c:	d003      	beq.n	8023b16 <_vfiprintf_r+0x762>
 8023b0e:	2330      	movs	r3, #48	; 0x30
 8023b10:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 8023b14:	e79f      	b.n	8023a56 <_vfiprintf_r+0x6a2>
 8023b16:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8023b1a:	e0d7      	b.n	8023ccc <_vfiprintf_r+0x918>
 8023b1c:	2b00      	cmp	r3, #0
 8023b1e:	f000 80a3 	beq.w	8023c68 <_vfiprintf_r+0x8b4>
 8023b22:	2100      	movs	r1, #0
 8023b24:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8023b28:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8023b2c:	46a3      	mov	fp, r4
 8023b2e:	e5da      	b.n	80236e6 <_vfiprintf_r+0x332>
 8023b30:	4605      	mov	r5, r0
 8023b32:	e68c      	b.n	802384e <_vfiprintf_r+0x49a>
 8023b34:	0806f9b4 	.word	0x0806f9b4
 8023b38:	0806f9c4 	.word	0x0806f9c4
 8023b3c:	0806f789 	.word	0x0806f789
 8023b40:	2010      	movs	r0, #16
 8023b42:	4402      	add	r2, r0
 8023b44:	2b07      	cmp	r3, #7
 8023b46:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8023b4a:	6070      	str	r0, [r6, #4]
 8023b4c:	dd07      	ble.n	8023b5e <_vfiprintf_r+0x7aa>
 8023b4e:	aa0c      	add	r2, sp, #48	; 0x30
 8023b50:	4639      	mov	r1, r7
 8023b52:	4648      	mov	r0, r9
 8023b54:	f7ff fbfc 	bl	8023350 <__sprint_r>
 8023b58:	2800      	cmp	r0, #0
 8023b5a:	d164      	bne.n	8023c26 <_vfiprintf_r+0x872>
 8023b5c:	a90f      	add	r1, sp, #60	; 0x3c
 8023b5e:	3c10      	subs	r4, #16
 8023b60:	460e      	mov	r6, r1
 8023b62:	e68f      	b.n	8023884 <_vfiprintf_r+0x4d0>
 8023b64:	460e      	mov	r6, r1
 8023b66:	e6a8      	b.n	80238ba <_vfiprintf_r+0x506>
 8023b68:	aa0c      	add	r2, sp, #48	; 0x30
 8023b6a:	4639      	mov	r1, r7
 8023b6c:	4648      	mov	r0, r9
 8023b6e:	f7ff fbef 	bl	8023350 <__sprint_r>
 8023b72:	2800      	cmp	r0, #0
 8023b74:	d157      	bne.n	8023c26 <_vfiprintf_r+0x872>
 8023b76:	ae0f      	add	r6, sp, #60	; 0x3c
 8023b78:	e6b1      	b.n	80238de <_vfiprintf_r+0x52a>
 8023b7a:	aa0c      	add	r2, sp, #48	; 0x30
 8023b7c:	4639      	mov	r1, r7
 8023b7e:	4648      	mov	r0, r9
 8023b80:	f7ff fbe6 	bl	8023350 <__sprint_r>
 8023b84:	2800      	cmp	r0, #0
 8023b86:	d14e      	bne.n	8023c26 <_vfiprintf_r+0x872>
 8023b88:	ae0f      	add	r6, sp, #60	; 0x3c
 8023b8a:	e6b8      	b.n	80238fe <_vfiprintf_r+0x54a>
 8023b8c:	2010      	movs	r0, #16
 8023b8e:	4402      	add	r2, r0
 8023b90:	2b07      	cmp	r3, #7
 8023b92:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8023b96:	6070      	str	r0, [r6, #4]
 8023b98:	dd07      	ble.n	8023baa <_vfiprintf_r+0x7f6>
 8023b9a:	aa0c      	add	r2, sp, #48	; 0x30
 8023b9c:	4639      	mov	r1, r7
 8023b9e:	4648      	mov	r0, r9
 8023ba0:	f7ff fbd6 	bl	8023350 <__sprint_r>
 8023ba4:	2800      	cmp	r0, #0
 8023ba6:	d13e      	bne.n	8023c26 <_vfiprintf_r+0x872>
 8023ba8:	a90f      	add	r1, sp, #60	; 0x3c
 8023baa:	3c10      	subs	r4, #16
 8023bac:	460e      	mov	r6, r1
 8023bae:	e6ae      	b.n	802390e <_vfiprintf_r+0x55a>
 8023bb0:	460e      	mov	r6, r1
 8023bb2:	e6c7      	b.n	8023944 <_vfiprintf_r+0x590>
 8023bb4:	2010      	movs	r0, #16
 8023bb6:	4401      	add	r1, r0
 8023bb8:	2b07      	cmp	r3, #7
 8023bba:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8023bbe:	6070      	str	r0, [r6, #4]
 8023bc0:	dd06      	ble.n	8023bd0 <_vfiprintf_r+0x81c>
 8023bc2:	aa0c      	add	r2, sp, #48	; 0x30
 8023bc4:	4639      	mov	r1, r7
 8023bc6:	4648      	mov	r0, r9
 8023bc8:	f7ff fbc2 	bl	8023350 <__sprint_r>
 8023bcc:	bb58      	cbnz	r0, 8023c26 <_vfiprintf_r+0x872>
 8023bce:	aa0f      	add	r2, sp, #60	; 0x3c
 8023bd0:	3c10      	subs	r4, #16
 8023bd2:	4616      	mov	r6, r2
 8023bd4:	e6bb      	b.n	802394e <_vfiprintf_r+0x59a>
 8023bd6:	4616      	mov	r6, r2
 8023bd8:	e6d3      	b.n	8023982 <_vfiprintf_r+0x5ce>
 8023bda:	aa0c      	add	r2, sp, #48	; 0x30
 8023bdc:	4639      	mov	r1, r7
 8023bde:	4648      	mov	r0, r9
 8023be0:	f7ff fbb6 	bl	8023350 <__sprint_r>
 8023be4:	b9f8      	cbnz	r0, 8023c26 <_vfiprintf_r+0x872>
 8023be6:	ab0f      	add	r3, sp, #60	; 0x3c
 8023be8:	e6da      	b.n	80239a0 <_vfiprintf_r+0x5ec>
 8023bea:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8023bee:	1a54      	subs	r4, r2, r1
 8023bf0:	2c00      	cmp	r4, #0
 8023bf2:	f77f aed9 	ble.w	80239a8 <_vfiprintf_r+0x5f4>
 8023bf6:	4d39      	ldr	r5, [pc, #228]	; (8023cdc <_vfiprintf_r+0x928>)
 8023bf8:	2610      	movs	r6, #16
 8023bfa:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8023bfe:	2c10      	cmp	r4, #16
 8023c00:	f102 0201 	add.w	r2, r2, #1
 8023c04:	601d      	str	r5, [r3, #0]
 8023c06:	dc1d      	bgt.n	8023c44 <_vfiprintf_r+0x890>
 8023c08:	605c      	str	r4, [r3, #4]
 8023c0a:	2a07      	cmp	r2, #7
 8023c0c:	440c      	add	r4, r1
 8023c0e:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 8023c12:	f77f aec9 	ble.w	80239a8 <_vfiprintf_r+0x5f4>
 8023c16:	aa0c      	add	r2, sp, #48	; 0x30
 8023c18:	4639      	mov	r1, r7
 8023c1a:	4648      	mov	r0, r9
 8023c1c:	f7ff fb98 	bl	8023350 <__sprint_r>
 8023c20:	2800      	cmp	r0, #0
 8023c22:	f43f aec1 	beq.w	80239a8 <_vfiprintf_r+0x5f4>
 8023c26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8023c28:	07d9      	lsls	r1, r3, #31
 8023c2a:	d405      	bmi.n	8023c38 <_vfiprintf_r+0x884>
 8023c2c:	89bb      	ldrh	r3, [r7, #12]
 8023c2e:	059a      	lsls	r2, r3, #22
 8023c30:	d402      	bmi.n	8023c38 <_vfiprintf_r+0x884>
 8023c32:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8023c34:	f7fe fad7 	bl	80221e6 <__retarget_lock_release_recursive>
 8023c38:	89bb      	ldrh	r3, [r7, #12]
 8023c3a:	065b      	lsls	r3, r3, #25
 8023c3c:	f57f abed 	bpl.w	802341a <_vfiprintf_r+0x66>
 8023c40:	f7ff bbe8 	b.w	8023414 <_vfiprintf_r+0x60>
 8023c44:	3110      	adds	r1, #16
 8023c46:	2a07      	cmp	r2, #7
 8023c48:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 8023c4c:	605e      	str	r6, [r3, #4]
 8023c4e:	dc02      	bgt.n	8023c56 <_vfiprintf_r+0x8a2>
 8023c50:	3308      	adds	r3, #8
 8023c52:	3c10      	subs	r4, #16
 8023c54:	e7d1      	b.n	8023bfa <_vfiprintf_r+0x846>
 8023c56:	aa0c      	add	r2, sp, #48	; 0x30
 8023c58:	4639      	mov	r1, r7
 8023c5a:	4648      	mov	r0, r9
 8023c5c:	f7ff fb78 	bl	8023350 <__sprint_r>
 8023c60:	2800      	cmp	r0, #0
 8023c62:	d1e0      	bne.n	8023c26 <_vfiprintf_r+0x872>
 8023c64:	ab0f      	add	r3, sp, #60	; 0x3c
 8023c66:	e7f4      	b.n	8023c52 <_vfiprintf_r+0x89e>
 8023c68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023c6a:	b913      	cbnz	r3, 8023c72 <_vfiprintf_r+0x8be>
 8023c6c:	2300      	movs	r3, #0
 8023c6e:	930d      	str	r3, [sp, #52]	; 0x34
 8023c70:	e7d9      	b.n	8023c26 <_vfiprintf_r+0x872>
 8023c72:	aa0c      	add	r2, sp, #48	; 0x30
 8023c74:	4639      	mov	r1, r7
 8023c76:	4648      	mov	r0, r9
 8023c78:	f7ff fb6a 	bl	8023350 <__sprint_r>
 8023c7c:	2800      	cmp	r0, #0
 8023c7e:	d0f5      	beq.n	8023c6c <_vfiprintf_r+0x8b8>
 8023c80:	e7d1      	b.n	8023c26 <_vfiprintf_r+0x872>
 8023c82:	ea54 0205 	orrs.w	r2, r4, r5
 8023c86:	f8cd a010 	str.w	sl, [sp, #16]
 8023c8a:	f43f ada3 	beq.w	80237d4 <_vfiprintf_r+0x420>
 8023c8e:	2b01      	cmp	r3, #1
 8023c90:	f43f aeda 	beq.w	8023a48 <_vfiprintf_r+0x694>
 8023c94:	2b02      	cmp	r3, #2
 8023c96:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8023c9a:	f43f af26 	beq.w	8023aea <_vfiprintf_r+0x736>
 8023c9e:	f004 0307 	and.w	r3, r4, #7
 8023ca2:	08e4      	lsrs	r4, r4, #3
 8023ca4:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8023ca8:	08ed      	lsrs	r5, r5, #3
 8023caa:	3330      	adds	r3, #48	; 0x30
 8023cac:	ea54 0105 	orrs.w	r1, r4, r5
 8023cb0:	4642      	mov	r2, r8
 8023cb2:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8023cb6:	d1f2      	bne.n	8023c9e <_vfiprintf_r+0x8ea>
 8023cb8:	9904      	ldr	r1, [sp, #16]
 8023cba:	07c8      	lsls	r0, r1, #31
 8023cbc:	d506      	bpl.n	8023ccc <_vfiprintf_r+0x918>
 8023cbe:	2b30      	cmp	r3, #48	; 0x30
 8023cc0:	d004      	beq.n	8023ccc <_vfiprintf_r+0x918>
 8023cc2:	2330      	movs	r3, #48	; 0x30
 8023cc4:	f808 3c01 	strb.w	r3, [r8, #-1]
 8023cc8:	f1a2 0802 	sub.w	r8, r2, #2
 8023ccc:	ab38      	add	r3, sp, #224	; 0xe0
 8023cce:	eba3 0308 	sub.w	r3, r3, r8
 8023cd2:	9d00      	ldr	r5, [sp, #0]
 8023cd4:	f8dd a010 	ldr.w	sl, [sp, #16]
 8023cd8:	9300      	str	r3, [sp, #0]
 8023cda:	e5b8      	b.n	802384e <_vfiprintf_r+0x49a>
 8023cdc:	0806f9b4 	.word	0x0806f9b4

08023ce0 <__sbprintf>:
 8023ce0:	b570      	push	{r4, r5, r6, lr}
 8023ce2:	460c      	mov	r4, r1
 8023ce4:	8989      	ldrh	r1, [r1, #12]
 8023ce6:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8023cea:	f021 0102 	bic.w	r1, r1, #2
 8023cee:	f8ad 1014 	strh.w	r1, [sp, #20]
 8023cf2:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8023cf4:	911b      	str	r1, [sp, #108]	; 0x6c
 8023cf6:	89e1      	ldrh	r1, [r4, #14]
 8023cf8:	f8ad 1016 	strh.w	r1, [sp, #22]
 8023cfc:	69e1      	ldr	r1, [r4, #28]
 8023cfe:	9109      	str	r1, [sp, #36]	; 0x24
 8023d00:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8023d02:	910b      	str	r1, [sp, #44]	; 0x2c
 8023d04:	a91c      	add	r1, sp, #112	; 0x70
 8023d06:	9102      	str	r1, [sp, #8]
 8023d08:	9106      	str	r1, [sp, #24]
 8023d0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8023d0e:	4606      	mov	r6, r0
 8023d10:	9104      	str	r1, [sp, #16]
 8023d12:	9107      	str	r1, [sp, #28]
 8023d14:	a818      	add	r0, sp, #96	; 0x60
 8023d16:	2100      	movs	r1, #0
 8023d18:	e9cd 3200 	strd	r3, r2, [sp]
 8023d1c:	9108      	str	r1, [sp, #32]
 8023d1e:	f7fe fa5f 	bl	80221e0 <__retarget_lock_init_recursive>
 8023d22:	e9dd 3200 	ldrd	r3, r2, [sp]
 8023d26:	a902      	add	r1, sp, #8
 8023d28:	4630      	mov	r0, r6
 8023d2a:	f7ff fb43 	bl	80233b4 <_vfiprintf_r>
 8023d2e:	1e05      	subs	r5, r0, #0
 8023d30:	db07      	blt.n	8023d42 <__sbprintf+0x62>
 8023d32:	a902      	add	r1, sp, #8
 8023d34:	4630      	mov	r0, r6
 8023d36:	f7fd ff29 	bl	8021b8c <_fflush_r>
 8023d3a:	2800      	cmp	r0, #0
 8023d3c:	bf18      	it	ne
 8023d3e:	f04f 35ff 	movne.w	r5, #4294967295
 8023d42:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8023d46:	9818      	ldr	r0, [sp, #96]	; 0x60
 8023d48:	065b      	lsls	r3, r3, #25
 8023d4a:	bf42      	ittt	mi
 8023d4c:	89a3      	ldrhmi	r3, [r4, #12]
 8023d4e:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8023d52:	81a3      	strhmi	r3, [r4, #12]
 8023d54:	f7fe fa45 	bl	80221e2 <__retarget_lock_close_recursive>
 8023d58:	4628      	mov	r0, r5
 8023d5a:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 8023d5e:	bd70      	pop	{r4, r5, r6, pc}

08023d60 <_write_r>:
 8023d60:	b538      	push	{r3, r4, r5, lr}
 8023d62:	4d07      	ldr	r5, [pc, #28]	; (8023d80 <_write_r+0x20>)
 8023d64:	4604      	mov	r4, r0
 8023d66:	4608      	mov	r0, r1
 8023d68:	4611      	mov	r1, r2
 8023d6a:	2200      	movs	r2, #0
 8023d6c:	602a      	str	r2, [r5, #0]
 8023d6e:	461a      	mov	r2, r3
 8023d70:	f7de fc49 	bl	8002606 <_write>
 8023d74:	1c43      	adds	r3, r0, #1
 8023d76:	d102      	bne.n	8023d7e <_write_r+0x1e>
 8023d78:	682b      	ldr	r3, [r5, #0]
 8023d7a:	b103      	cbz	r3, 8023d7e <_write_r+0x1e>
 8023d7c:	6023      	str	r3, [r4, #0]
 8023d7e:	bd38      	pop	{r3, r4, r5, pc}
 8023d80:	2000c344 	.word	0x2000c344

08023d84 <__register_exitproc>:
 8023d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023d88:	f8df a078 	ldr.w	sl, [pc, #120]	; 8023e04 <__register_exitproc+0x80>
 8023d8c:	4606      	mov	r6, r0
 8023d8e:	f8da 0000 	ldr.w	r0, [sl]
 8023d92:	4698      	mov	r8, r3
 8023d94:	460f      	mov	r7, r1
 8023d96:	4691      	mov	r9, r2
 8023d98:	f7fe fa24 	bl	80221e4 <__retarget_lock_acquire_recursive>
 8023d9c:	4b18      	ldr	r3, [pc, #96]	; (8023e00 <__register_exitproc+0x7c>)
 8023d9e:	681b      	ldr	r3, [r3, #0]
 8023da0:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8023da4:	b91c      	cbnz	r4, 8023dae <__register_exitproc+0x2a>
 8023da6:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8023daa:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8023dae:	6865      	ldr	r5, [r4, #4]
 8023db0:	f8da 0000 	ldr.w	r0, [sl]
 8023db4:	2d1f      	cmp	r5, #31
 8023db6:	dd05      	ble.n	8023dc4 <__register_exitproc+0x40>
 8023db8:	f7fe fa15 	bl	80221e6 <__retarget_lock_release_recursive>
 8023dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8023dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023dc4:	b19e      	cbz	r6, 8023dee <__register_exitproc+0x6a>
 8023dc6:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8023dca:	2201      	movs	r2, #1
 8023dcc:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8023dd0:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8023dd4:	40aa      	lsls	r2, r5
 8023dd6:	4313      	orrs	r3, r2
 8023dd8:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8023ddc:	2e02      	cmp	r6, #2
 8023dde:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8023de2:	bf02      	ittt	eq
 8023de4:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8023de8:	4313      	orreq	r3, r2
 8023dea:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 8023dee:	1c6b      	adds	r3, r5, #1
 8023df0:	3502      	adds	r5, #2
 8023df2:	6063      	str	r3, [r4, #4]
 8023df4:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8023df8:	f7fe f9f5 	bl	80221e6 <__retarget_lock_release_recursive>
 8023dfc:	2000      	movs	r0, #0
 8023dfe:	e7df      	b.n	8023dc0 <__register_exitproc+0x3c>
 8023e00:	0806f764 	.word	0x0806f764
 8023e04:	20000450 	.word	0x20000450

08023e08 <__assert_func>:
 8023e08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8023e0a:	4614      	mov	r4, r2
 8023e0c:	461a      	mov	r2, r3
 8023e0e:	4b09      	ldr	r3, [pc, #36]	; (8023e34 <__assert_func+0x2c>)
 8023e10:	681b      	ldr	r3, [r3, #0]
 8023e12:	4605      	mov	r5, r0
 8023e14:	68d8      	ldr	r0, [r3, #12]
 8023e16:	b14c      	cbz	r4, 8023e2c <__assert_func+0x24>
 8023e18:	4b07      	ldr	r3, [pc, #28]	; (8023e38 <__assert_func+0x30>)
 8023e1a:	9100      	str	r1, [sp, #0]
 8023e1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8023e20:	4906      	ldr	r1, [pc, #24]	; (8023e3c <__assert_func+0x34>)
 8023e22:	462b      	mov	r3, r5
 8023e24:	f000 f8ac 	bl	8023f80 <fiprintf>
 8023e28:	f000 f9f3 	bl	8024212 <abort>
 8023e2c:	4b04      	ldr	r3, [pc, #16]	; (8023e40 <__assert_func+0x38>)
 8023e2e:	461c      	mov	r4, r3
 8023e30:	e7f3      	b.n	8023e1a <__assert_func+0x12>
 8023e32:	bf00      	nop
 8023e34:	20000020 	.word	0x20000020
 8023e38:	0806f9d4 	.word	0x0806f9d4
 8023e3c:	0806f9e1 	.word	0x0806f9e1
 8023e40:	0806fa0f 	.word	0x0806fa0f

08023e44 <_calloc_r>:
 8023e44:	b538      	push	{r3, r4, r5, lr}
 8023e46:	fba1 1502 	umull	r1, r5, r1, r2
 8023e4a:	b92d      	cbnz	r5, 8023e58 <_calloc_r+0x14>
 8023e4c:	f7fe fa38 	bl	80222c0 <_malloc_r>
 8023e50:	4604      	mov	r4, r0
 8023e52:	b938      	cbnz	r0, 8023e64 <_calloc_r+0x20>
 8023e54:	4620      	mov	r0, r4
 8023e56:	bd38      	pop	{r3, r4, r5, pc}
 8023e58:	f7fd fe04 	bl	8021a64 <__errno>
 8023e5c:	230c      	movs	r3, #12
 8023e5e:	6003      	str	r3, [r0, #0]
 8023e60:	2400      	movs	r4, #0
 8023e62:	e7f7      	b.n	8023e54 <_calloc_r+0x10>
 8023e64:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8023e68:	f022 0203 	bic.w	r2, r2, #3
 8023e6c:	3a04      	subs	r2, #4
 8023e6e:	2a24      	cmp	r2, #36	; 0x24
 8023e70:	d819      	bhi.n	8023ea6 <_calloc_r+0x62>
 8023e72:	2a13      	cmp	r2, #19
 8023e74:	d915      	bls.n	8023ea2 <_calloc_r+0x5e>
 8023e76:	2a1b      	cmp	r2, #27
 8023e78:	e9c0 5500 	strd	r5, r5, [r0]
 8023e7c:	d806      	bhi.n	8023e8c <_calloc_r+0x48>
 8023e7e:	f100 0308 	add.w	r3, r0, #8
 8023e82:	2200      	movs	r2, #0
 8023e84:	e9c3 2200 	strd	r2, r2, [r3]
 8023e88:	609a      	str	r2, [r3, #8]
 8023e8a:	e7e3      	b.n	8023e54 <_calloc_r+0x10>
 8023e8c:	2a24      	cmp	r2, #36	; 0x24
 8023e8e:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8023e92:	bf11      	iteee	ne
 8023e94:	f100 0310 	addne.w	r3, r0, #16
 8023e98:	6105      	streq	r5, [r0, #16]
 8023e9a:	f100 0318 	addeq.w	r3, r0, #24
 8023e9e:	6145      	streq	r5, [r0, #20]
 8023ea0:	e7ef      	b.n	8023e82 <_calloc_r+0x3e>
 8023ea2:	4603      	mov	r3, r0
 8023ea4:	e7ed      	b.n	8023e82 <_calloc_r+0x3e>
 8023ea6:	4629      	mov	r1, r5
 8023ea8:	f7fa fa0e 	bl	801e2c8 <memset>
 8023eac:	e7d2      	b.n	8023e54 <_calloc_r+0x10>
	...

08023eb0 <_close_r>:
 8023eb0:	b538      	push	{r3, r4, r5, lr}
 8023eb2:	4d06      	ldr	r5, [pc, #24]	; (8023ecc <_close_r+0x1c>)
 8023eb4:	2300      	movs	r3, #0
 8023eb6:	4604      	mov	r4, r0
 8023eb8:	4608      	mov	r0, r1
 8023eba:	602b      	str	r3, [r5, #0]
 8023ebc:	f7de fbbf 	bl	800263e <_close>
 8023ec0:	1c43      	adds	r3, r0, #1
 8023ec2:	d102      	bne.n	8023eca <_close_r+0x1a>
 8023ec4:	682b      	ldr	r3, [r5, #0]
 8023ec6:	b103      	cbz	r3, 8023eca <_close_r+0x1a>
 8023ec8:	6023      	str	r3, [r4, #0]
 8023eca:	bd38      	pop	{r3, r4, r5, pc}
 8023ecc:	2000c344 	.word	0x2000c344

08023ed0 <_fclose_r>:
 8023ed0:	b570      	push	{r4, r5, r6, lr}
 8023ed2:	4606      	mov	r6, r0
 8023ed4:	460c      	mov	r4, r1
 8023ed6:	b911      	cbnz	r1, 8023ede <_fclose_r+0xe>
 8023ed8:	2500      	movs	r5, #0
 8023eda:	4628      	mov	r0, r5
 8023edc:	bd70      	pop	{r4, r5, r6, pc}
 8023ede:	b118      	cbz	r0, 8023ee8 <_fclose_r+0x18>
 8023ee0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8023ee2:	b90b      	cbnz	r3, 8023ee8 <_fclose_r+0x18>
 8023ee4:	f7fd febe 	bl	8021c64 <__sinit>
 8023ee8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023eea:	07d8      	lsls	r0, r3, #31
 8023eec:	d405      	bmi.n	8023efa <_fclose_r+0x2a>
 8023eee:	89a3      	ldrh	r3, [r4, #12]
 8023ef0:	0599      	lsls	r1, r3, #22
 8023ef2:	d402      	bmi.n	8023efa <_fclose_r+0x2a>
 8023ef4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023ef6:	f7fe f975 	bl	80221e4 <__retarget_lock_acquire_recursive>
 8023efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023efe:	b93b      	cbnz	r3, 8023f10 <_fclose_r+0x40>
 8023f00:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8023f02:	f015 0501 	ands.w	r5, r5, #1
 8023f06:	d1e7      	bne.n	8023ed8 <_fclose_r+0x8>
 8023f08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023f0a:	f7fe f96c 	bl	80221e6 <__retarget_lock_release_recursive>
 8023f0e:	e7e4      	b.n	8023eda <_fclose_r+0xa>
 8023f10:	4621      	mov	r1, r4
 8023f12:	4630      	mov	r0, r6
 8023f14:	f7fd fdac 	bl	8021a70 <__sflush_r>
 8023f18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8023f1a:	4605      	mov	r5, r0
 8023f1c:	b133      	cbz	r3, 8023f2c <_fclose_r+0x5c>
 8023f1e:	69e1      	ldr	r1, [r4, #28]
 8023f20:	4630      	mov	r0, r6
 8023f22:	4798      	blx	r3
 8023f24:	2800      	cmp	r0, #0
 8023f26:	bfb8      	it	lt
 8023f28:	f04f 35ff 	movlt.w	r5, #4294967295
 8023f2c:	89a3      	ldrh	r3, [r4, #12]
 8023f2e:	061a      	lsls	r2, r3, #24
 8023f30:	d503      	bpl.n	8023f3a <_fclose_r+0x6a>
 8023f32:	6921      	ldr	r1, [r4, #16]
 8023f34:	4630      	mov	r0, r6
 8023f36:	f7fd ff25 	bl	8021d84 <_free_r>
 8023f3a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8023f3c:	b141      	cbz	r1, 8023f50 <_fclose_r+0x80>
 8023f3e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8023f42:	4299      	cmp	r1, r3
 8023f44:	d002      	beq.n	8023f4c <_fclose_r+0x7c>
 8023f46:	4630      	mov	r0, r6
 8023f48:	f7fd ff1c 	bl	8021d84 <_free_r>
 8023f4c:	2300      	movs	r3, #0
 8023f4e:	6323      	str	r3, [r4, #48]	; 0x30
 8023f50:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8023f52:	b121      	cbz	r1, 8023f5e <_fclose_r+0x8e>
 8023f54:	4630      	mov	r0, r6
 8023f56:	f7fd ff15 	bl	8021d84 <_free_r>
 8023f5a:	2300      	movs	r3, #0
 8023f5c:	6463      	str	r3, [r4, #68]	; 0x44
 8023f5e:	f7fd fe69 	bl	8021c34 <__sfp_lock_acquire>
 8023f62:	2300      	movs	r3, #0
 8023f64:	81a3      	strh	r3, [r4, #12]
 8023f66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023f68:	07db      	lsls	r3, r3, #31
 8023f6a:	d402      	bmi.n	8023f72 <_fclose_r+0xa2>
 8023f6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023f6e:	f7fe f93a 	bl	80221e6 <__retarget_lock_release_recursive>
 8023f72:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023f74:	f7fe f935 	bl	80221e2 <__retarget_lock_close_recursive>
 8023f78:	f7fd fe62 	bl	8021c40 <__sfp_lock_release>
 8023f7c:	e7ad      	b.n	8023eda <_fclose_r+0xa>
	...

08023f80 <fiprintf>:
 8023f80:	b40e      	push	{r1, r2, r3}
 8023f82:	b503      	push	{r0, r1, lr}
 8023f84:	4601      	mov	r1, r0
 8023f86:	ab03      	add	r3, sp, #12
 8023f88:	4805      	ldr	r0, [pc, #20]	; (8023fa0 <fiprintf+0x20>)
 8023f8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8023f8e:	6800      	ldr	r0, [r0, #0]
 8023f90:	9301      	str	r3, [sp, #4]
 8023f92:	f7ff fa0f 	bl	80233b4 <_vfiprintf_r>
 8023f96:	b002      	add	sp, #8
 8023f98:	f85d eb04 	ldr.w	lr, [sp], #4
 8023f9c:	b003      	add	sp, #12
 8023f9e:	4770      	bx	lr
 8023fa0:	20000020 	.word	0x20000020

08023fa4 <__fputwc>:
 8023fa4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8023fa8:	4680      	mov	r8, r0
 8023faa:	460e      	mov	r6, r1
 8023fac:	4615      	mov	r5, r2
 8023fae:	f000 f887 	bl	80240c0 <__locale_mb_cur_max>
 8023fb2:	2801      	cmp	r0, #1
 8023fb4:	d11c      	bne.n	8023ff0 <__fputwc+0x4c>
 8023fb6:	1e73      	subs	r3, r6, #1
 8023fb8:	2bfe      	cmp	r3, #254	; 0xfe
 8023fba:	d819      	bhi.n	8023ff0 <__fputwc+0x4c>
 8023fbc:	f88d 6004 	strb.w	r6, [sp, #4]
 8023fc0:	4604      	mov	r4, r0
 8023fc2:	2700      	movs	r7, #0
 8023fc4:	f10d 0904 	add.w	r9, sp, #4
 8023fc8:	42a7      	cmp	r7, r4
 8023fca:	d020      	beq.n	802400e <__fputwc+0x6a>
 8023fcc:	68ab      	ldr	r3, [r5, #8]
 8023fce:	f817 1009 	ldrb.w	r1, [r7, r9]
 8023fd2:	3b01      	subs	r3, #1
 8023fd4:	2b00      	cmp	r3, #0
 8023fd6:	60ab      	str	r3, [r5, #8]
 8023fd8:	da04      	bge.n	8023fe4 <__fputwc+0x40>
 8023fda:	69aa      	ldr	r2, [r5, #24]
 8023fdc:	4293      	cmp	r3, r2
 8023fde:	db1a      	blt.n	8024016 <__fputwc+0x72>
 8023fe0:	290a      	cmp	r1, #10
 8023fe2:	d018      	beq.n	8024016 <__fputwc+0x72>
 8023fe4:	682b      	ldr	r3, [r5, #0]
 8023fe6:	1c5a      	adds	r2, r3, #1
 8023fe8:	602a      	str	r2, [r5, #0]
 8023fea:	7019      	strb	r1, [r3, #0]
 8023fec:	3701      	adds	r7, #1
 8023fee:	e7eb      	b.n	8023fc8 <__fputwc+0x24>
 8023ff0:	a901      	add	r1, sp, #4
 8023ff2:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 8023ff6:	4632      	mov	r2, r6
 8023ff8:	4640      	mov	r0, r8
 8023ffa:	f000 f8e7 	bl	80241cc <_wcrtomb_r>
 8023ffe:	1c41      	adds	r1, r0, #1
 8024000:	4604      	mov	r4, r0
 8024002:	d1de      	bne.n	8023fc2 <__fputwc+0x1e>
 8024004:	89ab      	ldrh	r3, [r5, #12]
 8024006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802400a:	81ab      	strh	r3, [r5, #12]
 802400c:	4606      	mov	r6, r0
 802400e:	4630      	mov	r0, r6
 8024010:	b003      	add	sp, #12
 8024012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024016:	462a      	mov	r2, r5
 8024018:	4640      	mov	r0, r8
 802401a:	f000 f88d 	bl	8024138 <__swbuf_r>
 802401e:	1c42      	adds	r2, r0, #1
 8024020:	d1e4      	bne.n	8023fec <__fputwc+0x48>
 8024022:	4606      	mov	r6, r0
 8024024:	e7f3      	b.n	802400e <__fputwc+0x6a>

08024026 <_fputwc_r>:
 8024026:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8024028:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802402a:	4614      	mov	r4, r2
 802402c:	07da      	lsls	r2, r3, #31
 802402e:	4605      	mov	r5, r0
 8024030:	d407      	bmi.n	8024042 <_fputwc_r+0x1c>
 8024032:	89a3      	ldrh	r3, [r4, #12]
 8024034:	059b      	lsls	r3, r3, #22
 8024036:	d404      	bmi.n	8024042 <_fputwc_r+0x1c>
 8024038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802403a:	9101      	str	r1, [sp, #4]
 802403c:	f7fe f8d2 	bl	80221e4 <__retarget_lock_acquire_recursive>
 8024040:	9901      	ldr	r1, [sp, #4]
 8024042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024046:	0498      	lsls	r0, r3, #18
 8024048:	d406      	bmi.n	8024058 <_fputwc_r+0x32>
 802404a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 802404e:	81a3      	strh	r3, [r4, #12]
 8024050:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024052:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8024056:	6663      	str	r3, [r4, #100]	; 0x64
 8024058:	4622      	mov	r2, r4
 802405a:	4628      	mov	r0, r5
 802405c:	f7ff ffa2 	bl	8023fa4 <__fputwc>
 8024060:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024062:	07da      	lsls	r2, r3, #31
 8024064:	4605      	mov	r5, r0
 8024066:	d405      	bmi.n	8024074 <_fputwc_r+0x4e>
 8024068:	89a3      	ldrh	r3, [r4, #12]
 802406a:	059b      	lsls	r3, r3, #22
 802406c:	d402      	bmi.n	8024074 <_fputwc_r+0x4e>
 802406e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024070:	f7fe f8b9 	bl	80221e6 <__retarget_lock_release_recursive>
 8024074:	4628      	mov	r0, r5
 8024076:	b003      	add	sp, #12
 8024078:	bd30      	pop	{r4, r5, pc}
	...

0802407c <_fstat_r>:
 802407c:	b538      	push	{r3, r4, r5, lr}
 802407e:	4d07      	ldr	r5, [pc, #28]	; (802409c <_fstat_r+0x20>)
 8024080:	2300      	movs	r3, #0
 8024082:	4604      	mov	r4, r0
 8024084:	4608      	mov	r0, r1
 8024086:	4611      	mov	r1, r2
 8024088:	602b      	str	r3, [r5, #0]
 802408a:	f7de fae4 	bl	8002656 <_fstat>
 802408e:	1c43      	adds	r3, r0, #1
 8024090:	d102      	bne.n	8024098 <_fstat_r+0x1c>
 8024092:	682b      	ldr	r3, [r5, #0]
 8024094:	b103      	cbz	r3, 8024098 <_fstat_r+0x1c>
 8024096:	6023      	str	r3, [r4, #0]
 8024098:	bd38      	pop	{r3, r4, r5, pc}
 802409a:	bf00      	nop
 802409c:	2000c344 	.word	0x2000c344

080240a0 <_isatty_r>:
 80240a0:	b538      	push	{r3, r4, r5, lr}
 80240a2:	4d06      	ldr	r5, [pc, #24]	; (80240bc <_isatty_r+0x1c>)
 80240a4:	2300      	movs	r3, #0
 80240a6:	4604      	mov	r4, r0
 80240a8:	4608      	mov	r0, r1
 80240aa:	602b      	str	r3, [r5, #0]
 80240ac:	f7de fae3 	bl	8002676 <_isatty>
 80240b0:	1c43      	adds	r3, r0, #1
 80240b2:	d102      	bne.n	80240ba <_isatty_r+0x1a>
 80240b4:	682b      	ldr	r3, [r5, #0]
 80240b6:	b103      	cbz	r3, 80240ba <_isatty_r+0x1a>
 80240b8:	6023      	str	r3, [r4, #0]
 80240ba:	bd38      	pop	{r3, r4, r5, pc}
 80240bc:	2000c344 	.word	0x2000c344

080240c0 <__locale_mb_cur_max>:
 80240c0:	4b01      	ldr	r3, [pc, #4]	; (80240c8 <__locale_mb_cur_max+0x8>)
 80240c2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 80240c6:	4770      	bx	lr
 80240c8:	20000864 	.word	0x20000864

080240cc <_lseek_r>:
 80240cc:	b538      	push	{r3, r4, r5, lr}
 80240ce:	4d07      	ldr	r5, [pc, #28]	; (80240ec <_lseek_r+0x20>)
 80240d0:	4604      	mov	r4, r0
 80240d2:	4608      	mov	r0, r1
 80240d4:	4611      	mov	r1, r2
 80240d6:	2200      	movs	r2, #0
 80240d8:	602a      	str	r2, [r5, #0]
 80240da:	461a      	mov	r2, r3
 80240dc:	f7de fad6 	bl	800268c <_lseek>
 80240e0:	1c43      	adds	r3, r0, #1
 80240e2:	d102      	bne.n	80240ea <_lseek_r+0x1e>
 80240e4:	682b      	ldr	r3, [r5, #0]
 80240e6:	b103      	cbz	r3, 80240ea <_lseek_r+0x1e>
 80240e8:	6023      	str	r3, [r4, #0]
 80240ea:	bd38      	pop	{r3, r4, r5, pc}
 80240ec:	2000c344 	.word	0x2000c344

080240f0 <__ascii_mbtowc>:
 80240f0:	b082      	sub	sp, #8
 80240f2:	b901      	cbnz	r1, 80240f6 <__ascii_mbtowc+0x6>
 80240f4:	a901      	add	r1, sp, #4
 80240f6:	b142      	cbz	r2, 802410a <__ascii_mbtowc+0x1a>
 80240f8:	b14b      	cbz	r3, 802410e <__ascii_mbtowc+0x1e>
 80240fa:	7813      	ldrb	r3, [r2, #0]
 80240fc:	600b      	str	r3, [r1, #0]
 80240fe:	7812      	ldrb	r2, [r2, #0]
 8024100:	1e10      	subs	r0, r2, #0
 8024102:	bf18      	it	ne
 8024104:	2001      	movne	r0, #1
 8024106:	b002      	add	sp, #8
 8024108:	4770      	bx	lr
 802410a:	4610      	mov	r0, r2
 802410c:	e7fb      	b.n	8024106 <__ascii_mbtowc+0x16>
 802410e:	f06f 0001 	mvn.w	r0, #1
 8024112:	e7f8      	b.n	8024106 <__ascii_mbtowc+0x16>

08024114 <_read_r>:
 8024114:	b538      	push	{r3, r4, r5, lr}
 8024116:	4d07      	ldr	r5, [pc, #28]	; (8024134 <_read_r+0x20>)
 8024118:	4604      	mov	r4, r0
 802411a:	4608      	mov	r0, r1
 802411c:	4611      	mov	r1, r2
 802411e:	2200      	movs	r2, #0
 8024120:	602a      	str	r2, [r5, #0]
 8024122:	461a      	mov	r2, r3
 8024124:	f7de fa52 	bl	80025cc <_read>
 8024128:	1c43      	adds	r3, r0, #1
 802412a:	d102      	bne.n	8024132 <_read_r+0x1e>
 802412c:	682b      	ldr	r3, [r5, #0]
 802412e:	b103      	cbz	r3, 8024132 <_read_r+0x1e>
 8024130:	6023      	str	r3, [r4, #0]
 8024132:	bd38      	pop	{r3, r4, r5, pc}
 8024134:	2000c344 	.word	0x2000c344

08024138 <__swbuf_r>:
 8024138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802413a:	460e      	mov	r6, r1
 802413c:	4614      	mov	r4, r2
 802413e:	4605      	mov	r5, r0
 8024140:	b118      	cbz	r0, 802414a <__swbuf_r+0x12>
 8024142:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8024144:	b90b      	cbnz	r3, 802414a <__swbuf_r+0x12>
 8024146:	f7fd fd8d 	bl	8021c64 <__sinit>
 802414a:	69a3      	ldr	r3, [r4, #24]
 802414c:	60a3      	str	r3, [r4, #8]
 802414e:	89a3      	ldrh	r3, [r4, #12]
 8024150:	0719      	lsls	r1, r3, #28
 8024152:	d529      	bpl.n	80241a8 <__swbuf_r+0x70>
 8024154:	6923      	ldr	r3, [r4, #16]
 8024156:	b33b      	cbz	r3, 80241a8 <__swbuf_r+0x70>
 8024158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802415c:	b2f6      	uxtb	r6, r6
 802415e:	049a      	lsls	r2, r3, #18
 8024160:	4637      	mov	r7, r6
 8024162:	d52a      	bpl.n	80241ba <__swbuf_r+0x82>
 8024164:	6823      	ldr	r3, [r4, #0]
 8024166:	6920      	ldr	r0, [r4, #16]
 8024168:	1a18      	subs	r0, r3, r0
 802416a:	6963      	ldr	r3, [r4, #20]
 802416c:	4283      	cmp	r3, r0
 802416e:	dc04      	bgt.n	802417a <__swbuf_r+0x42>
 8024170:	4621      	mov	r1, r4
 8024172:	4628      	mov	r0, r5
 8024174:	f7fd fd0a 	bl	8021b8c <_fflush_r>
 8024178:	b9e0      	cbnz	r0, 80241b4 <__swbuf_r+0x7c>
 802417a:	68a3      	ldr	r3, [r4, #8]
 802417c:	3b01      	subs	r3, #1
 802417e:	60a3      	str	r3, [r4, #8]
 8024180:	6823      	ldr	r3, [r4, #0]
 8024182:	1c5a      	adds	r2, r3, #1
 8024184:	6022      	str	r2, [r4, #0]
 8024186:	701e      	strb	r6, [r3, #0]
 8024188:	6962      	ldr	r2, [r4, #20]
 802418a:	1c43      	adds	r3, r0, #1
 802418c:	429a      	cmp	r2, r3
 802418e:	d004      	beq.n	802419a <__swbuf_r+0x62>
 8024190:	89a3      	ldrh	r3, [r4, #12]
 8024192:	07db      	lsls	r3, r3, #31
 8024194:	d506      	bpl.n	80241a4 <__swbuf_r+0x6c>
 8024196:	2e0a      	cmp	r6, #10
 8024198:	d104      	bne.n	80241a4 <__swbuf_r+0x6c>
 802419a:	4621      	mov	r1, r4
 802419c:	4628      	mov	r0, r5
 802419e:	f7fd fcf5 	bl	8021b8c <_fflush_r>
 80241a2:	b938      	cbnz	r0, 80241b4 <__swbuf_r+0x7c>
 80241a4:	4638      	mov	r0, r7
 80241a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80241a8:	4621      	mov	r1, r4
 80241aa:	4628      	mov	r0, r5
 80241ac:	f7fc fd8e 	bl	8020ccc <__swsetup_r>
 80241b0:	2800      	cmp	r0, #0
 80241b2:	d0d1      	beq.n	8024158 <__swbuf_r+0x20>
 80241b4:	f04f 37ff 	mov.w	r7, #4294967295
 80241b8:	e7f4      	b.n	80241a4 <__swbuf_r+0x6c>
 80241ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80241be:	81a3      	strh	r3, [r4, #12]
 80241c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80241c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80241c6:	6663      	str	r3, [r4, #100]	; 0x64
 80241c8:	e7cc      	b.n	8024164 <__swbuf_r+0x2c>
	...

080241cc <_wcrtomb_r>:
 80241cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80241ce:	4c09      	ldr	r4, [pc, #36]	; (80241f4 <_wcrtomb_r+0x28>)
 80241d0:	b085      	sub	sp, #20
 80241d2:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 80241d6:	4605      	mov	r5, r0
 80241d8:	461e      	mov	r6, r3
 80241da:	b909      	cbnz	r1, 80241e0 <_wcrtomb_r+0x14>
 80241dc:	460a      	mov	r2, r1
 80241de:	a901      	add	r1, sp, #4
 80241e0:	47b8      	blx	r7
 80241e2:	1c43      	adds	r3, r0, #1
 80241e4:	bf01      	itttt	eq
 80241e6:	2300      	moveq	r3, #0
 80241e8:	6033      	streq	r3, [r6, #0]
 80241ea:	238a      	moveq	r3, #138	; 0x8a
 80241ec:	602b      	streq	r3, [r5, #0]
 80241ee:	b005      	add	sp, #20
 80241f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80241f2:	bf00      	nop
 80241f4:	20000864 	.word	0x20000864

080241f8 <__ascii_wctomb>:
 80241f8:	b149      	cbz	r1, 802420e <__ascii_wctomb+0x16>
 80241fa:	2aff      	cmp	r2, #255	; 0xff
 80241fc:	bf85      	ittet	hi
 80241fe:	238a      	movhi	r3, #138	; 0x8a
 8024200:	6003      	strhi	r3, [r0, #0]
 8024202:	700a      	strbls	r2, [r1, #0]
 8024204:	f04f 30ff 	movhi.w	r0, #4294967295
 8024208:	bf98      	it	ls
 802420a:	2001      	movls	r0, #1
 802420c:	4770      	bx	lr
 802420e:	4608      	mov	r0, r1
 8024210:	4770      	bx	lr

08024212 <abort>:
 8024212:	b508      	push	{r3, lr}
 8024214:	2006      	movs	r0, #6
 8024216:	f000 f82d 	bl	8024274 <raise>
 802421a:	2001      	movs	r0, #1
 802421c:	f7de f9cc 	bl	80025b8 <_exit>

08024220 <_raise_r>:
 8024220:	291f      	cmp	r1, #31
 8024222:	b538      	push	{r3, r4, r5, lr}
 8024224:	4604      	mov	r4, r0
 8024226:	460d      	mov	r5, r1
 8024228:	d904      	bls.n	8024234 <_raise_r+0x14>
 802422a:	2316      	movs	r3, #22
 802422c:	6003      	str	r3, [r0, #0]
 802422e:	f04f 30ff 	mov.w	r0, #4294967295
 8024232:	bd38      	pop	{r3, r4, r5, pc}
 8024234:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8024238:	b112      	cbz	r2, 8024240 <_raise_r+0x20>
 802423a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802423e:	b94b      	cbnz	r3, 8024254 <_raise_r+0x34>
 8024240:	4620      	mov	r0, r4
 8024242:	f000 f831 	bl	80242a8 <_getpid_r>
 8024246:	462a      	mov	r2, r5
 8024248:	4601      	mov	r1, r0
 802424a:	4620      	mov	r0, r4
 802424c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024250:	f000 b818 	b.w	8024284 <_kill_r>
 8024254:	2b01      	cmp	r3, #1
 8024256:	d00a      	beq.n	802426e <_raise_r+0x4e>
 8024258:	1c59      	adds	r1, r3, #1
 802425a:	d103      	bne.n	8024264 <_raise_r+0x44>
 802425c:	2316      	movs	r3, #22
 802425e:	6003      	str	r3, [r0, #0]
 8024260:	2001      	movs	r0, #1
 8024262:	e7e6      	b.n	8024232 <_raise_r+0x12>
 8024264:	2400      	movs	r4, #0
 8024266:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802426a:	4628      	mov	r0, r5
 802426c:	4798      	blx	r3
 802426e:	2000      	movs	r0, #0
 8024270:	e7df      	b.n	8024232 <_raise_r+0x12>
	...

08024274 <raise>:
 8024274:	4b02      	ldr	r3, [pc, #8]	; (8024280 <raise+0xc>)
 8024276:	4601      	mov	r1, r0
 8024278:	6818      	ldr	r0, [r3, #0]
 802427a:	f7ff bfd1 	b.w	8024220 <_raise_r>
 802427e:	bf00      	nop
 8024280:	20000020 	.word	0x20000020

08024284 <_kill_r>:
 8024284:	b538      	push	{r3, r4, r5, lr}
 8024286:	4d07      	ldr	r5, [pc, #28]	; (80242a4 <_kill_r+0x20>)
 8024288:	2300      	movs	r3, #0
 802428a:	4604      	mov	r4, r0
 802428c:	4608      	mov	r0, r1
 802428e:	4611      	mov	r1, r2
 8024290:	602b      	str	r3, [r5, #0]
 8024292:	f7de f97f 	bl	8002594 <_kill>
 8024296:	1c43      	adds	r3, r0, #1
 8024298:	d102      	bne.n	80242a0 <_kill_r+0x1c>
 802429a:	682b      	ldr	r3, [r5, #0]
 802429c:	b103      	cbz	r3, 80242a0 <_kill_r+0x1c>
 802429e:	6023      	str	r3, [r4, #0]
 80242a0:	bd38      	pop	{r3, r4, r5, pc}
 80242a2:	bf00      	nop
 80242a4:	2000c344 	.word	0x2000c344

080242a8 <_getpid_r>:
 80242a8:	f7de b96c 	b.w	8002584 <_getpid>

080242ac <_init>:
 80242ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80242ae:	bf00      	nop
 80242b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80242b2:	bc08      	pop	{r3}
 80242b4:	469e      	mov	lr, r3
 80242b6:	4770      	bx	lr

080242b8 <_fini>:
 80242b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80242ba:	bf00      	nop
 80242bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80242be:	bc08      	pop	{r3}
 80242c0:	469e      	mov	lr, r3
 80242c2:	4770      	bx	lr
